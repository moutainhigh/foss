<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC 
	"-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- salesProduct salesProduct-mapper.xml 营业部适用产品 -->
<mapper namespace="foss.bse.bse-baseinfo.salesProduct" >

	<resultMap id="salesProductQueryResultMap"
   			type="com.deppon.foss.module.base.baseinfo.api.shared.domain.SalesProductEntity">
		<result property="id" column="ID"  jdbcType="VARCHAR" />
		<result property="virtualCode" column="VIRTUAL_CODE"  jdbcType="VARCHAR" />
		<result property="productCode" column="PRODUCT_CODE"  jdbcType="VARCHAR" />
		<result property="productName" column="PRODUCT_NAME"  jdbcType="VARCHAR" />
		<result property="salesDeptCode" column="SALES_DEPT_CODE"  jdbcType="VARCHAR" />
		<result property="salesName" column="SALES_NAME"  jdbcType="VARCHAR" />
		<result property="salesType" column="SALES_TYPE"  jdbcType="VARCHAR" />
		<result property="versionNo" column="VERSION_NO"  jdbcType="NUMERIC" />
		<result property="active" column="ACTIVE"  jdbcType="CHAR" />
		<result property="createDate" column="CREATE_TIME"  jdbcType="TIMESTAMP" />
		<result property="modifyDate" column="MODIFY_TIME"  jdbcType="TIMESTAMP" />
		<result property="createUser" column="CREATE_USER_CODE"  jdbcType="VARCHAR" />
		<result property="modifyUser" column="MODIFY_USER_CODE"  jdbcType="VARCHAR" />
	</resultMap>

	<!-- 插入数据 ： -->
	<insert id="addSalesProduct"
		parameterType="com.deppon.foss.module.base.baseinfo.api.shared.domain.SalesProductEntity">
		INSERT/** 综合:插入数据**/ INTO BSE.T_BAS_PRO_SALESDEPT(
		ID,
		VIRTUAL_CODE,
		PRODUCT_CODE,
		PRODUCT_NAME,
		SALES_DEPT_CODE,
		SALES_NAME,
		SALES_TYPE,
		VERSION_NO,
		ACTIVE,
		CREATE_TIME,
		MODIFY_TIME,
		CREATE_USER_CODE,
		MODIFY_USER_CODE) VALUES	
	(
		#{id, jdbcType=VARCHAR},
		#{virtualCode, jdbcType=VARCHAR},
		#{productCode, jdbcType=VARCHAR},
		#{productName, jdbcType=VARCHAR},
		#{salesDeptCode, jdbcType=VARCHAR},
		#{salesName, jdbcType=VARCHAR},
		#{salesType, jdbcType=VARCHAR},
		#{versionNo, jdbcType=NUMERIC},
		#{active, jdbcType=CHAR},
		#{createDate, jdbcType=TIMESTAMP},
		#{modifyDate, jdbcType=TIMESTAMP},
		#{createUser, jdbcType=VARCHAR},
		#{modifyUser, jdbcType=VARCHAR}
	)
	</insert> 

	<!-- 根据VIRTUAL_CODE 作废数据： -->
	<update id="deleteSalesProduct" 
		parameterType="map">
		UPDATE/** 综合:根据VIRTUAL_CODE 作废数据**/ BSE.T_BAS_PRO_SALESDEPT A 
		SET A.ACTIVE=#{entity.active,jdbcType=CHAR},
			A.VERSION_NO=#{entity.versionNo,jdbcType=NUMERIC},
			A.MODIFY_USER_CODE=#{entity.modifyUser,jdbcType=VARCHAR}, 
			A.MODIFY_TIME = #{entity.modifyDate,jdbcType=TIMESTAMP} 
		<where>
			A.VIRTUAL_CODE=#{entity.virtualCode,jdbcType=VARCHAR} 
			AND  A.ACTIVE=#{conditionActive,jdbcType=CHAR}
		</where>
	</update>

	<!-- 根据VIRTUAL_CODE批量作废 -->
	<update id="deleteSalesProductMore"
		parameterType="map">
		UPDATE/** 综合:根据VIRTUAL_CODE批量作废**/ BSE.T_BAS_PRO_SALESDEPT A 
		SET A.ACTIVE=#{entity.active,jdbcType=CHAR},
			A.VERSION_NO=#{entity.versionNo,jdbcType=NUMERIC},
			A.MODIFY_USER_CODE=#{entity.modifyUser,jdbcType=VARCHAR}, 
			A.MODIFY_TIME = #{entity.modifyDate,jdbcType=TIMESTAMP} 
        <where>
            <if test="codes!=null and codes.length > 0">
                A.VIRTUAL_CODE in
                <foreach collection="codes"  index="index" item="code"  open="(" separator="," close=")">  
	            #{code} 
	            </foreach>
            </if>
            AND  A.ACTIVE=#{conditionActive,jdbcType=CHAR}
        </where>       
	</update>

	<!-- 根据VIRTUAL_CODE 更新数据：由于更新是先作废再插入，所以这个映射用不上： -->
	<update id="updateSalesProduct" 
		parameterType="com.deppon.foss.module.base.baseinfo.api.shared.domain.SalesProductEntity">
		UPDATE/** 综合:根据VIRTUAL_CODE 更新数据：由于更新是先作废再插入，所以这个映射用不上**/ BSE.T_BAS_PRO_SALESDEPT A SET 
		A.ID = #{id, jdbcType=VARCHAR},
		A.VIRTUAL_CODE = #{virtualCode, jdbcType=VARCHAR},
		A.PRODUCT_CODE = #{productCode, jdbcType=VARCHAR},
		A.PRODUCT_NAME = #{productName, jdbcType=VARCHAR},
		A.SALES_DEPT_CODE = #{salesDeptCode, jdbcType=VARCHAR},
		A.SALES_NAME = #{salesName, jdbcType=VARCHAR},
		A.SALES_TYPE = #{salesType, jdbcType=VARCHAR},
		A.VERSION_NO=#{versionNo,jdbcType=NUMERIC},
		A.ACTIVE = #{active, jdbcType=CHAR},
		A.CREATE_TIME = #{createDate, jdbcType=TIMESTAMP},
		A.MODIFY_TIME = #{modifyDate, jdbcType=TIMESTAMP},
		A.CREATE_USER_CODE = #{createUser, jdbcType=VARCHAR},
		A.MODIFY_USER_CODE = #{modifyUser, jdbcType=VARCHAR}
		<where>
			A.VIRTUAL_CODE = #{virtualCode,jdbcType=VARCHAR}	
		</where>
	</update>


	<!-- 以下全为查询 -->

	<sql id="query_salesProduct_param">
		A.ID AS ID,		/** ID     **/ 
		A.VIRTUAL_CODE AS VIRTUAL_CODE,		/** 虚拟编码     **/ 
		A.PRODUCT_CODE AS PRODUCT_CODE,		/** 产品编码     **/ 
		A.PRODUCT_NAME AS PRODUCT_NAME,		/** 产品名称     **/ 
		A.SALES_DEPT_CODE AS SALES_DEPT_CODE,		/** 营业部编码     **/ 
		B.NAME AS SALES_NAME,		/** 营业部名称     **/ 
		A.SALES_TYPE AS SALES_TYPE,		/** 营业部类型     **/ 
		A.VERSION_NO AS VERSION_NO,		/** 数据版本号     **/ 
		A.ACTIVE AS ACTIVE,		/** 是否启用     **/ 
		A.CREATE_TIME AS CREATE_TIME,		/** 创建时间     **/ 
		A.MODIFY_TIME AS MODIFY_TIME,		/** 更新时间     **/ 
		A.CREATE_USER_CODE AS CREATE_USER_CODE,		/** 创建人     **/ 
		A.MODIFY_USER_CODE AS MODIFY_USER_CODE		/** 更新人     **/
	</sql>

	<!-- 根据 VIRTUAL_CODE 精确查询数据 -->
	<select id="querySalesProductByVirtualCode" resultMap="salesProductQueryResultMap"
		parameterType="com.deppon.foss.module.base.baseinfo.api.shared.domain.SalesProductEntity">
		<![CDATA[
		  SELECT 
		  /** 综合:根据 VIRTUAL_CODE 精确查询数据**/
		]]>
		<include refid="query_salesProduct_param" />
		<![CDATA[
	    	FROM BSE.T_BAS_PRO_SALESDEPT A 
	    		LEFT JOIN BSE.T_BAS_ORG B ON A.SALES_DEPT_CODE = B.CODE AND B.ACTIVE =  #{active,jdbcType=CHAR}
		]]>
		<where>
			A.VIRTUAL_CODE=#{virtualCode} 
			AND A.ACTIVE= #{active,jdbcType=CHAR}
		</where>
	</select>

	<!-- 根据 VIRTUAL_CODE 批量精确查询数据 -->
	<select id="querySalesProductBatchByVirtualCode" resultMap="salesProductQueryResultMap"
		parameterType="map">
		<![CDATA[
		  SELECT 
		  /** 综合:根据 VIRTUAL_CODE 批量精确查询数据**/
		]]>
		<include refid="query_salesProduct_param" />
		<![CDATA[
	    	FROM BSE.T_BAS_PRO_SALESDEPT A 
	    		LEFT JOIN BSE.T_BAS_ORG B ON A.SALES_DEPT_CODE = B.CODE AND B.ACTIVE =  #{active,jdbcType=CHAR}
		]]>
		<where>
			<if test="codes!=null and codes.length > 0">
                A.VIRTUAL_CODE in
                <foreach collection="codes"  index="index" item="code"  open="(" separator="," close=")">  
	            #{code,jdbcType=VARCHAR} 
	            </foreach>
            </if> 
			AND A.ACTIVE= #{active,jdbcType=CHAR}
		</where>
	</select>

	<!-- 根据entity精确查询的查询条件 ，如果属性为空，则此属性不作为条件-->
	<sql id="query_querySalesProductExactByEntity_condition">		
		<where>
	      	<if test="id!=null and id != ''">
	        	AND A.ID = #{id,jdbcType=VARCHAR} 
	      	</if>
	      	<if test="virtualCode!=null and virtualCode != ''">
	        	AND A.VIRTUAL_CODE = #{virtualCode,jdbcType=VARCHAR} 
	      	</if>
	      	<if test="productCode!=null and productCode != ''">
	        	AND A.PRODUCT_CODE = #{productCode,jdbcType=VARCHAR} 
	      	</if>
	      	<if test="productName!=null and productName != ''">
	        	AND A.PRODUCT_NAME = #{productName,jdbcType=VARCHAR} 
	      	</if>
	      	<if test="salesDeptCode!=null and salesDeptCode != ''">
	        	AND A.SALES_DEPT_CODE = #{salesDeptCode,jdbcType=VARCHAR} 
	      	</if>
	      	<if test="salesName!=null and salesName != ''">
	        	AND A.SALES_NAME = #{salesName,jdbcType=VARCHAR} 
	      	</if>
	      	<if test="salesType!=null and salesType != ''">
	        	AND A.SALES_TYPE = #{salesType,jdbcType=VARCHAR} 
	      	</if>
	      	<if test="versionNo!=null and versionNo != ''">
	        	AND A.VERSION_NO = #{versionNo,jdbcType=VARCHAR} 
	      	</if>	
	      	AND A.ACTIVE =  #{active,jdbcType=CHAR} 
		</where>
	</sql>
	<!-- 根据实体动态条件精确查询,如果属性的值为null或者空白则无效： -->
	<select id="querySalesProductExactByEntity" resultMap="salesProductQueryResultMap"
		parameterType="com.deppon.foss.module.base.baseinfo.api.shared.domain.SalesProductEntity">
		<![CDATA[
		  SELECT 
		  /** 综合:根据实体动态条件精确查询,如果属性的值为null或者空白则无效**/
		]]>
		<include refid="query_salesProduct_param" />
		<![CDATA[
	    	FROM BSE.T_BAS_PRO_SALESDEPT A 
	    		LEFT JOIN BSE.T_BAS_ORG B ON A.SALES_DEPT_CODE = B.CODE AND B.ACTIVE =  #{active,jdbcType=CHAR}
		]]>
		<include refid="query_querySalesProductExactByEntity_condition" />
	</select>
	<!-- 根据实体动态条件精确查询总数,如果属性的值为null或者空白则无效： -->
	<select id="querySalesProductExactByEntityCount" resultType="Long"
		parameterType="com.deppon.foss.module.base.baseinfo.api.shared.domain.SalesProductEntity">
		<![CDATA[
			 SELECT/** 综合:根据实体动态条件精确查询总数,如果属性的值为null或者空白则无效**/ count(*) 
			 FROM BSE.T_BAS_PRO_SALESDEPT A 
			 	LEFT JOIN BSE.T_BAS_ORG B ON A.SALES_DEPT_CODE = B.CODE AND B.ACTIVE =  #{active,jdbcType=CHAR}
		]]>
		<include refid="query_querySalesProductExactByEntity_condition" />
	</select>

	<!-- 根据entity模糊查询,如果属��的值为null或者空白则无效： -->
	<sql id="query_querySalesProductByEntity_condition">		
		<where>
	      	<if test="id!=null and id != ''">
	        	AND A.ID like CONCAT(CONCAT('%', #{id,jdbcType=VARCHAR}), '%') 
	      	</if>
	      	<if test="virtualCode!=null and virtualCode != ''">
	        	AND A.VIRTUAL_CODE like CONCAT(CONCAT('%', #{virtualCode,jdbcType=VARCHAR}), '%') 
	      	</if>
	      	<if test="productCode!=null and productCode != ''">
	        	AND A.PRODUCT_CODE like CONCAT(CONCAT('%', #{productCode,jdbcType=VARCHAR}), '%') 
	      	</if>
	      	<if test="productName!=null and productName != ''">
	        	AND A.PRODUCT_NAME like CONCAT(CONCAT('%', #{productName,jdbcType=VARCHAR}), '%') 
	      	</if>
	      	<if test="salesDeptCode!=null and salesDeptCode != ''">
	        	AND A.SALES_DEPT_CODE like CONCAT(CONCAT('%', #{salesDeptCode,jdbcType=VARCHAR}), '%') 
	      	</if>
	      	<if test="salesName!=null and salesName != ''">
	        	AND A.SALES_NAME like CONCAT(CONCAT('%', #{salesName,jdbcType=VARCHAR}), '%') 
	      	</if>
	      	<if test="salesType!=null and salesType != ''">
	        	AND A.SALES_TYPE like CONCAT(CONCAT('%', #{salesType,jdbcType=VARCHAR}), '%') 
	      	</if>
	      	<if test="versionNo!=null and versionNo != ''">
	        	AND A.VERSION_NO like CONCAT(CONCAT('%', #{versionNo,jdbcType=VARCHAR}), '%') 
	      	</if>
			AND A.ACTIVE= #{active,jdbcType=CHAR}
		</where>
	</sql>
	<!-- 根据实体动态条件模糊查询,如果属性的值为null或者空白则无效： -->
	<select id="querySalesProductByEntity" resultMap="salesProductQueryResultMap"
		parameterType="com.deppon.foss.module.base.baseinfo.api.shared.domain.SalesProductEntity">
		<![CDATA[
		  SELECT 
		  /** 综合:根据实体动态条件模糊查询,如果属性的值为null或者空白则无效**/
		]]>
		<include refid="query_salesProduct_param" />
		<![CDATA[
	    	FROM BSE.T_BAS_PRO_SALESDEPT A 
	    		LEFT JOIN BSE.T_BAS_ORG B ON A.SALES_DEPT_CODE = B.CODE AND B.ACTIVE =  #{active,jdbcType=CHAR}
		]]>
		<include refid="query_querySalesProductByEntity_condition" />
	</select>
	<!-- 根据实体动态条件模糊查询总数,如果属性的值为null或者空白则无效： -->
	<select id="querySalesProductByEntityCount" resultType="Long"
		parameterType="com.deppon.foss.module.base.baseinfo.api.shared.domain.SalesProductEntity">
		<![CDATA[
			 SELECT/** 综合:根据实体动态条件模糊查询总数,如果属性的值为null或者空白则无效**/ count(*) 
			 FROM BSE.T_BAS_PRO_SALESDEPT A 
			 	LEFT JOIN BSE.T_BAS_ORG B ON A.SALES_DEPT_CODE = B.CODE AND B.ACTIVE =  #{active,jdbcType=CHAR}
		]]>
		<include refid="query_querySalesProductByEntity_condition" />
	</select>

	<!-- 查询所有 营业部适用产品 信息 以供下载
	zxy 20131021  BUG-55198 修改：分页数据下不全，把 ORDER BY A.VERSION_NO ASC 改成  ORDER BY A.id ASC 20131024 恢复
	 -->
	<select id="querySalesProductForDownload"
		parameterType="com.deppon.foss.module.base.baseinfo.api.shared.domain.SalesProductEntity"
		resultMap="salesProductQueryResultMap">
		<![CDATA[
			SELECT
			/** 综合:查询所有 营业部适用产品 信息 以供下载**/
		]]>
		<include refid="query_salesProduct_param" />
		<![CDATA[
			FROM BSE.T_BAS_PRO_SALESDEPT A 
				LEFT JOIN BSE.T_BAS_ORG B ON A.SALES_DEPT_CODE = B.CODE AND B.ACTIVE = 'Y'

		]]>
		<where>
			<if test="versionNo != null">
				AND A.VERSION_NO >= #{versionNo,jdbcType=NUMERIC}
			</if>
	      	<if test="virtualCode!=null and virtualCode != ''">
	        	AND A.VIRTUAL_CODE = #{virtualCode,jdbcType=VARCHAR} 
	      	</if>
			<if test="active != null and active != ''">
				AND A.ACTIVE = #{active,jdbcType=CHAR}
				
			</if>
		</where>
		<![CDATA[
			ORDER BY A.VERSION_NO,A.ID ASC
		]]>
	</select>
	
	
	<!-- 下面是特殊方法 -->
	
	<!-- 根据营业部编码SalesDeptCode,产品的业务部门类型SALES_TYPE（是出发部门还是到达部门），作废营业部适用产品 -->
	<update id="deleteSalesProductBySalesDeptCode"
		parameterType="map">
		UPDATE/** 综合:根据营业部编码SalesDeptCode,产品的业务部门类型SALES_TYPE（是出发部门还是到达部门），作废营业部适用产品**/ BSE.T_BAS_PRO_SALESDEPT A 
		SET A.ACTIVE=#{entity.active,jdbcType=CHAR},
			A.VERSION_NO=#{entity.versionNo,jdbcType=NUMERIC},
			A.MODIFY_USER_CODE=#{entity.modifyUser,jdbcType=VARCHAR}, 
			A.MODIFY_TIME = #{entity.modifyDate,jdbcType=TIMESTAMP} 
        <where>
            A.SALES_DEPT_CODE =#{entity.salesDeptCode,jdbcType=VARCHAR} 
            
	      	<if test="salesType!=null and salesType != ''">
	        	AND A.SALES_TYPE = #{salesType,jdbcType=VARCHAR} 
	      	</if>
            AND  A.ACTIVE=#{conditionActive,jdbcType=CHAR}
        </where>       
	</update>

	<!-- 批量插入 -->
	<insert id="addSalesProductBatch" parameterType="java.util.List">
	<![CDATA[
	INSERT INTO /** 综合:新增 营业部适用产品  **/ BSE.T_BAS_PRO_SALESDEPT(
		ID,
		VIRTUAL_CODE,
		PRODUCT_CODE,
		PRODUCT_NAME,
		SALES_DEPT_CODE,
		SALES_NAME,
		SALES_TYPE,
		VERSION_NO,
		ACTIVE,
		CREATE_TIME,
		MODIFY_TIME,
		CREATE_USER_CODE,
		MODIFY_USER_CODE
	)
	]]>
		<foreach collection="list" item="item" index="index"
			separator="union all">
			SELECT
			#{item.id, jdbcType=VARCHAR},
			#{item.virtualCode, jdbcType=VARCHAR},
			#{item.productCode, jdbcType=VARCHAR},
			#{item.productName, jdbcType=VARCHAR},
			#{item.salesDeptCode, jdbcType=VARCHAR},
			#{item.salesName, jdbcType=VARCHAR},
			#{item.salesType, jdbcType=VARCHAR},
			#{item.versionNo, jdbcType=NUMERIC},
			#{item.active, jdbcType=CHAR},
			#{item.createDate, jdbcType=TIMESTAMP},
			#{item.modifyDate, jdbcType=TIMESTAMP},
			#{item.createUser, jdbcType=VARCHAR},
			#{item.modifyUser, jdbcType=VARCHAR}
			FROM dual
		</foreach>
	</insert>
</mapper>
