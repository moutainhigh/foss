<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC 
	"-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- salesMotorcade salesMotorcade-mapper.xml 营业部车队关系 -->
<mapper namespace="foss.bse.bse-baseinfo.salesMotorcade" >

	<resultMap id="salesMotorcadeQueryResultMap"
   			type="com.deppon.foss.module.base.baseinfo.api.shared.domain.SalesMotorcadeEntity">
		<result property="id" column="ID"  jdbcType="VARCHAR" />
		<result property="virtualCode" column="VIRTUAL_CODE"  jdbcType="VARCHAR" />
		<result property="salesdeptCode" column="SALESDEPT_CODE"  jdbcType="VARCHAR" />
		<result property="motorcadeCode" column="MOTORCADE_CODE"  jdbcType="VARCHAR" />
		<result property="salesdeptName" column="SALESDEPT_NAME"  jdbcType="VARCHAR" />
		<result property="motorcadeName" column="MOTORCADE_NAME"  jdbcType="VARCHAR" />
		
		<result property="createDate" column="CREATE_TIME"  jdbcType="TIMESTAMP" />
		<result property="modifyDate" column="MODIFY_TIME"  jdbcType="TIMESTAMP" />
		<result property="active" column="ACTIVE"  jdbcType="CHAR" />
		<result property="createUser" column="CREATE_USER_CODE"  jdbcType="VARCHAR" />
		<result property="modifyUser" column="MODIFY_USER_CODE"  jdbcType="VARCHAR" />
	</resultMap>

	<!-- 插入数据 ： -->
	<insert id="addSalesMotorcade"
		parameterType="com.deppon.foss.module.base.baseinfo.api.shared.domain.SalesMotorcadeEntity">
		INSERT/** 综合:插入数据 **/ INTO BSE.T_BAS_SALESDEPT_MOTORCADE(
		ID,
		VIRTUAL_CODE,
		SALESDEPT_CODE,
		MOTORCADE_CODE,
		CREATE_TIME,
		MODIFY_TIME,
		ACTIVE,
		CREATE_USER_CODE,
		MODIFY_USER_CODE) VALUES	
	(
		#{id, jdbcType=VARCHAR},
		#{virtualCode, jdbcType=VARCHAR},
		#{salesdeptCode, jdbcType=VARCHAR},
		#{motorcadeCode, jdbcType=VARCHAR},
		#{createDate, jdbcType=TIMESTAMP},
		#{modifyDate, jdbcType=TIMESTAMP},
		#{active, jdbcType=CHAR},
		#{createUser, jdbcType=VARCHAR},
		#{modifyUser, jdbcType=VARCHAR}
	)
	</insert> 

	<!-- 根据VIRTUAL_CODE 作废数据： -->
	<update id="deleteSalesMotorcade" 
		parameterType="map">
		UPDATE/** 综合:根据VIRTUAL_CODE 作废数据 **/ BSE.T_BAS_SALESDEPT_MOTORCADE A 
		SET A.ACTIVE=#{entity.active,jdbcType=CHAR},
			A.MODIFY_USER_CODE=#{entity.modifyUser,jdbcType=VARCHAR}, 
			A.MODIFY_TIME = #{entity.modifyDate,jdbcType=TIMESTAMP} 
		<where>
			A.VIRTUAL_CODE=#{entity.virtualCode,jdbcType=VARCHAR} 
			AND  A.ACTIVE=#{conditionActive,jdbcType=CHAR}
		</where>
	</update>

	<!-- 根据VIRTUAL_CODE批量作废 -->
	<update id="deleteSalesMotorcadeMore"
		parameterType="map">
		UPDATE/** 综合:根据VIRTUAL_CODE批量作废 **/ BSE.T_BAS_SALESDEPT_MOTORCADE A 
		SET A.ACTIVE=#{entity.active,jdbcType=CHAR},
			A.MODIFY_USER_CODE=#{entity.modifyUser,jdbcType=VARCHAR}, 
			A.MODIFY_TIME = #{entity.modifyDate,jdbcType=TIMESTAMP} 
        <where>
            <if test="codes!=null and codes.length > 0">
                A.VIRTUAL_CODE in
                <foreach collection="codes"  index="index" item="code"  open="(" separator="," close=")">  
	            #{code} 
	            </foreach>
            </if>
            AND  A.ACTIVE=#{conditionActive,jdbcType=CHAR}
        </where>       
	</update>

	<!-- 根据VIRTUAL_CODE 更新数据：由于更新是先作废再插入，所以这个映射用不上： -->
	<update id="updateSalesMotorcade" 
		parameterType="com.deppon.foss.module.base.baseinfo.api.shared.domain.SalesMotorcadeEntity">
		UPDATE/** 综合:根据VIRTUAL_CODE 更新数据：由于更新是先作废再插入，所以这个映射用不上 **/ BSE.T_BAS_SALESDEPT_MOTORCADE A SET 
		A.ID = #{id, jdbcType=VARCHAR},
		A.VIRTUAL_CODE = #{virtualCode, jdbcType=VARCHAR},
		A.SALESDEPT_CODE = #{salesdeptCode, jdbcType=VARCHAR},
		A.MOTORCADE_CODE = #{motorcadeCode, jdbcType=VARCHAR},
		A.CREATE_TIME = #{createDate, jdbcType=TIMESTAMP},
		A.MODIFY_TIME = #{modifyDate, jdbcType=TIMESTAMP},
		A.ACTIVE = #{active, jdbcType=CHAR},
		A.CREATE_USER_CODE = #{createUser, jdbcType=VARCHAR},
		A.MODIFY_USER_CODE = #{modifyUser, jdbcType=VARCHAR}
		<where>
			A.VIRTUAL_CODE = #{virtualCode,jdbcType=VARCHAR}	
		</where>
	</update>


	<!-- 以下全为查询 -->

	<sql id="query_salesMotorcade_param">
		A.ID AS ID,		/** ID     **/ 
		A.VIRTUAL_CODE AS VIRTUAL_CODE,		/** 虚拟编码     **/ 
		A.SALESDEPT_CODE AS SALESDEPT_CODE,		/** 营业部编码     **/ 
		A.MOTORCADE_CODE AS MOTORCADE_CODE,		/** 车队编码     **/ 
		C.NAME AS SALESDEPT_NAME,
		D.NAME AS MOTORCADE_NAME,
		A.CREATE_TIME AS CREATE_TIME,		/** 创建时间     **/ 
		A.MODIFY_TIME AS MODIFY_TIME,		/** 更新时间     **/ 
		A.ACTIVE AS ACTIVE,		/** 是否启用     **/ 
		A.CREATE_USER_CODE AS CREATE_USER_CODE,		/** 创建人     **/ 
		A.MODIFY_USER_CODE AS MODIFY_USER_CODE		/** 更新人     **/
	</sql>

	<!-- 根据 VIRTUAL_CODE 精确查询数据 -->
	<select id="querySalesMotorcadeByVirtualCode" resultMap="salesMotorcadeQueryResultMap"
		parameterType="com.deppon.foss.module.base.baseinfo.api.shared.domain.SalesMotorcadeEntity">
		<![CDATA[
		  SELECT 
		  /** 综合:根据 VIRTUAL_CODE 精确查询数据 **/
		]]>
		<include refid="query_salesMotorcade_param" />
		<![CDATA[
	    	FROM BSE.T_BAS_SALESDEPT_MOTORCADE A 
	    		LEFT JOIN BSE.T_BAS_ORG C ON C.CODE=A.SALESDEPT_CODE AND C.ACTIVE=#{active,jdbcType=CHAR} 
	    		LEFT JOIN BSE.T_BAS_ORG D ON D.CODE=A.MOTORCADE_CODE AND D.ACTIVE=#{active,jdbcType=CHAR} 
		]]>
		<where>
			A.VIRTUAL_CODE=#{virtualCode} 
			AND A.ACTIVE= #{active,jdbcType=CHAR}
		</where>
	</select>
	<!-- 根据 SALESDEPT_CODE和 MOTORCADE_CODE精确查询数据 -->
	<select id="querySalesMotorcadeBySalesCodeAndMotorCode" resultMap="salesMotorcadeQueryResultMap"
		parameterType="com.deppon.foss.module.base.baseinfo.api.shared.domain.SalesMotorcadeEntity">
		<![CDATA[
		  SELECT 
		  /** 综合:根据 VIRTUAL_CODE 精确查询数据 **/
		]]>
		<include refid="query_salesMotorcade_param" />
		<![CDATA[
	    	FROM BSE.T_BAS_SALESDEPT_MOTORCADE A 
	    		LEFT JOIN BSE.T_BAS_ORG C ON C.CODE=A.SALESDEPT_CODE AND C.ACTIVE=#{active,jdbcType=CHAR} 
	    		LEFT JOIN BSE.T_BAS_ORG D ON D.CODE=A.MOTORCADE_CODE AND D.ACTIVE=#{active,jdbcType=CHAR} 
		]]>
		<where>
			<if test="salesdeptCode!=null and salesdeptCode != ''">
	             A.SALESDEPT_CODE = #{salesdeptCode,jdbcType=VARCHAR} 
	      	</if>
	      	<if test="motorcadeCode!=null and motorcadeCode != ''">
	        	AND A.MOTORCADE_CODE = #{motorcadeCode,jdbcType=VARCHAR} 
	      	</if>
			AND A.ACTIVE= #{active,jdbcType=CHAR}
		</where>
	</select>

	<!-- 根据 VIRTUAL_CODE 批量精确查询数据 -->
	<select id="querySalesMotorcadeBatchByVirtualCode" resultMap="salesMotorcadeQueryResultMap"
		parameterType="map">
		<![CDATA[
		  SELECT 
		  /** 综合:根据 VIRTUAL_CODE 批量精确查询数据**/
		]]>
		<include refid="query_salesMotorcade_param" />
		<![CDATA[
	    	FROM BSE.T_BAS_SALESDEPT_MOTORCADE A 
	    		LEFT JOIN BSE.T_BAS_ORG C ON C.CODE=A.SALESDEPT_CODE AND C.ACTIVE=#{active,jdbcType=CHAR} 
	    		LEFT JOIN BSE.T_BAS_ORG D ON D.CODE=A.MOTORCADE_CODE AND D.ACTIVE=#{active,jdbcType=CHAR} 
		]]>
		<where>
			<if test="codes!=null and codes.length > 0">
                A.VIRTUAL_CODE in
                <foreach collection="codes"  index="index" item="code"  open="(" separator="," close=")">  
	            #{code,jdbcType=VARCHAR} 
	            </foreach>
            </if> 
			AND A.ACTIVE= #{active,jdbcType=CHAR}
		</where>
	</select>

	<!-- 根据entity精确查询的查询条件 ，如果属性为空，则此属性不作为条件-->
	<sql id="query_querySalesMotorcadeExactByEntity_condition">		
		<where>
	      	<if test="id!=null and id != ''">
	        	AND A.ID = #{id,jdbcType=VARCHAR} 
	      	</if>
	      	<if test="virtualCode!=null and virtualCode != ''">
	        	AND A.VIRTUAL_CODE = #{virtualCode,jdbcType=VARCHAR} 
	      	</if>
	      	<if test="salesdeptCode!=null and salesdeptCode != ''">
	        	AND A.SALESDEPT_CODE = #{salesdeptCode,jdbcType=VARCHAR} 
	      	</if>
	      	<if test="motorcadeCode!=null and motorcadeCode != ''">
	        	AND A.MOTORCADE_CODE = #{motorcadeCode,jdbcType=VARCHAR} 
	      	</if>
	      	AND A.ACTIVE =  #{active,jdbcType=CHAR} 
		</where>
	</sql>
	<!-- 根据实体动态条件精确查询,如果属性的值为null或者空白则无效： -->
	<select id="querySalesMotorcadeExactByEntity" resultMap="salesMotorcadeQueryResultMap"
		parameterType="com.deppon.foss.module.base.baseinfo.api.shared.domain.SalesMotorcadeEntity">
		<![CDATA[
		  SELECT 
		  /** 综合:根据实体动态条件精确查询,如果属性的值为null或者空白则无效**/
		]]>
		<include refid="query_salesMotorcade_param" />
		<![CDATA[
	    	FROM BSE.T_BAS_SALESDEPT_MOTORCADE A 
	    		LEFT JOIN BSE.T_BAS_ORG C ON C.CODE=A.SALESDEPT_CODE AND C.ACTIVE=#{active,jdbcType=CHAR} 
	    		LEFT JOIN BSE.T_BAS_ORG D ON D.CODE=A.MOTORCADE_CODE AND D.ACTIVE=#{active,jdbcType=CHAR} 
		]]>
		<include refid="query_querySalesMotorcadeExactByEntity_condition" />
	</select>
	<!-- 根据实体动态条件精确查询总数,如果属性的值为null或者空白则无效： -->
	<select id="querySalesMotorcadeExactByEntityCount" resultType="Long"
		parameterType="com.deppon.foss.module.base.baseinfo.api.shared.domain.SalesMotorcadeEntity">
		<![CDATA[
			 SELECT/** 综合:根据实体动态条件精确查询总数,如果属性的值为null或者空白则无效**/ count(*) 
			 FROM BSE.T_BAS_SALESDEPT_MOTORCADE A 
		]]>
		<include refid="query_querySalesMotorcadeExactByEntity_condition" />
	</select>

	<!-- 根据entity模糊查询,如果属性的值为null或者空白则无效： -->
	<sql id="query_querySalesMotorcadeByEntity_condition">		
		<where>
	      	<if test="id!=null and id != ''">
	        	AND A.ID like CONCAT(CONCAT('%', #{id,jdbcType=VARCHAR}), '%') 
	      	</if>
	      	<if test="virtualCode!=null and virtualCode != ''">
	        	AND A.VIRTUAL_CODE like CONCAT(CONCAT('%', #{virtualCode,jdbcType=VARCHAR}), '%') 
	      	</if>
	      	<if test="salesdeptCode!=null and salesdeptCode != ''">
	        	AND A.SALESDEPT_CODE like CONCAT(CONCAT('%', #{salesdeptCode,jdbcType=VARCHAR}), '%') 
	      	</if>
	      	<if test="motorcadeCode!=null and motorcadeCode != ''">
	        	AND A.MOTORCADE_CODE like CONCAT(CONCAT('%', #{motorcadeCode,jdbcType=VARCHAR}), '%') 
	      	</if>
			AND A.ACTIVE= #{active,jdbcType=CHAR}
		</where>
	</sql>
	<!-- 根据实体动态条件模糊查询,如果属性的值为null或者空白则无效： -->
	<select id="querySalesMotorcadeByEntity" resultMap="salesMotorcadeQueryResultMap"
		parameterType="com.deppon.foss.module.base.baseinfo.api.shared.domain.SalesMotorcadeEntity">
		<![CDATA[
		  SELECT
		  /** 综合:根据实体动态条件模糊查询,如果属性的值为null或者空白则无效**/ 
		]]>
		<include refid="query_salesMotorcade_param" />
		<![CDATA[
	    	FROM BSE.T_BAS_SALESDEPT_MOTORCADE A 
	    		LEFT JOIN BSE.T_BAS_ORG C ON C.CODE=A.SALESDEPT_CODE AND C.ACTIVE=#{active,jdbcType=CHAR} 
	    		LEFT JOIN BSE.T_BAS_ORG D ON D.CODE=A.MOTORCADE_CODE AND D.ACTIVE=#{active,jdbcType=CHAR} 
		]]>
		<include refid="query_querySalesMotorcadeByEntity_condition" />
	</select>
	<!-- 根据实体动态条件模糊查询总数,如果属性的值为null或者空白则无效： -->
	<select id="querySalesMotorcadeByEntityCount" resultType="Long"
		parameterType="com.deppon.foss.module.base.baseinfo.api.shared.domain.SalesMotorcadeEntity">
		<![CDATA[
			 SELECT/** 综合:根据实体动态条件模糊查询总数,如果属性的值为null或者空白则无效**/ count(*) 
			 FROM BSE.T_BAS_SALESDEPT_MOTORCADE A 
		]]>
		<include refid="query_querySalesMotorcadeByEntity_condition" />
	</select>

	<!-- 查询所有 营业部车队关系 信息 以供下载 -->
	<select id="querySalesMotorcadeForDownload"
		parameterType="com.deppon.foss.module.base.baseinfo.api.shared.domain.SalesMotorcadeEntity"
		resultMap="salesMotorcadeQueryResultMap">
		<![CDATA[
			SELECT
			/** 综合:查询所有 营业部车队关系 信息 以供下载**/
		]]>
		<include refid="query_salesMotorcade_param" />
		<![CDATA[
			FROM BSE.T_BAS_SALESDEPT_MOTORCADE A 
	    		LEFT JOIN BSE.T_BAS_ORG C ON C.CODE=A.SALESDEPT_CODE AND C.ACTIVE=#{active,jdbcType=CHAR} 
	    		LEFT JOIN BSE.T_BAS_ORG D ON D.CODE=A.MOTORCADE_CODE AND D.ACTIVE=#{active,jdbcType=CHAR} 
		]]>
		<where>
			<if test="modifyDate != null ">
				AND MODIFY_TIME > #{modifyDate,jdbcType=TIMESTAMP}
			</if>
			<if test="active != null and active != ''">
				AND ACTIVE = #{active,jdbcType=CHAR}
			</if>
		</where>
	</select>
	
		
	
	<!-- 下面是特殊方法 -->
	
	<!-- 根据营业部编码salesdeptCode作废营业部的所有车队 -->
	<update id="deleteSalesMotorcadeBySalesdeptCode"
		parameterType="map">
		UPDATE/** 综合:根据营业部编码salesdeptCode作废营业部的所有车队**/ BSE.T_BAS_SALESDEPT_MOTORCADE A 
		SET A.ACTIVE=#{entity.active,jdbcType=CHAR},
			A.MODIFY_USER_CODE=#{entity.modifyUser,jdbcType=VARCHAR}, 
			A.MODIFY_TIME = #{entity.modifyDate,jdbcType=TIMESTAMP} 
        <where>
            A.SALESDEPT_CODE =#{entity.salesdeptCode,jdbcType=VARCHAR} 
            AND  A.ACTIVE=#{conditionActive,jdbcType=CHAR}
        </where>       
	</update>
	<!-- 根据车队编码motorcadeCode作废营业部的所有车队 -->
	<update id="deleteSalesMotorcadeByMotorcadeCode"
		parameterType="map">
		UPDATE/** 综合:根据车队编码motorcadeCode作废营业部的所有车队**/ BSE.T_BAS_SALESDEPT_MOTORCADE A 
		SET A.ACTIVE=#{entity.active,jdbcType=CHAR},
			A.MODIFY_USER_CODE=#{entity.modifyUser,jdbcType=VARCHAR}, 
			A.MODIFY_TIME = #{entity.modifyDate,jdbcType=TIMESTAMP} 
        <where>
            A.MOTORCADE_CODE =#{entity.motorcadeCode,jdbcType=VARCHAR} 
            AND  A.ACTIVE=#{conditionActive,jdbcType=CHAR}
        </where>       
	</update>
</mapper>
