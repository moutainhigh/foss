<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC 
	"-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="foss.bse.bse-baseinfo.employee">
	<!-- 员工表返回的结果集，单表查 -->
	<resultMap id="employeeSimpleResultMap"
		type="com.deppon.foss.module.base.baseinfo.api.shared.domain.EmployeeEntity">
		<id property="id" column="ID" />
		<result property="empName" column="EMP_NAME" />
		<result property="pinyin" column="PINYIN" />
		<result property="empCode" column="EMP_CODE" />
		<result property="gender" column="GENDER" />
		
		<result property="unifieldCode" column="UNIFIELD_CODE"  jdbcType="VARCHAR" />
		<result property="orgCode" column="ORG_CODE"  jdbcType="VARCHAR" />
		
		<result property="title" column="TITLE" />
		<result property="titleName" column="TITLENAME" />
		<result property="degree" column="DEGREE" />
		<result property="birthdate" column="BIRTHDATE" />
		<result property="status" column="STATUS" />
		<result property="entryDate" column="ENTRY_DATE" />
		<result property="leaveDate" column="LEAVE_DATE" />
		<result property="phone" column="PHONE" />
		<result property="identityCard" column="IDENTITY_CARD" />
		<result property="mobilePhone" column="MOBILE_PHONE" />
		<result property="email" column="EMAIL" />
		<result property="active" column="ACTIVE" />
		<result property="createUser" column="CREATE_USER_CODE"
			javaType="String" jdbcType="VARCHAR" />
		<result property="createDate" column="CREATE_TIME"
			javaType="Date" jdbcType="TIMESTAMP" />
		<result property="modifyUser" column="MODIFY_USER_CODE"
			javaType="String" jdbcType="VARCHAR" />
		<result property="modifyDate" column="MODIFY_TIME"
			javaType="Date" jdbcType="TIMESTAMP" />
	</resultMap>

	<!-- 单表查，操作的字段 -->
	<sql id="simple_param">
		ID,
		EMP_NAME, 
		PINYIN,
		EMP_CODE,
		GENDER,
		
		UNIFIELD_CODE,
		ORG_CODE,
		
		TITLE,
		DEGREE,
		BIRTHDATE,
		STATUS,
		ENTRY_DATE,
		LEAVE_DATE,
		PHONE,
		IDENTITY_CARD,
		MOBILE_PHONE,
		EMAIL,
		ACTIVE,
		CREATE_USER_CODE,
		CREATE_TIME,
		MODIFY_USER_CODE,
		MODIFY_TIME
	</sql>

	<!-- 员工表返回有别名的结果集，单表查 -->
	<resultMap id="employeeSimpleAliasResultMap"
		type="com.deppon.foss.module.base.baseinfo.api.shared.domain.EmployeeEntity">
		<id property="id" column="EMPLOYEE_ID" />
		<result property="empName" column="EMPLOYEE_EMP_NAME" />
		<result property="pinyin" column="EMPLOYEE_PINYIN" />
		<result property="empCode" column="EMPLOYEE_EMP_CODE" />
		<result property="gender" column="EMPLOYEE_GENDER" />
		
		<result property="unifieldCode" column="UNIFIELD_CODE"  jdbcType="VARCHAR" />
		<result property="orgCode" column="ORG_CODE"  jdbcType="VARCHAR" />
		
		<result property="title" column="EMPLOYEE_TITLE" />
		<result property="degree" column="EMPLOYEE_DEGREE" />
		<result property="birthdate" column="EMPLOYEE_BIRTHDATE" />
		<result property="status" column="EMPLOYEE_STATUS" />
		<result property="entryDate" column="EMPLOYEE_ENTRY_DATE" />
		<result property="leaveDate" column="EMPLOYEE_LEAVE_DATE" />
		<result property="phone" column="EMPLOYEE_PHONE" />
		<result property="identityCard" column="EMPLOYEE_IDENTITY_CARD" />
		<result property="mobilePhone" column="EMPLOYEE_MOBILE_PHONE" />
		<result property="email" column="EMPLOYEE_EMAIL" />
		<result property="active" column="EMPLOYEE_ACTIVE" />
		<result property="createUser" column="EMPLOYEE_CREATE_USER_CODE"
			javaType="String" jdbcType="VARCHAR" />
		<result property="createDate" column="EMPLOYEE_CREATE_TIME"
			javaType="Date" jdbcType="TIMESTAMP" />
		<result property="modifyUser" column="EMPLOYEE_MODIFY_USER_CODE"
			javaType="String" jdbcType="VARCHAR" />
		<result property="modifyDate" column="EMPLOYEE_MODIFY_TIME"
			javaType="Date" jdbcType="TIMESTAMP" />
	</resultMap>

	<!-- 单表查，操作有别名的字段 -->
	<sql id="select_simple_alias_param">
		EMPLOYEE.ID AS EMPLOYEE_ID,
		EMPLOYEE.EMP_NAME AS EMPLOYEE_EMP_NAME, 
		EMPLOYEE.PINYIN AS EMPLOYEE_PINYIN,
		EMPLOYEE.EMP_CODE AS EMPLOYEE_EMP_CODE,
		EMPLOYEE.GENDER AS EMPLOYEE_GENDER,
		
		EMPLOYEE.UNIFIELD_CODE AS UNIFIELD_CODE,
		EMPLOYEE.ORG_CODE AS ORG_CODE,
		
		EMPLOYEE.TITLE AS EMPLOYEE_TITLE,
		EMPLOYEE.DEGREE AS EMPLOYEE_DEGREE,
		EMPLOYEE.BIRTHDATE AS EMPLOYEE_BIRTHDATE,
		EMPLOYEE.STATUS AS EMPLOYEE_STATUS,
		EMPLOYEE.ENTRY_DATE AS EMPLOYEE_ENTRY_DATE,
		EMPLOYEE.LEAVE_DATE AS EMPLOYEE_LEAVE_DATE,
		EMPLOYEE.PHONE AS EMPLOYEE_PHONE,
		EMPLOYEE.IDENTITY_CARD AS EMPLOYEE_IDENTITY_CARD,
		EMPLOYEE.MOBILE_PHONE AS EMPLOYEE_MOBILE_PHONE,
		EMPLOYEE.EMAIL AS EMPLOYEE_EMAIL,
		EMPLOYEE.ACTIVE AS EMPLOYEE_ACTIVE,
		EMPLOYEE.CREATE_USER_CODE AS EMPLOYEE_CREATE_USER_CODE,
		EMPLOYEE.CREATE_TIME AS EMPLOYEE_CREATE_TIME,
		EMPLOYEE.MODIFY_USER_CODE AS EMPLOYEE_MODIFY_USER_CODE,
		EMPLOYEE.MODIFY_TIME AS EMPLOYEE_MODIFY_TIME
	</sql>

	<!-- 员工表返回的结果集，单表查，有关联对象 -->
	<resultMap id="employeeResultMap"
		type="com.deppon.foss.module.base.baseinfo.api.shared.domain.EmployeeEntity">
		<id property="id" column="EMPLOYEE_ID" />
		<result property="empName" column="EMPLOYEE_EMP_NAME" />
		<result property="pinyin" column="EMPLOYEE_PINYIN" />
		<result property="empCode" column="EMPLOYEE_EMP_CODE" />
		<result property="gender" column="EMPLOYEE_GENDER" />
		
		<result property="unifieldCode" column="UNIFIELD_CODE"  jdbcType="VARCHAR" />
		<result property="orgCode" column="ORG_CODE"  jdbcType="VARCHAR" />
		
		<result property="title" column="EMPLOYEE_TITLE" />
		<result property="degree" column="EMPLOYEE_DEGREE" />
		<result property="birthdate" column="EMPLOYEE_BIRTHDATE" />
		<result property="status" column="EMPLOYEE_STATUS" />
		<result property="entryDate" column="EMPLOYEE_ENTRY_DATE" />
		<result property="leaveDate" column="EMPLOYEE_LEAVE_DATE" />
		<result property="phone" column="EMPLOYEE_PHONE" />
		<result property="identityCard" column="EMPLOYEE_IDENTITY_CARD" />
		<result property="mobilePhone" column="EMPLOYEE_MOBILE_PHONE" />
		<result property="email" column="EMPLOYEE_EMAIL" />
		<result property="active" column="EMPLOYEE_ACTIVE" />
		<result property="createUser" column="EMPLOYEE_CREATE_USER_CODE"
			javaType="String" jdbcType="VARCHAR" />
		<result property="createDate" column="EMPLOYEE_CREATE_TIME"
			javaType="Date" jdbcType="TIMESTAMP" />
		<result property="modifyUser" column="EMPLOYEE_MODIFY_USER_CODE"
			javaType="String" jdbcType="VARCHAR" />
		<result property="modifyDate" column="EMPLOYEE_MODIFY_TIME"
			javaType="Date" jdbcType="TIMESTAMP" />
		<association property="department" column="EMPLOYEE_UNIFIELD_CODE"
				javaType="com.deppon.foss.module.base.baseinfo.api.shared.domain.OrgAdministrativeInfoEntity">
			<id property="id" column="EMPLOYEE_UNIFIELD_CODE" />
		</association>
	</resultMap>

	<!-- 单表查，操作的字段 -->
	<sql id="select_param">
		EMPLOYEE.ID AS EMPLOYEE_ID,
		EMPLOYEE.EMP_NAME AS EMPLOYEE_EMP_NAME, 
		EMPLOYEE.PINYIN AS EMPLOYEE_PINYIN,
		EMPLOYEE.EMP_CODE AS EMPLOYEE_EMP_CODE,
		EMPLOYEE.GENDER AS EMPLOYEE_GENDER,
		
		EMPLOYEE.UNIFIELD_CODE AS EMPLOYEE_UNIFIELD_CODE,
		EMPLOYEE.ORG_CODE AS EMPLOYEE_ORG_CODE,
		
		EMPLOYEE.TITLE AS EMPLOYEE_TITLE,
		EMPLOYEE.DEGREE AS EMPLOYEE_DEGREE,
		EMPLOYEE.BIRTHDATE AS EMPLOYEE_BIRTHDATE,
		EMPLOYEE.STATUS AS EMPLOYEE_STATUS,
		EMPLOYEE.ENTRY_DATE AS EMPLOYEE_ENTRY_DATE,
		EMPLOYEE.LEAVE_DATE AS EMPLOYEE_LEAVE_DATE,
		EMPLOYEE.PHONE AS EMPLOYEE_PHONE,
		EMPLOYEE.IDENTITY_CARD AS EMPLOYEE_IDENTITY_CARD,
		EMPLOYEE.MOBILE_PHONE AS EMPLOYEE_MOBILE_PHONE,
		EMPLOYEE.EMAIL AS EMPLOYEE_EMAIL,
		EMPLOYEE.ACTIVE AS EMPLOYEE_ACTIVE,
		EMPLOYEE.CREATE_USER_CODE AS EMPLOYEE_CREATE_USER_CODE,
		EMPLOYEE.CREATE_TIME AS EMPLOYEE_CREATE_TIME,
		EMPLOYEE.MODIFY_USER_CODE AS EMPLOYEE_MODIFY_USER_CODE,
		EMPLOYEE.MODIFY_TIME AS EMPLOYEE_MODIFY_TIME,
		EMPLOYEE.UNIFIELD_CODE AS EMPLOYEE_UNIFIELD_CODE
	</sql>

	<!-- 员工表返回的结果集，多表联查，连接部门表 -->
	<resultMap id="employeeAssociationResultMap"
		type="com.deppon.foss.module.base.baseinfo.api.shared.domain.EmployeeEntity">
		<id property="id" column="EMPLOYEE_ID" />
		<result property="empName" column="EMPLOYEE_EMP_NAME" />
		<result property="pinyin" column="EMPLOYEE_PINYIN" />
		<result property="empCode" column="EMPLOYEE_EMP_CODE" />
		<result property="gender" column="EMPLOYEE_GENDER" />
		
		<result property="unifieldCode" column="EMPLOYEE_UNIFIELD_CODE"  jdbcType="VARCHAR" />
		<result property="orgCode" column="EMPLOYEE_ORG_CODE"  jdbcType="VARCHAR" />
		
		<result property="title" column="EMPLOYEE_TITLE" />
		<result property="degree" column="EMPLOYEE_DEGREE" />
		<result property="birthdate" column="EMPLOYEE_BIRTHDATE" />
		<result property="status" column="EMPLOYEE_STATUS" />
		<result property="entryDate" column="EMPLOYEE_ENTRY_DATE" />
		<result property="leaveDate" column="EMPLOYEE_LEAVE_DATE" />
		<result property="phone" column="EMPLOYEE_PHONE" />
		<result property="identityCard" column="EMPLOYEE_IDENTITY_CARD" />
		<result property="mobilePhone" column="EMPLOYEE_MOBILE_PHONE" />
		<result property="email" column="EMPLOYEE_EMAIL" />
		<result property="active" column="EMPLOYEE_ACTIVE" />
		<result property="createUser" column="EMPLOYEE_CREATE_USER_CODE"
			javaType="String" jdbcType="VARCHAR" />
		<result property="createDate" column="EMPLOYEE_CREATE_TIME"
			javaType="Date" jdbcType="TIMESTAMP" />
		<result property="modifyUser" column="EMPLOYEE_MODIFY_USER_CODE"
			javaType="String" jdbcType="VARCHAR" />
		<result property="modifyDate" column="EMPLOYEE_MODIFY_TIME"
			javaType="Date" jdbcType="TIMESTAMP" />
		<association property="department" resultMap="foss.bse.bse-baseinfo.orgAdministrativeInfo.orgAssociationResultMap" />
	</resultMap>

	<!-- 多表联查，操作的字段 -->
	<sql id="employee_association_param">
		EMPLOYEE.ID AS EMPLOYEE_ID,
		EMPLOYEE.EMP_NAME AS EMPLOYEE_EMP_NAME, 
		EMPLOYEE.PINYIN AS EMPLOYEE_PINYIN,
		EMPLOYEE.EMP_CODE AS EMPLOYEE_EMP_CODE,
		EMPLOYEE.GENDER AS EMPLOYEE_GENDER,
		
		EMPLOYEE.UNIFIELD_CODE AS EMPLOYEE_UNIFIELD_CODE,
		EMPLOYEE.ORG_CODE AS EMPLOYEE_ORG_CODE,
		
		EMPLOYEE.TITLE AS EMPLOYEE_TITLE,
		EMPLOYEE.DEGREE AS EMPLOYEE_DEGREE,
		EMPLOYEE.BIRTHDATE AS EMPLOYEE_BIRTHDATE,
		EMPLOYEE.STATUS AS EMPLOYEE_STATUS,
		EMPLOYEE.ENTRY_DATE AS EMPLOYEE_ENTRY_DATE,
		EMPLOYEE.LEAVE_DATE AS EMPLOYEE_LEAVE_DATE,
		EMPLOYEE.PHONE AS EMPLOYEE_PHONE,
		EMPLOYEE.IDENTITY_CARD AS EMPLOYEE_IDENTITY_CARD,
		EMPLOYEE.MOBILE_PHONE AS EMPLOYEE_MOBILE_PHONE,
		EMPLOYEE.EMAIL AS EMPLOYEE_EMAIL,
		EMPLOYEE.ACTIVE AS EMPLOYEE_ACTIVE,
		EMPLOYEE.CREATE_USER_CODE AS EMPLOYEE_CREATE_USER_CODE,
		EMPLOYEE.CREATE_TIME AS EMPLOYEE_CREATE_TIME,
		EMPLOYEE.MODIFY_USER_CODE AS EMPLOYEE_MODIFY_USER_CODE,
		EMPLOYEE.MODIFY_TIME AS EMPLOYEE_MODIFY_TIME,
		EMPLOYEE.UNIFIELD_CODE AS EMPLOYEE_UNIFIELD_CODE,
		<include refid="foss.bse.bse-baseinfo.orgAdministrativeInfo.org_association_param" />
	</sql>
	
	
	
	<!-- 087584-foss-lijun 用户基本操作 -->
	<resultMap id="employeeQueryResultMap"
   			type="com.deppon.foss.module.base.baseinfo.api.shared.domain.EmployeeEntity">
		<result property="id" column="ID"  jdbcType="VARCHAR" />
		<result property="empName" column="EMP_NAME"  jdbcType="VARCHAR" />
		<result property="pinyin" column="PINYIN"  jdbcType="VARCHAR" />
		<result property="empCode" column="EMP_CODE"  jdbcType="VARCHAR" />
		<result property="gender" column="GENDER"  jdbcType="VARCHAR" />
		<result property="unifieldCode" column="UNIFIELD_CODE"  jdbcType="VARCHAR" />
		<result property="orgCode" column="ORG_CODE"  jdbcType="VARCHAR" />
		<result property="title" column="TITLE"  jdbcType="VARCHAR" />
		<result property="degree" column="DEGREE"  jdbcType="VARCHAR" />
		<result property="birthdate" column="BIRTHDATE"  jdbcType="TIMESTAMP" />
		<result property="status" column="STATUS"  jdbcType="VARCHAR" />
		<result property="phone" column="PHONE"  jdbcType="VARCHAR" />
		<result property="identityCard" column="IDENTITY_CARD"  jdbcType="VARCHAR" />
		<result property="entryDate" column="ENTRY_DATE"  jdbcType="TIMESTAMP" />
		<result property="leaveDate" column="LEAVE_DATE"  jdbcType="TIMESTAMP" />
		<result property="mobilePhone" column="MOBILE_PHONE"  jdbcType="VARCHAR" />
		<result property="email" column="EMAIL"  jdbcType="VARCHAR" />
		<result property="createDate" column="CREATE_TIME"  jdbcType="TIMESTAMP" />
		<result property="modifyDate" column="MODIFY_TIME"  jdbcType="TIMESTAMP" />
		<result property="active" column="ACTIVE"  jdbcType="CHAR" />
		<result property="createUser" column="CREATE_USER_CODE"  jdbcType="VARCHAR" />
		<result property="modifyUser" column="MODIFY_USER_CODE"  jdbcType="VARCHAR" />
	</resultMap>

	<!-- 插入数据 ： -->
	<insert id="addEmployee"
		parameterType="com.deppon.foss.module.base.baseinfo.api.shared.domain.EmployeeEntity">
		INSERT/** 综合:插入数据  **/ INTO BSE.T_BAS_EMPLOYEE(
		ID,
		EMP_NAME,
		PINYIN,
		EMP_CODE,
		GENDER,
		UNIFIELD_CODE,
		ORG_CODE,
		TITLE,
		DEGREE,
		BIRTHDATE,
		STATUS,
		PHONE,
		IDENTITY_CARD,
		ENTRY_DATE,
		LEAVE_DATE,
		MOBILE_PHONE,
		EMAIL,
		CREATE_TIME,
		MODIFY_TIME,
		ACTIVE,
		CREATE_USER_CODE,
		MODIFY_USER_CODE) VALUES	
	(
		#{id, jdbcType=VARCHAR},
		#{empName, jdbcType=VARCHAR},
		#{pinyin, jdbcType=VARCHAR},
		#{empCode, jdbcType=VARCHAR},
		#{gender, jdbcType=VARCHAR},
		#{unifieldCode, jdbcType=VARCHAR},
		#{orgCode, jdbcType=VARCHAR},
		#{title, jdbcType=VARCHAR},
		#{degree, jdbcType=VARCHAR},
		#{birthdate, jdbcType=TIMESTAMP},
		#{status, jdbcType=VARCHAR},
		#{phone, jdbcType=VARCHAR},
		#{identityCard, jdbcType=VARCHAR},
		#{entryDate, jdbcType=TIMESTAMP},
		#{leaveDate, jdbcType=TIMESTAMP},
		#{mobilePhone, jdbcType=VARCHAR},
		#{email, jdbcType=VARCHAR},
		#{createDate, jdbcType=TIMESTAMP},
		#{modifyDate, jdbcType=TIMESTAMP},
		#{active, jdbcType=CHAR},
		#{createUser, jdbcType=VARCHAR},
		#{modifyUser, jdbcType=VARCHAR}
	)
	</insert> 

	<!-- 根据EMP_CODE 作废数据： -->
	<update id="deleteEmployee" 
		parameterType="map">
		UPDATE/** 综合:根据EMP_CODE 作废数据  **/ BSE.T_BAS_EMPLOYEE A 
		SET A.ACTIVE=#{entity.active,jdbcType=CHAR},
			A.MODIFY_USER_CODE=#{entity.modifyUser,jdbcType=VARCHAR}, 
			A.MODIFY_TIME = #{entity.modifyDate,jdbcType=TIMESTAMP} 
		<where>
			A.EMP_CODE=#{entity.empCode,jdbcType=VARCHAR} 
			AND  A.ACTIVE=#{conditionActive,jdbcType=CHAR}
		</where>
	</update>

	<!-- 根据EMP_CODE批量作废 -->
	<update id="deleteEmployeeMore"
		parameterType="map">
		UPDATE/** 综合:根据EMP_CODE批量作废  **/ BSE.T_BAS_EMPLOYEE A 
		SET A.ACTIVE=#{entity.active,jdbcType=CHAR},
			A.MODIFY_USER_CODE=#{entity.modifyUser,jdbcType=VARCHAR}, 
			A.MODIFY_TIME = #{entity.modifyDate,jdbcType=TIMESTAMP} 
        <where>
            <if test="codes!=null and codes.length > 0">
                A.EMP_CODE in
                <foreach collection="codes"  index="index" item="code"  open="(" separator="," close=")">  
	            #{code} 
	            </foreach>
            </if>
            AND  A.ACTIVE=#{conditionActive,jdbcType=CHAR}
        </where>       
	</update>

	<!-- 以下全为查询 -->

	<sql id="query_employee_param">
		A.ID AS ID,		/** ID     **/ 
		A.EMP_NAME AS EMP_NAME,		/** 职员姓名     **/ 
		A.PINYIN AS PINYIN,		/** 拼音     **/ 
		A.EMP_CODE AS EMP_CODE,		/** 工号     **/ 
		A.GENDER AS GENDER,		/** 性别     **/ 
		A.UNIFIELD_CODE AS UNIFIELD_CODE,		/** 部门标杆编码     **/ 
		A.ORG_CODE AS ORG_CODE,		/** 组织编码     **/ 
		A.TITLE AS TITLE,		/** 职位     **/ 
		A.DEGREE AS DEGREE,		/** 职等     **/ 
		A.BIRTHDATE AS BIRTHDATE,		/** 出生日期     **/ 
		A.STATUS AS STATUS,		/** 状态     **/ 
		A.PHONE AS PHONE,		/** 电话     **/ 
		A.IDENTITY_CARD AS IDENTITY_CARD,		/** 身份证号     **/ 
		A.ENTRY_DATE AS ENTRY_DATE,		/** 入职日期     **/ 
		A.LEAVE_DATE AS LEAVE_DATE,		/** 离职日期     **/ 
		A.MOBILE_PHONE AS MOBILE_PHONE,		/** 手机号码     **/ 
		A.EMAIL AS EMAIL,		/** 电子邮箱     **/ 
		A.CREATE_TIME AS CREATE_TIME,		/** 创建时间     **/ 
		A.MODIFY_TIME AS MODIFY_TIME,		/** 更新时间     **/ 
		A.ACTIVE AS ACTIVE,		/** 是否启用     **/ 
		A.CREATE_USER_CODE AS CREATE_USER_CODE,		/** 创建人     **/ 
		A.MODIFY_USER_CODE AS MODIFY_USER_CODE		/** 更新人     **/
	</sql>

	<!-- 根据 EMP_CODE 精确查询数据 -->
	<select id="queryEmployeeByEmpCode" resultMap="employeeQueryResultMap"
		parameterType="com.deppon.foss.module.base.baseinfo.api.shared.domain.EmployeeEntity">
		<![CDATA[
		  SELECT 
		  /** 综合:根据 EMP_CODE 精确查询数据  **/
		]]>
		<include refid="query_employee_param" />
		<![CDATA[
	    	FROM BSE.T_BAS_EMPLOYEE A 
		]]>
		<where>
			A.EMP_CODE=#{empCode} 
			AND A.ACTIVE= #{active,jdbcType=CHAR}
		</where>
	</select>

	<!-- 根据 EMP_CODE 批量精确查询数据 -->
	<select id="queryEmployeeBatchByEmpCode" resultMap="employeeQueryResultMap"
		parameterType="map">
		<![CDATA[
		  SELECT 
		  /** 综合:根据 EMP_CODE 批量精确查询数据  **/
		]]>
		<include refid="query_employee_param" />
		<![CDATA[
	    	FROM BSE.T_BAS_EMPLOYEE A 
		]]>
		<where>
			<if test="codes!=null and codes.length > 0">
                A.EMP_CODE in
                <foreach collection="codes"  index="index" item="code"  open="(" separator="," close=")">  
	            #{code,jdbcType=VARCHAR} 
	            </foreach>
            </if> 
			AND A.ACTIVE= #{active,jdbcType=CHAR}
		</where>
	</select>

	<!-- 根据entity精确查询的查询条件 ，如果属性为空，则此属性不作为条件-->
	<sql id="query_queryEmployeeExactByEntity_condition_param">		
		<where>
	      	<if test="id!=null and id != ''">
	        	AND A.ID = #{id,jdbcType=VARCHAR} 
	      	</if>
	      	<if test="empName!=null and empName != ''">
	        	AND A.EMP_NAME = #{empName,jdbcType=VARCHAR} 
	      	</if>
	      	<if test="pinyin!=null and pinyin != ''">
	        	AND A.PINYIN = #{pinyin,jdbcType=VARCHAR} 
	      	</if>
	      	<if test="empCode!=null and empCode != ''">
	        	AND A.EMP_CODE = #{empCode,jdbcType=VARCHAR} 
	      	</if>
	      	<if test="gender!=null and gender != ''">
	        	AND A.GENDER = #{gender,jdbcType=VARCHAR} 
	      	</if>
	      	<if test="unifieldCode!=null and unifieldCode != ''">
	        	AND A.UNIFIELD_CODE = #{unifieldCode,jdbcType=VARCHAR} 
	      	</if>
	      	<if test="orgCode!=null and orgCode != ''">
	        	AND A.ORG_CODE = #{orgCode,jdbcType=VARCHAR} 
	      	</if>
	      	<if test="title!=null and title != ''">
	        	AND A.TITLE = #{title,jdbcType=VARCHAR} 
	      	</if>
	      	<if test="degree!=null and degree != ''">
	        	AND A.DEGREE = #{degree,jdbcType=VARCHAR} 
	      	</if>
	      	<if test="birthdate!=null and birthdate != ''">
	        	AND A.BIRTHDATE = #{birthdate,jdbcType=TIMESTAMP} 
	      	</if>
	      	<if test="status!=null and status != ''">
	        	AND A.STATUS = #{status,jdbcType=VARCHAR} 
	      	</if>
	      	<if test="phone!=null and phone != ''">
	        	AND A.PHONE = #{phone,jdbcType=VARCHAR} 
	      	</if>
	      	<if test="identityCard!=null and identityCard != ''">
	        	AND A.IDENTITY_CARD = #{identityCard,jdbcType=VARCHAR} 
	      	</if>
	      	<if test="entryDate!=null and entryDate != ''">
	        	AND A.ENTRY_DATE = #{entryDate,jdbcType=TIMESTAMP} 
	      	</if>
	      	<if test="leaveDate!=null and leaveDate != ''">
	        	AND A.LEAVE_DATE = #{leaveDate,jdbcType=TIMESTAMP} 
	      	</if>
	      	<if test="mobilePhone!=null and mobilePhone != ''">
	        	AND A.MOBILE_PHONE = #{mobilePhone,jdbcType=VARCHAR} 
	      	</if>
	      	<if test="email!=null and email != ''">
	        	AND A.EMAIL = #{email,jdbcType=VARCHAR} 
	      	</if>
	      	AND A.ACTIVE =  #{active,jdbcType=CHAR} 
		</where>
	</sql>
	<!-- 根据实体动态条件精确查询,如果属性的值为null或者空白则无效： -->
	<select id="queryEmployeeExactByEntity" resultMap="employeeQueryResultMap"
		parameterType="com.deppon.foss.module.base.baseinfo.api.shared.domain.EmployeeEntity">
		<![CDATA[
		  SELECT 
		  /** 综合:根据实体动态条件精确查询,如果属性的值为null或者空白则无效  **/
		]]>
		<include refid="query_employee_param" />
		<![CDATA[
	    	FROM BSE.T_BAS_EMPLOYEE A 
		]]>
		<include refid="query_queryEmployeeExactByEntity_condition_param" />
	</select>	
	<!-- 根据实体动态条件精确查询总数,如果属性的值为null或者空白则无效： -->
	<select id="queryEmployeeExactByEntityCount" resultType="Long"
		parameterType="com.deppon.foss.module.base.baseinfo.api.shared.domain.EmployeeEntity">
		<![CDATA[
			 SELECT/** 综合:根据实体动态条件精确查询总数,如果属性的值为null或者空白则无效  **/ count(*) 
			 FROM BSE.T_BAS_EMPLOYEE A 
		]]>
		<include refid="query_queryEmployeeExactByEntity_condition_param" />
	</select>


	<!-- 根据entity模糊查询,如果属性的值为null或者空白则无效： -->
	<sql id="query_queryEmployeeByEntity_condition_param">		
		<where>
	      	<if test="id!=null and id != ''">
	        	AND A.ID like CONCAT(CONCAT('%', #{id,jdbcType=VARCHAR}), '%') 
	      	</if>
	      	<if test="empName!=null and empName != ''">
	        	AND A.EMP_NAME like CONCAT(CONCAT('%', #{empName,jdbcType=VARCHAR}), '%') 
	      	</if>
	      	<if test="pinyin!=null and pinyin != ''">
	        	AND A.PINYIN like CONCAT(CONCAT('%', #{pinyin,jdbcType=VARCHAR}), '%') 
	      	</if>
	      	<if test="empCode!=null and empCode != ''">
	        	AND A.EMP_CODE like CONCAT(CONCAT('%', #{empCode,jdbcType=VARCHAR}), '%') 
	      	</if>
	      	<if test="gender!=null and gender != ''">
	        	AND A.GENDER like CONCAT(CONCAT('%', #{gender,jdbcType=VARCHAR}), '%') 
	      	</if>
	      	<!-- unifieldCode部门标杆编码为精确查询的查询条件 -->
	      	<if test="unifieldCode!=null and unifieldCode != ''">
	        	AND A.UNIFIELD_CODE=#{unifieldCode,jdbcType=VARCHAR}
	      	</if>
	      	<if test="orgCode!=null and orgCode != ''">
	        	AND A.ORG_CODE like CONCAT(CONCAT('%', #{orgCode,jdbcType=VARCHAR}), '%') 
	      	</if>
	      	<if test="title!=null and title != ''">
	        	AND A.TITLE like CONCAT(CONCAT('%', #{title,jdbcType=VARCHAR}), '%') 
	      	</if>
	      	<if test="degree!=null and degree != ''">
	        	AND A.DEGREE like CONCAT(CONCAT('%', #{degree,jdbcType=VARCHAR}), '%') 
	      	</if>
	      	<if test="birthdate!=null and birthdate != ''">
	        	AND A.BIRTHDATE like CONCAT(CONCAT('%', #{birthdate,jdbcType=TIMESTAMP}), '%') 
	      	</if>
	      	<if test="status!=null and status != ''">
	        	AND A.STATUS like CONCAT(CONCAT('%', #{status,jdbcType=VARCHAR}), '%') 
	      	</if>
	      	<if test="phone!=null and phone != ''">
	        	AND A.PHONE like CONCAT(CONCAT('%', #{phone,jdbcType=VARCHAR}), '%') 
	      	</if>
	      	<if test="identityCard!=null and identityCard != ''">
	        	AND A.IDENTITY_CARD like CONCAT(CONCAT('%', #{identityCard,jdbcType=VARCHAR}), '%') 
	      	</if>
	      	<if test="entryDate!=null and entryDate != ''">
	        	AND A.ENTRY_DATE like CONCAT(CONCAT('%', #{entryDate,jdbcType=TIMESTAMP}), '%') 
	      	</if>
	      	<if test="leaveDate!=null and leaveDate != ''">
	        	AND A.LEAVE_DATE like CONCAT(CONCAT('%', #{leaveDate,jdbcType=TIMESTAMP}), '%') 
	      	</if>
	      	<if test="mobilePhone!=null and mobilePhone != ''">
	        	AND A.MOBILE_PHONE like CONCAT(CONCAT('%', #{mobilePhone,jdbcType=VARCHAR}), '%') 
	      	</if>
	      	<if test="email!=null and email != ''">
	        	AND A.EMAIL like CONCAT(CONCAT('%', #{email,jdbcType=VARCHAR}), '%') 
	      	</if>
			AND A.ACTIVE= #{active,jdbcType=CHAR}
		</where>
	</sql>
	<!-- 根据实体动态条件模糊查询,如果属性的值为null或者空白则无效： -->
	<select id="queryEmployeeByEntity" resultMap="employeeQueryResultMap"
		parameterType="com.deppon.foss.module.base.baseinfo.api.shared.domain.EmployeeEntity">
		<![CDATA[
		  SELECT 
		  /** 综合:根据实体动态条件模糊查询,如果属性的值为null或者空白则无效  **/
		  A.ID AS ID,		/** ID     **/ 
		A.EMP_NAME AS EMP_NAME,		/** 职员姓名     **/ 
		A.PINYIN AS PINYIN,		/** 拼音     **/ 
		A.EMP_CODE AS EMP_CODE,		/** 工号     **/ 
		A.GENDER AS GENDER,		/** 性别     **/ 
		A.UNIFIELD_CODE AS UNIFIELD_CODE,		/** 部门标杆编码     **/ 
		A.ORG_CODE AS ORG_CODE,		/** 组织编码     **/ 
		E.Value_Name  AS TITLE,		/** 职位     **/ 
		A.DEGREE AS DEGREE,		/** 职等     **/ 
		A.BIRTHDATE AS BIRTHDATE,		/** 出生日期     **/ 
		A.STATUS AS STATUS,		/** 状态     **/ 
		A.PHONE AS PHONE,		/** 电话     **/ 
		A.IDENTITY_CARD AS IDENTITY_CARD,		/** 身份证号     **/ 
		A.ENTRY_DATE AS ENTRY_DATE,		/** 入职日期     **/ 
		A.LEAVE_DATE AS LEAVE_DATE,		/** 离职日期     **/ 
		A.MOBILE_PHONE AS MOBILE_PHONE,		/** 手机号码     **/ 
		A.EMAIL AS EMAIL,		/** 电子邮箱     **/ 
		A.CREATE_TIME AS CREATE_TIME,		/** 创建时间     **/ 
		A.MODIFY_TIME AS MODIFY_TIME,		/** 更新时间     **/ 
		A.ACTIVE AS ACTIVE,		/** 是否启用     **/ 
		A.CREATE_USER_CODE AS CREATE_USER_CODE,		/** 创建人     **/ 
		A.MODIFY_USER_CODE AS MODIFY_USER_CODE		/** 更新人     **/
		]]>
<!-- 		<include refid="query_employee_param" /> -->
		<![CDATA[
	    	FROM BSE.T_BAS_EMPLOYEE A 
	    	 left join bse.t_bas_data_postion_degree E
                    on A.TITLE = E.value_code
                    and E.active = 'Y'
		]]>
		<include refid="query_queryEmployeeByEntity_condition_param" />
	</select>
	<!-- 根据实体动态条件模糊查询总数,如果属性的值为null或者空白则无效： -->
	<select id="queryEmployeeByEntityCount" resultType="Long"
		parameterType="com.deppon.foss.module.base.baseinfo.api.shared.domain.EmployeeEntity">
		<![CDATA[
			 SELECT/** 综合:根据实体动态条件模糊查询总数,如果属性的值为null或者空白则无效  **/ count(*) 
			 FROM BSE.T_BAS_EMPLOYEE A 
			 left join bse.t_bas_data_postion_degree E
                    on A.TITLE = E.value_code
                    and E.active = 'Y'
		]]>
		<include refid="query_queryEmployeeByEntity_condition_param" />
	</select>
	
	<!-- 根据entity模糊查询,多表联合查询 -->
	<sql id="query_queryEmployeeByEntity_union_condition_param">		
		<where>
	      	<if test="id!=null and id != ''">
	        	AND A.ID like CONCAT(CONCAT('%', #{id,jdbcType=VARCHAR}), '%') 
	      	</if>
	      	<if test="empName!=null and empName != ''">
	        	AND A.EMP_NAME like CONCAT(CONCAT('%', #{empName,jdbcType=VARCHAR}), '%') 
	      	</if>
	      	<if test="pinyin!=null and pinyin != ''">
	        	AND A.PINYIN like CONCAT(CONCAT('%', #{pinyin,jdbcType=VARCHAR}), '%') 
	      	</if>
	      	<if test="empCode!=null and empCode != ''">
	        	AND A.EMP_CODE like CONCAT(CONCAT('%', #{empCode,jdbcType=VARCHAR}), '%') 
	      	</if>
	      	<if test="gender!=null and gender != ''">
	        	AND A.GENDER like CONCAT(CONCAT('%', #{gender,jdbcType=VARCHAR}), '%') 
	      	</if>
	      	<!-- unifieldCode部门标杆编码为精确查询的查询条件 -->
	      	<if test="unifieldCode!=null and unifieldCode != ''">
	        	AND A.UNIFIELD_CODE=#{unifieldCode,jdbcType=VARCHAR}
	      	</if>
	      	<if test="orgCode!=null and orgCode != ''">
	        	AND A.ORG_CODE like CONCAT(CONCAT('%', #{orgCode,jdbcType=VARCHAR}), '%') 
	      	</if>
	      	<if test="title!=null and title != ''">
	        	AND  E.value_name  like CONCAT(CONCAT('%', #{title,jdbcType=VARCHAR}), '%') 
	      	</if>
	      	<if test="degree!=null and degree != ''">
	        	AND A.DEGREE like CONCAT(CONCAT('%', #{degree,jdbcType=VARCHAR}), '%') 
	      	</if>
	      	<if test="birthdate!=null and birthdate != ''">
	        	AND A.BIRTHDATE like CONCAT(CONCAT('%', #{birthdate,jdbcType=TIMESTAMP}), '%') 
	      	</if>
	      	<if test="status!=null and status != ''">
	        	AND A.STATUS like CONCAT(CONCAT('%', #{status,jdbcType=VARCHAR}), '%') 
	      	</if>
	      	<if test="phone!=null and phone != ''">
	        	AND A.PHONE like CONCAT(CONCAT('%', #{phone,jdbcType=VARCHAR}), '%') 
	      	</if>
	      	<if test="identityCard!=null and identityCard != ''">
	        	AND A.IDENTITY_CARD like CONCAT(CONCAT('%', #{identityCard,jdbcType=VARCHAR}), '%') 
	      	</if>
	      	<if test="entryDate!=null and entryDate != ''">
	        	AND A.ENTRY_DATE like CONCAT(CONCAT('%', #{entryDate,jdbcType=TIMESTAMP}), '%') 
	      	</if>
	      	<if test="leaveDate!=null and leaveDate != ''">
	        	AND A.LEAVE_DATE like CONCAT(CONCAT('%', #{leaveDate,jdbcType=TIMESTAMP}), '%') 
	      	</if>
	      	<if test="mobilePhone!=null and mobilePhone != ''">
	        	AND A.MOBILE_PHONE like CONCAT(CONCAT('%', #{mobilePhone,jdbcType=VARCHAR}), '%') 
	      	</if>
	      	<if test="email!=null and email != ''">
	        	AND A.EMAIL like CONCAT(CONCAT('%', #{email,jdbcType=VARCHAR}), '%') 
	      	</if>
			AND A.ACTIVE= #{active,jdbcType=CHAR}
			AND B.ACTIVE= #{active,jdbcType=CHAR}
		</where>
	</sql>
	<!-- 用户部门信息功能中，查询员工信息，但该员工必须是FOSS的用户才能查询出来 ，根据实体动态条件模糊查询-->
	<!-- zhangjiheng 2013.2.28日添加 -->
	<select id="queryEmployeeAndUserByEntity" resultMap="employeeQueryResultMap"
	   parameterType="com.deppon.foss.module.base.baseinfo.api.shared.domain.EmployeeEntity">
	    SELECT
	    /** 综合:用户部门信息功能中，查询员工信息，但该员工必须是FOSS的用户才能查询出来 ，根据实体动态条件模糊查询  **/
	   			  A.ID       AS ID, /** ID **/
                 A.EMP_NAME AS EMP_NAME, /** 职员姓名 **/
                 A.PINYIN   AS PINYIN,
                 /** 拼音 **/
                 A.EMP_CODE      AS EMP_CODE, /** 工号 **/
                 A.GENDER        AS GENDER, /** 性别 **/
                 A.UNIFIELD_CODE AS UNIFIELD_CODE, /** 部门标杆编码 **/
                 A.ORG_CODE      AS ORG_CODE, /** 组织编码 **/
                 E.value_name         AS TITLE, /** 
                 职位 **/
                 A.DEGREE        AS DEGREE, /** 职等 **/
                 A.BIRTHDATE     AS BIRTHDATE, /** 出生日期 **/
                 A.STATUS        AS STATUS,
                 /** 状态 **/
                 A.PHONE         AS PHONE, /** 电话 **/
                 A.IDENTITY_CARD AS IDENTITY_CARD, /** 身份证号 **/
                 A.ENTRY_DATE    AS ENTRY_DATE, /** 入职日期 **/
                 A.LEAVE_DATE    AS LEAVE_DATE, /** 离职日期 **/
                 A.MOBILE_PHONE  AS MOBILE_PHONE,
                 /** 手机号码 **/
                 A.EMAIL            AS EMAIL, /** 电子邮箱 **/
                 A.CREATE_TIME      AS CREATE_TIME, /** 创建时间 **/
                 A.MODIFY_TIME      AS MODIFY_TIME, /** 更新时间 **/
                 A.ACTIVE           AS ACTIVE, /** 是否启用 **/
                 A.CREATE_USER_CODE AS CREATE_USER_CODE,
                 /** 创建人 **/
                 A.MODIFY_USER_CODE AS MODIFY_USER_CODE /** 更新人 **/
<!-- 	    <include refid="query_employee_param" /> -->
	    FROM BSE.T_BAS_EMPLOYEE A RIGHT JOIN BSE.T_BAS_USER B ON A.EMP_CODE=B.EMP_CODE
	     left join bse.t_bas_data_postion_degree E
                    on A.TITLE = E.value_code
                    and E.active = 'Y'
	    <include refid="query_queryEmployeeByEntity_union_condition_param" />
	</select>
	<!-- 用户部门信息功能中，查询员工信息，但该员工必须是FOSS的用户才能查询出来(求和) ，根据实体动态条件模糊查询-->
	<!-- zhangjiheng 2013.2.28日添加 -->
	<select id="queryEmployeeAndUserByEntityCount" resultType="Long"
	   parameterType="com.deppon.foss.module.base.baseinfo.api.shared.domain.EmployeeEntity">
	    SELECT/** 用户部门信息功能中，查询员工信息，但该员工必须是FOSS的用户才能查询出来(求和) ，根据实体动态条件模糊查询  **/ count(*) 
			 FROM BSE.T_BAS_EMPLOYEE A RIGHT JOIN BSE.T_BAS_USER B ON A.EMP_CODE=B.EMP_CODE
			  left join bse.t_bas_data_postion_degree E
                    on A.TITLE = E.value_code
                    and E.active = 'Y'
	     <include refid="query_queryEmployeeByEntity_union_condition_param" />
	</select>
	
	<!-- 下面是公共选择框的查询 -->
	<sql id="queryEmp4selectorCloumns">
		EMPLOYEE.ID AS ID,
		EMPLOYEE.EMP_NAME AS EMP_NAME, 
		EMPLOYEE.PINYIN AS PINYIN,
		EMPLOYEE.EMP_CODE AS EMP_CODE,
		EMPLOYEE.GENDER AS GENDER,
		EMPLOYEE.TITLE AS TITLE,
		position.VALUE_NAME AS  TITLENAME,
		EMPLOYEE.DEGREE AS DEGREE,
		EMPLOYEE.BIRTHDATE AS BIRTHDATE,
		EMPLOYEE.STATUS AS STATUS,
		EMPLOYEE.ENTRY_DATE AS ENTRY_DATE,
		EMPLOYEE.LEAVE_DATE AS LEAVE_DATE,
		EMPLOYEE.PHONE AS PHONE,
		EMPLOYEE.IDENTITY_CARD AS IDENTITY_CARD,
		EMPLOYEE.MOBILE_PHONE AS MOBILE_PHONE,
		EMPLOYEE.EMAIL AS EMAIL,
		EMPLOYEE.ACTIVE AS ACTIVE,
		EMPLOYEE.CREATE_USER_CODE AS CREATE_USER_CODE,
		EMPLOYEE.CREATE_TIME AS CREATE_TIME,
		EMPLOYEE.MODIFY_USER_CODE AS MODIFY_USER_CODE,
		EMPLOYEE.MODIFY_TIME AS MODIFY_TIME,
		EMPLOYEE.UNIFIELD_CODE AS UNIFIELD_CODE
	</sql>

	<resultMap id="queryEmp4selectorResultMap"
		type="com.deppon.foss.module.base.baseinfo.api.shared.domain.EmployeeEntity"
		extends="employeeSimpleResultMap">
		<result column="UNIFIELD_CODE" property="unifieldCode"/>
	</resultMap>
	
	<!-- 根据实体动态条件精确查询,如果属性的值为null或者空白则无效： -->
	<select id="queryEmployeeExactByEntity4Selector" resultMap="queryEmp4selectorResultMap"
		parameterType="com.deppon.foss.module.base.baseinfo.api.shared.domain.EmployeeEntity">
		<![CDATA[
		  SELECT 
		  /** 综合:根据实体动态条件精确查询,如果属性的值为null或者空白则无效 **/
		]]>
		<include refid="queryEmp4selectorCloumns" />
		<![CDATA[
		/**关联职位表查询职位信息**/
	    	FROM BSE.T_BAS_EMPLOYEE EMPLOYEE LEFT JOIN bse.t_bas_data_postion_degree position on EMPLOYEE.TITLE = position.VALUE_CODE
		]]>
		<include refid="query_queryEmployeeExactByEntity_condition_param4empCodeSelector" />
		UNION
		<![CDATA[
		  SELECT 
		  /** 综合:根据实体动态条件精确查询,如果属性的值为null或者空白则无效 **/
		]]>
		<include refid="queryEmp4selectorCloumns" />
		<![CDATA[
		/**关联职位表查询职位信息**/
	    	FROM BSE.T_BAS_EMPLOYEE EMPLOYEE LEFT JOIN bse.t_bas_data_postion_degree position on EMPLOYEE.TITLE = position.VALUE_CODE
		]]>
		<include refid="query_queryEmployeeExactByEntity_condition_param4empNameSelector" />
		UNION
		<![CDATA[
		  SELECT 
		  /** 综合:根据实体动态条件精确查询,如果属性的值为null或者空白则无效 **/
		]]>
		<include refid="queryEmp4selectorCloumns" />
		<![CDATA[
		/**关联职位表查询职位信息**/
	    	FROM BSE.T_BAS_EMPLOYEE EMPLOYEE LEFT JOIN bse.t_bas_data_postion_degree position on EMPLOYEE.TITLE = position.VALUE_CODE
		]]>
		<include refid="query_queryEmployeeExactByEntity_condition_param4pinyinSelector" />
	</select>
	
		<!-- 根据实体动态条件精确查询,如果属性的值为null或者空白则无效： -->
	<select id="countEmployeeExactByEntity4Selector" resultType="Long"
		parameterType="com.deppon.foss.module.base.baseinfo.api.shared.domain.EmployeeEntity">
		<!-- <![CDATA[
		  SELECT/** 综合:根据实体动态条件精确查询,如果属性的值为null或者空白则无效 **/  COUNT(*)
	    	FROM BSE.T_BAS_EMPLOYEE EMPLOYEE LEFT JOIN bse.t_bas_data_postion_degree position on EMPLOYEE.TITLE = position.VALUE_CODE
		]]>
		<include refid="query_queryEmployeeExactByEntity_condition_param4Selector" /> -->
		SELECT/** 综合:根据实体动态条件精确查询,如果属性的值为null或者空白则无效 **/  COUNT(*)
	    	FROM(<![CDATA[
		  SELECT 
		  /** 综合:根据实体动态条件精确查询,如果属性的值为null或者空白则无效 **/
		]]>
		<include refid="queryEmp4selectorCloumns" />
		<![CDATA[
		/**关联职位表查询职位信息**/
	    	FROM BSE.T_BAS_EMPLOYEE EMPLOYEE LEFT JOIN bse.t_bas_data_postion_degree position on EMPLOYEE.TITLE = position.VALUE_CODE
		]]>
		<include refid="query_queryEmployeeExactByEntity_condition_param4empCodeSelector" />
		UNION
		<![CDATA[
		  SELECT 
		  /** 综合:根据实体动态条件精确查询,如果属性的值为null或者空白则无效 **/
		]]>
		<include refid="queryEmp4selectorCloumns" />
		<![CDATA[
		/**关联职位表查询职位信息**/
	    	FROM BSE.T_BAS_EMPLOYEE EMPLOYEE LEFT JOIN bse.t_bas_data_postion_degree position on EMPLOYEE.TITLE = position.VALUE_CODE
		]]>
		<include refid="query_queryEmployeeExactByEntity_condition_param4empNameSelector" />
		UNION
		<![CDATA[
		  SELECT 
		  /** 综合:根据实体动态条件精确查询,如果属性的值为null或者空白则无效 **/
		]]>
		<include refid="queryEmp4selectorCloumns" />
		<![CDATA[
		/**关联职位表查询职位信息**/
	    	FROM BSE.T_BAS_EMPLOYEE EMPLOYEE LEFT JOIN bse.t_bas_data_postion_degree position on EMPLOYEE.TITLE = position.VALUE_CODE
		]]>
		<include refid="query_queryEmployeeExactByEntity_condition_param4pinyinSelector" />) <![CDATA[
		  dept
		]]>
		
	</select>
	<sql id="query_queryEmployeeExactByEntity_condition_param4empCodeSelector">
	<where>
			EMPLOYEE.ACTIVE =  #{active,jdbcType=CHAR}
			<if test="queryParam !=null and queryParam != '' ">
	        	AND (
	        		 	EMPLOYEE.EMP_CODE = #{queryParam,jdbcType=VARCHAR}
	        		) 
	      	</if>
	      	<if test="orgCode !=null and orgCode != ''">
	        	AND EMPLOYEE.ORG_CODE  = #{orgCode,jdbcType=VARCHAR} 
	      	</if>
	      	 <if test="subOrgCodeList != null and subOrgCodeList.size() > 0">
                AND EMPLOYEE.ORG_CODE in
                <foreach collection="subOrgCodeList"  index="index" item="item"  open="(" separator="," close=")">  
	           	 #{item} 
	            </foreach>
            </if>
	  		
	      	<if test="empCode!=null and empCode != ''">
	        	AND EMPLOYEE.EMP_CODE = #{empCode,jdbcType=VARCHAR}
	      	</if>
	      	<if test="title!=null and title != ''">
	        	AND EMPLOYEE.TITLE = #{title,jdbcType=VARCHAR} 
	      	</if>
	      	<if test="status!=null and status != ''">
	        	AND EMPLOYEE.STATUS = #{status,jdbcType=VARCHAR} 
	      	</if>
	      	<if test="mobilePhone!=null and mobilePhone != ''">
	        	AND EMPLOYEE.MOBILE_PHONE = #{mobilePhone,jdbcType=VARCHAR} 
	      	</if>
	</where>
	</sql>
	
	<sql id="query_queryEmployeeExactByEntity_condition_param4empNameSelector">
	<where>
			EMPLOYEE.ACTIVE =  #{active,jdbcType=CHAR}
			<if test="queryParam !=null and queryParam != '' ">
	        	AND (
	        		
	        		 	EMPLOYEE.EMP_NAME = #{queryParam,jdbcType=VARCHAR}
	        		) 
	      	</if>
	      	<if test="orgCode !=null and orgCode != ''">
	        	AND EMPLOYEE.ORG_CODE  = #{orgCode,jdbcType=VARCHAR} 
	      	</if>
	      	 <if test="subOrgCodeList != null and subOrgCodeList.size() > 0">
                AND EMPLOYEE.ORG_CODE in
                <foreach collection="subOrgCodeList"  index="index" item="item"  open="(" separator="," close=")">  
	           	 #{item} 
	            </foreach>
            </if>
	  		<if test="empName!=null and empName != ''"> 
	        	AND EMPLOYEE.EMP_NAME = #{empName,jdbcType=VARCHAR}
	      	</if>
	      	<if test="title!=null and title != ''">
	        	AND EMPLOYEE.TITLE = #{title,jdbcType=VARCHAR} 
	      	</if>
	      	<if test="status!=null and status != ''">
	        	AND EMPLOYEE.STATUS = #{status,jdbcType=VARCHAR} 
	      	</if>
	      	<if test="mobilePhone!=null and mobilePhone != ''">
	        	AND EMPLOYEE.MOBILE_PHONE = #{mobilePhone,jdbcType=VARCHAR} 
	      	</if>
	</where>
	</sql>
	
	<sql id="query_queryEmployeeExactByEntity_condition_param4pinyinSelector">
	<where>
			EMPLOYEE.ACTIVE =  #{active,jdbcType=CHAR}
			<if test="queryParam !=null and queryParam != '' ">
	        	AND (
	        		
	        		 	EMPLOYEE.PINYIN = #{queryParam,jdbcType=VARCHAR}
	        		
	        		) 
	      	</if>
	      	<if test="orgCode !=null and orgCode != ''">
	        	AND EMPLOYEE.ORG_CODE  = #{orgCode,jdbcType=VARCHAR} 
	      	</if>
	      	 <if test="subOrgCodeList != null and subOrgCodeList.size() > 0">
                AND EMPLOYEE.ORG_CODE in
                <foreach collection="subOrgCodeList"  index="index" item="item"  open="(" separator="," close=")">  
	           	 #{item} 
	            </foreach>
            </if>
	      	<if test="pinyin!=null and pinyin != ''">
	        	AND EMPLOYEE.PINYIN = #{pinyin,jdbcType=VARCHAR}
	      	</if>
	      	<if test="title!=null and title != ''">
	        	AND EMPLOYEE.TITLE = #{title,jdbcType=VARCHAR} 
	      	</if>
	      	<if test="status!=null and status != ''">
	        	AND EMPLOYEE.STATUS = #{status,jdbcType=VARCHAR} 
	      	</if>
	      	<if test="mobilePhone!=null and mobilePhone != ''">
	        	AND EMPLOYEE.MOBILE_PHONE = #{mobilePhone,jdbcType=VARCHAR} 
	      	</if>
	</where>
	</sql>
	<!-- sql优化已弃用 -->
	<sql id="query_queryEmployeeExactByEntity_condition_param4Selector">
	<where>
			EMPLOYEE.ACTIVE =  #{active,jdbcType=CHAR}
			<if test="queryParam !=null and queryParam != '' ">
	        	AND (
	        			EMPLOYEE.EMP_NAME like CONCAT(CONCAT('%', #{queryParam,jdbcType=VARCHAR}), '%')
	        		 OR
	        		 	EMPLOYEE.PINYIN like CONCAT(CONCAT('%', #{queryParam,jdbcType=VARCHAR}), '%')
	        		 OR
	        		 	EMPLOYEE.EMP_CODE like CONCAT(CONCAT('%', #{queryParam,jdbcType=VARCHAR}), '%')	
	        		) 
	      	</if>
	      	<if test="orgCode !=null and orgCode != ''">
	        	AND EMPLOYEE.ORG_CODE  = #{orgCode,jdbcType=VARCHAR} 
	      	</if>
	      	 <if test="subOrgCodeList != null and subOrgCodeList.size() > 0">
                AND EMPLOYEE.ORG_CODE in
                <foreach collection="subOrgCodeList"  index="index" item="item"  open="(" separator="," close=")">  
	           	 #{item} 
	            </foreach>
            </if>
	  		<if test="empName!=null and empName != ''">
	        	AND EMPLOYEE.EMP_NAME like CONCAT(CONCAT('%', #{empName,jdbcType=VARCHAR}), '%') 
	      	</if>
	      	<if test="pinyin!=null and pinyin != ''">
	        	AND EMPLOYEE.PINYIN like CONCAT(CONCAT('%', #{pinyin,jdbcType=VARCHAR}), '%') 
	      	</if>
	      	<if test="empCode!=null and empCode != ''">
	        	AND EMPLOYEE.EMP_CODE like CONCAT(CONCAT('%', #{empCode,jdbcType=VARCHAR}), '%') 
	      	</if>
	      	<if test="title!=null and title != ''">
	        	AND EMPLOYEE.TITLE = #{title,jdbcType=VARCHAR} 
	      	</if>
	      	<if test="status!=null and status != ''">
	        	AND EMPLOYEE.STATUS = #{status,jdbcType=VARCHAR} 
	      	</if>
	      	<if test="mobilePhone!=null and mobilePhone != ''">
	        	AND EMPLOYEE.MOBILE_PHONE = #{mobilePhone,jdbcType=VARCHAR} 
	      	</if>
	</where>
	</sql>
	
	<!-- 根据 EMP_CODE 批量精确查询数据(用于mapper文件关联扩展) -->
	<select id="searchEmployeeBatchByEmpCode" resultMap="employeeQueryResultMap"
		parameterType="string">
		<![CDATA[
		  SELECT 
		  /** 综合:根据 EMP_CODE 批量精确查询数据(用于mapper文件关联扩展) **/
		]]>
		<include refid="query_employee_param" />
		<![CDATA[
	    	FROM BSE.T_BAS_EMPLOYEE A 
		]]>
		<where>
                A.EMP_CODE = #{code,jdbcType=VARCHAR} 
                AND A.ACTIVE='Y'
		</where>
	</select>
	
	  <select id="queryEmpNameByEmpCode" resultMap="employeeQueryResultMap" parameterType="java.util.Map">
    SELECT 
    E.EMP_NAME
    FROM BSE.T_BAS_EMPLOYEE E 
    WHERE
	E.EMP_CODE = #{empCode,jdbcType=VARCHAR}
	AND E.ACTIVE='Y'
  </select>
  
    <resultMap id="employeeQueryNameAndCodeResultMap" type="com.deppon.foss.module.base.baseinfo.api.shared.domain.EmployeeEntity">   			
		<result property="id" column="ID"  jdbcType="VARCHAR" />
		<result property="empName" column="EMP_NAME"  jdbcType="VARCHAR" />		
		<result property="empCode" column="EMP_CODE"  jdbcType="VARCHAR" />		
	</resultMap>
  
  	<!-- 根据 EMP_CODE 精确查询数据 -->
	<select id="queryEmployeeNameAndCodeByEmpCode" resultMap="employeeQueryNameAndCodeResultMap"
		parameterType="map">
		<![CDATA[
		  SELECT 
		  /** 综合:根据 EMP_CODE 精确查询数据  **/
		  	A.ID AS ID,					/** ID     **/ 
			A.EMP_NAME AS EMP_NAME,		/** 职员姓名     **/
			A.EMP_CODE AS EMP_CODE		/** 工号     **/ 
			FROM BSE.T_BAS_EMPLOYEE A 		
		]]>		
		<where>			
			AND A.ACTIVE= #{active,jdbcType=CHAR}			
            <if test="codes!=null and codes.size() > 0">
                AND A.EMP_CODE in
                <foreach collection="codes"  index="index" item="item"  open="(" separator="," close=")">  
	           	 #{item}
	            </foreach>
            </if>
		</where>
	</select>
	
	<!-- 配合主数据项目，根据人员编号与修改时间查询人员信息-->
	<select id="queryEmployeeByCodeAndModifyDate" resultMap="employeeSimpleResultMap"
		parameterType="com.deppon.foss.module.base.baseinfo.api.shared.domain.EmployeeEntity">
		<![CDATA[
		  SELECT 
		  /** 综合:配合主数据项目，根据人员编号与修改时间查询人员信息  **/
		]]>
		<include refid="simple_param" />	
	    	FROM BSE.T_BAS_EMPLOYEE A 
	    	 WHERE 
	    	 <if test="empCode!=null and empCode !=''">
                A.EMP_CODE = #{empCode,jdbcType=VARCHAR}
            </if>
            <if test="createTime !=null and createTime !=''">
                AND A.CREATE_TIME = to_timestamp(#{createTime,jdbcType=VARCHAR},'yyyy-mm-dd hh24:mi:ss.ff')
           	</if>
	</select>
	
	<!-- 配合主数据项目，插入数据 ： -->
	<insert id="addEmployeeOfUU"
		parameterType="com.deppon.foss.module.base.baseinfo.api.shared.domain.EmployeeEntity">
		INSERT/** 综合:插入数据  **/ INTO BSE.T_BAS_EMPLOYEE(
		ID,
		EMP_NAME,
		PINYIN,
		EMP_CODE,
		GENDER,
		UNIFIELD_CODE,
		ORG_CODE,
		TITLE,
		DEGREE,
		BIRTHDATE,
		STATUS,
		PHONE,
		IDENTITY_CARD,
		ENTRY_DATE,
		LEAVE_DATE,
		MOBILE_PHONE,
		EMAIL,
		CREATE_TIME,
		MODIFY_TIME,
		ACTIVE,
		CREATE_USER_CODE,
		MODIFY_USER_CODE) VALUES	
	(
		#{id, jdbcType=VARCHAR},
		#{empName, jdbcType=VARCHAR},
		#{pinyin, jdbcType=VARCHAR},
		#{empCode, jdbcType=VARCHAR},
		#{gender, jdbcType=VARCHAR},
		#{unifieldCode, jdbcType=VARCHAR},
		#{orgCode, jdbcType=VARCHAR},
		#{title, jdbcType=VARCHAR},
		#{degree, jdbcType=VARCHAR},
		#{birthdate, jdbcType=TIMESTAMP},
		#{status, jdbcType=VARCHAR},
		#{phone, jdbcType=VARCHAR},
		#{identityCard, jdbcType=VARCHAR},
		#{entryDate, jdbcType=TIMESTAMP},
		#{leaveDate, jdbcType=TIMESTAMP},
		#{mobilePhone, jdbcType=VARCHAR},
		#{email, jdbcType=VARCHAR},
		to_timestamp(#{createTime,jdbcType=VARCHAR},'yyyy-mm-dd hh24:mi:ss.ff'),
		to_timestamp(#{modifyTime,jdbcType=VARCHAR},'yyyy-mm-dd hh24:mi:ss.ff'),
		#{active, jdbcType=CHAR},
		#{createUser, jdbcType=VARCHAR},
		#{modifyUser, jdbcType=VARCHAR}
	)
	</insert> 
	
	
	<!-- 配合主数据项目，修改数据 ： -->
	<update id="updateEmployeeOfUU"
		parameterType="com.deppon.foss.module.base.baseinfo.api.shared.domain.EmployeeEntity">
		update/** 综合:修改数据  **/ BSE.T_BAS_EMPLOYEE A SET 
		A.EMP_NAME=#{empName, jdbcType=VARCHAR},
		A.PINYIN=#{pinyin, jdbcType=VARCHAR},
		A.EMP_CODE=#{empCode, jdbcType=VARCHAR},
		A.GENDER=#{gender, jdbcType=VARCHAR},
		A.UNIFIELD_CODE=#{unifieldCode, jdbcType=VARCHAR},
		A.ORG_CODE=#{orgCode, jdbcType=VARCHAR},
		A.TITLE=#{title, jdbcType=VARCHAR},
		A.DEGREE=#{degree, jdbcType=VARCHAR},
		A.BIRTHDATE=#{birthdate, jdbcType=TIMESTAMP},
		A.STATUS=#{status, jdbcType=VARCHAR},
		A.PHONE=#{phone, jdbcType=VARCHAR},
		A.IDENTITY_CARD=#{identityCard, jdbcType=VARCHAR},
		A.ENTRY_DATE=#{entryDate, jdbcType=TIMESTAMP},
		A.LEAVE_DATE=#{leaveDate, jdbcType=TIMESTAMP},
		A.MOBILE_PHONE=#{mobilePhone, jdbcType=VARCHAR},
		A.EMAIL=#{email, jdbcType=VARCHAR},
		A.MODIFY_TIME=to_timestamp(#{modifyTime,jdbcType=VARCHAR},'yyyy-mm-dd hh24:mi:ss.ff'),
		A.ACTIVE=#{active, jdbcType=CHAR},
		A.CREATE_USER_CODE=#{createUser, jdbcType=VARCHAR},
		A.MODIFY_USER_CODE=#{modifyUser, jdbcType=VARCHAR}
		<where>
			A.EMP_CODE=#{empCode, jdbcType=VARCHAR}
			AND A.CREATE_TIME=to_timestamp(#{createTime,jdbcType=VARCHAR},'yyyy-mm-dd hh24:mi:ss.ff')
		</where>
	</update> 
	<!-- 配合主数据项目，修改临时人员数据 ： -->
	<update id="updateTempEmployeeOfUU"
		parameterType="com.deppon.foss.module.base.baseinfo.api.shared.domain.EmployeeEntity">
		update/** 综合:修改数据  **/ BSE.T_BAS_EMPLOYEE A SET 
		A.EMP_NAME=#{empName, jdbcType=VARCHAR},
		A.PINYIN=#{pinyin, jdbcType=VARCHAR},
		A.EMP_CODE=#{empCode, jdbcType=VARCHAR},
		A.GENDER=#{gender, jdbcType=VARCHAR},
		A.UNIFIELD_CODE=#{unifieldCode, jdbcType=VARCHAR},
		A.ORG_CODE=#{orgCode, jdbcType=VARCHAR},
		A.TITLE=#{title, jdbcType=VARCHAR},
		A.DEGREE=#{degree, jdbcType=VARCHAR},
		A.BIRTHDATE=#{birthdate, jdbcType=TIMESTAMP},
		A.STATUS=#{status, jdbcType=VARCHAR},
		A.PHONE=#{phone, jdbcType=VARCHAR},
		A.IDENTITY_CARD=#{identityCard, jdbcType=VARCHAR},
		A.ENTRY_DATE=#{entryDate, jdbcType=TIMESTAMP},
		A.LEAVE_DATE=#{leaveDate, jdbcType=TIMESTAMP},
		A.MOBILE_PHONE=#{mobilePhone, jdbcType=VARCHAR},
		A.EMAIL=#{email, jdbcType=VARCHAR},
		A.MODIFY_TIME=to_timestamp(#{modifyTime,jdbcType=VARCHAR},'yyyy-mm-dd hh24:mi:ss.ff'),
		A.ACTIVE=#{active, jdbcType=CHAR},
		A.CREATE_USER_CODE=#{createUser, jdbcType=VARCHAR},
		A.MODIFY_USER_CODE=#{modifyUser, jdbcType=VARCHAR}
		<where>
			A.EMP_CODE=#{empCode, jdbcType=VARCHAR}
		</where>
	</update> 
	
	<!-- 根据 EMP_CODE 精确查询数据配合主数据项目查询临时人员 -->
	<select id="queryTempEmployeeByEmpCode" resultMap="employeeQueryResultMap"
		parameterType="com.deppon.foss.module.base.baseinfo.api.shared.domain.EmployeeEntity">
		<![CDATA[
		  SELECT 
		  /** 综合:根据 EMP_CODE 精确查询数据  **/
		]]>
		<include refid="query_employee_param" />
		<![CDATA[
	    	FROM BSE.T_BAS_EMPLOYEE A 
		]]>
		<where>
			A.EMP_CODE=#{empCode} 
		</where>
	</select>
	
	<!-- 根据员工编号查询其是否为营业部经理 -->
	<select id="queryEmpIsSaleDeptOfficer" resultType="java.lang.Integer"
		parameterType="map">
		  SELECT 
		  /** 综合:根据员工编号查询其是否为营业部经理  **/
  		  COUNT(1)
	    	FROM BSE.T_BAS_EMPLOYEE A 
	    	INNER JOIN BSE.T_BAS_DATA_POSTION_DEGREE B
	    	 ON B.VALUE_CODE = A.TITLE	
	    	 AND B.ACTIVE = A.ACTIVE 
	    	 WHERE A.ACTIVE=#{active, jdbcType=VARCHAR}
	    	 AND A.EMP_CODE=#{empCode, jdbcType=VARCHAR}
	    	 AND A.TITLE=#{titleCode, jdbcType=VARCHAR}
	</select>
	
	<select id="queryCashierNameAndDepTelephone" resultMap="employeeQueryResultMap"
		parameterType="com.deppon.foss.module.base.baseinfo.api.shared.domain.EmployeeEntity">
		  SELECT 
		  /** 综合:通过部门编码，查询该部门下的所有收银员、以及部门电话  **/
		  E.EMP_CODE,
		  E.EMP_NAME
	    FROM BSE.T_BAS_EMPLOYEE E 
	    	JOIN BSE.T_BAS_DATA_POSTION_DEGREE D
	    	 ON E.TITLE=D.VALUE_CODE	
	    	 AND E.ACTIVE=D.ACTIVE
	   <where>
	   E.ACTIVE='Y'
	    	 AND E.ORG_CODE=#{orgCode, jdbcType=VARCHAR}
	    	 AND D.VALUE_NAME='收银员'
	   </where>	 
	</select>
<!-- 根据部门编号来查询该部门下面的所有员工-->
	<select id="queryEmployeeByOrgCode" resultMap="employeeSimpleResultMap"
		parameterType="com.deppon.foss.module.base.baseinfo.api.shared.domain.EmployeeEntity">
		<![CDATA[
		  SELECT 
		  /** 根据部门编号来查询该部门下面的所有员工  **/
		]]>
		<include refid="simple_param" />	
	    	FROM BSE.T_BAS_EMPLOYEE A 
	    	 WHERE 
	    	 A.ACTIVE='Y'
	    	 <if test="orgCode!=null and orgCode !=''">
                AND A.ORG_CODE = #{orgCode,jdbcType=VARCHAR}
            </if>
            
	</select>
</mapper>
