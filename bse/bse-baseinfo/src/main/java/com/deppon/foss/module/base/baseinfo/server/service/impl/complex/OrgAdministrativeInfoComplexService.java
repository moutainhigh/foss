/*******************************************************************************
 * Copyright 2013 BSE TEAM
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *    http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * PROJECT NAME	: bse-baseinfo
 * 
 * FILE PATH        	: src/main/java/com/deppon/foss/module/base/baseinfo/server/service/impl/complex/OrgAdministrativeInfoComplexService.java
 * 
 * FILE NAME        	: OrgAdministrativeInfoComplexService.java
 * 
 * AUTHOR			: FOSS综合管理开发组
 * 
 * HOME PAGE		:  http://www.deppon.com
 * 
 * COPYRIGHT		: Copyright (c) 2013  Deppon All Rights Reserved.
 ******************************************************************************/
/*
 * Copyright by Deppon and the original author or authors.
 * 
 * This document only allow internal use ,Any of your behaviors using the file
 * not internal will pay legal responsibility.
 *
 * You may learn more information about Deppon from
 *
 *      http://www.deppon.com
 *
 */ 
/**
DP-FOSS-综合管理系统用例-修改_查询行政组织业务属性-V1.2

修订记录
日期	修订内容	修订人员	版本号
2012-04-20	新增	李俊	V0.1
2012-06-28	去掉“可代收货款，可货到付款，可返回签单”属性（原因：所有的派送部都开展这三个业务，不必分开记录）。	李俊  	V0.2
2012-06-28	“到达营业部”的属性增加“单件重量上限(KG)”，“单件体积上限(方)”，“单票重量上限(KG)”，“单票体积上限(方)”，“自提区域”和“派送区域”。	李俊	V0.3
2012-07-02	修改了“接送货车队”的添加方式。	李俊	V0.4
2012-07-03	修改了“调度组信息”的“所属车队”的交互方式，供评审会议评审。	李俊	V0.5
2012-07-05	按照评审会议的评审进行修改：
部门面积 分为两个字段：总面积，外场面积
修改字段“接送货车队”为“车队”
添加标识：“集中开单组”（是否集中开单部门）
调度组所属车队由“公共选择框”修改为“列表框”	李俊	V0.6
2012-07-10	添加“适用产品”，“所属集中开单组”属性。	李俊	V0.61
2012-07-12	添加“是否收空运货”，“是否收汽运货”属性。	李俊	V0.62
2012-07-20	添加“车队信息”，“车队组信息”，“事业部信息”。	李俊	V0.63
2012-09-18	修改了行政组织业务属性的公共业务信息的显示方式，增加了“取消到达日期”，“转货部门”，去掉了“自提范围”的查看电子地图的功能。
增加了车队对应的营业区，行政区，车队类型。
增加了车队所属外场。	李俊	V1.1
2012-12-05	增加了 :

国家地区 部门英文简称,部门服务区坐标编号,部门电话,部门传真,部门简称,所属实体财务部, 部门备注信息,是否营业大区,是否实体财务部,是否派送排单,是否理货,派送排单服务外场,理货部门服务外场,理货业务类型

是否可开装卸费,是否可返回签单,是否可货到付款,是否可代收货款,

对公银行信息:
银行账号,银行开户名,部门标杆编码,银行编码,银行名称,支行编码,支行名称,省份编码,省份名称,城市编码,城市名称

修改了：是否营业区 为“是否营业小区”。	李俊	V1.2
2013-01-15	添加了组织的“组织级别”，车队中的“是否顶级车队”，“是否直接管车”，“所服务集中开单组”，车队组：“所服务集中开单组”。	李俊	V1.21

1.	SUC-85-修改_查询行政组织业务属性
1.1	相关业务用例
BUC_FOSS_5.20.30_510确认承运信息。
BUC_FOSS_5.20.20_520接货运单开单。
BUC_FOSS_5.20.10_560交接接货。
BUC_FOSS_5.20.30_530开单收货。
BUC_FOSS_5.60.05_540整车开单收货。
BUC_FOSS_5.60.10_730变更运单。

1.2	用例描述
该用例可对行政组织业务属性进行修改、查询。

1.3	用例条件
条件类型	描述	引用系统用例
前置条件	1.	行政组织信息完备。	SUC-647同步行政组织接口

后置条件	1．为系统用例“SUC-496-录入运输信息”提供查询。	SUC-496录入运输信息

1.4	操作用户角色
操作用户	描述
系统维护人员	系统维护人员对行政组织业务属性进行修改、查询操作。
1.5	界面要求
无

1.5.1	表现方式
Web页面

1.5.2	界面原型-主界面
 
图一：行政组织业务属性主界面
1.5.3	界面描述-主界面
1.	功能按钮区域
1)	查询按钮：输入查询条件，点击查询按钮，系统返回查询结果，刷新查询列表。
2)	查看详细信息：点击树形结构中的组织名称，在树型结构的右边显示这个组织的详情，参见【图三：行政组织业务属性详情界面】。
2.	字段输入区域
1)	参见数据元素【行政组织业务属性查询条件】。
3.	树型结构区域
1)	树型结构展示了行政组织的名称，点击树型结构中的部门名称，在右边显示这个部门的业务属性详情。
2)	点击树形结构的“+”，在组织树中展开该行政组织下一级的所有行政组织。点击树形结构的“-”，则收起该行政组织下一级的所有行政组织。
1.5.4	界面原型-行政组织业务属性修改界面
   
 
图二：行政组织业务属性修改界面
1.5.5	界面描述-行政组织业务属性修改界面
1.	功能按钮区域
1)	保存按钮：点击保存按钮，若保存成功，提示保存成功，返回上一级界面，若保存失败，提示用户保存失败的原因，停留在当前界面。
2)	右全移按钮：点击右全移按钮，将左框中的数据全部移到右框。
3)	右移按钮：从左框中选择一条数据，点击右移按钮，将左框选中的数据移到右框。
4)	左移按钮：从右框中选择一条数据，点击左移按钮，将右框选中的数据移到左框。
5)	左全移按钮：点击左全移按钮，将右框中的数据全部移到左框。
6)	重置按钮：点击重置按钮，恢复行政组织业务属性的初始状态。
7)	取消按钮：点击取消按钮，退出当前界面，返回主界面。
8)	编辑部门电子地图按钮：点击编辑部门电子地图按钮，进入“编辑部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
9)	编辑自提区域电子地图按钮：点击编辑自提区域电子地图按钮，进入“编辑自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
10)	编辑派送区域电子地图按钮：点击编辑派送区域电子地图按钮，进入“编辑派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
2.	字段输入区域
1)	参见数据元素【行政组织业务属性信息】,【提货信息】,【外场信息】,【调度组信息】，【车队信息】，【车队组信息】，【事业部信息】。
1.5.6	界面原型-行政组织业务属性详情界面
   
图三：行政组织业务属性详情界面
1.5.7	界面描述-行政组织业务属性详情界面
2.	功能按钮区域
1)	修改按钮：点击修改按钮，进入修改界面，参见【图二：行政组织业务属性修改界面】。
2)	查看部门电子地图按钮：点击查看部门电子地图按钮，进入“查看部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
3)	查看自提区域电子地图按钮：点击查看自提区域电子地图按钮，进入“查看自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
4)	查看派送区域电子地图按钮：点击查看派送区域电子地图按钮，进入“查看派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
3.	字段输入区域
1)	参见数据元素【行政组织业务属性信息】，【提货信息】，【外场信息】，【调度组信息】，【车队信息】，【车队组信息】，【车队信息】，【部门基本信息】。
1.5.8	界面原型-编辑或查看电子地图界面
 
图四：编辑或查看电子地图界面
1.6	操作步骤
1.6.1	行政组织业务属性查询操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入行政组织业务属性主界面。		
2	输入查询条件，点击查询按钮。	【行政组织业务属性查询条件】	系统返回查询结果，在组织树中突出显示查询结果。
1.6.2	行政组织业务属性修改操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入行政组织业务属性主界面。		
2	输入查询条件，点击查询按钮。	【行政组织业务属性查询条件】	系统返回查询结果，在组织树中突出显示查询结果。
3	点击树型结构中的名称。	【行政组织业务属性信息】，【提货信息】，【外场信息】，【调度组信息】，【部门基本信息】，【车队信息】，【车队组信息】，【事业部信息】，【排单部门信息】，【理货部门信息】，【对公银行账号信息】	在组织树的右边展示行政组织业务属性详情界面。
4	点击修改按钮。		进入行政组织业务属性修改界面。
5	修改行政组织业务属性，然后点击保存按钮。		成功保存界面信息至数据库，返回主界面。
行政组织业务属性修改操作步骤-异常操作
序号	扩展事件	相关数据	备注
5a	点击取消按钮，退出当前界面，返回主界面。		
5b	若保存失败，弹出对话框，提示用户保存失败以及失败原因，继续停留在修改界面。		

1.7	业务规则
序号	描述
SR-1	选择省份信息后，城市的选择范围自动变成已选省份所包含的城市。选择城市信息后，区县的选择范围自动变成已选城市所包含的区县。
SR-2	只有选择了“是否营业部”，界面才能修改或者显示营业部信息。
SR-3	只有选择了“可到达”，界面才能修改或者显示提货信息，到达适用产品。
SR-4	只有选择了“是否外场”，界面才能修改或者显示外场信息。
SR-5	只有选择了“是否车队调度组”，界面才能修改或者显示调度组信息。
SR-6	只有选择了“可自提”，界面才能修改或者显示“自提区域描述”。
SR-7	只有选择了“可派送”，界面才能修改或者显示“派送区域描述”。
SR-8	只有选择了“可出发”，界面才能修改或者显示“车队”,“出发适用产品”，“所属集中开单组”。
SR-9	外场简码,外场编码均不可重复。如果录入的已存在，提示用户已存在。
SR-10	只有选择了“是否车队”，界面才能修改或者显示车队信息。
SR-11	只有选择了“是否车队组”，界面才能修改或者显示车队组信息。
SR-12	在一个事业部内，集中接送货车队编码不能重复，当输入的编码已存在时，提示用户编码已存在。
SR-13	只有选择了“是否驻地部门”，界面才能修改或者显示“驻地营业部所属外场”。
SR-14	只有选择了“是否事业部”，界面才能修改或者显示“事业部信息”。
SR-15	事业部编码不能重复，当输入的编码已存在时，提示用户编码已存在。
SR-16	最大临时欠款额度的不是人工维护，是动态变化的，根据前3个月的最高收入所在等级决定。
SR-17	外场的部门面积要大于货区面积，外场的货区面积要大于货台面积。如果用户填写的值不满足此规则，则提示用户。
SR-18	当有客户在某部门开临欠时，此部门的已用临欠额度做相应的更新。
SR-19	如果当前部门是外场，“部门英文简称”必填。
SR-20	是否可返回签单, 是否可货到付款, 是否可代收货款 营业部默认都有这些业务。
SR-21	只有派送排单才显示或者编辑“排单部门信息”。
SR-22	只有理货才显示或者编辑“理货部门信息”。
SR-23	“是否可开装卸费”默认不选 。
SR-24	部门基本信息 均从UUMS同步。
SR-25	是否事业部, 是否营业小区, 是否营业大区从UUMS同步，不能修改。
SR-26	只有选择了“可空运配载”才能修改或者显示“是否空运总调”
SR-27	关于最大临欠额度：
1. 结算每月初统计客户上月收入，存入"客户月收入表" 
2. 综合取出客户月收入表中最近3个月收入 
3. 综合根据最大月收入查找收入区间表，获得最新额度后，更新到部门最大临欠额度中 
4. 综合提供接口，用于查询部门最大临欠额度 
5. 综合现有"已用额度"取消 
6. 综合与结算实现方式保持一致，都用Java定时任务，或者都用Stored Procedure

1.8	数据元素
1.8.1	行政组织业务属性部门公共业务信息
字段名称 	说明 	输入限制	长度	是否必填	备注
部门编号	部门的编号	N/A	N/A	N/A	
标杆编码	同基准编码，OA，CRM这些系统对同一部门的唯一标识	N/A	N/A	N/A	
部门名称	部门的名称	N/A	N/A	N/A	
部门面积	部门面积（单位：平方米）	文本	20	否	
国家地区	部门所有的国家地区	下拉框	50	是	
省份	部门所在的省份	下拉框	50	是	
城市	部门所在的城市	下拉框	50	是	
区县	部门所在的区县	下拉框	50	是	
部门英文简称	部门英文简称	文本	200	否	
部门备注信息	部门备注信息	文本	1000	否	
部门服务区坐标编号	部门服务区坐标编号	文本	50	否	
部门电话	部门电话	文本	50	否	
部门传真	部门传真	文本	50	否	
部门简称	部门简称	文本	50	否	
所属实体财务部	所属实体财务部	文本	50	否	
是否营业部	是否是营业部	数字	10	是	
是否外场	是否是外场	数字	10	是	
可空运配载	是否可空运配载	数字	10	是	
是否车队	是否是车队	数字	10	是	
是否车队调度组	是否是车队调度组	数字	10	是	
是否集中开单组	这个部门是否是集中开单组	数字	10	是	
是否事业部	是否事业部	数字	10	是	
是否车队组	是否车队组	数字	10	是	
是否营业小区	是否营业区	数字	10	是	
是否营业大区	是否营业大区	数字	10	是	
是否实体财务部	是否实体财务部	数字	10	是	
是否派送排单	是否派送排单	数字	10	是	
是否理货	是否理货	数字	10	是	
派送排单服务外场	派送排单服务外场	文本	50	否	
理货部门服务外场	理货部门服务外场	文本	50	否	
理货业务类型	理货业务类型	文本	50	否	
是否空运总调	是否空运总调	数字	10	是	
					
					
可出发	是否可做出发业务	数字	10	是	
可到达	是否可做到达业务	数字	10	是	
是否驻地部门	是否是驻地部门	数字	10	是	
广告语	广告语	文本	200	否	
开业日期	部门的开业日期	日期	20	是	
最大临欠额度	最大临欠额度	文本	200	否	
已用临欠额度	已用临欠额度,由结算来维护。	N/A	N/A	N/A	
出发适用产品	出发部门能提供的产品	列表框	N/A	否	数据来源于产品价格模型
到达适用产品	到达部门能提供的产品	列表框	N/A	否	数据来源于产品价格模型
所属集中开单组	所属集中开单组	选择框	N/A	否	
驻地营业部所属外场					
车队	接送货车队	列表框	N/A	否	
1.8.2	营业部信息
字段名称 	说明 	输入限制	长度	是否必填	备注
可出发	是否可做出发业务	数字	10	是	
可到达	是否可做到达业务	数字	10	是	
是否驻地部门	是否是驻地部门	数字	10	是	
是否集中接送货					
是否可开装卸费	是否可开装卸费	文本	1	是	默认为是（Y）
是否可返回签单	是否可返回签单	文本	1	是	默认为是（Y）
是否可货到付款	是否可货到付款	文本	1	是	默认为是（Y）
是否可代收货款	是否可代收货款	文本	1	是	默认为是（Y）
广告语	广告语	文本	200	否	
开业日期	部门的开业日期	日期	20	是	
最大临欠额度	最大临欠额度	文本	200	N/A	
已用临欠额度	已用临欠额度,由结算来维护。	N/A	N/A	N/A	
出发适用产品	出发部门能提供的产品	列表框	N/A	否	数据来源于产品价格模型
到达适用产品	到达部门能提供的产品	列表框	N/A	否	数据来源于产品价格模型
所属集中开单组	所属集中开单组	选择框	N/A	否	
驻地营业部所属外场	驻地营业部所属外场	选择框	N/A	否	
车队	接送货车队	列表框	N/A	否	
取消到达日期	取消到达日期	日期	20	否	
转货部门	转货部门	选择框	N/A	否	
1.8.21.8.3	提货信息
字段名称 	说明 	输入限制	长度	是否必填	备注
可自提	是否可以让客户自提	数字	10	是	
可派送	是否能送货上门	数字	10	是	
可空运到达	可空运到达	数字	10	是	
可汽运到达	可汽运到达	数字	10	是	
单件重量上限（KG）	单件重量上限是多少（KG）	数字	10	否	
单件体积上限(方)	单件体积上限是多少(方)	数字	10	否	
单票重量上限（KG）	单票重量上限是多少（KG）	数字	10	否	
单票体积上限(方)	单票体积上限是多少(方)	数字	10	否	
自提区域描述	自提区域描述	文本	255	否	
派送区域描述	派送区域描述	文本	255	否	
1.8.31.8.4	外场信息
字段名称 	说明 	输入限制	长度	是否必填	备注
可汽运配载	是否汽运配载	数字	10	是	
可外发配载	是否外发配载	数字	10	是	
可打木架	是否可打木架	数字	10	是	
可中转	是否中转	数字	10	是	
是否有自动分拣机	是否有自动分拣机	数字	10	是	
外场编码	配载部门的外场编码	文本	88	是	
外场简码	外场的简码，不能重复。	文本	88	是	
货区面积(平方米)	货区的面积	文本	20	否	
货台面积(平方米)	货台的面积	文本	20	否	
库型	外场有几个入口（单边/双边/三边/四边），默认为“请选择”	下拉框	N/A	否	
1.8.41.8.5	调度组信息
字段名称 	说明 	输入限制	长度	是否必填	备注
所属车队	调度组所属的车队	列表框	N/A	是	
1.8.51.8.6	车队信息
字段名称 	说明 	输入限制	长度	是否必填	备注
是否集中接送货	是否集中接送货	数字	10	是	
是否顶级车队	是否顶级车队	数字	10	是	
是否直接管车	是否直接管车	数字	10	是	
所服务集中开单组	所服务集中开单组	文本	200	是	
集中接送货车队编码	集中接送货车队编码	文本	255	是	
车队所属外场	车队所属外场	选择框	N/A	否	
车队类型	车队类型（包含长途车队，物流班车车队，接送货车队）	下拉框	N/A	否	
车队负责行政区	车队负责行政区	选择框	N/A	否	
车队负责营业区	车队负责营业区	选择框	N/A	否	
1.8.61.8.7	车队组信息
字段名称 	说明 	输入限制	长度	是否必填	备注
是否集中接送货	是否集中接送货	数字	10	是	
所属车队	车队组所属的车队	文本	255	是	
车队所属外场	车队所属外场	选择框	N/A	否	
车队组类型	车队组类型（包含长途车队，物流班车车队，接送货车队）	下拉框	N/A	否	
车队组负责行政区	车队组负责行政区	选择框	N/A	否	
车队组负责营业区	车队组负责营业区	选择框	N/A	否	
所服务集中开单组	所服务集中开单组	文本	200	是	
1.8.71.8.8	事业部信息
字段名称 	说明 	输入限制	长度	是否必填	备注
事业部编码(用于集中接送货区编码)	事业部编码(用于集中接送货区编码)	文本	50	是	
1.8.81.8.9	部门基本信息
字段名称 	说明 	输入限制	长度	是否必填	备注
组织负责人	组织负责人工号	N/A	N/A	N/A	
组织负责人姓名	组织负责人姓名	N/A	N/A	N/A	
负责人	组织负责人工号	N/A	N/A	N/A	
联系电话	联系电话	N/A	N/A	N/A	
部门传真	部门传真	N/A	N/A	N/A	
上级组织名称	上级行政组织名称	N/A	N/A	N/A	
上级组织标杆编码	上级行政组织的标杆编码，DP+6位数字编码	N/A	N/A	N/A	从OA同步
上级组织编码	上级行政组织的标杆编码，DP+6位数字编码	N/A	N/A	N/A	
上级组织名称	上级行政组织名称	N/A	N/A	N/A	
邮编号码	邮编号码				
所属子公司	组织所属子公司的名称	N/A	N/A	N/A	
财务成本中心	部门对应的财务成本中心	N/A	N/A	N/A	
部门地址	部门的详细地址	N/A	N/A	N/A	
部门备注信息	部门备注信息	N/A	N/A	N/A	
UUMS主键ID	UUMS主键ID	N/A	N/A	N/A	
UUMS上级主键ID	UUMS上级主键ID	N/A	N/A	N/A	
UUMS主键ID序列	UUMS主键ID序列	N/A	N/A	N/A	
组织状态	显示顺序启用、作废、异动	N/AN/A	N/AN/A	N/AN/A	
显示顺序	部门层级	N/A	N/A	N/A	
部门层级	部门备注信息	N/A	N/A	N/A	
启用日期	组织启用日期	N/A	N/A	N/A	
作废日期	组织作废日期	N/A	N/A	N/A	
组织状态	启用、作废、异动	N/A	N/A	N/A	
是否为叶子节点	是否为叶子节点	N/A	N/A	N/A	
部门简称	部门简称	N/A	N/A	N/A	
组织性质	组织性质	N/A	N/A	N/A	
地区编码默认拼音	地区编码默认拼音	N/A	N/A	N/A	
组织邮箱	组织邮箱	N/A	N/A	N/A	
已封存系统	已封存系统	N/A	N/A	N/A	
EHR部门编码	EHR部门编码	N/A	N/A	N/A	
创建人编码	创建人编码	N/A	N/A	N/A	初始数据从UUMS同步，后期由系统维护
创建时间	创建时间	N/A	N/A	N/A	初始数据从UUMS同步，后期由系统维护
修改人编码	修改人编码	N/A	N/A	N/A	初始数据从UUMS同步，后期由系统维护
修改时间	修改时间	N/A	N/A	N/A	初始数据从UUMS同步，后期由系统维护
1.8.10	对公银行账号信息
字段名称 	说明 	输入限制	长度	是否必填	备注
银行账号	对公银行账号	N/A	N/A	N/A	
银行开户名	银行开户名	N/A	N/A	N/A	
部门标杆编码	对公银行省市支行	N/A	N/A	N/A	
银行编码	银行编码	N/A	N/A	N/A	
银行名称	银行名称	N/A	N/A	N/A	
支行编码	支行编码	N/A	N/A	N/A	
支行名称	支行名称	N/A	N/A	N/A	
省份编码	省份编码	N/A	N/A	N/A	
省份名称	省份名称	N/A	N/A	N/A	
城市编码	城市编码	N/A	N/A	N/A	
城市名称	城市名称	N/A	N/A	N/A	
	
	
	
	
1.8.91.8.11	行政组织业务属性查询条件
字段名称 	说明 	输入限制	长度	是否必填	备注
部门名称	部门名称	文本	80	否	

1.9	非功能性需求
使用量	
2012年全网估计用户数	
响应要求（如果与全系统要求 不一致的话）	
使用时间段	
高峰使用时间段	

1.10	接口描述：
接口名称 	对方系统（外部系统或内部其他模块）	接口描述
组织架构信息接口	FOSS系统	由FOSS系统提供部门信息接口，UUMS调用传递部门的更新信息到FOSS系统。
部门地理位置信息接口	GIS系统	通过集成GIS电子地图，确定部门的地理位置（坐标）以及营业部的自提和派送区域。




dp-foss-综合管理系统用例-查询财务组织-v1.2

修订记录 
日期 	修订内容 	修订人员 	版本号 
2012-04-26 	新增 	李俊	V0.1
2012-06-12 	1. 按照UED要求，单个查询输入框无需“重置”按钮； 
2. 在跟UUMS沟通的新方案中，FOSS不提供“新增”财务组织的功能；    	李俊	V0.2
2012-07-13 	1.	添加了相关业务用例。
2.	修改了后置条件。	李俊	V0.3
2012-08-02	1. 通过业务部门审核签字版本升级到V0.9	李俊	V0.9
2013-02-19	与UUMS同步财务组织时需要在同步的时候添加以下属性：1、财务组织全路径 fullPath，2、 是否是叶子结点 isLeaf。	李俊	V1.2

1.	SUC-84-查询财务组织
1.1	相关业务用例
BUC_FOSS_4.7.30.30_010现金收银
BUC_FOSS_4.7.10.30_010现金小票

1.2	用例描述
该用例可对财务组织进行查询。

1.3	用例条件
条件类型	描述	引用系统用例
前置条件	UUMS已将财务组织信息同步至FOSS。	
后置条件		

1.4	操作用户角色
操作用户	描述
系统管理员	系统管理员对财务组织进行查询操作。

1.5	界面要求
1.5.1	表现方式
Web页面
1.5.2	界面原型-主界面
 
图一：财务组织主界面
1.5.3	界面描述-主界面
1.	功能按钮区域
1)	查询按钮：输入查询条件，点击查询按钮，查询结果突出显示。
2.	树形结构区域
1)	点击树形结构中的一个财务组织，在树型结构的右边显示这个财务组织的详情。参见【图二：财务组织查看界面】。
2)	点击树形结构的“+”，在组织树中展开该财务组织下一级的所有财务组织。点击树形结构的“-”，则收起该财务组织下一级的所有财务组织。
3.	字段输入区域
1)	参见数据元素【财务组织查询条件】。

1.5.4	界面原型-查看界面
 
图二：财务组织查看界面
1.5.5	界面描述-查看界面
1.	字段显示区域
1)	参见数据元素【财务组织信息】。

1.6	操作步骤
1.6.1	财务组织查询操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入财务组织主界面		
2	输入查询条件，点击查询按钮。	【财务组织查询条件】	系统返回查询结果，在财务组织树型结构中被查询的财务组织突出显示。
3	点击树型结构中的目标财务组织。		在财务组织树的右边展示财务组织详情。

1.7	业务规则
序号	描述

1.8	数据元素
1.8.1	财务组织信息
字段名称 	说明 	输入限制	长度	是否必填	备注
名称	财务组织的名称	N/A	N/A	N/A	
组织编码	财务组织的编码	N/A	N/A	N/A	
上级组织名称	上级组织的名称	N/A	N/A	N/A	
是否是成本中心	是否是成本中心	N/A	N/A	N/A	
是否是子公司	是否是子公司	N/A	N/A	N/A	
全称	财务组织的全称	N/A	N/A	N/A	
描述	描述信息	N/A	N/A	N/A	
财务组织全路径	财务组织全路径	N/A	N/A	N/A	
是否是叶子结点	是否是叶子结点	N/A	N/A	N/A	
1.8.2	财务组织查询条件
字段名称 	说明 	输入限制	长度	是否必填	备注
名称	财务组织的名称	文本	50	否	

1.9	非功能性需求
使用量	
2012年全网估计用户数	
响应要求（如果与全系统要求 不一致的话）	
使用时间段	
高峰使用时间段	

1.10	接口描述
接口名称 	对方系统（外部系统或内部其他模块）	接口描述
同步财务组织信息接口	UUMS系统	由FOSS系统提供财务组织信息接口，由UUMS调用，通过此接口传递财务组织更新信息到FOSS系统



dp-foss-综合管理系统用例-撤销组织提醒-v1.1

修订记录 
日期 	修订内容 	修订人员 	版本号 
2012-5-31 	新增 	朱俊勇	V0.1
2012-08-02	1. 通过业务部门审核签字版本升级到V0.9	李俊	V0.9
2012-12-6	1．更新主界面，更新业务规则	赵鹏	V1.01

1.	SUC-195-撤销组织提醒
1.1	相关业务用例
无
1.2	用例描述
该系统用例主要为预撤销组织相关人员提供消息提醒功能。
1.3	用例条件
条件类型	描述	引用系统用例
前置条件	1、	从UUMS同步到预撤销状态的组织信息
2、	FOSS中该组织存在相关用户（所属该组织的用户）	
后置条件	1、 待撤销组织的所有人员可以查看到消息提醒	
1.4	操作用户角色
操作用户	描述
无	被动提醒页面,无主动操作.
1.5	界面要求
1.5.1	表现方式
Web页面
1.5.2	界面原型-主界面
 
图一：撤销组织提醒界面
1.5.3	界面描述-主界面
参考FOSS系统消息提示界面。
 
1.6	操作步骤

序号	基本步骤	相关数据	补充步骤
1	显示撤销组织提醒界面		
2	用户浏览提醒信息后点击关闭按钮，返回首页		

1.7	业务规则
序号	描述
SR-1	如果系统中存在预撤销组织，则所有归属该组织的用户（包括非默认组织）在登录时需要得到提醒信息
SR-2	页面展示时调用各子系统提供的接口，取得未完成事宜列表，如果返回的事宜已经处理完成则不需要显示在提醒信息列表中。如果所有事宜都已完成 ，则不显示提醒信息列表（组织将于某时间撤销的提醒信息仍然需要显示）。
SR-3	如果相关用户所属的多个组织有预撤销状态时，按组织编码顺序显示提醒信息。

1.8	数据元素
1.8.1	组织架构数据（显示信息）
字段名称 	说明 	输入限制	长度	是否必填	备注
组织名称	行政组织名称	文本	50		
撤销日期	XXXX年XX月XX日	文本	11		
1.9	非功能性需求
使用量	
2012年全网估计用户数	
响应要求（如果与全系统要求 不一致的话）	
使用时间段	
高峰使用时间段	

1.10	接口描述
接口名称 	对方系统（外部系统或内部其他模块）	接口描述

DP-FOSS-综合管理系统用例-修改_查询行政组织业务属性-V1.2

修订记录
日期	修订内容	修订人员	版本号
2012-04-20	新增	李俊	V0.1
2012-06-28	去掉“可代收货款，可货到付款，可返回签单”属性（原因：所有的派送部都开展这三个业务，不必分开记录）。	李俊  	V0.2
2012-06-28	“到达营业部”的属性增加“单件重量上限(KG)”，“单件体积上限(方)”，“单票重量上限(KG)”，“单票体积上限(方)”，“自提区域”和“派送区域”。	李俊	V0.3
2012-07-02	修改了“接送货车队”的添加方式。	李俊	V0.4
2012-07-03	修改了“调度组信息”的“所属车队”的交互方式，供评审会议评审。	李俊	V0.5
2012-07-05	按照评审会议的评审进行修改：
部门面积 分为两个字段：总面积，外场面积
修改字段“接送货车队”为“车队”
添加标识：“集中开单组”（是否集中开单部门）
调度组所属车队由“公共选择框”修改为“列表框”	李俊	V0.6
2012-07-10	添加“适用产品”，“所属集中开单组”属性。	李俊	V0.61
2012-07-12	添加“是否收空运货”，“是否收汽运货”属性。	李俊	V0.62
2012-07-20	添加“车队信息”，“车队组信息”，“事业部信息”。	李俊	V0.63
2012-09-18	修改了行政组织业务属性的公共业务信息的显示方式，增加了“取消到达日期”，“转货部门”，去掉了“自提范围”的查看电子地图的功能。
增加了车队对应的营业区，行政区，车队类型。
增加了车队所属外场。	李俊	V1.1
2012-12-05	增加了 :

国家地区 部门英文简称,部门服务区坐标编号,部门电话,部门传真,部门简称,所属实体财务部, 部门备注信息,是否营业大区,是否实体财务部,是否派送排单,是否理货,派送排单服务外场,理货部门服务外场,理货业务类型

是否可开装卸费,是否可返回签单,是否可货到付款,是否可代收货款,

对公银行信息:
银行账号,银行开户名,部门标杆编码,银行编码,银行名称,支行编码,支行名称,省份编码,省份名称,城市编码,城市名称

修改了：是否营业区 为“是否营业小区”。	李俊	V1.2
2013-01-15	添加了组织的“组织级别”，车队中的“是否顶级车队”，“是否直接管车”，“所服务集中开单组”，车队组：“所服务集中开单组”。	李俊	V1.21

1.	SUC-85-修改_查询行政组织业务属性
1.1	相关业务用例
BUC_FOSS_5.20.30_510确认承运信息。
BUC_FOSS_5.20.20_520接货运单开单。
BUC_FOSS_5.20.10_560交接接货。
BUC_FOSS_5.20.30_530开单收货。
BUC_FOSS_5.60.05_540整车开单收货。
BUC_FOSS_5.60.10_730变更运单。

1.2	用例描述
该用例可对行政组织业务属性进行修改、查询。

1.3	用例条件
条件类型	描述	引用系统用例
前置条件	1.	行政组织信息完备。	SUC-647同步行政组织接口

后置条件	1．为系统用例“SUC-496-录入运输信息”提供查询。	SUC-496录入运输信息

1.4	操作用户角色
操作用户	描述
系统维护人员	系统维护人员对行政组织业务属性进行修改、查询操作。
1.5	界面要求
无

1.5.1	表现方式
Web页面

1.5.2	界面原型-主界面
 
图一：行政组织业务属性主界面
1.5.3	界面描述-主界面
1.	功能按钮区域
1)	查询按钮：输入查询条件，点击查询按钮，系统返回查询结果，刷新查询列表。
2)	查看详细信息：点击树形结构中的组织名称，在树型结构的右边显示这个组织的详情，参见【图三：行政组织业务属性详情界面】。
2.	字段输入区域
1)	参见数据元素【行政组织业务属性查询条件】。
3.	树型结构区域
1)	树型结构展示了行政组织的名称，点击树型结构中的部门名称，在右边显示这个部门的业务属性详情。
2)	点击树形结构的“+”，在组织树中展开该行政组织下一级的所有行政组织。点击树形结构的“-”，则收起该行政组织下一级的所有行政组织。
1.5.4	界面原型-行政组织业务属性修改界面
   
 
图二：行政组织业务属性修改界面
1.5.5	界面描述-行政组织业务属性修改界面
1.	功能按钮区域
1)	保存按钮：点击保存按钮，若保存成功，提示保存成功，返回上一级界面，若保存失败，提示用户保存失败的原因，停留在当前界面。
2)	右全移按钮：点击右全移按钮，将左框中的数据全部移到右框。
3)	右移按钮：从左框中选择一条数据，点击右移按钮，将左框选中的数据移到右框。
4)	左移按钮：从右框中选择一条数据，点击左移按钮，将右框选中的数据移到左框。
5)	左全移按钮：点击左全移按钮，将右框中的数据全部移到左框。
6)	重置按钮：点击重置按钮，恢复行政组织业务属性的初始状态。
7)	取消按钮：点击取消按钮，退出当前界面，返回主界面。
8)	编辑部门电子地图按钮：点击编辑部门电子地图按钮，进入“编辑部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
9)	编辑自提区域电子地图按钮：点击编辑自提区域电子地图按钮，进入“编辑自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
10)	编辑派送区域电子地图按钮：点击编辑派送区域电子地图按钮，进入“编辑派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
2.	字段输入区域
1)	参见数据元素【行政组织业务属性信息】,【提货信息】,【外场信息】,【调度组信息】，【车队信息】，【车队组信息】，【事业部信息】。
1.5.6	界面原型-行政组织业务属性详情界面
   
图三：行政组织业务属性详情界面
1.5.7	界面描述-行政组织业务属性详情界面
2.	功能按钮区域
1)	修改按钮：点击修改按钮，进入修改界面，参见【图二：行政组织业务属性修改界面】。
2)	查看部门电子地图按钮：点击查看部门电子地图按钮，进入“查看部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
3)	查看自提区域电子地图按钮：点击查看自提区域电子地图按钮，进入“查看自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
4)	查看派送区域电子地图按钮：点击查看派送区域电子地图按钮，进入“查看派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
3.	字段输入区域
1)	参见数据元素【行政组织业务属性信息】，【提货信息】，【外场信息】，【调度组信息】，【车队信息】，【车队组信息】，【车队信息】，【部门基本信息】。
1.5.8	界面原型-编辑或查看电子地图界面
 
图四：编辑或查看电子地图界面
1.6	操作步骤
1.6.1	行政组织业务属性查询操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入行政组织业务属性主界面。		
2	输入查询条件，点击查询按钮。	【行政组织业务属性查询条件】	系统返回查询结果，在组织树中突出显示查询结果。
1.6.2	行政组织业务属性修改操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入行政组织业务属性主界面。		
2	输入查询条件，点击查询按钮。	【行政组织业务属性查询条件】	系统返回查询结果，在组织树中突出显示查询结果。
3	点击树型结构中的名称。	【行政组织业务属性信息】，【提货信息】，【外场信息】，【调度组信息】，【部门基本信息】，【车队信息】，【车队组信息】，【事业部信息】，【排单部门信息】，【理货部门信息】，【对公银行账号信息】	在组织树的右边展示行政组织业务属性详情界面。
4	点击修改按钮。		进入行政组织业务属性修改界面。
5	修改行政组织业务属性，然后点击保存按钮。		成功保存界面信息至数据库，返回主界面。
行政组织业务属性修改操作步骤-异常操作
序号	扩展事件	相关数据	备注
5a	点击取消按钮，退出当前界面，返回主界面。		
5b	若保存失败，弹出对话框，提示用户保存失败以及失败原因，继续停留在修改界面。		

1.7	业务规则
序号	描述
SR-1	选择省份信息后，城市的选择范围自动变成已选省份所包含的城市。选择城市信息后，区县的选择范围自动变成已选城市所包含的区县。
SR-2	只有选择了“是否营业部”，界面才能修改或者显示营业部信息。
SR-3	只有选择了“可到达”，界面才能修改或者显示提货信息，到达适用产品。
SR-4	只有选择了“是否外场”，界面才能修改或者显示外场信息。
SR-5	只有选择了“是否车队调度组”，界面才能修改或者显示调度组信息。
SR-6	只有选择了“可自提”，界面才能修改或者显示“自提区域描述”。
SR-7	只有选择了“可派送”，界面才能修改或者显示“派送区域描述”。
SR-8	只有选择了“可出发”，界面才能修改或者显示“车队”,“出发适用产品”，“所属集中开单组”。
SR-9	外场简码,外场编码均不可重复。如果录入的已存在，提示用户已存在。
SR-10	只有选择了“是否车队”，界面才能修改或者显示车队信息。
SR-11	只有选择了“是否车队组”，界面才能修改或者显示车队组信息。
SR-12	在一个事业部内，集中接送货车队编码不能重复，当输入的编码已存在时，提示用户编码已存在。
SR-13	只有选择了“是否驻地部门”，界面才能修改或者显示“驻地营业部所属外场”。
SR-14	只有选择了“是否事业部”，界面才能修改或者显示“事业部信息”。
SR-15	事业部编码不能重复，当输入的编码已存在时，提示用户编码已存在。
SR-16	最大临时欠款额度的不是人工维护，是动态变化的，根据前3个月的最高收入所在等级决定。
SR-17	外场的部门面积要大于货区面积，外场的货区面积要大于货台面积。如果用户填写的值不满足此规则，则提示用户。
SR-18	当有客户在某部门开临欠时，此部门的已用临欠额度做相应的更新。
SR-19	如果当前部门是外场，“部门英文简称”必填。
SR-20	是否可返回签单, 是否可货到付款, 是否可代收货款 营业部默认都有这些业务。
SR-21	只有派送排单才显示或者编辑“排单部门信息”。
SR-22	只有理货才显示或者编辑“理货部门信息”。
SR-23	“是否可开装卸费”默认不选 。
SR-24	部门基本信息 均从UUMS同步。
SR-25	是否事业部, 是否营业小区, 是否营业大区从UUMS同步，不能修改。
SR-26	只有选择了“可空运配载”才能修改或者显示“是否空运总调”
SR-27	关于最大临欠额度：
1. 结算每月初统计客户上月收入，存入"客户月收入表" 
2. 综合取出客户月收入表中最近3个月收入 
3. 综合根据最大月收入查找收入区间表，获得最新额度后，更新到部门最大临欠额度中 
4. 综合提供接口，用于查询部门最大临欠额度 
5. 综合现有"已用额度"取消 
6. 综合与结算实现方式保持一致，都用Java定时任务，或者都用Stored Procedure

1.8	数据元素
1.8.1	行政组织业务属性部门公共业务信息
字段名称 	说明 	输入限制	长度	是否必填	备注
部门编号	部门的编号	N/A	N/A	N/A	
标杆编码	同基准编码，OA，CRM这些系统对同一部门的唯一标识	N/A	N/A	N/A	
部门名称	部门的名称	N/A	N/A	N/A	
部门面积	部门面积（单位：平方米）	文本	20	否	
国家地区	部门所有的国家地区	下拉框	50	是	
省份	部门所在的省份	下拉框	50	是	
城市	部门所在的城市	下拉框	50	是	
区县	部门所在的区县	下拉框	50	是	
部门英文简称	部门英文简称	文本	200	否	
部门备注信息	部门备注信息	文本	1000	否	
部门服务区坐标编号	部门服务区坐标编号	文本	50	否	
部门电话	部门电话	文本	50	否	
部门传真	部门传真	文本	50	否	
部门简称	部门简称	文本	50	否	
所属实体财务部	所属实体财务部	文本	50	否	
是否营业部	是否是营业部	数字	10	是	
是否外场	是否是外场	数字	10	是	
可空运配载	是否可空运配载	数字	10	是	
是否车队	是否是车队	数字	10	是	
是否车队调度组	是否是车队调度组	数字	10	是	
是否集中开单组	这个部门是否是集中开单组	数字	10	是	
是否事业部	是否事业部	数字	10	是	
是否车队组	是否车队组	数字	10	是	
是否营业小区	是否营业区	数字	10	是	
是否营业大区	是否营业大区	数字	10	是	
是否实体财务部	是否实体财务部	数字	10	是	
是否派送排单	是否派送排单	数字	10	是	
是否理货	是否理货	数字	10	是	
派送排单服务外场	派送排单服务外场	文本	50	否	
理货部门服务外场	理货部门服务外场	文本	50	否	
理货业务类型	理货业务类型	文本	50	否	
是否空运总调	是否空运总调	数字	10	是	
					
					
可出发	是否可做出发业务	数字	10	是	
可到达	是否可做到达业务	数字	10	是	
是否驻地部门	是否是驻地部门	数字	10	是	
广告语	广告语	文本	200	否	
开业日期	部门的开业日期	日期	20	是	
最大临欠额度	最大临欠额度	文本	200	否	
已用临欠额度	已用临欠额度,由结算来维护。	N/A	N/A	N/A	
出发适用产品	出发部门能提供的产品	列表框	N/A	否	数据来源于产品价格模型
到达适用产品	到达部门能提供的产品	列表框	N/A	否	数据来源于产品价格模型
所属集中开单组	所属集中开单组	选择框	N/A	否	
驻地营业部所属外场					
车队	接送货车队	列表框	N/A	否	
1.8.2	营业部信息
字段名称 	说明 	输入限制	长度	是否必填	备注
可出发	是否可做出发业务	数字	10	是	
可到达	是否可做到达业务	数字	10	是	
是否驻地部门	是否是驻地部门	数字	10	是	
是否集中接送货					
是否可开装卸费	是否可开装卸费	文本	1	是	默认为是（Y）
是否可返回签单	是否可返回签单	文本	1	是	默认为是（Y）
是否可货到付款	是否可货到付款	文本	1	是	默认为是（Y）
是否可代收货款	是否可代收货款	文本	1	是	默认为是（Y）
广告语	广告语	文本	200	否	
开业日期	部门的开业日期	日期	20	是	
最大临欠额度	最大临欠额度	文本	200	N/A	
已用临欠额度	已用临欠额度,由结算来维护。	N/A	N/A	N/A	
出发适用产品	出发部门能提供的产品	列表框	N/A	否	数据来源于产品价格模型
到达适用产品	到达部门能提供的产品	列表框	N/A	否	数据来源于产品价格模型
所属集中开单组	所属集中开单组	选择框	N/A	否	
驻地营业部所属外场	驻地营业部所属外场	选择框	N/A	否	
车队	接送货车队	列表框	N/A	否	
取消到达日期	取消到达日期	日期	20	否	
转货部门	转货部门	选择框	N/A	否	
1.8.21.8.3	提货信息
字段名称 	说明 	输入限制	长度	是否必填	备注
可自提	是否可以让客户自提	数字	10	是	
可派送	是否能送货上门	数字	10	是	
可空运到达	可空运到达	数字	10	是	
可汽运到达	可汽运到达	数字	10	是	
单件重量上限（KG）	单件重量上限是多少（KG）	数字	10	否	
单件体积上限(方)	单件体积上限是多少(方)	数字	10	否	
单票重量上限（KG）	单票重量上限是多少（KG）	数字	10	否	
单票体积上限(方)	单票体积上限是多少(方)	数字	10	否	
自提区域描述	自提区域描述	文本	255	否	
派送区域描述	派送区域描述	文本	255	否	
1.8.31.8.4	外场信息
字段名称 	说明 	输入限制	长度	是否必填	备注
可汽运配载	是否汽运配载	数字	10	是	
可外发配载	是否外发配载	数字	10	是	
可打木架	是否可打木架	数字	10	是	
可中转	是否中转	数字	10	是	
是否有自动分拣机	是否有自动分拣机	数字	10	是	
外场编码	配载部门的外场编码	文本	88	是	
外场简码	外场的简码，不能重复。	文本	88	是	
货区面积(平方米)	货区的面积	文本	20	否	
货台面积(平方米)	货台的面积	文本	20	否	
库型	外场有几个入口（单边/双边/三边/四边），默认为“请选择”	下拉框	N/A	否	
1.8.41.8.5	调度组信息
字段名称 	说明 	输入限制	长度	是否必填	备注
所属车队	调度组所属的车队	列表框	N/A	是	
1.8.51.8.6	车队信息
字段名称 	说明 	输入限制	长度	是否必填	备注
是否集中接送货	是否集中接送货	数字	10	是	
是否顶级车队	是否顶级车队	数字	10	是	
是否直接管车	是否直接管车	数字	10	是	
所服务集中开单组	所服务集中开单组	文本	200	是	
集中接送货车队编码	集中接送货车队编码	文本	255	是	
车队所属外场	车队所属外场	选择框	N/A	否	
车队类型	车队类型（包含长途车队，物流班车车队，接送货车队）	下拉框	N/A	否	
车队负责行政区	车队负责行政区	选择框	N/A	否	
车队负责营业区	车队负责营业区	选择框	N/A	否	
1.8.61.8.7	车队组信息
字段名称 	说明 	输入限制	长度	是否必填	备注
是否集中接送货	是否集中接送货	数字	10	是	
所属车队	车队组所属的车队	文本	255	是	
车队所属外场	车队所属外场	选择框	N/A	否	
车队组类型	车队组类型（包含长途车队，物流班车车队，接送货车队）	下拉框	N/A	否	
车队组负责行政区	车队组负责行政区	选择框	N/A	否	
车队组负责营业区	车队组负责营业区	选择框	N/A	否	
所服务集中开单组	所服务集中开单组	文本	200	是	
1.8.71.8.8	事业部信息
字段名称 	说明 	输入限制	长度	是否必填	备注
事业部编码(用于集中接送货区编码)	事业部编码(用于集中接送货区编码)	文本	50	是	
1.8.81.8.9	部门基本信息
字段名称 	说明 	输入限制	长度	是否必填	备注
组织负责人	组织负责人工号	N/A	N/A	N/A	
组织负责人姓名	组织负责人姓名	N/A	N/A	N/A	
负责人	组织负责人工号	N/A	N/A	N/A	
联系电话	联系电话	N/A	N/A	N/A	
部门传真	部门传真	N/A	N/A	N/A	
上级组织名称	上级行政组织名称	N/A	N/A	N/A	
上级组织标杆编码	上级行政组织的标杆编码，DP+6位数字编码	N/A	N/A	N/A	从OA同步
上级组织编码	上级行政组织的标杆编码，DP+6位数字编码	N/A	N/A	N/A	
上级组织名称	上级行政组织名称	N/A	N/A	N/A	
邮编号码	邮编号码				
所属子公司	组织所属子公司的名称	N/A	N/A	N/A	
财务成本中心	部门对应的财务成本中心	N/A	N/A	N/A	
部门地址	部门的详细地址	N/A	N/A	N/A	
部门备注信息	部门备注信息	N/A	N/A	N/A	
UUMS主键ID	UUMS主键ID	N/A	N/A	N/A	
UUMS上级主键ID	UUMS上级主键ID	N/A	N/A	N/A	
UUMS主键ID序列	UUMS主键ID序列	N/A	N/A	N/A	
组织状态	显示顺序启用、作废、异动	N/AN/A	N/AN/A	N/AN/A	
显示顺序	部门层级	N/A	N/A	N/A	
部门层级	部门备注信息	N/A	N/A	N/A	
启用日期	组织启用日期	N/A	N/A	N/A	
作废日期	组织作废日期	N/A	N/A	N/A	
组织状态	启用、作废、异动	N/A	N/A	N/A	
是否为叶子节点	是否为叶子节点	N/A	N/A	N/A	
部门简称	部门简称	N/A	N/A	N/A	
组织性质	组织性质	N/A	N/A	N/A	
地区编码默认拼音	地区编码默认拼音	N/A	N/A	N/A	
组织邮箱	组织邮箱	N/A	N/A	N/A	
已封存系统	已封存系统	N/A	N/A	N/A	
EHR部门编码	EHR部门编码	N/A	N/A	N/A	
创建人编码	创建人编码	N/A	N/A	N/A	初始数据从UUMS同步，后期由系统维护
创建时间	创建时间	N/A	N/A	N/A	初始数据从UUMS同步，后期由系统维护
修改人编码	修改人编码	N/A	N/A	N/A	初始数据从UUMS同步，后期由系统维护
修改时间	修改时间	N/A	N/A	N/A	初始数据从UUMS同步，后期由系统维护
1.8.10	对公银行账号信息
字段名称 	说明 	输入限制	长度	是否必填	备注
银行账号	对公银行账号	N/A	N/A	N/A	
银行开户名	银行开户名	N/A	N/A	N/A	
部门标杆编码	对公银行省市支行	N/A	N/A	N/A	
银行编码	银行编码	N/A	N/A	N/A	
银行名称	银行名称	N/A	N/A	N/A	
支行编码	支行编码	N/A	N/A	N/A	
支行名称	支行名称	N/A	N/A	N/A	
省份编码	省份编码	N/A	N/A	N/A	
省份名称	省份名称	N/A	N/A	N/A	
城市编码	城市编码	N/A	N/A	N/A	
城市名称	城市名称	N/A	N/A	N/A	
	
	
	
	
1.8.91.8.11	行政组织业务属性查询条件
字段名称 	说明 	输入限制	长度	是否必填	备注
部门名称	部门名称	文本	80	否	

1.9	非功能性需求
使用量	
2012年全网估计用户数	
响应要求（如果与全系统要求 不一致的话）	
使用时间段	
高峰使用时间段	

1.10	接口描述：
接口名称 	对方系统（外部系统或内部其他模块）	接口描述
组织架构信息接口	FOSS系统	由FOSS系统提供部门信息接口，UUMS调用传递部门的更新信息到FOSS系统。
部门地理位置信息接口	GIS系统	通过集成GIS电子地图，确定部门的地理位置（坐标）以及营业部的自提和派送区域。




dp-foss-综合管理系统用例-查询财务组织-v1.2

修订记录 
日期 	修订内容 	修订人员 	版本号 
2012-04-26 	新增 	李俊	V0.1
2012-06-12 	1. 按照UED要求，单个查询输入框无需“重置”按钮； 
2. 在跟UUMS沟通的新方案中，FOSS不提供“新增”财务组织的功能；    	李俊	V0.2
2012-07-13 	1.	添加了相关业务用例。
2.	修改了后置条件。	李俊	V0.3
2012-08-02	1. 通过业务部门审核签字版本升级到V0.9	李俊	V0.9
2013-02-19	与UUMS同步财务组织时需要在同步的时候添加以下属性：1、财务组织全路径 fullPath，2、 是否是叶子结点 isLeaf。	李俊	V1.2

1.	SUC-84-查询财务组织
1.1	相关业务用例
BUC_FOSS_4.7.30.30_010现金收银
BUC_FOSS_4.7.10.30_010现金小票

1.2	用例描述
该用例可对财务组织进行查询。

1.3	用例条件
条件类型	描述	引用系统用例
前置条件	UUMS已将财务组织信息同步至FOSS。	
后置条件		

1.4	操作用户角色
操作用户	描述
系统管理员	系统管理员对财务组织进行查询操作。

1.5	界面要求
1.5.1	表现方式
Web页面
1.5.2	界面原型-主界面
 
图一：财务组织主界面
1.5.3	界面描述-主界面
1.	功能按钮区域
1)	查询按钮：输入查询条件，点击查询按钮，查询结果突出显示。
2.	树形结构区域
1)	点击树形结构中的一个财务组织，在树型结构的右边显示这个财务组织的详情。参见【图二：财务组织查看界面】。
2)	点击树形结构的“+”，在组织树中展开该财务组织下一级的所有财务组织。点击树形结构的“-”，则收起该财务组织下一级的所有财务组织。
3.	字段输入区域
1)	参见数据元素【财务组织查询条件】。

1.5.4	界面原型-查看界面
 
图二：财务组织查看界面
1.5.5	界面描述-查看界面
1.	字段显示区域
1)	参见数据元素【财务组织信息】。

1.6	操作步骤
1.6.1	财务组织查询操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入财务组织主界面		
2	输入查询条件，点击查询按钮。	【财务组织查询条件】	系统返回查询结果，在财务组织树型结构中被查询的财务组织突出显示。
3	点击树型结构中的目标财务组织。		在财务组织树的右边展示财务组织详情。

1.7	业务规则
序号	描述

1.8	数据元素
1.8.1	财务组织信息
字段名称 	说明 	输入限制	长度	是否必填	备注
名称	财务组织的名称	N/A	N/A	N/A	
组织编码	财务组织的编码	N/A	N/A	N/A	
上级组织名称	上级组织的名称	N/A	N/A	N/A	
是否是成本中心	是否是成本中心	N/A	N/A	N/A	
是否是子公司	是否是子公司	N/A	N/A	N/A	
全称	财务组织的全称	N/A	N/A	N/A	
描述	描述信息	N/A	N/A	N/A	
财务组织全路径	财务组织全路径	N/A	N/A	N/A	
是否是叶子结点	是否是叶子结点	N/A	N/A	N/A	
1.8.2	财务组织查询条件
字段名称 	说明 	输入限制	长度	是否必填	备注
名称	财务组织的名称	文本	50	否	

1.9	非功能性需求
使用量	
2012年全网估计用户数	
响应要求（如果与全系统要求 不一致的话）	
使用时间段	
高峰使用时间段	

1.10	接口描述
接口名称 	对方系统（外部系统或内部其他模块）	接口描述
同步财务组织信息接口	UUMS系统	由FOSS系统提供财务组织信息接口，由UUMS调用，通过此接口传递财务组织更新信息到FOSS系统



dp-foss-综合管理系统用例-撤销组织提醒-v1.1

修订记录 
日期 	修订内容 	修订人员 	版本号 
2012-5-31 	新增 	朱俊勇	V0.1
2012-08-02	1. 通过业务部门审核签字版本升级到V0.9	李俊	V0.9
2012-12-6	1．更新主界面，更新业务规则	赵鹏	V1.01

1.	SUC-195-撤销组织提醒
1.1	相关业务用例
无
1.2	用例描述
该系统用例主要为预撤销组织相关人员提供消息提醒功能。
1.3	用例条件
条件类型	描述	引用系统用例
前置条件	1、	从UUMS同步到预撤销状态的组织信息
2、	FOSS中该组织存在相关用户（所属该组织的用户）	
后置条件	1、 待撤销组织的所有人员可以查看到消息提醒	
1.4	操作用户角色
操作用户	描述
无	被动提醒页面,无主动操作.
1.5	界面要求
1.5.1	表现方式
Web页面
1.5.2	界面原型-主界面
 
图一：撤销组织提醒界面
1.5.3	界面描述-主界面
参考FOSS系统消息提示界面。
 
1.6	操作步骤

序号	基本步骤	相关数据	补充步骤
1	显示撤销组织提醒界面		
2	用户浏览提醒信息后点击关闭按钮，返回首页		

1.7	业务规则
序号	描述
SR-1	如果系统中存在预撤销组织，则所有归属该组织的用户（包括非默认组织）在登录时需要得到提醒信息
SR-2	页面展示时调用各子系统提供的接口，取得未完成事宜列表，如果返回的事宜已经处理完成则不需要显示在提醒信息列表中。如果所有事宜都已完成 ，则不显示提醒信息列表（组织将于某时间撤销的提醒信息仍然需要显示）。
SR-3	如果相关用户所属的多个组织有预撤销状态时，按组织编码顺序显示提醒信息。

1.8	数据元素
1.8.1	组织架构数据（显示信息）
字段名称 	说明 	输入限制	长度	是否必填	备注
组织名称	行政组织名称	文本	50		
撤销日期	XXXX年XX月XX日	文本	11		
1.9	非功能性需求
使用量	
2012年全网估计用户数	
响应要求（如果与全系统要求 不一致的话）	
使用时间段	
高峰使用时间段	

1.10	接口描述
接口名称 	对方系统（外部系统或内部其他模块）	接口描述

DP-FOSS-综合管理系统用例-修改_查询行政组织业务属性-V1.2

修订记录
日期	修订内容	修订人员	版本号
2012-04-20	新增	李俊	V0.1
2012-06-28	去掉“可代收货款，可货到付款，可返回签单”属性（原因：所有的派送部都开展这三个业务，不必分开记录）。	李俊  	V0.2
2012-06-28	“到达营业部”的属性增加“单件重量上限(KG)”，“单件体积上限(方)”，“单票重量上限(KG)”，“单票体积上限(方)”，“自提区域”和“派送区域”。	李俊	V0.3
2012-07-02	修改了“接送货车队”的添加方式。	李俊	V0.4
2012-07-03	修改了“调度组信息”的“所属车队”的交互方式，供评审会议评审。	李俊	V0.5
2012-07-05	按照评审会议的评审进行修改：
部门面积 分为两个字段：总面积，外场面积
修改字段“接送货车队”为“车队”
添加标识：“集中开单组”（是否集中开单部门）
调度组所属车队由“公共选择框”修改为“列表框”	李俊	V0.6
2012-07-10	添加“适用产品”，“所属集中开单组”属性。	李俊	V0.61
2012-07-12	添加“是否收空运货”，“是否收汽运货”属性。	李俊	V0.62
2012-07-20	添加“车队信息”，“车队组信息”，“事业部信息”。	李俊	V0.63
2012-09-18	修改了行政组织业务属性的公共业务信息的显示方式，增加了“取消到达日期”，“转货部门”，去掉了“自提范围”的查看电子地图的功能。
增加了车队对应的营业区，行政区，车队类型。
增加了车队所属外场。	李俊	V1.1
2012-12-05	增加了 :

国家地区 部门英文简称,部门服务区坐标编号,部门电话,部门传真,部门简称,所属实体财务部, 部门备注信息,是否营业大区,是否实体财务部,是否派送排单,是否理货,派送排单服务外场,理货部门服务外场,理货业务类型

是否可开装卸费,是否可返回签单,是否可货到付款,是否可代收货款,

对公银行信息:
银行账号,银行开户名,部门标杆编码,银行编码,银行名称,支行编码,支行名称,省份编码,省份名称,城市编码,城市名称

修改了：是否营业区 为“是否营业小区”。	李俊	V1.2
2013-01-15	添加了组织的“组织级别”，车队中的“是否顶级车队”，“是否直接管车”，“所服务集中开单组”，车队组：“所服务集中开单组”。	李俊	V1.21

1.	SUC-85-修改_查询行政组织业务属性
1.1	相关业务用例
BUC_FOSS_5.20.30_510确认承运信息。
BUC_FOSS_5.20.20_520接货运单开单。
BUC_FOSS_5.20.10_560交接接货。
BUC_FOSS_5.20.30_530开单收货。
BUC_FOSS_5.60.05_540整车开单收货。
BUC_FOSS_5.60.10_730变更运单。

1.2	用例描述
该用例可对行政组织业务属性进行修改、查询。

1.3	用例条件
条件类型	描述	引用系统用例
前置条件	1.	行政组织信息完备。	SUC-647同步行政组织接口

后置条件	1．为系统用例“SUC-496-录入运输信息”提供查询。	SUC-496录入运输信息

1.4	操作用户角色
操作用户	描述
系统维护人员	系统维护人员对行政组织业务属性进行修改、查询操作。
1.5	界面要求
无

1.5.1	表现方式
Web页面

1.5.2	界面原型-主界面
 
图一：行政组织业务属性主界面
1.5.3	界面描述-主界面
1.	功能按钮区域
1)	查询按钮：输入查询条件，点击查询按钮，系统返回查询结果，刷新查询列表。
2)	查看详细信息：点击树形结构中的组织名称，在树型结构的右边显示这个组织的详情，参见【图三：行政组织业务属性详情界面】。
2.	字段输入区域
1)	参见数据元素【行政组织业务属性查询条件】。
3.	树型结构区域
1)	树型结构展示了行政组织的名称，点击树型结构中的部门名称，在右边显示这个部门的业务属性详情。
2)	点击树形结构的“+”，在组织树中展开该行政组织下一级的所有行政组织。点击树形结构的“-”，则收起该行政组织下一级的所有行政组织。
1.5.4	界面原型-行政组织业务属性修改界面
   
 
图二：行政组织业务属性修改界面
1.5.5	界面描述-行政组织业务属性修改界面
1.	功能按钮区域
1)	保存按钮：点击保存按钮，若保存成功，提示保存成功，返回上一级界面，若保存失败，提示用户保存失败的原因，停留在当前界面。
2)	右全移按钮：点击右全移按钮，将左框中的数据全部移到右框。
3)	右移按钮：从左框中选择一条数据，点击右移按钮，将左框选中的数据移到右框。
4)	左移按钮：从右框中选择一条数据，点击左移按钮，将右框选中的数据移到左框。
5)	左全移按钮：点击左全移按钮，将右框中的数据全部移到左框。
6)	重置按钮：点击重置按钮，恢复行政组织业务属性的初始状态。
7)	取消按钮：点击取消按钮，退出当前界面，返回主界面。
8)	编辑部门电子地图按钮：点击编辑部门电子地图按钮，进入“编辑部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
9)	编辑自提区域电子地图按钮：点击编辑自提区域电子地图按钮，进入“编辑自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
10)	编辑派送区域电子地图按钮：点击编辑派送区域电子地图按钮，进入“编辑派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
2.	字段输入区域
1)	参见数据元素【行政组织业务属性信息】,【提货信息】,【外场信息】,【调度组信息】，【车队信息】，【车队组信息】，【事业部信息】。
1.5.6	界面原型-行政组织业务属性详情界面
   
图三：行政组织业务属性详情界面
1.5.7	界面描述-行政组织业务属性详情界面
2.	功能按钮区域
1)	修改按钮：点击修改按钮，进入修改界面，参见【图二：行政组织业务属性修改界面】。
2)	查看部门电子地图按钮：点击查看部门电子地图按钮，进入“查看部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
3)	查看自提区域电子地图按钮：点击查看自提区域电子地图按钮，进入“查看自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
4)	查看派送区域电子地图按钮：点击查看派送区域电子地图按钮，进入“查看派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
3.	字段输入区域
1)	参见数据元素【行政组织业务属性信息】，【提货信息】，【外场信息】，【调度组信息】，【车队信息】，【车队组信息】，【车队信息】，【部门基本信息】。
1.5.8	界面原型-编辑或查看电子地图界面
 
图四：编辑或查看电子地图界面
1.6	操作步骤
1.6.1	行政组织业务属性查询操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入行政组织业务属性主界面。		
2	输入查询条件，点击查询按钮。	【行政组织业务属性查询条件】	系统返回查询结果，在组织树中突出显示查询结果。
1.6.2	行政组织业务属性修改操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入行政组织业务属性主界面。		
2	输入查询条件，点击查询按钮。	【行政组织业务属性查询条件】	系统返回查询结果，在组织树中突出显示查询结果。
3	点击树型结构中的名称。	【行政组织业务属性信息】，【提货信息】，【外场信息】，【调度组信息】，【部门基本信息】，【车队信息】，【车队组信息】，【事业部信息】，【排单部门信息】，【理货部门信息】，【对公银行账号信息】	在组织树的右边展示行政组织业务属性详情界面。
4	点击修改按钮。		进入行政组织业务属性修改界面。
5	修改行政组织业务属性，然后点击保存按钮。		成功保存界面信息至数据库，返回主界面。
行政组织业务属性修改操作步骤-异常操作
序号	扩展事件	相关数据	备注
5a	点击取消按钮，退出当前界面，返回主界面。		
5b	若保存失败，弹出对话框，提示用户保存失败以及失败原因，继续停留在修改界面。		

1.7	业务规则
序号	描述
SR-1	选择省份信息后，城市的选择范围自动变成已选省份所包含的城市。选择城市信息后，区县的选择范围自动变成已选城市所包含的区县。
SR-2	只有选择了“是否营业部”，界面才能修改或者显示营业部信息。
SR-3	只有选择了“可到达”，界面才能修改或者显示提货信息，到达适用产品。
SR-4	只有选择了“是否外场”，界面才能修改或者显示外场信息。
SR-5	只有选择了“是否车队调度组”，界面才能修改或者显示调度组信息。
SR-6	只有选择了“可自提”，界面才能修改或者显示“自提区域描述”。
SR-7	只有选择了“可派送”，界面才能修改或者显示“派送区域描述”。
SR-8	只有选择了“可出发”，界面才能修改或者显示“车队”,“出发适用产品”，“所属集中开单组”。
SR-9	外场简码,外场编码均不可重复。如果录入的已存在，提示用户已存在。
SR-10	只有选择了“是否车队”，界面才能修改或者显示车队信息。
SR-11	只有选择了“是否车队组”，界面才能修改或者显示车队组信息。
SR-12	在一个事业部内，集中接送货车队编码不能重复，当输入的编码已存在时，提示用户编码已存在。
SR-13	只有选择了“是否驻地部门”，界面才能修改或者显示“驻地营业部所属外场”。
SR-14	只有选择了“是否事业部”，界面才能修改或者显示“事业部信息”。
SR-15	事业部编码不能重复，当输入的编码已存在时，提示用户编码已存在。
SR-16	最大临时欠款额度的不是人工维护，是动态变化的，根据前3个月的最高收入所在等级决定。
SR-17	外场的部门面积要大于货区面积，外场的货区面积要大于货台面积。如果用户填写的值不满足此规则，则提示用户。
SR-18	当有客户在某部门开临欠时，此部门的已用临欠额度做相应的更新。
SR-19	如果当前部门是外场，“部门英文简称”必填。
SR-20	是否可返回签单, 是否可货到付款, 是否可代收货款 营业部默认都有这些业务。
SR-21	只有派送排单才显示或者编辑“排单部门信息”。
SR-22	只有理货才显示或者编辑“理货部门信息”。
SR-23	“是否可开装卸费”默认不选 。
SR-24	部门基本信息 均从UUMS同步。
SR-25	是否事业部, 是否营业小区, 是否营业大区从UUMS同步，不能修改。
SR-26	只有选择了“可空运配载”才能修改或者显示“是否空运总调”
SR-27	关于最大临欠额度：
1. 结算每月初统计客户上月收入，存入"客户月收入表" 
2. 综合取出客户月收入表中最近3个月收入 
3. 综合根据最大月收入查找收入区间表，获得最新额度后，更新到部门最大临欠额度中 
4. 综合提供接口，用于查询部门最大临欠额度 
5. 综合现有"已用额度"取消 
6. 综合与结算实现方式保持一致，都用Java定时任务，或者都用Stored Procedure

1.8	数据元素
1.8.1	行政组织业务属性部门公共业务信息
字段名称 	说明 	输入限制	长度	是否必填	备注
部门编号	部门的编号	N/A	N/A	N/A	
标杆编码	同基准编码，OA，CRM这些系统对同一部门的唯一标识	N/A	N/A	N/A	
部门名称	部门的名称	N/A	N/A	N/A	
部门面积	部门面积（单位：平方米）	文本	20	否	
国家地区	部门所有的国家地区	下拉框	50	是	
省份	部门所在的省份	下拉框	50	是	
城市	部门所在的城市	下拉框	50	是	
区县	部门所在的区县	下拉框	50	是	
部门英文简称	部门英文简称	文本	200	否	
部门备注信息	部门备注信息	文本	1000	否	
部门服务区坐标编号	部门服务区坐标编号	文本	50	否	
部门电话	部门电话	文本	50	否	
部门传真	部门传真	文本	50	否	
部门简称	部门简称	文本	50	否	
所属实体财务部	所属实体财务部	文本	50	否	
是否营业部	是否是营业部	数字	10	是	
是否外场	是否是外场	数字	10	是	
可空运配载	是否可空运配载	数字	10	是	
是否车队	是否是车队	数字	10	是	
是否车队调度组	是否是车队调度组	数字	10	是	
是否集中开单组	这个部门是否是集中开单组	数字	10	是	
是否事业部	是否事业部	数字	10	是	
是否车队组	是否车队组	数字	10	是	
是否营业小区	是否营业区	数字	10	是	
是否营业大区	是否营业大区	数字	10	是	
是否实体财务部	是否实体财务部	数字	10	是	
是否派送排单	是否派送排单	数字	10	是	
是否理货	是否理货	数字	10	是	
派送排单服务外场	派送排单服务外场	文本	50	否	
理货部门服务外场	理货部门服务外场	文本	50	否	
理货业务类型	理货业务类型	文本	50	否	
是否空运总调	是否空运总调	数字	10	是	
					
					
可出发	是否可做出发业务	数字	10	是	
可到达	是否可做到达业务	数字	10	是	
是否驻地部门	是否是驻地部门	数字	10	是	
广告语	广告语	文本	200	否	
开业日期	部门的开业日期	日期	20	是	
最大临欠额度	最大临欠额度	文本	200	否	
已用临欠额度	已用临欠额度,由结算来维护。	N/A	N/A	N/A	
出发适用产品	出发部门能提供的产品	列表框	N/A	否	数据来源于产品价格模型
到达适用产品	到达部门能提供的产品	列表框	N/A	否	数据来源于产品价格模型
所属集中开单组	所属集中开单组	选择框	N/A	否	
驻地营业部所属外场					
车队	接送货车队	列表框	N/A	否	
1.8.2	营业部信息
字段名称 	说明 	输入限制	长度	是否必填	备注
可出发	是否可做出发业务	数字	10	是	
可到达	是否可做到达业务	数字	10	是	
是否驻地部门	是否是驻地部门	数字	10	是	
是否集中接送货					
是否可开装卸费	是否可开装卸费	文本	1	是	默认为是（Y）
是否可返回签单	是否可返回签单	文本	1	是	默认为是（Y）
是否可货到付款	是否可货到付款	文本	1	是	默认为是（Y）
是否可代收货款	是否可代收货款	文本	1	是	默认为是（Y）
广告语	广告语	文本	200	否	
开业日期	部门的开业日期	日期	20	是	
最大临欠额度	最大临欠额度	文本	200	N/A	
已用临欠额度	已用临欠额度,由结算来维护。	N/A	N/A	N/A	
出发适用产品	出发部门能提供的产品	列表框	N/A	否	数据来源于产品价格模型
到达适用产品	到达部门能提供的产品	列表框	N/A	否	数据来源于产品价格模型
所属集中开单组	所属集中开单组	选择框	N/A	否	
驻地营业部所属外场	驻地营业部所属外场	选择框	N/A	否	
车队	接送货车队	列表框	N/A	否	
取消到达日期	取消到达日期	日期	20	否	
转货部门	转货部门	选择框	N/A	否	
1.8.21.8.3	提货信息
字段名称 	说明 	输入限制	长度	是否必填	备注
可自提	是否可以让客户自提	数字	10	是	
可派送	是否能送货上门	数字	10	是	
可空运到达	可空运到达	数字	10	是	
可汽运到达	可汽运到达	数字	10	是	
单件重量上限（KG）	单件重量上限是多少（KG）	数字	10	否	
单件体积上限(方)	单件体积上限是多少(方)	数字	10	否	
单票重量上限（KG）	单票重量上限是多少（KG）	数字	10	否	
单票体积上限(方)	单票体积上限是多少(方)	数字	10	否	
自提区域描述	自提区域描述	文本	255	否	
派送区域描述	派送区域描述	文本	255	否	
1.8.31.8.4	外场信息
字段名称 	说明 	输入限制	长度	是否必填	备注
可汽运配载	是否汽运配载	数字	10	是	
可外发配载	是否外发配载	数字	10	是	
可打木架	是否可打木架	数字	10	是	
可中转	是否中转	数字	10	是	
是否有自动分拣机	是否有自动分拣机	数字	10	是	
外场编码	配载部门的外场编码	文本	88	是	
外场简码	外场的简码，不能重复。	文本	88	是	
货区面积(平方米)	货区的面积	文本	20	否	
货台面积(平方米)	货台的面积	文本	20	否	
库型	外场有几个入口（单边/双边/三边/四边），默认为“请选择”	下拉框	N/A	否	
1.8.41.8.5	调度组信息
字段名称 	说明 	输入限制	长度	是否必填	备注
所属车队	调度组所属的车队	列表框	N/A	是	
1.8.51.8.6	车队信息
字段名称 	说明 	输入限制	长度	是否必填	备注
是否集中接送货	是否集中接送货	数字	10	是	
是否顶级车队	是否顶级车队	数字	10	是	
是否直接管车	是否直接管车	数字	10	是	
所服务集中开单组	所服务集中开单组	文本	200	是	
集中接送货车队编码	集中接送货车队编码	文本	255	是	
车队所属外场	车队所属外场	选择框	N/A	否	
车队类型	车队类型（包含长途车队，物流班车车队，接送货车队）	下拉框	N/A	否	
车队负责行政区	车队负责行政区	选择框	N/A	否	
车队负责营业区	车队负责营业区	选择框	N/A	否	
1.8.61.8.7	车队组信息
字段名称 	说明 	输入限制	长度	是否必填	备注
是否集中接送货	是否集中接送货	数字	10	是	
所属车队	车队组所属的车队	文本	255	是	
车队所属外场	车队所属外场	选择框	N/A	否	
车队组类型	车队组类型（包含长途车队，物流班车车队，接送货车队）	下拉框	N/A	否	
车队组负责行政区	车队组负责行政区	选择框	N/A	否	
车队组负责营业区	车队组负责营业区	选择框	N/A	否	
所服务集中开单组	所服务集中开单组	文本	200	是	
1.8.71.8.8	事业部信息
字段名称 	说明 	输入限制	长度	是否必填	备注
事业部编码(用于集中接送货区编码)	事业部编码(用于集中接送货区编码)	文本	50	是	
1.8.81.8.9	部门基本信息
字段名称 	说明 	输入限制	长度	是否必填	备注
组织负责人	组织负责人工号	N/A	N/A	N/A	
组织负责人姓名	组织负责人姓名	N/A	N/A	N/A	
负责人	组织负责人工号	N/A	N/A	N/A	
联系电话	联系电话	N/A	N/A	N/A	
部门传真	部门传真	N/A	N/A	N/A	
上级组织名称	上级行政组织名称	N/A	N/A	N/A	
上级组织标杆编码	上级行政组织的标杆编码，DP+6位数字编码	N/A	N/A	N/A	从OA同步
上级组织编码	上级行政组织的标杆编码，DP+6位数字编码	N/A	N/A	N/A	
上级组织名称	上级行政组织名称	N/A	N/A	N/A	
邮编号码	邮编号码				
所属子公司	组织所属子公司的名称	N/A	N/A	N/A	
财务成本中心	部门对应的财务成本中心	N/A	N/A	N/A	
部门地址	部门的详细地址	N/A	N/A	N/A	
部门备注信息	部门备注信息	N/A	N/A	N/A	
UUMS主键ID	UUMS主键ID	N/A	N/A	N/A	
UUMS上级主键ID	UUMS上级主键ID	N/A	N/A	N/A	
UUMS主键ID序列	UUMS主键ID序列	N/A	N/A	N/A	
组织状态	显示顺序启用、作废、异动	N/AN/A	N/AN/A	N/AN/A	
显示顺序	部门层级	N/A	N/A	N/A	
部门层级	部门备注信息	N/A	N/A	N/A	
启用日期	组织启用日期	N/A	N/A	N/A	
作废日期	组织作废日期	N/A	N/A	N/A	
组织状态	启用、作废、异动	N/A	N/A	N/A	
是否为叶子节点	是否为叶子节点	N/A	N/A	N/A	
部门简称	部门简称	N/A	N/A	N/A	
组织性质	组织性质	N/A	N/A	N/A	
地区编码默认拼音	地区编码默认拼音	N/A	N/A	N/A	
组织邮箱	组织邮箱	N/A	N/A	N/A	
已封存系统	已封存系统	N/A	N/A	N/A	
EHR部门编码	EHR部门编码	N/A	N/A	N/A	
创建人编码	创建人编码	N/A	N/A	N/A	初始数据从UUMS同步，后期由系统维护
创建时间	创建时间	N/A	N/A	N/A	初始数据从UUMS同步，后期由系统维护
修改人编码	修改人编码	N/A	N/A	N/A	初始数据从UUMS同步，后期由系统维护
修改时间	修改时间	N/A	N/A	N/A	初始数据从UUMS同步，后期由系统维护
1.8.10	对公银行账号信息
字段名称 	说明 	输入限制	长度	是否必填	备注
银行账号	对公银行账号	N/A	N/A	N/A	
银行开户名	银行开户名	N/A	N/A	N/A	
部门标杆编码	对公银行省市支行	N/A	N/A	N/A	
银行编码	银行编码	N/A	N/A	N/A	
银行名称	银行名称	N/A	N/A	N/A	
支行编码	支行编码	N/A	N/A	N/A	
支行名称	支行名称	N/A	N/A	N/A	
省份编码	省份编码	N/A	N/A	N/A	
省份名称	省份名称	N/A	N/A	N/A	
城市编码	城市编码	N/A	N/A	N/A	
城市名称	城市名称	N/A	N/A	N/A	
	
	
	
	
1.8.91.8.11	行政组织业务属性查询条件
字段名称 	说明 	输入限制	长度	是否必填	备注
部门名称	部门名称	文本	80	否	

1.9	非功能性需求
使用量	
2012年全网估计用户数	
响应要求（如果与全系统要求 不一致的话）	
使用时间段	
高峰使用时间段	

1.10	接口描述：
接口名称 	对方系统（外部系统或内部其他模块）	接口描述
组织架构信息接口	FOSS系统	由FOSS系统提供部门信息接口，UUMS调用传递部门的更新信息到FOSS系统。
部门地理位置信息接口	GIS系统	通过集成GIS电子地图，确定部门的地理位置（坐标）以及营业部的自提和派送区域。




dp-foss-综合管理系统用例-查询财务组织-v1.2

修订记录 
日期 	修订内容 	修订人员 	版本号 
2012-04-26 	新增 	李俊	V0.1
2012-06-12 	1. 按照UED要求，单个查询输入框无需“重置”按钮； 
2. 在跟UUMS沟通的新方案中，FOSS不提供“新增”财务组织的功能；    	李俊	V0.2
2012-07-13 	1.	添加了相关业务用例。
2.	修改了后置条件。	李俊	V0.3
2012-08-02	1. 通过业务部门审核签字版本升级到V0.9	李俊	V0.9
2013-02-19	与UUMS同步财务组织时需要在同步的时候添加以下属性：1、财务组织全路径 fullPath，2、 是否是叶子结点 isLeaf。	李俊	V1.2

1.	SUC-84-查询财务组织
1.1	相关业务用例
BUC_FOSS_4.7.30.30_010现金收银
BUC_FOSS_4.7.10.30_010现金小票

1.2	用例描述
该用例可对财务组织进行查询。

1.3	用例条件
条件类型	描述	引用系统用例
前置条件	UUMS已将财务组织信息同步至FOSS。	
后置条件		

1.4	操作用户角色
操作用户	描述
系统管理员	系统管理员对财务组织进行查询操作。

1.5	界面要求
1.5.1	表现方式
Web页面
1.5.2	界面原型-主界面
 
图一：财务组织主界面
1.5.3	界面描述-主界面
1.	功能按钮区域
1)	查询按钮：输入查询条件，点击查询按钮，查询结果突出显示。
2.	树形结构区域
1)	点击树形结构中的一个财务组织，在树型结构的右边显示这个财务组织的详情。参见【图二：财务组织查看界面】。
2)	点击树形结构的“+”，在组织树中展开该财务组织下一级的所有财务组织。点击树形结构的“-”，则收起该财务组织下一级的所有财务组织。
3.	字段输入区域
1)	参见数据元素【财务组织查询条件】。

1.5.4	界面原型-查看界面
 
图二：财务组织查看界面
1.5.5	界面描述-查看界面
1.	字段显示区域
1)	参见数据元素【财务组织信息】。

1.6	操作步骤
1.6.1	财务组织查询操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入财务组织主界面		
2	输入查询条件，点击查询按钮。	【财务组织查询条件】	系统返回查询结果，在财务组织树型结构中被查询的财务组织突出显示。
3	点击树型结构中的目标财务组织。		在财务组织树的右边展示财务组织详情。

1.7	业务规则
序号	描述

1.8	数据元素
1.8.1	财务组织信息
字段名称 	说明 	输入限制	长度	是否必填	备注
名称	财务组织的名称	N/A	N/A	N/A	
组织编码	财务组织的编码	N/A	N/A	N/A	
上级组织名称	上级组织的名称	N/A	N/A	N/A	
是否是成本中心	是否是成本中心	N/A	N/A	N/A	
是否是子公司	是否是子公司	N/A	N/A	N/A	
全称	财务组织的全称	N/A	N/A	N/A	
描述	描述信息	N/A	N/A	N/A	
财务组织全路径	财务组织全路径	N/A	N/A	N/A	
是否是叶子结点	是否是叶子结点	N/A	N/A	N/A	
1.8.2	财务组织查询条件
字段名称 	说明 	输入限制	长度	是否必填	备注
名称	财务组织的名称	文本	50	否	

1.9	非功能性需求
使用量	
2012年全网估计用户数	
响应要求（如果与全系统要求 不一致的话）	
使用时间段	
高峰使用时间段	

1.10	接口描述
接口名称 	对方系统（外部系统或内部其他模块）	接口描述
同步财务组织信息接口	UUMS系统	由FOSS系统提供财务组织信息接口，由UUMS调用，通过此接口传递财务组织更新信息到FOSS系统



dp-foss-综合管理系统用例-撤销组织提醒-v1.1

修订记录 
日期 	修订内容 	修订人员 	版本号 
2012-5-31 	新增 	朱俊勇	V0.1
2012-08-02	1. 通过业务部门审核签字版本升级到V0.9	李俊	V0.9
2012-12-6	1．更新主界面，更新业务规则	赵鹏	V1.01

1.	SUC-195-撤销组织提醒
1.1	相关业务用例
无
1.2	用例描述
该系统用例主要为预撤销组织相关人员提供消息提醒功能。
1.3	用例条件
条件类型	描述	引用系统用例
前置条件	1、	从UUMS同步到预撤销状态的组织信息
2、	FOSS中该组织存在相关用户（所属该组织的用户）	
后置条件	1、 待撤销组织的所有人员可以查看到消息提醒	
1.4	操作用户角色
操作用户	描述
无	被动提醒页面,无主动操作.
1.5	界面要求
1.5.1	表现方式
Web页面
1.5.2	界面原型-主界面
 
图一：撤销组织提醒界面
1.5.3	界面描述-主界面
参考FOSS系统消息提示界面。
 
1.6	操作步骤

序号	基本步骤	相关数据	补充步骤
1	显示撤销组织提醒界面		
2	用户浏览提醒信息后点击关闭按钮，返回首页		

1.7	业务规则
序号	描述
SR-1	如果系统中存在预撤销组织，则所有归属该组织的用户（包括非默认组织）在登录时需要得到提醒信息
SR-2	页面展示时调用各子系统提供的接口，取得未完成事宜列表，如果返回的事宜已经处理完成则不需要显示在提醒信息列表中。如果所有事宜都已完成 ，则不显示提醒信息列表（组织将于某时间撤销的提醒信息仍然需要显示）。
SR-3	如果相关用户所属的多个组织有预撤销状态时，按组织编码顺序显示提醒信息。

1.8	数据元素
1.8.1	组织架构数据（显示信息）
字段名称 	说明 	输入限制	长度	是否必填	备注
组织名称	行政组织名称	文本	50		
撤销日期	XXXX年XX月XX日	文本	11		
1.9	非功能性需求
使用量	
2012年全网估计用户数	
响应要求（如果与全系统要求 不一致的话）	
使用时间段	
高峰使用时间段	

1.10	接口描述
接口名称 	对方系统（外部系统或内部其他模块）	接口描述

DP-FOSS-综合管理系统用例-修改_查询行政组织业务属性-V1.2

修订记录
日期	修订内容	修订人员	版本号
2012-04-20	新增	李俊	V0.1
2012-06-28	去掉“可代收货款，可货到付款，可返回签单”属性（原因：所有的派送部都开展这三个业务，不必分开记录）。	李俊  	V0.2
2012-06-28	“到达营业部”的属性增加“单件重量上限(KG)”，“单件体积上限(方)”，“单票重量上限(KG)”，“单票体积上限(方)”，“自提区域”和“派送区域”。	李俊	V0.3
2012-07-02	修改了“接送货车队”的添加方式。	李俊	V0.4
2012-07-03	修改了“调度组信息”的“所属车队”的交互方式，供评审会议评审。	李俊	V0.5
2012-07-05	按照评审会议的评审进行修改：
部门面积 分为两个字段：总面积，外场面积
修改字段“接送货车队”为“车队”
添加标识：“集中开单组”（是否集中开单部门）
调度组所属车队由“公共选择框”修改为“列表框”	李俊	V0.6
2012-07-10	添加“适用产品”，“所属集中开单组”属性。	李俊	V0.61
2012-07-12	添加“是否收空运货”，“是否收汽运货”属性。	李俊	V0.62
2012-07-20	添加“车队信息”，“车队组信息”，“事业部信息”。	李俊	V0.63
2012-09-18	修改了行政组织业务属性的公共业务信息的显示方式，增加了“取消到达日期”，“转货部门”，去掉了“自提范围”的查看电子地图的功能。
增加了车队对应的营业区，行政区，车队类型。
增加了车队所属外场。	李俊	V1.1
2012-12-05	增加了 :

国家地区 部门英文简称,部门服务区坐标编号,部门电话,部门传真,部门简称,所属实体财务部, 部门备注信息,是否营业大区,是否实体财务部,是否派送排单,是否理货,派送排单服务外场,理货部门服务外场,理货业务类型

是否可开装卸费,是否可返回签单,是否可货到付款,是否可代收货款,

对公银行信息:
银行账号,银行开户名,部门标杆编码,银行编码,银行名称,支行编码,支行名称,省份编码,省份名称,城市编码,城市名称

修改了：是否营业区 为“是否营业小区”。	李俊	V1.2
2013-01-15	添加了组织的“组织级别”，车队中的“是否顶级车队”，“是否直接管车”，“所服务集中开单组”，车队组：“所服务集中开单组”。	李俊	V1.21

1.	SUC-85-修改_查询行政组织业务属性
1.1	相关业务用例
BUC_FOSS_5.20.30_510确认承运信息。
BUC_FOSS_5.20.20_520接货运单开单。
BUC_FOSS_5.20.10_560交接接货。
BUC_FOSS_5.20.30_530开单收货。
BUC_FOSS_5.60.05_540整车开单收货。
BUC_FOSS_5.60.10_730变更运单。

1.2	用例描述
该用例可对行政组织业务属性进行修改、查询。

1.3	用例条件
条件类型	描述	引用系统用例
前置条件	1.	行政组织信息完备。	SUC-647同步行政组织接口

后置条件	1．为系统用例“SUC-496-录入运输信息”提供查询。	SUC-496录入运输信息

1.4	操作用户角色
操作用户	描述
系统维护人员	系统维护人员对行政组织业务属性进行修改、查询操作。
1.5	界面要求
无

1.5.1	表现方式
Web页面

1.5.2	界面原型-主界面
 
图一：行政组织业务属性主界面
1.5.3	界面描述-主界面
1.	功能按钮区域
1)	查询按钮：输入查询条件，点击查询按钮，系统返回查询结果，刷新查询列表。
2)	查看详细信息：点击树形结构中的组织名称，在树型结构的右边显示这个组织的详情，参见【图三：行政组织业务属性详情界面】。
2.	字段输入区域
1)	参见数据元素【行政组织业务属性查询条件】。
3.	树型结构区域
1)	树型结构展示了行政组织的名称，点击树型结构中的部门名称，在右边显示这个部门的业务属性详情。
2)	点击树形结构的“+”，在组织树中展开该行政组织下一级的所有行政组织。点击树形结构的“-”，则收起该行政组织下一级的所有行政组织。
1.5.4	界面原型-行政组织业务属性修改界面
   
 
图二：行政组织业务属性修改界面
1.5.5	界面描述-行政组织业务属性修改界面
1.	功能按钮区域
1)	保存按钮：点击保存按钮，若保存成功，提示保存成功，返回上一级界面，若保存失败，提示用户保存失败的原因，停留在当前界面。
2)	右全移按钮：点击右全移按钮，将左框中的数据全部移到右框。
3)	右移按钮：从左框中选择一条数据，点击右移按钮，将左框选中的数据移到右框。
4)	左移按钮：从右框中选择一条数据，点击左移按钮，将右框选中的数据移到左框。
5)	左全移按钮：点击左全移按钮，将右框中的数据全部移到左框。
6)	重置按钮：点击重置按钮，恢复行政组织业务属性的初始状态。
7)	取消按钮：点击取消按钮，退出当前界面，返回主界面。
8)	编辑部门电子地图按钮：点击编辑部门电子地图按钮，进入“编辑部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
9)	编辑自提区域电子地图按钮：点击编辑自提区域电子地图按钮，进入“编辑自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
10)	编辑派送区域电子地图按钮：点击编辑派送区域电子地图按钮，进入“编辑派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
2.	字段输入区域
1)	参见数据元素【行政组织业务属性信息】,【提货信息】,【外场信息】,【调度组信息】，【车队信息】，【车队组信息】，【事业部信息】。
1.5.6	界面原型-行政组织业务属性详情界面
   
图三：行政组织业务属性详情界面
1.5.7	界面描述-行政组织业务属性详情界面
2.	功能按钮区域
1)	修改按钮：点击修改按钮，进入修改界面，参见【图二：行政组织业务属性修改界面】。
2)	查看部门电子地图按钮：点击查看部门电子地图按钮，进入“查看部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
3)	查看自提区域电子地图按钮：点击查看自提区域电子地图按钮，进入“查看自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
4)	查看派送区域电子地图按钮：点击查看派送区域电子地图按钮，进入“查看派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
3.	字段输入区域
1)	参见数据元素【行政组织业务属性信息】，【提货信息】，【外场信息】，【调度组信息】，【车队信息】，【车队组信息】，【车队信息】，【部门基本信息】。
1.5.8	界面原型-编辑或查看电子地图界面
 
图四：编辑或查看电子地图界面
1.6	操作步骤
1.6.1	行政组织业务属性查询操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入行政组织业务属性主界面。		
2	输入查询条件，点击查询按钮。	【行政组织业务属性查询条件】	系统返回查询结果，在组织树中突出显示查询结果。
1.6.2	行政组织业务属性修改操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入行政组织业务属性主界面。		
2	输入查询条件，点击查询按钮。	【行政组织业务属性查询条件】	系统返回查询结果，在组织树中突出显示查询结果。
3	点击树型结构中的名称。	【行政组织业务属性信息】，【提货信息】，【外场信息】，【调度组信息】，【部门基本信息】，【车队信息】，【车队组信息】，【事业部信息】，【排单部门信息】，【理货部门信息】，【对公银行账号信息】	在组织树的右边展示行政组织业务属性详情界面。
4	点击修改按钮。		进入行政组织业务属性修改界面。
5	修改行政组织业务属性，然后点击保存按钮。		成功保存界面信息至数据库，返回主界面。
行政组织业务属性修改操作步骤-异常操作
序号	扩展事件	相关数据	备注
5a	点击取消按钮，退出当前界面，返回主界面。		
5b	若保存失败，弹出对话框，提示用户保存失败以及失败原因，继续停留在修改界面。		

1.7	业务规则
序号	描述
SR-1	选择省份信息后，城市的选择范围自动变成已选省份所包含的城市。选择城市信息后，区县的选择范围自动变成已选城市所包含的区县。
SR-2	只有选择了“是否营业部”，界面才能修改或者显示营业部信息。
SR-3	只有选择了“可到达”，界面才能修改或者显示提货信息，到达适用产品。
SR-4	只有选择了“是否外场”，界面才能修改或者显示外场信息。
SR-5	只有选择了“是否车队调度组”，界面才能修改或者显示调度组信息。
SR-6	只有选择了“可自提”，界面才能修改或者显示“自提区域描述”。
SR-7	只有选择了“可派送”，界面才能修改或者显示“派送区域描述”。
SR-8	只有选择了“可出发”，界面才能修改或者显示“车队”,“出发适用产品”，“所属集中开单组”。
SR-9	外场简码,外场编码均不可重复。如果录入的已存在，提示用户已存在。
SR-10	只有选择了“是否车队”，界面才能修改或者显示车队信息。
SR-11	只有选择了“是否车队组”，界面才能修改或者显示车队组信息。
SR-12	在一个事业部内，集中接送货车队编码不能重复，当输入的编码已存在时，提示用户编码已存在。
SR-13	只有选择了“是否驻地部门”，界面才能修改或者显示“驻地营业部所属外场”。
SR-14	只有选择了“是否事业部”，界面才能修改或者显示“事业部信息”。
SR-15	事业部编码不能重复，当输入的编码已存在时，提示用户编码已存在。
SR-16	最大临时欠款额度的不是人工维护，是动态变化的，根据前3个月的最高收入所在等级决定。
SR-17	外场的部门面积要大于货区面积，外场的货区面积要大于货台面积。如果用户填写的值不满足此规则，则提示用户。
SR-18	当有客户在某部门开临欠时，此部门的已用临欠额度做相应的更新。
SR-19	如果当前部门是外场，“部门英文简称”必填。
SR-20	是否可返回签单, 是否可货到付款, 是否可代收货款 营业部默认都有这些业务。
SR-21	只有派送排单才显示或者编辑“排单部门信息”。
SR-22	只有理货才显示或者编辑“理货部门信息”。
SR-23	“是否可开装卸费”默认不选 。
SR-24	部门基本信息 均从UUMS同步。
SR-25	是否事业部, 是否营业小区, 是否营业大区从UUMS同步，不能修改。
SR-26	只有选择了“可空运配载”才能修改或者显示“是否空运总调”
SR-27	关于最大临欠额度：
1. 结算每月初统计客户上月收入，存入"客户月收入表" 
2. 综合取出客户月收入表中最近3个月收入 
3. 综合根据最大月收入查找收入区间表，获得最新额度后，更新到部门最大临欠额度中 
4. 综合提供接口，用于查询部门最大临欠额度 
5. 综合现有"已用额度"取消 
6. 综合与结算实现方式保持一致，都用Java定时任务，或者都用Stored Procedure

1.8	数据元素
1.8.1	行政组织业务属性部门公共业务信息
字段名称 	说明 	输入限制	长度	是否必填	备注
部门编号	部门的编号	N/A	N/A	N/A	
标杆编码	同基准编码，OA，CRM这些系统对同一部门的唯一标识	N/A	N/A	N/A	
部门名称	部门的名称	N/A	N/A	N/A	
部门面积	部门面积（单位：平方米）	文本	20	否	
国家地区	部门所有的国家地区	下拉框	50	是	
省份	部门所在的省份	下拉框	50	是	
城市	部门所在的城市	下拉框	50	是	
区县	部门所在的区县	下拉框	50	是	
部门英文简称	部门英文简称	文本	200	否	
部门备注信息	部门备注信息	文本	1000	否	
部门服务区坐标编号	部门服务区坐标编号	文本	50	否	
部门电话	部门电话	文本	50	否	
部门传真	部门传真	文本	50	否	
部门简称	部门简称	文本	50	否	
所属实体财务部	所属实体财务部	文本	50	否	
是否营业部	是否是营业部	数字	10	是	
是否外场	是否是外场	数字	10	是	
可空运配载	是否可空运配载	数字	10	是	
是否车队	是否是车队	数字	10	是	
是否车队调度组	是否是车队调度组	数字	10	是	
是否集中开单组	这个部门是否是集中开单组	数字	10	是	
是否事业部	是否事业部	数字	10	是	
是否车队组	是否车队组	数字	10	是	
是否营业小区	是否营业区	数字	10	是	
是否营业大区	是否营业大区	数字	10	是	
是否实体财务部	是否实体财务部	数字	10	是	
是否派送排单	是否派送排单	数字	10	是	
是否理货	是否理货	数字	10	是	
派送排单服务外场	派送排单服务外场	文本	50	否	
理货部门服务外场	理货部门服务外场	文本	50	否	
理货业务类型	理货业务类型	文本	50	否	
是否空运总调	是否空运总调	数字	10	是	
					
					
可出发	是否可做出发业务	数字	10	是	
可到达	是否可做到达业务	数字	10	是	
是否驻地部门	是否是驻地部门	数字	10	是	
广告语	广告语	文本	200	否	
开业日期	部门的开业日期	日期	20	是	
最大临欠额度	最大临欠额度	文本	200	否	
已用临欠额度	已用临欠额度,由结算来维护。	N/A	N/A	N/A	
出发适用产品	出发部门能提供的产品	列表框	N/A	否	数据来源于产品价格模型
到达适用产品	到达部门能提供的产品	列表框	N/A	否	数据来源于产品价格模型
所属集中开单组	所属集中开单组	选择框	N/A	否	
驻地营业部所属外场					
车队	接送货车队	列表框	N/A	否	
1.8.2	营业部信息
字段名称 	说明 	输入限制	长度	是否必填	备注
可出发	是否可做出发业务	数字	10	是	
可到达	是否可做到达业务	数字	10	是	
是否驻地部门	是否是驻地部门	数字	10	是	
是否集中接送货					
是否可开装卸费	是否可开装卸费	文本	1	是	默认为是（Y）
是否可返回签单	是否可返回签单	文本	1	是	默认为是（Y）
是否可货到付款	是否可货到付款	文本	1	是	默认为是（Y）
是否可代收货款	是否可代收货款	文本	1	是	默认为是（Y）
广告语	广告语	文本	200	否	
开业日期	部门的开业日期	日期	20	是	
最大临欠额度	最大临欠额度	文本	200	N/A	
已用临欠额度	已用临欠额度,由结算来维护。	N/A	N/A	N/A	
出发适用产品	出发部门能提供的产品	列表框	N/A	否	数据来源于产品价格模型
到达适用产品	到达部门能提供的产品	列表框	N/A	否	数据来源于产品价格模型
所属集中开单组	所属集中开单组	选择框	N/A	否	
驻地营业部所属外场	驻地营业部所属外场	选择框	N/A	否	
车队	接送货车队	列表框	N/A	否	
取消到达日期	取消到达日期	日期	20	否	
转货部门	转货部门	选择框	N/A	否	
1.8.21.8.3	提货信息
字段名称 	说明 	输入限制	长度	是否必填	备注
可自提	是否可以让客户自提	数字	10	是	
可派送	是否能送货上门	数字	10	是	
可空运到达	可空运到达	数字	10	是	
可汽运到达	可汽运到达	数字	10	是	
单件重量上限（KG）	单件重量上限是多少（KG）	数字	10	否	
单件体积上限(方)	单件体积上限是多少(方)	数字	10	否	
单票重量上限（KG）	单票重量上限是多少（KG）	数字	10	否	
单票体积上限(方)	单票体积上限是多少(方)	数字	10	否	
自提区域描述	自提区域描述	文本	255	否	
派送区域描述	派送区域描述	文本	255	否	
1.8.31.8.4	外场信息
字段名称 	说明 	输入限制	长度	是否必填	备注
可汽运配载	是否汽运配载	数字	10	是	
可外发配载	是否外发配载	数字	10	是	
可打木架	是否可打木架	数字	10	是	
可中转	是否中转	数字	10	是	
是否有自动分拣机	是否有自动分拣机	数字	10	是	
外场编码	配载部门的外场编码	文本	88	是	
外场简码	外场的简码，不能重复。	文本	88	是	
货区面积(平方米)	货区的面积	文本	20	否	
货台面积(平方米)	货台的面积	文本	20	否	
库型	外场有几个入口（单边/双边/三边/四边），默认为“请选择”	下拉框	N/A	否	
1.8.41.8.5	调度组信息
字段名称 	说明 	输入限制	长度	是否必填	备注
所属车队	调度组所属的车队	列表框	N/A	是	
1.8.51.8.6	车队信息
字段名称 	说明 	输入限制	长度	是否必填	备注
是否集中接送货	是否集中接送货	数字	10	是	
是否顶级车队	是否顶级车队	数字	10	是	
是否直接管车	是否直接管车	数字	10	是	
所服务集中开单组	所服务集中开单组	文本	200	是	
集中接送货车队编码	集中接送货车队编码	文本	255	是	
车队所属外场	车队所属外场	选择框	N/A	否	
车队类型	车队类型（包含长途车队，物流班车车队，接送货车队）	下拉框	N/A	否	
车队负责行政区	车队负责行政区	选择框	N/A	否	
车队负责营业区	车队负责营业区	选择框	N/A	否	
1.8.61.8.7	车队组信息
字段名称 	说明 	输入限制	长度	是否必填	备注
是否集中接送货	是否集中接送货	数字	10	是	
所属车队	车队组所属的车队	文本	255	是	
车队所属外场	车队所属外场	选择框	N/A	否	
车队组类型	车队组类型（包含长途车队，物流班车车队，接送货车队）	下拉框	N/A	否	
车队组负责行政区	车队组负责行政区	选择框	N/A	否	
车队组负责营业区	车队组负责营业区	选择框	N/A	否	
所服务集中开单组	所服务集中开单组	文本	200	是	
1.8.71.8.8	事业部信息
字段名称 	说明 	输入限制	长度	是否必填	备注
事业部编码(用于集中接送货区编码)	事业部编码(用于集中接送货区编码)	文本	50	是	
1.8.81.8.9	部门基本信息
字段名称 	说明 	输入限制	长度	是否必填	备注
组织负责人	组织负责人工号	N/A	N/A	N/A	
组织负责人姓名	组织负责人姓名	N/A	N/A	N/A	
负责人	组织负责人工号	N/A	N/A	N/A	
联系电话	联系电话	N/A	N/A	N/A	
部门传真	部门传真	N/A	N/A	N/A	
上级组织名称	上级行政组织名称	N/A	N/A	N/A	
上级组织标杆编码	上级行政组织的标杆编码，DP+6位数字编码	N/A	N/A	N/A	从OA同步
上级组织编码	上级行政组织的标杆编码，DP+6位数字编码	N/A	N/A	N/A	
上级组织名称	上级行政组织名称	N/A	N/A	N/A	
邮编号码	邮编号码				
所属子公司	组织所属子公司的名称	N/A	N/A	N/A	
财务成本中心	部门对应的财务成本中心	N/A	N/A	N/A	
部门地址	部门的详细地址	N/A	N/A	N/A	
部门备注信息	部门备注信息	N/A	N/A	N/A	
UUMS主键ID	UUMS主键ID	N/A	N/A	N/A	
UUMS上级主键ID	UUMS上级主键ID	N/A	N/A	N/A	
UUMS主键ID序列	UUMS主键ID序列	N/A	N/A	N/A	
组织状态	显示顺序启用、作废、异动	N/AN/A	N/AN/A	N/AN/A	
显示顺序	部门层级	N/A	N/A	N/A	
部门层级	部门备注信息	N/A	N/A	N/A	
启用日期	组织启用日期	N/A	N/A	N/A	
作废日期	组织作废日期	N/A	N/A	N/A	
组织状态	启用、作废、异动	N/A	N/A	N/A	
是否为叶子节点	是否为叶子节点	N/A	N/A	N/A	
部门简称	部门简称	N/A	N/A	N/A	
组织性质	组织性质	N/A	N/A	N/A	
地区编码默认拼音	地区编码默认拼音	N/A	N/A	N/A	
组织邮箱	组织邮箱	N/A	N/A	N/A	
已封存系统	已封存系统	N/A	N/A	N/A	
EHR部门编码	EHR部门编码	N/A	N/A	N/A	
创建人编码	创建人编码	N/A	N/A	N/A	初始数据从UUMS同步，后期由系统维护
创建时间	创建时间	N/A	N/A	N/A	初始数据从UUMS同步，后期由系统维护
修改人编码	修改人编码	N/A	N/A	N/A	初始数据从UUMS同步，后期由系统维护
修改时间	修改时间	N/A	N/A	N/A	初始数据从UUMS同步，后期由系统维护
1.8.10	对公银行账号信息
字段名称 	说明 	输入限制	长度	是否必填	备注
银行账号	对公银行账号	N/A	N/A	N/A	
银行开户名	银行开户名	N/A	N/A	N/A	
部门标杆编码	对公银行省市支行	N/A	N/A	N/A	
银行编码	银行编码	N/A	N/A	N/A	
银行名称	银行名称	N/A	N/A	N/A	
支行编码	支行编码	N/A	N/A	N/A	
支行名称	支行名称	N/A	N/A	N/A	
省份编码	省份编码	N/A	N/A	N/A	
省份名称	省份名称	N/A	N/A	N/A	
城市编码	城市编码	N/A	N/A	N/A	
城市名称	城市名称	N/A	N/A	N/A	
	
	
	
	
1.8.91.8.11	行政组织业务属性查询条件
字段名称 	说明 	输入限制	长度	是否必填	备注
部门名称	部门名称	文本	80	否	

1.9	非功能性需求
使用量	
2012年全网估计用户数	
响应要求（如果与全系统要求 不一致的话）	
使用时间段	
高峰使用时间段	

1.10	接口描述：
接口名称 	对方系统（外部系统或内部其他模块）	接口描述
组织架构信息接口	FOSS系统	由FOSS系统提供部门信息接口，UUMS调用传递部门的更新信息到FOSS系统。
部门地理位置信息接口	GIS系统	通过集成GIS电子地图，确定部门的地理位置（坐标）以及营业部的自提和派送区域。




dp-foss-综合管理系统用例-查询财务组织-v1.2

修订记录 
日期 	修订内容 	修订人员 	版本号 
2012-04-26 	新增 	李俊	V0.1
2012-06-12 	1. 按照UED要求，单个查询输入框无需“重置”按钮； 
2. 在跟UUMS沟通的新方案中，FOSS不提供“新增”财务组织的功能；    	李俊	V0.2
2012-07-13 	1.	添加了相关业务用例。
2.	修改了后置条件。	李俊	V0.3
2012-08-02	1. 通过业务部门审核签字版本升级到V0.9	李俊	V0.9
2013-02-19	与UUMS同步财务组织时需要在同步的时候添加以下属性：1、财务组织全路径 fullPath，2、 是否是叶子结点 isLeaf。	李俊	V1.2

1.	SUC-84-查询财务组织
1.1	相关业务用例
BUC_FOSS_4.7.30.30_010现金收银
BUC_FOSS_4.7.10.30_010现金小票

1.2	用例描述
该用例可对财务组织进行查询。

1.3	用例条件
条件类型	描述	引用系统用例
前置条件	UUMS已将财务组织信息同步至FOSS。	
后置条件		

1.4	操作用户角色
操作用户	描述
系统管理员	系统管理员对财务组织进行查询操作。

1.5	界面要求
1.5.1	表现方式
Web页面
1.5.2	界面原型-主界面
 
图一：财务组织主界面
1.5.3	界面描述-主界面
1.	功能按钮区域
1)	查询按钮：输入查询条件，点击查询按钮，查询结果突出显示。
2.	树形结构区域
1)	点击树形结构中的一个财务组织，在树型结构的右边显示这个财务组织的详情。参见【图二：财务组织查看界面】。
2)	点击树形结构的“+”，在组织树中展开该财务组织下一级的所有财务组织。点击树形结构的“-”，则收起该财务组织下一级的所有财务组织。
3.	字段输入区域
1)	参见数据元素【财务组织查询条件】。

1.5.4	界面原型-查看界面
 
图二：财务组织查看界面
1.5.5	界面描述-查看界面
1.	字段显示区域
1)	参见数据元素【财务组织信息】。

1.6	操作步骤
1.6.1	财务组织查询操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入财务组织主界面		
2	输入查询条件，点击查询按钮。	【财务组织查询条件】	系统返回查询结果，在财务组织树型结构中被查询的财务组织突出显示。
3	点击树型结构中的目标财务组织。		在财务组织树的右边展示财务组织详情。

1.7	业务规则
序号	描述

1.8	数据元素
1.8.1	财务组织信息
字段名称 	说明 	输入限制	长度	是否必填	备注
名称	财务组织的名称	N/A	N/A	N/A	
组织编码	财务组织的编码	N/A	N/A	N/A	
上级组织名称	上级组织的名称	N/A	N/A	N/A	
是否是成本中心	是否是成本中心	N/A	N/A	N/A	
是否是子公司	是否是子公司	N/A	N/A	N/A	
全称	财务组织的全称	N/A	N/A	N/A	
描述	描述信息	N/A	N/A	N/A	
财务组织全路径	财务组织全路径	N/A	N/A	N/A	
是否是叶子结点	是否是叶子结点	N/A	N/A	N/A	
1.8.2	财务组织查询条件
字段名称 	说明 	输入限制	长度	是否必填	备注
名称	财务组织的名称	文本	50	否	

1.9	非功能性需求
使用量	
2012年全网估计用户数	
响应要求（如果与全系统要求 不一致的话）	
使用时间段	
高峰使用时间段	

1.10	接口描述
接口名称 	对方系统（外部系统或内部其他模块）	接口描述
同步财务组织信息接口	UUMS系统	由FOSS系统提供财务组织信息接口，由UUMS调用，通过此接口传递财务组织更新信息到FOSS系统



dp-foss-综合管理系统用例-撤销组织提醒-v1.1

修订记录 
日期 	修订内容 	修订人员 	版本号 
2012-5-31 	新增 	朱俊勇	V0.1
2012-08-02	1. 通过业务部门审核签字版本升级到V0.9	李俊	V0.9
2012-12-6	1．更新主界面，更新业务规则	赵鹏	V1.01

1.	SUC-195-撤销组织提醒
1.1	相关业务用例
无
1.2	用例描述
该系统用例主要为预撤销组织相关人员提供消息提醒功能。
1.3	用例条件
条件类型	描述	引用系统用例
前置条件	1、	从UUMS同步到预撤销状态的组织信息
2、	FOSS中该组织存在相关用户（所属该组织的用户）	
后置条件	1、 待撤销组织的所有人员可以查看到消息提醒	
1.4	操作用户角色
操作用户	描述
无	被动提醒页面,无主动操作.
1.5	界面要求
1.5.1	表现方式
Web页面
1.5.2	界面原型-主界面
 
图一：撤销组织提醒界面
1.5.3	界面描述-主界面
参考FOSS系统消息提示界面。
 
1.6	操作步骤

序号	基本步骤	相关数据	补充步骤
1	显示撤销组织提醒界面		
2	用户浏览提醒信息后点击关闭按钮，返回首页		

1.7	业务规则
序号	描述
SR-1	如果系统中存在预撤销组织，则所有归属该组织的用户（包括非默认组织）在登录时需要得到提醒信息
SR-2	页面展示时调用各子系统提供的接口，取得未完成事宜列表，如果返回的事宜已经处理完成则不需要显示在提醒信息列表中。如果所有事宜都已完成 ，则不显示提醒信息列表（组织将于某时间撤销的提醒信息仍然需要显示）。
SR-3	如果相关用户所属的多个组织有预撤销状态时，按组织编码顺序显示提醒信息。

1.8	数据元素
1.8.1	组织架构数据（显示信息）
字段名称 	说明 	输入限制	长度	是否必填	备注
组织名称	行政组织名称	文本	50		
撤销日期	XXXX年XX月XX日	文本	11		
1.9	非功能性需求
使用量	
2012年全网估计用户数	
响应要求（如果与全系统要求 不一致的话）	
使用时间段	
高峰使用时间段	

1.10	接口描述
接口名称 	对方系统（外部系统或内部其他模块）	接口描述

*
*/		

package com.deppon.foss.module.base.baseinfo.server.service.impl.complex;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang.BooleanUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import com.deppon.foss.base.util.define.BizTypeConstants;
import com.deppon.foss.base.util.define.NumberConstants;
import com.deppon.foss.base.util.define.SysCtrlConstants;
import com.deppon.foss.module.base.baseinfo.api.server.dao.IMotorcadeDao;
import com.deppon.foss.module.base.baseinfo.api.server.dao.IOrgAdministrativeInfoDao;
import com.deppon.foss.module.base.baseinfo.api.server.dao.ISaleDepartmentDao;
import com.deppon.foss.module.base.baseinfo.api.server.dao.complex.IOrgAdministrativeInfoComplexDao;
import com.deppon.foss.module.base.baseinfo.api.server.service.IMotorcadeService;
import com.deppon.foss.module.base.baseinfo.api.server.service.IOrgAdministrativeInfoService;
import com.deppon.foss.module.base.baseinfo.api.server.service.IOutfieldService;
import com.deppon.foss.module.base.baseinfo.api.server.service.ISalesMotorcadeService;
import com.deppon.foss.module.base.baseinfo.api.server.service.complex.IOrgAdministrativeInfoComplexService;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.MotorcadeEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.OrgAdministrativeInfoEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.SaleDepartmentEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.exception.OrgAdministrativeInfoException;
import com.deppon.foss.util.define.FossConstants;
import com.google.inject.Inject;

/**
 * 通过复杂的流程查询组织
 * 
 * @author 087584-foss-lijun
 * @date 2013-2-1 上午9:58:05
 * @version 1.0
 */
public class OrgAdministrativeInfoComplexService implements IOrgAdministrativeInfoComplexService{

    /**
     * 日志
     */
    private static final Logger log = Logger.getLogger(OrgAdministrativeInfoComplexService.class);

    /**
     * 下面是get,set方法
     */
    @Inject
    private IOrgAdministrativeInfoDao orgAdministrativeInfoDao ;
    /**
     * 
     * orgAdministrativeInfoComplexDao
     */
    @Inject
    private IOrgAdministrativeInfoComplexDao orgAdministrativeInfoComplexDao ;

    /**
     * 
     * motorcadeDao
     */
    @Inject
    private IMotorcadeDao motorcadeDao;
    /**
     * 
     * saleDepartmentDao
     */
    @Inject
    private ISaleDepartmentDao saleDepartmentDao;
    /**
     * 
     * orgAdministrativeInfoService
     */
    @Inject
    private IOrgAdministrativeInfoService orgAdministrativeInfoService;
    /**
     * 
     * motorcadeService
     */
    @Inject
    private IMotorcadeService motorcadeService;

    /**
     * salesMotorcadeService
     */
    private ISalesMotorcadeService salesMotorcadeService;

    @Inject
    private IOutfieldService outfieldService;
    
    
    
    /**
     * @param outfieldService the outfieldService to set
     */
    public void setOutfieldService(IOutfieldService outfieldService) {
        this.outfieldService = outfieldService;
    }

    /**
     * @param salesMotorcadeService the salesMotorcadeService to set
     */
    public void setSalesMotorcadeService(
    	ISalesMotorcadeService salesMotorcadeService) {
        this.salesMotorcadeService = salesMotorcadeService;
    }

    /**
     * 
     * @date Mar 12, 2013 2:16:48 PM
     * @param orgAdministrativeInfoDao
     * @see
     */
    public void setOrgAdministrativeInfoDao(
    	IOrgAdministrativeInfoDao orgAdministrativeInfoDao) {
        this.orgAdministrativeInfoDao = orgAdministrativeInfoDao;
    }

    /**
     * 
     * @date Mar 12, 2013 2:16:53 PM
     * @param orgAdministrativeInfoComplexDao
     * @see
     */
    public void setOrgAdministrativeInfoComplexDao(
    	IOrgAdministrativeInfoComplexDao orgAdministrativeInfoComplexDao) {
        this.orgAdministrativeInfoComplexDao = orgAdministrativeInfoComplexDao;
    }

    /**
     * 
     * @date Mar 12, 2013 2:16:59 PM
     * @param motorcadeDao
     * @see
     */
    public void setMotorcadeDao(IMotorcadeDao motorcadeDao) {
        this.motorcadeDao = motorcadeDao;
    }

    /**
     * 
     * @date Mar 12, 2013 2:17:04 PM
     * @param saleDepartmentDao
     * @see
     */
    public void setSaleDepartmentDao(ISaleDepartmentDao saleDepartmentDao) {
        this.saleDepartmentDao = saleDepartmentDao;
    }

    
    /**
     * 
     * @date Mar 12, 2013 2:17:13 PM
     * @param orgAdministrativeInfoService
     * @see
     */
    public void setOrgAdministrativeInfoService(
    	IOrgAdministrativeInfoService orgAdministrativeInfoService) {
        this.orgAdministrativeInfoService = orgAdministrativeInfoService;
    }

    
    /**
     * 
     * @date Mar 12, 2013 2:17:18 PM
     * @param motorcadeService
     * @see
     */
    public void setMotorcadeService(IMotorcadeService motorcadeService) {
        this.motorcadeService = motorcadeService;
    }

    /**
     * 根据CODE查询组织及组织的上组织或者下级， 如果传入的code为空或者空白，则返回空白.
     * 返回时不包含此组织
     * 
     * isUp 为true时查上级，为false时，查下级 ，只能查一级
     * 
     * @author 087584-foss-lijun
     * @date 2012-10-20 下午7:53:16
     * @param code部门编码，不是标杆编码
     * @see com.deppon.foss.module.base.baseinfo.api.server.service.IOrgAdministrativeInfoService#queryOrgAdministrativeInfoUpDown(java.lang.String,
     *      boolean)
     */
    @Override
    public List<OrgAdministrativeInfoEntity> queryOrgAdministrativeInfoUpDown(String code, boolean isUp) {
	// 数据合法性判断
	if (StringUtils.isBlank(code)) {
	    return null;
	}

	// 查询出组织实体
	OrgAdministrativeInfoEntity entity = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeClean(code);
	if (null == entity) {
	    log.warn("找不到该部门编码对应的行政组织，code=" + code);
	    return null;
	}

	if (isUp) {
	    log.debug("根据组织编码："+code+"查询上级组织");
	    List<OrgAdministrativeInfoEntity> entitys = new ArrayList<OrgAdministrativeInfoEntity>();
	    if (StringUtils.isBlank(entity.getParentOrgUnifiedCode())) {
		return entitys;
	    }

	    // 根据标杆编码查询组织实体
	    OrgAdministrativeInfoEntity parent = orgAdministrativeInfoService.queryOrgAdministrativeInfoByUnifiedCodeClean(entity.getParentOrgUnifiedCode());
	    if (parent != null) {
		entitys.add(parent);
	    }
	    return entitys;
	} else {
	    log.debug("查询下级组织");
	    // 组装查询条件：
	    OrgAdministrativeInfoEntity queryEntity = new OrgAdministrativeInfoEntity();
	    queryEntity.setParentOrgUnifiedCode(entity.getUnifiedCode());
	    return orgAdministrativeInfoDao.queryOrgAdministrativeInfoExactByEntity(queryEntity,0,Integer.MAX_VALUE);
	}
    }
    
    /**
     * 通过传入一个车队或车队下调度组的code，查询出车队下的所有车队组
     * 经过跟 接送货组  沟通，实际返回为车队组，如果车队下面没有车队组，则返回为空
     * 
     * @author 087584-foss-lijun
     * @date 2012-10-26 上午10:14:19
     * @param code部门编码，不是标杆编码
     * @see com.deppon.foss.module.base.baseinfo.api.server.service.IOrgIntricateQueryService#querySubOrgByCode(java.lang.String)
     */
    public List<OrgAdministrativeInfoEntity> querySubOrgByCode(String code){
	//313353 sonar
    OrgAdministrativeInfoEntity org = this.sonarSplitOne(code);
    if(null == org){
    	return null;
    }

	// 如果是车队：
	if(org.checkTransDepartment()){
	    // 构造查询条件：
	    MotorcadeEntity queryEntity=new MotorcadeEntity();
	    queryEntity.setParentOrgCode(code);
	    // 返回车队组：
	    List<MotorcadeEntity> list = motorcadeDao.queryMotorcadeExactByEntity(queryEntity, NumberConstants.ZERO, Integer.MAX_VALUE);
	    
	    List<String> codes = new ArrayList<String> ();
	    for (MotorcadeEntity entity : list) {
		if (entity != null && StringUtils.isNotBlank(entity.getCode())) {
		    codes.add(entity.getCode());
		}
	    }

	    return orgAdministrativeInfoDao.queryOrgAdministrativeInfoBatchByCode(codes.toArray(new String[0]));
	}
	// 如果是车队组，直接返回：
	if(org.checkTransTeam()){
	    List<OrgAdministrativeInfoEntity> list = new ArrayList<OrgAdministrativeInfoEntity>();
	    list.add(org);
	    return list;
	}
	// 如果是调度，直接返回：
	if(org.checkDispatchTeam()){
	    MotorcadeEntity motorcate = motorcadeService.queryMotorcadeByCodeClean(code);// motorcadeDao.queryMotorcadeByCode(code);
	    if(motorcate == null || StringUtils.isBlank(motorcate.getParentOrgCode())){
		return null;
	    }
	    
	    // 根据调度组所属的车队编码，获得调度组所属的车队
	    motorcate = motorcadeService.queryMotorcadeByCodeClean(motorcate.getParentOrgCode()); // motorcadeDao.queryMotorcadeByCode(motorcate.getParentOrgCode());
	    if (motorcate == null || StringUtils.isBlank(motorcate.getCode())) {
		return null;
	    }
	    
	    // 返回车队组：
	    OrgAdministrativeInfoEntity entity = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeClean(motorcate.getCode());
	    List<OrgAdministrativeInfoEntity> list = new ArrayList<OrgAdministrativeInfoEntity>();
	    if (entity != null) {
		list.add(entity);
	    }
	    return list;
	}
	
	return null;
    }
    
	/**
	 * sonar优化拆分
	 * 
	 * @author 313353
	 */
	private OrgAdministrativeInfoEntity sonarSplitOne(String code) {
		OrgAdministrativeInfoEntity org = null;
		if (StringUtils.isBlank(code)) {
		    return null;
		}
		
		//先查出组织信息：
		org = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeClean(code);
		// 如果部门不是车队，不是车队组，不是车队调度，返回空
		if (org == null || BooleanUtils.isFalse(org.checkDispatchTeam() || org.checkTransDepartment() || org.checkTransTeam())) {
		    return null;
		}
		return org;
	}
	
    /**
     * 下面是提供给综合组的方法
     * 
     * 
     */
    
    /**
     * 通过部门编码获得顶级车队组织
     * 
     * @author 087584-foss-lijun
     * @date 2013-1-12 下午4:17:18
     */
    @Override
    public OrgAdministrativeInfoEntity getTopFleetByCode(String code){
	// 向上找，先查出第一个上级车队
	List<String> bizTypes = new ArrayList<String>();
	bizTypes.add(BizTypeConstants.ORG_TRANS_DEPARTMENT);
	OrgAdministrativeInfoEntity fleet = queryOrgAdministrativeInfoByCode(code, bizTypes);
	if(fleet == null || StringUtils.isBlank(fleet.getCode())){
	    return null;
	}
	//获取第一个上级车队组织对应的车队实体
	MotorcadeEntity motorcadeEntity= motorcadeService.queryMotorcadeByCodeClean(fleet.getCode());
	//若查询出的上级车队是顶级车队
	if(motorcadeEntity !=null){
		if(FossConstants.YES.equals(motorcadeEntity.getIsTopFleet())){
			return fleet;
		}
	}
	
	// 获得所有的上级部门(获取第一个车队组织的上级部门以及所属部门)
	List<OrgAdministrativeInfoEntity> orgs = queryOrgAdministrativeInfoEntityAllUpByCode(fleet.getCode());
	// 把所有的上级部门标杆编码做key放到map中
	Map<String, OrgAdministrativeInfoEntity> map = new HashMap<String, OrgAdministrativeInfoEntity>();
	for (OrgAdministrativeInfoEntity org : orgs) {
	    if (org != null && StringUtils.isNotBlank(org.getUnifiedCode())) {
	    	map.put(org.getUnifiedCode(), org);
	    }
	}

	for (int i = 0; i < orgs.size(); i++) {
	    if (StringUtils.isBlank(fleet.getParentOrgUnifiedCode())) {
	    	return null;
	    }
	    
	    // 获得上级部门
	    OrgAdministrativeInfoEntity org = map.get(fleet.getParentOrgUnifiedCode());
	    if (org == null) {
	    	return null;
	    }
	    
	    // 如果上级部门不是车队，则返回当前车队fleet
	    if (BooleanUtils.isFalse(org.checkTransDepartment())) {
	    	return fleet;
	    //BUG-45887  如果上级部门是车队
	    }else {
	    	//获取当前部门对应的车队
	    	MotorcadeEntity motorcade= motorcadeService.queryMotorcadeByCodeClean(org.getCode());
	    	//如果当前这个上级车队是顶级车队，返回
	    	if(motorcade!=null && FossConstants.YES.equals(motorcade.getIsTopFleet())){
				return org;
			}
	    }
	    
	    fleet = org;
	}
	
	return null;
    }
    
    
    
    /**
     * 下面是 结算组 提的方法
     */

    /**
     * 根据部门编码获取所属及下属部门信息
     * 此部门及下属的所有部门。
     * 
     * @author 087584-foss-lijun
     * @date 2012-10-26 上午10:14:19
     * @param code部门编码，不是标杆编码
     * @see com.deppon.foss.module.base.baseinfo.api.server.service.complex.IOrgAdministrativeInfoComplexService#queryOrgAdministrativeInfoEntityAllSubByCode(java.lang.String)
     */
    @Override
    public List<OrgAdministrativeInfoEntity> queryOrgAdministrativeInfoEntityAllSubByCode(String code) {
	// 检查参数
	if(StringUtils.isBlank(code)){
	    return new ArrayList<OrgAdministrativeInfoEntity>();
	}
	return orgAdministrativeInfoComplexDao.queryOrgAdministrativeInfoEntityAllSubByCode(code);
    }

    /**
     * 根据部门编码获取所属及上级所有部门的信息
     * 
     * @author 087584-foss-lijun
     * @date 2012-10-26 上午10:14:19
     * @param code部门编码，不是标杆编码
     */
    @Override
    public List<OrgAdministrativeInfoEntity> queryOrgAdministrativeInfoEntityAllUpByCode(String code) {
	List<OrgAdministrativeInfoEntity> result = new ArrayList<OrgAdministrativeInfoEntity>();
	// 检查参数
	if(StringUtils.isBlank(code)){
	    return result;
	}
	OrgAdministrativeInfoEntity org = null;
	int i = 0;
	do {
	    org = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeClean(code);
	    if (org == null) {
		break;
	    }    
	    result.add(org);
	    code = org.getParentOrgCode();
	    i++;
	    //顶级部门的上级部门编码一般为空，防止出现由于数据问题导致死循环，限制循环20次
	} while (StringUtils.isNotBlank(code) && i <= SysCtrlConstants.ORG_QUERY_RECURRENCE_NUM_MORE);
	return result;
	
//	return orgAdministrativeInfoComplexDao.queryOrgAdministrativeInfoEntityAllUpByCode(code);
    }
    
    
    
    /** 
     * 根据财务部门编码获取管辖大区信息
     * 大区 是营业大区域
     * 财务部门，不是财务组织的部门，不是一个虚拟的部门，是OA中一个实际存在的部门
     * 
     * @author 087584-foss-lijun
     * @date 2012-11-3 下午8:25:47
     * @see com.deppon.foss.module.base.baseinfo.api.server.service.complex.IOrgAdministrativeInfoComplexService#queryOrgAdministrativeInfoEntityBigAreaByFinance(java.lang.String)
     */
    @Override
    public List<OrgAdministrativeInfoEntity> queryOrgAdministrativeInfoEntityBigAreaByFinance(String code) {
	// 检查参数
	if(StringUtils.isBlank(code)){
	    return new ArrayList<OrgAdministrativeInfoEntity>();
	}
	return orgAdministrativeInfoComplexDao.queryOrgAdministrativeInfoEntityBigAreaByFinance(code);
    }

    /** 
     * 根据大区编码获取下属小区信息
     * 这里的大区，小区均是营业区域，不是定人定区中的大小区。
     * 
     * @author 087584-foss-lijun
     * @date 2012-11-3 下午8:26:02
     * @param code部门编码，不是标杆编码
     * @see com.deppon.foss.module.base.baseinfo.api.server.service.complex.IOrgAdministrativeInfoComplexService#queryOrgAdministrativeInfoEntitySmallAreaByBig(java.lang.String)
     */
    @Override
    public List<OrgAdministrativeInfoEntity> queryOrgAdministrativeInfoEntitySmallAreaByBig(String code) {
	// 检查参数
	if(StringUtils.isBlank(code)){
	    return new ArrayList<OrgAdministrativeInfoEntity>();
	}
	return orgAdministrativeInfoComplexDao.queryOrgAdministrativeInfoEntitySmallAreaByBig(code);
    }

    /** 
     * 根据大区编码获取下属营业部部门信息
     * 这里的大区，小区均是营业区域，不是定人定区中的大小区。
     * 
     * @author 087584-foss-lijun
     * @date 2012-11-3 下午8:26:24
     * @param code部门编码，不是标杆编码
     * 
     * @see com.deppon.foss.module.base.baseinfo.api.server.service.complex.IOrgAdministrativeInfoComplexService#queryOrgAdministrativeInfoEntitySalesByBig(java.lang.String)
     */
    @Override
    public List<OrgAdministrativeInfoEntity> queryOrgAdministrativeInfoEntitySalesByBig(String code) {
	// 检查参数
	if(StringUtils.isBlank(code)){
	    return new ArrayList<OrgAdministrativeInfoEntity>();
	}
	return orgAdministrativeInfoComplexDao.queryOrgAdministrativeInfoEntitySalesByUp(code);
    }

    /** 
     * 根据小区编码获取下属营业部部门信息
     * 这里的大区，小区均是营业区域，不是定人定区中的大小区。
     * 
     * @author 087584-foss-lijun
     * @date 2012-11-3 下午8:26:39
     * @param code部门编码，不是标杆编码
     * @see com.deppon.foss.module.base.baseinfo.api.server.service.complex.IOrgAdministrativeInfoComplexService#queryOrgAdministrativeInfoEntitySalesBySmall(java.lang.String)
     */
    @Override
    public List<OrgAdministrativeInfoEntity> queryOrgAdministrativeInfoEntitySalesBySmall(String code) {
	// 检查参数
	if(StringUtils.isBlank(code)){
	    return new ArrayList<OrgAdministrativeInfoEntity>();
	}
	return orgAdministrativeInfoComplexDao.queryOrgAdministrativeInfoEntitySalesByUp(code);
    }
    

    /** 
     * 根据 部门编码（一般为小区编码，大区编码）获取下属营业部部门信息
     * 
     * 返回的编码要在指定的list中
     * 
     * 这里的大区，小区均是营业区域，不是定人定区中的大小区。
     * 
     * 主要提供给结算
     * 
     * @author 087584-foss-lijun
     * @date 2012-11-3 下午8:26:39
     * @param code部门编码，不是标杆编码
     * @param existCode 包含的营业部编码
     */
    @Override
    public List<OrgAdministrativeInfoEntity> queryOrgAdministrativeInfoEntitySalesByUpCode(String code, List<String> existCodes) {
	// 检查参数
	if(StringUtils.isBlank(code) || CollectionUtils.isEmpty(existCodes)){
	    return new ArrayList<OrgAdministrativeInfoEntity>();
	}
	return orgAdministrativeInfoComplexDao.queryOrgAdministrativeInfoEntitySalesByUpCode(code, existCodes);
    }
    /**
     * 
     *<p>根据的大区编码查询下属快递点部信息</p>
     * @author 130566-foss-ZengJunfan
     * @date 2014-9-5 上午9:27:05 
     * @see @see com.deppon.foss.module.base.baseinfo.api.server.service.complex.IOrgAdministrativeInfoComplexService#queryOrgAdminExpressPartBybig(java.lang.String) 
     * @param code
     * @return
     */
	@Override
	public List<OrgAdministrativeInfoEntity> queryOrgAdminExpressPartsBybig(
			String code) {
		//校验查询参数
		if(StringUtils.isBlank(code)){
			return new ArrayList<OrgAdministrativeInfoEntity>();
		}
		return orgAdministrativeInfoComplexDao.queryOrgAdminExpressPartsByBig(code);
	}
    
    /**
     * 下面是给综合-车辆模块的方法,查询上级车队
     */
    
    /** 
     * 查询车队，如果当前部门不是车队，查上级，如果上级也不是，再向上查，直到查到到，或者查完所有级，或者超过递归数
     * 
     * @author 087584-foss-lijun
     * @date 2012-11-6 上午11:24:09
     * @see com.deppon.foss.module.base.baseinfo.api.server.service.complex.IOrgAdministrativeInfoComplexService#getOrgAdministrativeInfoMotorcadeByCode(java.lang.String)
     */
    @Override
    public OrgAdministrativeInfoEntity getOrgAdministrativeInfoMotorcadeByCode(String code){
	List<String> bizTypes = new ArrayList<String>();
	bizTypes.add(BizTypeConstants.ORG_TRANS_DEPARTMENT);
	return queryOrgAdministrativeInfoByCode(code, bizTypes);
    }

    /**
     * 查询上级部门中指定集中中类型的部门，找到上级中有一个在bizTypes的即返回
     * 
     * @author 087584-foss-lijun
     * @date 2012-11-23 上午9:29:21
     */
    private boolean isOrgMatchBizType(OrgAdministrativeInfoEntity entityResult, List<String> bizTypes) {
	// 检查参数
	if (entityResult == null || CollectionUtils.isEmpty(bizTypes)) {
	    return false;
	}
	//313353 sonar
	if(this.sonarSplitTwo(entityResult, bizTypes)){
		return true;
	}
	
	// 判断查询的类型是否包含大区，且是当前部门是大区   
	if(StringUtils.equals(entityResult.getBigRegion(), FossConstants.YES)
		&& bizTypes.contains( BizTypeConstants.ORG_BIG_REGION)){
	    return true;
	}
	// 判断查询的类型是否包含小区，且是当前部门是小区
	if(StringUtils.equals(entityResult.getSmallRegion(), FossConstants.YES)
		&& bizTypes.contains( BizTypeConstants.ORG_SMALL_REGION)){
	    return true;
	}
	// 判断查询的类型是否包含派送排单部门，且是当前部门是派送排单部门
	if(StringUtils.equals(entityResult.getIsDeliverSchedule(), FossConstants.YES)
		&& bizTypes.contains( BizTypeConstants.ORG_IS_DELIVER_SCHEDULE)){
	    return true;
	}
	// 判断查询的类型是否包含经营本部，且是当前部门是经营本部
		if(StringUtils.equals(entityResult.getIsManageDepartment(), FossConstants.YES)
			&& bizTypes.contains( BizTypeConstants.ORG_IS_MANAGE_DEPARTMENT)){
		    return true;
		}
	return false;
    }
    
	/**
	 * sonar优化拆分
	 * 
	 * @author 313353
	 */
	private boolean sonarSplitTwo(OrgAdministrativeInfoEntity entityResult, List<String> bizTypes) {
		boolean result = false;
		// 判断查询的类型是否包含车队，且是当前部门是车队    
		if(StringUtils.equals(entityResult.getTransDepartment(), FossConstants.YES)
			&& bizTypes.contains( BizTypeConstants.ORG_TRANS_DEPARTMENT)){
		    return true;
		}
		// 判断查询的类型是否包含外场，且是当前部门是外场   
		if(StringUtils.equals(entityResult.getTransferCenter(), FossConstants.YES)
			&& bizTypes.contains( BizTypeConstants.ORG_TRANSFER_CENTER)){
		    return true;
		}
		// 判断查询的类型是否包含空运总调，且是当前部门是空运总调   
		if(StringUtils.equals(entityResult.getAirDispatch(), FossConstants.YES)
			&& bizTypes.contains( BizTypeConstants.ORG_AIR_DISPATCH)){
		    return true;
		}
		// 判断查询的类型是否包含营业部，且是当前部门是营业部   
		if(StringUtils.equals(entityResult.getSalesDepartment(), FossConstants.YES)
			&& bizTypes.contains( BizTypeConstants.ORG_SALES_DEPARTMENT)){
		    return true;
		}
		// 判断查询的类型是否包含事业部，且是当前部门是事业部   
		if(StringUtils.equals(entityResult.getDivision(), FossConstants.YES)
			&& bizTypes.contains( BizTypeConstants.ORG_DIVISION)){
		    return true;
		}
		return result;
	}
    
    
    /**
     * 
     * 查询上级部门中指定列表中类型的部门，找到上级中有一个在bizTypes的即返回
     * 
     * bizTypes请看BizTypeConstants类，目前包括：    
    ORG_TRANS_DEPARTMENT="TRANS_DEPARTMENT";
    ORG_TRANSFER_CENTER="TRANSFER_CENTER";
    ORG_AIR_DISPATCH="AIR_DISPATCH";
    ORG_DIVISION="DIVISION";
    ORG_BIG_REGION="BIG_REGION";
    ORG_SMALL_REGION="SMALL_REGION";
    ORG_IS_DELIVER_SCHEDULE="IS_DELIVER_SCHEDULE";
     * 
     * @author 087584-foss-lijun
     * @date 2012-11-23 下午2:00:07
     * @see com.deppon.foss.module.base.baseinfo.api.server.service.complex.IOrgAdministrativeInfoComplexService#queryOrgAdministrativeInfoByCode(java.lang.String, java.util.List)
     */
    @Override
    public OrgAdministrativeInfoEntity queryOrgAdministrativeInfoByCode(String code, List<String> bizTypes) {
	OrgAdministrativeInfoEntity entity = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeClean(code);
	// 如果部门不存在，则返回null; 要找的类型为空，则返回自己
	if(entity == null || CollectionUtils.isEmpty(bizTypes)){
	    log.debug("如果部门不存在，则返回null; 要找的类型为空，则返回自己 entity = " + entity);
	    return entity;
	}
	// 循环6次，查找上级组织看是否是所需类型
	for (int i = 0; i < SysCtrlConstants.ORG_QUERY_RECURRENCE_NUM; i++) {
	    log.debug("当前组织编码:" + entity.getCode() + ";当前查找次数" + (i + 1));
	    if (isOrgMatchBizType(entity, bizTypes)) {
		log.debug("找到了符合的组织，成功返回, 组织编码:" + entity.getCode());
		return entity;
	    }
	    entity = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeClean(entity.getParentOrgCode());
	    if (entity == null) {
		log.debug("组织的父编码为null或找不到对应的实体");
		return null;
	    }
	}
	log.debug("找了" + SysCtrlConstants.ORG_QUERY_RECURRENCE_NUM + "次上级组织都找不到符合条件的，返回null");
	return null;
    }
    
    /**
     * 
     * 查询上级部门(包括自己)中指定列表中类型的部门，找到上级中有一个在bizTypes的即返回
     * 
     * bizTypes请看BizTypeConstants类，目前包括：    
    ORG_TRANS_DEPARTMENT="TRANS_DEPARTMENT";
    ORG_TRANSFER_CENTER="TRANSFER_CENTER";
    ORG_AIR_DISPATCH="AIR_DISPATCH";
    ORG_DIVISION="DIVISION";
    ORG_BIG_REGION="BIG_REGION";
    ORG_SMALL_REGION="SMALL_REGION";
    ORG_IS_DELIVER_SCHEDULE="IS_DELIVER_SCHEDULE";
     * 
     * @author 087584-foss-lijun
     * @date 2012-11-23 下午2:00:07
     * @see com.deppon.foss.module.base.baseinfo.api.server.service.complex.IOrgAdministrativeInfoComplexService#queryOrgAdministrativeInfoByCode(java.lang.String, java.util.List)
     */
    @Override
    public OrgAdministrativeInfoEntity queryOrgAdministrativeInfoIncludeSelfByCode(String code, List<String> bizTypes) {
	if (StringUtils.isBlank(code) || CollectionUtils.isEmpty(bizTypes)) {
	    return null;
	}
	int i = 0;
	OrgAdministrativeInfoEntity entity = null;
	do {
	    entity = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeClean(code);
	    if (isOrgMatchBizType(entity, bizTypes)) {
		log.debug("找到了符合的组织，成功返回, 组织编码:" + entity.getCode());
		return entity;
	    }
	    if (entity == null) {
		return null;
	    }
	    code = entity.getParentOrgCode();
	    i++;
	} while (StringUtils.isNotBlank(code) && i < SysCtrlConstants.ORG_QUERY_RECURRENCE_NUM);
	log.debug("找了" + SysCtrlConstants.ORG_QUERY_RECURRENCE_NUM + "次上级组织都找不到符合条件的，返回null");
	return null;
    }

    

    /**
	 * 根据部门编码获取下级指定类型的部门。
	 * 
	 * 
	 * bizTypes请看BizTypeConstants类，目前包括：
	 * ORG_TRANS_DEPARTMENT="TRANS_DEPARTMENT";
	 * ORG_TRANSFER_CENTER="TRANSFER_CENTER"; ORG_AIR_DISPATCH="AIR_DISPATCH";
	 * ORG_DIVISION="DIVISION"; ORG_BIG_REGION="BIG_REGION";
	 * ORG_SMALL_REGION="SMALL_REGION"; ORG_SALES_DEPARTMENT="SALES_DEPARTMENT";
	 * ORG_TRANS_TEAM="TRANS_TEAM";
	 * ORG_IS_DELIVER_SCHEDULE="IS_DELIVER_SCHEDULE";
	 * ORG_DISPATCH_TEAM="DISPATCH_TEAM"; OrgAdministrativeInfoException
	 * 
	 * @author 087584-foss-lijun
	 * @date 2012-11-6 上午9:41:09
	 */
    @Override
    public List<OrgAdministrativeInfoEntity> queryOrgAdministrativeInfoSubByBizType(String code, String bizType) {
	// 检查参数
	if(StringUtils.isBlank(code) || StringUtils.isBlank(bizType)){
	    throw new OrgAdministrativeInfoException("","code和bizType均不能为空");
	}
	if(!(StringUtils.equals(BizTypeConstants.ORG_TRANS_DEPARTMENT, bizType)
		||StringUtils.equals(BizTypeConstants.ORG_TRANSFER_CENTER, bizType)
		||StringUtils.equals(BizTypeConstants.ORG_AIR_DISPATCH, bizType)
		||StringUtils.equals(BizTypeConstants.ORG_DIVISION, bizType)
		||StringUtils.equals(BizTypeConstants.ORG_BIG_REGION, bizType)
		||StringUtils.equals(BizTypeConstants.ORG_SMALL_REGION, bizType)
		||StringUtils.equals(BizTypeConstants.ORG_SALES_DEPARTMENT, bizType)
		||StringUtils.equals(BizTypeConstants.ORG_TRANS_TEAM, bizType)
		||StringUtils.equals(BizTypeConstants.ORG_IS_DELIVER_SCHEDULE, bizType)
		||StringUtils.equals(BizTypeConstants.ORG_DISPATCH_TEAM, bizType)
		||StringUtils.equals(BizTypeConstants.EXPRESS_BIG_REGION, bizType)
		||StringUtils.equals(BizTypeConstants.EXPRESS_SALES_DEPARTMENT, bizType)
		||StringUtils.equals(BizTypeConstants.EXPRESS_PART, bizType)
		)){
	    throw new OrgAdministrativeInfoException("","暂不支持的业务类型，或者业务类型已经更改，请将业务类型与表BSE.T_BAS_ORG中的列比对，判断列是否存在");
	}
	return orgAdministrativeInfoComplexDao.queryOrgAdministrativeInfoSubByBizType(code, bizType);
    }
    /**
     * --提供给接送货--
     *<p>
     *	根据部门code，获取指定下级部门是车队,或则车队组的部门
     *	ps：若顶级车队下级还有顶级车队组织，剔除该下级顶级车队挂的组织
     *</p>
     *@author 130566-zengJunfan
     *@date   2013-7-22下午7:04:12
     * @param code
     * @param bizType
     * @return
     */
    @Override
	public List<OrgAdministrativeInfoEntity> queryOrgAdministrativeInfoSubByMotorcade(
			String code, String bizType) {
		// 检查参数
		if (StringUtils.isBlank(code) || StringUtils.isBlank(bizType)) {
			throw new OrgAdministrativeInfoException("", "code和bizType均不能为空");
		}
		// 若类型不是车队
		if (!(StringUtils.equals(BizTypeConstants.ORG_TRANS_DEPARTMENT, bizType) 
				|| StringUtils.equals(BizTypeConstants.ORG_TRANS_TEAM, bizType))) {
			throw new OrgAdministrativeInfoException("", "该方法只能查询车队、或车度组");
		}
		// 定义个新的集合（用来获取最终的部门集合）
		List<OrgAdministrativeInfoEntity> infoEntities = new ArrayList<OrgAdministrativeInfoEntity>();

		// 得到下级部门是要求的部门集合
		List<OrgAdministrativeInfoEntity> entities = orgAdministrativeInfoComplexDao
				.queryOrgAdministrativeInfoSubByBizType(code, bizType);
		// 若集合不为空
		if (CollectionUtils.isNotEmpty(entities)) {
			// 循环车队集合
			for (OrgAdministrativeInfoEntity orgAdministrativeInfoEntity : entities) {
				// 获取组织的第一个顶级车队
				OrgAdministrativeInfoEntity topEntity = this.getTopFleetByCode(orgAdministrativeInfoEntity.getCode());
				if(null==topEntity){
					continue;
				}
				// 若得到的顶级级车队的code等于code
				if (topEntity.getCode().equals(code)) {
					infoEntities.add(orgAdministrativeInfoEntity);
				}
			}
		}
		return infoEntities;
	}

    /**
     * 
     * <p>根据部门编码获取下级指定类型的部门</p> 
     * @author foss-zhujunyong
     * @date May 17, 2013 12:06:19 PM
     * @param code
     * @param bizTypeList
     * @return
     * @see
     */
    @Override
    public List<OrgAdministrativeInfoEntity> queryOrgAdministrativeInfoSubByBizTypeList(String code, List<String> bizTypeList) {
	List<OrgAdministrativeInfoEntity> result = new ArrayList<OrgAdministrativeInfoEntity>();
	if (StringUtils.isBlank(code) || CollectionUtils.isEmpty(bizTypeList)) {
	    return result;
	}
	List<OrgAdministrativeInfoEntity> list = queryOrgAdministrativeInfoEntityAllSubByCode(code);
	if (CollectionUtils.isEmpty(list)) {
	    return result;
	}
	for (OrgAdministrativeInfoEntity entity : list) {
	    if (isOrgMatchBizType(entity, bizTypeList)){
		result.add(entity);
	    }
	}
	return result;
    }


    /**
     * 根据外场组织CODE，查询该外场的驻地派送部门对象（包含CODE）
     * 
     * 返回多个
     * 
     * @author 087584-foss-lijun
     * @date 2012-11-6 上午9:41:09
     * 
     * @param code 外场编码
     */
    @Override
    public List<SaleDepartmentEntity> queryStationDeliverOrgByOutfieldCode(String code) {
	// 检查参数
	if(StringUtils.isBlank(code)){
	    throw new OrgAdministrativeInfoException("","传入的外场部门编码为空 ，无法查询驻地派送部门实体");
	}
	SaleDepartmentEntity entityCondition = new SaleDepartmentEntity();
	// 设置 驻地营业部所属外场 的 外场编码
	entityCondition.setTransferCenter(code);
	// 设置要查询的部门为派送部（可到达）
	entityCondition.setArrive(FossConstants.YES);
	
	return saleDepartmentDao.querySaleDepartmentExactByEntity(entityCondition, NumberConstants.ZERO, Integer.MAX_VALUE);
    }
    

    /**
     * 
     * <p>根据外场部门编码，查询该外场的驻地可出发营业部对象</p> 
     * @author foss-zhujunyong
     * @date Apr 2, 2013 2:04:42 PM
     * @param code
     * @return
     * @see
     */
    @Override
    public SaleDepartmentEntity queryStationLeaveOrgByOutfieldCode(String code) {
	// 检查参数
	if(StringUtils.isBlank(code)){
	    throw new OrgAdministrativeInfoException("","传入的外场部门编码为空 ，无法查询驻地派送部门实体");
	}
	SaleDepartmentEntity entityCondition = new SaleDepartmentEntity();
	// 设置 驻地营业部所属外场 的 外场编码
	entityCondition.setTransferCenter(code);
	// 设置要查询的部门为派送部（可到达）
	entityCondition.setLeave(FossConstants.YES);
	entityCondition.setStation(FossConstants.YES);
	List<SaleDepartmentEntity> list = saleDepartmentDao.querySaleDepartmentExactByEntity(entityCondition, NumberConstants.ZERO, 1);
	return CollectionUtils.isEmpty(list) ? null : list.get(0);
    }
    

    /**
     * 根据外场组织CODE，查询该外场的驻地派送部门对象（包含CODE）
     * 
     * 返回一个
     * 
     * @author 087584-foss-lijun
     * @date 2012-11-6 上午9:41:09
     * 
     * @param code 外场编码
     */
    @Override
    public SaleDepartmentEntity queryStationDeliverOrgOneByOutfieldCode(String code) {
	// 检查参数
	if(StringUtils.isBlank(code)){
	    throw new OrgAdministrativeInfoException("","传入的外场部门编码为空 ，无法查询驻地派送部门实体");
	}
	List<SaleDepartmentEntity> entitys = this.queryStationDeliverOrgByOutfieldCode(code);
	if(CollectionUtils.isNotEmpty(entitys)){
	    return entitys.get(NumberConstants.ZERO);
	}
	return null;
    }
    
    
    
    /**
     * 下面是提供给“接送货”的方法
     */
    
    /**
     * 查询上级部门中“排单部门”，查到后，再查出外场，并返回外场对象
     * 
     * @author 087584-foss-lijun
     * @date 2012-11-23 上午9:29:35
     */
    @Override
    public OrgAdministrativeInfoEntity queryOrgAdministrativeInfoOfConnOutfieldByCode(String code) {
	// 传入的标杆编码如果为空，则不对应部门，直接返回空
	if(StringUtils.isBlank(code)){
	    return null;
	}
	
	List<String> bizTypes =new ArrayList<String>();
	bizTypes.add(BizTypeConstants.ORG_IS_DELIVER_SCHEDULE);
	OrgAdministrativeInfoEntity entity = this.queryOrgAdministrativeInfoByCode(code, bizTypes);
	if(entity != null && StringUtils.isNotBlank(entity.getDeliverOutfield())){
	    return orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeClean(entity.getDeliverOutfield());
	}
	
	return null;
    }
    /**
     * 查询上级部门中“外场”，查到后，再查出外场，并返回外场对象
     * 
     * @author 271297-foss-zhangpeng
     * @date 2015-11-16 上午9:29:35
     */
    @Override
    public OrgAdministrativeInfoEntity queryOrgAdministrativeInfoOfConnOutfieldCenterByCode(String code) {
	// 传入的标杆编码如果为空，则不对应部门，直接返回空
	if(StringUtils.isBlank(code)){
	    return null;
		}
		List<String> bizTypes = new ArrayList<String>();
		bizTypes.add(BizTypeConstants.ORG_TRANSFER_CENTER);
		OrgAdministrativeInfoEntity entity = this
				.queryOrgAdministrativeInfoByCode(code, bizTypes);
		if (entity != null) {
			String transferCenter = entity.getTransferCenter();
			if (StringUtils.equals(transferCenter, FossConstants.YES)) {
				return entity;
			} else {
				String parentOrgCode = entity.getParentOrgCode();
				if (StringUtils.isBlank(parentOrgCode)) {
					return null;
				}
				List<String> bizTypess = new ArrayList<String>();
				bizTypes.add(BizTypeConstants.ORG_TRANSFER_CENTER);
				OrgAdministrativeInfoEntity eentity = this
						.queryOrgAdministrativeInfoByCode(code, bizTypess);
				if (eentity != null) {
					String transferCenterr = entity.getTransferCenter();
					if (StringUtils.equals(transferCenterr, FossConstants.YES)) {
						return eentity;
					}
					return null;
				}
			}
		}
		return null;
	}

    /**
     * 
     * <p>查找指定部门的上级第一个顶级车队，然后找该顶级车队下属的所有有集中接送货属性的车队的部门编码集合</p> 
     * @author foss-zhujunyong
     * @date Mar 29, 2013 1:14:11 PM
     * @param code
     * @return
     * @see
     */
    @Override
    public List<String> queryDeptCodeListFromTopFleetByCode(String code) {
	List<String> result = new ArrayList<String>();
	// 检查参数
	if (StringUtils.isBlank(code)) {
	    return result;
	}
	// 查询顶级车队
	OrgAdministrativeInfoEntity org = getTopFleetByCode(code);
	// 如果没有顶级车队则直接返回
	if (org == null || StringUtils.isBlank(org.getCode())) {
	    return result;
	}
	return queryTransTeamDeptCodeListByCode(org.getCode(), null);
    }
    
    /**
     * 
     * <p>查找指定多个部门的上级第一个顶级车队，然后找该顶级车队下属的所有有"车队调度组"属性的部门编码集合</p> 
     * @author foss-zhujunyong
     * @date Jun 26, 2013 5:45:25 PM
     * @param codeList
     * @return
     * @see
     */
    @Override
    public List<String> queryDispatchTeamDeptCodeListFromTopFleetByCodeList(List<String> codeList) {
	List<String> result = new ArrayList<String>();
	// 检查参数
	if (CollectionUtils.isEmpty(codeList)) {
	    return result;
	}
	List<String> topList = new ArrayList<String> ();
	// 查询顶级车队
	for (String code : codeList) {
		//313353 空指针异常修复
		if(null == code){
			continue;
		}
	    OrgAdministrativeInfoEntity org = getTopFleetByCode(code);
	    // 如果没有顶级车队则直接返回
	    if (org == null || StringUtils.isBlank(org.getCode())) {
		continue;
	    }
	    // 如果有，则加到列表中
	    if (!topList.contains(org.getCode())) {
		topList.add(org.getCode());
	    }
	}
	if(CollectionUtils.isNotEmpty(codeList)){
		for (String code : topList) {
			result.addAll(queryDispatchTeamDeptCodeListByCode(code));
		}
	}
	return result;
    }
    
    
    /**
     * 
     * <p>查找指定部门下属的所有车队调度组的部门编码集合</p> 
     * @author foss-zhujunyong
     * @date Mar 29, 2013 1:14:11 PM
     * @param code
     * @return
     * @see
     */
    @Override
    public List<String> queryDispatchTeamDeptCodeListByCode(String code) {
	List<String> result = new ArrayList<String>();
	// 检查参数
	if (StringUtils.isBlank(code)) {
	    return result;
	}
	// 查找所有的下属部门
	List<OrgAdministrativeInfoEntity> orgs = queryOrgAdministrativeInfoEntityAllSubByCode(code);
	// 如果没有下属部门，直接返回
	if (CollectionUtils.isEmpty(orgs)) {
	    return result;
	}
	// 过滤下属部门中有车队调度组属性的组织
	for (OrgAdministrativeInfoEntity entity : orgs) {
	    // 找符合条件的车队调度组，放入返回list
	    if (entity != null && StringUtils.equals(FossConstants.YES, entity.getDispatchTeam())) {
		result.add(entity.getCode());
	    }
	}
	// 返回顶级车队下所有具备集中接送货组属性的部门编码列表
	return result;
    }
    
    
    /**
     * 
     * <p>查找指定部门下属的所有有集中接送货属性的车队的部门编码集合</p> 
     * @author foss-zhujunyong
     * @date Mar 29, 2013 1:14:11 PM
     * @param code
     * @return
     * @see
     */
    @Override
    public List<String> queryDeptCodeListByCode(String code, List<String> fleetTypeList) {
	List<String> result = new ArrayList<String>();
	// 检查参数
	if (StringUtils.isBlank(code)) {
	    return result;
	}
	// 查找所有的下属部门
	List<OrgAdministrativeInfoEntity> orgs = queryOrgAdministrativeInfoEntityAllSubByCode(code);
	// 如果没有下属部门，直接返回
	if (CollectionUtils.isEmpty(orgs)) {
	    return result;
	}
	// 过滤下属部门中有集中接送货属性的车队
	for (OrgAdministrativeInfoEntity entity : orgs) {
	    // 如果部门不是车队则跳过
	    if (entity == null) {
//		if (entity == null || !StringUtils.equals(FossConstants.YES, entity.getTransDepartment())) {
		continue;
	    }
	    // 则查看车队属性中是否支持集中接送货
	    MotorcadeEntity moto = motorcadeService.queryMotorcadeByCodeClean(entity.getCode());
	    if (moto != null && StringUtils.equals(FossConstants.YES, moto.getService()) 
		    && (CollectionUtils.isEmpty(fleetTypeList) || fleetTypeList.contains(moto.getFleetType()))) {
		result.add(entity.getCode());
	    }
	}
	// 返回顶级车队下所有具备集中接送货属性的部门编码列表
	return result;
    }
    

    /**
     * 
     * <p>查找指定部门下属的所有有集中接送货小组属性的车队组的部门编码集合</p> 
     * @author foss-zhujunyong
     * @date Mar 29, 2013 1:14:11 PM
     * @param code
     * @return
     * @see
     */
    @Override
    public List<String> queryTransTeamDeptCodeListByCode(String code, List<String> fleetTypeList) {
	List<String> result = new ArrayList<String>();
	// 检查参数
	if (StringUtils.isBlank(code)) {
	    return result;
	}
	// 查找所有的下属部门
	List<OrgAdministrativeInfoEntity> orgs = queryOrgAdministrativeInfoEntityAllSubByCode(code);
	// 如果没有下属部门，直接返回
	if (CollectionUtils.isEmpty(orgs)) {
	    return result;
	}
	// 过滤下属部门中有集中接送货属性的车队组
	for (OrgAdministrativeInfoEntity entity : orgs) {
	    // 如果部门不是车队组则跳过
	    if (entity == null || !StringUtils.equals(FossConstants.YES, entity.getTransTeam())) {
		continue;
	    }
	    // 如果部门是车队，则查看车队组属性中是否支持集中接送货组
	    MotorcadeEntity moto = motorcadeService.queryMotorcadeByCodeClean(entity.getCode());
	    if (moto != null && StringUtils.equals(FossConstants.YES, moto.getServiceTeam()) 
		    && (CollectionUtils.isEmpty(fleetTypeList) || fleetTypeList.contains(moto.getFleetType()))) {
		result.add(entity.getCode());
	    }
	}
	// 返回顶级车队下所有具备集中接送货组属性的部门编码列表
	return result;
    }
    
    /**
     * 
     * <p>根据传入的部门编码找到对应的车队部门编码列表</p>
     * 传入为营业部部门编码时，通过营业部与车队的关系，找对应的车队编码列表
     * 传入为外场部门编码时，通过外场所属车队，找对应的一个车队编码
     *  
     * @author foss-zhujunyong
     * @date Apr 10, 2013 4:03:14 PM
     * @param code
     * @return
     * @see
     */
    @Override
    public List<String> queryMotorcadeCodeListByOrgCode(String code) {
	List<String> result = new ArrayList<String> ();
	// 检查参数
	if (StringUtils.isBlank(code)) {
	    return result;
	}
	// 找到组织实体
	OrgAdministrativeInfoEntity org = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeClean(code);
	if (org == null) {
	    return result;
	}
	// 如果是营业部
	if (org.checkSaleDepartment()) {
	    List<String> motoList = salesMotorcadeService.querySalesMotorcadeListBySales(code);
	    result.addAll(motoList);
	    return result;
	}
	
	// 如果不是营业部，则取所有顶级车队 
	// ISSUE-2946 转运场（外场属性）的部门需配置多个对应的顶级车队
	List<MotorcadeEntity> list = motorcadeService.queryTopFleetList(null);
	if (CollectionUtils.isEmpty(list)) {
	    return result;
	}
	for (MotorcadeEntity entity : list) {
	    if (entity != null && StringUtils.isNotBlank(entity.getCode())) {
		result.add(entity.getCode());
	    }
	}
	
	

//	// 如果也不是外场, 就取它的上级部门中的外场
//	if (!org.checkTransferCenter()) {
//	    List<String> bizTypes = new ArrayList<String> ();
//	    bizTypes.add(BizTypeConstants.ORG_TRANSFER_CENTER);
//	    org = queryOrgAdministrativeInfoByCode(code, bizTypes);
//	    if (org == null || StringUtils.isBlank(org.getCode())) {
//		return result;
//	    }
//	    code = org.getCode();
//	}
//	
//	// 如果是外场
//	if (org.checkTransferCenter()) {
//	    OutfieldEntity entity = outfieldService.querySimpleOutfieldByOrgCode(code);
//	    if (entity != null && StringUtils.isNotBlank(entity.getMotorcadeCode())) {
//		result.add(entity.getMotorcadeCode());
//	    }
//	    return result;
//	}
	
	return result;
	
    }

    
    /**
     * 
     * <p>根据传入的部门编码找到对应的车队部门编码列表</p>
     * 
     * 传入为营业部部门编码时，通过营业部与车队的关系，找对应的车队编码列表
     * 传入为外场部门编码时，通过外场所属车队，找对应的一个车队编码
     * 
     * 找对应的顶级车队下的所有部门（各个部门均可能下挂车辆）
     *  
     * @author foss-zhujunyong
     * @date Apr 10, 2013 4:03:14 PM
     * @param code
     * @return
     * @see
     */
    @Override
    public List<String> queryMotorcadeOwnerCodeListByOrgCode(String code) {
	List<String> result = new ArrayList<String> ();
	// 检查参数
	if (StringUtils.isBlank(code)) {
	    return result;
	}
	// 找到组织实体
	OrgAdministrativeInfoEntity org = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeClean(code);
	if (org == null) {
	    return result;
	}
	// 如果是营业部
	if (org.checkSaleDepartment()) {
	    List<String> motoList = salesMotorcadeService.querySalesMotorcadeListBySales(code);
	    result.addAll(querySubCodeList(motoList));
	    return result;
	}
	
	// 如果不是营业部，则取所有顶级车队 
	// ISSUE-2946 转运场（外场属性）的部门需配置多个对应的顶级车队
	List<MotorcadeEntity> list = motorcadeService.queryTopFleetList(null);
	if (CollectionUtils.isEmpty(list)) {
	    return result;
	}
	for (MotorcadeEntity entity : list) {
	    if (entity != null && StringUtils.isNotBlank(entity.getCode())) {
		result.add(entity.getCode());
	    }
	}
	Set<String> set = querySubCodeList(result);
	result.clear();
	result.addAll(set);
	return result;
	
    }
    
    /**
     * 
     * <p>查找所传组织编码列表下的所有组织编码列表</p> 
     * @author foss-zhujunyong
     * @date May 30, 2013 6:32:46 PM
     * @param codes
     * @return
     * @see
     */
    private Set<String> querySubCodeList(List<String> codes) {
	Set<String> result = new HashSet<String> ();
	if (CollectionUtils.isEmpty(codes)) {
	    return result;
	}
	
	for (String code : codes) {
	    if (StringUtils.isBlank(code)) {
		continue;
	    }
	    List<OrgAdministrativeInfoEntity> entitys = queryOrgAdministrativeInfoEntityAllSubByCode(code);
	    if (CollectionUtils.isEmpty(entitys)) {
		continue;
	    }
	    for (OrgAdministrativeInfoEntity entity : entitys) {
		if (entity != null && StringUtils.isNotBlank(entity.getCode())) {
		    result.add(entity.getCode());
		}
	    }
	}
	return result;
    }
    /**
     * 根据部门编码获取上级指定类型的部门。
     * 
     * 
    bizTypes请看BizTypeConstants类，目前包括：    
    ORG_TRANS_DEPARTMENT="TRANS_DEPARTMENT";
    ORG_TRANSFER_CENTER="TRANSFER_CENTER";
    ORG_AIR_DISPATCH="AIR_DISPATCH";
    ORG_DIVISION="DIVISION";
    ORG_BIG_REGION="BIG_REGION";
    ORG_SMALL_REGION="SMALL_REGION";
    ORG_SALES_DEPARTMENT="SALES_DEPARTMENT";
    ORG_TRANS_TEAM="TRANS_TEAM";
    ORG_IS_DELIVER_SCHEDULE="IS_DELIVER_SCHEDULE";
    ORG_DISPATCH_TEAM="DISPATCH_TEAM";
     * OrgAdministrativeInfoException
     * @author 087584-foss-zhangjiheng
     * @date 2012-11-6 上午9:41:09
     */
    @Override
    public List<OrgAdministrativeInfoEntity> queryOrgAdministrativeInfoUpByBizType(String code, String bizType) {
	// 检查参数
	if(StringUtils.isBlank(code) || StringUtils.isBlank(bizType)){
	    throw new OrgAdministrativeInfoException("","code和bizType均不能为空");
	}
	if(!(StringUtils.equals(BizTypeConstants.ORG_TRANS_DEPARTMENT, bizType)
		||StringUtils.equals(BizTypeConstants.ORG_TRANSFER_CENTER, bizType)
		||StringUtils.equals(BizTypeConstants.ORG_AIR_DISPATCH, bizType)
		||StringUtils.equals(BizTypeConstants.ORG_DIVISION, bizType)
		||StringUtils.equals(BizTypeConstants.ORG_BIG_REGION, bizType)
		||StringUtils.equals(BizTypeConstants.ORG_SMALL_REGION, bizType)
		||StringUtils.equals(BizTypeConstants.ORG_SALES_DEPARTMENT, bizType)
		||StringUtils.equals(BizTypeConstants.ORG_TRANS_TEAM, bizType)
		||StringUtils.equals(BizTypeConstants.ORG_IS_DELIVER_SCHEDULE, bizType)
		||StringUtils.equals(BizTypeConstants.ORG_DISPATCH_TEAM, bizType)
		||StringUtils.equals(BizTypeConstants.EXPRESS_BIG_REGION, bizType)
		||StringUtils.equals(BizTypeConstants.EXPRESS_SALES_DEPARTMENT, bizType)
		||StringUtils.equals(BizTypeConstants.EXPRESS_PART, bizType)
		)){
	    throw new OrgAdministrativeInfoException("","暂不支持的业务类型，或者业务类型已经更改，请将业务类型与表BSE.T_BAS_ORG中的列比对，判断列是否存在");
	}
	return orgAdministrativeInfoComplexDao.queryOrgAdministrativeInfoUpByBizType(code, bizType);
    }
    
    /**
	 * 获取某用户所属快递大区的所有虚拟营业部
	 * 
	 * @author  WangPeng
	 * @Date    2013-7-26 下午2:08:31
	 * @param code 部门编码
	 * @param isActive 查询是否有效组织 
	 * @return：List<OrgAdministrativeInfoEntity>
	 * 
	 */
	public List<OrgAdministrativeInfoEntity> queryExpressSalesDepartmentByDeptCode(String code) {
		if(StringUtils.isEmpty(code)){
			throw new OrgAdministrativeInfoException("部门编码为空");
		}
		//向上查询该部门所属的快递大区
		List<OrgAdministrativeInfoEntity>  expressBigRegionList = this.queryOrgAdministrativeInfoUpByBizType(code, BizTypeConstants.EXPRESS_BIG_REGION);
		OrgAdministrativeInfoEntity orgInfo = new OrgAdministrativeInfoEntity();
		if(CollectionUtils.isNotEmpty(expressBigRegionList)){
			//获取快递大区
			orgInfo = expressBigRegionList.get(0);
		}else{
			throw new OrgAdministrativeInfoException("该部门没有对应的快递大区");
		}
		//313353 sonar优化
//		expressBigRegionList.removeAll(expressBigRegionList);
		expressBigRegionList.clear();
		
		//向下获取该快递大区下面所有的虚拟营业部
		if(CollectionUtils.isEmpty(expressBigRegionList)){
			expressBigRegionList = this.queryOrgAdministrativeInfoSubByBizType(orgInfo.getCode(), BizTypeConstants.EXPRESS_SALES_DEPARTMENT);
		}
		
 		return expressBigRegionList;
	}

	/**
	 * 根据外场编码查询所对应的虚拟营业部
	 * 
	 * @author  WangPeng
	 * @Date    2013-8-15 上午10:47:27
	 * @param   codeList
	 * @return  List<OrgAdministrativeInfoEntity>
	 * ：
	 *
	 */
	public List<OrgAdministrativeInfoEntity> queryExpressSalesDepartmentByTransCenterCode(List<String> codeList) {
		if(CollectionUtils.isEmpty(codeList)){
			return null;
		}
		return orgAdministrativeInfoComplexDao.queryExpressSalesDepartmentByTransCenterCode(codeList);
	}

	/**
	 * 根据编码查询快递点部
	 */
	@Override
	public List<String> queryExpressExpressPartByDeptCode(String empCode) {
		 
		return orgAdministrativeInfoComplexDao.queryExpressExpressPartByDeptCode(empCode);
	}
	
	/**
	 * 
	 */
	@Override
	public List<OrgAdministrativeInfoEntity> queryOrgAdministrativeInfoEntityAllUpNOCache(
			String code) {
		List<OrgAdministrativeInfoEntity> result = new ArrayList<OrgAdministrativeInfoEntity>();
		// 妫�煡鍙傛暟
		if(StringUtils.isBlank(code)){
		    return result;
		}
		OrgAdministrativeInfoEntity org = null;
		int i = 0;
		do {
		    org = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeNoCache(code);
		    if (org == null) {
			break;
		    }    
		    result.add(org);
		    code = org.getParentOrgCode();
		    i++;
		} while (StringUtils.isNotBlank(code) && i <= SysCtrlConstants.ORG_QUERY_RECURRENCE_NUM_MORE);
		return result;
	}

	/**
     * 根据名称查询组织表
     * @author 332219-foss
     */
    @Override
    public OrgAdministrativeInfoEntity queryOrgAdministrationInfoByName(String name) {
		OrgAdministrativeInfoEntity entity = orgAdministrativeInfoDao.queryOrgAdministrationInfoByName(name);
		return entity;
	}
}
