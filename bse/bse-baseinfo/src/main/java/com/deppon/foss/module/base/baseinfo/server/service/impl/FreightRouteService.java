/**
 * Copyright 2013 BSE TEAM
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *    http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * PROJECT NAME	: bse-baseinfo
 * 
 * FILE PATH        	: src/main/java/com/deppon/foss/module/base/baseinfo/server/service/impl/FreightRouteService.java
 * 
 * FILE NAME        	: FreightRouteService.java
 * 
 * AUTHOR			: FOSS综合管理开发组
 * 
 * HOME PAGE		:  http://www.deppon.com
 * 
 * COPYRIGHT		: Copyright (c) 2013  Deppon All Rights Reserved.
 
 *
 * Copyright by Deppon and the original author or authors.
 * 
 * This document only allow internal use ,Any of your behaviors using the file
 * not internal will pay legal responsibility.
 *
 * You may learn more information about Deppon from
 *
 *      http://www.deppon.com
 *
 */ 

/**


dp-foss-综合管理系统用例-新增_修改_作废_查询始发线路-v1.04

修订记录 	
日期 	修订内容 	修订人员 	版本号 
2012-6-15	新增	谢艳涛	V0.1
2012-6-19	根据王偕旭点评修改	谢艳涛	V0.2
2012-6-28	根据赵鹏点评修改： “准点到达时间”采用T+1的格式进行表示；增加一些业务规则	谢艳涛	V0.2
2012-6-30	根据王偕旭要求添加：“线路简码”、“管理车队”等属性	谢艳涛	V0.3
2012-7-2	提交CITA审核	谢艳涛	V0.5
2012-7-23	根据评审会议评委意见修改：“线路名称”改为自动生成，修订生成业务规则	谢艳涛	V0.6
2012-8-2	通过业务部门审核签字版本升级到V0.9	谢艳涛	V0.9
2012-10-12	根据变更需求修改：在图二界面中添加“是否默认始发线路”字段及单选按钮；去掉规则SR5中“精确查询”	谢艳涛	V1.01
2012-10-16	根据变更需求增加导出功能：在图一界面增加“导出”按钮	谢艳涛	V1.02
2012-12-01	根据变更需求把发车标准“班次”自动生成改为自行维护	谢艳涛	V1.03
2012-12-11	根据变更需求修改发车标准，增加“时效类型”：普车、卡车两种	谢艳涛	V1.04

1.	SUC-284-新增_修改_作废_查询始发线路
1.1	相关业务用例
BUC_FOSS_5.20.30_530 开单收货
BUC_FOSS_5.20.20_520 接货运单开单
1.2	用例描述
始发线路即经营到运作的线路，主要用于查询营业部的始发配载部门，便于收货开单使用。本用例主要用于对始发线路（经营到运作的线路）基础资料维护，包括新增、修改、作废、查询操作。
1.3	用例条件
条件类型	描述	引用系统用例
前置条件	1、	行政组织基础资料完备
2、	行政区域基础资料完备	SUC-33 DP-FOSS-综合管理系统用例-新增_修改_作废_查询行政区域
SUC-85 DP-FOSS-综合管理系统用例-修改_查询行政组织业务属性

后置条件	1、	为SUC-486 生成运单系统用例提供始发线路基础资料查询	SUC-486 生成运单

1.4	操作用户角色
操作用户	描述
线路维护人员	线路维护人员对始发线路进行新增，修改，作废，查询操作。
1.5	界面要求
1.5.1	表现方式
Web页面
1.5.2	界面原型-主界面
 
 
图一：始发线路主界面
1.5.3	界面描述-主界面
1.	功能按钮区域
1)	新增按钮：点击新增按钮进入新增界面，参见【图二：新增/修改始发线路】。
2)	导出按钮：点击导出按钮，可以导出始发线路的所有数据至Excel表中
3)	查询按钮：输入查询条件，点击查询按钮，系统返回查询结果，刷新查询列表。
4)	重置按钮：点击重置按钮，清空查询条件。
5)	作废按钮：选中列表中一行或多行记录，点击作废按钮，选中的记录被作废；或点击各行的作废图标，作废各行记录，作废时连同作废该线路对应的发车标准，需要弹出确认提示框。
6)	查看详细信息：鼠标移动到列表中某一条记录，双击该行记录，弹出一个窗口，可以查看该记录的详细信息。
7)	修改按钮：点击各行的修改按钮，进入修改界面，参见【图二：新增/修改始发线路】。
8)	分页按钮：实现分页功能。
2.	列表区域
1)	列表区域默认不显示，点击查询按钮，根据查询条件显示列表数据。
2)	列表中显示：线路名称、始发站、到达站、始发城市、运输类型、是否默认始发线路。
3.	字段输入区域
1)	查询条件包括线路名称、始发站、到达站、始发城市、运输类型、管理车队、线路简码。
1.1	线路名称：文本，支持模糊查询
1.2	始发站：选择框，支持手动输入模糊查询，也支持从行政组织（营业部）基础资料中选取
1.3	到达站：选择框，支持手动输入模糊查询，也支持从行政组织（外场、空运总调）基础资料中选取
1.4	始发城市：选择框，支持手动输入模糊查询，也支持从行政区域（城市）基础资料中选取
1.5	运输类型：下拉框，默认为全部，包括：全部、汽运、空运
1.6	管理车队：选择框，支持手动输入模糊查询，也支持从行政组织（车队）基础资料中选取
1.7	线路简码：文本，支持模糊查询

1.5.4	界面原型-新增/修改始发线路
  
图二：新增/修改始发线路
1.5.5	界面描述-新增和修改始发线路
1.	字段输入区域
1)	线路名称： 自动生成，生成规则：根据所选“始发站”和“到达站”动态生成,如：生成线路名称为XXX营业部-XXX外场 
2)	线路简码：必填，文本，线路简码必须唯一
3)	管理车队：必填，选择框，从行政组织（车队）基础资料中选取
4)	运输类型：必填，下拉框，包含汽运、空运
5)	始发站：必填，选择框，从行政组织（营业部）基础资料中选取
6)	始发城市：与“始发站”联动获取，只读
7)	到达站：必填，选择框，从行政组织（外场、空运总调）基础资料中选取
8)	是否默认始发线路：必填，单选按钮，是或否
9)	线路距离（公里）：必填，数字
10)	备注：选填，文本
2．	 发车标准列表区域
1)          列表中显示：班次、准点出发时间、准点到达时间、时效类型、备注。
3.   功能按钮区域
1)	保存按钮：点击保存按钮，需要提示用户是否保存成功，若保存成功，关闭当前界面，返回主界面；若保存失败，提示用户保存失败以及失败原因，不关闭当前界面。
2)	重置按钮：点击重置按钮，回到当前界面的初始状态。
3)	取消按钮：点击取消按钮，退出当前界面，返回主界面。
4)	新增发车标准按钮：点击新增发车标准按钮，先判断始发线路信息是否已经保存，如果信息还未保存，弹出提醒框，提醒需要保存线路信息才能新增发车标准；如果信息已经保存成功，则弹出【图三：新增和修改发车标准】界面，进行新增操作，详细步骤参见【新增发车标准操作步骤】。
5)	修改按钮：点击修改按钮，先判断线路信息是否已做修改，如果线路信息已做修改，弹出提醒框，提醒先保存线路信息才能修改发车标准，详细步骤参见【修改发车标准操作步骤】；
6)	作废按钮：点击作废按钮，先判断线路信息是否已做修改，如果线路信息已做修改，弹出提醒框，提醒先保存线路信息才能作废发车标准，详细步骤参见【作废发车标准操作步骤】。
7)	查看详细信息：鼠标移动到列表中某一条记录，双击该行记录，弹出一个窗口，可以查看该记录的详细信息。
1.5.6	界面原型-新增/修改发车标准
  
    图三：新增和修改发车标准
1.5.7	界面描述-新增/修改发车标准
1、字段输入区域
1)	班次： 数字，用户自行维护，自然数自动生成，同一条线路上班次从1开始，按照准点出发时间顺序排序。
2)	准点出发时间：必填，时间格式：08:00,09:30等
3)	始发站：自动带出
4)	准点到达时间：必填，采用T+1格式，T是指时间，如：00:30；+1天是指当天时间加1天，如：00:30+1，表示第二天的00:30；XX天用下拉框表示，如果为0天，默认为当天时间，如：22:00+0天，用22:00表示。
5)	到达站：自动带出
5)6)	时效类型：下拉框，包括：普车、卡车两种时效类型；
6)7)	备注：选填
       2、功能按钮区域
              1)          保存按钮：点击保存按钮，需要提示用户是否保存成功，若保存成功，关闭弹出窗口，返回到【图二：新增/修改始发线路】；若保存失败，提示用户保存失败以及失败原因，不关闭弹出窗口。
   2)          重置按钮：点击重置按钮，回到当前界面的初始状态。
 3)          取消按钮：点击取消按钮，关闭当前界面，返回到【图二：新增/修改始发线路】界面。
1.6	操作步骤
1.6.1	添加始发线路操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入始发线路管理主界面	【始发线路列表信息】	
2	点击新增按钮，进入【图二：新增/修改始发线路】界面		
3	输入始发线路详细信息和相关发车标准信息，点击保存。
参见业务规则SR-1、SR-2、SR-3、SR-6、SR-7	【始发线路新增/修改信息】【发车标准列表信息】【发车标准信息】	
4	返回始发线路管理主界面		

序号	扩展事件	相关数据	备注
3a	点击取消按钮，退出当前界面，返回主界面		
3b	若保存失败，需提示用户保存失败以及失败原因，继续停留在新增界面		

1.6.2	修改始发线路操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入始发线路管理主界面	【始发线路列表信息】	
2	点击修改按钮，进入【图二：新增/修改始发线路】界面		
3	修改始发线路详细信息和发车标准信息,点击保存
参见业务规则SR-1、SR-2、SR-3、SR-6、SR-7	【始发线路新增/修改信息】【发车标准列表信息】【发车标准信息】	
4	返回始发线路管理主界面		

序号	扩展事件	相关数据	备注
3a	点击取消按钮，退出当前界面，返回主界面		
3b	若保存失败，需提示用户保存失败以及失败原因，继续停留在修改界面		

1.6.3	作废始发线路操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入始发线路管理主界面	【始发线路列表信息】	
2	选择一行或者多行记录，点击作废按钮。		作废时连同作废该线路对应的发车标准，弹出确认对话框。
3	点击确定按钮。		

序号	扩展事件	相关数据	备注
2a	点击取消按钮，退出当前界面，返回主界面		
2b	若作废失败，需提示用户作废失败以及失败原因		

1.6.4	查询始发线路操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入始发线路管理主界面	【始发线路列表信息】	
2	输入查询条件，点击查询按钮。参见业务规则SR-5	【始发线路查询条件】	系统返回查询结果

1.6.5	新增发车标准操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入【图二：新增/修改始发线路】界面	【始发线路新增/修改信息】【发车标准列表信息】	
2	点击新增发车标准按钮，先判断始发线路信息是否保存，若已保存，弹出【图二：新增/修改发车标准】界面；若未保存，先保存始发线路信息，再点击新增发车标准按钮。		
3	输入发车标准详细信息，点击保存。
参见业务规则SR-1、SR-2、SR-4、SR-8	【发车标准信息】	
4	返回【图二：新增/修改始发线路】界面		

序号	扩展事件	相关数据	备注
3a	点击取消按钮，关闭当前界面，返回【图二：新增/修改始发线路】界面		
3b	若保存失败，需提示用户保存失败以及失败原因，继续停留在新增界面		

1.6.6	修改发车标准操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入【图二：新增/修改始发线路】界面	【始发线路新增/修改信息】【发车标准列表信息】	
2	点击修改发车标准按钮，先判断始发线路信息是否修改，若未修改，弹出【图二：新增/修改发车标准】界面；若已修改，先保存始发线路信息，再点击修改发车标准按钮。		
3	输入发车标准详细信息，点击保存。
参见业务规则SR-1、SR-2、SR-4、SR-8	【发车标准信息】	
4	返回【图二：新增/修改始发线路】界面		

序号	扩展事件	相关数据	备注
3a	点击取消按钮，关闭当前界面，返回【图二：新增/修改始发线路】界面		
3b	若保存失败，需提示用户保存失败以及失败原因，继续停留在修改界面		

1.6.7	作废发车标准操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入【图二：新增/修改始发线路】界面	【【始发线路新增/修改信息】【发车标准列表信息】	
2	选择一行记录，点击作废按钮。		弹出确认对话框。
3	点击确定按钮。		

序号	扩展事件	相关数据	备注
2a	点击取消按钮，退出当前界面，返回主界面		
2b	若作废失败，需提示用户作废失败以及失败原因		

1.7	业务规则
序号	描述
SR-1	“始发站”不支持手动输入，只支持从行政组织（营业部）基础资料中选取； 
SR-2	“到达站”不支持手动输入，只支持从行政组织（外场、空运总调）基础资料中选取；若运输类型为“汽运”，则到达部门只能是外场，若运输类型为“空运”，则到达部门可以是外场或空运总调。
SR-3	“始发城市”与“始发站”联动获取，只读。
SR-4	时间通过“时间控件”选取，格式：08:00,09:30;“准点到达时间”采用T+1格式，T是指时间，如：00:30；+1天是指当天时间加1天，如：00:30+1，表示第二天的00:30；XX天用下拉框表示，如果为0天，默认为当天时间，如：22:00+0天，用22:00表示
SR-5	查询都支持模糊查询，条件：“始发站”支持手动输入，也支持从行政组织（营业部）基础资料中选取；“到达站”支持手动输入，也支持从行政组织（外场、空运总调）基础资料中选取；“始发城市”支持手动输入，也支持从行政区域（城市）基础资料中选取；“运输类型”默认为全部，包含：汽运、空运、全部。
SR-6	新增和修改页面， “线路简码”不能重复，必须唯一；“线路名称”自动生成，根据所选“始发站”和“到达站”动态生成线路名称，如：广州东平营业部-广州外场
SR-7	新增和修改页面，对于一个“始发站”，只有一个默认配载的“到达站”
SR-8	新增和修改发车标准页面，“班次”为自然数，用户自行维护自动生成，同一条线路上班次从1开始，按照准点出发时间顺序排序； “始发站”自动带出;“到达站”自动带出

1.8	数据元素
1.8.1	始发线路新增/修改信息
字段名称 	说明 	输入限制	输入项提示文本	长度	是否必填	备注
线路名称	线路名称	文本		50	是	
线路简码	线路简码，大写字母表示如：白云区均禾营业部-广州外场 简码为：SFQG，SF表示“始发”	文本		10	是	建议用4个大写英文字母表示
管理车队	线路所属车队名称	选择框		50	是	
运输类型	运输类型,包括:汽运、空运	下拉框		10	是	
始发站	始发站名称，从行政组织（营业部）基础资料中选取	选择框		50	是	
始发城市	始发站所在的城市名称，只读，与“始发站”联动获取	只读		20	是	
到达站	到达站名称，从行政组织（外场、空运总调、上海虹桥营业部）基础资料中选取	选择框		50	是	
是否默认始发线路	是否默认始发线路	单选框		2	是	
线路距离（公里）	始发站与到达站之间的距离，单位：公里	数字		6	是	
备注	备注	文本		100	否	
1.8.2	始发线路列表信息
字段名称 	说明 	输入限制	长度	是否必填	备注
线路名称	线路名称	N/A	50	N/A	
线路简码	线路简码，大写字母表示如：白云区均禾营业部-广州外场 简码为：SFQG，SF表示“始发”	N/A	10	N/A	
始发站	始发站名称	N/A	50	N/A	
始发城市	始发站所在的城市名称	N/A	20	N/A	
到达站	到达站名称	N/A	50	N/A	
运输类型	运输类型,包括:汽运、空运	N/A	20	N/A	
管理车队	线路所属车队名称	N/A	50	N/A	
是否默认始发线路	是否默认始发线路	N/A	10	N/A	
1.8.3	始发线路查询条件
字段名称 	说明 	输入限制	长度	是否必填	备注
线路名称	线路名称	文本	50	否	
始发站	始发站名称，支持手动输入，也支持从行政组织（营业部）基础资料中选取	文本	50	否	
到达站	到达站名称，支持手动输入、也支持从行政组织（外场、空运总调、上海虹桥营业部）基础资料中选取	文本	50	否	
始发城市	始发站所在的城市名称，支持手动输入，也支持从行政区域（城市）基础资料中选取	文本	20	否	
运输类型	运输类型,包括:汽运、空运、全部	下拉框	10	默认为全部	
管理车队	线路所属车队名称	选择框	50	否	
线路简码	线路简码，大写字母表示如：白云区均禾营业部-广州外场 简码为：SFQG，SF表示“始发”	文本框	10	否	
1.8.4	发车标准列表信息
字段名称 	说明 	输入限制	长度	是否必填	备注
班次	线路班次	N/A	2	N/A	自然数，用户自行维护同一条线路上班次从1开始，按照准点出发时间顺序排序
准点发车时间	准点发车时间，格式：08:00,09:30	N/A	20	N/A	
准点到达时间	准点到达时间，采用T+1格式，T是指时间，如：00:30；1是指当天时间加1天，如：00:30+1，表示第二天的00:30; XX天用下拉框表示，如果为0天，默认为当天时间，如：22:00+0天，用22:00表示。	N/A	20	N/A	
时效类型	时效类型：包括普车、卡车两种				
备注	文本	N/A	100	N/A	
1.8.5	发车标准信息
字段名称 	说明 	输入限制	长度	是否必填	备注
班次	线路班次	N/A	2	N/A	自然数，用户自行维护同一条线路上班次从1开始，按照准点出发时间顺序排序
准点发车时间	准点发车时间，从日期控件中选择，控件格式：08:00,09:30	选择框	20	是	
始发站	始发站名称，自动带出 	N/A	50	N/A	
准点到达时间	准点到达时间，采用T+1格式，T是指时间，如：00:30；1是指当天时间加1天，如：00:30+1，表示第二天的00:30; XX天用下拉框表示，如果为0天，默认为当天时间，如：22:00+0天，用22:00表示。	选择框	20	是	
到达站	到达站名称，自动带出 	N/A	50	N/A	
时效类型	时效类型：包括普车、卡车两种	下拉框		是	
备注	备注	文本	200	否	

1.9	非功能性需求
使用量	
2012年全网估计用户数	
响应要求（如果与全系统要求 不一致的话）	
使用时间段	
高峰使用时间段	

1.10	接口描述
接口名称 	对方系统（外部系统或内部其他模块）	接口描述
		



dp-foss-综合管理系统用例-新增_修改_作废_查询运作到运作线路信息-v1.05
修订记录 
日期 	修订内容 	修订人员 	版本号 
2012-5-30	新增   	谢艳涛	V0.1
2012-6-18	根据王偕旭点评修改，并改名为”运作到运作线路信息”	谢艳涛	V0.2
2012-6-30	根据赵鹏点评修改：增加“线路简码”、“管理车队”以及一些业务规则	谢艳涛	V0.3
2012-7-2	根据王偕旭要求修改	谢艳涛	V0.4
2012-7-2	提交CITA审核	谢艳涛	V0.5
2012-7-9	根据评审会议评委向彪意见修改：线路“普车时效”、“卡车时效”修改成可配置	谢艳涛	V0.6
2012-8-2	通过业务部门审核签字版本升级到V0.9	谢艳涛	V0.9
2012-10-16	根据变更需求增加导出功能：在图一界面增加“导出”按钮	谢艳涛	V1.01
2012-11-27	根据变更需求修改业务规则SR-1、SR-2	谢艳涛	V1.02
2012-12-01	根据变更需求把发车标准“班次”自动生成改为自行维护	谢艳涛	V1.03
2012-12-11	根据变更需求发车标准上增加：“时效类型”：卡车、普车	谢艳涛	V1.04
2012-12-29	根据变更需求在新增/修改线路界面增加“生效/失效”按钮，在点击生效按钮对业务规则SR-10在后台进行验证；增加业务规则SR-13;	谢艳涛	V1.05

1.	SUC-218-新增_修改_作废_查询运作到运作线路信息
1.1	相关业务用例
BUC_FOSS_5.20.30_530 开单收货
BUC_FOSS_5.10.20_060 制定班车发车计划
BUC_FOSS_5.10.20_020制定长途发车计划
BUC_FOSS_5.10.20_010 预测货量
BUC_FOSS_5.10.20_090 确定班车发车计划
BUC_FOSS_5.10.20_065 排班（短途班车）
BUC_FOSS_5.10.20_022 调整走货线路
1.2	用例描述
运作到运作线路主要用于货量预测、发车计划制定、排班以及调整走货线路等。本用例用于对运作到运作线路基础资料的维护，包括新增、修改、作废、查询等操作。  
1.3	用例条件
条件类型	描述	引用系统用例
前置条件	1、	行政区域基础资料完备
2、	行政组织基础资料完备
3、	偏线代理基础资料完备	SUC-33 DP-FOSS-综合管理系统用例-新增_修改_作废_查询行政区域
SUC-85 DP-FOSS-综合管理系统用例-修改_查询行政组织业务属性
SUC-649  新增_修改_作废_查询偏线代理

后置条件	1、	为制定运作到运作走货路径、查询/制定发车计划（短途）、修改发车计划（短途）系统用例提供线路基础资料查询。	SUC-187  新增_修改_作废_查询运作到运作走货路径
SUC-216  查询/制定发车计划（短途）
SUC-224修改发车计划（短途）
SUC-62 预测货量
SUC-63  查询预测货量
1.4	操作用户角色
操作用户	描述
线路维护人员	线路维护人员对运作到运作线路基础资料进行新增，修改，作废，查询操作。
1.5	界面要求
1.5.1	表现方式
Web页面
1.5.2	界面原型-主界面
                                 图一：线路基础资料管理主界面
1.5.3	界面描述-主界面
1.	功能按钮区域
1)	新增按钮：点击新增按钮进入新增界面，参见【图二：新增/修改线路（线段信息）界面】。
2)	导出按钮：点击导出按钮，可以导出运作到运作线路的所有数据至Excel表中
3)	查询按钮：输入查询条件，点击查询按钮，系统返回查询结果，刷新查询列表。
4)	重置按钮：点击重置按钮，重置查询条件。
5)	作废按钮：选中列表中一行或多行记录，点击作废按钮，选中的记录被作废；或点击各行的作废按钮，作废各行记录，作废时连同作废该线路对应的发车标准和线段信息，需要弹出确认提示框。
6)	查看详细信息：鼠标移动到列表中某一条记录，双击该行记录，弹出一个窗口，可以查看该记录的详细信息。
7)	修改按钮：点击各行的修改按钮，进入修改界面，参见【图二：新增/修改线路（线段信息）界面】。
8)	分页按钮：实现分页功能。
2.	列表区域
1)	列表区域默认不显示，点击查询按钮，根据查询条件显示列表数据。
2)	列表中显示：线路名称、线路简码、线路类型、出发站、出发城市、到达站、到达城市、线路距离（公里）、管理车队、线路状态。
3.	字段输入区域
1)	查询条件包括线路名称、出发站、到达站、出发城市、到达城市、线路类型、线路简码、管理车队。
1.1	线路名称：文本，支持模糊查询
1.2	出发站：选择框，支持手动输入模糊查询，支持从行政组织（外场、空运总调）基础资料中选取
1.3	到达站：选择框，支持手动输入模糊查询，也支持从行政组织（外场、空运总调）、偏线代理、空运代理网点或可空运到达的营业部基础资料中选取
1.4	出发城市：选择框，支持手动输入模糊查询，也支持从行政区域（城市）基础资料中选取
1.5	到达城市：选择框，支持手动输入模糊查询，也支持从行政区域（城市）基础资料中选取
1.6	线路类型：下拉框，默认为全部，包含：全部、专线、偏线、空运；
1.7	线路简码：文本，支持模糊查询
1.8	管理车队：选择框，支持手动输入模糊查询，也支持从行政组织（车队）基础资料中选取
1.81.9	线路状态：下拉框，包括：全部、生效、失效；
1.5.4	界面原型-新增/修改界面
   
图二：新增/修改线路（线段信息）界面   
图三：新增/修改线路（发车标准）界面
   
图四：新增/修改线路（线路类型为空运）界面
1.5.5	界面描述-新增/修改界面
1.	字段输入区域
1)	线路名称：自动生成，生成规则：根据所选“出发站”和“到达站”动态生成,如：生成线路名称为XXX外场-XXX外场；
2)	线路简码：必填，文本，线路简码必须唯一；
3)	线路类型：必填，下拉框，包含专线、偏线、空运。若线路类型为偏线/空运，“管理车队”、“普车时效（小时）”、“卡车时效（小时）”不可见，线段信息列表、发车标准列表均不不显示，“时效（小时）”可见，见【图四：新增/修改线路（线路类型为空运）界面】
4)	管理车队：必填，选择框，从行政组织（车队）基础资料中选取；
5)	出发站：必填，选择框，不支持手动输入，只支持从行政组织（外场、空运总调）信息基础资料中选取
6)	到达站：必填，选择框，不支持手动输入，支持从行政组织（外场、空运总调）、偏线代理、空运代理网点基础资料中选取
7)	出发城市：只读，与“出发站”联动获取显示
8)	到达城市：只读，与“到达站”联动获取显示
9)	普车时效（小时）：必填，数字
10)	卡车时效（小时）：必填，数字
11)	线路距离（公里）：必填，数字，出发站与到达站间的距离，单位：公里；
12)	描述：选填
2．列表区域
1)	线段列表（图二：新增/修改线路（线段信息）界面）中显示：线段顺序、出发站、出发城市、到达站、到达城市、线段距离（公里）、普车时效（小时）、卡车时效（小时）、经停时间（小时）。
2)	发车标准列表（图三：新增/修改线路（发车标准）界面）中显示：班次、准点出发时间、中转到达货最晚到达时间、时效类型。 
3. 功能按钮区域
1)	保存按钮：点击保存按钮，需要提示用户是否保存成功，若保存成功，关闭当前界面，返回主界面；若保存失败，提示用户保存失败以及失败原因，不关闭当前界面。
2)	重置按钮：点击重置按钮，回到当前界面的初始状态。
3)	取消按钮：点击取消按钮，退出当前界面，返回主界面。
3)4)	生效或失效按钮：点击失效按钮，线路状态修改为失效状态，失效按钮隐藏，生效按钮显示；点击生效按钮，在后台对业务规则SR-10进行验证，线路状态修改为生效状态，生效按钮隐藏，失效按钮显示。
        线段信息面板（【图二：新增/修改线路（线段信息）界面】）
1)	 新增线段按钮：点击新增线段按钮，先判断线路信息是否已经保存，如果信息还未保存，弹出提醒框，提醒需要保存线路信息才能新增线段信息；如果信息已经保存成功，则弹出【图五：新增/修改线段界面】界面，进行新增操作，详细步骤参见【新增线段操作步骤】。
2)	修改线段按钮：点击修改线段按钮，先判断线路信息是否已做修改，如果线路信息已做修改，弹出提醒框，提醒先保存线路信息才能修改线段信息，详细步骤参见【修改线段操作步骤】；
3)	作废按钮：点击作废按钮，先判断线路信息是否已做修改，如果线路信息已做修改，弹出提醒框，提醒先保存线路信息才能作废线段信息，详细步骤参见【作废线段操作步骤】。
4)	查看详细信息：鼠标移动到列表中某一条记录，双击该行记录，弹出一个窗口，可以查看该记录的详细信息。
        发车标准面板（【图三：新增/修改线路（发车标准）界面】）
1)	 新增发车标准按钮：点击新增发车标准按钮，先判断线路信息是否已经保存，如果信息还未保存，弹出提醒框，提醒需要保存线路信息才能新增发车标准；如果信息已经保存成功，则弹出【图五：新增/修改发车标准】界面，进行新增操作，详细步骤参见【新增发车标准操作步骤】。
2)	修改发车标准按钮：点击修改按钮，先判断线路信息是否已做修改，如果线路信息已做修改，弹出提醒框，提醒先保存线路信息才能修改发车标准，详细步骤参见【修改发车标准操作步骤】；
3)	作废按钮：点击作废按钮，先判断线路信息是否已做修改，如果线路信息已做修改，弹出提醒框，提醒先保存线路信息才能作废发车标准，详细步骤参见【作废发车标准操作步骤】。
4)	查看详细信息：鼠标移动到列表中某一条记录，双击该行记录，弹出一个窗口，可以查看该记录的详细信息。
1.5.6	界面原型-新增/修改线段界面
 
                图五：新增/修改线段界面
1.5.7	界面描述-新增/修改线段界面
1、字段输入区域
1)	线段顺序： 必填，数字
2)	线段距离（公里）：必填，数字，出发站与到达站之间的距离，单位公里；
3)	出发站：必填，选择框，不支持手动输入，只支持从行政组织（外场）基础资料中选取，参见业务规则SR-10;
4)	到达站：必填，选择框，不支持手动输入，只支持从行政组织（外场）基础资料中选取, 参见业务规则SR-10;
5)	出发城市：只读，与“出发站”联动获取显示
6)	到达城市：只读，与“到达站”联动获取显示
7)	普车时效（小时）：必填，数字
8)	卡车时效（小时）：必填，数字
9)	经停时间（小时）：必填，数字
10)	描述：选填       
       2、功能按钮区域
1)	保存按钮：点击保存按钮，需要提示用户是否保存成功，若保存成功，关闭弹出窗口，返回到【图二：新增/修改线路（线段信息）界面】；若保存失败，提示用户保存失败以及失败原因，不关闭弹出窗口。
2)	重置按钮：点击重置按钮，回到当前界面的初始状态。
3)	取消按钮：点击取消按钮，关闭当前界面，返回到【图二：新增/修改线路（线段信息）界面】界面。
1.5.8	界面原型-新增/修改发车标准
  
图六：新增/修改发车标准
1.5.9	界面描述-新增/修改发车标准
1、字段输入区域
1)	班次：数字，用户自行维护，自然数自动生成，同一条线路上班次从1开始，按照准点出发时间顺序排序。
2)	准点出发时间：必填，格式：08:00,09:30
3)	出发站：自动带出
4)	到达站：自动带出
5)	中转到达货最晚到达时间：必填，采用T-1格式，如：02:00-1天表示前一天的02:00；
5)6)	时效类型：下拉框，必选，包括：卡车 、普车两种时效类型；
6)7)	备注：选填
       2、功能按钮区域
              1)          保存按钮：点击保存按钮，需要提示用户是否保存成功，若保存成功，关闭弹出窗口，返回到【图三：新增/修改线路（发车标准）界面】；若保存失败，提示用户保存失败以及失败原因，不关闭弹出窗口。
   2)          重置按钮：点击重置按钮，回到当前界面的初始状态。
 3)          取消按钮：点击取消按钮，关闭当前界面，返回到【图三：新增/修改线路（发车标准）界面】。

1.6	操作步骤
1.6.1	新增线路信息操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入线路信息管理主界面	【线路信息列表数据】	
2	点击新增按钮，进入【图二：新增/修改线路（线段信息）界面】		
3	输入线路信息、线段信息和发车标准信息，点击保存。
参见业务规则SR-1、SR-2、SR-3、SR-4,、SR-5、SR-8、SR-11	【线路基础资料信息】【线段信息列表数据】【发车标准列表信息】	
4	返回线路信息管理主界面		

序号	扩展事件	相关数据	备注
3a	点击取消按钮，退出当前界面，返回主界面		
3b	若保存失败，需提示用户保存失败以及失败原因，继续停留在新增界面		

1.6.2	修改线路信息操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入线路信息管理主界面	【线路信息列表数据】	
2	点击修改按钮，进入【图二：新增/修改线路（线段信息）界面】		
3	修改线路信息、线段信息和发车标准信息,点击保存
参见业务规则SR-1、SR-2、SR-3、SR-4,、SR-5、SR-8、SR-11	【线路基础资料信息】【线段信息列表数据】【发车标准列表信息】	
4	返回线路信息管理主界面		

序号	扩展事件	相关数据	备注
3a	点击取消按钮，退出当前界面，返回主界面		
3b	若保存失败，需提示用户保存失败以及失败原因，继续停留在修改界面		

1.6.3	作废线路信息操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入线路信息管理主界面	【线路信息列表数据】	
2	点击作废图标，可以作废当前记录；选择一行记录或多行记录，点击作废按钮，可以作废多条记录。		作废时连同作废该线路对应的线段信息和发车标准，弹出确认对话框。
3	点击确定按钮。		

序号	扩展事件	相关数据	备注
2a	点击取消按钮，退出当前界面，返回主界面		
2b	若作废失败，需提示用户作废失败以及失败原因		

1.6.4	查询线路信息操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入线路信息管理主界面	【线路信息列表数据】	
2	输入查询条件，点击查询按钮。参见业务规则SR-7	【线路信息查询条件】	系统返回查询结果

1.6.5	新增线段操作步骤

序号	基本步骤	相关数据	补充步骤
1	进入【图二：新增/修改线路（线段信息）界面】	【线路基础资料信息】【线段信息列表数据】	
2	点击新增线段按钮，先判断线路信息是否保存，若已保存，弹出【图五：新增/修改线段界面】；若未保存，先保存线路信息，再点击新增线段按钮。		
3	输入线段详细信息，点击保存。
参见业务规则SR-3、SR-10、SR-12	【线段信息】	
4	返回【图二：新增/修改始发线路】界面		


序号	扩展事件	相关数据	备注
3a	点击取消按钮，关闭当前界面，返回【图二：新增/修改线路（线段信息）界面】		
3b	若保存失败，需提示用户保存失败以及失败原因，继续停留在新增界面		

1.6.6	修改线段操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入【图二：新增/修改线路（线段信息）界面】	【线路基础资料信息】【线段信息列表数据】	
2	点击修改线段按钮，先判断线路信息是否修改，若未修改，弹出【图五：新增/修改线段界面】；若已修改，先保存线路信息，再点击修改线段按钮。		
3	输入线段详细信息，点击保存。
参见业务规则SR-3、SR-10、SR-12	【线段信息】	
4	返回【图二：新增/修改线路（线段信息）界面】		

序号	扩展事件	相关数据	备注
3a	点击取消按钮，关闭当前界面，返回【图二：新增/修改线路（线段信息）界面】		
3b	若保存失败，需提示用户保存失败以及失败原因，继续停留在修改界面		
1.6.7	作废线段信息操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入【图二：新增/修改线路（线段信息）界面】	【线路基础资料信息】	
2	选择一行记录，点击作废按钮。 	【线段信息列表数据】	弹出确认对话框
3	点击确定按钮		

序号	扩展事件	相关数据	备注
2a	点击取消按钮，退出当前界面，返回主界面		
2b	若作废失败，需提示用户作废失败以及失败原因		

1.6.8	新增发车标准操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入【图三：新增/修改线路（发车标准）界面】	【线路基础资料信息】【发车标准列表信息】	
2	点击新增发车标准按钮，先判断线路信息是否保存，若已保存，弹出【图六：新增/修改发车标准】界面；若未保存，先保存线路信息，再点击新增发车标准按钮。		
3	输入发车标准详细信息，点击保存。
参见业务规则SR-6、SR-9	【发车标准信息】	
4	返回【图三：新增/修改线路（发车标准）界面】		

序号	扩展事件	相关数据	备注
3a	点击取消按钮，关闭当前界面，返回【图三：新增/修改线路（发车标准）界面】		
3b	若保存失败，需提示用户保存失败以及失败原因，继续停留在新增界面		

1.6.9	修改发车标准操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入【图三：新增/修改线路（发车标准）界面】	【线路基础资料信息】【发车标准列表信息】	
2	点击修改发车标准按钮，先判断线路信息是否修改，若未修改，弹出【图六：新增/修改发车标准】界面；若已修改，先保存始发线路信息，再点击修改发车标准按钮。		
3	输入发车标准详细信息，点击保存。
参见业务规则SR-6、SR-9	【发车标准信息】	
4	返回【图三：新增/修改线路（发车标准）界面】		

序号	扩展事件	相关数据	备注
3a	点击取消按钮，关闭当前界面，返回【图三：新增/修改线路（发车标准）界面】		
3b	若保存失败，需提示用户保存失败以及失败原因，继续停留在修改界面		

1.6.10	作废发车标准操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入【图三：新增/修改线路（发车标准）界面】	【线路基础资料信息】【发车标准列表信息】	
2	选择一行记录，点击作废按钮。		弹出确认对话框。
3	点击确定按钮。		

序号	扩展事件	相关数据	备注
2a	点击取消按钮，退出当前界面，返回主界面		
2b	若作废失败，需提示用户作废失败以及失败原因		


1.7	业务规则
序号	描述
SR-1	新增/修改页面，“出发站”不支持手动输入，只支持从选择框选择，遵循以下规则：1、 若“线路类型”为专线或偏线，出发站只能选择“外场”；
2、	若“线路类型”为空运，出发站只能是“外场”、“空运总调”；
SR-2	新增/修改页面，“到达站”不支持手动输入，只支持从选择框选择，遵循以下规则：1、若“线路类型”为专线，“到达站”只能选择“外场”；
2、若“线路类型”为偏线，“到达站”只能选择“偏线代理”；
3、若“线路类型”为空运，“到达站”只能选择"空运总调"或"空运代理网点"或可空运到达的营业部；
SR-3	新增/修改页面，“出发城市”与“出发站”联动选取，只读；“到达城市”与“到达站”联动选取，只读。“出发城市”字段只读，数据来源于出发站所属城市，“到达城市”字段只读，数据来源于到达站所属城市。
SR-4	新增/修改页面，线路类型：专线、偏线、空运。
SR-5	新增/修改页面，当“线路类型”为“专线”时，时效分为“普车时效”和“卡车时效”；当“线路类型”为“偏线/空运”时，仅提供一个“时效”，并且“管理车队”、线段列表、发车标准均不显示；
SR-6	“中转到达货最晚到达时间”不能大于“准点出发时间”；“中转到达货最晚到达时间”采用T-1格式，如：2：00-1天，表示前一天的2:00；
SR-7	查询都支持模糊查询，条件：“出发站”支持手动输入，也支持从行政组织（外场、空运总调）信息基础资料中选取；“到达站”支持手动输入，也支持从行政组织（外场、空运总调）、偏线代理、空运代理网点基础资料中选取；“出发城市”、“到达城市”支持手动输入，也支持从行政区域（城市）基础资料中选取；“线路类型”默认为全部，包含专线、偏线、空运；“管理车队”支持手动输入，也支持从行政组织（车队）基础资料中选取 
SR-8	新增/修改页面，“线路简码”不能重复，必须唯一；“线路名称”自动生成，根据所选“出发站”和“到达站”动态生成线路名称，如：上海外场-广州外场
SR-9	新增和修改发车标准页面，“班次”自然数字，用户自行维护自动生成，同一条线路上班次从1开始，按照准点出发时间顺序排序； “始发站”自动带出;“到达站”自动带出
SR-10	第一条线段的出发站必须是线路的出发站；最后一条线段的到达站必须是线路的到达站；第n条线段的出发站必须是第n-1条线段的到达站；
SR-11	新增/修改页面，线路的“普车时效（小时）”=线段的“普车时效（小时）”+线段的“经停时间（小时）”，在线段的“普车时效（小时）”、“经停时间（小时）”输入后动态计算生成；线路的“卡车时效（小时）” =线段的“卡车时效（小时）”+线段的“经停时间（小时）”，在线段的“卡车时效（小时）”、“经停时间（小时）”输入后动态计算生成；
SR-12	新增/修改线段页面, “出发站”不支持手动输入，只支持从行政组织（外场）基础资料中选择；“到达站”不支持手动输入，只支持从行政组织（外场）基础资料中选择
SR-13	线路的状态在“失效”状态下，不能使用，只有在“生效”状态下才能使用。修改线路时，必须先把线路状态修改为“失效”状态，才能进行其他数据修改。

1.8	数据元素
1.8.1	线路基础资料信息
字段名称 	说明 	输入限制	输入项提示文本	长度	是否必填	备注
线路名称	线路的名称	文本		50	是	
线路简码	线路简码	文本		10	否	
线路类型	线路类型，包括：专线、偏线、空运	下拉框		10	是	
管理车队	线路所属车队名称，从行政组织（车队）基础资料中选择	选择框		50		若“线路类型”为专线，显示；否则不显示
出发站	出发站名称	文本		50	是	参见业务规则SR-1
到达站	到达站名称	文本		50	是	参见业务规则SR-2
出发城市	出发站所在城市名称，与“出发站”联动	只读		30	是	
到达城市	到达站所在城市名称，与“到达站”联动	只读		30	是	
普车时效（小时）	普车运行时间，单位：小时；线路的“普车时效（小时）”=线段的“普车时效（小时）”+线段的“经停时间（小时）”	数字		4	是	若“线路类型”为专线，显示；否则不显示
卡车时效（小时）	卡车运行时间，单位：小时；线路的“卡车时效（小时）” =线段的“卡车时效（小时）”+线段的“经停时间（小时）”	数字		4	是	若“线路类型”为专线，显示；否则不显示
时效（小时）	时效（小时）	数字		4	是	若“线路类型”为偏线/空运，显示；否则不显示
线路距离（公里）	线路距离，单位：公里	数字		6	是	
描述	描述信息	文本		100	否	
1.8.2	线路信息列表数据
字段名称 	说明 	输入限制	长度	是否必填	备注
线路名称	线路的名称	N/A	50	N/A	
线路简码	线路简码	N/A	10	N/A	
线路类型	线路类型，包括：专线、偏线、空运	N/A	10	N/A	
出发站	出发站名称	N/A	50	N/A	
出发城市	出发站所在城市名称	N/A	30	N/A	
到达站	到达站名称	N/A	50	N/A	
到达城市	到达站所在城市名称	N/A	30	N/A	
线路距离（公里）	线路距离，单位：公里	N/A	6	N/A	
管理车队	线路所属车队名称	N/A	50	N/A	
1.8.3	线路信息查询条件
字段名称 	说明 	输入限制	长度	是否必填	备注
线路名称	线路名称	文本	50	否	
出发站	出发站名称	选择框	50	否	从“外场”、“空运总调”基础资料中选取
到达站	到达站名称	选择框	50	否	从“外场”、“空运总调”、“偏线代理”、、“空运代理网点”基础资料中选取
出发城市	出发站所在城市名称	选择框	30	否	参见业务规则SR-7
到达城市	到达站所在城市名称	选择框	30	否	参见业务规则SR-7
线路类型	线路类型，包含：专线、偏线、空运、全部	下拉框	10	默认全部	
线路简码	线路简码	文本	10	否	
管理车队	线路所属车队名称	选择框	50	否	

1.8.4	线段信息列表数据
字段名称 	说明 	输入限制	长度	是否必填	备注
线段顺序	线段在整条线路中的顺序编号	N/A	2	N/A	
出发站	出发站名称	N/A	50	N/A	
出发城市	出发站所在城市名称	N/A	30	N/A	
到达站	到达站名称	N/A	50	N/A	
到达城市	到达站所在城市名称	N/A	30	N/A	
线段距离（公里）	出发站与到达站之间的距离 单位：公里	N/A	6	N/A	
普车时效（小时）	普车运行时间，单位：小时	N/A	4	N/A	
卡车时效（小时）	卡车运行时间，单位：小时	N/A	4	N/A	
经停时间（小时）	车在中转外场停留时间，单位：小时	N/A	4	N/A	

1.8.5	线段信息
字段名称 	说明 	输入限制	长度	是否必填	备注
线段顺序	线段在整条线路中的顺序编号	数字	2	是	
线段距离（公里）	出发站与到达站之间的距离 单位：公里	数字	6	是	
出发站	出发站名称	选择框	50	是	从行政组织（外场）基础资料中选取
到达站	到达站名称	选择框	50	是	从行政组织（外场）基础资料中选取
出发城市	出发站所在城市名称，与“出发站”联动	只读	30	是	
到达城市	到达站所在城市名称，与“到达站”联动	只读	30	是	
普车时效（小时）	普车运行时间，单位：小时	数字	4	是	
卡车时效（小时）	卡车运行时间，单位：小时	数字	4	是	
经停时间（小时）	车在中转外场停留时间，单位：小时	数字	4	是	
描述	描述	文本	100	否	


1.8.6	发车标准列表信息
字段名称 	说明 	输入限制	长度	是否必填	备注
班次	线路班次，默认为：1	N/A	2	N/A	自然数字，用户自行维护同一条线路上班次从1开始，按照准点出发时间顺序排序
准点出发时间	准点出发时间,格式：08：00、09:30	N/A	20	N/A	
中转到达货最晚到达时间	中转到达货物最晚到达外场的时间，采用T-1格式表示，如：2:00-1天，表示前一天的2:00。	N/A	20	N/A	
时效类型	时效类型，包括：普车、卡车两种时效				

1.8.7	发车标准信息
字段名称 	说明 	输入限制	长度	是否必填	备注
班次	发车班次	数字	2	是	自然数字，用户自行维护同一条线路上班次从1开始，按照准点出发时间顺序排序
准点出发时间	准点发车时间，格式：08:00,09:30	日期	20	是	
出发站	出发站名称，自动带出	N/A	50	N/A	
到达站	到达站名称，自动带出	N/A	50	N/A	
中转到达货最晚到达时间	中转到达货物最晚到达外场的时间，采用T-1格式表示，如：2:00-1天，表示前一天的2:00。	日期选择框	20	是	“中转到达货最晚到达时间”不能大于“准点出发时间”
时效类型	时效类型，包括：普车、卡车两种时效				
备注	备注	文本	200	否	
1.9	非功能性需求
使用量	
2012年全网估计用户数	
响应要求（如果与全系统要求 不一致的话）	
使用时间段	
高峰使用时间段	

1.10	接口描述
接口名称 	对方系统（外部系统或内部其他模块）	接口描述
		

		

dp-foss-综合管理系统用例-新增_修改_作废_查询到达线路-v1.04		
		
修订记录 
日期 	修订内容 	修订人员 	版本号 
2012-6-12	新增	谢艳涛	V0.1
2012-6-30	根据赵鹏点评修改：“班次”自动生成，“准点到达时间采用”T+1格式	谢艳涛	V0.2
2012-7-01	根据王偕旭点评修改：增加“运输类型”属性	谢艳涛	V0.3
2012-7-2	提交CITA审核	谢艳涛	V0.5
2012-7-6	根据评审会议罗越、王偕旭要求增加“网点组”思想修改：到达线路增加“是否到达默认线路”属性	谢艳涛	V0.6
2012-8-2	通过业务部门审核签字版本升级到V0.9	谢艳涛	V0.9
2012-10-16	根据变更需求增加导出功能：在图一界面增加“导出”按钮	谢艳涛	V1.01
2012-11-27	根据变更需求修改业务规则SR-2、SR-1	谢艳涛	V1.02
2012-12-01	根据变更需求把发车标准“班次”自动生成改为自行维护;增加业务规则SR-8，到达线路只有汽运，界面上去掉“运输类型”	谢艳涛	V1.03
2012-12-11	根据变更需求修改发车标准：增加“时效类型”分为：普车、卡车两种	谢艳涛	V1.04

1.	SUC-740-新增_修改_作废_查询到达线路
1.1	相关业务用例
BUC_FOSS_5.20.30_530 开单收货
BUC_FOSS_5.10.20_060 制定班车发车计划
BUC_FOSS_5.10.20_020制定长途发车计划
BUC_FOSS_5.10.20_010 预测货量
BUC_FOSS_5.10.20_090 确定班车发车计划
BUC_FOSS_5.10.20_065 排班（短途班车）
BUC_FOSS_5.10.20_022 调整走货线路
1.2	用例描述
到达线路即运作到经营的线路，主要用于货量预测、发车计划制定。本用例用于对到达线路基础资料维护，包括新增、修改、作废、查询、导出数据等操作。
1.3	用例条件
条件类型	描述	引用系统用例
前置条件	1、	行政组织基础资料完备
2、	行政区域基础资料完	SUC-33 DP-FOSS-综合管理系统用例-新增_修改_作废_查询行政区域
SUC-85 DP-FOSS-综合管理系统用例-修改_查询行政组织业务属性
后置条件	1、	为查询/制定发车计划（短途）、修改发车计划（短途）等系统用例提供到达线路基础资料查询	SUC-216  查询/制定发车计划（短途）
SUC-224修改发车计划（短途）

1.4	操作用户角色
操作用户	描述
线路维护人员	线路维护人员对到达线路进行新增，修改，作废，查询操作。
1.5	界面要求
1.5.1	表现方式
Web页面
1.5.2	界面原型-主界面
  
图一：到达线路主界面
1.5.3	界面描述-主界面
1.	功能按钮区域
1)	新增按钮：点击新增按钮进入新增界面，参见【图二：新增/修改到达线路】。
2)	导出按钮：点击导出按钮，可以导出到达线路的所有数据至Excel表中
3)	查询按钮：输入查询条件，点击查询按钮，系统返回查询结果，刷新查询列表。
4)	重置按钮：点击重置按钮，清空查询条件。
5)	作废按钮：选中列表中一行或多行记录，点击作废按钮，选中的记录被作废；或点击各行的作废按钮，作废各行记录，作废时连同作废该线路对应的发车标准，需要弹出确认提示框。
6)	查看详细信息：鼠标移动到列表中某一条记录，双击该行记录，弹出一个窗口，可以查看该记录的详细信息。
7)	修改按钮：点击各行的修改按钮，进入修改界面，参见【图二：新增/修改到达线路】。
8)	分页按钮：实现分页功能。
2.	列表区域
1)	列表区域默认不显示，点击查询按钮，根据查询条件显示列表数据。
2)	列表中显示：线路名称、线路简码、运输类型、出发站、到达站、线路距离（公里）、是否默认到达线路。
3.	字段输入区域
1)	查询条件包括线路名称、出发站、到达站、线路简码、管理车队。
1.1	线路名称：文本，支持模糊查询
1.2	出发站：选择框，支持手动输入模糊查询，也支持从行政组织（外场）基础资料中选取
1.3	到达站：选择框，支持手动输入模糊查询，也支持从行政组织（营业部）基础资料中选取
1.4	线路简码：文本，支持模糊查询
1.5	管理车队：选择框，支持手动输入模糊查询，也支持从行政组织（车队）基础资料中选取
1.5.4	界面原型-新增/修改到达线路
 
图二：新增/修改到达线路
1.5.5	界面描述-新增和修改到达线路
1.	字段输入区域
1)	线路名称：线路名称必须唯一自动生成，生成规则：根据所选“出发站”和“到达站”动态生成,如：生成线路名称为XXX外场-XXX营业部
2)	线路简码：必填，文本，大写英文字母表示，线路简码必须唯一
3)	管理车队：必填，选择框，从行政组织（车队）基础资料中选取
4)	线路距离（公里）：必填，数字
5)	出发站：必填，选择框，从行政组织（外场）基础资料中选取
6)	到达站：必填，选择框，从行政组织（营业部）基础资料中选取
7)	是否默认达到线路：必填，单选框，是或否，默认为是
8)	备注：选填
2．	 发车标准列表区域
1)          列表中显示：班次、准点出发时间、准点到达时间、时效类型、备注。
3.   功能按钮区域
1)	保存按钮：点击保存按钮，需要提示用户是否保存成功，若保存成功，关闭当前界面，返回主界面；若保存失败，提示用户保存失败以及失败原因，不关闭当前页面。
2)	重置按钮：点击重置按钮，回到当前界面的初始状态。
3)	取消按钮：点击取消按钮，退出当前界面，返回主界面。
4)	新增发车标准按钮：点击新增发车标准按钮，先判断线路信息是否已经保存，如果信息还未保存，弹出提醒框，提醒需要保存到达线路信息才能新增发车标准；如果信息已经保存成功，则弹出【图三：新增和修改发车标准】界面，进行新增操作，详细步骤参见【新增发车标准操作步骤】。
5)	修改按钮：点击修改按钮，先判断线路信息是否已做修改，如果线路信息已做修改，弹出提醒框，提醒先保存线路信息才能修改发车标准，详细步骤参见【修改发车标准操作步骤】；
6)	作废按钮：点击作废按钮，先判断线路信息是否已做修改，如果线路信息已做修改，弹出提醒框，提醒先保存线路信息才能作废发车标准，详细步骤参见【作废发车标准操作步骤】。
7)	查看详细信息：鼠标移动到列表中某一条记录，双击该行记录，弹出一个窗口，可以查看该记录的详细信息。
1.5.6	界面原型-新增/修改发车标准
 
    图三：新增和修改发车标准
1.5.7	界面描述-新增/修改发车标准
1、字段输入区域
1)	班次：数字，用户自行维护，自然数。
2)	出发站：自动带出
3)	到达站：自动带出
4)	准点出发时间：必填，格式：08:00,09:30等
5)	准点到达时间：必填，采用T+1格式，T是指时间，如：00:30；+1天是指当天时间加1天，如：00:30+1，表示第二天的00:30；XX天用下拉框表示，如果为0天，默认为当天时间，如：22:00+0天，用22:00表示。
6)	时效类型：下拉框，包括：普车、卡车两种时效类型；
6)          备注：选填
       2、功能按钮区域
1)	保存按钮：点击保存按钮，需要提示用户是否保存成功，若保存成功，关闭弹出窗口，返回到【图二：新增/修改到达线路】；若保存失败，提示用户保存失败以及失败原因，不关闭弹出窗口。
2)	重置按钮：点击重置按钮，回到当前界面的初始状态。
3)	取消按钮：点击取消按钮，关闭当前界面，返回到【图二：新增/修改到达线路】界面。
1.6	操作步骤
1.6.1	添加到达线路操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入到达线路管理主界面	【到达线路列表信息】	
2	点击新增按钮，进入【图二：新增/修改到达线路】界面		
3	输入到达线路详细信息和相关发车标准信息，点击保存。
参见业务规则SR-1、SR-2、SR-5、SR-6	【到达线路新增/修改信息】【发车标准列表信息】【发车标准信息】	
4	返回到达线路管理主界面		

序号	扩展事件	相关数据	备注
3a	点击取消按钮，退出当前界面，返回主界面		
3b	若保存失败，需提示用户保存失败以及失败原因，继续停留在新增界面		

1.6.2	修改到达线路操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入到达线路管理主界面	【到达线路列表信息】	
2	点击修改按钮，进入【图二：新增/修改到达线路】界面		
3	修改到达线路详细信息和发车标准信息,点击保存
参见业务规则SR-1、SR-2、SR-5、SR-6	【到达线路新增/修改信息】【发车标准列表信息】【发车标准信息】	
4	返回到达线路管理主界面		

序号	扩展事件	相关数据	备注
3a	点击取消按钮，退出当前界面，返回主界面		
3b	若保存失败，需提示用户保存失败以及失败原因，继续停留在修改界面		

1.6.3	作废到达线路操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入到达线路管理主界面	【到达线路列表信息】	
2	选择一行或者多行记录，点击作废按钮。		作废时连同作废该线路对应的发车标准，弹出确认对话框。
3	点击确定按钮。		

序号	扩展事件	相关数据	备注
2a	点击取消按钮，退出当前界面，返回主界面		
2b	若作废失败，需提示用户作废失败以及失败原因		

1.6.4	查询到达线路操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入到达线路管理主界面	【到达线路列表信息】	
2	输入查询条件，点击查询按钮。参见业务规则SR-4	【到达线路查询条件】	系统返回查询结果

1.6.5	新增发车标准操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入【图二：新增/修改到达线路】界面	【到达线路新增/修改信息】【发车标准列表信息】	
2	点击新增发车标准按钮，先判断到达线路信息是否保存，若已保存，弹出【图二：新增/修改发车标准】界面；若未保存，先保存到达线路信息，再点击新增发车标准按钮。		
3	输入发车标准详细信息，点击保存。
参见业务规则SR-3、SR-7	【发车标准信息】	
4	返回【图二：新增/修改到达线路】界面		

序号	扩展事件	相关数据	备注
3a	点击取消按钮，关闭当前界面，返回【图二：新增/修改到达线路】界面		
3b	若保存失败，需提示用户保存失败以及失败原因，继续停留在新增界面		

1.6.6	修改发车标准操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入【图二：新增/修改到达线路】界面	【到达线路新增/修改信息】【发车标准列表信息】	
2	点击修改发车标准按钮，先判断到达线路信息是否修改，若未修改，弹出【图二：新增/修改发车标准】界面；若已修改，先保存到达线路信息，再点击修改发车标准按钮。		
3	输入发车标准详细信息，点击保存。
参见业务规则SR-3、SR-7	【发车标准信息】	
4	返回【图二：新增/修改到达线路】界面		

序号	扩展事件	相关数据	备注
3a	点击取消按钮，关闭当前界面，返回【图二：新增/修改到达线路】界面		
3b	若保存失败，需提示用户保存失败以及失败原因，继续停留在修改界面		

1.6.7	作废发车标准操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入【图二：新增/修改到达线路】界面	【到达线路新增/修改信息】【发车标准列表信息】	
2	选择一行记录，点击作废按钮。		弹出确认对话框。
3	点击确定按钮。		

序号	扩展事件	相关数据	备注
2a	点击取消按钮，退出当前界面，返回主界面		
2b	若作废失败，需提示用户作废失败以及失败原因		

1.7	业务规则
序号	描述
SR-1	在新增/修改页面， “到达站”不支持手动输入，只支持从行政组织（营业部）基础资料中选取。 
SR-2	在新增/修改页面，“出发站”不支持手动输入，只支持从行政组织（外场）基础资料中选取。
SR-3	时间通过“时间控件”选取，格式：08:00,09:30;“准点到达时间”采用T+1格式，T是指时间，如：00:30；+1天是指当天时间加1天，如：00:30+1，表示第二天的00:30；XX天用下拉框表示，如果为0天，默认为当天时间，如：22:00+0天，用22:00表示，“准点到达时间”不能早于“准点出发时间”。
SR-4	查询都支持模糊查询，条件：“出发站”支持手动输入，也支持从行政组织（外场、空运总调）基础资料中选取；“到达站”支持手动输入，也支持从行政组织（营业部）基础资料中选取。
SR-5	新增和修改页面，“线路简码”不能重复，必须唯一；“线路名称”自动生成，根据所选“出发站”和“到达站”动态生成线路名称，如： 广州外场-广州东平营业部
SR-6	新增和修改页面，对于一个“到达站”，只有一个默认配载的“出发站”
SR-7	新增和修改发车标准页面，“班次”自然数，用户自行维护；“出发站”自动带出;“到达站”自动带出
SR-8	到达站必须是具有自提派送属性的行政组织,以及到达站可做到达产品是否存在到达线路的产品属性。

1.8	数据元素
1.8.1	到达线路新增/修改信息
字段名称 	说明 	输入限制	输入项提示文本	长度	是否必填	备注
线路名称	线路名称	文本		50	是	
线路简码	线路简码	文本		10	是	
管理车队	线路所属车队名称	选择框		50	是	
线路距离（公里）	出发站与到达站之间的距离，单位：公里	数字		6	是	
出发站	出发站名称，从行政组织（外场）基础资料中选取	选择框		50	是	
到达站	到达站名称，从行政组织（营业部）基础资料中选取	选择框		50	是	
是否默认到达线路	是否为默认到达线路	单选框		2	是	默认为是
备注	备注	文本		100	否	
1.8.2	到达线路列表信息
字段名称 	说明 	输入限制	长度	是否必填	备注
线路名称	线路名称，命名格式：上海专线-松江工业区营业部	N/A	50	N/A	
线路简码	线路简码，大写字母表示如：上海外场-松江工业区营业部 简码为：DDSG，DD表示“到达”	N/A	10	N/A	
出发站	出发站名称	N/A	50	N/A	
到达站	到达站名称	N/A	50	N/A	
线路距离（公里）	出发站与到达站之间的距离，单位：公里	N/A	6	N/A	
管理车队	线路所属车队名称	N/A	50	N/A	
是否默认到达线路	是否为默认到达线路	N/A	2	N/A	
1.8.3	到达线路查询条件
字段名称 	说明 	输入限制	长度	是否必填	备注
线路名称	线路名称 	文本	50	否	
出发站	出发站名称，支持手动输入，也支持从行政组织（外场、空运总调）基础资料中选择	选择框	50	否	
到达站	到达站名称，支持手动输入，也支持从行政组织（营业部）基础资料中选择	选择框	50	否	
管理车队	线路所属车队名称	选择框	50	否	
线路简码	线路简码 	文本框	10	否	
1.8.4	发车标准列表信息
字段名称 	说明 	输入限制	长度	是否必填	备注
班次	线路班次	N/A	2	N/A	
准点发车时间	准点发车时间，格式：08:00,09:30	N/A	20	N/A	
准点到达时间	准点到达时间，格式：08:00,09:30	N/A	20	N/A	
时效类型	时效类型：卡车、普车两种				
备注	备注				
1.8.5	发车标准信息
字段名称 	说明 	输入限制	长度	是否必填	备注
班次	发车班次，自然数，用户自行维护	N/A	2	N/A	
出发站	出发站名称，自动带出	N/A	50	N/A	
到达站	到达站名称，自动带出 	N/A	50	N/A	
准点出发时间	准点发车时间，格式：08:00,09:30	时间选择框	20	是	
准点到达时间	准点到达时间，采用T+1格式，T是指时间，如：00:30；+1天是指当天时间加1天，如：00:30+1，表示第二天的00:30；XX天用下拉框表示，如果为0天，默认为当天时间，如：22:00+0天，用22:00表示	时间选择框	20	是	
时效类型	时效类型：分为卡车和普车两种				
备注	备注	文本	200	否	

1.9	非功能性需求
使用量	
2012年全网估计用户数	
响应要求（如果与全系统要求 不一致的话）	
使用时间段	
高峰使用时间段	

1.10	接口描述
接口名称 	对方系统（外部系统或内部其他模块）	接口描述
		

		

dp-foss-综合管理系统用例-新增_修改_作废_查询走货路径(运作到运作)-v1.12		
		
修订记录 
日期 	修订内容 	修订人员 	版本号 
2012-7-2	新增 	谢艳涛	V0.1
2012-7-3	提交CITA审核	谢艳涛	V0.5
2012-7-5	根据评审意见修改：增加“是否可以打木架”、“打木架外场”属性	谢艳涛	V0.6
2012-7-8	根据ITA王偕旭要求修改：增加“是否默认走货路径”、“出发网点组”、“到达网点组”属性	谢艳涛	V0.7
2012-8-2	通过业务部门审核签字版本升级到V0.9	谢艳涛	V0.9
2012-12-1	根据变更需求修改“运输性质”，业务规则SR-1、SR-3，把机场修改为“空运代理网点”,修改业务规则SR-9,删除SR-10	谢艳涛	V1.11
2013-1-4	根据变更需求在新增/修改线路界面增加“生效/失效”按钮，增加业务规则SR-10;	谢艳涛	V1.12

1.	SUC-187-新增_修改_作废_查询走货路径（运作到运作）
1.1	相关业务用例
BUC_FOSS_5.10.20_022 调整走货线路。

1.2	用例描述
走货路径（运作到运作）主要用于计算并调整走货路径、调整货物走货路径、重新计算走货路径等。本用例用于对走货路径（运作到运作）基础资料的维护，包括新增、修改、作废、查询等操作。
1.3	用例条件
条件类型	描述	引用系统用例
前置条件	1、	行政组织基础资料完备
2、	运作到运作线路信息基础资料完备
3、	空运代理网点机场信息基础资料完备
4、	偏线代理基础资料完备
5、	始发线路基础资料完备
6、	到达线路基础资料完备	SUC-85 DP-FOSS-综合管理系统用例-修改_查询行政组织业务属性
SUC-218  新增_修改_作废_查询运作到运作线路信息
SUC-72052  新增_修改_作废_查询空运代理网点机场信息 
SUC-649  新增_修改_作废_查询偏线代理
SUC-284  新增_修改_作废_查询始发线路
SUC-740  新增_修改_作废_查询到达线路
后置条件	1、	为计算并调整走货路径、调整货物走货路径、重新计算走货路径等系统用例提供运作到运作走货路径基础资料查询	SUC-611  计算并调整走货路径
SUC-429  调整货物走货路径
SUC-748  重新计算走货路径
1.4	操作用户角色
操作用户	描述
线路管理员	线路管理员对“走货路径（运作到运作）基础资料”进行新增，修改，作废，查询操作。
1.5	界面要求
1.5.1	表现方式
Web页面
1.5.2	界面原型-主界面
                                图一：走货路径（运作到运作）管理主界面
1.5.3	界面描述-主界面
1.	功能按钮区域
1)	新增按钮：点击新增按钮进入新增界面，参见【图二：走货路径（运作到运作）新增/修改界面】。
2)	查询按钮：输入查询条件，点击查询按钮，系统返回查询结果，刷新查询列表。
3)	重置按钮：点击重置按钮，清空查询条件。
4)	作废按钮：选中列表中一行或多行记录，点击作废按钮，弹出确认提示框，作废时同时把该走货路径包含的线路移除；或点击各行的作废按钮，弹出确认提示框。作废成功后会弹出作废成功的提示框，作废时同时把该走货路径包含的线路移除；若作废失败，弹出作废失败的提示框，并提示失败原因。
5)	查看详细信息：双击该行记录，弹出一个窗口，可以查看该记录的详细信息。
6)	修改按钮：点击各行的修改按钮，进入修改界面，参见【图二：走货路径（运作到运作）新增/修改界面】。
7)	分页按钮：实现分页功能。
2.	列表区域
1)	列表区域默认不显示，点击查询按钮，根据查询条件显示列表数据。
2)	列表中显示：出发站、到达站、运输性质、时效（小时）、是否可以打木架、打木架外场、是否默认走货路径、状态。
3.	字段输入区域
1)	查询条件包括出发站、到达站、运输性质。
1.1	出发站：选择框，支持手动输入模糊查询，也支持从行政组织（外场、空运总调）基础资料中选择；
1.2	到达站：选择框，支持手动输入模糊查询，也支持从行政组织（外场）、偏线代理、空运代理网点机场信息基础资料中选择；
1.3	运输性质：下拉框，包括：全部、取第三级产品类型（精准卡航，精准城运，精准汽运（长途），精准汽运（短途），汽运偏线，精准空运）（整车不可以选，需要排除掉）精准汽运、精准卡航、汽运偏线、精准空运。默认为全部。
1.31.4	状态：下拉框，包括：全部、生效、失效。默认为全部。

1.5.4	界面原型-新增/修改界面
  图二：走货路径（运作到运作）新增/修改界面
1.5.5	界面描述-新增/修改界面
1.	字段输入区域
1)	运输性质： 必填，下拉框，包含取第三级产品类型（精准卡航，精准城运，精准汽运（长途），精准汽运（短途），汽运偏线，精准空运）（整车不可以选，需要排除掉）精准汽运、精准卡航、汽运偏线、精准空运。
2)	出发站：必填，选择框，从行政组织（外场、空运总调）基础资料中选择
3)	到达站：必填，选择框，从行政组织（外场）、偏线代理、机场空运代理网点、可空运到达的营业部信息基础资料中选择
4)	时效（小时）：根据添加的线路时效（小时）+经停时间（小时）计算获取。
5)	是否默认走货路径：选择框，默认选中，该走货路径是否为默认走货路径；
6)	是否可以打木架：必填，单选按钮，是或否，默认为否，若值为“否”，单选按钮为只读状态，不允许选择“是”；若值为“是”，单选按钮可以选择为“否”；
7)	打木架外场：下拉框，默认为不显示；与“是否可以打木架”联动，若“是否可以打木架”值为“否”，“打木架外场”隐藏；若“是否可以打木架”值为“是”，“打木架外场”显示，下拉框里会把拥有“可以打木架”属性的外场查询出来，默认为第一个具有“可以打木架” 属性的外场；
8)	备注：选填，文本
9)	出发站对应营业部：下拉列表，显示所有配置过始发线路到达出发站的营业部与“是否默认走货路径”联动，如果“是否默认走货路径”选中，“出发站对应营业部”为所有不是默认的始发配载部门为“出发站”的营业部；否则，“出发站对应营业部”显示所有始发配载部门为“出发站”的营业部。
10)	出发网点组：下拉列表，列表中显示该“出发网点组”所属的营业部，从“出发站对应营业部”下拉列表中选择；
11)	到达站对应营业部：下拉列表，显示所有配置过到达线路到达该到到达站的营业部与“是否默认走货路径”联动，如果“是否默认走货路径”选中，“到达站对应营业部”显示所有不是默认的到达配载部门为“到达站”的营业部；否则，“到达站对应营业部”显示所有到达配置部门为“到达站”的营业部；
12)	到达网点组：下拉列表，列表中显示该“到达网点组”所属的营业部，从“到达站对应营业部”下拉列表中选择。
13)	网点组列表详见【网点组列表数据】
14)	线路信息列表详见【线路信息列表数据】
2.	功能按钮区域
1)	出发网点组右选（--->）按钮：选中“出发站对应营业部”下拉列表中的营业部，点击右选按钮，选中的营业部会在“出发网点组”下拉列表中显示。
2)	出发网点组右全选（-->>）按钮：点击右全选按钮，“出发站对应营业部”下拉列表中的营业部全部会在“出发网点组”下拉列表中显示。
3)	出发网点组左移（<---）按钮：选中“出发网点组”下拉列表中的营业部，点击左移按钮，选中的营业部会在“出发网点组”下拉列表中清除；
4)	出发网点组左全移（<<--）按钮：点击左全移按钮，“出发网点组”下拉列表中的营业部全部清除；
5)	到达网点组右选（--->）按钮：选中“到达站对应营业部”下拉列表中的营业部，点击右选按钮，选中的营业部会在“到达网点组”下拉列表中显示
6)	到达网点组右全选（-->>）按钮：点击右全选按钮，“到达站对应营业部”下拉列表中的营业部全部会在“到达网点组”下拉列表中显示。
7)	到达网点组左移（<---）按钮：选中“到达网点组”下拉列表中的营业部，点击左移按钮，选中的营业部会在“到达网点组”下拉列表中清除；
8)	到达网点组左全移（<<--）按钮：点击左全移按钮，“到达网点组”下拉列表中的营业部全部清除
9)	添加网点组按钮：点击添加网点组按钮，先判断走货路径信息是否已经保存，如果信息还未保存，弹出提示框，提示需要先保存走货路径信息才能添加线路信息；如果信息已经保存成功，进行添加网点组操作
10)	修改网点组按钮：点击修改网点组按钮，先判断走货路径信息是否已做修改，如果走货路径信息已做修改，弹出提示框，提示先保存走货路径信息才能进行修改网点组操作，则弹出【图三：修改网点组界面】，进行修改网点组操作；
11)	作废网点组按钮：点击作废网点组按钮，先判断走货路径信息是否已做修改，如果走货路径信息已做修改，弹出提示框，提示先保存走货路径信息才能作废网点组操作；
12)	添加线路按钮：点击添加线路按钮，先判断走货路径信息是否已经保存，如果信息还未保存，弹出提示框，提示需要先保存走货路径信息才能添加线路信息；如果信息已经保存成功，则弹出【图四：线路信息新增/修改界面】，进行添加线路操作。
13)	修改线路按钮：点击修改线路按钮，先判断走货路径信息是否已做修改，如果走货路径信息已做修改，弹出提示框，提示先保存走货路径信息才能进行修改线路信息操作，则弹出【图四：线路信息新增/修改界面】，进行修改线路操作。
14)	移除线路按钮：选择要移除的线路，点击移除线路按钮，先判断走货路径信息是否已做修改，如果走货路径信息已做修改，弹出提示框，提示先保存走货路径信息才能移除线路信息。
15)	保存按钮：点击保存按钮，需要提示用户是否保存成功，若保存成功，关闭当前界面，返回主界面；若保存失败，提示用户保存失败以及失败原因，不关闭当前界面
16)	重置按钮：点击重置按钮，回到当前界面的初始状态。
17)	取消按钮：点击取消按钮，如果当前界面数据未保存，提示“界面数据不为空，是否退出”，点击“是”退出当前界面，返回主界面；否则，不关闭当前界面。
17)18)	生效或失效按钮：点击失效按钮，走货路径状态修改为失效状态，失效按钮隐藏，生效按钮显示；点击生效按钮，在后台对业务规则SR-6进行验证，走货路径状态修改为生效状态，生效按钮隐藏，失效按钮显示。
1.5.6	界面原型-修改网点组
 
                                                                 图三：修改网点组界面
1.5.7	界面描述-修改网点组
1、	字段输入区域
1)	出发站对应营业部：下拉列表，下拉列表中显示所有始发配置部门为“出发站”的营业部
2)	出发网点组：必填，下拉列表，列表中显示该“出发网点组”所属的营业部，从“出发站对应营业部”下拉列表中选择
3)	到达站对应营业部：下拉列表框，下拉列表中显示所有到达配置部门为“到达站”的营业部；
4)	到达网点组：必填，下拉列表，列表中显示该“到达网点组”所属的营业部，从“到达站对应营业部”下拉列表中选择。
2、功能按钮区域
1)	保存按钮：点击保存按钮，需要提示用户是否保存成功，若保存成功，关闭当前界面，返回主界面；若保存失败，提示用户保存失败以及失败原因，不关闭当前界面
2)	重置按钮：点击重置按钮，回到当前界面的初始状态。
3)	取消按钮：点击取消按钮，如果当前界面数据未保存，提示“界面数据不为空，是否退出”，点击“是”退出当前界面，返回主界面；否则，不关闭当前界面；
1.5.8	界面原型-新增/修改线路信息
 
                                                  图四：线路信息新增/修改界面
1.5.9	界面描述-新增/修改线路信息
2、	字段输入区域
5)	序号：必填，数字，该线路在走货路径中所占的顺序
6)	线路名称：必填，选择框，从运作到运作线路信息基础资料中选择，参见业务规则SR-3
7)	线路简码：与“线路名称”联动带出 
8)	出发站：必填，下拉框，根据所选线路动态获取该线路包含线段所有的出发站。默认选中线路的出发站。
9)	到达站：必填，下拉框，根据所选线路动态获取该线路包含线段所有的到达站。默认选中线路的到达站。
10)	时效（小时）：根据走货路径的“运输性质”，所选“线路名称”以及“出发站”，“到达站”，由系统自动计算。
11)	经停时间（小时）：必填，数字，默认为0，单位：小时
2、功能按钮区域
4)	保存按钮：点击保存按钮，需要提示用户是否保存成功，若保存成功，关闭当前界面，返回主界面；若保存失败，提示用户保存失败以及失败原因，不关闭当前界面
5)	重置按钮：点击重置按钮，回到当前界面的初始状态。
6)	取消按钮：点击取消按钮，如果当前界面数据未保存，提示“界面数据不为空，是否退出”，点击“是”退出当前界面，返回主界面；否则，不关闭当前界面。
1.6	操作步骤
1.6.1	添加走货路径操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入走货路径（运作到运作）管理主界面	【走货路径列表信息】	
2	点击新增按钮，进入新增/修改界面		
3	输入走货路径（运作到运作）详细信息，并选择线路，点击保存。
参见业务规则SR-1、SR-2、SR-7、SR-8、SR-9、SR-10	【走货路径新增/修改信息】【线路列表信息】	
4	返回走货路径（运作到运作）管理主界面		

序号	扩展事件	相关数据	备注
3a	点击取消按钮，退出当前界面，返回主界面		
3b	若保存失败，需提示用户保存失败以及失败原因，继续停留在新增界面		

1.6.2	修改走货路径操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入走货路径管理主界面	【走货路径列表信息】	
2	点击修改按钮，进入新增/修改界面		
3	修改走货路径详细信息，点击保存
参见业务规则SR-1、SR-2、SR-7、SR-8、SR-9、SR-10	【走货路径新增/修改信息】【线路列表信息】	
4	返回走货路径管理主界面		

序号	扩展事件	相关数据	备注
3a	点击取消按钮，退出当前界面，返回主界面		
3b	若保存失败，需提示用户保存失败以及失败原因，继续停留在修改界面		

1.6.3	作废走货路径操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入走货路径管理主界面	【走货路径列表信息】	
2	选择一行或者多行记录，点击作废按钮。		作废时同时把该走货路径下面的线路一起移除。
3	点击确定按钮。		

序号	扩展事件	相关数据	备注
2a	点击取消按钮，退出当前界面，返回主界面		
2b	若作废失败，需提示用户作废失败以及失败原因		

1.6.4	查询走货路径操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入走货路径管理主界面	【走货路径列表信息】	
2	输入查询条件，点击查询按钮。参见业务规则SR-5	【走货路径查询条件】	系统返回查询结果

1.6.5	添加线路信息操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入【图二：走货路径（运作到运作）新增/修改界面】	【走货路径新增/修改信息】【线路列表信息】	
2	点击添加线路按钮，弹出【图四：线路信息新增/修改界面】		
3	输入线路详细信息，点击保存。
参见业务规则SR-3、SR-4	【线路新增/修改信息】	
4	返回到【图二：运作到运作走货路径新增/修改界面】		

序号	扩展事件	相关数据	备注
3a	点击取消按钮，退出当前界面，返回主界面		
3b	若保存失败，需提示用户保存失败以及失败原因，继续停留在新增界面		

1.6.6	修改线路信息操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入【图二：走货路径（运作到运作）新增/修改界面】	【走货路径新增/修改信息】【线路列表信息】	
2	点击修改按钮，，弹出【图四：线路信息新增/修改界面】		
3	修改线路详细信息，点击保存
参见业务规则SR-3、SR-4	【线路新增/修改信息】	
4	返回到【图二：走货路径（运作到运作）新增/修改界面】		

序号	扩展事件	相关数据	备注
3a	点击取消按钮，退出当前界面，返回主界面		
3b	若保存失败，需提示用户保存失败以及失败原因，继续停留在修改界面		

1.6.7	移除线路操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入【图二：走货路径（运作到运作）新增/修改界面】	【走货路径新增/修改信息】【线路列表信息】	
2	选择一行或者多行记录，点击移除按钮。		弹出提示框
3	点击确定按钮。		

序号	扩展事件	相关数据	备注
2a	点击取消按钮，退出当前界面，返回主界面		
2b	若作废失败，需提示用户作废失败以及失败原因		

1.6.8	添加网点组操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入【图二：走货路径（运作到运作）新增/修改界面】	【走货路径新增/修改信息】【线路列表信息】【网点组列表数据】	
2	选择出发站对应营业部下拉列表中的营业部，点击右选（-->）按钮		选择的营业部在出发网点组下拉列表中显示
3	选择到达站对应营业部下拉列表中的营业部，点击右选（-->）按钮		选择的营业部在到达网点组下拉列表中显示
4	点击添加网点组按钮，参见业务规则SR-10		把出发网点组和到达网点组保存到数据库
5	刷新【图二：走货路径（运作到运作）新增/修改界面】		划分好的出发网点组和到达网点组在网点组列表中显示

序号	扩展事件	相关数据	备注
4a	若保存失败，需提示用户保存失败以及失败原因，继续停留在【图二：走货路径（运作到运作）新增/修改界面】		

1.6.9	修改网点组操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入【图二：走货路径（运作到运作）新增/修改界面】	【走货路径新增/修改信息】【线路列表信息】【网点组列表数据】	
2	点击修改按钮，，弹出【图三：修改网点组界面】		
3	修改网点组详细信息，点击保存, 参见业务规则SR-10		
4	返回到【图二：走货路径（运作到运作）新增/修改界面】		

序号	扩展事件	相关数据	备注
3a	点击取消按钮，退出当前界面，返回主界面		
3b	若保存失败，需提示用户保存失败以及失败原因，继续停留在修改界面		

1.6.10	作废网点组操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入【图二：走货路径（运作到运作）新增/修改界面】	【走货路径新增/修改信息】【线路列表信息】【网点组列表数据】	
2	点击移除按钮。		弹出提示框
3	点击确定按钮。		

序号	扩展事件	相关数据	备注
2a	点击取消按钮，退出当前界面，返回主界面		
2b	若作废失败，需提示用户作废失败以及失败原因		

1.7	业务规则
序号	描述
SR-1	新增/修改界面，若“运输性质”为精准汽运、精准卡航，“出发站”只能从行政组织（外场）基础资料中选择，“到达站”只能从行政组织（外场）基础资料中选择；若“运输性质”为汽运偏线，“出发站”只能从行政组织（外场）基础资料中选择，“到达站”只能从偏线代理基础资料中选择；若“运输性质”为精准空运，“出发站”只能从行政组织（空运总调或外场）基础资料中选择， 行政组织（空运总调）基础资料中选择，“到达站”只能从机场空运代理网点或可空运到达的营业部信息基础资料中选择；
SR-2	新增/修改界面，时效（小时），根据走货路径的“运输性质”，所选“线路名称”以及“出发站”，“到达站”，由系统自动计算
SR-3	新增/修改线路页面，走货路径可以任意选取运作到运作线路，线路选择框需要区分汽运，空运，偏线3个tab供用户选择“线路名称”根据走货路径的“运输性质”不同从运作到运作线路基础资料中选择不同的线路，遵循以下规则：
1、	若“运输性质”为精准汽运/精准卡航，“线路名称”只能从运作到运作线路基础资料中选择“线路类型”为专线的线路；
2、	若“运输性质”为汽运偏线，“线路名称”只能从运作到运作线路基础资料中选择“线路类型”为偏线或专线的线路，且走货路径中至少包含一条偏线线路；
3、1、	若“运输性质”为精准空运，“线路名称”只能从运作到运作线路基础资料中选择“线路类型”为空运的线路；
SR-4	新增/修改线路页面，“出发站”根据所选线路动态获取该线路包含线段所有的出发站，以下拉框显示，默认选中线路的出发站。；“到达站”根据所选线路动态获取该线路包含线段所有的到达站，以下拉框显示，默认选中线路的到达站。；“时效（小时）” 根据走货路径的“运输性质”，所选“线路名称”以及“出发站”，“到达站”，由系统自动计算
SR-5	查询支持模糊查询，条件“出发站”支持手动输入模糊查询，从行政组织（外场、空运总调）基础资料中选择；“到达站”从行政组织（外场）、偏线代理、机场空运代理网点信息基础资料中选择；“运输性质”默认为全部，包含：精准卡航，精准城运，精准汽运（长途），精准汽运（短途），汽运偏线，精准空运精准汽运、精准卡航、汽运偏线、精准空运。
SR-6	走货路径的第一段线路的“出发站”必须与走货路径的“出发站”一致，走货路径的最后一段线路的“到达站”必须与走货路径的“到达站”一致，走货路径第n段线路的“出发站”必须与走货路径第n-1段线路的“到达站”一致；
SR-7	走货路径的线路中，选择的“到达站”在线路中的站点位置必须在“出发站”的站点位置之后；
SR-8	新增/修改线路页面，“是否可以打木架”单选按钮，是或否，默认为否，若值为“否”，单选按钮为只读状态，不允许选择“是”；若值为“是”，单选按钮可以选择为“否”；“打木架外场”与“是否可以打木架”联动，若“是否可以打木架”值为“否”，“打木架外场”隐藏；若“是否可以打木架”值为“是”，“打木架外场”显示，下拉框里会把拥有“可以打木架”属性的外场查询出来，默认为第一个具有“可以打木架” 属性的外场；
SR-9	新增/修改页面，相同运输性质，出发站和到达站之间，只能有一条默认走货路径。 
“出发站对应营业部”、“到达站对应营业部”与“是否默认走货路径”联动，
若“是否默认走货路径”选中，：
1、“出发站对应营业部”为所有不是默认的始发配载部门为“出发站”的营业部；
2、“到达站对应营业部”显示所有不是默认的到达配载部门为“到达站”的营业部；否则：
1、“出发站对应营业部”显示所有始发配载部门为“出发站”的营业部；
2、“到达站对应营业部”显示所有到达配置部门为“到达站”的营业部；
SR-10	新增/修改页面
1、当运输性质为“汽运偏线”或者“精准空运”且走货路径不是默认路径时，“出发网点组”不能为空，“到达网点组”为空；
2、当运输性质为“精准汽运”或者“精准卡航”且走货路径不是默认路径时，“出发网点组”和“到达网点组”均不能为空
SR-10	走货路径的状态在“失效”状态下，不能使用，只有在“生效”状态下才能使用；修改走货路径时，必须把状态修改为“失效”状态，才能进行其他数据修改。

1.8	数据元素
1.8.1	走货路径新增/修改信息
字段名称 	说明 	输入限制	输入项提示文本	长度	是否必填	备注
运输性质	运输性质,包含：精准卡航，精准城运，精准汽运（长途），精准汽运（短途），汽运偏线，精准空运精准汽运、精准卡航、汽运偏线、精准空运	下拉框		10	是	参见业务规则：SR-1
出发站	出发站名称	选择框		50	是	参见业务规则：SR-1
到达站	到达站名称	选择框		50	是	参见业务规则：SR-1
时效（小时）	根据走货路径的“运输性质”和所选“线路名称”联动带出	N/A		4	N/A	参见业务规则：SR-2
是否默认走货路径	该走货路径是否为营业部的默认走货路径	选择框		2	是	默认选中
是否可以打木架	是否可以允许打木架，是或否	单选框		2	否	默认为否，参见业务规则：SR-8
打木架外场	具有打木架功能的外场	下拉框		10	是	参见业务规则：SR-8
备注	备注	文本		200	否	
出发站对应营业部	出发站对应营业部	下拉列表		100	N/A	
出发网点组	出发网点组	下拉列表				表示哪些营业部划分为一出发网点组
到达站对应营业部	到达站对应营业部	下拉列表		100	N/A	
到达网点组	到达网点组	下拉列表		100		表示哪些营业部划分为一到达网点组
1.8.2	走货路径列表信息
字段名称 	说明 	输入限制	长度	是否必填	备注
出发站	出发站名称	N/A	50	N/A	
到达站	到达站名称	N/A	50	N/A	
运输性质	运输性质,包含：精准卡航，精准城运，精准汽运（长途），精准汽运（短途），汽运偏线，精准空运精准汽运、精准卡航、汽运偏线、精准空运 	N/A	10	N/A	
时效（小时）	走货路径的运行时效，单位：小时	N/A	50	N/A	
是否可以打木架	是否可以允许打木架，是或否	N/A	2	N/A	
打木架外场	具有打木架功能的外场	N/A	10	N/A	
是否默认走货路径	该走货路径是否为营业部的默认走货路径	N/A	2	N/A	
状态	状态,包括生效、失效两种状态	N/A	10	N/A	
1.8.3	走货路径查询条件
字段名称 	说明 	输入限制	长度	是否必填	备注
出发站	出发站名称	选择框	50	否	参见业务规则：SR-5
到达站	到达站名称	选择框	50	否	参见业务规则：SR-5
运输性质	运输性质,默认全部	下拉框	10	否	参见业务规则：SR-5
状态	状态,包括全部、生效、失效，默认为全部	下拉框	10	否	
1.8.4	网点组列表数据
字段名称 	说明 	输入限制	长度	是否必填	备注
出发网点组	出发网点组，包含作为一组的营业部	N/A	1000	N/A	
到达网点组	到达网点组，包含作为一组的营业部	N/A	1000	N/A	

1.8.5	线路列表信息
字段名称 	说明 	输入限制	长度	是否必填	备注
序号	该线路在走货路径中所占的顺序	N/A	2	N/A	
线路名称	中转到中转线路名称，从中转到中转线路信息基础资料中选择	N/A	50	N/A	
线路简码	线路简码	N/A	10	N/A	
出发站	出发站名称	N/A	50	N/A	
到达站	到达站名称	N/A	50	N/A	
时效（小时）	中转到中转线路的运行时效，单位小时	N/A	4	N/A	
经停时间（小时）	停留时间，单位:小时	N/A	4	N/A	

1.8.6	线路新增/修改信息
字段名称 	说明 	输入限制	输入项提示文本	长度	是否必填	备注
序号	该线路在走货路径中所占的顺序	数字		2		
线路名称	中转到中转线路名称，从中转到中转线路信息基础资料中选择	选择框		50	是	参见业务规则：SR-3
线路简码	线路简码	N/A		10	N/A	自动带出
出发站	出发站名称	选择框		50	是	
到达站	到达站名称	选择框		50	是	
时效（小时）	中转到中转线路的运行时效，单位小时	N/A		4	N/A	自动带出
经停时间（小时）	停留时间，单位:小时	数字		4	是	
1.9	非功能性需求
使用量	
2012年全网估计用户数	
响应要求（如果与全系统要求 不一致的话）	
使用时间段	
高峰使用时间段	

1.10	接口描述
接口名称 	对方系统（外部系统或内部其他模块）	接口描述

dp-foss-综合管理系统用例-新增_修改_作废_查询始发线路-v1.04

修订记录 	
日期 	修订内容 	修订人员 	版本号 
2012-6-15	新增	谢艳涛	V0.1
2012-6-19	根据王偕旭点评修改	谢艳涛	V0.2
2012-6-28	根据赵鹏点评修改： “准点到达时间”采用T+1的格式进行表示；增加一些业务规则	谢艳涛	V0.2
2012-6-30	根据王偕旭要求添加：“线路简码”、“管理车队”等属性	谢艳涛	V0.3
2012-7-2	提交CITA审核	谢艳涛	V0.5
2012-7-23	根据评审会议评委意见修改：“线路名称”改为自动生成，修订生成业务规则	谢艳涛	V0.6
2012-8-2	通过业务部门审核签字版本升级到V0.9	谢艳涛	V0.9
2012-10-12	根据变更需求修改：在图二界面中添加“是否默认始发线路”字段及单选按钮；去掉规则SR5中“精确查询”	谢艳涛	V1.01
2012-10-16	根据变更需求增加导出功能：在图一界面增加“导出”按钮	谢艳涛	V1.02
2012-12-01	根据变更需求把发车标准“班次”自动生成改为自行维护	谢艳涛	V1.03
2012-12-11	根据变更需求修改发车标准，增加“时效类型”：普车、卡车两种	谢艳涛	V1.04

1.	SUC-284-新增_修改_作废_查询始发线路
1.1	相关业务用例
BUC_FOSS_5.20.30_530 开单收货
BUC_FOSS_5.20.20_520 接货运单开单
1.2	用例描述
始发线路即经营到运作的线路，主要用于查询营业部的始发配载部门，便于收货开单使用。本用例主要用于对始发线路（经营到运作的线路）基础资料维护，包括新增、修改、作废、查询操作。
1.3	用例条件
条件类型	描述	引用系统用例
前置条件	1、	行政组织基础资料完备
2、	行政区域基础资料完备	SUC-33 DP-FOSS-综合管理系统用例-新增_修改_作废_查询行政区域
SUC-85 DP-FOSS-综合管理系统用例-修改_查询行政组织业务属性

后置条件	1、	为SUC-486 生成运单系统用例提供始发线路基础资料查询	SUC-486 生成运单

1.4	操作用户角色
操作用户	描述
线路维护人员	线路维护人员对始发线路进行新增，修改，作废，查询操作。
1.5	界面要求
1.5.1	表现方式
Web页面
1.5.2	界面原型-主界面
 
 
图一：始发线路主界面
1.5.3	界面描述-主界面
1.	功能按钮区域
1)	新增按钮：点击新增按钮进入新增界面，参见【图二：新增/修改始发线路】。
2)	导出按钮：点击导出按钮，可以导出始发线路的所有数据至Excel表中
3)	查询按钮：输入查询条件，点击查询按钮，系统返回查询结果，刷新查询列表。
4)	重置按钮：点击重置按钮，清空查询条件。
5)	作废按钮：选中列表中一行或多行记录，点击作废按钮，选中的记录被作废；或点击各行的作废图标，作废各行记录，作废时连同作废该线路对应的发车标准，需要弹出确认提示框。
6)	查看详细信息：鼠标移动到列表中某一条记录，双击该行记录，弹出一个窗口，可以查看该记录的详细信息。
7)	修改按钮：点击各行的修改按钮，进入修改界面，参见【图二：新增/修改始发线路】。
8)	分页按钮：实现分页功能。
2.	列表区域
1)	列表区域默认不显示，点击查询按钮，根据查询条件显示列表数据。
2)	列表中显示：线路名称、始发站、到达站、始发城市、运输类型、是否默认始发线路。
3.	字段输入区域
1)	查询条件包括线路名称、始发站、到达站、始发城市、运输类型、管理车队、线路简码。
1.1	线路名称：文本，支持模糊查询
1.2	始发站：选择框，支持手动输入模糊查询，也支持从行政组织（营业部）基础资料中选取
1.3	到达站：选择框，支持手动输入模糊查询，也支持从行政组织（外场、空运总调）基础资料中选取
1.4	始发城市：选择框，支持手动输入模糊查询，也支持从行政区域（城市）基础资料中选取
1.5	运输类型：下拉框，默认为全部，包括：全部、汽运、空运
1.6	管理车队：选择框，支持手动输入模糊查询，也支持从行政组织（车队）基础资料中选取
1.7	线路简码：文本，支持模糊查询

1.5.4	界面原型-新增/修改始发线路
  
图二：新增/修改始发线路
1.5.5	界面描述-新增和修改始发线路
1.	字段输入区域
1)	线路名称： 自动生成，生成规则：根据所选“始发站”和“到达站”动态生成,如：生成线路名称为XXX营业部-XXX外场 
2)	线路简码：必填，文本，线路简码必须唯一
3)	管理车队：必填，选择框，从行政组织（车队）基础资料中选取
4)	运输类型：必填，下拉框，包含汽运、空运
5)	始发站：必填，选择框，从行政组织（营业部）基础资料中选取
6)	始发城市：与“始发站”联动获取，只读
7)	到达站：必填，选择框，从行政组织（外场、空运总调）基础资料中选取
8)	是否默认始发线路：必填，单选按钮，是或否
9)	线路距离（公里）：必填，数字
10)	备注：选填，文本
2．	 发车标准列表区域
1)          列表中显示：班次、准点出发时间、准点到达时间、时效类型、备注。
3.   功能按钮区域
1)	保存按钮：点击保存按钮，需要提示用户是否保存成功，若保存成功，关闭当前界面，返回主界面；若保存失败，提示用户保存失败以及失败原因，不关闭当前界面。
2)	重置按钮：点击重置按钮，回到当前界面的初始状态。
3)	取消按钮：点击取消按钮，退出当前界面，返回主界面。
4)	新增发车标准按钮：点击新增发车标准按钮，先判断始发线路信息是否已经保存，如果信息还未保存，弹出提醒框，提醒需要保存线路信息才能新增发车标准；如果信息已经保存成功，则弹出【图三：新增和修改发车标准】界面，进行新增操作，详细步骤参见【新增发车标准操作步骤】。
5)	修改按钮：点击修改按钮，先判断线路信息是否已做修改，如果线路信息已做修改，弹出提醒框，提醒先保存线路信息才能修改发车标准，详细步骤参见【修改发车标准操作步骤】；
6)	作废按钮：点击作废按钮，先判断线路信息是否已做修改，如果线路信息已做修改，弹出提醒框，提醒先保存线路信息才能作废发车标准，详细步骤参见【作废发车标准操作步骤】。
7)	查看详细信息：鼠标移动到列表中某一条记录，双击该行记录，弹出一个窗口，可以查看该记录的详细信息。
1.5.6	界面原型-新增/修改发车标准
  
    图三：新增和修改发车标准
1.5.7	界面描述-新增/修改发车标准
1、字段输入区域
1)	班次： 数字，用户自行维护，自然数自动生成，同一条线路上班次从1开始，按照准点出发时间顺序排序。
2)	准点出发时间：必填，时间格式：08:00,09:30等
3)	始发站：自动带出
4)	准点到达时间：必填，采用T+1格式，T是指时间，如：00:30；+1天是指当天时间加1天，如：00:30+1，表示第二天的00:30；XX天用下拉框表示，如果为0天，默认为当天时间，如：22:00+0天，用22:00表示。
5)	到达站：自动带出
5)6)	时效类型：下拉框，包括：普车、卡车两种时效类型；
6)7)	备注：选填
       2、功能按钮区域
              1)          保存按钮：点击保存按钮，需要提示用户是否保存成功，若保存成功，关闭弹出窗口，返回到【图二：新增/修改始发线路】；若保存失败，提示用户保存失败以及失败原因，不关闭弹出窗口。
   2)          重置按钮：点击重置按钮，回到当前界面的初始状态。
 3)          取消按钮：点击取消按钮，关闭当前界面，返回到【图二：新增/修改始发线路】界面。
1.6	操作步骤
1.6.1	添加始发线路操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入始发线路管理主界面	【始发线路列表信息】	
2	点击新增按钮，进入【图二：新增/修改始发线路】界面		
3	输入始发线路详细信息和相关发车标准信息，点击保存。
参见业务规则SR-1、SR-2、SR-3、SR-6、SR-7	【始发线路新增/修改信息】【发车标准列表信息】【发车标准信息】	
4	返回始发线路管理主界面		

序号	扩展事件	相关数据	备注
3a	点击取消按钮，退出当前界面，返回主界面		
3b	若保存失败，需提示用户保存失败以及失败原因，继续停留在新增界面		

1.6.2	修改始发线路操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入始发线路管理主界面	【始发线路列表信息】	
2	点击修改按钮，进入【图二：新增/修改始发线路】界面		
3	修改始发线路详细信息和发车标准信息,点击保存
参见业务规则SR-1、SR-2、SR-3、SR-6、SR-7	【始发线路新增/修改信息】【发车标准列表信息】【发车标准信息】	
4	返回始发线路管理主界面		

序号	扩展事件	相关数据	备注
3a	点击取消按钮，退出当前界面，返回主界面		
3b	若保存失败，需提示用户保存失败以及失败原因，继续停留在修改界面		

1.6.3	作废始发线路操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入始发线路管理主界面	【始发线路列表信息】	
2	选择一行或者多行记录，点击作废按钮。		作废时连同作废该线路对应的发车标准，弹出确认对话框。
3	点击确定按钮。		

序号	扩展事件	相关数据	备注
2a	点击取消按钮，退出当前界面，返回主界面		
2b	若作废失败，需提示用户作废失败以及失败原因		

1.6.4	查询始发线路操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入始发线路管理主界面	【始发线路列表信息】	
2	输入查询条件，点击查询按钮。参见业务规则SR-5	【始发线路查询条件】	系统返回查询结果

1.6.5	新增发车标准操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入【图二：新增/修改始发线路】界面	【始发线路新增/修改信息】【发车标准列表信息】	
2	点击新增发车标准按钮，先判断始发线路信息是否保存，若已保存，弹出【图二：新增/修改发车标准】界面；若未保存，先保存始发线路信息，再点击新增发车标准按钮。		
3	输入发车标准详细信息，点击保存。
参见业务规则SR-1、SR-2、SR-4、SR-8	【发车标准信息】	
4	返回【图二：新增/修改始发线路】界面		

序号	扩展事件	相关数据	备注
3a	点击取消按钮，关闭当前界面，返回【图二：新增/修改始发线路】界面		
3b	若保存失败，需提示用户保存失败以及失败原因，继续停留在新增界面		

1.6.6	修改发车标准操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入【图二：新增/修改始发线路】界面	【始发线路新增/修改信息】【发车标准列表信息】	
2	点击修改发车标准按钮，先判断始发线路信息是否修改，若未修改，弹出【图二：新增/修改发车标准】界面；若已修改，先保存始发线路信息，再点击修改发车标准按钮。		
3	输入发车标准详细信息，点击保存。
参见业务规则SR-1、SR-2、SR-4、SR-8	【发车标准信息】	
4	返回【图二：新增/修改始发线路】界面		

序号	扩展事件	相关数据	备注
3a	点击取消按钮，关闭当前界面，返回【图二：新增/修改始发线路】界面		
3b	若保存失败，需提示用户保存失败以及失败原因，继续停留在修改界面		

1.6.7	作废发车标准操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入【图二：新增/修改始发线路】界面	【【始发线路新增/修改信息】【发车标准列表信息】	
2	选择一行记录，点击作废按钮。		弹出确认对话框。
3	点击确定按钮。		

序号	扩展事件	相关数据	备注
2a	点击取消按钮，退出当前界面，返回主界面		
2b	若作废失败，需提示用户作废失败以及失败原因		

1.7	业务规则
序号	描述
SR-1	“始发站”不支持手动输入，只支持从行政组织（营业部）基础资料中选取； 
SR-2	“到达站”不支持手动输入，只支持从行政组织（外场、空运总调）基础资料中选取；若运输类型为“汽运”，则到达部门只能是外场，若运输类型为“空运”，则到达部门可以是外场或空运总调。
SR-3	“始发城市”与“始发站”联动获取，只读。
SR-4	时间通过“时间控件”选取，格式：08:00,09:30;“准点到达时间”采用T+1格式，T是指时间，如：00:30；+1天是指当天时间加1天，如：00:30+1，表示第二天的00:30；XX天用下拉框表示，如果为0天，默认为当天时间，如：22:00+0天，用22:00表示
SR-5	查询都支持模糊查询，条件：“始发站”支持手动输入，也支持从行政组织（营业部）基础资料中选取；“到达站”支持手动输入，也支持从行政组织（外场、空运总调）基础资料中选取；“始发城市”支持手动输入，也支持从行政区域（城市）基础资料中选取；“运输类型”默认为全部，包含：汽运、空运、全部。
SR-6	新增和修改页面， “线路简码”不能重复，必须唯一；“线路名称”自动生成，根据所选“始发站”和“到达站”动态生成线路名称，如：广州东平营业部-广州外场
SR-7	新增和修改页面，对于一个“始发站”，只有一个默认配载的“到达站”
SR-8	新增和修改发车标准页面，“班次”为自然数，用户自行维护自动生成，同一条线路上班次从1开始，按照准点出发时间顺序排序； “始发站”自动带出;“到达站”自动带出

1.8	数据元素
1.8.1	始发线路新增/修改信息
字段名称 	说明 	输入限制	输入项提示文本	长度	是否必填	备注
线路名称	线路名称	文本		50	是	
线路简码	线路简码，大写字母表示如：白云区均禾营业部-广州外场 简码为：SFQG，SF表示“始发”	文本		10	是	建议用4个大写英文字母表示
管理车队	线路所属车队名称	选择框		50	是	
运输类型	运输类型,包括:汽运、空运	下拉框		10	是	
始发站	始发站名称，从行政组织（营业部）基础资料中选取	选择框		50	是	
始发城市	始发站所在的城市名称，只读，与“始发站”联动获取	只读		20	是	
到达站	到达站名称，从行政组织（外场、空运总调、上海虹桥营业部）基础资料中选取	选择框		50	是	
是否默认始发线路	是否默认始发线路	单选框		2	是	
线路距离（公里）	始发站与到达站之间的距离，单位：公里	数字		6	是	
备注	备注	文本		100	否	
1.8.2	始发线路列表信息
字段名称 	说明 	输入限制	长度	是否必填	备注
线路名称	线路名称	N/A	50	N/A	
线路简码	线路简码，大写字母表示如：白云区均禾营业部-广州外场 简码为：SFQG，SF表示“始发”	N/A	10	N/A	
始发站	始发站名称	N/A	50	N/A	
始发城市	始发站所在的城市名称	N/A	20	N/A	
到达站	到达站名称	N/A	50	N/A	
运输类型	运输类型,包括:汽运、空运	N/A	20	N/A	
管理车队	线路所属车队名称	N/A	50	N/A	
是否默认始发线路	是否默认始发线路	N/A	10	N/A	
1.8.3	始发线路查询条件
字段名称 	说明 	输入限制	长度	是否必填	备注
线路名称	线路名称	文本	50	否	
始发站	始发站名称，支持手动输入，也支持从行政组织（营业部）基础资料中选取	文本	50	否	
到达站	到达站名称，支持手动输入、也支持从行政组织（外场、空运总调、上海虹桥营业部）基础资料中选取	文本	50	否	
始发城市	始发站所在的城市名称，支持手动输入，也支持从行政区域（城市）基础资料中选取	文本	20	否	
运输类型	运输类型,包括:汽运、空运、全部	下拉框	10	默认为全部	
管理车队	线路所属车队名称	选择框	50	否	
线路简码	线路简码，大写字母表示如：白云区均禾营业部-广州外场 简码为：SFQG，SF表示“始发”	文本框	10	否	
1.8.4	发车标准列表信息
字段名称 	说明 	输入限制	长度	是否必填	备注
班次	线路班次	N/A	2	N/A	自然数，用户自行维护同一条线路上班次从1开始，按照准点出发时间顺序排序
准点发车时间	准点发车时间，格式：08:00,09:30	N/A	20	N/A	
准点到达时间	准点到达时间，采用T+1格式，T是指时间，如：00:30；1是指当天时间加1天，如：00:30+1，表示第二天的00:30; XX天用下拉框表示，如果为0天，默认为当天时间，如：22:00+0天，用22:00表示。	N/A	20	N/A	
时效类型	时效类型：包括普车、卡车两种				
备注	文本	N/A	100	N/A	
1.8.5	发车标准信息
字段名称 	说明 	输入限制	长度	是否必填	备注
班次	线路班次	N/A	2	N/A	自然数，用户自行维护同一条线路上班次从1开始，按照准点出发时间顺序排序
准点发车时间	准点发车时间，从日期控件中选择，控件格式：08:00,09:30	选择框	20	是	
始发站	始发站名称，自动带出 	N/A	50	N/A	
准点到达时间	准点到达时间，采用T+1格式，T是指时间，如：00:30；1是指当天时间加1天，如：00:30+1，表示第二天的00:30; XX天用下拉框表示，如果为0天，默认为当天时间，如：22:00+0天，用22:00表示。	选择框	20	是	
到达站	到达站名称，自动带出 	N/A	50	N/A	
时效类型	时效类型：包括普车、卡车两种	下拉框		是	
备注	备注	文本	200	否	

1.9	非功能性需求
使用量	
2012年全网估计用户数	
响应要求（如果与全系统要求 不一致的话）	
使用时间段	
高峰使用时间段	

1.10	接口描述
接口名称 	对方系统（外部系统或内部其他模块）	接口描述
		



dp-foss-综合管理系统用例-新增_修改_作废_查询运作到运作线路信息-v1.05
修订记录 
日期 	修订内容 	修订人员 	版本号 
2012-5-30	新增   	谢艳涛	V0.1
2012-6-18	根据王偕旭点评修改，并改名为”运作到运作线路信息”	谢艳涛	V0.2
2012-6-30	根据赵鹏点评修改：增加“线路简码”、“管理车队”以及一些业务规则	谢艳涛	V0.3
2012-7-2	根据王偕旭要求修改	谢艳涛	V0.4
2012-7-2	提交CITA审核	谢艳涛	V0.5
2012-7-9	根据评审会议评委向彪意见修改：线路“普车时效”、“卡车时效”修改成可配置	谢艳涛	V0.6
2012-8-2	通过业务部门审核签字版本升级到V0.9	谢艳涛	V0.9
2012-10-16	根据变更需求增加导出功能：在图一界面增加“导出”按钮	谢艳涛	V1.01
2012-11-27	根据变更需求修改业务规则SR-1、SR-2	谢艳涛	V1.02
2012-12-01	根据变更需求把发车标准“班次”自动生成改为自行维护	谢艳涛	V1.03
2012-12-11	根据变更需求发车标准上增加：“时效类型”：卡车、普车	谢艳涛	V1.04
2012-12-29	根据变更需求在新增/修改线路界面增加“生效/失效”按钮，在点击生效按钮对业务规则SR-10在后台进行验证；增加业务规则SR-13;	谢艳涛	V1.05

1.	SUC-218-新增_修改_作废_查询运作到运作线路信息
1.1	相关业务用例
BUC_FOSS_5.20.30_530 开单收货
BUC_FOSS_5.10.20_060 制定班车发车计划
BUC_FOSS_5.10.20_020制定长途发车计划
BUC_FOSS_5.10.20_010 预测货量
BUC_FOSS_5.10.20_090 确定班车发车计划
BUC_FOSS_5.10.20_065 排班（短途班车）
BUC_FOSS_5.10.20_022 调整走货线路
1.2	用例描述
运作到运作线路主要用于货量预测、发车计划制定、排班以及调整走货线路等。本用例用于对运作到运作线路基础资料的维护，包括新增、修改、作废、查询等操作。  
1.3	用例条件
条件类型	描述	引用系统用例
前置条件	1、	行政区域基础资料完备
2、	行政组织基础资料完备
3、	偏线代理基础资料完备	SUC-33 DP-FOSS-综合管理系统用例-新增_修改_作废_查询行政区域
SUC-85 DP-FOSS-综合管理系统用例-修改_查询行政组织业务属性
SUC-649  新增_修改_作废_查询偏线代理

后置条件	1、	为制定运作到运作走货路径、查询/制定发车计划（短途）、修改发车计划（短途）系统用例提供线路基础资料查询。	SUC-187  新增_修改_作废_查询运作到运作走货路径
SUC-216  查询/制定发车计划（短途）
SUC-224修改发车计划（短途）
SUC-62 预测货量
SUC-63  查询预测货量
1.4	操作用户角色
操作用户	描述
线路维护人员	线路维护人员对运作到运作线路基础资料进行新增，修改，作废，查询操作。
1.5	界面要求
1.5.1	表现方式
Web页面
1.5.2	界面原型-主界面
                                 图一：线路基础资料管理主界面
1.5.3	界面描述-主界面
1.	功能按钮区域
1)	新增按钮：点击新增按钮进入新增界面，参见【图二：新增/修改线路（线段信息）界面】。
2)	导出按钮：点击导出按钮，可以导出运作到运作线路的所有数据至Excel表中
3)	查询按钮：输入查询条件，点击查询按钮，系统返回查询结果，刷新查询列表。
4)	重置按钮：点击重置按钮，重置查询条件。
5)	作废按钮：选中列表中一行或多行记录，点击作废按钮，选中的记录被作废；或点击各行的作废按钮，作废各行记录，作废时连同作废该线路对应的发车标准和线段信息，需要弹出确认提示框。
6)	查看详细信息：鼠标移动到列表中某一条记录，双击该行记录，弹出一个窗口，可以查看该记录的详细信息。
7)	修改按钮：点击各行的修改按钮，进入修改界面，参见【图二：新增/修改线路（线段信息）界面】。
8)	分页按钮：实现分页功能。
2.	列表区域
1)	列表区域默认不显示，点击查询按钮，根据查询条件显示列表数据。
2)	列表中显示：线路名称、线路简码、线路类型、出发站、出发城市、到达站、到达城市、线路距离（公里）、管理车队、线路状态。
3.	字段输入区域
1)	查询条件包括线路名称、出发站、到达站、出发城市、到达城市、线路类型、线路简码、管理车队。
1.1	线路名称：文本，支持模糊查询
1.2	出发站：选择框，支持手动输入模糊查询，支持从行政组织（外场、空运总调）基础资料中选取
1.3	到达站：选择框，支持手动输入模糊查询，也支持从行政组织（外场、空运总调）、偏线代理、空运代理网点或可空运到达的营业部基础资料中选取
1.4	出发城市：选择框，支持手动输入模糊查询，也支持从行政区域（城市）基础资料中选取
1.5	到达城市：选择框，支持手动输入模糊查询，也支持从行政区域（城市）基础资料中选取
1.6	线路类型：下拉框，默认为全部，包含：全部、专线、偏线、空运；
1.7	线路简码：文本，支持模糊查询
1.8	管理车队：选择框，支持手动输入模糊查询，也支持从行政组织（车队）基础资料中选取
1.81.9	线路状态：下拉框，包括：全部、生效、失效；
1.5.4	界面原型-新增/修改界面
   
图二：新增/修改线路（线段信息）界面   
图三：新增/修改线路（发车标准）界面
   
图四：新增/修改线路（线路类型为空运）界面
1.5.5	界面描述-新增/修改界面
1.	字段输入区域
1)	线路名称：自动生成，生成规则：根据所选“出发站”和“到达站”动态生成,如：生成线路名称为XXX外场-XXX外场；
2)	线路简码：必填，文本，线路简码必须唯一；
3)	线路类型：必填，下拉框，包含专线、偏线、空运。若线路类型为偏线/空运，“管理车队”、“普车时效（小时）”、“卡车时效（小时）”不可见，线段信息列表、发车标准列表均不不显示，“时效（小时）”可见，见【图四：新增/修改线路（线路类型为空运）界面】
4)	管理车队：必填，选择框，从行政组织（车队）基础资料中选取；
5)	出发站：必填，选择框，不支持手动输入，只支持从行政组织（外场、空运总调）信息基础资料中选取
6)	到达站：必填，选择框，不支持手动输入，支持从行政组织（外场、空运总调）、偏线代理、空运代理网点基础资料中选取
7)	出发城市：只读，与“出发站”联动获取显示
8)	到达城市：只读，与“到达站”联动获取显示
9)	普车时效（小时）：必填，数字
10)	卡车时效（小时）：必填，数字
11)	线路距离（公里）：必填，数字，出发站与到达站间的距离，单位：公里；
12)	描述：选填
2．列表区域
1)	线段列表（图二：新增/修改线路（线段信息）界面）中显示：线段顺序、出发站、出发城市、到达站、到达城市、线段距离（公里）、普车时效（小时）、卡车时效（小时）、经停时间（小时）。
2)	发车标准列表（图三：新增/修改线路（发车标准）界面）中显示：班次、准点出发时间、中转到达货最晚到达时间、时效类型。 
3. 功能按钮区域
1)	保存按钮：点击保存按钮，需要提示用户是否保存成功，若保存成功，关闭当前界面，返回主界面；若保存失败，提示用户保存失败以及失败原因，不关闭当前界面。
2)	重置按钮：点击重置按钮，回到当前界面的初始状态。
3)	取消按钮：点击取消按钮，退出当前界面，返回主界面。
3)4)	生效或失效按钮：点击失效按钮，线路状态修改为失效状态，失效按钮隐藏，生效按钮显示；点击生效按钮，在后台对业务规则SR-10进行验证，线路状态修改为生效状态，生效按钮隐藏，失效按钮显示。
        线段信息面板（【图二：新增/修改线路（线段信息）界面】）
1)	 新增线段按钮：点击新增线段按钮，先判断线路信息是否已经保存，如果信息还未保存，弹出提醒框，提醒需要保存线路信息才能新增线段信息；如果信息已经保存成功，则弹出【图五：新增/修改线段界面】界面，进行新增操作，详细步骤参见【新增线段操作步骤】。
2)	修改线段按钮：点击修改线段按钮，先判断线路信息是否已做修改，如果线路信息已做修改，弹出提醒框，提醒先保存线路信息才能修改线段信息，详细步骤参见【修改线段操作步骤】；
3)	作废按钮：点击作废按钮，先判断线路信息是否已做修改，如果线路信息已做修改，弹出提醒框，提醒先保存线路信息才能作废线段信息，详细步骤参见【作废线段操作步骤】。
4)	查看详细信息：鼠标移动到列表中某一条记录，双击该行记录，弹出一个窗口，可以查看该记录的详细信息。
        发车标准面板（【图三：新增/修改线路（发车标准）界面】）
1)	 新增发车标准按钮：点击新增发车标准按钮，先判断线路信息是否已经保存，如果信息还未保存，弹出提醒框，提醒需要保存线路信息才能新增发车标准；如果信息已经保存成功，则弹出【图五：新增/修改发车标准】界面，进行新增操作，详细步骤参见【新增发车标准操作步骤】。
2)	修改发车标准按钮：点击修改按钮，先判断线路信息是否已做修改，如果线路信息已做修改，弹出提醒框，提醒先保存线路信息才能修改发车标准，详细步骤参见【修改发车标准操作步骤】；
3)	作废按钮：点击作废按钮，先判断线路信息是否已做修改，如果线路信息已做修改，弹出提醒框，提醒先保存线路信息才能作废发车标准，详细步骤参见【作废发车标准操作步骤】。
4)	查看详细信息：鼠标移动到列表中某一条记录，双击该行记录，弹出一个窗口，可以查看该记录的详细信息。
1.5.6	界面原型-新增/修改线段界面
 
                图五：新增/修改线段界面
1.5.7	界面描述-新增/修改线段界面
1、字段输入区域
1)	线段顺序： 必填，数字
2)	线段距离（公里）：必填，数字，出发站与到达站之间的距离，单位公里；
3)	出发站：必填，选择框，不支持手动输入，只支持从行政组织（外场）基础资料中选取，参见业务规则SR-10;
4)	到达站：必填，选择框，不支持手动输入，只支持从行政组织（外场）基础资料中选取, 参见业务规则SR-10;
5)	出发城市：只读，与“出发站”联动获取显示
6)	到达城市：只读，与“到达站”联动获取显示
7)	普车时效（小时）：必填，数字
8)	卡车时效（小时）：必填，数字
9)	经停时间（小时）：必填，数字
10)	描述：选填       
       2、功能按钮区域
1)	保存按钮：点击保存按钮，需要提示用户是否保存成功，若保存成功，关闭弹出窗口，返回到【图二：新增/修改线路（线段信息）界面】；若保存失败，提示用户保存失败以及失败原因，不关闭弹出窗口。
2)	重置按钮：点击重置按钮，回到当前界面的初始状态。
3)	取消按钮：点击取消按钮，关闭当前界面，返回到【图二：新增/修改线路（线段信息）界面】界面。
1.5.8	界面原型-新增/修改发车标准
  
图六：新增/修改发车标准
1.5.9	界面描述-新增/修改发车标准
1、字段输入区域
1)	班次：数字，用户自行维护，自然数自动生成，同一条线路上班次从1开始，按照准点出发时间顺序排序。
2)	准点出发时间：必填，格式：08:00,09:30
3)	出发站：自动带出
4)	到达站：自动带出
5)	中转到达货最晚到达时间：必填，采用T-1格式，如：02:00-1天表示前一天的02:00；
5)6)	时效类型：下拉框，必选，包括：卡车 、普车两种时效类型；
6)7)	备注：选填
       2、功能按钮区域
              1)          保存按钮：点击保存按钮，需要提示用户是否保存成功，若保存成功，关闭弹出窗口，返回到【图三：新增/修改线路（发车标准）界面】；若保存失败，提示用户保存失败以及失败原因，不关闭弹出窗口。
   2)          重置按钮：点击重置按钮，回到当前界面的初始状态。
 3)          取消按钮：点击取消按钮，关闭当前界面，返回到【图三：新增/修改线路（发车标准）界面】。

1.6	操作步骤
1.6.1	新增线路信息操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入线路信息管理主界面	【线路信息列表数据】	
2	点击新增按钮，进入【图二：新增/修改线路（线段信息）界面】		
3	输入线路信息、线段信息和发车标准信息，点击保存。
参见业务规则SR-1、SR-2、SR-3、SR-4,、SR-5、SR-8、SR-11	【线路基础资料信息】【线段信息列表数据】【发车标准列表信息】	
4	返回线路信息管理主界面		

序号	扩展事件	相关数据	备注
3a	点击取消按钮，退出当前界面，返回主界面		
3b	若保存失败，需提示用户保存失败以及失败原因，继续停留在新增界面		

1.6.2	修改线路信息操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入线路信息管理主界面	【线路信息列表数据】	
2	点击修改按钮，进入【图二：新增/修改线路（线段信息）界面】		
3	修改线路信息、线段信息和发车标准信息,点击保存
参见业务规则SR-1、SR-2、SR-3、SR-4,、SR-5、SR-8、SR-11	【线路基础资料信息】【线段信息列表数据】【发车标准列表信息】	
4	返回线路信息管理主界面		

序号	扩展事件	相关数据	备注
3a	点击取消按钮，退出当前界面，返回主界面		
3b	若保存失败，需提示用户保存失败以及失败原因，继续停留在修改界面		

1.6.3	作废线路信息操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入线路信息管理主界面	【线路信息列表数据】	
2	点击作废图标，可以作废当前记录；选择一行记录或多行记录，点击作废按钮，可以作废多条记录。		作废时连同作废该线路对应的线段信息和发车标准，弹出确认对话框。
3	点击确定按钮。		

序号	扩展事件	相关数据	备注
2a	点击取消按钮，退出当前界面，返回主界面		
2b	若作废失败，需提示用户作废失败以及失败原因		

1.6.4	查询线路信息操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入线路信息管理主界面	【线路信息列表数据】	
2	输入查询条件，点击查询按钮。参见业务规则SR-7	【线路信息查询条件】	系统返回查询结果

1.6.5	新增线段操作步骤

序号	基本步骤	相关数据	补充步骤
1	进入【图二：新增/修改线路（线段信息）界面】	【线路基础资料信息】【线段信息列表数据】	
2	点击新增线段按钮，先判断线路信息是否保存，若已保存，弹出【图五：新增/修改线段界面】；若未保存，先保存线路信息，再点击新增线段按钮。		
3	输入线段详细信息，点击保存。
参见业务规则SR-3、SR-10、SR-12	【线段信息】	
4	返回【图二：新增/修改始发线路】界面		


序号	扩展事件	相关数据	备注
3a	点击取消按钮，关闭当前界面，返回【图二：新增/修改线路（线段信息）界面】		
3b	若保存失败，需提示用户保存失败以及失败原因，继续停留在新增界面		

1.6.6	修改线段操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入【图二：新增/修改线路（线段信息）界面】	【线路基础资料信息】【线段信息列表数据】	
2	点击修改线段按钮，先判断线路信息是否修改，若未修改，弹出【图五：新增/修改线段界面】；若已修改，先保存线路信息，再点击修改线段按钮。		
3	输入线段详细信息，点击保存。
参见业务规则SR-3、SR-10、SR-12	【线段信息】	
4	返回【图二：新增/修改线路（线段信息）界面】		

序号	扩展事件	相关数据	备注
3a	点击取消按钮，关闭当前界面，返回【图二：新增/修改线路（线段信息）界面】		
3b	若保存失败，需提示用户保存失败以及失败原因，继续停留在修改界面		
1.6.7	作废线段信息操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入【图二：新增/修改线路（线段信息）界面】	【线路基础资料信息】	
2	选择一行记录，点击作废按钮。 	【线段信息列表数据】	弹出确认对话框
3	点击确定按钮		

序号	扩展事件	相关数据	备注
2a	点击取消按钮，退出当前界面，返回主界面		
2b	若作废失败，需提示用户作废失败以及失败原因		

1.6.8	新增发车标准操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入【图三：新增/修改线路（发车标准）界面】	【线路基础资料信息】【发车标准列表信息】	
2	点击新增发车标准按钮，先判断线路信息是否保存，若已保存，弹出【图六：新增/修改发车标准】界面；若未保存，先保存线路信息，再点击新增发车标准按钮。		
3	输入发车标准详细信息，点击保存。
参见业务规则SR-6、SR-9	【发车标准信息】	
4	返回【图三：新增/修改线路（发车标准）界面】		

序号	扩展事件	相关数据	备注
3a	点击取消按钮，关闭当前界面，返回【图三：新增/修改线路（发车标准）界面】		
3b	若保存失败，需提示用户保存失败以及失败原因，继续停留在新增界面		

1.6.9	修改发车标准操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入【图三：新增/修改线路（发车标准）界面】	【线路基础资料信息】【发车标准列表信息】	
2	点击修改发车标准按钮，先判断线路信息是否修改，若未修改，弹出【图六：新增/修改发车标准】界面；若已修改，先保存始发线路信息，再点击修改发车标准按钮。		
3	输入发车标准详细信息，点击保存。
参见业务规则SR-6、SR-9	【发车标准信息】	
4	返回【图三：新增/修改线路（发车标准）界面】		

序号	扩展事件	相关数据	备注
3a	点击取消按钮，关闭当前界面，返回【图三：新增/修改线路（发车标准）界面】		
3b	若保存失败，需提示用户保存失败以及失败原因，继续停留在修改界面		

1.6.10	作废发车标准操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入【图三：新增/修改线路（发车标准）界面】	【线路基础资料信息】【发车标准列表信息】	
2	选择一行记录，点击作废按钮。		弹出确认对话框。
3	点击确定按钮。		

序号	扩展事件	相关数据	备注
2a	点击取消按钮，退出当前界面，返回主界面		
2b	若作废失败，需提示用户作废失败以及失败原因		


1.7	业务规则
序号	描述
SR-1	新增/修改页面，“出发站”不支持手动输入，只支持从选择框选择，遵循以下规则：1、 若“线路类型”为专线或偏线，出发站只能选择“外场”；
2、	若“线路类型”为空运，出发站只能是“外场”、“空运总调”；
SR-2	新增/修改页面，“到达站”不支持手动输入，只支持从选择框选择，遵循以下规则：1、若“线路类型”为专线，“到达站”只能选择“外场”；
2、若“线路类型”为偏线，“到达站”只能选择“偏线代理”；
3、若“线路类型”为空运，“到达站”只能选择"空运总调"或"空运代理网点"或可空运到达的营业部；
SR-3	新增/修改页面，“出发城市”与“出发站”联动选取，只读；“到达城市”与“到达站”联动选取，只读。“出发城市”字段只读，数据来源于出发站所属城市，“到达城市”字段只读，数据来源于到达站所属城市。
SR-4	新增/修改页面，线路类型：专线、偏线、空运。
SR-5	新增/修改页面，当“线路类型”为“专线”时，时效分为“普车时效”和“卡车时效”；当“线路类型”为“偏线/空运”时，仅提供一个“时效”，并且“管理车队”、线段列表、发车标准均不显示；
SR-6	“中转到达货最晚到达时间”不能大于“准点出发时间”；“中转到达货最晚到达时间”采用T-1格式，如：2：00-1天，表示前一天的2:00；
SR-7	查询都支持模糊查询，条件：“出发站”支持手动输入，也支持从行政组织（外场、空运总调）信息基础资料中选取；“到达站”支持手动输入，也支持从行政组织（外场、空运总调）、偏线代理、空运代理网点基础资料中选取；“出发城市”、“到达城市”支持手动输入，也支持从行政区域（城市）基础资料中选取；“线路类型”默认为全部，包含专线、偏线、空运；“管理车队”支持手动输入，也支持从行政组织（车队）基础资料中选取 
SR-8	新增/修改页面，“线路简码”不能重复，必须唯一；“线路名称”自动生成，根据所选“出发站”和“到达站”动态生成线路名称，如：上海外场-广州外场
SR-9	新增和修改发车标准页面，“班次”自然数字，用户自行维护自动生成，同一条线路上班次从1开始，按照准点出发时间顺序排序； “始发站”自动带出;“到达站”自动带出
SR-10	第一条线段的出发站必须是线路的出发站；最后一条线段的到达站必须是线路的到达站；第n条线段的出发站必须是第n-1条线段的到达站；
SR-11	新增/修改页面，线路的“普车时效（小时）”=线段的“普车时效（小时）”+线段的“经停时间（小时）”，在线段的“普车时效（小时）”、“经停时间（小时）”输入后动态计算生成；线路的“卡车时效（小时）” =线段的“卡车时效（小时）”+线段的“经停时间（小时）”，在线段的“卡车时效（小时）”、“经停时间（小时）”输入后动态计算生成；
SR-12	新增/修改线段页面, “出发站”不支持手动输入，只支持从行政组织（外场）基础资料中选择；“到达站”不支持手动输入，只支持从行政组织（外场）基础资料中选择
SR-13	线路的状态在“失效”状态下，不能使用，只有在“生效”状态下才能使用。修改线路时，必须先把线路状态修改为“失效”状态，才能进行其他数据修改。

1.8	数据元素
1.8.1	线路基础资料信息
字段名称 	说明 	输入限制	输入项提示文本	长度	是否必填	备注
线路名称	线路的名称	文本		50	是	
线路简码	线路简码	文本		10	否	
线路类型	线路类型，包括：专线、偏线、空运	下拉框		10	是	
管理车队	线路所属车队名称，从行政组织（车队）基础资料中选择	选择框		50		若“线路类型”为专线，显示；否则不显示
出发站	出发站名称	文本		50	是	参见业务规则SR-1
到达站	到达站名称	文本		50	是	参见业务规则SR-2
出发城市	出发站所在城市名称，与“出发站”联动	只读		30	是	
到达城市	到达站所在城市名称，与“到达站”联动	只读		30	是	
普车时效（小时）	普车运行时间，单位：小时；线路的“普车时效（小时）”=线段的“普车时效（小时）”+线段的“经停时间（小时）”	数字		4	是	若“线路类型”为专线，显示；否则不显示
卡车时效（小时）	卡车运行时间，单位：小时；线路的“卡车时效（小时）” =线段的“卡车时效（小时）”+线段的“经停时间（小时）”	数字		4	是	若“线路类型”为专线，显示；否则不显示
时效（小时）	时效（小时）	数字		4	是	若“线路类型”为偏线/空运，显示；否则不显示
线路距离（公里）	线路距离，单位：公里	数字		6	是	
描述	描述信息	文本		100	否	
1.8.2	线路信息列表数据
字段名称 	说明 	输入限制	长度	是否必填	备注
线路名称	线路的名称	N/A	50	N/A	
线路简码	线路简码	N/A	10	N/A	
线路类型	线路类型，包括：专线、偏线、空运	N/A	10	N/A	
出发站	出发站名称	N/A	50	N/A	
出发城市	出发站所在城市名称	N/A	30	N/A	
到达站	到达站名称	N/A	50	N/A	
到达城市	到达站所在城市名称	N/A	30	N/A	
线路距离（公里）	线路距离，单位：公里	N/A	6	N/A	
管理车队	线路所属车队名称	N/A	50	N/A	
1.8.3	线路信息查询条件
字段名称 	说明 	输入限制	长度	是否必填	备注
线路名称	线路名称	文本	50	否	
出发站	出发站名称	选择框	50	否	从“外场”、“空运总调”基础资料中选取
到达站	到达站名称	选择框	50	否	从“外场”、“空运总调”、“偏线代理”、、“空运代理网点”基础资料中选取
出发城市	出发站所在城市名称	选择框	30	否	参见业务规则SR-7
到达城市	到达站所在城市名称	选择框	30	否	参见业务规则SR-7
线路类型	线路类型，包含：专线、偏线、空运、全部	下拉框	10	默认全部	
线路简码	线路简码	文本	10	否	
管理车队	线路所属车队名称	选择框	50	否	

1.8.4	线段信息列表数据
字段名称 	说明 	输入限制	长度	是否必填	备注
线段顺序	线段在整条线路中的顺序编号	N/A	2	N/A	
出发站	出发站名称	N/A	50	N/A	
出发城市	出发站所在城市名称	N/A	30	N/A	
到达站	到达站名称	N/A	50	N/A	
到达城市	到达站所在城市名称	N/A	30	N/A	
线段距离（公里）	出发站与到达站之间的距离 单位：公里	N/A	6	N/A	
普车时效（小时）	普车运行时间，单位：小时	N/A	4	N/A	
卡车时效（小时）	卡车运行时间，单位：小时	N/A	4	N/A	
经停时间（小时）	车在中转外场停留时间，单位：小时	N/A	4	N/A	

1.8.5	线段信息
字段名称 	说明 	输入限制	长度	是否必填	备注
线段顺序	线段在整条线路中的顺序编号	数字	2	是	
线段距离（公里）	出发站与到达站之间的距离 单位：公里	数字	6	是	
出发站	出发站名称	选择框	50	是	从行政组织（外场）基础资料中选取
到达站	到达站名称	选择框	50	是	从行政组织（外场）基础资料中选取
出发城市	出发站所在城市名称，与“出发站”联动	只读	30	是	
到达城市	到达站所在城市名称，与“到达站”联动	只读	30	是	
普车时效（小时）	普车运行时间，单位：小时	数字	4	是	
卡车时效（小时）	卡车运行时间，单位：小时	数字	4	是	
经停时间（小时）	车在中转外场停留时间，单位：小时	数字	4	是	
描述	描述	文本	100	否	


1.8.6	发车标准列表信息
字段名称 	说明 	输入限制	长度	是否必填	备注
班次	线路班次，默认为：1	N/A	2	N/A	自然数字，用户自行维护同一条线路上班次从1开始，按照准点出发时间顺序排序
准点出发时间	准点出发时间,格式：08：00、09:30	N/A	20	N/A	
中转到达货最晚到达时间	中转到达货物最晚到达外场的时间，采用T-1格式表示，如：2:00-1天，表示前一天的2:00。	N/A	20	N/A	
时效类型	时效类型，包括：普车、卡车两种时效				

1.8.7	发车标准信息
字段名称 	说明 	输入限制	长度	是否必填	备注
班次	发车班次	数字	2	是	自然数字，用户自行维护同一条线路上班次从1开始，按照准点出发时间顺序排序
准点出发时间	准点发车时间，格式：08:00,09:30	日期	20	是	
出发站	出发站名称，自动带出	N/A	50	N/A	
到达站	到达站名称，自动带出	N/A	50	N/A	
中转到达货最晚到达时间	中转到达货物最晚到达外场的时间，采用T-1格式表示，如：2:00-1天，表示前一天的2:00。	日期选择框	20	是	“中转到达货最晚到达时间”不能大于“准点出发时间”
时效类型	时效类型，包括：普车、卡车两种时效				
备注	备注	文本	200	否	
1.9	非功能性需求
使用量	
2012年全网估计用户数	
响应要求（如果与全系统要求 不一致的话）	
使用时间段	
高峰使用时间段	

1.10	接口描述
接口名称 	对方系统（外部系统或内部其他模块）	接口描述
		

		

dp-foss-综合管理系统用例-新增_修改_作废_查询到达线路-v1.04		
		
修订记录 
日期 	修订内容 	修订人员 	版本号 
2012-6-12	新增	谢艳涛	V0.1
2012-6-30	根据赵鹏点评修改：“班次”自动生成，“准点到达时间采用”T+1格式	谢艳涛	V0.2
2012-7-01	根据王偕旭点评修改：增加“运输类型”属性	谢艳涛	V0.3
2012-7-2	提交CITA审核	谢艳涛	V0.5
2012-7-6	根据评审会议罗越、王偕旭要求增加“网点组”思想修改：到达线路增加“是否到达默认线路”属性	谢艳涛	V0.6
2012-8-2	通过业务部门审核签字版本升级到V0.9	谢艳涛	V0.9
2012-10-16	根据变更需求增加导出功能：在图一界面增加“导出”按钮	谢艳涛	V1.01
2012-11-27	根据变更需求修改业务规则SR-2、SR-1	谢艳涛	V1.02
2012-12-01	根据变更需求把发车标准“班次”自动生成改为自行维护;增加业务规则SR-8，到达线路只有汽运，界面上去掉“运输类型”	谢艳涛	V1.03
2012-12-11	根据变更需求修改发车标准：增加“时效类型”分为：普车、卡车两种	谢艳涛	V1.04

1.	SUC-740-新增_修改_作废_查询到达线路
1.1	相关业务用例
BUC_FOSS_5.20.30_530 开单收货
BUC_FOSS_5.10.20_060 制定班车发车计划
BUC_FOSS_5.10.20_020制定长途发车计划
BUC_FOSS_5.10.20_010 预测货量
BUC_FOSS_5.10.20_090 确定班车发车计划
BUC_FOSS_5.10.20_065 排班（短途班车）
BUC_FOSS_5.10.20_022 调整走货线路
1.2	用例描述
到达线路即运作到经营的线路，主要用于货量预测、发车计划制定。本用例用于对到达线路基础资料维护，包括新增、修改、作废、查询、导出数据等操作。
1.3	用例条件
条件类型	描述	引用系统用例
前置条件	1、	行政组织基础资料完备
2、	行政区域基础资料完	SUC-33 DP-FOSS-综合管理系统用例-新增_修改_作废_查询行政区域
SUC-85 DP-FOSS-综合管理系统用例-修改_查询行政组织业务属性
后置条件	1、	为查询/制定发车计划（短途）、修改发车计划（短途）等系统用例提供到达线路基础资料查询	SUC-216  查询/制定发车计划（短途）
SUC-224修改发车计划（短途）

1.4	操作用户角色
操作用户	描述
线路维护人员	线路维护人员对到达线路进行新增，修改，作废，查询操作。
1.5	界面要求
1.5.1	表现方式
Web页面
1.5.2	界面原型-主界面
  
图一：到达线路主界面
1.5.3	界面描述-主界面
1.	功能按钮区域
1)	新增按钮：点击新增按钮进入新增界面，参见【图二：新增/修改到达线路】。
2)	导出按钮：点击导出按钮，可以导出到达线路的所有数据至Excel表中
3)	查询按钮：输入查询条件，点击查询按钮，系统返回查询结果，刷新查询列表。
4)	重置按钮：点击重置按钮，清空查询条件。
5)	作废按钮：选中列表中一行或多行记录，点击作废按钮，选中的记录被作废；或点击各行的作废按钮，作废各行记录，作废时连同作废该线路对应的发车标准，需要弹出确认提示框。
6)	查看详细信息：鼠标移动到列表中某一条记录，双击该行记录，弹出一个窗口，可以查看该记录的详细信息。
7)	修改按钮：点击各行的修改按钮，进入修改界面，参见【图二：新增/修改到达线路】。
8)	分页按钮：实现分页功能。
2.	列表区域
1)	列表区域默认不显示，点击查询按钮，根据查询条件显示列表数据。
2)	列表中显示：线路名称、线路简码、运输类型、出发站、到达站、线路距离（公里）、是否默认到达线路。
3.	字段输入区域
1)	查询条件包括线路名称、出发站、到达站、线路简码、管理车队。
1.1	线路名称：文本，支持模糊查询
1.2	出发站：选择框，支持手动输入模糊查询，也支持从行政组织（外场）基础资料中选取
1.3	到达站：选择框，支持手动输入模糊查询，也支持从行政组织（营业部）基础资料中选取
1.4	线路简码：文本，支持模糊查询
1.5	管理车队：选择框，支持手动输入模糊查询，也支持从行政组织（车队）基础资料中选取
1.5.4	界面原型-新增/修改到达线路
 
图二：新增/修改到达线路
1.5.5	界面描述-新增和修改到达线路
1.	字段输入区域
1)	线路名称：线路名称必须唯一自动生成，生成规则：根据所选“出发站”和“到达站”动态生成,如：生成线路名称为XXX外场-XXX营业部
2)	线路简码：必填，文本，大写英文字母表示，线路简码必须唯一
3)	管理车队：必填，选择框，从行政组织（车队）基础资料中选取
4)	线路距离（公里）：必填，数字
5)	出发站：必填，选择框，从行政组织（外场）基础资料中选取
6)	到达站：必填，选择框，从行政组织（营业部）基础资料中选取
7)	是否默认达到线路：必填，单选框，是或否，默认为是
8)	备注：选填
2．	 发车标准列表区域
1)          列表中显示：班次、准点出发时间、准点到达时间、时效类型、备注。
3.   功能按钮区域
1)	保存按钮：点击保存按钮，需要提示用户是否保存成功，若保存成功，关闭当前界面，返回主界面；若保存失败，提示用户保存失败以及失败原因，不关闭当前页面。
2)	重置按钮：点击重置按钮，回到当前界面的初始状态。
3)	取消按钮：点击取消按钮，退出当前界面，返回主界面。
4)	新增发车标准按钮：点击新增发车标准按钮，先判断线路信息是否已经保存，如果信息还未保存，弹出提醒框，提醒需要保存到达线路信息才能新增发车标准；如果信息已经保存成功，则弹出【图三：新增和修改发车标准】界面，进行新增操作，详细步骤参见【新增发车标准操作步骤】。
5)	修改按钮：点击修改按钮，先判断线路信息是否已做修改，如果线路信息已做修改，弹出提醒框，提醒先保存线路信息才能修改发车标准，详细步骤参见【修改发车标准操作步骤】；
6)	作废按钮：点击作废按钮，先判断线路信息是否已做修改，如果线路信息已做修改，弹出提醒框，提醒先保存线路信息才能作废发车标准，详细步骤参见【作废发车标准操作步骤】。
7)	查看详细信息：鼠标移动到列表中某一条记录，双击该行记录，弹出一个窗口，可以查看该记录的详细信息。
1.5.6	界面原型-新增/修改发车标准
 
    图三：新增和修改发车标准
1.5.7	界面描述-新增/修改发车标准
1、字段输入区域
1)	班次：数字，用户自行维护，自然数。
2)	出发站：自动带出
3)	到达站：自动带出
4)	准点出发时间：必填，格式：08:00,09:30等
5)	准点到达时间：必填，采用T+1格式，T是指时间，如：00:30；+1天是指当天时间加1天，如：00:30+1，表示第二天的00:30；XX天用下拉框表示，如果为0天，默认为当天时间，如：22:00+0天，用22:00表示。
6)	时效类型：下拉框，包括：普车、卡车两种时效类型；
6)          备注：选填
       2、功能按钮区域
1)	保存按钮：点击保存按钮，需要提示用户是否保存成功，若保存成功，关闭弹出窗口，返回到【图二：新增/修改到达线路】；若保存失败，提示用户保存失败以及失败原因，不关闭弹出窗口。
2)	重置按钮：点击重置按钮，回到当前界面的初始状态。
3)	取消按钮：点击取消按钮，关闭当前界面，返回到【图二：新增/修改到达线路】界面。
1.6	操作步骤
1.6.1	添加到达线路操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入到达线路管理主界面	【到达线路列表信息】	
2	点击新增按钮，进入【图二：新增/修改到达线路】界面		
3	输入到达线路详细信息和相关发车标准信息，点击保存。
参见业务规则SR-1、SR-2、SR-5、SR-6	【到达线路新增/修改信息】【发车标准列表信息】【发车标准信息】	
4	返回到达线路管理主界面		

序号	扩展事件	相关数据	备注
3a	点击取消按钮，退出当前界面，返回主界面		
3b	若保存失败，需提示用户保存失败以及失败原因，继续停留在新增界面		

1.6.2	修改到达线路操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入到达线路管理主界面	【到达线路列表信息】	
2	点击修改按钮，进入【图二：新增/修改到达线路】界面		
3	修改到达线路详细信息和发车标准信息,点击保存
参见业务规则SR-1、SR-2、SR-5、SR-6	【到达线路新增/修改信息】【发车标准列表信息】【发车标准信息】	
4	返回到达线路管理主界面		

序号	扩展事件	相关数据	备注
3a	点击取消按钮，退出当前界面，返回主界面		
3b	若保存失败，需提示用户保存失败以及失败原因，继续停留在修改界面		

1.6.3	作废到达线路操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入到达线路管理主界面	【到达线路列表信息】	
2	选择一行或者多行记录，点击作废按钮。		作废时连同作废该线路对应的发车标准，弹出确认对话框。
3	点击确定按钮。		

序号	扩展事件	相关数据	备注
2a	点击取消按钮，退出当前界面，返回主界面		
2b	若作废失败，需提示用户作废失败以及失败原因		

1.6.4	查询到达线路操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入到达线路管理主界面	【到达线路列表信息】	
2	输入查询条件，点击查询按钮。参见业务规则SR-4	【到达线路查询条件】	系统返回查询结果

1.6.5	新增发车标准操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入【图二：新增/修改到达线路】界面	【到达线路新增/修改信息】【发车标准列表信息】	
2	点击新增发车标准按钮，先判断到达线路信息是否保存，若已保存，弹出【图二：新增/修改发车标准】界面；若未保存，先保存到达线路信息，再点击新增发车标准按钮。		
3	输入发车标准详细信息，点击保存。
参见业务规则SR-3、SR-7	【发车标准信息】	
4	返回【图二：新增/修改到达线路】界面		

序号	扩展事件	相关数据	备注
3a	点击取消按钮，关闭当前界面，返回【图二：新增/修改到达线路】界面		
3b	若保存失败，需提示用户保存失败以及失败原因，继续停留在新增界面		

1.6.6	修改发车标准操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入【图二：新增/修改到达线路】界面	【到达线路新增/修改信息】【发车标准列表信息】	
2	点击修改发车标准按钮，先判断到达线路信息是否修改，若未修改，弹出【图二：新增/修改发车标准】界面；若已修改，先保存到达线路信息，再点击修改发车标准按钮。		
3	输入发车标准详细信息，点击保存。
参见业务规则SR-3、SR-7	【发车标准信息】	
4	返回【图二：新增/修改到达线路】界面		

序号	扩展事件	相关数据	备注
3a	点击取消按钮，关闭当前界面，返回【图二：新增/修改到达线路】界面		
3b	若保存失败，需提示用户保存失败以及失败原因，继续停留在修改界面		

1.6.7	作废发车标准操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入【图二：新增/修改到达线路】界面	【到达线路新增/修改信息】【发车标准列表信息】	
2	选择一行记录，点击作废按钮。		弹出确认对话框。
3	点击确定按钮。		

序号	扩展事件	相关数据	备注
2a	点击取消按钮，退出当前界面，返回主界面		
2b	若作废失败，需提示用户作废失败以及失败原因		

1.7	业务规则
序号	描述
SR-1	在新增/修改页面， “到达站”不支持手动输入，只支持从行政组织（营业部）基础资料中选取。 
SR-2	在新增/修改页面，“出发站”不支持手动输入，只支持从行政组织（外场）基础资料中选取。
SR-3	时间通过“时间控件”选取，格式：08:00,09:30;“准点到达时间”采用T+1格式，T是指时间，如：00:30；+1天是指当天时间加1天，如：00:30+1，表示第二天的00:30；XX天用下拉框表示，如果为0天，默认为当天时间，如：22:00+0天，用22:00表示，“准点到达时间”不能早于“准点出发时间”。
SR-4	查询都支持模糊查询，条件：“出发站”支持手动输入，也支持从行政组织（外场、空运总调）基础资料中选取；“到达站”支持手动输入，也支持从行政组织（营业部）基础资料中选取。
SR-5	新增和修改页面，“线路简码”不能重复，必须唯一；“线路名称”自动生成，根据所选“出发站”和“到达站”动态生成线路名称，如： 广州外场-广州东平营业部
SR-6	新增和修改页面，对于一个“到达站”，只有一个默认配载的“出发站”
SR-7	新增和修改发车标准页面，“班次”自然数，用户自行维护；“出发站”自动带出;“到达站”自动带出
SR-8	到达站必须是具有自提派送属性的行政组织,以及到达站可做到达产品是否存在到达线路的产品属性。

1.8	数据元素
1.8.1	到达线路新增/修改信息
字段名称 	说明 	输入限制	输入项提示文本	长度	是否必填	备注
线路名称	线路名称	文本		50	是	
线路简码	线路简码	文本		10	是	
管理车队	线路所属车队名称	选择框		50	是	
线路距离（公里）	出发站与到达站之间的距离，单位：公里	数字		6	是	
出发站	出发站名称，从行政组织（外场）基础资料中选取	选择框		50	是	
到达站	到达站名称，从行政组织（营业部）基础资料中选取	选择框		50	是	
是否默认到达线路	是否为默认到达线路	单选框		2	是	默认为是
备注	备注	文本		100	否	
1.8.2	到达线路列表信息
字段名称 	说明 	输入限制	长度	是否必填	备注
线路名称	线路名称，命名格式：上海专线-松江工业区营业部	N/A	50	N/A	
线路简码	线路简码，大写字母表示如：上海外场-松江工业区营业部 简码为：DDSG，DD表示“到达”	N/A	10	N/A	
出发站	出发站名称	N/A	50	N/A	
到达站	到达站名称	N/A	50	N/A	
线路距离（公里）	出发站与到达站之间的距离，单位：公里	N/A	6	N/A	
管理车队	线路所属车队名称	N/A	50	N/A	
是否默认到达线路	是否为默认到达线路	N/A	2	N/A	
1.8.3	到达线路查询条件
字段名称 	说明 	输入限制	长度	是否必填	备注
线路名称	线路名称 	文本	50	否	
出发站	出发站名称，支持手动输入，也支持从行政组织（外场、空运总调）基础资料中选择	选择框	50	否	
到达站	到达站名称，支持手动输入，也支持从行政组织（营业部）基础资料中选择	选择框	50	否	
管理车队	线路所属车队名称	选择框	50	否	
线路简码	线路简码 	文本框	10	否	
1.8.4	发车标准列表信息
字段名称 	说明 	输入限制	长度	是否必填	备注
班次	线路班次	N/A	2	N/A	
准点发车时间	准点发车时间，格式：08:00,09:30	N/A	20	N/A	
准点到达时间	准点到达时间，格式：08:00,09:30	N/A	20	N/A	
时效类型	时效类型：卡车、普车两种				
备注	备注				
1.8.5	发车标准信息
字段名称 	说明 	输入限制	长度	是否必填	备注
班次	发车班次，自然数，用户自行维护	N/A	2	N/A	
出发站	出发站名称，自动带出	N/A	50	N/A	
到达站	到达站名称，自动带出 	N/A	50	N/A	
准点出发时间	准点发车时间，格式：08:00,09:30	时间选择框	20	是	
准点到达时间	准点到达时间，采用T+1格式，T是指时间，如：00:30；+1天是指当天时间加1天，如：00:30+1，表示第二天的00:30；XX天用下拉框表示，如果为0天，默认为当天时间，如：22:00+0天，用22:00表示	时间选择框	20	是	
时效类型	时效类型：分为卡车和普车两种				
备注	备注	文本	200	否	

1.9	非功能性需求
使用量	
2012年全网估计用户数	
响应要求（如果与全系统要求 不一致的话）	
使用时间段	
高峰使用时间段	

1.10	接口描述
接口名称 	对方系统（外部系统或内部其他模块）	接口描述
		

		

dp-foss-综合管理系统用例-新增_修改_作废_查询走货路径(运作到运作)-v1.12		
		
修订记录 
日期 	修订内容 	修订人员 	版本号 
2012-7-2	新增 	谢艳涛	V0.1
2012-7-3	提交CITA审核	谢艳涛	V0.5
2012-7-5	根据评审意见修改：增加“是否可以打木架”、“打木架外场”属性	谢艳涛	V0.6
2012-7-8	根据ITA王偕旭要求修改：增加“是否默认走货路径”、“出发网点组”、“到达网点组”属性	谢艳涛	V0.7
2012-8-2	通过业务部门审核签字版本升级到V0.9	谢艳涛	V0.9
2012-12-1	根据变更需求修改“运输性质”，业务规则SR-1、SR-3，把机场修改为“空运代理网点”,修改业务规则SR-9,删除SR-10	谢艳涛	V1.11
2013-1-4	根据变更需求在新增/修改线路界面增加“生效/失效”按钮，增加业务规则SR-10;	谢艳涛	V1.12

1.	SUC-187-新增_修改_作废_查询走货路径（运作到运作）
1.1	相关业务用例
BUC_FOSS_5.10.20_022 调整走货线路。

1.2	用例描述
走货路径（运作到运作）主要用于计算并调整走货路径、调整货物走货路径、重新计算走货路径等。本用例用于对走货路径（运作到运作）基础资料的维护，包括新增、修改、作废、查询等操作。
1.3	用例条件
条件类型	描述	引用系统用例
前置条件	1、	行政组织基础资料完备
2、	运作到运作线路信息基础资料完备
3、	空运代理网点机场信息基础资料完备
4、	偏线代理基础资料完备
5、	始发线路基础资料完备
6、	到达线路基础资料完备	SUC-85 DP-FOSS-综合管理系统用例-修改_查询行政组织业务属性
SUC-218  新增_修改_作废_查询运作到运作线路信息
SUC-72052  新增_修改_作废_查询空运代理网点机场信息 
SUC-649  新增_修改_作废_查询偏线代理
SUC-284  新增_修改_作废_查询始发线路
SUC-740  新增_修改_作废_查询到达线路
后置条件	1、	为计算并调整走货路径、调整货物走货路径、重新计算走货路径等系统用例提供运作到运作走货路径基础资料查询	SUC-611  计算并调整走货路径
SUC-429  调整货物走货路径
SUC-748  重新计算走货路径
1.4	操作用户角色
操作用户	描述
线路管理员	线路管理员对“走货路径（运作到运作）基础资料”进行新增，修改，作废，查询操作。
1.5	界面要求
1.5.1	表现方式
Web页面
1.5.2	界面原型-主界面
                                图一：走货路径（运作到运作）管理主界面
1.5.3	界面描述-主界面
1.	功能按钮区域
1)	新增按钮：点击新增按钮进入新增界面，参见【图二：走货路径（运作到运作）新增/修改界面】。
2)	查询按钮：输入查询条件，点击查询按钮，系统返回查询结果，刷新查询列表。
3)	重置按钮：点击重置按钮，清空查询条件。
4)	作废按钮：选中列表中一行或多行记录，点击作废按钮，弹出确认提示框，作废时同时把该走货路径包含的线路移除；或点击各行的作废按钮，弹出确认提示框。作废成功后会弹出作废成功的提示框，作废时同时把该走货路径包含的线路移除；若作废失败，弹出作废失败的提示框，并提示失败原因。
5)	查看详细信息：双击该行记录，弹出一个窗口，可以查看该记录的详细信息。
6)	修改按钮：点击各行的修改按钮，进入修改界面，参见【图二：走货路径（运作到运作）新增/修改界面】。
7)	分页按钮：实现分页功能。
2.	列表区域
1)	列表区域默认不显示，点击查询按钮，根据查询条件显示列表数据。
2)	列表中显示：出发站、到达站、运输性质、时效（小时）、是否可以打木架、打木架外场、是否默认走货路径、状态。
3.	字段输入区域
1)	查询条件包括出发站、到达站、运输性质。
1.1	出发站：选择框，支持手动输入模糊查询，也支持从行政组织（外场、空运总调）基础资料中选择；
1.2	到达站：选择框，支持手动输入模糊查询，也支持从行政组织（外场）、偏线代理、空运代理网点机场信息基础资料中选择；
1.3	运输性质：下拉框，包括：全部、取第三级产品类型（精准卡航，精准城运，精准汽运（长途），精准汽运（短途），汽运偏线，精准空运）（整车不可以选，需要排除掉）精准汽运、精准卡航、汽运偏线、精准空运。默认为全部。
1.31.4	状态：下拉框，包括：全部、生效、失效。默认为全部。

1.5.4	界面原型-新增/修改界面
  图二：走货路径（运作到运作）新增/修改界面
1.5.5	界面描述-新增/修改界面
1.	字段输入区域
1)	运输性质： 必填，下拉框，包含取第三级产品类型（精准卡航，精准城运，精准汽运（长途），精准汽运（短途），汽运偏线，精准空运）（整车不可以选，需要排除掉）精准汽运、精准卡航、汽运偏线、精准空运。
2)	出发站：必填，选择框，从行政组织（外场、空运总调）基础资料中选择
3)	到达站：必填，选择框，从行政组织（外场）、偏线代理、机场空运代理网点、可空运到达的营业部信息基础资料中选择
4)	时效（小时）：根据添加的线路时效（小时）+经停时间（小时）计算获取。
5)	是否默认走货路径：选择框，默认选中，该走货路径是否为默认走货路径；
6)	是否可以打木架：必填，单选按钮，是或否，默认为否，若值为“否”，单选按钮为只读状态，不允许选择“是”；若值为“是”，单选按钮可以选择为“否”；
7)	打木架外场：下拉框，默认为不显示；与“是否可以打木架”联动，若“是否可以打木架”值为“否”，“打木架外场”隐藏；若“是否可以打木架”值为“是”，“打木架外场”显示，下拉框里会把拥有“可以打木架”属性的外场查询出来，默认为第一个具有“可以打木架” 属性的外场；
8)	备注：选填，文本
9)	出发站对应营业部：下拉列表，显示所有配置过始发线路到达出发站的营业部与“是否默认走货路径”联动，如果“是否默认走货路径”选中，“出发站对应营业部”为所有不是默认的始发配载部门为“出发站”的营业部；否则，“出发站对应营业部”显示所有始发配载部门为“出发站”的营业部。
10)	出发网点组：下拉列表，列表中显示该“出发网点组”所属的营业部，从“出发站对应营业部”下拉列表中选择；
11)	到达站对应营业部：下拉列表，显示所有配置过到达线路到达该到到达站的营业部与“是否默认走货路径”联动，如果“是否默认走货路径”选中，“到达站对应营业部”显示所有不是默认的到达配载部门为“到达站”的营业部；否则，“到达站对应营业部”显示所有到达配置部门为“到达站”的营业部；
12)	到达网点组：下拉列表，列表中显示该“到达网点组”所属的营业部，从“到达站对应营业部”下拉列表中选择。
13)	网点组列表详见【网点组列表数据】
14)	线路信息列表详见【线路信息列表数据】
2.	功能按钮区域
1)	出发网点组右选（--->）按钮：选中“出发站对应营业部”下拉列表中的营业部，点击右选按钮，选中的营业部会在“出发网点组”下拉列表中显示。
2)	出发网点组右全选（-->>）按钮：点击右全选按钮，“出发站对应营业部”下拉列表中的营业部全部会在“出发网点组”下拉列表中显示。
3)	出发网点组左移（<---）按钮：选中“出发网点组”下拉列表中的营业部，点击左移按钮，选中的营业部会在“出发网点组”下拉列表中清除；
4)	出发网点组左全移（<<--）按钮：点击左全移按钮，“出发网点组”下拉列表中的营业部全部清除；
5)	到达网点组右选（--->）按钮：选中“到达站对应营业部”下拉列表中的营业部，点击右选按钮，选中的营业部会在“到达网点组”下拉列表中显示
6)	到达网点组右全选（-->>）按钮：点击右全选按钮，“到达站对应营业部”下拉列表中的营业部全部会在“到达网点组”下拉列表中显示。
7)	到达网点组左移（<---）按钮：选中“到达网点组”下拉列表中的营业部，点击左移按钮，选中的营业部会在“到达网点组”下拉列表中清除；
8)	到达网点组左全移（<<--）按钮：点击左全移按钮，“到达网点组”下拉列表中的营业部全部清除
9)	添加网点组按钮：点击添加网点组按钮，先判断走货路径信息是否已经保存，如果信息还未保存，弹出提示框，提示需要先保存走货路径信息才能添加线路信息；如果信息已经保存成功，进行添加网点组操作
10)	修改网点组按钮：点击修改网点组按钮，先判断走货路径信息是否已做修改，如果走货路径信息已做修改，弹出提示框，提示先保存走货路径信息才能进行修改网点组操作，则弹出【图三：修改网点组界面】，进行修改网点组操作；
11)	作废网点组按钮：点击作废网点组按钮，先判断走货路径信息是否已做修改，如果走货路径信息已做修改，弹出提示框，提示先保存走货路径信息才能作废网点组操作；
12)	添加线路按钮：点击添加线路按钮，先判断走货路径信息是否已经保存，如果信息还未保存，弹出提示框，提示需要先保存走货路径信息才能添加线路信息；如果信息已经保存成功，则弹出【图四：线路信息新增/修改界面】，进行添加线路操作。
13)	修改线路按钮：点击修改线路按钮，先判断走货路径信息是否已做修改，如果走货路径信息已做修改，弹出提示框，提示先保存走货路径信息才能进行修改线路信息操作，则弹出【图四：线路信息新增/修改界面】，进行修改线路操作。
14)	移除线路按钮：选择要移除的线路，点击移除线路按钮，先判断走货路径信息是否已做修改，如果走货路径信息已做修改，弹出提示框，提示先保存走货路径信息才能移除线路信息。
15)	保存按钮：点击保存按钮，需要提示用户是否保存成功，若保存成功，关闭当前界面，返回主界面；若保存失败，提示用户保存失败以及失败原因，不关闭当前界面
16)	重置按钮：点击重置按钮，回到当前界面的初始状态。
17)	取消按钮：点击取消按钮，如果当前界面数据未保存，提示“界面数据不为空，是否退出”，点击“是”退出当前界面，返回主界面；否则，不关闭当前界面。
17)18)	生效或失效按钮：点击失效按钮，走货路径状态修改为失效状态，失效按钮隐藏，生效按钮显示；点击生效按钮，在后台对业务规则SR-6进行验证，走货路径状态修改为生效状态，生效按钮隐藏，失效按钮显示。
1.5.6	界面原型-修改网点组
 
                                                                 图三：修改网点组界面
1.5.7	界面描述-修改网点组
1、	字段输入区域
1)	出发站对应营业部：下拉列表，下拉列表中显示所有始发配置部门为“出发站”的营业部
2)	出发网点组：必填，下拉列表，列表中显示该“出发网点组”所属的营业部，从“出发站对应营业部”下拉列表中选择
3)	到达站对应营业部：下拉列表框，下拉列表中显示所有到达配置部门为“到达站”的营业部；
4)	到达网点组：必填，下拉列表，列表中显示该“到达网点组”所属的营业部，从“到达站对应营业部”下拉列表中选择。
2、功能按钮区域
1)	保存按钮：点击保存按钮，需要提示用户是否保存成功，若保存成功，关闭当前界面，返回主界面；若保存失败，提示用户保存失败以及失败原因，不关闭当前界面
2)	重置按钮：点击重置按钮，回到当前界面的初始状态。
3)	取消按钮：点击取消按钮，如果当前界面数据未保存，提示“界面数据不为空，是否退出”，点击“是”退出当前界面，返回主界面；否则，不关闭当前界面；
1.5.8	界面原型-新增/修改线路信息
 
                                                  图四：线路信息新增/修改界面
1.5.9	界面描述-新增/修改线路信息
2、	字段输入区域
5)	序号：必填，数字，该线路在走货路径中所占的顺序
6)	线路名称：必填，选择框，从运作到运作线路信息基础资料中选择，参见业务规则SR-3
7)	线路简码：与“线路名称”联动带出 
8)	出发站：必填，下拉框，根据所选线路动态获取该线路包含线段所有的出发站。默认选中线路的出发站。
9)	到达站：必填，下拉框，根据所选线路动态获取该线路包含线段所有的到达站。默认选中线路的到达站。
10)	时效（小时）：根据走货路径的“运输性质”，所选“线路名称”以及“出发站”，“到达站”，由系统自动计算。
11)	经停时间（小时）：必填，数字，默认为0，单位：小时
2、功能按钮区域
4)	保存按钮：点击保存按钮，需要提示用户是否保存成功，若保存成功，关闭当前界面，返回主界面；若保存失败，提示用户保存失败以及失败原因，不关闭当前界面
5)	重置按钮：点击重置按钮，回到当前界面的初始状态。
6)	取消按钮：点击取消按钮，如果当前界面数据未保存，提示“界面数据不为空，是否退出”，点击“是”退出当前界面，返回主界面；否则，不关闭当前界面。
1.6	操作步骤
1.6.1	添加走货路径操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入走货路径（运作到运作）管理主界面	【走货路径列表信息】	
2	点击新增按钮，进入新增/修改界面		
3	输入走货路径（运作到运作）详细信息，并选择线路，点击保存。
参见业务规则SR-1、SR-2、SR-7、SR-8、SR-9、SR-10	【走货路径新增/修改信息】【线路列表信息】	
4	返回走货路径（运作到运作）管理主界面		

序号	扩展事件	相关数据	备注
3a	点击取消按钮，退出当前界面，返回主界面		
3b	若保存失败，需提示用户保存失败以及失败原因，继续停留在新增界面		

1.6.2	修改走货路径操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入走货路径管理主界面	【走货路径列表信息】	
2	点击修改按钮，进入新增/修改界面		
3	修改走货路径详细信息，点击保存
参见业务规则SR-1、SR-2、SR-7、SR-8、SR-9、SR-10	【走货路径新增/修改信息】【线路列表信息】	
4	返回走货路径管理主界面		

序号	扩展事件	相关数据	备注
3a	点击取消按钮，退出当前界面，返回主界面		
3b	若保存失败，需提示用户保存失败以及失败原因，继续停留在修改界面		

1.6.3	作废走货路径操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入走货路径管理主界面	【走货路径列表信息】	
2	选择一行或者多行记录，点击作废按钮。		作废时同时把该走货路径下面的线路一起移除。
3	点击确定按钮。		

序号	扩展事件	相关数据	备注
2a	点击取消按钮，退出当前界面，返回主界面		
2b	若作废失败，需提示用户作废失败以及失败原因		

1.6.4	查询走货路径操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入走货路径管理主界面	【走货路径列表信息】	
2	输入查询条件，点击查询按钮。参见业务规则SR-5	【走货路径查询条件】	系统返回查询结果

1.6.5	添加线路信息操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入【图二：走货路径（运作到运作）新增/修改界面】	【走货路径新增/修改信息】【线路列表信息】	
2	点击添加线路按钮，弹出【图四：线路信息新增/修改界面】		
3	输入线路详细信息，点击保存。
参见业务规则SR-3、SR-4	【线路新增/修改信息】	
4	返回到【图二：运作到运作走货路径新增/修改界面】		

序号	扩展事件	相关数据	备注
3a	点击取消按钮，退出当前界面，返回主界面		
3b	若保存失败，需提示用户保存失败以及失败原因，继续停留在新增界面		

1.6.6	修改线路信息操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入【图二：走货路径（运作到运作）新增/修改界面】	【走货路径新增/修改信息】【线路列表信息】	
2	点击修改按钮，，弹出【图四：线路信息新增/修改界面】		
3	修改线路详细信息，点击保存
参见业务规则SR-3、SR-4	【线路新增/修改信息】	
4	返回到【图二：走货路径（运作到运作）新增/修改界面】		

序号	扩展事件	相关数据	备注
3a	点击取消按钮，退出当前界面，返回主界面		
3b	若保存失败，需提示用户保存失败以及失败原因，继续停留在修改界面		

1.6.7	移除线路操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入【图二：走货路径（运作到运作）新增/修改界面】	【走货路径新增/修改信息】【线路列表信息】	
2	选择一行或者多行记录，点击移除按钮。		弹出提示框
3	点击确定按钮。		

序号	扩展事件	相关数据	备注
2a	点击取消按钮，退出当前界面，返回主界面		
2b	若作废失败，需提示用户作废失败以及失败原因		

1.6.8	添加网点组操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入【图二：走货路径（运作到运作）新增/修改界面】	【走货路径新增/修改信息】【线路列表信息】【网点组列表数据】	
2	选择出发站对应营业部下拉列表中的营业部，点击右选（-->）按钮		选择的营业部在出发网点组下拉列表中显示
3	选择到达站对应营业部下拉列表中的营业部，点击右选（-->）按钮		选择的营业部在到达网点组下拉列表中显示
4	点击添加网点组按钮，参见业务规则SR-10		把出发网点组和到达网点组保存到数据库
5	刷新【图二：走货路径（运作到运作）新增/修改界面】		划分好的出发网点组和到达网点组在网点组列表中显示

序号	扩展事件	相关数据	备注
4a	若保存失败，需提示用户保存失败以及失败原因，继续停留在【图二：走货路径（运作到运作）新增/修改界面】		

1.6.9	修改网点组操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入【图二：走货路径（运作到运作）新增/修改界面】	【走货路径新增/修改信息】【线路列表信息】【网点组列表数据】	
2	点击修改按钮，，弹出【图三：修改网点组界面】		
3	修改网点组详细信息，点击保存, 参见业务规则SR-10		
4	返回到【图二：走货路径（运作到运作）新增/修改界面】		

序号	扩展事件	相关数据	备注
3a	点击取消按钮，退出当前界面，返回主界面		
3b	若保存失败，需提示用户保存失败以及失败原因，继续停留在修改界面		

1.6.10	作废网点组操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入【图二：走货路径（运作到运作）新增/修改界面】	【走货路径新增/修改信息】【线路列表信息】【网点组列表数据】	
2	点击移除按钮。		弹出提示框
3	点击确定按钮。		

序号	扩展事件	相关数据	备注
2a	点击取消按钮，退出当前界面，返回主界面		
2b	若作废失败，需提示用户作废失败以及失败原因		

1.7	业务规则
序号	描述
SR-1	新增/修改界面，若“运输性质”为精准汽运、精准卡航，“出发站”只能从行政组织（外场）基础资料中选择，“到达站”只能从行政组织（外场）基础资料中选择；若“运输性质”为汽运偏线，“出发站”只能从行政组织（外场）基础资料中选择，“到达站”只能从偏线代理基础资料中选择；若“运输性质”为精准空运，“出发站”只能从行政组织（空运总调或外场）基础资料中选择， 行政组织（空运总调）基础资料中选择，“到达站”只能从机场空运代理网点或可空运到达的营业部信息基础资料中选择；
SR-2	新增/修改界面，时效（小时），根据走货路径的“运输性质”，所选“线路名称”以及“出发站”，“到达站”，由系统自动计算
SR-3	新增/修改线路页面，走货路径可以任意选取运作到运作线路，线路选择框需要区分汽运，空运，偏线3个tab供用户选择“线路名称”根据走货路径的“运输性质”不同从运作到运作线路基础资料中选择不同的线路，遵循以下规则：
1、	若“运输性质”为精准汽运/精准卡航，“线路名称”只能从运作到运作线路基础资料中选择“线路类型”为专线的线路；
2、	若“运输性质”为汽运偏线，“线路名称”只能从运作到运作线路基础资料中选择“线路类型”为偏线或专线的线路，且走货路径中至少包含一条偏线线路；
3、1、	若“运输性质”为精准空运，“线路名称”只能从运作到运作线路基础资料中选择“线路类型”为空运的线路；
SR-4	新增/修改线路页面，“出发站”根据所选线路动态获取该线路包含线段所有的出发站，以下拉框显示，默认选中线路的出发站。；“到达站”根据所选线路动态获取该线路包含线段所有的到达站，以下拉框显示，默认选中线路的到达站。；“时效（小时）” 根据走货路径的“运输性质”，所选“线路名称”以及“出发站”，“到达站”，由系统自动计算
SR-5	查询支持模糊查询，条件“出发站”支持手动输入模糊查询，从行政组织（外场、空运总调）基础资料中选择；“到达站”从行政组织（外场）、偏线代理、机场空运代理网点信息基础资料中选择；“运输性质”默认为全部，包含：精准卡航，精准城运，精准汽运（长途），精准汽运（短途），汽运偏线，精准空运精准汽运、精准卡航、汽运偏线、精准空运。
SR-6	走货路径的第一段线路的“出发站”必须与走货路径的“出发站”一致，走货路径的最后一段线路的“到达站”必须与走货路径的“到达站”一致，走货路径第n段线路的“出发站”必须与走货路径第n-1段线路的“到达站”一致；
SR-7	走货路径的线路中，选择的“到达站”在线路中的站点位置必须在“出发站”的站点位置之后；
SR-8	新增/修改线路页面，“是否可以打木架”单选按钮，是或否，默认为否，若值为“否”，单选按钮为只读状态，不允许选择“是”；若值为“是”，单选按钮可以选择为“否”；“打木架外场”与“是否可以打木架”联动，若“是否可以打木架”值为“否”，“打木架外场”隐藏；若“是否可以打木架”值为“是”，“打木架外场”显示，下拉框里会把拥有“可以打木架”属性的外场查询出来，默认为第一个具有“可以打木架” 属性的外场；
SR-9	新增/修改页面，相同运输性质，出发站和到达站之间，只能有一条默认走货路径。 
“出发站对应营业部”、“到达站对应营业部”与“是否默认走货路径”联动，
若“是否默认走货路径”选中，：
1、“出发站对应营业部”为所有不是默认的始发配载部门为“出发站”的营业部；
2、“到达站对应营业部”显示所有不是默认的到达配载部门为“到达站”的营业部；否则：
1、“出发站对应营业部”显示所有始发配载部门为“出发站”的营业部；
2、“到达站对应营业部”显示所有到达配置部门为“到达站”的营业部；
SR-10	新增/修改页面
1、当运输性质为“汽运偏线”或者“精准空运”且走货路径不是默认路径时，“出发网点组”不能为空，“到达网点组”为空；
2、当运输性质为“精准汽运”或者“精准卡航”且走货路径不是默认路径时，“出发网点组”和“到达网点组”均不能为空
SR-10	走货路径的状态在“失效”状态下，不能使用，只有在“生效”状态下才能使用；修改走货路径时，必须把状态修改为“失效”状态，才能进行其他数据修改。

1.8	数据元素
1.8.1	走货路径新增/修改信息
字段名称 	说明 	输入限制	输入项提示文本	长度	是否必填	备注
运输性质	运输性质,包含：精准卡航，精准城运，精准汽运（长途），精准汽运（短途），汽运偏线，精准空运精准汽运、精准卡航、汽运偏线、精准空运	下拉框		10	是	参见业务规则：SR-1
出发站	出发站名称	选择框		50	是	参见业务规则：SR-1
到达站	到达站名称	选择框		50	是	参见业务规则：SR-1
时效（小时）	根据走货路径的“运输性质”和所选“线路名称”联动带出	N/A		4	N/A	参见业务规则：SR-2
是否默认走货路径	该走货路径是否为营业部的默认走货路径	选择框		2	是	默认选中
是否可以打木架	是否可以允许打木架，是或否	单选框		2	否	默认为否，参见业务规则：SR-8
打木架外场	具有打木架功能的外场	下拉框		10	是	参见业务规则：SR-8
备注	备注	文本		200	否	
出发站对应营业部	出发站对应营业部	下拉列表		100	N/A	
出发网点组	出发网点组	下拉列表				表示哪些营业部划分为一出发网点组
到达站对应营业部	到达站对应营业部	下拉列表		100	N/A	
到达网点组	到达网点组	下拉列表		100		表示哪些营业部划分为一到达网点组
1.8.2	走货路径列表信息
字段名称 	说明 	输入限制	长度	是否必填	备注
出发站	出发站名称	N/A	50	N/A	
到达站	到达站名称	N/A	50	N/A	
运输性质	运输性质,包含：精准卡航，精准城运，精准汽运（长途），精准汽运（短途），汽运偏线，精准空运精准汽运、精准卡航、汽运偏线、精准空运 	N/A	10	N/A	
时效（小时）	走货路径的运行时效，单位：小时	N/A	50	N/A	
是否可以打木架	是否可以允许打木架，是或否	N/A	2	N/A	
打木架外场	具有打木架功能的外场	N/A	10	N/A	
是否默认走货路径	该走货路径是否为营业部的默认走货路径	N/A	2	N/A	
状态	状态,包括生效、失效两种状态	N/A	10	N/A	
1.8.3	走货路径查询条件
字段名称 	说明 	输入限制	长度	是否必填	备注
出发站	出发站名称	选择框	50	否	参见业务规则：SR-5
到达站	到达站名称	选择框	50	否	参见业务规则：SR-5
运输性质	运输性质,默认全部	下拉框	10	否	参见业务规则：SR-5
状态	状态,包括全部、生效、失效，默认为全部	下拉框	10	否	
1.8.4	网点组列表数据
字段名称 	说明 	输入限制	长度	是否必填	备注
出发网点组	出发网点组，包含作为一组的营业部	N/A	1000	N/A	
到达网点组	到达网点组，包含作为一组的营业部	N/A	1000	N/A	

1.8.5	线路列表信息
字段名称 	说明 	输入限制	长度	是否必填	备注
序号	该线路在走货路径中所占的顺序	N/A	2	N/A	
线路名称	中转到中转线路名称，从中转到中转线路信息基础资料中选择	N/A	50	N/A	
线路简码	线路简码	N/A	10	N/A	
出发站	出发站名称	N/A	50	N/A	
到达站	到达站名称	N/A	50	N/A	
时效（小时）	中转到中转线路的运行时效，单位小时	N/A	4	N/A	
经停时间（小时）	停留时间，单位:小时	N/A	4	N/A	

1.8.6	线路新增/修改信息
字段名称 	说明 	输入限制	输入项提示文本	长度	是否必填	备注
序号	该线路在走货路径中所占的顺序	数字		2		
线路名称	中转到中转线路名称，从中转到中转线路信息基础资料中选择	选择框		50	是	参见业务规则：SR-3
线路简码	线路简码	N/A		10	N/A	自动带出
出发站	出发站名称	选择框		50	是	
到达站	到达站名称	选择框		50	是	
时效（小时）	中转到中转线路的运行时效，单位小时	N/A		4	N/A	自动带出
经停时间（小时）	停留时间，单位:小时	数字		4	是	
1.9	非功能性需求
使用量	
2012年全网估计用户数	
响应要求（如果与全系统要求 不一致的话）	
使用时间段	
高峰使用时间段	

1.10	接口描述
接口名称 	对方系统（外部系统或内部其他模块）	接口描述
		
dp-foss-综合管理系统用例-新增_修改_作废_查询走货路径(运作到运作)-v1.12		
		
修订记录 
日期 	修订内容 	修订人员 	版本号 
2012-7-2	新增 	谢艳涛	V0.1
2012-7-3	提交CITA审核	谢艳涛	V0.5
2012-7-5	根据评审意见修改：增加“是否可以打木架”、“打木架外场”属性	谢艳涛	V0.6
2012-7-8	根据ITA王偕旭要求修改：增加“是否默认走货路径”、“出发网点组”、“到达网点组”属性	谢艳涛	V0.7
2012-8-2	通过业务部门审核签字版本升级到V0.9	谢艳涛	V0.9
2012-12-1	根据变更需求修改“运输性质”，业务规则SR-1、SR-3，把机场修改为“空运代理网点”,修改业务规则SR-9,删除SR-10	谢艳涛	V1.11
2013-1-4	根据变更需求在新增/修改线路界面增加“生效/失效”按钮，增加业务规则SR-10;	谢艳涛	V1.12

1.	SUC-187-新增_修改_作废_查询走货路径（运作到运作）
1.1	相关业务用例
BUC_FOSS_5.10.20_022 调整走货线路。

1.2	用例描述
走货路径（运作到运作）主要用于计算并调整走货路径、调整货物走货路径、重新计算走货路径等。本用例用于对走货路径（运作到运作）基础资料的维护，包括新增、修改、作废、查询等操作。
1.3	用例条件
条件类型	描述	引用系统用例
前置条件	1、	行政组织基础资料完备
2、	运作到运作线路信息基础资料完备
3、	空运代理网点机场信息基础资料完备
4、	偏线代理基础资料完备
5、	始发线路基础资料完备
6、	到达线路基础资料完备	SUC-85 DP-FOSS-综合管理系统用例-修改_查询行政组织业务属性
SUC-218  新增_修改_作废_查询运作到运作线路信息
SUC-72052  新增_修改_作废_查询空运代理网点机场信息 
SUC-649  新增_修改_作废_查询偏线代理
SUC-284  新增_修改_作废_查询始发线路
SUC-740  新增_修改_作废_查询到达线路
后置条件	1、	为计算并调整走货路径、调整货物走货路径、重新计算走货路径等系统用例提供运作到运作走货路径基础资料查询	SUC-611  计算并调整走货路径
SUC-429  调整货物走货路径
SUC-748  重新计算走货路径
1.4	操作用户角色
操作用户	描述
线路管理员	线路管理员对“走货路径（运作到运作）基础资料”进行新增，修改，作废，查询操作。
1.5	界面要求
1.5.1	表现方式
Web页面
1.5.2	界面原型-主界面
                                图一：走货路径（运作到运作）管理主界面
1.5.3	界面描述-主界面
1.	功能按钮区域
1)	新增按钮：点击新增按钮进入新增界面，参见【图二：走货路径（运作到运作）新增/修改界面】。
2)	查询按钮：输入查询条件，点击查询按钮，系统返回查询结果，刷新查询列表。
3)	重置按钮：点击重置按钮，清空查询条件。
4)	作废按钮：选中列表中一行或多行记录，点击作废按钮，弹出确认提示框，作废时同时把该走货路径包含的线路移除；或点击各行的作废按钮，弹出确认提示框。作废成功后会弹出作废成功的提示框，作废时同时把该走货路径包含的线路移除；若作废失败，弹出作废失败的提示框，并提示失败原因。
5)	查看详细信息：双击该行记录，弹出一个窗口，可以查看该记录的详细信息。
6)	修改按钮：点击各行的修改按钮，进入修改界面，参见【图二：走货路径（运作到运作）新增/修改界面】。
7)	分页按钮：实现分页功能。
2.	列表区域
1)	列表区域默认不显示，点击查询按钮，根据查询条件显示列表数据。
2)	列表中显示：出发站、到达站、运输性质、时效（小时）、是否可以打木架、打木架外场、是否默认走货路径、状态。
3.	字段输入区域
1)	查询条件包括出发站、到达站、运输性质。
1.1	出发站：选择框，支持手动输入模糊查询，也支持从行政组织（外场、空运总调）基础资料中选择；
1.2	到达站：选择框，支持手动输入模糊查询，也支持从行政组织（外场）、偏线代理、空运代理网点机场信息基础资料中选择；
1.3	运输性质：下拉框，包括：全部、取第三级产品类型（精准卡航，精准城运，精准汽运（长途），精准汽运（短途），汽运偏线，精准空运）（整车不可以选，需要排除掉）精准汽运、精准卡航、汽运偏线、精准空运。默认为全部。
1.31.4	状态：下拉框，包括：全部、生效、失效。默认为全部。

1.5.4	界面原型-新增/修改界面
  图二：走货路径（运作到运作）新增/修改界面
1.5.5	界面描述-新增/修改界面
1.	字段输入区域
1)	运输性质： 必填，下拉框，包含取第三级产品类型（精准卡航，精准城运，精准汽运（长途），精准汽运（短途），汽运偏线，精准空运）（整车不可以选，需要排除掉）精准汽运、精准卡航、汽运偏线、精准空运。
2)	出发站：必填，选择框，从行政组织（外场、空运总调）基础资料中选择
3)	到达站：必填，选择框，从行政组织（外场）、偏线代理、机场空运代理网点、可空运到达的营业部信息基础资料中选择
4)	时效（小时）：根据添加的线路时效（小时）+经停时间（小时）计算获取。
5)	是否默认走货路径：选择框，默认选中，该走货路径是否为默认走货路径；
6)	是否可以打木架：必填，单选按钮，是或否，默认为否，若值为“否”，单选按钮为只读状态，不允许选择“是”；若值为“是”，单选按钮可以选择为“否”；
7)	打木架外场：下拉框，默认为不显示；与“是否可以打木架”联动，若“是否可以打木架”值为“否”，“打木架外场”隐藏；若“是否可以打木架”值为“是”，“打木架外场”显示，下拉框里会把拥有“可以打木架”属性的外场查询出来，默认为第一个具有“可以打木架” 属性的外场；
8)	备注：选填，文本
9)	出发站对应营业部：下拉列表，显示所有配置过始发线路到达出发站的营业部与“是否默认走货路径”联动，如果“是否默认走货路径”选中，“出发站对应营业部”为所有不是默认的始发配载部门为“出发站”的营业部；否则，“出发站对应营业部”显示所有始发配载部门为“出发站”的营业部。
10)	出发网点组：下拉列表，列表中显示该“出发网点组”所属的营业部，从“出发站对应营业部”下拉列表中选择；
11)	到达站对应营业部：下拉列表，显示所有配置过到达线路到达该到到达站的营业部与“是否默认走货路径”联动，如果“是否默认走货路径”选中，“到达站对应营业部”显示所有不是默认的到达配载部门为“到达站”的营业部；否则，“到达站对应营业部”显示所有到达配置部门为“到达站”的营业部；
12)	到达网点组：下拉列表，列表中显示该“到达网点组”所属的营业部，从“到达站对应营业部”下拉列表中选择。
13)	网点组列表详见【网点组列表数据】
14)	线路信息列表详见【线路信息列表数据】
2.	功能按钮区域
1)	出发网点组右选（--->）按钮：选中“出发站对应营业部”下拉列表中的营业部，点击右选按钮，选中的营业部会在“出发网点组”下拉列表中显示。
2)	出发网点组右全选（-->>）按钮：点击右全选按钮，“出发站对应营业部”下拉列表中的营业部全部会在“出发网点组”下拉列表中显示。
3)	出发网点组左移（<---）按钮：选中“出发网点组”下拉列表中的营业部，点击左移按钮，选中的营业部会在“出发网点组”下拉列表中清除；
4)	出发网点组左全移（<<--）按钮：点击左全移按钮，“出发网点组”下拉列表中的营业部全部清除；
5)	到达网点组右选（--->）按钮：选中“到达站对应营业部”下拉列表中的营业部，点击右选按钮，选中的营业部会在“到达网点组”下拉列表中显示
6)	到达网点组右全选（-->>）按钮：点击右全选按钮，“到达站对应营业部”下拉列表中的营业部全部会在“到达网点组”下拉列表中显示。
7)	到达网点组左移（<---）按钮：选中“到达网点组”下拉列表中的营业部，点击左移按钮，选中的营业部会在“到达网点组”下拉列表中清除；
8)	到达网点组左全移（<<--）按钮：点击左全移按钮，“到达网点组”下拉列表中的营业部全部清除
9)	添加网点组按钮：点击添加网点组按钮，先判断走货路径信息是否已经保存，如果信息还未保存，弹出提示框，提示需要先保存走货路径信息才能添加线路信息；如果信息已经保存成功，进行添加网点组操作
10)	修改网点组按钮：点击修改网点组按钮，先判断走货路径信息是否已做修改，如果走货路径信息已做修改，弹出提示框，提示先保存走货路径信息才能进行修改网点组操作，则弹出【图三：修改网点组界面】，进行修改网点组操作；
11)	作废网点组按钮：点击作废网点组按钮，先判断走货路径信息是否已做修改，如果走货路径信息已做修改，弹出提示框，提示先保存走货路径信息才能作废网点组操作；
12)	添加线路按钮：点击添加线路按钮，先判断走货路径信息是否已经保存，如果信息还未保存，弹出提示框，提示需要先保存走货路径信息才能添加线路信息；如果信息已经保存成功，则弹出【图四：线路信息新增/修改界面】，进行添加线路操作。
13)	修改线路按钮：点击修改线路按钮，先判断走货路径信息是否已做修改，如果走货路径信息已做修改，弹出提示框，提示先保存走货路径信息才能进行修改线路信息操作，则弹出【图四：线路信息新增/修改界面】，进行修改线路操作。
14)	移除线路按钮：选择要移除的线路，点击移除线路按钮，先判断走货路径信息是否已做修改，如果走货路径信息已做修改，弹出提示框，提示先保存走货路径信息才能移除线路信息。
15)	保存按钮：点击保存按钮，需要提示用户是否保存成功，若保存成功，关闭当前界面，返回主界面；若保存失败，提示用户保存失败以及失败原因，不关闭当前界面
16)	重置按钮：点击重置按钮，回到当前界面的初始状态。
17)	取消按钮：点击取消按钮，如果当前界面数据未保存，提示“界面数据不为空，是否退出”，点击“是”退出当前界面，返回主界面；否则，不关闭当前界面。
17)18)	生效或失效按钮：点击失效按钮，走货路径状态修改为失效状态，失效按钮隐藏，生效按钮显示；点击生效按钮，在后台对业务规则SR-6进行验证，走货路径状态修改为生效状态，生效按钮隐藏，失效按钮显示。
1.5.6	界面原型-修改网点组
 
                                                                 图三：修改网点组界面
1.5.7	界面描述-修改网点组
1、	字段输入区域
1)	出发站对应营业部：下拉列表，下拉列表中显示所有始发配置部门为“出发站”的营业部
2)	出发网点组：必填，下拉列表，列表中显示该“出发网点组”所属的营业部，从“出发站对应营业部”下拉列表中选择
3)	到达站对应营业部：下拉列表框，下拉列表中显示所有到达配置部门为“到达站”的营业部；
4)	到达网点组：必填，下拉列表，列表中显示该“到达网点组”所属的营业部，从“到达站对应营业部”下拉列表中选择。
2、功能按钮区域
1)	保存按钮：点击保存按钮，需要提示用户是否保存成功，若保存成功，关闭当前界面，返回主界面；若保存失败，提示用户保存失败以及失败原因，不关闭当前界面
2)	重置按钮：点击重置按钮，回到当前界面的初始状态。
3)	取消按钮：点击取消按钮，如果当前界面数据未保存，提示“界面数据不为空，是否退出”，点击“是”退出当前界面，返回主界面；否则，不关闭当前界面；
1.5.8	界面原型-新增/修改线路信息
 
                                                  图四：线路信息新增/修改界面
1.5.9	界面描述-新增/修改线路信息
2、	字段输入区域
5)	序号：必填，数字，该线路在走货路径中所占的顺序
6)	线路名称：必填，选择框，从运作到运作线路信息基础资料中选择，参见业务规则SR-3
7)	线路简码：与“线路名称”联动带出 
8)	出发站：必填，下拉框，根据所选线路动态获取该线路包含线段所有的出发站。默认选中线路的出发站。
9)	到达站：必填，下拉框，根据所选线路动态获取该线路包含线段所有的到达站。默认选中线路的到达站。
10)	时效（小时）：根据走货路径的“运输性质”，所选“线路名称”以及“出发站”，“到达站”，由系统自动计算。
11)	经停时间（小时）：必填，数字，默认为0，单位：小时
2、功能按钮区域
4)	保存按钮：点击保存按钮，需要提示用户是否保存成功，若保存成功，关闭当前界面，返回主界面；若保存失败，提示用户保存失败以及失败原因，不关闭当前界面
5)	重置按钮：点击重置按钮，回到当前界面的初始状态。
6)	取消按钮：点击取消按钮，如果当前界面数据未保存，提示“界面数据不为空，是否退出”，点击“是”退出当前界面，返回主界面；否则，不关闭当前界面。
1.6	操作步骤
1.6.1	添加走货路径操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入走货路径（运作到运作）管理主界面	【走货路径列表信息】	
2	点击新增按钮，进入新增/修改界面		
3	输入走货路径（运作到运作）详细信息，并选择线路，点击保存。
参见业务规则SR-1、SR-2、SR-7、SR-8、SR-9、SR-10	【走货路径新增/修改信息】【线路列表信息】	
4	返回走货路径（运作到运作）管理主界面		

序号	扩展事件	相关数据	备注
3a	点击取消按钮，退出当前界面，返回主界面		
3b	若保存失败，需提示用户保存失败以及失败原因，继续停留在新增界面		

1.6.2	修改走货路径操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入走货路径管理主界面	【走货路径列表信息】	
2	点击修改按钮，进入新增/修改界面		
3	修改走货路径详细信息，点击保存
参见业务规则SR-1、SR-2、SR-7、SR-8、SR-9、SR-10	【走货路径新增/修改信息】【线路列表信息】	
4	返回走货路径管理主界面		

序号	扩展事件	相关数据	备注
3a	点击取消按钮，退出当前界面，返回主界面		
3b	若保存失败，需提示用户保存失败以及失败原因，继续停留在修改界面		

1.6.3	作废走货路径操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入走货路径管理主界面	【走货路径列表信息】	
2	选择一行或者多行记录，点击作废按钮。		作废时同时把该走货路径下面的线路一起移除。
3	点击确定按钮。		

序号	扩展事件	相关数据	备注
2a	点击取消按钮，退出当前界面，返回主界面		
2b	若作废失败，需提示用户作废失败以及失败原因		

1.6.4	查询走货路径操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入走货路径管理主界面	【走货路径列表信息】	
2	输入查询条件，点击查询按钮。参见业务规则SR-5	【走货路径查询条件】	系统返回查询结果

1.6.5	添加线路信息操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入【图二：走货路径（运作到运作）新增/修改界面】	【走货路径新增/修改信息】【线路列表信息】	
2	点击添加线路按钮，弹出【图四：线路信息新增/修改界面】		
3	输入线路详细信息，点击保存。
参见业务规则SR-3、SR-4	【线路新增/修改信息】	
4	返回到【图二：运作到运作走货路径新增/修改界面】		

序号	扩展事件	相关数据	备注
3a	点击取消按钮，退出当前界面，返回主界面		
3b	若保存失败，需提示用户保存失败以及失败原因，继续停留在新增界面		

1.6.6	修改线路信息操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入【图二：走货路径（运作到运作）新增/修改界面】	【走货路径新增/修改信息】【线路列表信息】	
2	点击修改按钮，，弹出【图四：线路信息新增/修改界面】		
3	修改线路详细信息，点击保存
参见业务规则SR-3、SR-4	【线路新增/修改信息】	
4	返回到【图二：走货路径（运作到运作）新增/修改界面】		

序号	扩展事件	相关数据	备注
3a	点击取消按钮，退出当前界面，返回主界面		
3b	若保存失败，需提示用户保存失败以及失败原因，继续停留在修改界面		

1.6.7	移除线路操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入【图二：走货路径（运作到运作）新增/修改界面】	【走货路径新增/修改信息】【线路列表信息】	
2	选择一行或者多行记录，点击移除按钮。		弹出提示框
3	点击确定按钮。		

序号	扩展事件	相关数据	备注
2a	点击取消按钮，退出当前界面，返回主界面		
2b	若作废失败，需提示用户作废失败以及失败原因		

1.6.8	添加网点组操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入【图二：走货路径（运作到运作）新增/修改界面】	【走货路径新增/修改信息】【线路列表信息】【网点组列表数据】	
2	选择出发站对应营业部下拉列表中的营业部，点击右选（-->）按钮		选择的营业部在出发网点组下拉列表中显示
3	选择到达站对应营业部下拉列表中的营业部，点击右选（-->）按钮		选择的营业部在到达网点组下拉列表中显示
4	点击添加网点组按钮，参见业务规则SR-10		把出发网点组和到达网点组保存到数据库
5	刷新【图二：走货路径（运作到运作）新增/修改界面】		划分好的出发网点组和到达网点组在网点组列表中显示

序号	扩展事件	相关数据	备注
4a	若保存失败，需提示用户保存失败以及失败原因，继续停留在【图二：走货路径（运作到运作）新增/修改界面】		

1.6.9	修改网点组操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入【图二：走货路径（运作到运作）新增/修改界面】	【走货路径新增/修改信息】【线路列表信息】【网点组列表数据】	
2	点击修改按钮，，弹出【图三：修改网点组界面】		
3	修改网点组详细信息，点击保存, 参见业务规则SR-10		
4	返回到【图二：走货路径（运作到运作）新增/修改界面】		

序号	扩展事件	相关数据	备注
3a	点击取消按钮，退出当前界面，返回主界面		
3b	若保存失败，需提示用户保存失败以及失败原因，继续停留在修改界面		

1.6.10	作废网点组操作步骤
序号	基本步骤	相关数据	补充步骤
1	进入【图二：走货路径（运作到运作）新增/修改界面】	【走货路径新增/修改信息】【线路列表信息】【网点组列表数据】	
2	点击移除按钮。		弹出提示框
3	点击确定按钮。		

序号	扩展事件	相关数据	备注
2a	点击取消按钮，退出当前界面，返回主界面		
2b	若作废失败，需提示用户作废失败以及失败原因		

1.7	业务规则
序号	描述
SR-1	新增/修改界面，若“运输性质”为精准汽运、精准卡航，“出发站”只能从行政组织（外场）基础资料中选择，“到达站”只能从行政组织（外场）基础资料中选择；若“运输性质”为汽运偏线，“出发站”只能从行政组织（外场）基础资料中选择，“到达站”只能从偏线代理基础资料中选择；若“运输性质”为精准空运，“出发站”只能从行政组织（空运总调或外场）基础资料中选择， 行政组织（空运总调）基础资料中选择，“到达站”只能从机场空运代理网点或可空运到达的营业部信息基础资料中选择；
SR-2	新增/修改界面，时效（小时），根据走货路径的“运输性质”，所选“线路名称”以及“出发站”，“到达站”，由系统自动计算
SR-3	新增/修改线路页面，走货路径可以任意选取运作到运作线路，线路选择框需要区分汽运，空运，偏线3个tab供用户选择“线路名称”根据走货路径的“运输性质”不同从运作到运作线路基础资料中选择不同的线路，遵循以下规则：
1、	若“运输性质”为精准汽运/精准卡航，“线路名称”只能从运作到运作线路基础资料中选择“线路类型”为专线的线路；
2、	若“运输性质”为汽运偏线，“线路名称”只能从运作到运作线路基础资料中选择“线路类型”为偏线或专线的线路，且走货路径中至少包含一条偏线线路；
3、1、	若“运输性质”为精准空运，“线路名称”只能从运作到运作线路基础资料中选择“线路类型”为空运的线路；
SR-4	新增/修改线路页面，“出发站”根据所选线路动态获取该线路包含线段所有的出发站，以下拉框显示，默认选中线路的出发站。；“到达站”根据所选线路动态获取该线路包含线段所有的到达站，以下拉框显示，默认选中线路的到达站。；“时效（小时）” 根据走货路径的“运输性质”，所选“线路名称”以及“出发站”，“到达站”，由系统自动计算
SR-5	查询支持模糊查询，条件“出发站”支持手动输入模糊查询，从行政组织（外场、空运总调）基础资料中选择；“到达站”从行政组织（外场）、偏线代理、机场空运代理网点信息基础资料中选择；“运输性质”默认为全部，包含：精准卡航，精准城运，精准汽运（长途），精准汽运（短途），汽运偏线，精准空运精准汽运、精准卡航、汽运偏线、精准空运。
SR-6	走货路径的第一段线路的“出发站”必须与走货路径的“出发站”一致，走货路径的最后一段线路的“到达站”必须与走货路径的“到达站”一致，走货路径第n段线路的“出发站”必须与走货路径第n-1段线路的“到达站”一致；
SR-7	走货路径的线路中，选择的“到达站”在线路中的站点位置必须在“出发站”的站点位置之后；
SR-8	新增/修改线路页面，“是否可以打木架”单选按钮，是或否，默认为否，若值为“否”，单选按钮为只读状态，不允许选择“是”；若值为“是”，单选按钮可以选择为“否”；“打木架外场”与“是否可以打木架”联动，若“是否可以打木架”值为“否”，“打木架外场”隐藏；若“是否可以打木架”值为“是”，“打木架外场”显示，下拉框里会把拥有“可以打木架”属性的外场查询出来，默认为第一个具有“可以打木架” 属性的外场；
SR-9	新增/修改页面，相同运输性质，出发站和到达站之间，只能有一条默认走货路径。 
“出发站对应营业部”、“到达站对应营业部”与“是否默认走货路径”联动，
若“是否默认走货路径”选中，：
1、“出发站对应营业部”为所有不是默认的始发配载部门为“出发站”的营业部；
2、“到达站对应营业部”显示所有不是默认的到达配载部门为“到达站”的营业部；否则：
1、“出发站对应营业部”显示所有始发配载部门为“出发站”的营业部；
2、“到达站对应营业部”显示所有到达配置部门为“到达站”的营业部；
SR-10	新增/修改页面
1、当运输性质为“汽运偏线”或者“精准空运”且走货路径不是默认路径时，“出发网点组”不能为空，“到达网点组”为空；
2、当运输性质为“精准汽运”或者“精准卡航”且走货路径不是默认路径时，“出发网点组”和“到达网点组”均不能为空
SR-10	走货路径的状态在“失效”状态下，不能使用，只有在“生效”状态下才能使用；修改走货路径时，必须把状态修改为“失效”状态，才能进行其他数据修改。

1.8	数据元素
1.8.1	走货路径新增/修改信息
字段名称 	说明 	输入限制	输入项提示文本	长度	是否必填	备注
运输性质	运输性质,包含：精准卡航，精准城运，精准汽运（长途），精准汽运（短途），汽运偏线，精准空运精准汽运、精准卡航、汽运偏线、精准空运	下拉框		10	是	参见业务规则：SR-1
出发站	出发站名称	选择框		50	是	参见业务规则：SR-1
到达站	到达站名称	选择框		50	是	参见业务规则：SR-1
时效（小时）	根据走货路径的“运输性质”和所选“线路名称”联动带出	N/A		4	N/A	参见业务规则：SR-2
是否默认走货路径	该走货路径是否为营业部的默认走货路径	选择框		2	是	默认选中
是否可以打木架	是否可以允许打木架，是或否	单选框		2	否	默认为否，参见业务规则：SR-8
打木架外场	具有打木架功能的外场	下拉框		10	是	参见业务规则：SR-8
备注	备注	文本		200	否	
出发站对应营业部	出发站对应营业部	下拉列表		100	N/A	
出发网点组	出发网点组	下拉列表				表示哪些营业部划分为一出发网点组
到达站对应营业部	到达站对应营业部	下拉列表		100	N/A	
到达网点组	到达网点组	下拉列表		100		表示哪些营业部划分为一到达网点组
1.8.2	走货路径列表信息
字段名称 	说明 	输入限制	长度	是否必填	备注
出发站	出发站名称	N/A	50	N/A	
到达站	到达站名称	N/A	50	N/A	
运输性质	运输性质,包含：精准卡航，精准城运，精准汽运（长途），精准汽运（短途），汽运偏线，精准空运精准汽运、精准卡航、汽运偏线、精准空运 	N/A	10	N/A	
时效（小时）	走货路径的运行时效，单位：小时	N/A	50	N/A	
是否可以打木架	是否可以允许打木架，是或否	N/A	2	N/A	
打木架外场	具有打木架功能的外场	N/A	10	N/A	
是否默认走货路径	该走货路径是否为营业部的默认走货路径	N/A	2	N/A	
状态	状态,包括生效、失效两种状态	N/A	10	N/A	
1.8.3	走货路径查询条件
字段名称 	说明 	输入限制	长度	是否必填	备注
出发站	出发站名称	选择框	50	否	参见业务规则：SR-5
到达站	到达站名称	选择框	50	否	参见业务规则：SR-5
运输性质	运输性质,默认全部	下拉框	10	否	参见业务规则：SR-5
状态	状态,包括全部、生效、失效，默认为全部	下拉框	10	否	
1.8.4	网点组列表数据
字段名称 	说明 	输入限制	长度	是否必填	备注
出发网点组	出发网点组，包含作为一组的营业部	N/A	1000	N/A	
到达网点组	到达网点组，包含作为一组的营业部	N/A	1000	N/A	

1.8.5	线路列表信息
字段名称 	说明 	输入限制	长度	是否必填	备注
序号	该线路在走货路径中所占的顺序	N/A	2	N/A	
线路名称	中转到中转线路名称，从中转到中转线路信息基础资料中选择	N/A	50	N/A	
线路简码	线路简码	N/A	10	N/A	
出发站	出发站名称	N/A	50	N/A	
到达站	到达站名称	N/A	50	N/A	
时效（小时）	中转到中转线路的运行时效，单位小时	N/A	4	N/A	
经停时间（小时）	停留时间，单位:小时	N/A	4	N/A	

1.8.6	线路新增/修改信息
字段名称 	说明 	输入限制	输入项提示文本	长度	是否必填	备注
序号	该线路在走货路径中所占的顺序	数字		2		
线路名称	中转到中转线路名称，从中转到中转线路信息基础资料中选择	选择框		50	是	参见业务规则：SR-3
线路简码	线路简码	N/A		10	N/A	自动带出
出发站	出发站名称	选择框		50	是	
到达站	到达站名称	选择框		50	是	
时效（小时）	中转到中转线路的运行时效，单位小时	N/A		4	N/A	自动带出
经停时间（小时）	停留时间，单位:小时	数字		4	是	
1.9	非功能性需求
使用量	
2012年全网估计用户数	
响应要求（如果与全系统要求 不一致的话）	
使用时间段	
高峰使用时间段	

1.10	接口描述
接口名称 	对方系统（外部系统或内部其他模块）	接口描述
		
*/


package com.deppon.foss.module.base.baseinfo.server.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.collections.MapUtils;
import org.apache.commons.lang.BooleanUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.time.DateUtils;
import org.apache.log4j.Logger;
import org.springframework.transaction.annotation.Transactional;

import com.deppon.foss.base.util.SqlUtil;
import com.deppon.foss.base.util.define.FlagConstants;
import com.deppon.foss.base.util.define.NumberConstants;
import com.deppon.foss.base.util.define.SymbolConstants;
import com.deppon.foss.framework.cache.CacheManager;
import com.deppon.foss.framework.cache.ICache;
import com.deppon.foss.module.base.baseinfo.api.server.dao.IFreightRouteDao;
import com.deppon.foss.module.base.baseinfo.api.server.dao.IFreightRouteLineDao;
import com.deppon.foss.module.base.baseinfo.api.server.dao.INetGroupMixDao;
import com.deppon.foss.module.base.baseinfo.api.server.service.IDepartureStandardService;
import com.deppon.foss.module.base.baseinfo.api.server.service.IExpressDepartureStandardService;
import com.deppon.foss.module.base.baseinfo.api.server.service.IExpressLineService;
import com.deppon.foss.module.base.baseinfo.api.server.service.IFreightRouteLineService;
import com.deppon.foss.module.base.baseinfo.api.server.service.IFreightRouteService;
import com.deppon.foss.module.base.baseinfo.api.server.service.ILdpAgencyCompanyService;
import com.deppon.foss.module.base.baseinfo.api.server.service.ILineItemService;
import com.deppon.foss.module.base.baseinfo.api.server.service.ILineService;
import com.deppon.foss.module.base.baseinfo.api.server.service.INetGroupService;
import com.deppon.foss.module.base.baseinfo.api.server.service.IOrgAdministrativeInfoService;
import com.deppon.foss.module.base.baseinfo.api.server.service.IOutfieldService;
import com.deppon.foss.module.base.baseinfo.api.server.service.ISaleDepartmentService;
import com.deppon.foss.module.base.baseinfo.api.server.service.IVehicleAgencyCompanyService;
import com.deppon.foss.module.base.baseinfo.api.server.service.esb.ISendFreightRouteInfoToWDGHService;
import com.deppon.foss.module.base.baseinfo.api.server.service.esb.ISendFreightRouteLineInfoToWDGHService;
import com.deppon.foss.module.base.baseinfo.api.server.service.esb.ISendNetGroupMixInfoToWDGHService;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.BusinessPartnerExpressEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.DepartureStandardEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.ExpressDepartureStandardEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.ExpressLineEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.FreightRouteEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.FreightRouteLineEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.LineEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.LineItemEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.NetGroupMixEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.OrgAdministrativeInfoEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.OutfieldEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.SaleDepartmentEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.dto.DepartureStandardDto;
import com.deppon.foss.module.base.baseinfo.api.shared.dto.FreightRouteConditionDto;
import com.deppon.foss.module.base.baseinfo.api.shared.dto.FreightRouteLineAgingDto;
import com.deppon.foss.module.base.baseinfo.api.shared.dto.FreightRouteLineDto;
import com.deppon.foss.module.base.baseinfo.api.shared.dto.FreightRouteProductDto;
import com.deppon.foss.module.base.baseinfo.api.shared.dto.MapDto;
import com.deppon.foss.module.base.baseinfo.api.shared.exception.FreightRouteException;
import com.deppon.foss.module.base.baseinfo.api.shared.exception.LineException;
import com.deppon.foss.module.base.baseinfo.server.cache.FullFreightRouteCacheDeal;
import com.deppon.foss.module.base.baseinfo.server.util.LineUtils;
import com.deppon.foss.module.base.dict.api.server.service.IConfigurationParamsService;
import com.deppon.foss.module.base.dict.api.shared.define.DictionaryConstants;
import com.deppon.foss.module.base.dict.api.shared.define.DictionaryValueConstants;
import com.deppon.foss.module.pickup.pricing.api.server.service.IProductService;
import com.deppon.foss.module.pickup.pricing.api.shared.domain.ProductEntity;
import com.deppon.foss.module.pickup.pricing.api.shared.dto.ProductDto;
import com.deppon.foss.util.common.FossTTLCache;
import com.deppon.foss.util.define.FossConstants;


/**
 * 走货路径服务类
 * @author foss-zhujunyong
 * @date Nov 1, 2012 1:42:31 PM
 * @version 1.0
 */
public class FreightRouteService implements IFreightRouteService {

    /**
     * 日志类
     */
    private static final Logger log = Logger.getLogger(FreightRouteService.class);

    /**
     * 
     * freightRouteDao
     */
     
    private IFreightRouteDao freightRouteDao;
    
    /**
     * 
     * orgAdministrativeInfoService
     */
     
    private IOrgAdministrativeInfoService orgAdministrativeInfoService;

    /**
     * 
     * saleDepartmentService
     */
   
    private ISaleDepartmentService saleDepartmentService;

    /**
     * 
     * netGroupService
     */
    
    private INetGroupService netGroupService;
    
    /**
     * 
     * lineService
     */
    
    private ILineService lineService;
    
    /**
     * 
     * freightRouteLineService
     */
     
    private IFreightRouteLineService freightRouteLineService;
    
    /**
     * 
     * freightRouteLineDao
     */
    
    private IFreightRouteLineDao freightRouteLineDao;
    
    /**
     * 
     * lineItemService
     */
     
    private ILineItemService lineItemService;
    
    /**
     * 
     * departureStandardService
     */
     
    private IDepartureStandardService departureStandardService;
    
    /**
     * 
     * productService
     */
     
    private IProductService productService;

    /**
     * 
     * outfieldService
     */
     
    private IOutfieldService outfieldService;
    
    /**
     * 
     * vehicleAgencyCompanyService
     */
     
    private IVehicleAgencyCompanyService vehicleAgencyCompanyService;
    
    /**
     * ldpAgencyCompanyService
     */
     
    private ILdpAgencyCompanyService ldpAgencyCompanyService;
    /**
     * IExpressLineService
     */
     
    private IExpressLineService expresslineService;
    /**
     * IExpressDepartureStandardService
     */
    
    private IExpressDepartureStandardService expressdepartureStandardService;

    /**
     * 
     * netGroupDao
     */
   
    private INetGroupMixDao netGroupMixDao;
    
    /**
     * sendNetGroupMixInfoToWDGHService
     */
     
    private ISendNetGroupMixInfoToWDGHService sendNetGroupMixInfoToWDGHService;
    
    /**
     * 
     * sendFreightRouteLineInfoToWDGHService
     */
     
    private ISendFreightRouteLineInfoToWDGHService sendFreightRouteLineInfoToWDGHService;
    
    private IConfigurationParamsService configurationParamsService;
   
    public void setConfigurationParamsService(IConfigurationParamsService configurationParamsService) {
		this.configurationParamsService = configurationParamsService;
	}


	/**
     * 
     * @author foss-qrs
     * @date Apr 7, 2016 10:20:56 AM
     * @param netGroupDao
     * @see
     */
    public void setNetGroupMixDao(INetGroupMixDao netGroupMixDao) {
        this.netGroupMixDao = netGroupMixDao;
    }
    
    /**
     * 
     * sendFreightRouteInfoToWDGHService
     */
   
    private ISendFreightRouteInfoToWDGHService sendFreightRouteInfoToWDGHService;
	
    public void setExpressdepartureStandardService(
			IExpressDepartureStandardService expressdepartureStandardService) {
		this.expressdepartureStandardService = expressdepartureStandardService;
	}


	public void setExpresslineService(IExpressLineService expresslineService) {
		this.expresslineService = expresslineService;
	}

	/**
     * @param vehicleAgencyCompanyService the vehicleAgencyCompanyService to set
     */
    public void setVehicleAgencyCompanyService(
    	IVehicleAgencyCompanyService vehicleAgencyCompanyService) {
        this.vehicleAgencyCompanyService = vehicleAgencyCompanyService;
    }


    /**
     * 
     * @author foss-zhujunyong
     * @date Mar 13, 2013 10:21:10 AM
     * @param freightRouteLineDao
     * @see
     */
    public void setFreightRouteLineDao(IFreightRouteLineDao freightRouteLineDao) {
        this.freightRouteLineDao = freightRouteLineDao;
    }


    /**
     * 
     * @author foss-zhujunyong
     * @date Mar 13, 2013 10:21:17 AM
     * @param outfieldService
     * @see
     */
    public void setOutfieldService(IOutfieldService outfieldService) {
        this.outfieldService = outfieldService;
    }

    /**
     * 
     * @author foss-zhujunyong
     * @date Mar 5, 2013 5:52:05 PM
     * @param productService
     * @see
     */
    public void setProductService(IProductService productService) {
        this.productService = productService;
    }

    /**
     * 
     * @author foss-zhujunyong
     * @date Mar 13, 2013 10:21:24 AM
     * @param departureStandardService
     * @see
     */
    public void setDepartureStandardService(IDepartureStandardService departureStandardService) {
        this.departureStandardService = departureStandardService;
    }

    /**
     * 
     * @author foss-zhujunyong
     * @date Mar 13, 2013 10:21:34 AM
     * @param lineItemService
     * @see
     */
    public void setLineItemService(ILineItemService lineItemService) {
        this.lineItemService = lineItemService;
    }

    /**
     * 
     * @author foss-zhujunyong
     * @date Mar 13, 2013 10:21:39 AM
     * @param freightRouteLineService
     * @see
     */
    public void setFreightRouteLineService(IFreightRouteLineService freightRouteLineService) {
        this.freightRouteLineService = freightRouteLineService;
    }

    /**
     * 
     * @author foss-zhujunyong
     * @date Mar 13, 2013 10:21:45 AM
     * @param lineService
     * @see
     */
    public void setLineService(ILineService lineService) {
        this.lineService = lineService;
    }

    /**
     * 
     * @author foss-zhujunyong
     * @date Mar 13, 2013 10:21:55 AM
     * @param freightRouteDao
     * @see
     */
    public void setFreightRouteDao(IFreightRouteDao freightRouteDao) {
        this.freightRouteDao = freightRouteDao;
    }

    /**
     * 
     * @author foss-zhujunyong
     * @date Mar 13, 2013 10:21:59 AM
     * @param orgAdministrativeInfoService
     * @see
     */
    public void setOrgAdministrativeInfoService(IOrgAdministrativeInfoService orgAdministrativeInfoService) {
        this.orgAdministrativeInfoService = orgAdministrativeInfoService;
    }

    
    /**
     * 
     * @author foss-zhujunyong
     * @date Mar 13, 2013 10:22:09 AM
     * @param saleDepartmentService
     * @see
     */
    public void setSaleDepartmentService(ISaleDepartmentService saleDepartmentService) {
        this.saleDepartmentService = saleDepartmentService;
    }

    
    /**
     * 
     * @author foss-zhujunyong
     * @date Mar 13, 2013 10:22:18 AM
     * @param netGroupService
     * @see
     */
    public void setNetGroupService(INetGroupService netGroupService) {
        this.netGroupService = netGroupService;
    }

    /**
     * 
     * @author foss-zhangjiheng
     * @date Mar 13, 2013 10:22:18 AM
     * @param netGroupService
     * @see
     */
	public void setLdpAgencyCompanyService(
			ILdpAgencyCompanyService ldpAgencyCompanyService) {
		this.ldpAgencyCompanyService = ldpAgencyCompanyService;
	}

	/**
	 * 
	 * @author foss-qirongsheng
	 * @date Apr 6, 2016 5:13:42 PM
	 * @param sendFreightRouteInfoToWDGHService
	 * @see
	 */
	public void setSendFreightRouteInfoToWDGHService(
			ISendFreightRouteInfoToWDGHService sendFreightRouteInfoToWDGHService) {
		this.sendFreightRouteInfoToWDGHService = sendFreightRouteInfoToWDGHService;
	}
	
    /**
     * 
     * @author foss-qirongsheng
     * @date Apr 7, 2016 10:26:23 AM
     * @param sendNetGroupMixInfoToWDGHService
     * @see
     */
	public void setSendNetGroupMixInfoToWDGHService(
			ISendNetGroupMixInfoToWDGHService sendNetGroupMixInfoToWDGHService) {
		this.sendNetGroupMixInfoToWDGHService = sendNetGroupMixInfoToWDGHService;
	}
	
    /**
     * 
     * @author foss-qirongsheng
     * @date Mar 24, 2016 5:37:32 PM
     * @param sendFreightRouteLineInfoToWDGHService
     * @see
     */
	public void setSendFreightRouteLineInfoToWDGHService(
			ISendFreightRouteLineInfoToWDGHService sendFreightRouteLineInfoToWDGHService) {
		this.sendFreightRouteLineInfoToWDGHService = sendFreightRouteLineInfoToWDGHService;
	}
	
	/** 
     * <p>添加走货路径</p> 
     * @author foss-zhujunyong
     * @date Nov 1, 2012 1:42:31 PM
     * @param freightRoute
     * @return 
     * @see com.deppon.foss.module.base.baseinfo.api.server.service.IFreightRouteService#addFreightRoute(com.deppon.foss.module.base.baseinfo.api.shared.domain.FreightRouteEntity)
     */
    @Override
    //@Transactional
    public FreightRouteEntity addFreightRoute(FreightRouteEntity freightRoute) {
	if (freightRoute == null) {
	    return null;
	}
	// 如果要添加的这条走货路径是默认的，那么就要检查是否是唯一的
	if (freightRoute.checkDefaultRoute()) {
	    FreightRouteEntity condition = new FreightRouteEntity();
	    condition.setActive(FossConstants.ACTIVE);
	    condition.setOrginalOrganizationCode(freightRoute.getOrginalOrganizationCode());
	    condition.setDestinationOrganizationCode(freightRoute.getDestinationOrganizationCode());
	    condition.setDefaultRoute(FossConstants.YES);
	    condition.setTransType(freightRoute.getTransType());
	    List<FreightRouteEntity> list = queryFreightRouteListByCondition(condition);
	    if (CollectionUtils.isNotEmpty(list)) {
		// 如果能找到走货路径，则抛出走货路径已经存在的exception
		throw new FreightRouteException(FreightRouteException.FREIGHTROUTE_EXIST);
	    }
	}
	freightRoute.setValid(FossConstants.NO);
	
	// 两点之间的非默认走货路径可以添加多条，不用检查
	FreightRouteEntity freightRouteEntity = freightRouteDao.addFreightRoute(freightRoute);
	//同步新增走货路径到WDGH
	if(null != freightRouteEntity){
		List<FreightRouteEntity> frlist = new ArrayList<FreightRouteEntity>();
		frlist.add(freightRouteEntity);
		sendFreightRouteInfoToWDGHService.syncFreightRouteInfo(frlist,NumberConstants.ONE.toString());
	}
	return freightRouteEntity;
    }

    /** 
     * <p>作废走货路径</p> 
     * @author foss-zhujunyong
     * @date Nov 1, 2012 1:42:31 PM
     * @param freightRoute
     * @return 
     * @see com.deppon.foss.module.base.baseinfo.api.server.service.IFreightRouteService#deleteFreightRoute(com.deppon.foss.module.base.baseinfo.api.shared.domain.FreightRouteEntity)
     */
    @Override
    @Transactional
    public FreightRouteEntity deleteFreightRoute(FreightRouteEntity freightRoute) { 	
    List<NetGroupMixEntity> outlist = new ArrayList<NetGroupMixEntity>(); 
    List<FreightRouteLineEntity> outlist2 = new  ArrayList<FreightRouteLineEntity>();
	
	if (freightRoute == null) {
	    return null;
	}
	FreightRouteEntity entity = querySimpleFreightRouteByVirtualCode(freightRoute.getVirtualCode());
	// 只能作废失效的走货路径
	if (entity.checkValid()) {
	    throw new FreightRouteException(FreightRouteException.VALID_CAN_NOT_BE_DELETED);
	}
	//根据走货路径code查询网点组
		if(StringUtils.isNotBlank(freightRoute.getVirtualCode()))
			outlist = netGroupMixDao.queryNetGroupMixByFreightRoute(freightRoute.getVirtualCode());		
	
	//作废网点组
	netGroupService.deleteNetGroupByFreightRoute(freightRoute.getVirtualCode(), freightRoute.getModifyUser());
	if(CollectionUtils.isNotEmpty(outlist)){
		List<NetGroupMixEntity> nmList = new ArrayList<NetGroupMixEntity>();
		Date date = new Date();
		for(NetGroupMixEntity netGroupMixEntity:outlist){
			//同步作废网点组到WDGH
			netGroupMixEntity.setActive(FossConstants.INACTIVE);
			netGroupMixEntity.setModifyDate(date);
			netGroupMixEntity.setModifyUser(freightRoute.getModifyUser());
			netGroupMixEntity.setVersion(date.getTime());
			nmList.add(netGroupMixEntity);
		}
		sendNetGroupMixInfoToWDGHService.syncNetGroupMixInfo(nmList, NumberConstants.THREE.toString());
	}
	
	//根据走货路径code查询走货路径线路
	if(StringUtils.isNotBlank(freightRoute.getVirtualCode())){
		FreightRouteLineEntity freightRouteLineEntity = new FreightRouteLineEntity();
		freightRouteLineEntity.setFreightRouteVirtualCode(freightRoute.getVirtualCode());
		outlist2 = freightRouteLineDao.queryFreightRouteLineListByFreightRoute(freightRouteLineEntity);
	}
	//作废走货路径线路
	freightRouteLineService.deleteFreightRouteLineByFreightRoute(freightRoute.getVirtualCode(), freightRoute.getModifyUser());
	if(CollectionUtils.isNotEmpty(outlist2)){
		List<FreightRouteLineEntity> frList = new ArrayList<FreightRouteLineEntity>();
		for(FreightRouteLineEntity freightRouteLineEntity:outlist2){
			freightRouteLineEntity.setActive(FossConstants.INACTIVE);
			freightRouteLineEntity.setModifyDate(new Date());
			freightRouteLineEntity.setModifyUser(freightRoute.getModifyUser());
			freightRouteLineEntity.setVersion(new Date().getTime());
			frList.add(freightRouteLineEntity);
		}
		//同步作废走货路径线路到WDGH
		sendFreightRouteLineInfoToWDGHService.syncFreightRouteLineInfo(frList, NumberConstants.THREE.toString());
	}
	
	FreightRouteEntity ftEntity = freightRouteDao.queryFreightRouteByVirtualCode(freightRoute.getVirtualCode());
	//作废走货路径
	FreightRouteEntity result = freightRouteDao.deleteFreightRoute(freightRoute);
	
	if(result != null && ftEntity != null){
		//同步作废走货路径到WDGH
		ftEntity.setActive(result.getActive());
		ftEntity.setModifyDate(result.getModifyDate());
		ftEntity.setModifyUser(result.getModifyUser());
		ftEntity.setVersion(result.getVersion());
		
		List<FreightRouteEntity> frlist = new ArrayList<FreightRouteEntity>();
		frlist.add(ftEntity);
		sendFreightRouteInfoToWDGHService.syncFreightRouteInfo(frlist, NumberConstants.THREE.toString());
	}
	
	if (result != null) {
	    invalidEntity(result.getVirtualCode());
	}
	return result;
    }

    /** 
     * <p>更新走货路径</p> 
     * @author foss-zhujunyong
     * @date Nov 1, 2012 1:42:31 PM
     * @param freightRoute
     * @return 
     * @see com.deppon.foss.module.base.baseinfo.api.server.service.IFreightRouteService#updateFreightRoute(com.deppon.foss.module.base.baseinfo.api.shared.domain.FreightRouteEntity)
     */
    @Override
    //@Transactional
    public FreightRouteEntity updateFreightRoute(FreightRouteEntity freightRoute) {
	if (freightRoute == null) {
	    return null;
	}
	FreightRouteEntity entity = querySimpleFreightRouteByVirtualCode(freightRoute.getVirtualCode());
	// 只能作废失效的走货路径
	if (entity.checkValid()) {
	    throw new FreightRouteException(FreightRouteException.VALID_CAN_NOT_BE_DELETED);
	}
	freightRoute.setValid(FossConstants.NO);

	FreightRouteEntity result = freightRouteDao.updateFreightRoute(freightRoute);
	//同步更新走货路径到WDGH
	List<FreightRouteEntity> frlist = new ArrayList<FreightRouteEntity>();
	frlist.add(result);
	sendFreightRouteInfoToWDGHService.syncFreightRouteInfo(frlist, NumberConstants.TWO.toString());
	
	if (result != null) {
	    invalidEntity(result.getVirtualCode());
	}
	return result;
    }

    /** 
     * <p>根据ID查询走货路径</p> 
     * @author foss-zhujunyong
     * @date Nov 1, 2012 1:42:32 PM
     * @param id
     * @return 
     * @see com.deppon.foss.module.base.baseinfo.api.server.service.IFreightRouteService#queryFreightRouteById(java.lang.String)
     */
    @Override
    public FreightRouteEntity queryFreightRouteById(String id) {
	if (StringUtils.isBlank(id)) {
	    return null;
	}
	return enhance(freightRouteDao.queryFreightRouteById(id));
    }

    /**
     * 
     * <p>根据虚拟代码查询走货路径</p> 
     * @author foss-zhujunyong
     * @date Oct 25, 2012 11:33:00 AM
     * @param virtualCode
     * @return
     * @see
     */
    @Override
    public FreightRouteEntity queryFreightRouteByVirtualCode(String virtualCode) {
    	FreightRouteEntity freightRoute = querySimpleFreightRouteByVirtualCode(virtualCode);
    	// 设置第一个打木架外场
    	this.calcPackingOrg(freightRoute);
    	
    	return enhance(freightRoute);
    }
    
    /**
     * 
     * <p>根据虚拟代码查询走货路径, 不包括冗余属性</p> 
     * @author foss-zhujunyong
     * @date Oct 25, 2012 11:33:00 AM
     * @param virtualCode
     * @return
     * @see
     */
    @Override
    public FreightRouteEntity querySimpleFreightRouteByVirtualCode(String virtualCode) {
	if (StringUtils.isBlank(virtualCode)) {
	    return null;
	}
	// 在缓存中查找,找不到就找数据库
	return SqlUtil.loadCache ? queryEntityCache(virtualCode) : freightRouteDao.queryFreightRouteByVirtualCode(virtualCode);
    }

    
    /** 
     * <p>根据条件查询走货路径</p> 
     * @author foss-zhujunyong
     * @date Nov 1, 2012 1:42:32 PM
     * @param freightRoute
     * @param start
     * @param limit
     * @return 
     * @see com.deppon.foss.module.base.baseinfo.api.server.service.IFreightRouteService#queryFreightRouteListByCondition(com.deppon.foss.module.base.baseinfo.api.shared.domain.FreightRouteEntity, int, int)
     */
    @Override
    public List<FreightRouteEntity> queryFreightRouteListByCondition(
	    FreightRouteEntity freightRoute, int start, int limit) {
	return enhance(querySimpleFreightRouteListByCondition(freightRoute, start, limit));
    }

    /** 
     * <p>根据条件查询走货路径</p> 
     * @author foss-zhujunyong
     * @date Nov 1, 2012 1:42:32 PM
     * @param freightRoute
     * @param start
     * @param limit
     * @return 
     * @see com.deppon.foss.module.base.baseinfo.api.server.service.IFreightRouteService#queryFreightRouteListByCondition(com.deppon.foss.module.base.baseinfo.api.shared.domain.FreightRouteEntity, int, int)
     */
    @Override
    public List<FreightRouteEntity> querySimpleFreightRouteListByCondition(FreightRouteEntity freightRoute, int start, int limit) {
	return freightRouteDao.queryFreightRouteListByCondition(freightRoute, start, limit);
    }
    
    /**
     * 
     * <p>根据条件查询走货路径</p> 
     * @author foss-zhujunyong
     * @date Oct 25, 2012 11:34:06 AM
     * @param freightRoute
     * @param start
     * @param limit
     * @return
     * @see
     */
    @Override
    public List<FreightRouteEntity> queryFreightRouteListByCondition(
	    FreightRouteEntity freightRoute) {
	return queryFreightRouteListByCondition(freightRoute, 0, Integer.MAX_VALUE);
    }
    
    /** 
     * <p>根据条件计算走货路径数量</p> 
     * @author foss-zhujunyong
     * @date Nov 1, 2012 1:42:32 PM
     * @param freightRoute
     * @return 
     * @see com.deppon.foss.module.base.baseinfo.api.server.service.IFreightRouteService#countFreightRouteListByCondition(com.deppon.foss.module.base.baseinfo.api.shared.domain.FreightRouteEntity)
     */
    @Override
    public long countFreightRouteListByCondition(FreightRouteEntity freightRoute) {
	return freightRouteDao.countFreightRouteListByCondition(freightRoute);
    }

    /**
     * 
     * <p>创建走货路径的搜索条件，因为要多次判断是否德邦自有网点，以及是否营业部，驻地营业部，外场，空运总调等，所以构造一个dto来储存这些信息</p> 
     * @author foss-zhujunyong
     * @date Mar 6, 2013 9:30:30 AM
     * @param sourceCode
     * @param targetCode
     * @param productCode
     * @param date
     * @return
     * @see
     */
    private FreightRouteConditionDto createFreightRouteConditionDto(String sourceCode, String targetCode, String productCode, Date date) {
    
    log.debug("sourceCode = " + sourceCode + ", targetCode = " + targetCode + ", productCode = " + productCode + ", date = " + date);
    
    // === 校验部分和初始化逻辑 ===
	if (StringUtils.isBlank(sourceCode) || StringUtils.isBlank(targetCode) || StringUtils.isBlank(productCode)) {
	    log.warn("parameter error, can not found organization.");
	    throw new FreightRouteException("parameter error, can not found organization.");
	}
	
	FreightRouteConditionDto dto = new FreightRouteConditionDto();
	
	if (productService == null) {
	    log.error("productServcie 为空，未注入");
	    throw new FreightRouteException("productServcie 为空，未注入");
	}
	ProductEntity product = productService.getProductByCache(productCode, date);
	if (product == null) {
	    log.warn("productCode error, can not found product, productCode = " + productCode + ", date = " + date);
	    throw new FreightRouteException("productCode error, can not found product, productCode = " + productCode + ", date = " + date);
	}
	
	// 如果出发部门找不到对应的实体，说明出发部门编码有误
	OrgAdministrativeInfoEntity source = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeClean(sourceCode);
	if (source == null) {
	    log.warn("出发部门找不到对应的实体，说明出发部门编码有误, sourceCode = " + sourceCode);
	    throw new FreightRouteException("出发部门找不到对应的实体，说明出发部门编码有误, sourceCode = " + sourceCode);
	}
	
	// 设置dto默认值
	dto.setProductName(product.getName());
	dto.setPriority(product.getPriority());
	dto.setSourceDP(source);
	dto.setSourceCode(sourceCode);	// 始发网点编码
	dto.setProductCode(productCode);	// 产品
	dto.setDate(date);	// 日期

	// === 始发网点业务逻辑 ===

	// 设置网点组的查询起始营业部
	if (source.checkSaleDepartment()) {
		// 设置网点组的始发营业部
	    dto.setNetGroupStartCode(dto.getSourceCode());
	    SaleDepartmentEntity sale = saleDepartmentService.querySimpleSaleDepartmentByCode(source.getCode());
	    if (sale == null) {
    		log.warn("营业部编码 " + source.getCode() + " 在营业部表中找不到相应的记录");
    		throw new FreightRouteException("营业部编码 " + source.getCode() + " 在营业部表中找不到相应的记录");
	    }
	    //始发外场
	    String transferCenterCode =null;
	    /**
	     * 130566--实现零担/快递支线分离:校验是否快递产品  ,若是快递产品或者360特惠件，使用expressLineService查找始发外场
	     */
	    if(LineUtils.isExpOrRcpProduct(productCode)){
	    	transferCenterCode=expresslineService.queryDefaultTransCode(dto.getSourceCode(), productCode, DictionaryValueConstants.BSE_LINE_SORT_SOURCE, date);
	    }else{
	    	transferCenterCode= lineService.queryDefaultTransCode(dto.getSourceCode(), productCode, DictionaryValueConstants.BSE_LINE_SORT_SOURCE, date);
	    }
	    if (StringUtils.isBlank(transferCenterCode)) {
    		log.warn("营业部编码："+dto.getSourceCode()+"找不到始发配载外场");
    		throw new FreightRouteException("营业部编码："+dto.getTargetCode()+"找不到始发配载外场");
	    }
	    log.debug("出发营业部的始发配载外场编码是 " + transferCenterCode);
	    // 设置走货路径始发外场/空运总调
	    dto.setRouteStartCode(transferCenterCode);
	} else if (source.checkTransferCenter()) {
		// 设置网点组的始发营业部
	    dto.setNetGroupStartCode(saleDepartmentService.queryLeaveStationSaleCodeByTransferCenterCode(source.getCode()));
	    // 设置走货路径始发外场
	    dto.setRouteStartCode(dto.getSourceCode());
	    
	    // 与王偕旭，杨巍，陈敏锐于2013-06-09下午在小卖部讨论，为解决目前空运未配置外场走货路径问题，紧急修改，解决目前集中开单组不能开空运单问题
	    // 如果是空运要特殊考虑
	    if (LineUtils.isAirProduct(productCode)) {
    		String defaultAirLineTargetCode = lineService.queryDefaultTransCode(dto.getNetGroupStartCode(), productCode, DictionaryValueConstants.BSE_LINE_SORT_SOURCE, date);
    		if (StringUtils.isBlank(defaultAirLineTargetCode)) {
    		    log.debug("驻地营业部" + dto.getNetGroupStartCode() + "找不到默认的始发空运配载部门");
    		    throw new FreightRouteException("驻地营业部"+ dto.getNetGroupStartCode() + "找不到默认的始发空运配载部门");
    		}
    		dto.setRouteStartCode(defaultAirLineTargetCode);
    		dto.setSourceCode(defaultAirLineTargetCode);
    		dto.setReplaced(true);
    		dto.setAirDispatchCode(source.getCode());
	    } else {
	    	dto.setRouteStartCode(dto.getSourceCode());
	    }
	    
	} else {
	    log.debug("查找走货路径，出发部门即不是营业部也不是外场，部门编码是 " + source.getCode());
	    // 如果既不是营业部也不是外场，那就直接设路由起点
	    dto.setRouteStartCode(dto.getSourceCode());
	}

	// 如果出发部门是空运总调，并且到达部门不是空运代理网点，则取空运总调对应的外场作为出发部门处理
	if (source.checkDoAirDispatch() && !LineUtils.isAirProduct(productCode)) {
	    log.debug("出发部门是空运总调，并且到达部门不是空运代理网点，取空运总调对应的外场作为出发部门处理");
	    String outfieldCode = outfieldService.queryTransferCenterByAirDispatchCode(sourceCode);
	    // 取不到外场对应的code，数据出错
	    if (StringUtils.isBlank(outfieldCode)) {
    		log.warn("部门编码：" + sourceCode + " 有空运总调属性，但是却取不到对应的外场部门编码");
    		throw new FreightRouteException("部门编码：" + sourceCode + " 有空运总调属性，但是却取不到对应的外场部门编码");
	    }
	    source = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeClean(outfieldCode);
	    if (source == null) {
    		log.warn("出发部门找不到对应的实体，说明出发部门编码有误, sourceCode = " + outfieldCode);
    		throw new FreightRouteException("出发部门找不到对应的实体，说明出发部门编码有误, sourceCode = " + outfieldCode);
	    }
	    // 取空运总调对应的外场作为出发部门处理,覆盖原值
	    dto.setSourceCode(outfieldCode);
	    dto.setAirDispatchCode(sourceCode);
	    dto.setReplaced(true);
	}
	

	// === 到达网点业务逻辑 ===
	if (LineUtils.isPXProduct(productCode)) {	// 偏线
		// 到达部分逻辑
	    String companyCode = vehicleAgencyCompanyService.queryCompanyCodeBySiteCode(targetCode);
	    if (StringUtils.isBlank(companyCode)) {
    		log.warn("偏线产品，却找不到对应的代理网点所属的代理公司,无法查找走货路径, 代理网点的编码是 " + targetCode);
    		throw new FreightRouteException("偏线产品，却找不到对应的代理网点所属的代理公司,无法查找走货路径, 代理网点的编码是 " + targetCode);
	    }
	    // 查询目的地是代理公司的到达线路
	    MapDto mapdto = this.lineService.queryDefaultArriveTransferOrgCode(companyCode);
	    if (mapdto == null) {
	    	throw new FreightRouteException("找不到偏线到达线路,无法查找走货路径, 代理公司的编码是 " + companyCode); 
	    }
	    // 设置代理网点
	    dto.setAgencySiteCode(targetCode);
	    // 设置目的代理公司
	    dto.setTargetCode(companyCode);
	    // 设置到达外场
	    dto.setRouteEndCode(mapdto.getCode());
	} else if (LineUtils.isAirProduct(productCode)) {	// 空运
		String companyCode = vehicleAgencyCompanyService.queryCompanyCodeBySiteCode(targetCode);
	    if (StringUtils.isBlank(companyCode)) {
    		log.warn("空运产品，却找不到对应的代理网点所属的代理公司,无法查找走货路径, 代理网点的编码是 " + targetCode);
    		throw new FreightRouteException("空运产品，却找不到对应的代理网点所属的代理公司,无法查找走货路径, 代理网点的编码是 " + targetCode);
	    }
	    // 设置代理网点
	    dto.setAgencySiteCode(targetCode);
	    // 设置目的代理公司
	    dto.setTargetCode(companyCode);
	    
	    OrgAdministrativeInfoEntity routeStart = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeClean(dto.getRouteStartCode());
		if (routeStart == null) {
		    throw new FreightRouteException("出发部门找不到对应的实体，说明出发部门编码有误, sourceCode = " + dto.getRouteStartCode());
		}
		
	    // 设置到达外场
	    if (routeStart.checkDoAirDispatch()) {	// 空运总调
	    	dto.setRouteEndCode(dto.getRouteStartCode());	// 始发总调就是到达总调
	    } else {	// 外场
	    	// 查找外场到空运总调的默认走货路径
	    	List<FreightRouteEntity> list = freightRouteDao.queryAirFreightRouteList(dto.getRouteStartCode());
	    	FreightRouteEntity entity = this.matchFreightRouteByProduct(list, productCode, date);
	    	if (entity == null) {
	    		throw new FreightRouteException("找不到目的站是空运总调的走货路径，始发部门编码是：" + dto.getRouteStartCode()); 
	    	}
	    	dto.setRouteEndCode(entity.getDestinationOrganizationCode());
	    }
	    
	} else if (LineUtils.isExpOrRcpProduct(productCode)) {	// 快递（到达线路可以配置快递代理、虚拟网点、自有网点）
		// 查询目的地是快递代理代理网点的到达线路
		MapDto mapdto=null;
		/**
		 * 130566--实现零担/快递支线分离 ： 快递产品，使用分离后的快递lineService
		 */
		//mapdto= this.lineService.queryDefaultArriveTransferOrgCode(targetCode); 
		mapdto =this.expresslineService.queryDefaultArriveTransferOrgCode(targetCode);
		//先判断目的网点是自有网点还是快递代理
		OrgAdministrativeInfoEntity orgEntity=orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeClean(targetCode);
		
		//设置网点组信息
		if(orgEntity!=null){
		   if(orgEntity.checkSaleDepartment()){
			   //如果到达线路不为空，且始发外场和到达外场相同，则不配置网点组信息，同城线路优先级最高
			   if(mapdto!=null&&!dto.getRouteStartCode().equals(mapdto.getCode())){
			   dto.setNetGroupEndCode(targetCode);
			   }
			   //如果到达线路为空，到达网点是公司自有网点，则设置到达网点组信息
			   if(mapdto == null){
				   dto.setNetGroupEndCode(targetCode);
			   }
		   }
		}
		if (mapdto == null) {
			/*
			 * 根据和王芳、张东平、朱唯8.14号确认，当产品类型为经济快递时，到达线路可以配置到快递代理代理公司也可以配置到快递代理代理网点，
			 * 当查询走货路径时优先按网点查询，如果查询不到在按所属的代理公司查询
			 */
			//如果组织为空，则代表为快递代理网点
			if(orgEntity==null){
				BusinessPartnerExpressEntity ldpCompany=ldpAgencyCompanyService.queryBusinessPartnerByAgencyDeptCode
						(targetCode, FossConstants.ACTIVE);
				if(ldpCompany!=null){
					/**
					 * 130566--实现零担/快递支线分离 ： 快递产品，使用分离后的快递lineService
					 */
					// 查询目的地是快递代理代理公司的到达线路
					//mapdto= this.lineService.queryDefaultArriveTransferOrgCode(ldpCompany.getAgentCompanyCode());
					mapdto =this.expresslineService.queryDefaultArriveTransferOrgCode(ldpCompany.getAgentCompanyCode());
					
				}
			}else{
				throw new FreightRouteException("找不到快递到达线路，无法查找走货路径, 公司网点编码是 " + targetCode); 
			}
			if(mapdto==null){
			    throw new FreightRouteException("找不到快递到达线路，无法查找走货路径, 快递代理网点编码是 " + targetCode); 
			}
		}
	    // 设置快递代理网点
	    dto.setAgencySiteCode(targetCode);
	    // 设置目的快递代理网点
	    dto.setTargetCode(targetCode);
	    // 设置到达外场
	    dto.setRouteEndCode(mapdto.getCode());
	    
	} else {	// 专线(只有德邦自有部门才有必要设到达网点组)
	    dto.setTargetCode(targetCode);
	    
	    // 查询始发外场到营业部的到达线路，BUG-46689
	    DepartureStandardDto departure = lineService.queryDepartureStandardListBySourceTargetDirectly(dto.getRouteStartCode(), targetCode, date);
	    
	    if (departure == null) {	// 如果始发外场和到达营业部没有配置了到达线路，使用默认该营业部默认到达线路
	    	OrgAdministrativeInfoEntity target = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeClean(targetCode);
	   	    if (target == null) {
	       		log.warn("查找走货路径，到达部门找不到对应的实体，说明到达部门编码有误, targetCode = " + targetCode);
	       		throw new FreightRouteException("查找走货路径，到达部门找不到对应的实体，说明到达部门编码有误, targetCode = " + targetCode);
	   	    }
	   	    // 设置到达部门是否空运总调
	   	    dto.setTargetDoAirDispatch(target.checkDoAirDispatch());
	   	    // 设置网点组的查询起始营业部
	   	    if (target.checkSaleDepartment()) {
	       		log.debug("该到达部门是营业部");
	       		dto.setNetGroupEndCode(targetCode);
	       		SaleDepartmentEntity sale = saleDepartmentService.querySimpleSaleDepartmentByCode(target.getCode());
	       		if (sale == null) {
	       		    log.warn("该到达营业部编码在营业部表中找不到相应的记录, 到达营业部编码:" + target.getCode());
	       		    throw new FreightRouteException("该到达营业部编码在营业部表中找不到相应的记录, 到达营业部编码:" + target.getCode());
	       		}
	       		String transferCenterCode = lineService.queryDefaultTransCode(targetCode, productCode, DictionaryValueConstants.BSE_LINE_SORT_TARGET, date);
	       		if (StringUtils.isBlank(transferCenterCode)) {
	       		    log.warn("营业部编码："+targetCode+"找不到到达配载外场");
	       		    throw new FreightRouteException("营业部编码："+targetCode+"找不到到达配载外场");
	       		}
	       		dto.setRouteEndCode(transferCenterCode);
	   	    } else if (target.checkTransferCenter()) {
	       		log.debug("该到达部门是外场");
	       		dto.setNetGroupEndCode(saleDepartmentService.queryArriveStationSaleCodeByTransferCenterCode(target.getCode()));
	       		dto.setRouteEndCode(targetCode);
	   	    } else {
	       		log.debug("该到达组织即不是营业部也不是外场");
	       		dto.setRouteEndCode(targetCode);
	   	    }
	    } else {	// 如果始发外场和到达营业部已经配置了到达线路，则不使用默认该营业部默认到达线路
	    	dto.setRouteEndCode(dto.getRouteStartCode());
	    }
	 
	}
	
	return dto;
    }

    /**
     * 
     * <p>通过出发部门，到达部门，产品类型选取一条走货路径</p> 
     * @author foss-zhujunyong
     * @date Nov 1, 2012 1:48:53 PM
     * @return
     * @see
     */
    @Override
    public FreightRouteEntity queryFreightRouteBySourceTarget(String sourceCode, String targetCode, String productCode) {
	FreightRouteConditionDto condition = createFreightRouteConditionDto(sourceCode, targetCode, productCode, new Date());
	// 判断传入参数是否合法
	if (condition == null || BooleanUtils.isFalse(condition.validate())) {
	    return null;
	}
	FreightRouteEntity entity = queryFreightRouteBySourceTarget(condition);
	// 如果是短途走货路径（出发外场和到达外场相同），则虚拟一个走货路径实体
	if (entity == null && StringUtils.equals(condition.getRouteStartCode(), condition.getRouteEndCode())) {
	    entity = new FreightRouteEntity();
	    OutfieldEntity outfield = outfieldService.queryOutfieldByOrgCode(condition.getRouteStartCode());
	    if (outfield == null) {
		return null;
	    }
	    entity.setDoPacking(outfield.checkPackingWood() ? FossConstants.YES : FossConstants.NO);
	    entity.setPackingOrganizationCode(condition.getRouteStartCode());

	    entity.setOrginalOrganizationCode(condition.getRouteStartCode());
	    entity.setDestinationOrganizationCode(condition.getRouteEndCode());
	    entity.setActive(FossConstants.ACTIVE);
	    entity.setTransType(productCode);
	} else {
		calcPackingOrg(entity);
	}
	
	return enhance(entity);
    }
    
    /**
     * 
     * <p>查询走货路径</p> 
     * @author foss-zhujunyong
     * @date Mar 6, 2013 9:31:14 AM
     * @param condition
     * @return
     * @see
     */
    private FreightRouteEntity queryFreightRouteBySourceTarget(FreightRouteConditionDto condition) {
	// 判断传入参数是否合法
	if (condition == null || BooleanUtils.isFalse(condition.validate())) {
	    return null;
	}

	// 如果可以查询网点组
	if (StringUtils.isNotBlank(condition.getNetGroupStartCode()) && StringUtils.isNotBlank(condition.getNetGroupEndCode())) {
	    // 通过网点组查询走货路径
	    List<String> freightRouteCodeList = netGroupService.queryFreightRouteCode(condition.getNetGroupStartCode(), condition.getNetGroupEndCode());
	    if (CollectionUtils.isNotEmpty(freightRouteCodeList)) { //如果找到了走货路径
		// 根据走货路径虚拟编码找出走货路径列表
		List<FreightRouteEntity> netGroupList = new ArrayList<FreightRouteEntity> ();
		for (String code : freightRouteCodeList) {
		    FreightRouteEntity entity = querySimpleFreightRouteByVirtualCode(code);
		    if (entity != null) {
		    	netGroupList.add(entity);
		    }
		}
		
		// 验证productCode,取出符合的唯一一条走货路径
		FreightRouteEntity entity = matchFreightRouteByProduct(netGroupList, condition.getProductCode(), condition.getDate());
		if (entity != null) {
			return entity;
		}
		
	    }
	}

	FreightRouteEntity c = new FreightRouteEntity();
	c.setActive(FossConstants.ACTIVE);
	c.setValid(FossConstants.YES);
	c.setOrginalOrganizationCode(condition.getRouteStartCode());
	c.setDestinationOrganizationCode(condition.getRouteEndCode());
//	c.setTransType(condition.getProductCode());
	// 如果网点组找不到而在走货路径表中直接找的话，应该取默认的（两个外场之间只能有一条默认的走货路径）。
	c.setDefaultRoute(FossConstants.YES);
	List<FreightRouteEntity> list = querySimpleFreightRouteListByCondition(c, 0, NumberConstants.NUMBER_100);
	
	FreightRouteEntity entity = matchFreightRouteByProduct(list, condition.getProductCode(), condition.getDate());
	return entity;
    }
    
    /**
     * 
     * <p>查询两点之间的走货路径，页面查询专用</p> 
     * @author foss-zhujunyong
     * @date Jan 23, 2013 3:24:05 PM
     * @param sourceCode
     * @param targetCode
     * @param productCode
     * @param time
     * @return
     * @see
     */
    @Override
    public List<FreightRouteLineDto> queryEnhanceFreightRouteBySourceTarget(String sourceCode, String targetCode, String productCode, Date time) {
	List<FreightRouteLineDto> list = queryFreightRouteBySourceTarget(sourceCode, targetCode, productCode, time);
	if (CollectionUtils.isEmpty(list)) {
	    String sourceName = orgAdministrativeInfoService.queryCommonNameByCommonCodeFromCache(sourceCode);
	    String targetName = orgAdministrativeInfoService.queryCommonNameByCommonCodeFromCache(targetCode);
	    String productName = productCode;
	    ProductEntity product = productService.getProductByCache(productCode, time);
	    if (product != null) {
	    	productName = product.getName();
	    }
	    throw new FreightRouteException(FreightRouteException.FREIGHTROUTE_NOT_EXIST, sourceName, targetName, productName);
	}
	for (FreightRouteLineDto dto : list) {
	    dto.setSourceName(orgAdministrativeInfoService.queryCommonNameByCommonCodeFromCache(dto.getSourceCode()));
	    dto.setTargetName(orgAdministrativeInfoService.queryCommonNameByCommonCodeFromCache(dto.getTargetCode()));
	    /**
	     *  130566--实现零担/快递支线分离 :拼接线路名称，若是快递始发，和快递到达的话
	     */
	    if(LineUtils.isExpOrRcpProduct(productCode)&&
	    		(StringUtils.equals(dto.getLineSort(), DictionaryValueConstants.BSE_LINE_SORT_SOURCE)||StringUtils.equals(dto.getLineSort(), DictionaryValueConstants.BSE_LINE_SORT_TARGET))){
	    	ExpressLineEntity line =expresslineService.queryLineByVirtualCode(dto.getLineVirtualCode());
    		if(line !=null){
    			dto.setLineName(line.getLineName());
    		}
	    }else{
	    	LineEntity line = lineService.queryLineByVirtualCode(dto.getLineVirtualCode());
		    // 外场和驻地营业部直接的line是null，就不用设置线路名称了
		    if (line != null) {
		    	dto.setLineName(line.getLineName());
		    }
	    }
	    
	}
	return list;
    }
    
    /**
     * 
     * <p>查询两点直接是否有线路(只考虑是否有一条线路可以从起点到终点，不考虑拼接线路)可以到达，优先考虑无经停直达线路，返回找到的第一条</p> 
     * @author foss-zhujunyong
     * @date Mar 6, 2013 9:31:40 AM
     * @param condition
     * @param time
     * @return
     * @see
     */
    private FreightRouteLineDto queryFreightRouteLineDtoViaLine(FreightRouteConditionDto condition, Date time) {
	if (condition == null || BooleanUtils.isFalse(condition.validate())) {
	    return null;
	}
	/**
	 * 130566--实现零担/快递支线分离 : 校验是否快递产品、360特惠件，在快递线路中查找线路（仅限于快递始发，和到达）
	 */
	if(StringUtils.isNotBlank(condition.getProductCode())&&LineUtils.isExpOrRcpProduct(condition.getProductCode())){
		ExpressLineEntity expressLine =new ExpressLineEntity();
		expressLine.setActive(FossConstants.ACTIVE);
		expressLine.setValid(FossConstants.YES);
		expressLine.setOrginalOrganizationCode(condition.getSourceCode());
		expressLine.setDestinationOrganizationCode(condition.getTargetCode());
		List<ExpressLineEntity> expressLineList = expresslineService.querySimpleLineListByCondition(expressLine);
		//如果在快递line表中找到
		if(CollectionUtils.isNotEmpty(expressLineList)){
			for (ExpressLineEntity expressLineEntity : expressLineList) {
				if (expressLineEntity == null) {
				    continue;
				}
				// 如果是快递始发或快递到达线路
				if (!StringUtils.equals(expressLineEntity.getLineSort(), DictionaryValueConstants.BSE_LINE_SORT_TRANSFER)) {
					
				    return fetchExpressSourceTargetLineDto(expressLineEntity.getOrginalOrganizationCode(), expressLineEntity.getDestinationOrganizationCode(), condition, time, expressLineEntity.getLineSort());
				}
			}
		}
	}
	LineEntity line = new LineEntity();
	line.setActive(FossConstants.ACTIVE);
	line.setValid(FossConstants.YES);
	line.setOrginalOrganizationCode(condition.getSourceCode());
	line.setDestinationOrganizationCode(condition.getTargetCode());
	List<LineEntity> lineList = lineService.querySimpleLineListByCondition(line);
	// 如果在line表中找到
	if (CollectionUtils.isNotEmpty(lineList)) {
	    for (LineEntity entity : lineList) {
		if (entity == null) {
		    continue;
		}
		// 如果是始发或到达线路
		//313353 sonar
		return this.sonarSplitOne(entity, condition, time);
	    }
	} else { // 如果在line表中找不到，就到lineItme表中找找看
	    // 先找出起点匹配的lineItem
	    LineItemEntity item = new LineItemEntity();
	    item.setOrginalOrganizationCode(condition.getSourceCode());
	    item.setActive(FossConstants.ACTIVE);
	    List<LineItemEntity> itemList = lineItemService.querySimpleLineItemListByCondition(item);
	    // 如果起点匹配的lineItem也没有的话，就不用再找终点了，直接返回null
	    if (CollectionUtils.isEmpty(itemList)) {
		return null;
	    }
	    // 把线路虚拟编码收集起来
	    List<String> lineVirtualCodeList = new ArrayList<String>();
	    //313353 sonar
	    this.sonarSplitTwo(itemList, lineVirtualCodeList);
	    
	    for (String lineVirtualCode : lineVirtualCodeList) {
		// 通过线路虚拟编码，找出每一个线路的线段集合
		List<LineItemEntity> lineItemList = lineItemService.querySimpleLineItemListByLineVirtualCode(lineVirtualCode);
		if (CollectionUtils.isEmpty(lineItemList)) {
		    continue;
		}

		//313353 sonar
		return this.sonarSplitThree(lineItemList, condition, lineVirtualCode, time);
	    }
	}
	// line和lineItem表都找不到，返回null
	return null;
    }
    
    /**
	 * sonar优化拆分
	 * 
	 * @author 313353
	 */
	private FreightRouteLineDto sonarSplitOne(LineEntity entity, 
			FreightRouteConditionDto condition, Date time) {
		// 如果是始发或到达线路
		if (!StringUtils.equals(entity.getLineSort(), DictionaryValueConstants.BSE_LINE_SORT_TRANSFER)) {
		    return fetchSourceTargetLineDto(entity.getOrginalOrganizationCode(), entity.getDestinationOrganizationCode(), condition, time, entity.getLineSort());
		} else { // 如果是中转直达线路（只有一个线段）
		    List<DepartureStandardEntity> standardList = departureStandardService.queryDepartureStandardListByLineVirtualCode(entity.getVirtualCode());
		    FreightRouteLineEntity frl = new FreightRouteLineEntity();
		    frl.setOrginalOrganizationCode(entity.getOrginalOrganizationCode());
		    frl.setDestinationOrganizationCode(entity.getDestinationOrganizationCode());
		    frl.setLineVirtualCode(entity.getVirtualCode());
		    frl.setPassbyAging(LineUtils.isFast(condition.getPriority()) ? entity.getFastAging() : entity.getCommonAging());
		    return createFreightRouteLineDto(frl, standardList, time, condition.getPriority());
		}
	}
	
	/**
	 * sonar优化拆分
	 * 
	 * @author 313353
	 */
	private void sonarSplitTwo(List<LineItemEntity> itemList, List<String> lineVirtualCodeList) {
		for (LineItemEntity entity : itemList) {
			if (entity != null && StringUtils.isNotBlank(entity.getLineVirtualCode())) {
				lineVirtualCodeList.add(entity.getLineVirtualCode());
			}
		}
	}
    
	/**
	 * sonar优化拆分
	 * 
	 * @author 313353
	 */
	private FreightRouteLineDto sonarSplitThree(List<LineItemEntity> lineItemList,
			FreightRouteConditionDto condition, String lineVirtualCode, Date time) {
		// 起点匹配的线段序号
		long sourceSeq = 0;
		// 终点匹配的线段序号
		long targetSeq = 0;
		// 为起点和终点匹配的线段序号赋值
		for (LineItemEntity entity : lineItemList) {
			if (StringUtils.equals(condition.getSourceCode(),
					entity.getOrginalOrganizationCode())) {
				sourceSeq = entity.getSequence() == null ? 0 : entity
						.getSequence();
			}
			if (StringUtils.equals(condition.getTargetCode(),
					entity.getDestinationOrganizationCode())) {
				targetSeq = entity.getSequence() == null ? 0 : entity
						.getSequence();
			}
		}
		// 如果终点的线段序号大于或等于起点的线段序号，说明该线段所在的线路符合要求
		if (sourceSeq > 0 && targetSeq >= sourceSeq) {
			List<DepartureStandardEntity> standardList = departureStandardService
					.queryDepartureStandardListByLineVirtualCode(lineVirtualCode);
			FreightRouteLineEntity frl = new FreightRouteLineEntity();
			frl.setOrginalOrganizationCode(condition.getSourceCode());
			frl.setDestinationOrganizationCode(condition.getTargetCode());
			frl.setLineVirtualCode(lineVirtualCode);
			// 作为走货路径线路来说，这一段是虚拟的，当然也就没有经停时间
			frl.setPassbyAging(0L);
			return createFreightRouteLineDto(frl, standardList, time, condition.getPriority());
		}
		return null;
	}
    
    /**
     * 
     * <p>返回 走货路径时，如果替换了空运总调到对应的外场，返回时要替换回来</p> 
     * 
     * 如果替换了代理网点编码到代理公司编码，也要替换回来
     * 
     * @author foss-zhujunyong
     * @date Mar 6, 2013 9:31:57 AM
     * @param list
     * @param condition
     * @return
     * @see
     */
    private List<FreightRouteLineDto> convertFreightRouteLineDtoList(List<FreightRouteLineDto> list, FreightRouteConditionDto condition) {
	
	if (LineUtils.isPXProduct(condition.getProductCode())) {	// 偏线
//		// 追加偏线代理公司->偏线代理网点线路
//		FreightRouteLineDto dto = new FreightRouteLineDto();
//		dto.setSourceCode(condition.getTargetCode());
//		dto.setTargetCode(condition.getAgencySiteCode());
//		list.add(dto);
		
		// 修改最后到达线路 "XX->偏线代理公司" 改为 "XX->偏线代理网点线路"
		list.get(list.size() - 1).setTargetCode(condition.getAgencySiteCode());
	} else if (LineUtils.isAirProduct(condition.getProductCode())) {	// 空运
//		// 追加空运总调->空运代理公司
//		FreightRouteLineDto dto1 = new FreightRouteLineDto();
//		dto1.setSourceCode(condition.getRouteEndCode());
//		dto1.setTargetCode(condition.getTargetCode());
//		list.add(dto1);
//		
//		// 追加空运代理公司->空运代理网点线路
//		FreightRouteLineDto dto2 = new FreightRouteLineDto();
//		dto2.setSourceCode(condition.getTargetCode());
//		dto2.setTargetCode(condition.getAgencySiteCode());
//		list.add(dto2);

		// 追加空运总调->空运代理网点线路
		FreightRouteLineDto dto = new FreightRouteLineDto();
		dto.setSourceCode(condition.getRouteEndCode());
		dto.setTargetCode(condition.getAgencySiteCode());
		list.add(dto);
	}
	
	// 判断是否替换外场到对应的空运总调
	if (condition.isReplaced()) {
	    FreightRouteLineDto first = list.get(0);
	    first.setSourceCode(condition.getAirDispatchCode());
	}
	
	return list;
    }
    
    /**
     * 
     * <p>在没有走货路径的情况下,通过组合线路的方式找到走货路径线路列表</p> 
     * @author foss-zhujunyong
     * @date May 28, 2013 11:52:39 AM
     * @param condition
     * @param time
     * @return
     * @see
     */
    private List<FreightRouteLineDto> queryFreightRouteLineDtoListWithoutFreightRoute(FreightRouteConditionDto condition, Date time) {
    	if (condition == null || BooleanUtils.isFalse(condition.validate())) {
    	    log.warn("organization data error, return null");
    	    return null;
    	}
    
    	// 返回列表
    	List<FreightRouteLineDto> resultList = new ArrayList<FreightRouteLineDto>();

	    // 如果能直接在线路中找到，也直接返回；空运不取配置线路
    	if (!LineUtils.isAirProduct(condition.getProductCode())) {
    	    FreightRouteLineDto dto = queryFreightRouteLineDtoViaLine(condition, time);
    	    if (dto != null) {
        		resultList.add(dto);
        		return convertFreightRouteLineDtoList(resultList, condition);
    	    }
    	}
	    
	    // 如果出发配载部门和到达配载部门相同，则为同城物流，可以不用配走货路径
	    if (StringUtils.equals(condition.getRouteStartCode(), condition.getRouteEndCode())) {
    		// 如果出发部门就是路由起点，就不用找线路了
    		if (!StringUtils.equals(condition.getSourceCode(), condition.getRouteStartCode())) {
    			/**
    			 * 130566--实现零担/快递支线分离 :校验是否是快递产品，还是360特惠件, 若是根据快递线路拼接始发
    			 */
    			FreightRouteLineDto start =null;
    			if(StringUtils.isNotBlank(condition.getProductCode())&&LineUtils.isExpOrRcpProduct(condition.getProductCode())){
    				start=fetchExpressSourceTargetLineDto(condition.getSourceCode(), condition.getRouteStartCode(), condition, time, DictionaryValueConstants.BSE_LINE_SORT_SOURCE);
    			}else{
    				 start = fetchSourceTargetLineDto(condition.getSourceCode(), condition.getRouteStartCode(), condition, time, DictionaryValueConstants.BSE_LINE_SORT_SOURCE);
    			}
    		    if (start != null) {
    			resultList.add(start);
    		    }
    		}
    		// 如果到达部门就是路由终点，就不用找线路了；空运没有到达线路
    		if (!StringUtils.equals(condition.getTargetCode(), condition.getRouteEndCode())
    				&& !LineUtils.isAirProduct(condition.getProductCode())) {
    		    FreightRouteLineDto end =null;
    		    /**
    			 * 130566--实现零担/快递支线分离 :校验是否是快递产品、360特惠件, 若是根据快递线路拼接到达
    			 */
    		    if(StringUtils.isNotBlank(condition.getProductCode())&&LineUtils.isExpOrRcpProduct(condition.getProductCode())){
    		    	 end =fetchExpressSourceTargetLineDto(condition.getRouteEndCode(), condition.getTargetCode(), condition, time, DictionaryValueConstants.BSE_LINE_SORT_TARGET);
    		    }else{
    		    	 end= fetchSourceTargetLineDto(condition.getRouteEndCode(), condition.getTargetCode(), condition, time, DictionaryValueConstants.BSE_LINE_SORT_TARGET);
    		    }
    		    if (end != null) {
    			resultList.add(end);
    		    }
    		}
    		
		    return convertFreightRouteLineDtoList(resultList, condition);
	    }
	    String sourceName = orgAdministrativeInfoService.queryCommonNameByCommonCodeFromCache(condition.getRouteStartCode());
	    String targetName = orgAdministrativeInfoService.queryCommonNameByCommonCodeFromCache(condition.getRouteEndCode());
	    throw new FreightRouteException(FreightRouteException.FREIGHTROUTE_NOT_EXIST, sourceName, targetName, condition.getProductName());
    }
    
    private FullFreightRouteCacheDeal fullFreightRouteCacheDeal;
    
    public void setFullFreightRouteCacheDeal(FullFreightRouteCacheDeal fullFreightRouteCacheDeal) {
		this.fullFreightRouteCacheDeal = fullFreightRouteCacheDeal;
	}
    
    private static final String PKP_BILLING_ROUTE_QUERY = "PKP_BILLING_ROUTE_QUERY"; 
    @Override
    public List<FreightRouteLineDto> query4Billing(String sourceCode, String targetCode, String productCode) {
		String value = configurationParamsService.querySysConfig(DictionaryConstants.SYSTEM_CONFIG_PARM__PKP, PKP_BILLING_ROUTE_QUERY,
				FossConstants.ROOT_ORG_CODE);
		
		if(FossConstants.YES.equals(value)){
			return queryByCache(sourceCode, targetCode, productCode);
		}
		return queryFreightRouteBySourceTarget(sourceCode, targetCode, productCode, new Date());
    }

    @Override
	public List<FreightRouteLineDto> queryByCache(String sourceCode, String targetCode, String productCode) {
		log.info("FreightRouteService.queryByCache(String, String, String) begin sourceCode=" + sourceCode
				+ ", targetCode=" + targetCode + ", productCode=" + productCode);

		if (StringUtils.isEmpty(sourceCode) || StringUtils.isEmpty(targetCode) || StringUtils.isEmpty(productCode)) {
			return new ArrayList<FreightRouteLineDto>();
		}

		StringBuilder sb = new StringBuilder(sourceCode);
		sb.append("#");
		sb.append(targetCode);
		sb.append("#");
		sb.append(productCode);
		String key = sb.toString();

		List<FreightRouteLineDto> result = null;
		try {
			result = fullFreightRouteCacheDeal.getFullFreightRouteByCache(key);
		} catch (Exception e) {
			log.error("queryFreightRouteByCache", e);
		}

		log.info("FreightRouteService.queryByCache(String, String, String) end sourceCode=" + sourceCode
				+ ", targetCode=" + targetCode + ", productCode=" + productCode);

		return result;
	}
    
    
    /**
     * 
     * <p>通过出发部门，到达部门，产品类型和出发时间选取一条走货路径</p> 
     * @author foss-zhujunyong
     * @date Nov 1, 2012 1:48:53 PM
     * @param orginalOrganizationCode 出发部门（营业部或外场）编码
     * @param destinationOrganizationCode 到达部门（营业部或外场）编码
     * @param productType 第三级产品类型
     * @param time 出发时间
     * @return
     * @see
     */
    @Override
    public List<FreightRouteLineDto> queryFreightRouteBySourceTarget(String sourceCode, String targetCode, String productCode, Date time) {
	long startMs = System.currentTimeMillis();
	log.debug("sourceCode=" + sourceCode + ", targetCode=" + targetCode + ", productCode=" + productCode + ", Date=" + time);
	FreightRouteConditionDto condition = createFreightRouteConditionDto(sourceCode, targetCode, productCode, time);
	log.debug("createFreightRouteConditionDto total spend " + (System.currentTimeMillis() - startMs) + " ms");
	log.debug("condition = " + condition);
	if (condition == null || BooleanUtils.isFalse(condition.validate())) {
	    log.warn("organization data error, return null");
	    return null;
	}
 
	// 先取出一条符合的走货路径
	FreightRouteEntity freightRoute = queryFreightRouteBySourceTarget(condition);
	// 如果找不到这样的走货路径,看看有没有线路可以拼装成结果返回
	if (freightRoute == null) {
	    return queryFreightRouteLineDtoListWithoutFreightRoute(condition, time);
	}
	
	// 返回列表
	List<FreightRouteLineDto> resultList = new ArrayList<FreightRouteLineDto>();
	
	// 计算每一个半截线路的发车时间和到达时间
	Date arriveTime = time; // 每一站的出发时间
	// 如果出发部门和走货路径中的出发外场不一致，则需要添加始发线路
	if (!StringUtils.equals(condition.getSourceCode(), freightRoute.getOrginalOrganizationCode())) {
		 FreightRouteLineDto start =new FreightRouteLineDto();
		/**
		 *  130566--实现零担/快递支线分离 : 若是快递产品或者360特惠件，要添加快递始发线路
		 */
		if(LineUtils.isExpOrRcpProduct(productCode)){
			start =fetchExpressSourceTargetLineDto(condition.getSourceCode(), freightRoute.getOrginalOrganizationCode(), condition, arriveTime, DictionaryValueConstants.BSE_LINE_SORT_SOURCE);
		}else{
			start= fetchSourceTargetLineDto(condition.getSourceCode(), freightRoute.getOrginalOrganizationCode(), condition, arriveTime, DictionaryValueConstants.BSE_LINE_SORT_SOURCE);
		}
	    arriveTime = start.getPassbyDate();
	    // 该属性给接送货使用 
	    start.setFreightRouteVirtualCode(freightRoute.getVirtualCode());
	    resultList.add(start);
	}
	
	// 然后计算运作到运作的时间
	List<FreightRouteLineEntity> lineList = freightRouteLineService.querySimpleFreightRouteLineListByFreightRoute(freightRoute.getVirtualCode());
	for (FreightRouteLineEntity entity : lineList) {
	    // 曾经发生过出发站和到达站相同的情况，会产生自己到自己的路径，后查明是数据错误导致。此处也再做一次验证。
	    if (entity == null || StringUtils.equals(entity.getOrginalOrganizationCode(), entity.getDestinationOrganizationCode())) {
		continue;
	    }
	    List<DepartureStandardEntity> standardList = departureStandardService.queryDepartureStandardListByLineVirtualCode(entity.getLineVirtualCode());
	    FreightRouteLineDto dto = createFreightRouteLineDto(entity, standardList, arriveTime, condition.getPriority());
	    // 该属性给接送货使用
	    dto.setFreightRouteVirtualCode(freightRoute.getVirtualCode());
	    resultList.add(dto);
	    arriveTime = dto.getPassbyDate();
	}

	// 如果走货路径的到达外场和到达部门不一致，则需要添加到达线路
	if (!StringUtils.equals(freightRoute.getDestinationOrganizationCode(), condition.getTargetCode())
			&& !LineUtils.isAirProduct(condition.getProductCode())) {
		/**
		 * 130566--实现零担/快递支线分离 : 若是快递产品，要添加快递到达线路
		 */
		FreightRouteLineDto end =null;
		if(LineUtils.isExpOrRcpProduct(productCode)){
			end =fetchExpressSourceTargetLineDto(freightRoute.getDestinationOrganizationCode(), condition.getTargetCode(), condition, arriveTime, DictionaryValueConstants.BSE_LINE_SORT_TARGET);
		}else{
			end = fetchSourceTargetLineDto(freightRoute.getDestinationOrganizationCode(), condition.getTargetCode(), condition, arriveTime, DictionaryValueConstants.BSE_LINE_SORT_TARGET);
		}
	    if (end != null) {
    		// 该属性给接送货使用
    		end.setFreightRouteVirtualCode(freightRoute.getVirtualCode());
    		resultList.add(end);
	    }
	}

	if (LineUtils.isPXProduct(condition.getProductCode())) {	// 偏线
//		// 追加偏线代理公司->偏线代理网点线路
//		FreightRouteLineDto dto = new FreightRouteLineDto();
//		dto.setSourceCode(condition.getTargetCode());
//		dto.setTargetCode(condition.getAgencySiteCode());
//		dto.setFreightRouteVirtualCode(freightRoute.getVirtualCode());
//		resultList.add(dto);
		
		// 修改最后到达线路 "XX->偏线代理公司" 改为 "XX->偏线代理网点线路"
		resultList.get(resultList.size() - 1).setTargetCode(condition.getAgencySiteCode());
		
	} else if (LineUtils.isAirProduct(condition.getProductCode())) {	// 空运
//		// 追加空运总调->空运代理公司
//		FreightRouteLineDto dto1 = new FreightRouteLineDto();
//		dto1.setSourceCode(freightRoute.getDestinationOrganizationCode());
//		dto1.setTargetCode(condition.getTargetCode());
//		dto1.setFreightRouteVirtualCode(freightRoute.getVirtualCode());
//		resultList.add(dto1);
//		
//		// 追加空运代理公司->空运代理网点线路
//		FreightRouteLineDto dto2 = new FreightRouteLineDto();
//		dto2.setSourceCode(condition.getTargetCode());
//		dto2.setTargetCode(condition.getAgencySiteCode());
//		dto2.setFreightRouteVirtualCode(freightRoute.getVirtualCode());
//		resultList.add(dto2);
		
		// 追加空运总调->空运代理网点线路
		FreightRouteLineDto dto = new FreightRouteLineDto();
		dto.setSourceCode(freightRoute.getDestinationOrganizationCode());
		dto.setTargetCode(condition.getAgencySiteCode());
		dto.setFreightRouteVirtualCode(freightRoute.getVirtualCode());
		resultList.add(dto);
	}
	
	
	long endMs = System.currentTimeMillis();
	log.info("queryFreightRoute total spend " + (endMs - startMs) + " ms");
	return resultList;
    }
    
    
    /**
     * 
     * <p>找始发或到达线路的FreightRouteLineDto, 始发和到达线路</p> 
     * @author foss-zhujunyong
     * @date Mar 6, 2013 9:32:25 AM
     * @param sourceCode
     * @param targetCode
     * @param condition
     * @param time
     * @param lineSort
     * @return
     * @see
     */
    private FreightRouteLineDto fetchSourceTargetLineDto(String sourceCode, String targetCode, FreightRouteConditionDto condition, Date time, String lineSort){
    //	FreightRouteLineDto dto = new FreightRouteLineDto();
	    LineEntity c = new LineEntity();
	    c.setOrginalOrganizationCode(sourceCode);
	    c.setDestinationOrganizationCode(targetCode);
	    c.setLineSort(lineSort);
	    // 始发线路才需要区分运输类型，到达线路因为只有汽运一种类型，所以不用区分
	    if (StringUtils.equals(lineSort, DictionaryValueConstants.BSE_LINE_SORT_SOURCE)) {
	    	c.setTransType(LineUtils.convertProductCodeToTransType(condition.getProductCode()));
	    }
	    List<LineEntity> lineList = lineService.querySimpleLineListByCondition(c, 0, 1);
	    /**
	     * 130566--实现零担/快递支线分离: 已经有快递关于始发、到达线路拼接FreightRouteLineDto， 这边关于快递的校验可注释
	     */
	    /*if (CollectionUtils.isEmpty(lineList)) {
	    	//如果产品类型为经济快递，当根据到达网点查询不到到达线路时，且到达网点为快递代理网点，需要在根据其所属代理公司进行查询
		    if(StringUtils.equals(PricingConstants.ProductEntityConstants.PRICING_PRODUCT_EXPRESS_PACKAGE, condition.getProductCode())||
    		   StringUtils.equals(PricingConstants.ProductEntityConstants.PRICING_PRODUCT_ROUND_COUPON_PACKAGE, condition.getProductCode())){
		    	//判断到达网点是否为公司网点
		    	OrgAdministrativeInfoEntity orgEntity=orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeClean(targetCode);
		    	if(orgEntity==null){
		    		//到达网点为快递代理网点，根据快递代理网点获取所属快递代理代理公司
		    		BusinessPartnerExpressEntity ldpCompany=ldpAgencyCompanyService.queryBusinessPartnerByAgencyDeptCode
							(targetCode, FossConstants.ACTIVE);
		    		if(ldpCompany!=null){
		    			c.setDestinationOrganizationCode(ldpCompany.getAgentCompanyCode());
		    			lineList = lineService.querySimpleLineListByCondition(c, 0, 1);
		    		}
		    	}
		    }
	    }*/
	    if (CollectionUtils.isEmpty(lineList)) {
    		String sourceName = orgAdministrativeInfoService.queryCommonNameByCommonCodeFromCache(c.getOrginalOrganizationCode());
    		String targetName = orgAdministrativeInfoService.queryCommonNameByCommonCodeFromCache(c.getDestinationOrganizationCode());
    		String lineSortName = StringUtils.equals(lineSort, DictionaryValueConstants.BSE_LINE_SORT_SOURCE) ? "始发线路" : "到达线路";
    		// 营业部到走货路径的外场找不到直接的始发或到达线路，可能是数据配错了
    		log.error(lineSortName + "找不到，出发部门编码：" + c.getOrginalOrganizationCode() + ",到达部门编码:" + c.getDestinationOrganizationCode());
    		log.error(lineSortName + "找不到，出发部门名称：" + sourceName + ",到达部门名称:" + targetName);
    		throw new FreightRouteException(FreightRouteException.LINE_NOT_EXIST, lineSortName, sourceName, targetName);
	    }
	    
	    LineEntity line = lineList.get(0);
	    List<DepartureStandardEntity> standardList = departureStandardService.queryDepartureStandardListByLineVirtualCode(line.getVirtualCode());
	    FreightRouteLineEntity entity = new FreightRouteLineEntity();
	    entity.setLineVirtualCode(line.getVirtualCode());
	    entity.setOrginalOrganizationCode(sourceCode);
	    entity.setDestinationOrganizationCode(targetCode);
	    FreightRouteLineDto dto = createFreightRouteLineDto(entity, standardList, time, condition.getPriority());
	    dto.setLineSort(line.getLineSort());
	    dto.setLineType(line.getLineType());
	    dto.setTransType(line.getTransType());
	    
	    return dto;
    }
    


	/**
     * 
     * <p>创建走货路径线路dto</p> 
     * @author foss-zhujunyong
     * @date Mar 6, 2013 9:32:37 AM
     * @param freightRouteLine
     * @param standardList
     * @param time
     * @param priority
     * @return
     * @see
     */
    private FreightRouteLineDto createFreightRouteLineDto(FreightRouteLineEntity freightRouteLine, List<DepartureStandardEntity> standardList,Date time, String priority){
	// 设置返回对象
	FreightRouteLineDto result = new FreightRouteLineDto();
	result.setSourceCode(freightRouteLine.getOrginalOrganizationCode());
	result.setTargetCode(freightRouteLine.getDestinationOrganizationCode());
	result.setLineVirtualCode(freightRouteLine.getLineVirtualCode());
	LineEntity line = lineService.querySimpleLineByVirtualCode(freightRouteLine.getLineVirtualCode());
	if (line == null) {
	    log.warn("数据有误，线路虚拟编码 " + freightRouteLine.getLineVirtualCode() + " 在线路表中找不到相应的实体");
	    throw new LineException(LineException.LINE_DOES_NOT_EXIST);
	}
	result.setLineSort(line.getLineSort());
	result.setLineType(line.getLineType());
	result.setTransType(line.getTransType());
	// 如果没有发车标准的话，说明是空运或者偏线，没有出发时间和到达时间，直接返回。如果上一段线路的基准时间为空，则无法计算本段线路的出发时间和到达时间
	if (CollectionUtils.isEmpty(standardList) || time == null) {
	    // 只有运作线路的偏线或空运才返回时效，其他类型都有出发和到达时间，不用时效。
	    long commonAging = line.getCommonAging() == null ? 0 : line.getCommonAging();
	    long passbyAging = freightRouteLine.getPassbyAging() == null ? 0 : freightRouteLine.getPassbyAging();
	    result.setAging(LineUtils.convertHourToMinute(commonAging + passbyAging));
	    return result;
	}
	// 取时效
	FreightRouteLineAgingDto agingDto = lineService.calculateAging(line, freightRouteLine.getOrginalOrganizationCode(), freightRouteLine.getDestinationOrganizationCode());
	
	// 遍历班次，取下一班的发车时间和到达时间
	for (DepartureStandardEntity standard : standardList) {
	    Long leaveOffset = LineUtils.isFast(priority) ? agingDto.getBeforeFastAging() : agingDto.getBeforeCommonAging();
	    Date leaveDate = LineUtils.createStandardTime(time, standard.getLeaveTime(),LineUtils.convertHourToMinute(leaveOffset));
	    // 发车标准集合是按发车时间顺序排列的，所以只需进行到第一个符合条件的即可
	    if (leaveDate.after(time)) {
		result.setLeaveDate(leaveDate);// 设置出发时间
		// 如果发车标准中已经有了准点到达时间,说明是始发或到达线路,不用计算时效，直接取
		if (standard.getArriveTime() != null) {
		    Date arriveDate = LineUtils.createStandardTime(time, standard.getArriveTime(), 0);
		    result.setArriveDate(DateUtils.addDays(arriveDate, standard.getArriveDay().intValue()));
		} else {
		    Long arriveOffset = LineUtils.isFast(priority) ? agingDto.getCurrentFastAging() : agingDto.getCurrentCommonAging();
		    result.setArriveDate(DateUtils.addMinutes(leaveDate, LineUtils.convertHourToMinute(arriveOffset)));
		}
		// 除了要加上各个线段的时效以外，走货路径线路的经停时间也要加进去
		Long passbyOffset = freightRouteLine.getPassbyAging() == null ? 0 : freightRouteLine.getPassbyAging();
		result.setPassbyDate(DateUtils.addMinutes(result.getArriveDate(), LineUtils.convertHourToMinute(passbyOffset)));
		break;
	    }
	}
	// 如果当天所有的班次都比给出的时间早，那么取第二天第一班车
	if (result.getLeaveDate() == null) {
	    DepartureStandardEntity standard = standardList.get(0);
	    Long leaveOffset = LineUtils.isFast(priority) ? agingDto.getBeforeFastAging() : agingDto.getBeforeCommonAging();
	    Date leaveDate = LineUtils.createStandardTime(time, standard.getLeaveTime(),LineUtils.convertHourToMinute(leaveOffset));
	    result.setLeaveDate(DateUtils.addDays(leaveDate, NumberConstants.NUMERAL_ONE));// 设置出发时间
	    // 如果发车标准中已经有了准点到达时间,说明是始发或到达线路,不用计算时效，直接取
	    if (standard.getArriveTime() != null) {
		Date arriveDate = LineUtils.createStandardTime(time, standard.getArriveTime(), 0);
		result.setArriveDate(DateUtils.addDays(arriveDate, standard.getArriveDay().intValue()));
	    } else {
		Long arriveOffset = LineUtils.isFast(priority) ? agingDto.getCurrentFastAging() : agingDto.getCurrentCommonAging();
		result.setArriveDate(DateUtils.addMinutes(leaveDate, LineUtils.convertHourToMinute(arriveOffset)));
	    }
	    result.setArriveDate(DateUtils.addDays(result.getArriveDate(), NumberConstants.NUMERAL_ONE));
	    // 除了要加上各个线段的时效以外，走货路径线路的经停时间也要加进去
	    Long passbyOffset = freightRouteLine.getPassbyAging() == null ? 0 : freightRouteLine.getPassbyAging();
	    result.setPassbyDate(DateUtils.addMinutes(result.getArriveDate(), LineUtils.convertHourToMinute(passbyOffset)));
	}
	return result;
    }

    /**
     * 
     * <p>批量作废走货路径</p> 
     * @author foss-zhujunyong
     * @date Jan 11, 2013 10:12:54 AM
     * @param virtualCodes
     * @param modifyUser
     * @return
     * @see
     */
    @Override
    public int deleteFreightRouteList(List<String> virtualCodes, String modifyUser) {
	if (CollectionUtils.isEmpty(virtualCodes) || StringUtils.isBlank(modifyUser)) {
	    return 0;
	}
	int result = 0;
	for (String virtualCode : virtualCodes) {
	    FreightRouteEntity entity = new FreightRouteEntity();
	    entity.setVirtualCode(virtualCode);
	    entity.setModifyUser(modifyUser);
	    int count = deleteFreightRoute(entity) == null ? 0 : 1;
	    result += count;
	}
	return result;
    }
    
    /**
     * 
     * <p>填充走货路径列表中的各项冗余属性（名称等）</p> 
     * @author foss-zhujunyong
     * @date Mar 5, 2013 5:53:04 PM
     * @param list
     * @return
     * @see
     */
    private List<FreightRouteEntity> enhance(List<FreightRouteEntity> list) {
	if (CollectionUtils.isEmpty(list)) {
	    return new ArrayList<FreightRouteEntity> ();
	}
	for (FreightRouteEntity entity : list) {
	    enhance(entity);
	}
	return list;
    }

    /**
     * 
     * <p>填充走货路径中的各项属性（名称等）</p> 
     * @author foss-zhujunyong
     * @date Mar 5, 2013 5:53:37 PM
     * @param entity
     * @return
     * @see
     */
    private FreightRouteEntity enhance(FreightRouteEntity entity) {
		if (entity == null) {
		    return null;
		}
		// 填充出发部门名称
		if (StringUtils.isBlank(entity.getOrginalOrganizationName()) && StringUtils.isNotBlank(entity.getOrginalOrganizationCode())) {
		    entity.setOrginalOrganizationName(orgAdministrativeInfoService.queryCommonNameByCommonCode(entity.getOrginalOrganizationCode()));
		}
		// 填充到达部门名称
		if (StringUtils.isBlank(entity.getDestinationOrganizationName()) && StringUtils.isNotBlank(entity.getDestinationOrganizationCode())) {
		    entity.setDestinationOrganizationName(orgAdministrativeInfoService.queryCommonNameByCommonCode(entity.getDestinationOrganizationCode()));
		}
		// 填充打木架部门名称
		if (StringUtils.isBlank(entity.getPackingOrganizationName()) && StringUtils.isNotBlank(entity.getPackingOrganizationCode())) {
		    entity.setPackingOrganizationName(orgAdministrativeInfoService.queryOrgAdministrativeInfoNameByCode(entity.getPackingOrganizationCode()));
		}
		// 填充运输类型(产品)名称
		if (StringUtils.isBlank(entity.getProductName()) && StringUtils.isNotBlank(entity.getTransType())) {
		    ProductEntity product = productService.getProductByCache(entity.getTransType(), new Date());
		    if (product != null) {
			entity.setProductName(product.getName());
		    }
		}
		return entity;
    }

    /**
     * 
     * <p>生效走货路径</p> 
     * @author foss-zhujunyong
     * @date Mar 5, 2013 5:54:37 PM
     * @param virtualCode
     * @param modifyUser
     * @return 
     * @see com.deppon.foss.module.base.baseinfo.api.server.service.IFreightRouteService#valid(java.lang.String, java.lang.String)
     */
    @Override
    @Transactional
    public FreightRouteEntity valid(String virtualCode, String modifyUser) {
	FreightRouteEntity freightRoute = querySimpleFreightRouteByVirtualCode(virtualCode);
	if (freightRoute == null){
	    return null;
	}
	// 已经是生效状态的则不用再次生效了
	if (freightRoute.checkValid()) {
	    return freightRoute;
	}
	List<FreightRouteLineEntity> list = freightRouteLineService.queryFreightRouteLineListByFreightRoute(virtualCode);
	
//	// 非短途走货路径的出发站和到达站不能相同
//	if (freightRoute.checkSameSite() && !LineUtils.isCityWideProduct(freightRoute.getTransType())) {
//	    throw new FreightRouteException(FreightRouteException.FREIGHT_ROUTE_SITE_CAN_NOT_DUPLICATION);
//	}
//	// 非短途走货路径不能没有走货路径线路
//	if (CollectionUtils.isEmpty(list) && !LineUtils.isCityWideProduct(freightRoute.getTransType())) {
//	    throw new FreightRouteException(FreightRouteException.FREIGHT_ROUTE_LINE_MUST_BE_EXIST);
//	}
	// 走货路径的线路不能为空
	if (CollectionUtils.isEmpty(list) && !StringUtils.equals(freightRoute.getOrginalOrganizationCode(), freightRoute.getDestinationOrganizationCode())) {
	    throw new FreightRouteException(FreightRouteException.FREIGHT_ROUTE_LINE_IS_EMPTY);
	}
	// 出发站和到达站相同，且走货路径线路列表存在 -- 非法情况
	if (CollectionUtils.isNotEmpty(list) && StringUtils.equals(freightRoute.getOrginalOrganizationCode(), freightRoute.getDestinationOrganizationCode())) {
	    throw new FreightRouteException(FreightRouteException.CITYWIDE_ROUTE_LINE_EXIST);
	}
	if (CollectionUtils.isEmpty(list)) {
	    freightRoute.setValid(FossConstants.YES);
	}
	
	int seq = NumberConstants.NUMBER_1;
	String target = null;
	int itemSize = list.size();
	for (FreightRouteLineEntity entity : list) {
	    String itemSource = entity.getOrginalOrganizationCode();
	    String itemTarget = entity.getDestinationOrganizationCode();
	    //313353 sonar
		if (entity.getSequence() == null || StringUtils.isBlank(itemSource) || StringUtils.isBlank(itemTarget)) {
			// 走货路径线路的序号,出发站，到达站都不能为空
			throw new FreightRouteException(FreightRouteException.SOURCE_TARGET_SEQUENCE_CANNOT_BE_EMPTY);
		}
	    this.sonarSplitFour(seq, entity, itemSource,
			itemTarget, itemSize, target, freightRoute);
	    
	    target = itemTarget;
	    seq++;
	}
	
	// 将走货路径设置为有效
	freightRoute.setValid(FossConstants.YES);
	freightRoute.setModifyUser(modifyUser);
	freightRouteDao.validFreightRoute(freightRoute);
	//同步生效走货路径信息到WDGH
	FreightRouteEntity frEntity = freightRouteDao.queryFreightRouteByVirtualCode(virtualCode);
	if(null != frEntity){
		List<FreightRouteEntity> frlist = new ArrayList<FreightRouteEntity>();
		frlist.add(frEntity);
		sendFreightRouteInfoToWDGHService.syncFreightRouteInfo(frlist, NumberConstants.TWO.toString());	
	}
	// 清空缓存
	invalidEntity(virtualCode);
	return enhance(freightRoute);
    }
    
	/**
	 * sonar优化拆分
	 * 
	 * @author 313353
	 */
	private void sonarSplitFour(int seq, FreightRouteLineEntity entity, String itemSource,
			String itemTarget, int itemSize, String target, FreightRouteEntity freightRoute) {
		if (StringUtils.equals(itemSource, itemTarget)) {
			// 走货路径线路的出发站和到达站不能相同
			throw new FreightRouteException(FreightRouteException.SITE_CAN_NOT_DUPLICATION);
		}
		if (entity.getSequence() != seq) {
			// 序号不合法，必须从1开始，按顺序递增。
			throw new FreightRouteException(FreightRouteException.SEQUENCE_MUST_BE_NUMBER);
		}
		if (seq == NumberConstants.NUMBER_1 && !StringUtils.equals(itemSource, freightRoute.getOrginalOrganizationCode())) {
			// 第一条线段的开始节点和线路的开始节点不同
			throw new FreightRouteException(FreightRouteException.FREIGHTROUTELINE_MUST_BY_ORDER);
		}
		if (seq == itemSize && !StringUtils.equals(itemTarget, freightRoute.getDestinationOrganizationCode())) {
			// 最后一条线段的结束节点和线路的结束节点不同
			throw new FreightRouteException(FreightRouteException.FREIGHTROUTELINE_MUST_BY_ORDER);
		}
		if (entity.getSequence() != NumberConstants.NUMBER_1 && !StringUtils.equals(target, itemSource)) {
			// 线段必须首尾相接
			throw new FreightRouteException(FreightRouteException.FREIGHTROUTELINE_MUST_BY_ORDER);
		}
		LineEntity line = lineService.queryLineByVirtualCode(entity.getLineVirtualCode());
		if (line == null || BooleanUtils.isFalse(line.checkValid())) {
			// 走货路径所使用的线路不存在或者处于失效状态
			throw new FreightRouteException(FreightRouteException.FREIGHTROUTELINE_MUST_BE_VALID);
		}
	}

    
    /**
     * 
     * <p>失效走货路径</p> 
     * @author foss-zhujunyong
     * @date Mar 5, 2013 5:54:52 PM
     * @param virtualCode
     * @param modifyUser
     * @return 
     * @see com.deppon.foss.module.base.baseinfo.api.server.service.IFreightRouteService#invalid(java.lang.String, java.lang.String)
     */
    @Override
    @Transactional
    public FreightRouteEntity invalid(String virtualCode, String modifyUser) {
	if (StringUtils.isBlank(virtualCode)) {
	    return null;
	}
	
	FreightRouteEntity freightRoute = querySimpleFreightRouteByVirtualCode(virtualCode);
	if (freightRoute == null) {
	    return null;
	}
	// 如果已经是失效状态，则不用再更新了
	if (StringUtils.equals(freightRoute.getValid(), FossConstants.NO)) {
	    return freightRoute;
	}
	// 将走货路径设置为无效
	freightRoute.setValid(FossConstants.NO);
	freightRoute.setModifyUser(modifyUser);
	freightRouteDao.validFreightRoute(freightRoute);
	//同步失效走货路径信息到WDGH
	FreightRouteEntity frEntity = freightRouteDao.queryFreightRouteByVirtualCode(virtualCode);
	if(null != frEntity){
		List<FreightRouteEntity> frlist = new ArrayList<FreightRouteEntity>();
		frlist.add(frEntity);
		sendFreightRouteInfoToWDGHService.syncFreightRouteInfo(frlist, NumberConstants.TWO.toString());
	}
		// 清空缓存
	invalidEntity(virtualCode);
	return enhance(freightRoute);
    }
    
    /**
     * 
     * <p>更新线段</p> 
     * @author foss-zhujunyong
     * @date Mar 5, 2013 5:55:10 PM
     * @param lineItem
     * @return 
     * @see com.deppon.foss.module.base.baseinfo.api.server.service.IFreightRouteService#updateLineItem(com.deppon.foss.module.base.baseinfo.api.shared.domain.LineItemEntity)
     */
    @Override
    @Transactional
    public LineItemEntity updateLineItem(LineItemEntity lineItem) {
    //运作到运作的	
	LineItemEntity entity = lineItemService.updateLineItem(lineItem);
	
	LineEntity toGpsLine = lineService.queryLineByVirtualCode(entity.getLineVirtualCode());
	
	lineItemService.invalidList(lineItem.getLineVirtualCode());
	lineService.invalidEntity(lineItem.getLineVirtualCode());
	LineEntity line = lineService.queryLineByVirtualCode(lineItem.getLineVirtualCode());
	lineService.invalidEntity(line.getSimpleCode());
	toGpsLine.setFastAging(lineItem.getFastAging());
	//如果中转线路
	if (StringUtils.equals(toGpsLine.getValid(), FossConstants.YES)&&StringUtils.equals(line.getLineSort(), DictionaryValueConstants.BSE_LINE_SORT_TRANSFER)) {
	  //同步到短途GPS
		//时效是每条线段时效的和
		long fastAging=0;
		List<LineItemEntity> lineItemEntityList = lineItemService
			    .queryLineItemListByLineVirtualCode(lineItem
				    .getLineVirtualCode());
		for(LineItemEntity lineEntity:lineItemEntityList){
			fastAging+=(lineEntity.getFastAging()+lineEntity.getPassbyAging());
		}
		toGpsLine.setFastAging(fastAging);
		lineService.sendLineInfoToGps(toGpsLine, NumberConstants.TWO);
	}
	
	List<FreightRouteLineEntity> list = freightRouteLineDao.queryFreightRouteLineListByLine(lineItem.getLineVirtualCode());
	if (CollectionUtils.isNotEmpty(list)) {
	    for (FreightRouteLineEntity e : list) {
		invalidEntity(e.getFreightRouteVirtualCode());
	    }
	}
	return entity;
    }
    
    /**
     * 
     * <p>更新线段时效也会影响的关联的走货路径时效</p> 
     * @author foss-zhujunyong
     * @date Mar 5, 2013 5:56:07 PM
     * @param item
     * @see
     */
    @Override
    public void updateFreightRouteAging(LineItemEntity item){
	if (item == null || StringUtils.isBlank(item.getLineVirtualCode())) {
	    return;
	}
	String lineVirtualCode = item.getLineVirtualCode();
	
	Map<String, List<FreightRouteLineEntity>> routeLineMap = freightRouteLineService.queryFreightRouteLineMapByLineVirtualCode(lineVirtualCode);
	// 该线段没有关联的走货路径及走货路径线路，不用更新
	if (MapUtils.isEmpty(routeLineMap)) {
	    return;
	} 
	
	List<FreightRouteLineEntity> frllist = new ArrayList<FreightRouteLineEntity>();
	List<FreightRouteEntity> frlist = new ArrayList<FreightRouteEntity>();

	for (Entry<String, List<FreightRouteLineEntity>> entry : routeLineMap.entrySet()) {
	    String freightRouteVirtualCode = entry.getKey();
	    List<FreightRouteLineEntity> routeLineList = entry.getValue();
	    // 如果数据出错，则跳过i
	    if (CollectionUtils.isEmpty(routeLineList)) {
		continue;
	    }
	    FreightRouteEntity freightRoute = querySimpleFreightRouteByVirtualCode(freightRouteVirtualCode);
	    // 如果数据出错，则跳过
	    if (freightRoute == null || StringUtils.isBlank(freightRoute.getTransType())) {
		continue;
	    }
	    for (FreightRouteLineEntity routeLine : routeLineList) {
		// 如果数据出错，则跳过
		if (routeLine == null || StringUtils.isBlank(routeLine.getOrginalOrganizationCode()) || StringUtils.isBlank(routeLine.getDestinationOrganizationCode())) {
		    continue;
		}
		String sourceCode = routeLine.getOrginalOrganizationCode();
		String targetCode = routeLine.getDestinationOrganizationCode();
		Long aging = lineService.calculateAging(lineVirtualCode, sourceCode, targetCode, freightRoute.getTransType());
		aging = aging == null ? 0 : aging;
		
		// 更新走货路径线路时效
		if (!aging.equals(freightRoute.getAging())) {
		    routeLine.setAging(aging);
		    // 更新走货路径线路时会自动更新走货路径中的时效
		    freightRouteLineService.validateSourceTargetOrder(routeLine);		
			//dao层同步了走货路径时效
			FreightRouteLineEntity entity = freightRouteLineDao.updateFreightRouteLines(routeLine);		
			// 更新走货路径时效 
			freightRouteLineDao.updateFreightRouteAging(entity);
			FreightRouteEntity frEntity = freightRouteDao.queryFreightRouteByVirtualCode(entity.getFreightRouteVirtualCode());			
			frlist.add(frEntity);		
			freightRouteLineService.invalidList(routeLine.getFreightRouteVirtualCode());
			// 清空走货路径缓存
			invalidEntity(routeLine.getFreightRouteVirtualCode());	
			frllist.add(entity);
		}
	    }
	}
	//同步走货路径时效到WDGH
	syncFreightRouteLineToWDGH(frllist, NumberConstants.TWO);		
	//同步更新走货路径线路到WDGH	
	syncFreightRouteToWDGH(frlist,NumberConstants.TWO);

    }
    
	/**
     *<p>同步给网点规划</p>
     *@author 269231 -qirongsheng
     *@date 2016-3-24 下午5:12:41
     *@param freightRouteLine
     *@param type
     */
    private void syncFreightRouteLineToWDGH(List<FreightRouteLineEntity> freightRouteLine,
			Integer type) {
    	if(null !=freightRouteLine && freightRouteLine.size() >=1){
        	//同步接口
        	sendFreightRouteLineInfoToWDGHService.syncFreightRouteLineInfo(freightRouteLine, type.toString());
    	}		
	}
    
	/**
     *<p>同步给网点规划</p>
     *@author 269231 -qirongsheng
     *@date 2016-3-24 下午5:28:35
     *@param freightRouteEntity
     *@param type
     */
    private void syncFreightRouteToWDGH(List<FreightRouteEntity> freightRouteEntity,
			Integer type) {
    	if(null !=freightRouteEntity && freightRouteEntity.size() >=1){
        	//同步接口
        	sendFreightRouteInfoToWDGHService.syncFreightRouteInfo(freightRouteEntity, type.toString());
    	}				
	}
    
    /**
     * 
     * <p>根据当前走货路径找出可以打木架的外场列表</p> 
     * 保证不返还null
     * @author foss-zhujunyong
     * @date Dec 17, 2012 10:30:17 AM
     * @param virtualCode
     * @return key为外场编码，value为外场名称，按走货顺序排列
     * @see
     */
    @Override
    public Map<String, String> queryPackingOrgs(String virtualCode) {
	FreightRouteEntity freightRoute = querySimpleFreightRouteByVirtualCode(virtualCode);
	
	List<FreightRouteLineEntity> lineList = freightRouteLineService.queryFreightRouteLineListByFreightRoute(virtualCode);

	Map<String, String> result = new LinkedHashMap<String, String>();
	
	if (lineList == null) {
	    lineList = new ArrayList<FreightRouteLineEntity> ();
	}
	
	// 外场实体中的name是null，所以要自建code和name的对应关系
	Map<String, String> codeNameMapping = new HashMap<String, String>();
	// 把该走货路径途经的站点按顺序加到List中
	List<String> codeList = new ArrayList<String>();
	// 把走货路径的起点和终点先加进去
	codeList.add(freightRoute.getOrginalOrganizationCode());
	codeNameMapping.put(freightRoute.getOrginalOrganizationCode(), freightRoute.getOrginalOrganizationName());
	// 遍历走货路径线路
	for (FreightRouteLineEntity entity : lineList) {
	    if (!codeList.contains(entity.getOrginalOrganizationCode())) {
		codeList.add(entity.getOrginalOrganizationCode());
		codeNameMapping.put(entity.getOrginalOrganizationCode(), entity.getOrginalOrganizationName());
	    }
	    if (!codeList.contains(entity.getDestinationOrganizationCode())) {
		codeList.add(entity.getDestinationOrganizationCode());
		codeNameMapping.put(entity.getDestinationOrganizationCode(), entity.getDestinationOrganizationName());
	    }
	}
	// 在短途走货路径的情况下，起点和终点可能相同
	if (!codeList.contains(freightRoute.getDestinationOrganizationCode())) {
	    codeList.add(freightRoute.getDestinationOrganizationCode());
	    codeNameMapping.put(freightRoute.getDestinationOrganizationCode(), freightRoute.getDestinationOrganizationName());
	}
	// 按部门编码把涉及的外场实体都找出来
	for (String orgCode : codeList) {
	    OutfieldEntity outfield = outfieldService.queryOutfieldByOrgCode(orgCode);
	    // 把可以打木架的外场放到result中
	    if (outfield != null && outfield.checkPackingWood()) {
		result.put(outfield.getOrgCode(), codeNameMapping.get(outfield.getOrgCode()));
	    }
	}
	return result;
    }
    
    /**
     *
     * <p>设置走货路径第一个打木架的外场</p> 
     * @author ibm-zhuwei
     * @param virtualCode
     * @return
     */
    private void calcPackingOrg(FreightRouteEntity freightRoute) {

		if (freightRoute == null) {
			return;
		}
		
		freightRoute.setDoPacking(FossConstants.NO);

		List<FreightRouteLineEntity> lineList = freightRouteLineService
				.queryFreightRouteLineListByFreightRoute(freightRoute
						.getVirtualCode());

		if (lineList == null) {
			lineList = new ArrayList<FreightRouteLineEntity>();
		}

		// 外场实体中的name是null，所以要自建code和name的对应关系
		Map<String, String> codeNameMapping = new HashMap<String, String>();
		// 把该走货路径途经的站点按顺序加到List中
		List<String> codeList = new ArrayList<String>();
		// 把走货路径的起点和终点先加进去
		codeList.add(freightRoute.getOrginalOrganizationCode());
		codeNameMapping.put(freightRoute.getOrginalOrganizationCode(),
				freightRoute.getOrginalOrganizationName());
		// 遍历走货路径线路
		for (FreightRouteLineEntity entity : lineList) {
			if (!codeList.contains(entity.getOrginalOrganizationCode())) {
				codeList.add(entity.getOrginalOrganizationCode());
				codeNameMapping.put(entity.getOrginalOrganizationCode(),
						entity.getOrginalOrganizationName());
			}
			if (!codeList.contains(entity.getDestinationOrganizationCode())) {
				codeList.add(entity.getDestinationOrganizationCode());
				codeNameMapping.put(entity.getDestinationOrganizationCode(),
						entity.getDestinationOrganizationName());
			}
		}
		// 在短途走货路径的情况下，起点和终点可能相同
		if (!codeList.contains(freightRoute.getDestinationOrganizationCode())) {
			codeList.add(freightRoute.getDestinationOrganizationCode());
			codeNameMapping.put(freightRoute.getDestinationOrganizationCode(),
					freightRoute.getDestinationOrganizationName());
		}
		// 按部门编码把涉及的外场实体都找出来
		for (String orgCode : codeList) {
			OutfieldEntity outfield = outfieldService
					.queryOutfieldByOrgCode(orgCode);
			// 找到第一个打木架的外场并返回
			if (outfield != null && outfield.checkPackingWood()) {
				
				freightRoute.setDoPacking(FossConstants.YES);
				freightRoute.setPackingOrganizationCode(outfield.getOrgCode());
				freightRoute.setPackingOrganizationName(codeNameMapping.get(outfield.getOrgCode()));
				
				break;
			}
		}
    }
    
    /**
     * 
     * <p>根据走货路径查询途经的网点字符串，给综合查询用</p> 
     * @author foss-zhujunyong
     * @date Mar 1, 2013 2:13:17 PM
     * @param sourceCode
     * @param targetCode
     * @param virtualCode
     * @return
     * @see
     */
    @Override
    public String queryRouteStringBySourceTarget(String sourceCode, String targetCode, String productCode) {
		if (StringUtils.isBlank(productCode)) {
			return null;
		}

		List<FreightRouteLineDto> list = queryEnhanceFreightRouteBySourceTarget(sourceCode, targetCode,
						productCode, new Date());

//		Set<String> result = new LinkedHashSet<String>();
		List<String> result = new ArrayList<String>();

		for (FreightRouteLineDto dto : list) {
			result.add(dto.getSourceName());
			result.add(dto.getTargetName());
		}
		for(int i = 0; i < result.size()-1;i++){
		    if(StringUtils.equals(result.get(i), result.get(i+1))){
			result.remove(i);
		    }
		}

		return StringUtils.join(result.toArray(), SymbolConstants.EN_BAR);
    }
    
    /**
     * 
     * <p>根据走货路径查询途经的网点字符串，给综合查询用</p> 
     * @author foss-zhujunyong
     * @date Mar 1, 2013 2:13:17 PM
     * @param sourceCode
     * @param targetCode
     * @param virtualCode
     * @return
     * @see
     */
    @Override
    public String queryRouteStringByVirtualCode(String sourceCode, String targetCode, String virtualCode) {
	if (StringUtils.isBlank(virtualCode)) {
	    return null;
	}
	String sourceName = orgAdministrativeInfoService.queryCommonNameByCommonCodeFromCache(sourceCode);
	String targetName = orgAdministrativeInfoService.queryCommonNameByCommonCodeFromCache(targetCode);
	
	List<String> result = new ArrayList<String>();
	// 先加上出发营业部的名称
	if (StringUtils.isNotBlank(sourceName)) {
	    result.add(sourceName);
	}
	//获取的只是走货线路
	List<FreightRouteLineEntity> list = freightRouteLineService.queryFreightRouteLineListByFreightRoute(virtualCode);
	FreightRouteEntity freightRoute = queryFreightRouteByVirtualCode(virtualCode);
	// 短途的情况，无走货路径线路 (短途无偏线和空运的情况)
	if (CollectionUtils.isEmpty(list)) {
		//313353 sonar
		this.sonarSplitFive(result, freightRoute, virtualCode, targetCode);
	} else { // 长途的情况，有走货路径线路
	    for (FreightRouteLineEntity line : list) {
		if (line == null) {
		    continue;
		}
		if (!result.contains(line.getOrginalOrganizationName()) && StringUtils.isNotBlank(line.getOrginalOrganizationName())) {
		    result.add(line.getOrginalOrganizationName());
		}
		if (!result.contains(line.getDestinationOrganizationName()) && StringUtils.isNotBlank(line.getDestinationOrganizationName())) {
		    result.add(line.getDestinationOrganizationName());
		}
	    }
	    // 如果是空运或者偏线,则最后的到达部门一定是代理公司，要将之去除
	    if (freightRoute != null && !LineUtils.isDPOrganizationByProduct(freightRoute.getTransType()) && result.size() > 1) {
		result.remove(result.size() - 1);
	    }
	}
	// 最后加上到达营业部的名称
	if (!result.contains(targetName) && StringUtils.isNotBlank(targetName)) {
	    result.add(targetName);
	}
	return StringUtils.join(result.toArray(), SymbolConstants.EN_BAR);
    }
    
	/**
	 * sonar优化拆分
	 * 
	 * @author 313353
	 */
	private void sonarSplitFive(List<String> result, FreightRouteEntity freightRoute,
			String virtualCode, String targetCode) {
		 if(freightRoute  != null){
				if (!result.contains(freightRoute.getOrginalOrganizationName())) {
				    result.add(freightRoute.getOrginalOrganizationName());
				}
				if (!result.contains(freightRoute.getDestinationOrganizationName())) {
				    result.add(freightRoute.getDestinationOrganizationName());
				}
				// 如果是短途未配置走货路径的情况下，要把中转的外场名加进来
			    } else if (StringUtils.equals(FlagConstants.NOTEXISTS, virtualCode)){
				MapDto transferCenterDto = lineService.queryDefaultArriveTransferOrgCode(targetCode);
				if (transferCenterDto != null && !result.contains(transferCenterDto.getName())) {
				    result.add(transferCenterDto.getName());
				}
		}
	}

    /**
     * 
     * <p>清空指定key的缓存</p> 
     * @author foss-zhujunyong
     * @date Mar 6, 2013 9:33:46 AM
     * @param key
     * @see
     */
    @SuppressWarnings("unchecked")
    @Override
    public void invalidEntity(String key) {
	((ICache<String, FreightRouteEntity>) CacheManager.getInstance().getCache(FossTTLCache.FREIGHTROUTE_ENTITY_CACHE_UUID)).invalid(key);
    }

    /**
     * 
     * <p>取缓存中的数据</p> 
     * @author foss-zhujunyong
     * @date Mar 6, 2013 9:34:18 AM
     * @param key
     * @return
     * @see
     */
    @SuppressWarnings({ "unchecked", "rawtypes" })
    private FreightRouteEntity queryEntityCache(String key) {
	FreightRouteEntity result = null;
	try {
	    CacheManager cacheManager = CacheManager.getInstance();
	    if (cacheManager == null) {
		return null;
	    }
	    ICache cache = cacheManager.getCache(FossTTLCache.FREIGHTROUTE_ENTITY_CACHE_UUID);
	    if (cache == null) {
		return null;
	    }
	    result = (FreightRouteEntity) cache.get(key);
	} catch (Exception t) {
	    log.error("cache找不到", t);
	}
	return result;
    }
    
    /**
     * 通过走货路径列表，返回最匹配该产品的走货路径
     * @author ibm-zhuwei
     * @date 2013-7-18 下午4:40:36
     */
    private FreightRouteEntity matchFreightRouteByProduct(List<FreightRouteEntity> list, String product3Code, Date date) {
    	
    	// 校验
    	if (list == null || list.isEmpty()) {
    		return null;
    	}
    	
    	// 三级产品匹配
    	for (FreightRouteEntity entity : list) {
    		// 找到匹配产品
    		if (StringUtils.equals(entity.getTransType(), product3Code)
    				&& entity.checkValid()) {
    			return entity;
    		}
    	}

    	// 获取所有三级产品列表
    	Map<String, FreightRouteProductDto> level3 = this.constructProductLevels(date);
    	
    	// 定义二级产品编码
    	String product2Code = level3.get(product3Code).getParent().getCode();
    	
    	// 二级级产品匹配
    	for (FreightRouteEntity entity : list) {
    		// 找到匹配产品
    		if (StringUtils.equals(entity.getTransType(), product2Code)
    				&& entity.checkValid()) {
    			return entity;
    		}
    	}

    	// 定义一级产品编码
    	String product1Code = level3.get(product3Code).getParent().getParent().getCode();

    	// 一级产品匹配
    	for (FreightRouteEntity entity : list) {
    		// 找到匹配产品
    		if (StringUtils.equals(entity.getTransType(), product1Code)
    				&& entity.checkValid()) {
    			return entity;
    		}
    	}
    	
    	return null;
    }
    
    /**
     * 构造产品层级
     * @author ibm-zhuwei
     * @date 2013-7-18 下午4:51:49
     */
    private Map<String, FreightRouteProductDto> constructProductLevels(Date date) {
    	
    	List<ProductEntity> allProducts = productService.findExternalProductByCondition(new ProductDto(), date);
    	
    	// 定义产品MAP，<code, Entity>
    	Map<String, ProductEntity> products = new HashMap<String, ProductEntity>();
    	
    	// <code, DTO>
    	// 分别定义三级产品、二级产品、一级产品
    	Map<String, FreightRouteProductDto> level3 = new HashMap<String, FreightRouteProductDto>();
    	Map<String, FreightRouteProductDto> level2 = new HashMap<String, FreightRouteProductDto>();
    	Map<String, FreightRouteProductDto> level1 = new HashMap<String, FreightRouteProductDto>();
    	
    	// 遍历产品列表
    	for (ProductEntity product : allProducts) {
    		
			FreightRouteProductDto dto = new FreightRouteProductDto(
					product.getCode(), product.getDescription(),
					product.getLevels(), product.getPriority());
			
			// 产品
			products.put(product.getCode(), product);
    		
			if (product.getLevels() == NumberConstants.NUMBER_3) {
				level3.put(product.getCode(), dto);
			} else if (product.getLevels() == NumberConstants.NUMBER_2) {
				level2.put(product.getCode(), dto);
			} else if (product.getLevels() == NumberConstants.NUMBER_1) {
				level1.put(product.getCode(), dto);
			}
    	}
    	
    	for (FreightRouteProductDto dto : level3.values()) {
    		// 设置二级产品parent
    		FreightRouteProductDto parent = level2.get(products.get(dto.getCode()).getParentCode());
    		dto.setParent(parent);
    		
    		// 设置一级产品
    		parent.setParent(level1.get(products.get(parent.getCode()).getParentCode()));
    	}
    	
    	return level3;
    }
    /**
     * <p>130566--实现零担/快递支线分离:</p>
     *<p>找快递始发或到达线路的FreightRouteLineDto, 始发和到达线路</p>	
     * @date 2014-7-30 上午8:59:35
     * @author 130566-ZengJunfan
     * @param sourceCode
     * @param targetCode
     * @param condition
     * @param time
     * @param lineSort
     * @return
     */
	private FreightRouteLineDto fetchExpressSourceTargetLineDto(String sourceCode, String targetCode, FreightRouteConditionDto condition, Date time, String lineSort){
    	FreightRouteLineDto dto =new FreightRouteLineDto();
    	ExpressLineEntity ele = new ExpressLineEntity();
    	ele.setOrginalOrganizationCode(sourceCode);
    	ele.setDestinationOrganizationCode(targetCode);
    	ele.setLineSort(lineSort);
    	//由于就是做快递产品的  所以 快递产品 在做始发时都是汽运，所以始发线路类型也只有汽运
    	if(StringUtils.equals(lineSort, DictionaryValueConstants.BSE_LINE_SORT_SOURCE)){
    		ele.setTransType(LineUtils.convertProductCodeToTransType(condition.getProductCode()));
    	}
    	List<ExpressLineEntity> expLineList =expresslineService.querySimpleLineListByCondition(ele, 0, 1);
    	//若线路中找不到
    	if(CollectionUtils.isEmpty(expLineList)){
    		//当根据到达网点查询不到快递到达线路时，且到达网点为快递代理网点，需要在根据其所属代理公司进行查询
    		//判断到达网点是否为公司网点
	    	OrgAdministrativeInfoEntity orgEntity=orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeClean(targetCode);
	    	if(orgEntity==null){
	    		//到达网点为快递代理网点，根据快递代理网点获取所属快递代理代理公司
	    		BusinessPartnerExpressEntity ldpCompany=ldpAgencyCompanyService.queryBusinessPartnerByAgencyDeptCode
						(targetCode, FossConstants.ACTIVE);
	    		if(ldpCompany!=null){
	    			ele.setDestinationOrganizationCode(ldpCompany.getAgentCompanyCode());
	    			expLineList =expresslineService.querySimpleLineListByCondition(ele, 0, 1);
	    		}
	    	}
    	}
    	//若还是找不到
    	if (CollectionUtils.isEmpty(expLineList)) {
    		String sourceName = orgAdministrativeInfoService.queryCommonNameByCommonCodeFromCache(ele.getOrginalOrganizationCode());
    		String targetName = orgAdministrativeInfoService.queryCommonNameByCommonCodeFromCache(ele.getDestinationOrganizationCode());
    		String lineSortName = StringUtils.equals(lineSort, DictionaryValueConstants.BSE_LINE_SORT_SOURCE) ? "始发线路" : "到达线路";
    		// 营业部到走货路径的外场找不到直接的始发或到达线路，可能是数据配错了
    		log.error(lineSortName + "找不到，出发部门编码：" + ele.getOrginalOrganizationCode() + ",到达部门编码:" + ele.getDestinationOrganizationCode());
    		log.error(lineSortName + "找不到，出发部门名称：" + sourceName + ",到达部门名称:" + targetName);
    		throw new FreightRouteException(FreightRouteException.LINE_NOT_EXIST, lineSortName, sourceName, targetName);
		}
    	ExpressLineEntity line =expLineList.get(0);
    	//查询快递发车标准
    	List<ExpressDepartureStandardEntity> expressStandardList=expressdepartureStandardService.queryDepartureStandardListByLineVirtualCode(line.getVirtualCode());
    	FreightRouteLineEntity entity = new FreightRouteLineEntity();
 	    entity.setLineVirtualCode(line.getVirtualCode());
 	    entity.setOrginalOrganizationCode(sourceCode);
 	    entity.setDestinationOrganizationCode(targetCode);
 	    //创建走货路径的dto
 	    dto = createFreightRouteLineDtoByExpress(entity, expressStandardList, time, condition.getPriority());
 	    dto.setLineSort(line.getLineSort());
 	    dto.setLineType(line.getLineType());
 	    dto.setTransType(line.getTransType());
    	return dto;
    	
    }
    /**
     * <p>130566--实现零担/快递支线分离:</p>
     *<p>创建走货路径线路dto:拼接快递始发到达，快递发车标准时效</p>	
     * @date 2014-7-30 下午2:30:16
     * @author 130566-ZengJunfan
     * @param entity
     * @param expressStandardList
     * @param time
     * @param priority
     * @return
     */
	private FreightRouteLineDto createFreightRouteLineDtoByExpress(
			FreightRouteLineEntity freightRouteLine,
			List<ExpressDepartureStandardEntity> expressStandardList,
			Date time, String priority) {
		// 设置返回对象
		FreightRouteLineDto result = new FreightRouteLineDto();
		result.setSourceCode(freightRouteLine.getOrginalOrganizationCode());
		result.setTargetCode(freightRouteLine.getDestinationOrganizationCode());
		result.setLineVirtualCode(freightRouteLine.getLineVirtualCode());
		ExpressLineEntity line = expresslineService.querySimpleLineByVirtualCode(freightRouteLine.getLineVirtualCode());
		if (line == null) {
		    log.warn("数据有误，线路虚拟编码 " + freightRouteLine.getLineVirtualCode() + " 在线路表中找不到相应的实体");
		    throw new LineException(LineException.LINE_DOES_NOT_EXIST);
		}
		result.setLineSort(line.getLineSort());
		result.setLineType(line.getLineType());
		result.setTransType(line.getTransType());
		/**
		 * 如果没有发车标准的话，直接返回。 zjf -130566
		 */
		if (CollectionUtils.isEmpty(expressStandardList) || time == null) {
		    // 只有运作线路的偏线或空运才返回时效，其他类型都有出发和到达时间，不用时效。
		    long commonAging = line.getCommonAging() == null ? 0 : line.getCommonAging();
		    long passbyAging = freightRouteLine.getPassbyAging() == null ? 0 : freightRouteLine.getPassbyAging();
		    result.setAging(LineUtils.convertHourToMinute(commonAging + passbyAging));
		    return result;
		}
		// 取时效
		FreightRouteLineAgingDto agingDto = expresslineService.calculateAging(line, freightRouteLine.getOrginalOrganizationCode(), freightRouteLine.getDestinationOrganizationCode());
		// 遍历班次，取下一班的发车时间和到达时间
		for (ExpressDepartureStandardEntity standard : expressStandardList) {
		    Long leaveOffset = LineUtils.isFast(priority) ? agingDto.getBeforeFastAging() : agingDto.getBeforeCommonAging();
		    Date leaveDate = LineUtils.createStandardTime(time, standard.getLeaveTime(),LineUtils.convertHourToMinute(leaveOffset));
		    // 发车标准集合是按发车时间顺序排列的，所以只需进行到第一个符合条件的即可
		    if (leaveDate.after(time)) {
			result.setLeaveDate(leaveDate);// 设置出发时间
			// 如果发车标准中已经有了准点到达时间,说明是始发或到达线路,不用计算时效，直接取
			if (standard.getArriveTime() != null) {
			    Date arriveDate = LineUtils.createStandardTime(time, standard.getArriveTime(), 0);
			    result.setArriveDate(DateUtils.addDays(arriveDate, standard.getArriveDay().intValue()));
			} else {
			    Long arriveOffset = LineUtils.isFast(priority) ? agingDto.getCurrentFastAging() : agingDto.getCurrentCommonAging();
			    result.setArriveDate(DateUtils.addMinutes(leaveDate, LineUtils.convertHourToMinute(arriveOffset)));
			}
			// 除了要加上各个线段的时效以外，走货路径线路的经停时间也要加进去
			Long passbyOffset = freightRouteLine.getPassbyAging() == null ? 0 : freightRouteLine.getPassbyAging();
			result.setPassbyDate(DateUtils.addMinutes(result.getArriveDate(), LineUtils.convertHourToMinute(passbyOffset)));
			break;
		    }
		}
		// 如果当天所有的班次都比给出的时间早，那么取第二天第一班车
		if (result.getLeaveDate() == null) {
			ExpressDepartureStandardEntity standard = expressStandardList.get(0);
		    Long leaveOffset = LineUtils.isFast(priority) ? agingDto.getBeforeFastAging() : agingDto.getBeforeCommonAging();
		    Date leaveDate = LineUtils.createStandardTime(time, standard.getLeaveTime(),LineUtils.convertHourToMinute(leaveOffset));
		    result.setLeaveDate(DateUtils.addDays(leaveDate, NumberConstants.NUMERAL_ONE));// 设置出发时间
		    // 如果发车标准中已经有了准点到达时间,说明是始发或到达线路,不用计算时效，直接取
		    if (standard.getArriveTime() != null) {
			Date arriveDate = LineUtils.createStandardTime(time, standard.getArriveTime(), 0);
			result.setArriveDate(DateUtils.addDays(arriveDate, standard.getArriveDay().intValue()));
		    } else {
			Long arriveOffset = LineUtils.isFast(priority) ? agingDto.getCurrentFastAging() : agingDto.getCurrentCommonAging();
			result.setArriveDate(DateUtils.addMinutes(leaveDate, LineUtils.convertHourToMinute(arriveOffset)));
		    }
		    result.setArriveDate(DateUtils.addDays(result.getArriveDate(), NumberConstants.NUMERAL_ONE));
		    // 除了要加上各个线段的时效以外，走货路径线路的经停时间也要加进去
		    Long passbyOffset = freightRouteLine.getPassbyAging() == null ? 0 : freightRouteLine.getPassbyAging();
		    result.setPassbyDate(DateUtils.addMinutes(result.getArriveDate(), LineUtils.convertHourToMinute(passbyOffset)));
		}
		return result;
	}
}
