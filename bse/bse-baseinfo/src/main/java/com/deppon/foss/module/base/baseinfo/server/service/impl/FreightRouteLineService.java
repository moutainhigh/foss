/*******************************************************************************
 * Copyright 2013 BSE TEAM
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *    http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * PROJECT NAME	: bse-baseinfo
 * 
 * FILE PATH        	: src/main/java/com/deppon/foss/module/base/baseinfo/server/service/impl/FreightRouteLineService.java
 * 
 * FILE NAME        	: FreightRouteLineService.java
 * 
 * AUTHOR			: FOSS综合管理开发组
 * 
 * HOME PAGE		:  http://www.deppon.com
 * 
 * COPYRIGHT		: Copyright (c) 2013  Deppon All Rights Reserved.
 ******************************************************************************/
/*
 * Copyright by Deppon and the original author or authors.
 * 
 * This document only allow internal use ,Any of your behaviors using the file
 * not internal will pay legal responsibility.
 *
 * You may learn more information about Deppon from
 *
 *      http://www.deppon.com
 *
 */ 
/**
 * 1.5.3	界面描述-主界面
1.	功能按钮区域
1)	新增按钮：点击新增按钮进入新增界面，参见【图二：走货路径（运作到运作）新增/修改界面】。
2)	查询按钮：输入查询条件，点击查询按钮，系统返回查询结果，刷新查询列表。
3)	重置按钮：点击重置按钮，清空查询条件。
4)	作废按钮：选中列表中一行或多行记录，点击作废按钮，弹出确认提示框，作废时同时把该走货路径包含的线路移除；或点击各行的作废按钮，弹出确认提示框。作废成功后会弹出作废成功的提示框，作废时同时把该走货路径包含的线路移除；若作废失败，弹出作废失败的提示框，并提示失败原因。
5)	查看详细信息：双击该行记录，弹出一个窗口，可以查看该记录的详细信息。
6)	修改按钮：点击各行的修改按钮，进入修改界面，参见【图二：走货路径（运作到运作）新增/修改界面】。
7)	分页按钮：实现分页功能。
2.	列表区域
1)	列表区域默认不显示，点击查询按钮，根据查询条件显示列表数据。
2)	列表中显示：出发站、到达站、运输性质、时效（小时）、是否可以打木架、打木架外场、是否默认走货路径、状态。
3.	字段输入区域
1)	查询条件包括出发站、到达站、运输性质。
1.1	出发站：选择框，支持手动输入模糊查询，也支持从行政组织（外场、空运总调）基础资料中选择；
1.2	到达站：选择框，支持手动输入模糊查询，也支持从行政组织（外场）、偏线代理、空运代理网点机场信息基础资料中选择；
1.3	运输性质：下拉框，包括：全部、取第三级产品类型（精准卡航，精准城运，精准汽运（长途），精准汽运（短途），汽运偏线，精准空运）（整车不可以选，需要排除掉）精准汽运、精准卡航、汽运偏线、精准空运。默认为全部。
1.31.4	状态：下拉框，包括：全部、生效、失效。默认为全部。

1.5.5	界面描述-新增/修改界面
1.	字段输入区域
1)	运输性质： 必填，下拉框，包含取第三级产品类型（精准卡航，精准城运，精准汽运（长途），精准汽运（短途），汽运偏线，精准空运）（整车不可以选，需要排除掉）精准汽运、精准卡航、汽运偏线、精准空运。
2)	出发站：必填，选择框，从行政组织（外场、空运总调）基础资料中选择
3)	到达站：必填，选择框，从行政组织（外场）、偏线代理、机场空运代理网点、可空运到达的营业部信息基础资料中选择
4)	时效（小时）：根据添加的线路时效（小时）+经停时间（小时）计算获取。
5)	是否默认走货路径：选择框，默认选中，该走货路径是否为默认走货路径；
6)	是否可以打木架：必填，单选按钮，是或否，默认为否，若值为“否”，单选按钮为只读状态，不允许选择“是”；若值为“是”，单选按钮可以选择为“否”；
7)	打木架外场：下拉框，默认为不显示；与“是否可以打木架”联动，若“是否可以打木架”值为“否”，“打木架外场”隐藏；若“是否可以打木架”值为“是”，“打木架外场”显示，下拉框里会把拥有“可以打木架”属性的外场查询出来，默认为第一个具有“可以打木架” 属性的外场；
8)	备注：选填，文本
9)	出发站对应营业部：下拉列表，显示所有配置过始发线路到达出发站的营业部与“是否默认走货路径”联动，如果“是否默认走货路径”选中，“出发站对应营业部”为所有不是默认的始发配载部门为“出发站”的营业部；否则，“出发站对应营业部”显示所有始发配载部门为“出发站”的营业部。
10)	出发网点组：下拉列表，列表中显示该“出发网点组”所属的营业部，从“出发站对应营业部”下拉列表中选择；
11)	到达站对应营业部：下拉列表，显示所有配置过到达线路到达该到到达站的营业部与“是否默认走货路径”联动，如果“是否默认走货路径”选中，“到达站对应营业部”显示所有不是默认的到达配载部门为“到达站”的营业部；否则，“到达站对应营业部”显示所有到达配置部门为“到达站”的营业部；
12)	到达网点组：下拉列表，列表中显示该“到达网点组”所属的营业部，从“到达站对应营业部”下拉列表中选择。
13)	网点组列表详见【网点组列表数据】
14)	线路信息列表详见【线路信息列表数据】
2.	功能按钮区域
1)	出发网点组右选（--->）按钮：选中“出发站对应营业部”下拉列表中的营业部，点击右选按钮，选中的营业部会在“出发网点组”下拉列表中显示。
2)	出发网点组右全选（-->>）按钮：点击右全选按钮，“出发站对应营业部”下拉列表中的营业部全部会在“出发网点组”下拉列表中显示。
3)	出发网点组左移（<---）按钮：选中“出发网点组”下拉列表中的营业部，点击左移按钮，选中的营业部会在“出发网点组”下拉列表中清除；
4)	出发网点组左全移（<<--）按钮：点击左全移按钮，“出发网点组”下拉列表中的营业部全部清除；
5)	到达网点组右选（--->）按钮：选中“到达站对应营业部”下拉列表中的营业部，点击右选按钮，选中的营业部会在“到达网点组”下拉列表中显示
6)	到达网点组右全选（-->>）按钮：点击右全选按钮，“到达站对应营业部”下拉列表中的营业部全部会在“到达网点组”下拉列表中显示。
7)	到达网点组左移（<---）按钮：选中“到达网点组”下拉列表中的营业部，点击左移按钮，选中的营业部会在“到达网点组”下拉列表中清除；
8)	到达网点组左全移（<<--）按钮：点击左全移按钮，“到达网点组”下拉列表中的营业部全部清除
9)	添加网点组按钮：点击添加网点组按钮，先判断走货路径信息是否已经保存，如果信息还未保存，弹出提示框，提示需要先保存走货路径信息才能添加线路信息；如果信息已经保存成功，进行添加网点组操作
10)	修改网点组按钮：点击修改网点组按钮，先判断走货路径信息是否已做修改，如果走货路径信息已做修改，弹出提示框，提示先保存走货路径信息才能进行修改网点组操作，则弹出【图三：修改网点组界面】，进行修改网点组操作；
11)	作废网点组按钮：点击作废网点组按钮，先判断走货路径信息是否已做修改，如果走货路径信息已做修改，弹出提示框，提示先保存走货路径信息才能作废网点组操作；
12)	添加线路按钮：点击添加线路按钮，先判断走货路径信息是否已经保存，如果信息还未保存，弹出提示框，提示需要先保存走货路径信息才能添加线路信息；如果信息已经保存成功，则弹出【图四：线路信息新增/修改界面】，进行添加线路操作。
13)	修改线路按钮：点击修改线路按钮，先判断走货路径信息是否已做修改，如果走货路径信息已做修改，弹出提示框，提示先保存走货路径信息才能进行修改线路信息操作，则弹出【图四：线路信息新增/修改界面】，进行修改线路操作。
14)	移除线路按钮：选择要移除的线路，点击移除线路按钮，先判断走货路径信息是否已做修改，如果走货路径信息已做修改，弹出提示框，提示先保存走货路径信息才能移除线路信息。
15)	保存按钮：点击保存按钮，需要提示用户是否保存成功，若保存成功，关闭当前界面，返回主界面；若保存失败，提示用户保存失败以及失败原因，不关闭当前界面
16)	重置按钮：点击重置按钮，回到当前界面的初始状态。
17)	取消按钮：点击取消按钮，如果当前界面数据未保存，提示“界面数据不为空，是否退出”，点击“是”退出当前界面，返回主界面；否则，不关闭当前界面。
17)18)	生效或失效按钮：点击失效按钮，走货路径状态修改为失效状态，失效按钮隐藏，生效按钮显示；点击生效按钮，在后台对业务规则SR-6进行验证，走货路径状态修改为生效状态，生效按钮隐藏，失效按钮显示。

1.5.7	界面描述-修改网点组
1、	字段输入区域
1)	出发站对应营业部：下拉列表，下拉列表中显示所有始发配置部门为“出发站”的营业部
2)	出发网点组：必填，下拉列表，列表中显示该“出发网点组”所属的营业部，从“出发站对应营业部”下拉列表中选择
3)	到达站对应营业部：下拉列表框，下拉列表中显示所有到达配置部门为“到达站”的营业部；
4)	到达网点组：必填，下拉列表，列表中显示该“到达网点组”所属的营业部，从“到达站对应营业部”下拉列表中选择。
2、功能按钮区域
1)	保存按钮：点击保存按钮，需要提示用户是否保存成功，若保存成功，关闭当前界面，返回主界面；若保存失败，提示用户保存失败以及失败原因，不关闭当前界面
2)	重置按钮：点击重置按钮，回到当前界面的初始状态。
3)	取消按钮：点击取消按钮，如果当前界面数据未保存，提示“界面数据不为空，是否退出”，点击“是”退出当前界面，返回主界面；否则，不关闭当前界面；

1.5.9	界面描述-新增/修改线路信息
2、	字段输入区域
5)	序号：必填，数字，该线路在走货路径中所占的顺序
6)	线路名称：必填，选择框，从运作到运作线路信息基础资料中选择，参见业务规则SR-3
7)	线路简码：与“线路名称”联动带出 
8)	出发站：必填，下拉框，根据所选线路动态获取该线路包含线段所有的出发站。默认选中线路的出发站。
9)	到达站：必填，下拉框，根据所选线路动态获取该线路包含线段所有的到达站。默认选中线路的到达站。
10)	时效（小时）：根据走货路径的“运输性质”，所选“线路名称”以及“出发站”，“到达站”，由系统自动计算。
11)	经停时间（小时）：必填，数字，默认为0，单位：小时
2、功能按钮区域
4)	保存按钮：点击保存按钮，需要提示用户是否保存成功，若保存成功，关闭当前界面，返回主界面；若保存失败，提示用户保存失败以及失败原因，不关闭当前界面
5)	重置按钮：点击重置按钮，回到当前界面的初始状态。
6)	取消按钮：点击取消按钮，如果当前界面数据未保存，提示“界面数据不为空，是否退出”，点击“是”退出当前界面，返回主界面；否则，不关闭当前界面。

SR-1	新增/修改界面，若“运输性质”为精准汽运、精准卡航，“出发站”只能从行政组织（外场）基础资料中选择，“到达站”只能从行政组织（外场）基础资料中选择；若“运输性质”为汽运偏线，“出发站”只能从行政组织（外场）基础资料中选择，“到达站”只能从偏线代理基础资料中选择；若“运输性质”为精准空运，“出发站”只能从行政组织（空运总调或外场）基础资料中选择， ，“到达站”只能从空运代理网点或可空运到达的营业部信息基础资料中选择；
SR-2	新增/修改界面，时效（小时），根据走货路径的“运输性质”，所选“线路名称”以及“出发站”，“到达站”，由系统自动计算
SR-3	1、	新增/修改线路页面，走货路径可以任意选取运作到运作线路，线路选择框需要区分汽运，空运，偏线3个tab供用户选择；
SR-4	新增/修改线路页面，“出发站”根据所选线路动态获取该线路包含线段所有的出发站，以下拉框显示，默认选中线路的出发站。；“到达站”根据所选线路动态获取该线路包含线段所有的到达站，以下拉框显示，默认选中线路的到达站。；“时效（小时）” 根据走货路径的“运输性质”，所选“线路名称”以及“出发站”，“到达站”，由系统自动计算
SR-5	查询支持模糊查询，条件“出发站”支持手动输入模糊查询，从行政组织（外场、空运总调）基础资料中选择；“到达站”从行政组织（外场）、偏线代理、空运代理网点信息基础资料中选择；“运输性质”默认为全部，包含：精准卡航，精准城运，精准汽运（长途），精准汽运（短途），汽运偏线，精准空运。
SR-6	走货路径的第一段线路的“出发站”必须与走货路径的“出发站”一致，走货路径的最后一段线路的“到达站”必须与走货路径的“到达站”一致，走货路径第n段线路的“出发站”必须与走货路径第n-1段线路的“到达站”一致；
SR-7	走货路径的线路中，选择的“到达站”在线路中的站点位置必须在“出发站”的站点位置之后；
SR-8	新增/修改线路页面，“是否可以打木架”单选按钮，是或否，默认为否，若值为“否”，单选按钮为只读状态，不允许选择“是”；若值为“是”，单选按钮可以选择为“否”；“打木架外场”与“是否可以打木架”联动，若“是否可以打木架”值为“否”，“打木架外场”隐藏；若“是否可以打木架”值为“是”，“打木架外场”显示，下拉框里会把拥有“可以打木架”属性的外场查询出来，默认为第一个具有“可以打木架” 属性的外场；

 * 1.5.3	界面描述-主界面
1.	功能按钮区域
1)	新增按钮：点击新增按钮进入新增界面，参见【图二：走货路径（运作到运作）新增/修改界面】。
2)	查询按钮：输入查询条件，点击查询按钮，系统返回查询结果，刷新查询列表。
3)	重置按钮：点击重置按钮，清空查询条件。
4)	作废按钮：选中列表中一行或多行记录，点击作废按钮，弹出确认提示框，作废时同时把该走货路径包含的线路移除；或点击各行的作废按钮，弹出确认提示框。作废成功后会弹出作废成功的提示框，作废时同时把该走货路径包含的线路移除；若作废失败，弹出作废失败的提示框，并提示失败原因。
5)	查看详细信息：双击该行记录，弹出一个窗口，可以查看该记录的详细信息。
6)	修改按钮：点击各行的修改按钮，进入修改界面，参见【图二：走货路径（运作到运作）新增/修改界面】。
7)	分页按钮：实现分页功能。
2.	列表区域
1)	列表区域默认不显示，点击查询按钮，根据查询条件显示列表数据。
2)	列表中显示：出发站、到达站、运输性质、时效（小时）、是否可以打木架、打木架外场、是否默认走货路径、状态。
3.	字段输入区域
1)	查询条件包括出发站、到达站、运输性质。
1.1	出发站：选择框，支持手动输入模糊查询，也支持从行政组织（外场、空运总调）基础资料中选择；
1.2	到达站：选择框，支持手动输入模糊查询，也支持从行政组织（外场）、偏线代理、空运代理网点机场信息基础资料中选择；
1.3	运输性质：下拉框，包括：全部、取第三级产品类型（精准卡航，精准城运，精准汽运（长途），精准汽运（短途），汽运偏线，精准空运）（整车不可以选，需要排除掉）精准汽运、精准卡航、汽运偏线、精准空运。默认为全部。
1.31.4	状态：下拉框，包括：全部、生效、失效。默认为全部。

1.5.5	界面描述-新增/修改界面
1.	字段输入区域
1)	运输性质： 必填，下拉框，包含取第三级产品类型（精准卡航，精准城运，精准汽运（长途），精准汽运（短途），汽运偏线，精准空运）（整车不可以选，需要排除掉）精准汽运、精准卡航、汽运偏线、精准空运。
2)	出发站：必填，选择框，从行政组织（外场、空运总调）基础资料中选择
3)	到达站：必填，选择框，从行政组织（外场）、偏线代理、机场空运代理网点、可空运到达的营业部信息基础资料中选择
4)	时效（小时）：根据添加的线路时效（小时）+经停时间（小时）计算获取。
5)	是否默认走货路径：选择框，默认选中，该走货路径是否为默认走货路径；
6)	是否可以打木架：必填，单选按钮，是或否，默认为否，若值为“否”，单选按钮为只读状态，不允许选择“是”；若值为“是”，单选按钮可以选择为“否”；
7)	打木架外场：下拉框，默认为不显示；与“是否可以打木架”联动，若“是否可以打木架”值为“否”，“打木架外场”隐藏；若“是否可以打木架”值为“是”，“打木架外场”显示，下拉框里会把拥有“可以打木架”属性的外场查询出来，默认为第一个具有“可以打木架” 属性的外场；
8)	备注：选填，文本
9)	出发站对应营业部：下拉列表，显示所有配置过始发线路到达出发站的营业部与“是否默认走货路径”联动，如果“是否默认走货路径”选中，“出发站对应营业部”为所有不是默认的始发配载部门为“出发站”的营业部；否则，“出发站对应营业部”显示所有始发配载部门为“出发站”的营业部。
10)	出发网点组：下拉列表，列表中显示该“出发网点组”所属的营业部，从“出发站对应营业部”下拉列表中选择；
11)	到达站对应营业部：下拉列表，显示所有配置过到达线路到达该到到达站的营业部与“是否默认走货路径”联动，如果“是否默认走货路径”选中，“到达站对应营业部”显示所有不是默认的到达配载部门为“到达站”的营业部；否则，“到达站对应营业部”显示所有到达配置部门为“到达站”的营业部；
12)	到达网点组：下拉列表，列表中显示该“到达网点组”所属的营业部，从“到达站对应营业部”下拉列表中选择。
13)	网点组列表详见【网点组列表数据】
14)	线路信息列表详见【线路信息列表数据】
2.	功能按钮区域
1)	出发网点组右选（--->）按钮：选中“出发站对应营业部”下拉列表中的营业部，点击右选按钮，选中的营业部会在“出发网点组”下拉列表中显示。
2)	出发网点组右全选（-->>）按钮：点击右全选按钮，“出发站对应营业部”下拉列表中的营业部全部会在“出发网点组”下拉列表中显示。
3)	出发网点组左移（<---）按钮：选中“出发网点组”下拉列表中的营业部，点击左移按钮，选中的营业部会在“出发网点组”下拉列表中清除；
4)	出发网点组左全移（<<--）按钮：点击左全移按钮，“出发网点组”下拉列表中的营业部全部清除；
5)	到达网点组右选（--->）按钮：选中“到达站对应营业部”下拉列表中的营业部，点击右选按钮，选中的营业部会在“到达网点组”下拉列表中显示
6)	到达网点组右全选（-->>）按钮：点击右全选按钮，“到达站对应营业部”下拉列表中的营业部全部会在“到达网点组”下拉列表中显示。
7)	到达网点组左移（<---）按钮：选中“到达网点组”下拉列表中的营业部，点击左移按钮，选中的营业部会在“到达网点组”下拉列表中清除；
8)	到达网点组左全移（<<--）按钮：点击左全移按钮，“到达网点组”下拉列表中的营业部全部清除
9)	添加网点组按钮：点击添加网点组按钮，先判断走货路径信息是否已经保存，如果信息还未保存，弹出提示框，提示需要先保存走货路径信息才能添加线路信息；如果信息已经保存成功，进行添加网点组操作
10)	修改网点组按钮：点击修改网点组按钮，先判断走货路径信息是否已做修改，如果走货路径信息已做修改，弹出提示框，提示先保存走货路径信息才能进行修改网点组操作，则弹出【图三：修改网点组界面】，进行修改网点组操作；
11)	作废网点组按钮：点击作废网点组按钮，先判断走货路径信息是否已做修改，如果走货路径信息已做修改，弹出提示框，提示先保存走货路径信息才能作废网点组操作；
12)	添加线路按钮：点击添加线路按钮，先判断走货路径信息是否已经保存，如果信息还未保存，弹出提示框，提示需要先保存走货路径信息才能添加线路信息；如果信息已经保存成功，则弹出【图四：线路信息新增/修改界面】，进行添加线路操作。
13)	修改线路按钮：点击修改线路按钮，先判断走货路径信息是否已做修改，如果走货路径信息已做修改，弹出提示框，提示先保存走货路径信息才能进行修改线路信息操作，则弹出【图四：线路信息新增/修改界面】，进行修改线路操作。
14)	移除线路按钮：选择要移除的线路，点击移除线路按钮，先判断走货路径信息是否已做修改，如果走货路径信息已做修改，弹出提示框，提示先保存走货路径信息才能移除线路信息。
15)	保存按钮：点击保存按钮，需要提示用户是否保存成功，若保存成功，关闭当前界面，返回主界面；若保存失败，提示用户保存失败以及失败原因，不关闭当前界面
16)	重置按钮：点击重置按钮，回到当前界面的初始状态。
17)	取消按钮：点击取消按钮，如果当前界面数据未保存，提示“界面数据不为空，是否退出”，点击“是”退出当前界面，返回主界面；否则，不关闭当前界面。
17)18)	生效或失效按钮：点击失效按钮，走货路径状态修改为失效状态，失效按钮隐藏，生效按钮显示；点击生效按钮，在后台对业务规则SR-6进行验证，走货路径状态修改为生效状态，生效按钮隐藏，失效按钮显示。

1.5.7	界面描述-修改网点组
1、	字段输入区域
1)	出发站对应营业部：下拉列表，下拉列表中显示所有始发配置部门为“出发站”的营业部
2)	出发网点组：必填，下拉列表，列表中显示该“出发网点组”所属的营业部，从“出发站对应营业部”下拉列表中选择
3)	到达站对应营业部：下拉列表框，下拉列表中显示所有到达配置部门为“到达站”的营业部；
4)	到达网点组：必填，下拉列表，列表中显示该“到达网点组”所属的营业部，从“到达站对应营业部”下拉列表中选择。
2、功能按钮区域
1)	保存按钮：点击保存按钮，需要提示用户是否保存成功，若保存成功，关闭当前界面，返回主界面；若保存失败，提示用户保存失败以及失败原因，不关闭当前界面
2)	重置按钮：点击重置按钮，回到当前界面的初始状态。
3)	取消按钮：点击取消按钮，如果当前界面数据未保存，提示“界面数据不为空，是否退出”，点击“是”退出当前界面，返回主界面；否则，不关闭当前界面；

1.5.9	界面描述-新增/修改线路信息
2、	字段输入区域
5)	序号：必填，数字，该线路在走货路径中所占的顺序
6)	线路名称：必填，选择框，从运作到运作线路信息基础资料中选择，参见业务规则SR-3
7)	线路简码：与“线路名称”联动带出 
8)	出发站：必填，下拉框，根据所选线路动态获取该线路包含线段所有的出发站。默认选中线路的出发站。
9)	到达站：必填，下拉框，根据所选线路动态获取该线路包含线段所有的到达站。默认选中线路的到达站。
10)	时效（小时）：根据走货路径的“运输性质”，所选“线路名称”以及“出发站”，“到达站”，由系统自动计算。
11)	经停时间（小时）：必填，数字，默认为0，单位：小时
2、功能按钮区域
4)	保存按钮：点击保存按钮，需要提示用户是否保存成功，若保存成功，关闭当前界面，返回主界面；若保存失败，提示用户保存失败以及失败原因，不关闭当前界面
5)	重置按钮：点击重置按钮，回到当前界面的初始状态。
6)	取消按钮：点击取消按钮，如果当前界面数据未保存，提示“界面数据不为空，是否退出”，点击“是”退出当前界面，返回主界面；否则，不关闭当前界面。

SR-1	新增/修改界面，若“运输性质”为精准汽运、精准卡航，“出发站”只能从行政组织（外场）基础资料中选择，“到达站”只能从行政组织（外场）基础资料中选择；若“运输性质”为汽运偏线，“出发站”只能从行政组织（外场）基础资料中选择，“到达站”只能从偏线代理基础资料中选择；若“运输性质”为精准空运，“出发站”只能从行政组织（空运总调或外场）基础资料中选择， ，“到达站”只能从空运代理网点或可空运到达的营业部信息基础资料中选择；
SR-2	新增/修改界面，时效（小时），根据走货路径的“运输性质”，所选“线路名称”以及“出发站”，“到达站”，由系统自动计算
SR-3	1、	新增/修改线路页面，走货路径可以任意选取运作到运作线路，线路选择框需要区分汽运，空运，偏线3个tab供用户选择；
SR-4	新增/修改线路页面，“出发站”根据所选线路动态获取该线路包含线段所有的出发站，以下拉框显示，默认选中线路的出发站。；“到达站”根据所选线路动态获取该线路包含线段所有的到达站，以下拉框显示，默认选中线路的到达站。；“时效（小时）” 根据走货路径的“运输性质”，所选“线路名称”以及“出发站”，“到达站”，由系统自动计算
SR-5	查询支持模糊查询，条件“出发站”支持手动输入模糊查询，从行政组织（外场、空运总调）基础资料中选择；“到达站”从行政组织（外场）、偏线代理、空运代理网点信息基础资料中选择；“运输性质”默认为全部，包含：精准卡航，精准城运，精准汽运（长途），精准汽运（短途），汽运偏线，精准空运。
SR-6	走货路径的第一段线路的“出发站”必须与走货路径的“出发站”一致，走货路径的最后一段线路的“到达站”必须与走货路径的“到达站”一致，走货路径第n段线路的“出发站”必须与走货路径第n-1段线路的“到达站”一致；
SR-7	走货路径的线路中，选择的“到达站”在线路中的站点位置必须在“出发站”的站点位置之后；
SR-8	新增/修改线路页面，“是否可以打木架”单选按钮，是或否，默认为否，若值为“否”，单选按钮为只读状态，不允许选择“是”；若值为“是”，单选按钮可以选择为“否”；“打木架外场”与“是否可以打木架”联动，若“是否可以打木架”值为“否”，“打木架外场”隐藏；若“是否可以打木架”值为“是”，“打木架外场”显示，下拉框里会把拥有“可以打木架”属性的外场查询出来，默认为第一个具有“可以打木架” 属性的外场；

 * 1.5.3	界面描述-主界面
1.	功能按钮区域
1)	新增按钮：点击新增按钮进入新增界面，参见【图二：走货路径（运作到运作）新增/修改界面】。
2)	查询按钮：输入查询条件，点击查询按钮，系统返回查询结果，刷新查询列表。
3)	重置按钮：点击重置按钮，清空查询条件。
4)	作废按钮：选中列表中一行或多行记录，点击作废按钮，弹出确认提示框，作废时同时把该走货路径包含的线路移除；或点击各行的作废按钮，弹出确认提示框。作废成功后会弹出作废成功的提示框，作废时同时把该走货路径包含的线路移除；若作废失败，弹出作废失败的提示框，并提示失败原因。
5)	查看详细信息：双击该行记录，弹出一个窗口，可以查看该记录的详细信息。
6)	修改按钮：点击各行的修改按钮，进入修改界面，参见【图二：走货路径（运作到运作）新增/修改界面】。
7)	分页按钮：实现分页功能。
2.	列表区域
1)	列表区域默认不显示，点击查询按钮，根据查询条件显示列表数据。
2)	列表中显示：出发站、到达站、运输性质、时效（小时）、是否可以打木架、打木架外场、是否默认走货路径、状态。
3.	字段输入区域
1)	查询条件包括出发站、到达站、运输性质。
1.1	出发站：选择框，支持手动输入模糊查询，也支持从行政组织（外场、空运总调）基础资料中选择；
1.2	到达站：选择框，支持手动输入模糊查询，也支持从行政组织（外场）、偏线代理、空运代理网点机场信息基础资料中选择；
1.3	运输性质：下拉框，包括：全部、取第三级产品类型（精准卡航，精准城运，精准汽运（长途），精准汽运（短途），汽运偏线，精准空运）（整车不可以选，需要排除掉）精准汽运、精准卡航、汽运偏线、精准空运。默认为全部。
1.31.4	状态：下拉框，包括：全部、生效、失效。默认为全部。

1.5.5	界面描述-新增/修改界面
1.	字段输入区域
1)	运输性质： 必填，下拉框，包含取第三级产品类型（精准卡航，精准城运，精准汽运（长途），精准汽运（短途），汽运偏线，精准空运）（整车不可以选，需要排除掉）精准汽运、精准卡航、汽运偏线、精准空运。
2)	出发站：必填，选择框，从行政组织（外场、空运总调）基础资料中选择
3)	到达站：必填，选择框，从行政组织（外场）、偏线代理、机场空运代理网点、可空运到达的营业部信息基础资料中选择
4)	时效（小时）：根据添加的线路时效（小时）+经停时间（小时）计算获取。
5)	是否默认走货路径：选择框，默认选中，该走货路径是否为默认走货路径；
6)	是否可以打木架：必填，单选按钮，是或否，默认为否，若值为“否”，单选按钮为只读状态，不允许选择“是”；若值为“是”，单选按钮可以选择为“否”；
7)	打木架外场：下拉框，默认为不显示；与“是否可以打木架”联动，若“是否可以打木架”值为“否”，“打木架外场”隐藏；若“是否可以打木架”值为“是”，“打木架外场”显示，下拉框里会把拥有“可以打木架”属性的外场查询出来，默认为第一个具有“可以打木架” 属性的外场；
8)	备注：选填，文本
9)	出发站对应营业部：下拉列表，显示所有配置过始发线路到达出发站的营业部与“是否默认走货路径”联动，如果“是否默认走货路径”选中，“出发站对应营业部”为所有不是默认的始发配载部门为“出发站”的营业部；否则，“出发站对应营业部”显示所有始发配载部门为“出发站”的营业部。
10)	出发网点组：下拉列表，列表中显示该“出发网点组”所属的营业部，从“出发站对应营业部”下拉列表中选择；
11)	到达站对应营业部：下拉列表，显示所有配置过到达线路到达该到到达站的营业部与“是否默认走货路径”联动，如果“是否默认走货路径”选中，“到达站对应营业部”显示所有不是默认的到达配载部门为“到达站”的营业部；否则，“到达站对应营业部”显示所有到达配置部门为“到达站”的营业部；
12)	到达网点组：下拉列表，列表中显示该“到达网点组”所属的营业部，从“到达站对应营业部”下拉列表中选择。
13)	网点组列表详见【网点组列表数据】
14)	线路信息列表详见【线路信息列表数据】
2.	功能按钮区域
1)	出发网点组右选（--->）按钮：选中“出发站对应营业部”下拉列表中的营业部，点击右选按钮，选中的营业部会在“出发网点组”下拉列表中显示。
2)	出发网点组右全选（-->>）按钮：点击右全选按钮，“出发站对应营业部”下拉列表中的营业部全部会在“出发网点组”下拉列表中显示。
3)	出发网点组左移（<---）按钮：选中“出发网点组”下拉列表中的营业部，点击左移按钮，选中的营业部会在“出发网点组”下拉列表中清除；
4)	出发网点组左全移（<<--）按钮：点击左全移按钮，“出发网点组”下拉列表中的营业部全部清除；
5)	到达网点组右选（--->）按钮：选中“到达站对应营业部”下拉列表中的营业部，点击右选按钮，选中的营业部会在“到达网点组”下拉列表中显示
6)	到达网点组右全选（-->>）按钮：点击右全选按钮，“到达站对应营业部”下拉列表中的营业部全部会在“到达网点组”下拉列表中显示。
7)	到达网点组左移（<---）按钮：选中“到达网点组”下拉列表中的营业部，点击左移按钮，选中的营业部会在“到达网点组”下拉列表中清除；
8)	到达网点组左全移（<<--）按钮：点击左全移按钮，“到达网点组”下拉列表中的营业部全部清除
9)	添加网点组按钮：点击添加网点组按钮，先判断走货路径信息是否已经保存，如果信息还未保存，弹出提示框，提示需要先保存走货路径信息才能添加线路信息；如果信息已经保存成功，进行添加网点组操作
10)	修改网点组按钮：点击修改网点组按钮，先判断走货路径信息是否已做修改，如果走货路径信息已做修改，弹出提示框，提示先保存走货路径信息才能进行修改网点组操作，则弹出【图三：修改网点组界面】，进行修改网点组操作；
11)	作废网点组按钮：点击作废网点组按钮，先判断走货路径信息是否已做修改，如果走货路径信息已做修改，弹出提示框，提示先保存走货路径信息才能作废网点组操作；
12)	添加线路按钮：点击添加线路按钮，先判断走货路径信息是否已经保存，如果信息还未保存，弹出提示框，提示需要先保存走货路径信息才能添加线路信息；如果信息已经保存成功，则弹出【图四：线路信息新增/修改界面】，进行添加线路操作。
13)	修改线路按钮：点击修改线路按钮，先判断走货路径信息是否已做修改，如果走货路径信息已做修改，弹出提示框，提示先保存走货路径信息才能进行修改线路信息操作，则弹出【图四：线路信息新增/修改界面】，进行修改线路操作。
14)	移除线路按钮：选择要移除的线路，点击移除线路按钮，先判断走货路径信息是否已做修改，如果走货路径信息已做修改，弹出提示框，提示先保存走货路径信息才能移除线路信息。
15)	保存按钮：点击保存按钮，需要提示用户是否保存成功，若保存成功，关闭当前界面，返回主界面；若保存失败，提示用户保存失败以及失败原因，不关闭当前界面
16)	重置按钮：点击重置按钮，回到当前界面的初始状态。
17)	取消按钮：点击取消按钮，如果当前界面数据未保存，提示“界面数据不为空，是否退出”，点击“是”退出当前界面，返回主界面；否则，不关闭当前界面。
17)18)	生效或失效按钮：点击失效按钮，走货路径状态修改为失效状态，失效按钮隐藏，生效按钮显示；点击生效按钮，在后台对业务规则SR-6进行验证，走货路径状态修改为生效状态，生效按钮隐藏，失效按钮显示。

1.5.7	界面描述-修改网点组
1、	字段输入区域
1)	出发站对应营业部：下拉列表，下拉列表中显示所有始发配置部门为“出发站”的营业部
2)	出发网点组：必填，下拉列表，列表中显示该“出发网点组”所属的营业部，从“出发站对应营业部”下拉列表中选择
3)	到达站对应营业部：下拉列表框，下拉列表中显示所有到达配置部门为“到达站”的营业部；
4)	到达网点组：必填，下拉列表，列表中显示该“到达网点组”所属的营业部，从“到达站对应营业部”下拉列表中选择。
2、功能按钮区域
1)	保存按钮：点击保存按钮，需要提示用户是否保存成功，若保存成功，关闭当前界面，返回主界面；若保存失败，提示用户保存失败以及失败原因，不关闭当前界面
2)	重置按钮：点击重置按钮，回到当前界面的初始状态。
3)	取消按钮：点击取消按钮，如果当前界面数据未保存，提示“界面数据不为空，是否退出”，点击“是”退出当前界面，返回主界面；否则，不关闭当前界面；

1.5.9	界面描述-新增/修改线路信息
2、	字段输入区域
5)	序号：必填，数字，该线路在走货路径中所占的顺序
6)	线路名称：必填，选择框，从运作到运作线路信息基础资料中选择，参见业务规则SR-3
7)	线路简码：与“线路名称”联动带出 
8)	出发站：必填，下拉框，根据所选线路动态获取该线路包含线段所有的出发站。默认选中线路的出发站。
9)	到达站：必填，下拉框，根据所选线路动态获取该线路包含线段所有的到达站。默认选中线路的到达站。
10)	时效（小时）：根据走货路径的“运输性质”，所选“线路名称”以及“出发站”，“到达站”，由系统自动计算。
11)	经停时间（小时）：必填，数字，默认为0，单位：小时
2、功能按钮区域
4)	保存按钮：点击保存按钮，需要提示用户是否保存成功，若保存成功，关闭当前界面，返回主界面；若保存失败，提示用户保存失败以及失败原因，不关闭当前界面
5)	重置按钮：点击重置按钮，回到当前界面的初始状态。
6)	取消按钮：点击取消按钮，如果当前界面数据未保存，提示“界面数据不为空，是否退出”，点击“是”退出当前界面，返回主界面；否则，不关闭当前界面。

SR-1	新增/修改界面，若“运输性质”为精准汽运、精准卡航，“出发站”只能从行政组织（外场）基础资料中选择，“到达站”只能从行政组织（外场）基础资料中选择；若“运输性质”为汽运偏线，“出发站”只能从行政组织（外场）基础资料中选择，“到达站”只能从偏线代理基础资料中选择；若“运输性质”为精准空运，“出发站”只能从行政组织（空运总调或外场）基础资料中选择， ，“到达站”只能从空运代理网点或可空运到达的营业部信息基础资料中选择；
SR-2	新增/修改界面，时效（小时），根据走货路径的“运输性质”，所选“线路名称”以及“出发站”，“到达站”，由系统自动计算
SR-3	1、	新增/修改线路页面，走货路径可以任意选取运作到运作线路，线路选择框需要区分汽运，空运，偏线3个tab供用户选择；
SR-4	新增/修改线路页面，“出发站”根据所选线路动态获取该线路包含线段所有的出发站，以下拉框显示，默认选中线路的出发站。；“到达站”根据所选线路动态获取该线路包含线段所有的到达站，以下拉框显示，默认选中线路的到达站。；“时效（小时）” 根据走货路径的“运输性质”，所选“线路名称”以及“出发站”，“到达站”，由系统自动计算
SR-5	查询支持模糊查询，条件“出发站”支持手动输入模糊查询，从行政组织（外场、空运总调）基础资料中选择；“到达站”从行政组织（外场）、偏线代理、空运代理网点信息基础资料中选择；“运输性质”默认为全部，包含：精准卡航，精准城运，精准汽运（长途），精准汽运（短途），汽运偏线，精准空运。
SR-6	走货路径的第一段线路的“出发站”必须与走货路径的“出发站”一致，走货路径的最后一段线路的“到达站”必须与走货路径的“到达站”一致，走货路径第n段线路的“出发站”必须与走货路径第n-1段线路的“到达站”一致；
SR-7	走货路径的线路中，选择的“到达站”在线路中的站点位置必须在“出发站”的站点位置之后；
SR-8	新增/修改线路页面，“是否可以打木架”单选按钮，是或否，默认为否，若值为“否”，单选按钮为只读状态，不允许选择“是”；若值为“是”，单选按钮可以选择为“否”；“打木架外场”与“是否可以打木架”联动，若“是否可以打木架”值为“否”，“打木架外场”隐藏；若“是否可以打木架”值为“是”，“打木架外场”显示，下拉框里会把拥有“可以打木架”属性的外场查询出来，默认为第一个具有“可以打木架” 属性的外场；

 * 1.5.3	界面描述-主界面
1.	功能按钮区域
1)	新增按钮：点击新增按钮进入新增界面，参见【图二：走货路径（运作到运作）新增/修改界面】。
2)	查询按钮：输入查询条件，点击查询按钮，系统返回查询结果，刷新查询列表。
3)	重置按钮：点击重置按钮，清空查询条件。
4)	作废按钮：选中列表中一行或多行记录，点击作废按钮，弹出确认提示框，作废时同时把该走货路径包含的线路移除；或点击各行的作废按钮，弹出确认提示框。作废成功后会弹出作废成功的提示框，作废时同时把该走货路径包含的线路移除；若作废失败，弹出作废失败的提示框，并提示失败原因。
5)	查看详细信息：双击该行记录，弹出一个窗口，可以查看该记录的详细信息。
6)	修改按钮：点击各行的修改按钮，进入修改界面，参见【图二：走货路径（运作到运作）新增/修改界面】。
7)	分页按钮：实现分页功能。
2.	列表区域
1)	列表区域默认不显示，点击查询按钮，根据查询条件显示列表数据。
2)	列表中显示：出发站、到达站、运输性质、时效（小时）、是否可以打木架、打木架外场、是否默认走货路径、状态。
3.	字段输入区域
1)	查询条件包括出发站、到达站、运输性质。
1.1	出发站：选择框，支持手动输入模糊查询，也支持从行政组织（外场、空运总调）基础资料中选择；
1.2	到达站：选择框，支持手动输入模糊查询，也支持从行政组织（外场）、偏线代理、空运代理网点机场信息基础资料中选择；
1.3	运输性质：下拉框，包括：全部、取第三级产品类型（精准卡航，精准城运，精准汽运（长途），精准汽运（短途），汽运偏线，精准空运）（整车不可以选，需要排除掉）精准汽运、精准卡航、汽运偏线、精准空运。默认为全部。
1.31.4	状态：下拉框，包括：全部、生效、失效。默认为全部。

1.5.5	界面描述-新增/修改界面
1.	字段输入区域
1)	运输性质： 必填，下拉框，包含取第三级产品类型（精准卡航，精准城运，精准汽运（长途），精准汽运（短途），汽运偏线，精准空运）（整车不可以选，需要排除掉）精准汽运、精准卡航、汽运偏线、精准空运。
2)	出发站：必填，选择框，从行政组织（外场、空运总调）基础资料中选择
3)	到达站：必填，选择框，从行政组织（外场）、偏线代理、机场空运代理网点、可空运到达的营业部信息基础资料中选择
4)	时效（小时）：根据添加的线路时效（小时）+经停时间（小时）计算获取。
5)	是否默认走货路径：选择框，默认选中，该走货路径是否为默认走货路径；
6)	是否可以打木架：必填，单选按钮，是或否，默认为否，若值为“否”，单选按钮为只读状态，不允许选择“是”；若值为“是”，单选按钮可以选择为“否”；
7)	打木架外场：下拉框，默认为不显示；与“是否可以打木架”联动，若“是否可以打木架”值为“否”，“打木架外场”隐藏；若“是否可以打木架”值为“是”，“打木架外场”显示，下拉框里会把拥有“可以打木架”属性的外场查询出来，默认为第一个具有“可以打木架” 属性的外场；
8)	备注：选填，文本
9)	出发站对应营业部：下拉列表，显示所有配置过始发线路到达出发站的营业部与“是否默认走货路径”联动，如果“是否默认走货路径”选中，“出发站对应营业部”为所有不是默认的始发配载部门为“出发站”的营业部；否则，“出发站对应营业部”显示所有始发配载部门为“出发站”的营业部。
10)	出发网点组：下拉列表，列表中显示该“出发网点组”所属的营业部，从“出发站对应营业部”下拉列表中选择；
11)	到达站对应营业部：下拉列表，显示所有配置过到达线路到达该到到达站的营业部与“是否默认走货路径”联动，如果“是否默认走货路径”选中，“到达站对应营业部”显示所有不是默认的到达配载部门为“到达站”的营业部；否则，“到达站对应营业部”显示所有到达配置部门为“到达站”的营业部；
12)	到达网点组：下拉列表，列表中显示该“到达网点组”所属的营业部，从“到达站对应营业部”下拉列表中选择。
13)	网点组列表详见【网点组列表数据】
14)	线路信息列表详见【线路信息列表数据】
2.	功能按钮区域
1)	出发网点组右选（--->）按钮：选中“出发站对应营业部”下拉列表中的营业部，点击右选按钮，选中的营业部会在“出发网点组”下拉列表中显示。
2)	出发网点组右全选（-->>）按钮：点击右全选按钮，“出发站对应营业部”下拉列表中的营业部全部会在“出发网点组”下拉列表中显示。
3)	出发网点组左移（<---）按钮：选中“出发网点组”下拉列表中的营业部，点击左移按钮，选中的营业部会在“出发网点组”下拉列表中清除；
4)	出发网点组左全移（<<--）按钮：点击左全移按钮，“出发网点组”下拉列表中的营业部全部清除；
5)	到达网点组右选（--->）按钮：选中“到达站对应营业部”下拉列表中的营业部，点击右选按钮，选中的营业部会在“到达网点组”下拉列表中显示
6)	到达网点组右全选（-->>）按钮：点击右全选按钮，“到达站对应营业部”下拉列表中的营业部全部会在“到达网点组”下拉列表中显示。
7)	到达网点组左移（<---）按钮：选中“到达网点组”下拉列表中的营业部，点击左移按钮，选中的营业部会在“到达网点组”下拉列表中清除；
8)	到达网点组左全移（<<--）按钮：点击左全移按钮，“到达网点组”下拉列表中的营业部全部清除
9)	添加网点组按钮：点击添加网点组按钮，先判断走货路径信息是否已经保存，如果信息还未保存，弹出提示框，提示需要先保存走货路径信息才能添加线路信息；如果信息已经保存成功，进行添加网点组操作
10)	修改网点组按钮：点击修改网点组按钮，先判断走货路径信息是否已做修改，如果走货路径信息已做修改，弹出提示框，提示先保存走货路径信息才能进行修改网点组操作，则弹出【图三：修改网点组界面】，进行修改网点组操作；
11)	作废网点组按钮：点击作废网点组按钮，先判断走货路径信息是否已做修改，如果走货路径信息已做修改，弹出提示框，提示先保存走货路径信息才能作废网点组操作；
12)	添加线路按钮：点击添加线路按钮，先判断走货路径信息是否已经保存，如果信息还未保存，弹出提示框，提示需要先保存走货路径信息才能添加线路信息；如果信息已经保存成功，则弹出【图四：线路信息新增/修改界面】，进行添加线路操作。
13)	修改线路按钮：点击修改线路按钮，先判断走货路径信息是否已做修改，如果走货路径信息已做修改，弹出提示框，提示先保存走货路径信息才能进行修改线路信息操作，则弹出【图四：线路信息新增/修改界面】，进行修改线路操作。
14)	移除线路按钮：选择要移除的线路，点击移除线路按钮，先判断走货路径信息是否已做修改，如果走货路径信息已做修改，弹出提示框，提示先保存走货路径信息才能移除线路信息。
15)	保存按钮：点击保存按钮，需要提示用户是否保存成功，若保存成功，关闭当前界面，返回主界面；若保存失败，提示用户保存失败以及失败原因，不关闭当前界面
16)	重置按钮：点击重置按钮，回到当前界面的初始状态。
17)	取消按钮：点击取消按钮，如果当前界面数据未保存，提示“界面数据不为空，是否退出”，点击“是”退出当前界面，返回主界面；否则，不关闭当前界面。
17)18)	生效或失效按钮：点击失效按钮，走货路径状态修改为失效状态，失效按钮隐藏，生效按钮显示；点击生效按钮，在后台对业务规则SR-6进行验证，走货路径状态修改为生效状态，生效按钮隐藏，失效按钮显示。

1.5.7	界面描述-修改网点组
1、	字段输入区域
1)	出发站对应营业部：下拉列表，下拉列表中显示所有始发配置部门为“出发站”的营业部
2)	出发网点组：必填，下拉列表，列表中显示该“出发网点组”所属的营业部，从“出发站对应营业部”下拉列表中选择
3)	到达站对应营业部：下拉列表框，下拉列表中显示所有到达配置部门为“到达站”的营业部；
4)	到达网点组：必填，下拉列表，列表中显示该“到达网点组”所属的营业部，从“到达站对应营业部”下拉列表中选择。
2、功能按钮区域
1)	保存按钮：点击保存按钮，需要提示用户是否保存成功，若保存成功，关闭当前界面，返回主界面；若保存失败，提示用户保存失败以及失败原因，不关闭当前界面
2)	重置按钮：点击重置按钮，回到当前界面的初始状态。
3)	取消按钮：点击取消按钮，如果当前界面数据未保存，提示“界面数据不为空，是否退出”，点击“是”退出当前界面，返回主界面；否则，不关闭当前界面；

1.5.9	界面描述-新增/修改线路信息
2、	字段输入区域
5)	序号：必填，数字，该线路在走货路径中所占的顺序
6)	线路名称：必填，选择框，从运作到运作线路信息基础资料中选择，参见业务规则SR-3
7)	线路简码：与“线路名称”联动带出 
8)	出发站：必填，下拉框，根据所选线路动态获取该线路包含线段所有的出发站。默认选中线路的出发站。
9)	到达站：必填，下拉框，根据所选线路动态获取该线路包含线段所有的到达站。默认选中线路的到达站。
10)	时效（小时）：根据走货路径的“运输性质”，所选“线路名称”以及“出发站”，“到达站”，由系统自动计算。
11)	经停时间（小时）：必填，数字，默认为0，单位：小时
2、功能按钮区域
4)	保存按钮：点击保存按钮，需要提示用户是否保存成功，若保存成功，关闭当前界面，返回主界面；若保存失败，提示用户保存失败以及失败原因，不关闭当前界面
5)	重置按钮：点击重置按钮，回到当前界面的初始状态。
6)	取消按钮：点击取消按钮，如果当前界面数据未保存，提示“界面数据不为空，是否退出”，点击“是”退出当前界面，返回主界面；否则，不关闭当前界面。

SR-1	新增/修改界面，若“运输性质”为精准汽运、精准卡航，“出发站”只能从行政组织（外场）基础资料中选择，“到达站”只能从行政组织（外场）基础资料中选择；若“运输性质”为汽运偏线，“出发站”只能从行政组织（外场）基础资料中选择，“到达站”只能从偏线代理基础资料中选择；若“运输性质”为精准空运，“出发站”只能从行政组织（空运总调或外场）基础资料中选择， ，“到达站”只能从空运代理网点或可空运到达的营业部信息基础资料中选择；
SR-2	新增/修改界面，时效（小时），根据走货路径的“运输性质”，所选“线路名称”以及“出发站”，“到达站”，由系统自动计算
SR-3	1、	新增/修改线路页面，走货路径可以任意选取运作到运作线路，线路选择框需要区分汽运，空运，偏线3个tab供用户选择；
SR-4	新增/修改线路页面，“出发站”根据所选线路动态获取该线路包含线段所有的出发站，以下拉框显示，默认选中线路的出发站。；“到达站”根据所选线路动态获取该线路包含线段所有的到达站，以下拉框显示，默认选中线路的到达站。；“时效（小时）” 根据走货路径的“运输性质”，所选“线路名称”以及“出发站”，“到达站”，由系统自动计算
SR-5	查询支持模糊查询，条件“出发站”支持手动输入模糊查询，从行政组织（外场、空运总调）基础资料中选择；“到达站”从行政组织（外场）、偏线代理、空运代理网点信息基础资料中选择；“运输性质”默认为全部，包含：精准卡航，精准城运，精准汽运（长途），精准汽运（短途），汽运偏线，精准空运。
SR-6	走货路径的第一段线路的“出发站”必须与走货路径的“出发站”一致，走货路径的最后一段线路的“到达站”必须与走货路径的“到达站”一致，走货路径第n段线路的“出发站”必须与走货路径第n-1段线路的“到达站”一致；
SR-7	走货路径的线路中，选择的“到达站”在线路中的站点位置必须在“出发站”的站点位置之后；
SR-8	新增/修改线路页面，“是否可以打木架”单选按钮，是或否，默认为否，若值为“否”，单选按钮为只读状态，不允许选择“是”；若值为“是”，单选按钮可以选择为“否”；“打木架外场”与“是否可以打木架”联动，若“是否可以打木架”值为“否”，“打木架外场”隐藏；若“是否可以打木架”值为“是”，“打木架外场”显示，下拉框里会把拥有“可以打木架”属性的外场查询出来，默认为第一个具有“可以打木架” 属性的外场；

 * 1.5.3	界面描述-主界面
1.	功能按钮区域
1)	新增按钮：点击新增按钮进入新增界面，参见【图二：走货路径（运作到运作）新增/修改界面】。
2)	查询按钮：输入查询条件，点击查询按钮，系统返回查询结果，刷新查询列表。
3)	重置按钮：点击重置按钮，清空查询条件。
4)	作废按钮：选中列表中一行或多行记录，点击作废按钮，弹出确认提示框，作废时同时把该走货路径包含的线路移除；或点击各行的作废按钮，弹出确认提示框。作废成功后会弹出作废成功的提示框，作废时同时把该走货路径包含的线路移除；若作废失败，弹出作废失败的提示框，并提示失败原因。
5)	查看详细信息：双击该行记录，弹出一个窗口，可以查看该记录的详细信息。
6)	修改按钮：点击各行的修改按钮，进入修改界面，参见【图二：走货路径（运作到运作）新增/修改界面】。
7)	分页按钮：实现分页功能。
2.	列表区域
1)	列表区域默认不显示，点击查询按钮，根据查询条件显示列表数据。
2)	列表中显示：出发站、到达站、运输性质、时效（小时）、是否可以打木架、打木架外场、是否默认走货路径、状态。
3.	字段输入区域
1)	查询条件包括出发站、到达站、运输性质。
1.1	出发站：选择框，支持手动输入模糊查询，也支持从行政组织（外场、空运总调）基础资料中选择；
1.2	到达站：选择框，支持手动输入模糊查询，也支持从行政组织（外场）、偏线代理、空运代理网点机场信息基础资料中选择；
1.3	运输性质：下拉框，包括：全部、取第三级产品类型（精准卡航，精准城运，精准汽运（长途），精准汽运（短途），汽运偏线，精准空运）（整车不可以选，需要排除掉）精准汽运、精准卡航、汽运偏线、精准空运。默认为全部。
1.31.4	状态：下拉框，包括：全部、生效、失效。默认为全部。

1.5.5	界面描述-新增/修改界面
1.	字段输入区域
1)	运输性质： 必填，下拉框，包含取第三级产品类型（精准卡航，精准城运，精准汽运（长途），精准汽运（短途），汽运偏线，精准空运）（整车不可以选，需要排除掉）精准汽运、精准卡航、汽运偏线、精准空运。
2)	出发站：必填，选择框，从行政组织（外场、空运总调）基础资料中选择
3)	到达站：必填，选择框，从行政组织（外场）、偏线代理、机场空运代理网点、可空运到达的营业部信息基础资料中选择
4)	时效（小时）：根据添加的线路时效（小时）+经停时间（小时）计算获取。
5)	是否默认走货路径：选择框，默认选中，该走货路径是否为默认走货路径；
6)	是否可以打木架：必填，单选按钮，是或否，默认为否，若值为“否”，单选按钮为只读状态，不允许选择“是”；若值为“是”，单选按钮可以选择为“否”；
7)	打木架外场：下拉框，默认为不显示；与“是否可以打木架”联动，若“是否可以打木架”值为“否”，“打木架外场”隐藏；若“是否可以打木架”值为“是”，“打木架外场”显示，下拉框里会把拥有“可以打木架”属性的外场查询出来，默认为第一个具有“可以打木架” 属性的外场；
8)	备注：选填，文本
9)	出发站对应营业部：下拉列表，显示所有配置过始发线路到达出发站的营业部与“是否默认走货路径”联动，如果“是否默认走货路径”选中，“出发站对应营业部”为所有不是默认的始发配载部门为“出发站”的营业部；否则，“出发站对应营业部”显示所有始发配载部门为“出发站”的营业部。
10)	出发网点组：下拉列表，列表中显示该“出发网点组”所属的营业部，从“出发站对应营业部”下拉列表中选择；
11)	到达站对应营业部：下拉列表，显示所有配置过到达线路到达该到到达站的营业部与“是否默认走货路径”联动，如果“是否默认走货路径”选中，“到达站对应营业部”显示所有不是默认的到达配载部门为“到达站”的营业部；否则，“到达站对应营业部”显示所有到达配置部门为“到达站”的营业部；
12)	到达网点组：下拉列表，列表中显示该“到达网点组”所属的营业部，从“到达站对应营业部”下拉列表中选择。
13)	网点组列表详见【网点组列表数据】
14)	线路信息列表详见【线路信息列表数据】
2.	功能按钮区域
1)	出发网点组右选（--->）按钮：选中“出发站对应营业部”下拉列表中的营业部，点击右选按钮，选中的营业部会在“出发网点组”下拉列表中显示。
2)	出发网点组右全选（-->>）按钮：点击右全选按钮，“出发站对应营业部”下拉列表中的营业部全部会在“出发网点组”下拉列表中显示。
3)	出发网点组左移（<---）按钮：选中“出发网点组”下拉列表中的营业部，点击左移按钮，选中的营业部会在“出发网点组”下拉列表中清除；
4)	出发网点组左全移（<<--）按钮：点击左全移按钮，“出发网点组”下拉列表中的营业部全部清除；
5)	到达网点组右选（--->）按钮：选中“到达站对应营业部”下拉列表中的营业部，点击右选按钮，选中的营业部会在“到达网点组”下拉列表中显示
6)	到达网点组右全选（-->>）按钮：点击右全选按钮，“到达站对应营业部”下拉列表中的营业部全部会在“到达网点组”下拉列表中显示。
7)	到达网点组左移（<---）按钮：选中“到达网点组”下拉列表中的营业部，点击左移按钮，选中的营业部会在“到达网点组”下拉列表中清除；
8)	到达网点组左全移（<<--）按钮：点击左全移按钮，“到达网点组”下拉列表中的营业部全部清除
9)	添加网点组按钮：点击添加网点组按钮，先判断走货路径信息是否已经保存，如果信息还未保存，弹出提示框，提示需要先保存走货路径信息才能添加线路信息；如果信息已经保存成功，进行添加网点组操作
10)	修改网点组按钮：点击修改网点组按钮，先判断走货路径信息是否已做修改，如果走货路径信息已做修改，弹出提示框，提示先保存走货路径信息才能进行修改网点组操作，则弹出【图三：修改网点组界面】，进行修改网点组操作；
11)	作废网点组按钮：点击作废网点组按钮，先判断走货路径信息是否已做修改，如果走货路径信息已做修改，弹出提示框，提示先保存走货路径信息才能作废网点组操作；
12)	添加线路按钮：点击添加线路按钮，先判断走货路径信息是否已经保存，如果信息还未保存，弹出提示框，提示需要先保存走货路径信息才能添加线路信息；如果信息已经保存成功，则弹出【图四：线路信息新增/修改界面】，进行添加线路操作。
13)	修改线路按钮：点击修改线路按钮，先判断走货路径信息是否已做修改，如果走货路径信息已做修改，弹出提示框，提示先保存走货路径信息才能进行修改线路信息操作，则弹出【图四：线路信息新增/修改界面】，进行修改线路操作。
14)	移除线路按钮：选择要移除的线路，点击移除线路按钮，先判断走货路径信息是否已做修改，如果走货路径信息已做修改，弹出提示框，提示先保存走货路径信息才能移除线路信息。
15)	保存按钮：点击保存按钮，需要提示用户是否保存成功，若保存成功，关闭当前界面，返回主界面；若保存失败，提示用户保存失败以及失败原因，不关闭当前界面
16)	重置按钮：点击重置按钮，回到当前界面的初始状态。
17)	取消按钮：点击取消按钮，如果当前界面数据未保存，提示“界面数据不为空，是否退出”，点击“是”退出当前界面，返回主界面；否则，不关闭当前界面。
17)18)	生效或失效按钮：点击失效按钮，走货路径状态修改为失效状态，失效按钮隐藏，生效按钮显示；点击生效按钮，在后台对业务规则SR-6进行验证，走货路径状态修改为生效状态，生效按钮隐藏，失效按钮显示。

1.5.7	界面描述-修改网点组
1、	字段输入区域
1)	出发站对应营业部：下拉列表，下拉列表中显示所有始发配置部门为“出发站”的营业部
2)	出发网点组：必填，下拉列表，列表中显示该“出发网点组”所属的营业部，从“出发站对应营业部”下拉列表中选择
3)	到达站对应营业部：下拉列表框，下拉列表中显示所有到达配置部门为“到达站”的营业部；
4)	到达网点组：必填，下拉列表，列表中显示该“到达网点组”所属的营业部，从“到达站对应营业部”下拉列表中选择。
2、功能按钮区域
1)	保存按钮：点击保存按钮，需要提示用户是否保存成功，若保存成功，关闭当前界面，返回主界面；若保存失败，提示用户保存失败以及失败原因，不关闭当前界面
2)	重置按钮：点击重置按钮，回到当前界面的初始状态。
3)	取消按钮：点击取消按钮，如果当前界面数据未保存，提示“界面数据不为空，是否退出”，点击“是”退出当前界面，返回主界面；否则，不关闭当前界面；

1.5.9	界面描述-新增/修改线路信息
2、	字段输入区域
5)	序号：必填，数字，该线路在走货路径中所占的顺序
6)	线路名称：必填，选择框，从运作到运作线路信息基础资料中选择，参见业务规则SR-3
7)	线路简码：与“线路名称”联动带出 
8)	出发站：必填，下拉框，根据所选线路动态获取该线路包含线段所有的出发站。默认选中线路的出发站。
9)	到达站：必填，下拉框，根据所选线路动态获取该线路包含线段所有的到达站。默认选中线路的到达站。
10)	时效（小时）：根据走货路径的“运输性质”，所选“线路名称”以及“出发站”，“到达站”，由系统自动计算。
11)	经停时间（小时）：必填，数字，默认为0，单位：小时
2、功能按钮区域
4)	保存按钮：点击保存按钮，需要提示用户是否保存成功，若保存成功，关闭当前界面，返回主界面；若保存失败，提示用户保存失败以及失败原因，不关闭当前界面
5)	重置按钮：点击重置按钮，回到当前界面的初始状态。
6)	取消按钮：点击取消按钮，如果当前界面数据未保存，提示“界面数据不为空，是否退出”，点击“是”退出当前界面，返回主界面；否则，不关闭当前界面。

SR-1	新增/修改界面，若“运输性质”为精准汽运、精准卡航，“出发站”只能从行政组织（外场）基础资料中选择，“到达站”只能从行政组织（外场）基础资料中选择；若“运输性质”为汽运偏线，“出发站”只能从行政组织（外场）基础资料中选择，“到达站”只能从偏线代理基础资料中选择；若“运输性质”为精准空运，“出发站”只能从行政组织（空运总调或外场）基础资料中选择， ，“到达站”只能从空运代理网点或可空运到达的营业部信息基础资料中选择；
SR-2	新增/修改界面，时效（小时），根据走货路径的“运输性质”，所选“线路名称”以及“出发站”，“到达站”，由系统自动计算
SR-3	1、	新增/修改线路页面，走货路径可以任意选取运作到运作线路，线路选择框需要区分汽运，空运，偏线3个tab供用户选择；
SR-4	新增/修改线路页面，“出发站”根据所选线路动态获取该线路包含线段所有的出发站，以下拉框显示，默认选中线路的出发站。；“到达站”根据所选线路动态获取该线路包含线段所有的到达站，以下拉框显示，默认选中线路的到达站。；“时效（小时）” 根据走货路径的“运输性质”，所选“线路名称”以及“出发站”，“到达站”，由系统自动计算
SR-5	查询支持模糊查询，条件“出发站”支持手动输入模糊查询，从行政组织（外场、空运总调）基础资料中选择；“到达站”从行政组织（外场）、偏线代理、空运代理网点信息基础资料中选择；“运输性质”默认为全部，包含：精准卡航，精准城运，精准汽运（长途），精准汽运（短途），汽运偏线，精准空运。
SR-6	走货路径的第一段线路的“出发站”必须与走货路径的“出发站”一致，走货路径的最后一段线路的“到达站”必须与走货路径的“到达站”一致，走货路径第n段线路的“出发站”必须与走货路径第n-1段线路的“到达站”一致；
SR-7	走货路径的线路中，选择的“到达站”在线路中的站点位置必须在“出发站”的站点位置之后；
SR-8	新增/修改线路页面，“是否可以打木架”单选按钮，是或否，默认为否，若值为“否”，单选按钮为只读状态，不允许选择“是”；若值为“是”，单选按钮可以选择为“否”；“打木架外场”与“是否可以打木架”联动，若“是否可以打木架”值为“否”，“打木架外场”隐藏；若“是否可以打木架”值为“是”，“打木架外场”显示，下拉框里会把拥有“可以打木架”属性的外场查询出来，默认为第一个具有“可以打木架” 属性的外场；


 */
package com.deppon.foss.module.base.baseinfo.server.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.collections.MapUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.transaction.annotation.Transactional;
import com.deppon.foss.base.util.define.NumberConstants;
import com.deppon.foss.framework.cache.CacheManager;
import com.deppon.foss.framework.cache.ICache;
import com.deppon.foss.module.base.baseinfo.api.server.dao.IFreightRouteDao;
import com.deppon.foss.module.base.baseinfo.api.server.dao.IFreightRouteLineDao;
import com.deppon.foss.module.base.baseinfo.api.server.service.IFreightRouteLineService;
import com.deppon.foss.module.base.baseinfo.api.server.service.IFreightRouteService;
import com.deppon.foss.module.base.baseinfo.api.server.service.ILineService;
import com.deppon.foss.module.base.baseinfo.api.server.service.IOrgAdministrativeInfoService;
import com.deppon.foss.module.base.baseinfo.api.server.service.esb.ISendFreightRouteInfoToWDGHService;
import com.deppon.foss.module.base.baseinfo.api.server.service.esb.ISendFreightRouteLineInfoToWDGHService;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.FreightRouteEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.FreightRouteLineEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.LineEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.dto.LineStationsDto;
import com.deppon.foss.module.base.baseinfo.api.shared.exception.LineException;
import com.deppon.foss.util.common.FossTTLCache;
import com.deppon.foss.util.define.FossConstants;

/**
 * 
 * 走货路径线路服务类
 * @author foss-zhujunyong
 * @date Nov 6, 2012 5:49:03 PM
 * @version 1.0
 */
public class FreightRouteLineService implements IFreightRouteLineService {

	/**
     * 日志类
     */
    private static final Logger log = Logger.getLogger(FreightRouteLineService.class);

    /**
     * 
     * freightRouteLineDao
     */
   
    private IFreightRouteLineDao freightRouteLineDao;
    /**
     * 
     * lineService
     */
   
    private ILineService lineService;
    /**
     * 
     * orgAdministrativeInfoService
     */
    
    private IOrgAdministrativeInfoService orgAdministrativeInfoService;

    /**
     * 
     * freightRouteService
     */
    
    private IFreightRouteService freightRouteService;
    /**
     * 
     * sendFreightRouteLineInfoToWDGHService
     */
   
    private ISendFreightRouteLineInfoToWDGHService sendFreightRouteLineInfoToWDGHService;
    /**
     * 
     * sendFreightRouteInfoToWDGHService
     */
    
    private ISendFreightRouteInfoToWDGHService sendFreightRouteInfoToWDGHService;
    /**
     * 
     * freightRouteDao
     */
    
    private IFreightRouteDao freightRouteDao;
    
    /**
     * 
     * @author foss-zhujunyong
     * @date Mar 13, 2013 10:16:34 AM
     * @param freightRouteService
     * @see
     */
    public void setFreightRouteService(IFreightRouteService freightRouteService) {
        this.freightRouteService = freightRouteService;
    }

    /**
     * 
     * @author foss-zhujunyong
     * @date Mar 6, 2013 9:43:24 AM
     * @param orgAdministrativeInfoService
     * @see
     */
    public void setOrgAdministrativeInfoService(
    	IOrgAdministrativeInfoService orgAdministrativeInfoService) {
        this.orgAdministrativeInfoService = orgAdministrativeInfoService;
    }

    /**
     * 
     * @author foss-zhujunyong
     * @date Mar 6, 2013 9:43:32 AM
     * @param lineService
     * @see
     */
    public void setLineService(ILineService lineService) {
        this.lineService = lineService;
    }

    /**
     * 
     * @author foss-zhujunyong
     * @date Mar 6, 2013 9:43:37 AM
     * @param freightRouteLineDao
     * @see
     */
    public void setFreightRouteLineDao(IFreightRouteLineDao freightRouteLineDao) {
        this.freightRouteLineDao = freightRouteLineDao;
    }

    /**
     * 
     * @author foss-qirongsheng
     * @date Mar 24, 2016 5:37:32 PM
     * @param sendFreightRouteLineInfoToWDGHService
     * @see
     */
	public void setSendFreightRouteLineInfoToWDGHService(
			ISendFreightRouteLineInfoToWDGHService sendFreightRouteLineInfoToWDGHService) {
		this.sendFreightRouteLineInfoToWDGHService = sendFreightRouteLineInfoToWDGHService;
	}

	   /**
     * 
     * @author foss-qirongsheng
     * @date Mar 24, 2016 5:37:32 PM
     * @param sendFreightRouteInfoToWDGHService
     * @see
     */
	public void setSendFreightRouteInfoToWDGHService(
			ISendFreightRouteInfoToWDGHService sendFreightRouteInfoToWDGHService) {
		this.sendFreightRouteInfoToWDGHService = sendFreightRouteInfoToWDGHService;
	}

	public void setFreightRouteDao(IFreightRouteDao freightRouteDao) {
		this.freightRouteDao = freightRouteDao;
	}

    /**
     * 
     * <p>添加走货路径线路</p> 
     * @author foss-zhujunyong
     * @date Oct 25, 2012 11:32:15 AM
     * @param freightRouteLine
     * @return
     * @see
     */
    @Override
    //@Transactional
    public FreightRouteLineEntity addFreightRouteLine(
	    FreightRouteLineEntity freightRouteLine) {
	validateSourceTargetOrder(freightRouteLine);
	FreightRouteLineEntity entity = freightRouteLineDao.addFreightRouteLine(freightRouteLine);

	//同步走货路径线路信息到WDGH
	List<FreightRouteLineEntity> frllist = new ArrayList<FreightRouteLineEntity>();
	frllist.add(entity);
	syncFreightRouteLineToWDGH(frllist,NumberConstants.ONE);
	
	// 更新走货路径时效
	freightRouteLineDao.updateFreightRouteAging(freightRouteLine);
	FreightRouteEntity frEntity = freightRouteDao.queryFreightRouteByVirtualCode(freightRouteLine.getFreightRouteVirtualCode());
	//同步走货路径时效信息到WDGH
	List<FreightRouteEntity> frlist = new ArrayList<FreightRouteEntity>();
	frlist.add(frEntity);
	syncFreightRouteToWDGH(frlist,NumberConstants.TWO);
	
	// 清空走货路径缓存
	freightRouteService.invalidEntity(freightRouteLine.getFreightRouteVirtualCode());
	invalidList(freightRouteLine.getFreightRouteVirtualCode());
	
	return enhanceFreightRouteLine(entity);
    }

	/**
     * 
     * <p>作废走货路径线路</p> 
     * @author foss-zhujunyong
     * @date Oct 25, 2012 11:32:30 AM
     * @param freightRouteLine
     * @return
     * @see
     */
    @Override
    //@Transactional
    public FreightRouteLineEntity deleteFreightRouteLine(
	    FreightRouteLineEntity freightRouteLine) {
    //按id作废走货路径线路	
    FreightRouteLineEntity entity = freightRouteLineDao.deleteFreightRouteLine(freightRouteLine);
	if (entity != null) {
	    invalidList(freightRouteLine.getFreightRouteVirtualCode());
	    // 清空走货路径缓存
	    freightRouteService.invalidEntity(freightRouteLine.getFreightRouteVirtualCode());
		
	    FreightRouteLineEntity frlEntity = queryFreightRouteLineById(freightRouteLine.getId());
		if(null != frlEntity){
			List<FreightRouteLineEntity> frlist = new ArrayList<FreightRouteLineEntity>();
			frlEntity.setActive(entity.getActive());
			frlEntity.setModifyDate(entity.getModifyDate());
			frlEntity.setModifyUser(entity.getModifyUser());
			frlEntity.setVersion(entity.getVersion());
			frlist.add(frlEntity);
			//同步作废走货路径线路到WDGH
			syncFreightRouteLineToWDGH(frlist, NumberConstants.THREE);
			}	
	}
	return entity;
    }

    /**
     * 
     * <p>更新走货路径线路</p> 
     * @author foss-zhujunyong
     * @date Oct 25, 2012 11:32:46 AM
     * @param freightRouteLine
     * @return
     * @see
     */
    @Override
    @Transactional
    public FreightRouteLineEntity updateFreightRouteLine(
	    FreightRouteLineEntity freightRouteLine) {
	validateSourceTargetOrder(freightRouteLine);
	
	//dao层同步了走货路径时效
	FreightRouteLineEntity entity = freightRouteLineDao.updateFreightRouteLine(freightRouteLine);
	
	// 更新走货路径时效 
	freightRouteLineDao.updateFreightRouteAging(entity);
	FreightRouteEntity frEntity = freightRouteDao.queryFreightRouteByVirtualCode(entity.getFreightRouteVirtualCode());
	//同步走货路径时效到WDGH
	List<FreightRouteEntity> frlist = new ArrayList<FreightRouteEntity>();
	frlist.add(frEntity);
	syncFreightRouteToWDGH(frlist,NumberConstants.TWO);
	
	invalidList(freightRouteLine.getFreightRouteVirtualCode());
	// 清空走货路径缓存
	freightRouteService.invalidEntity(freightRouteLine.getFreightRouteVirtualCode());

	//同步更新走货路径线路到WDGH
	List<FreightRouteLineEntity> frllist = new ArrayList<FreightRouteLineEntity>();
	frllist.add(entity);
	syncFreightRouteLineToWDGH(frllist, NumberConstants.TWO);
	return enhanceFreightRouteLine(entity);
    }

    
    /**
     * 
     * <p>根据ID查询走货路径线路</p> 
     * @author foss-zhujunyong
     * @date Oct 25, 2012 11:33:00 AM
     * @param id
     * @return
     * @see
     */
    @Override
    public FreightRouteLineEntity queryFreightRouteLineById(String id) {
	return enhanceFreightRouteLine(freightRouteLineDao.queryFreightRouteLineById(id));
    }

    /**
     * 
     * <p>查询特定走货路径下的所有走货路径线路</p> 
     * @author foss-zhujunyong
     * @date Nov 6, 2012 6:20:14 PM
     * @return
     * @see
     */
    @Override
    public List<FreightRouteLineEntity> queryFreightRouteLineListByFreightRoute(String freightRouteVirtualCode) {
	return enhanceFreightRouteLineList(querySimpleFreightRouteLineListByFreightRoute(freightRouteVirtualCode));
    }
    
    /**
     * 
     * <p>查询特定走货路径下的所有走货路径线路,不包括冗余属性</p> 
     * @author foss-zhujunyong
     * @date Nov 6, 2012 6:20:14 PM
     * @return
     * @see
     */
    @Override
    public List<FreightRouteLineEntity> querySimpleFreightRouteLineListByFreightRoute(String freightRouteVirtualCode) {
	if (StringUtils.isBlank(freightRouteVirtualCode)) {
	    return new ArrayList<FreightRouteLineEntity>();
	}
	
	// 查询缓存
	List<FreightRouteLineEntity> resultList = queryListCache(freightRouteVirtualCode);
	// 缓存中找不到就到数据库中找
	if (CollectionUtils.isEmpty(resultList)) {
	    FreightRouteLineEntity c = new FreightRouteLineEntity();
	    c.setFreightRouteVirtualCode(freightRouteVirtualCode);
	    resultList = freightRouteLineDao.queryFreightRouteLineListByFreightRoute(c);
	}
	// 保证返回值不为null
	if (resultList == null) {
	    resultList = new ArrayList<FreightRouteLineEntity>();
	}
	return resultList;
    }
    

    /**
     * 
     * <p>根据走货路径批量作废走货路径线路</p> 
     * @author foss-zhujunyong
     * @date Nov 13, 2012 10:49:34 AM
     * @param freightRouteVirtualCode
     * @param modifyUser
     * @return
     * @see
     */
    @Override
    public int deleteFreightRouteLineByFreightRoute(String freightRouteVirtualCode, String modifyUser) {
	// 检查参数
	if (StringUtils.isBlank(freightRouteVirtualCode) || StringUtils.isBlank(modifyUser)) {
	    return FossConstants.FAILURE;
	}
	int result = freightRouteLineDao.deleteFreightRouteLineByFreightRoute(freightRouteVirtualCode, modifyUser);
	if (result > 0) {
	    invalidList(freightRouteVirtualCode);
	    // 清空走货路径缓存
	    freightRouteService.invalidEntity(freightRouteVirtualCode);
	}
	return result;
    }
    
    /**
     * 
     * <p>批量填充线路名称，线路简码和出发站到达站名称</p> 
     * @author foss-zhujunyong
     * @date Mar 6, 2013 9:45:11 AM
     * @param list
     * @return
     * @see
     */
    private List<FreightRouteLineEntity> enhanceFreightRouteLineList(List<FreightRouteLineEntity> list) {
	// 检查参数
	if (CollectionUtils.isEmpty(list)) {
	    return new ArrayList<FreightRouteLineEntity> ();
	}
	for (FreightRouteLineEntity freightRouteLine : list) {
	    enhanceFreightRouteLine(freightRouteLine);
	}
	return list;
    }
    
    
    /**
     * 
     * <p>填充线路名称，线路简码和出发站到达站名称</p> 
     * @author foss-zhujunyong
     * @date Mar 6, 2013 9:45:28 AM
     * @param freightRouteLine
     * @return
     * @see
     */
    private FreightRouteLineEntity enhanceFreightRouteLine(FreightRouteLineEntity freightRouteLine) {
	// 检查参数
	if (freightRouteLine == null) {
	    return null;
	}
	// 填充线路名称
	if (StringUtils.isBlank(freightRouteLine.getLineName())) {
	    LineEntity line = lineService.queryLineByVirtualCode(freightRouteLine.getLineVirtualCode());
	    if (line != null) {
		freightRouteLine.setLineName(line.getLineName());
		freightRouteLine.setSimpleCode(line.getSimpleCode());
	    }
	}
	// 填充出发部门名称
	if (StringUtils.isBlank(freightRouteLine.getOrginalOrganizationName())) {
	    freightRouteLine.setOrginalOrganizationName(orgAdministrativeInfoService.queryCommonNameByCommonCode(freightRouteLine.getOrginalOrganizationCode()));
	}
	// 填充到达部门名称
	if (StringUtils.isBlank(freightRouteLine.getDestinationOrganizationName())) {
	    freightRouteLine.setDestinationOrganizationName(orgAdministrativeInfoService.queryCommonNameByCommonCode(freightRouteLine.getDestinationOrganizationCode()));
	}
	return freightRouteLine;
    }


    /**
     * 
     * <p>根据线路虚拟编码找出关联的走货路径线路，并按走货路径分组</p> 
     * @author foss-zhujunyong
     * @date Jan 21, 2013 3:29:10 PM
     * @param lineVirtualCode
     * @return Map<String, List<FreightRouteLineEntity>> key为走货路径虚拟编码，value为该走货路径用到的线路
     * @see
     */
    @Override
    public Map<String, List<FreightRouteLineEntity>> queryFreightRouteLineMapByLineVirtualCode(String lineVirtualCode) {
	Map<String, List<FreightRouteLineEntity>> result = new HashMap<String, List<FreightRouteLineEntity>>();
	// 检查参数
	if (StringUtils.isBlank(lineVirtualCode)) {
	    return result;
	}
	List<FreightRouteLineEntity> routeLineList = freightRouteLineDao.queryFreightRouteLineListByLine(lineVirtualCode);
	if (CollectionUtils.isEmpty(routeLineList)) {
	    return result;
	}
	for (FreightRouteLineEntity routeLine : routeLineList) {
	    if (result.get(routeLine.getFreightRouteVirtualCode()) == null ) {
		result.put(routeLine.getFreightRouteVirtualCode(), new ArrayList<FreightRouteLineEntity>());
	    }
	    result.get(routeLine.getFreightRouteVirtualCode()).add(routeLine);
	}
	return result;
    }

    /**
     * 
     * <p>验证先后走货路径线路的顺序，出发站不能在到达站之后</p> 
     * @author foss-zhujunyong
     * @date Mar 6, 2013 9:50:12 AM
     * @param freightRouteLine
     * @see
     */
    @Override
    public void validateSourceTargetOrder(FreightRouteLineEntity freightRouteLine) {
	if (freightRouteLine == null) {
	    return;
	}
	// 取出站点map做验证
	LineStationsDto stations = lineService.queryLineStations(freightRouteLine.getLineVirtualCode());
	if (stations == null) {
	    return;
	}
	Map<String, String> stationMap = stations.getStationMap();
	if (MapUtils.isEmpty(stationMap)) {
	    return;
	}
	// 取出发站和到达站
	String sourceCode = freightRouteLine.getOrginalOrganizationCode();
	String targetCode = freightRouteLine.getDestinationOrganizationCode();
	
	// 验证先后走货路径线路的顺序，出发站不能在到达站之后
	List<String> codeList = new ArrayList<String>();
	codeList.addAll(stationMap.keySet());
	int s = codeList.indexOf(sourceCode);
	int t = codeList.indexOf(targetCode);
	if (s < 0 || t < 0 || t <= s) {
	    String freightRouteVirtualCode = freightRouteLine.getFreightRouteVirtualCode();
	    FreightRouteEntity freightRoute = freightRouteService.queryFreightRouteByVirtualCode(freightRouteVirtualCode);
	    String sourceName = freightRoute.getOrginalOrganizationName();
	    String targetName = freightRoute.getDestinationOrganizationName();
	    throw new LineException(LineException.LINE_SITE_MUST_BY_ORDER, sourceName, targetName, freightRoute.getTransType());
	}
	
    }
    
    /**
     * 
     * <p>清空指定key的缓存列表</p> 
     * @author foss-zhujunyong
     * @date Mar 6, 2013 9:50:24 AM
     * @param key
     * @see
     */
    @Override
    @SuppressWarnings("unchecked")
    public void invalidList(String key) {
	((ICache<String, List<FreightRouteLineEntity>>)CacheManager.getInstance().getCache(FossTTLCache.FREIGHTROUTELINE_LIST_CACHE_UUID)).invalid(key);
    }

    /**
     * 
     * <p>取缓存中的数据</p> 
     * @author foss-zhujunyong
     * @date Mar 6, 2013 9:50:49 AM
     * @param key
     * @return
     * @see
     */
    @SuppressWarnings({ "unchecked", "rawtypes" })
    private List<FreightRouteLineEntity> queryListCache(String key) {
	List<FreightRouteLineEntity> resultList = new ArrayList<FreightRouteLineEntity>();
	try {
	    CacheManager cacheManager = CacheManager.getInstance();
	    if (cacheManager == null) {
		return resultList;
	    }
	    ICache cache = cacheManager.getCache(FossTTLCache.FREIGHTROUTELINE_LIST_CACHE_UUID);
	    if (cache == null) {
		return resultList;
	    }
	    resultList = (List<FreightRouteLineEntity>) cache.get(key);
	} catch (Exception t) {
	    log.error("cache找不到", t);
	}
	return resultList;
    }
    
	/**
     *<p>同步给网点规划</p>
     *@author 269231 -qirongsheng
     *@date 2016-3-24 下午5:28:35
     *@param freightRouteEntity
     *@param type
     */
    private void syncFreightRouteToWDGH(List<FreightRouteEntity> freightRouteEntity,
			Integer type) {
    	if(null !=freightRouteEntity){
        	//同步接口
        	sendFreightRouteInfoToWDGHService.syncFreightRouteInfo(freightRouteEntity, type.toString());
    	}				
	}

	/**
     *<p>同步给网点规划</p>
     *@author 269231 -qirongsheng
     *@date 2016-3-24 下午5:12:41
     *@param freightRouteLine
     *@param type
     */
    private void syncFreightRouteLineToWDGH(List<FreightRouteLineEntity> freightRouteLine,
			Integer type) {
    	if(null !=freightRouteLine){
        	//同步接口
        	sendFreightRouteLineInfoToWDGHService.syncFreightRouteLineInfo(freightRouteLine, type.toString());
    	}		
	} 
}
