/*******************************************************************************
 * Copyright 2013 BSE TEAM
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *    http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * PROJECT NAME	: bse-baseinfo
 * 
 * FILE PATH        	: src/main/java/com/deppon/foss/module/base/baseinfo/server/service/impl/OrgAdministrativeInfoService.java
 * 
 * FILE NAME        	: OrgAdministrativeInfoService.java
 * 
 * AUTHOR			: FOSS综合管理开发组
 * 
 * HOME PAGE		:  http://www.deppon.com
 * 
 * COPYRIGHT		: Copyright (c) 2013  Deppon All Rights Reserved.
 ******************************************************************************/
/*
 * Copyright by Deppon and the original author or authors.
 * 
 * This document only allow internal use ,Any of your behaviors using the file
 * not internal will pay legal responsibility.
 *
 * You may learn more information about Deppon from
 *
 *      http://www.deppon.com
 *
 */
/**
 * 1.5.3	界面描述-主界面
 1.	功能按钮区域
 1)	查询按钮：输入查询条件，点击查询按钮，系统返回查询结果，刷新查询列表。
 2)	查看详细信息：点击树形结构中的组织名称，在树型结构的右边显示这个组织的详情，参见【图三：行政组织业务属性详情界面】。
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性查询条件】。
 3.	树型结构区域
 1)	树型结构展示了行政组织的名称，点击树型结构中的部门名称，在右边显示这个部门的业务属性详情。
 2)	点击树形结构的“+”，在组织树中展开该行政组织下一级的所有行政组织。点击树形结构的“-”，则收起该行政组织下一级的所有行政组织。

 1.5.5	界面描述-行政组织业务属性修改界面
 1.	功能按钮区域
 1)	保存按钮：点击保存按钮，若保存成功，提示保存成功，返回上一级界面，若保存失败，提示用户保存失败的原因，停留在当前界面。
 2)	右全移按钮：点击右全移按钮，将左框中的数据全部移到右框。
 3)	右移按钮：从左框中选择一条数据，点击右移按钮，将左框选中的数据移到右框。
 4)	左移按钮：从右框中选择一条数据，点击左移按钮，将右框选中的数据移到左框。
 5)	左全移按钮：点击左全移按钮，将右框中的数据全部移到左框。
 6)	重置按钮：点击重置按钮，恢复行政组织业务属性的初始状态。
 7)	取消按钮：点击取消按钮，退出当前界面，返回主界面。
 8)	编辑部门电子地图按钮：点击编辑部门电子地图按钮，进入“编辑部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 9)	编辑自提区域电子地图按钮：点击编辑自提区域电子地图按钮，进入“编辑自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 10)	编辑派送区域电子地图按钮：点击编辑派送区域电子地图按钮，进入“编辑派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】,【提货信息】,【外场信息】,【调度组信息】，【车队信息】，【车队组信息】，【事业部信息】。

 1.5.7	界面描述-行政组织业务属性详情界面
 2.	功能按钮区域
 1)	修改按钮：点击修改按钮，进入修改界面，参见【图二：行政组织业务属性修改界面】。
 2)	查看部门电子地图按钮：点击查看部门电子地图按钮，进入“查看部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3)	查看自提区域电子地图按钮：点击查看自提区域电子地图按钮，进入“查看自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 4)	查看派送区域电子地图按钮：点击查看派送区域电子地图按钮，进入“查看派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】，【提货信息】，【外场信息】，【调度组信息】，【车队信息】，【车队组信息】，【车队信息】，【部门基本信息】。

 SR-1	选择省份信息后，城市的选择范围自动变成已选省份所包含的城市。选择城市信息后，区县的选择范围自动变成已选城市所包含的区县。
 SR-2	只有选择了“是否营业部”，界面才能修改或者显示营业部信息。
 SR-3	只有选择了“可到达”，界面才能修改或者显示提货信息，到达适用产品。
 SR-4	只有选择了“是否外场”，界面才能修改或者显示外场信息。
 SR-5	只有选择了“是否车队调度组”，界面才能修改或者显示调度组信息。
 SR-6	只有选择了“可自提”，界面才能修改或者显示“自提区域描述”。
 SR-7	只有选择了“可派送”，界面才能修改或者显示“派送区域描述”。
 SR-8	只有选择了“可出发”，界面才能修改或者显示“车队”,“出发适用产品”，“所属集中开单组”。
 SR-9	外场简码,外场编码均不可重复。如果录入的已存在，提示用户已存在。
 SR-10	只有选择了“是否车队”，界面才能修改或者显示车队信息。
 SR-11	只有选择了“是否车队组”，界面才能修改或者显示车队组信息。
 SR-12	在一个事业部内，集中接送货车队编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-13	只有选择了“是否驻地部门”，界面才能修改或者显示“驻地营业部所属外场”。
 SR-14	只有选择了“是否事业部”，界面才能修改或者显示“事业部信息”。
 SR-15	事业部编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-16	最大临时欠款额度的不是人工维护，是动态变化的，根据前3个月的最高收入所在等级决定。
 SR-17	外场的部门面积要大于货区面积，外场的货区面积要大于货台面积。如果用户填写的值不满足此规则，则提示用户。
 SR-18	当有客户在某部门开临欠时，此部门的已用临欠额度做相应的更新。

 * 1.5.3	界面描述-主界面
 1.	功能按钮区域
 1)	查询按钮：输入查询条件，点击查询按钮，系统返回查询结果，刷新查询列表。
 2)	查看详细信息：点击树形结构中的组织名称，在树型结构的右边显示这个组织的详情，参见【图三：行政组织业务属性详情界面】。
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性查询条件】。
 3.	树型结构区域
 1)	树型结构展示了行政组织的名称，点击树型结构中的部门名称，在右边显示这个部门的业务属性详情。
 2)	点击树形结构的“+”，在组织树中展开该行政组织下一级的所有行政组织。点击树形结构的“-”，则收起该行政组织下一级的所有行政组织。

 1.5.5	界面描述-行政组织业务属性修改界面
 1.	功能按钮区域
 1)	保存按钮：点击保存按钮，若保存成功，提示保存成功，返回上一级界面，若保存失败，提示用户保存失败的原因，停留在当前界面。
 2)	右全移按钮：点击右全移按钮，将左框中的数据全部移到右框。
 3)	右移按钮：从左框中选择一条数据，点击右移按钮，将左框选中的数据移到右框。
 4)	左移按钮：从右框中选择一条数据，点击左移按钮，将右框选中的数据移到左框。
 5)	左全移按钮：点击左全移按钮，将右框中的数据全部移到左框。
 6)	重置按钮：点击重置按钮，恢复行政组织业务属性的初始状态。
 7)	取消按钮：点击取消按钮，退出当前界面，返回主界面。
 8)	编辑部门电子地图按钮：点击编辑部门电子地图按钮，进入“编辑部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 9)	编辑自提区域电子地图按钮：点击编辑自提区域电子地图按钮，进入“编辑自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 10)	编辑派送区域电子地图按钮：点击编辑派送区域电子地图按钮，进入“编辑派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】,【提货信息】,【外场信息】,【调度组信息】，【车队信息】，【车队组信息】，【事业部信息】。

 1.5.7	界面描述-行政组织业务属性详情界面
 2.	功能按钮区域
 1)	修改按钮：点击修改按钮，进入修改界面，参见【图二：行政组织业务属性修改界面】。
 2)	查看部门电子地图按钮：点击查看部门电子地图按钮，进入“查看部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3)	查看自提区域电子地图按钮：点击查看自提区域电子地图按钮，进入“查看自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 4)	查看派送区域电子地图按钮：点击查看派送区域电子地图按钮，进入“查看派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】，【提货信息】，【外场信息】，【调度组信息】，【车队信息】，【车队组信息】，【车队信息】，【部门基本信息】。

 SR-1	选择省份信息后，城市的选择范围自动变成已选省份所包含的城市。选择城市信息后，区县的选择范围自动变成已选城市所包含的区县。
 SR-2	只有选择了“是否营业部”，界面才能修改或者显示营业部信息。
 SR-3	只有选择了“可到达”，界面才能修改或者显示提货信息，到达适用产品。
 SR-4	只有选择了“是否外场”，界面才能修改或者显示外场信息。
 SR-5	只有选择了“是否车队调度组”，界面才能修改或者显示调度组信息。
 SR-6	只有选择了“可自提”，界面才能修改或者显示“自提区域描述”。
 SR-7	只有选择了“可派送”，界面才能修改或者显示“派送区域描述”。
 SR-8	只有选择了“可出发”，界面才能修改或者显示“车队”,“出发适用产品”，“所属集中开单组”。
 SR-9	外场简码,外场编码均不可重复。如果录入的已存在，提示用户已存在。
 SR-10	只有选择了“是否车队”，界面才能修改或者显示车队信息。
 SR-11	只有选择了“是否车队组”，界面才能修改或者显示车队组信息。
 SR-12	在一个事业部内，集中接送货车队编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-13	只有选择了“是否驻地部门”，界面才能修改或者显示“驻地营业部所属外场”。
 SR-14	只有选择了“是否事业部”，界面才能修改或者显示“事业部信息”。
 SR-15	事业部编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-16	最大临时欠款额度的不是人工维护，是动态变化的，根据前3个月的最高收入所在等级决定。
 SR-17	外场的部门面积要大于货区面积，外场的货区面积要大于货台面积。如果用户填写的值不满足此规则，则提示用户。
 SR-18	当有客户在某部门开临欠时，此部门的已用临欠额度做相应的更新。

 * 1.5.3	界面描述-主界面
 1.	功能按钮区域
 1)	查询按钮：输入查询条件，点击查询按钮，系统返回查询结果，刷新查询列表。
 2)	查看详细信息：点击树形结构中的组织名称，在树型结构的右边显示这个组织的详情，参见【图三：行政组织业务属性详情界面】。
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性查询条件】。
 3.	树型结构区域
 1)	树型结构展示了行政组织的名称，点击树型结构中的部门名称，在右边显示这个部门的业务属性详情。
 2)	点击树形结构的“+”，在组织树中展开该行政组织下一级的所有行政组织。点击树形结构的“-”，则收起该行政组织下一级的所有行政组织。

 1.5.5	界面描述-行政组织业务属性修改界面
 1.	功能按钮区域
 1)	保存按钮：点击保存按钮，若保存成功，提示保存成功，返回上一级界面，若保存失败，提示用户保存失败的原因，停留在当前界面。
 2)	右全移按钮：点击右全移按钮，将左框中的数据全部移到右框。
 3)	右移按钮：从左框中选择一条数据，点击右移按钮，将左框选中的数据移到右框。
 4)	左移按钮：从右框中选择一条数据，点击左移按钮，将右框选中的数据移到左框。
 5)	左全移按钮：点击左全移按钮，将右框中的数据全部移到左框。
 6)	重置按钮：点击重置按钮，恢复行政组织业务属性的初始状态。
 7)	取消按钮：点击取消按钮，退出当前界面，返回主界面。
 8)	编辑部门电子地图按钮：点击编辑部门电子地图按钮，进入“编辑部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 9)	编辑自提区域电子地图按钮：点击编辑自提区域电子地图按钮，进入“编辑自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 10)	编辑派送区域电子地图按钮：点击编辑派送区域电子地图按钮，进入“编辑派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】,【提货信息】,【外场信息】,【调度组信息】，【车队信息】，【车队组信息】，【事业部信息】。

 1.5.7	界面描述-行政组织业务属性详情界面
 2.	功能按钮区域
 1)	修改按钮：点击修改按钮，进入修改界面，参见【图二：行政组织业务属性修改界面】。
 2)	查看部门电子地图按钮：点击查看部门电子地图按钮，进入“查看部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3)	查看自提区域电子地图按钮：点击查看自提区域电子地图按钮，进入“查看自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 4)	查看派送区域电子地图按钮：点击查看派送区域电子地图按钮，进入“查看派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】，【提货信息】，【外场信息】，【调度组信息】，【车队信息】，【车队组信息】，【车队信息】，【部门基本信息】。

 SR-1	选择省份信息后，城市的选择范围自动变成已选省份所包含的城市。选择城市信息后，区县的选择范围自动变成已选城市所包含的区县。
 SR-2	只有选择了“是否营业部”，界面才能修改或者显示营业部信息。
 SR-3	只有选择了“可到达”，界面才能修改或者显示提货信息，到达适用产品。
 SR-4	只有选择了“是否外场”，界面才能修改或者显示外场信息。
 SR-5	只有选择了“是否车队调度组”，界面才能修改或者显示调度组信息。
 SR-6	只有选择了“可自提”，界面才能修改或者显示“自提区域描述”。
 SR-7	只有选择了“可派送”，界面才能修改或者显示“派送区域描述”。
 SR-8	只有选择了“可出发”，界面才能修改或者显示“车队”,“出发适用产品”，“所属集中开单组”。
 SR-9	外场简码,外场编码均不可重复。如果录入的已存在，提示用户已存在。
 SR-10	只有选择了“是否车队”，界面才能修改或者显示车队信息。
 SR-11	只有选择了“是否车队组”，界面才能修改或者显示车队组信息。
 SR-12	在一个事业部内，集中接送货车队编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-13	只有选择了“是否驻地部门”，界面才能修改或者显示“驻地营业部所属外场”。
 SR-14	只有选择了“是否事业部”，界面才能修改或者显示“事业部信息”。
 SR-15	事业部编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-16	最大临时欠款额度的不是人工维护，是动态变化的，根据前3个月的最高收入所在等级决定。
 SR-17	外场的部门面积要大于货区面积，外场的货区面积要大于货台面积。如果用户填写的值不满足此规则，则提示用户。
 SR-18	当有客户在某部门开临欠时，此部门的已用临欠额度做相应的更新。

 * 1.5.3	界面描述-主界面
 1.	功能按钮区域
 1)	查询按钮：输入查询条件，点击查询按钮，系统返回查询结果，刷新查询列表。
 2)	查看详细信息：点击树形结构中的组织名称，在树型结构的右边显示这个组织的详情，参见【图三：行政组织业务属性详情界面】。
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性查询条件】。
 3.	树型结构区域
 1)	树型结构展示了行政组织的名称，点击树型结构中的部门名称，在右边显示这个部门的业务属性详情。
 2)	点击树形结构的“+”，在组织树中展开该行政组织下一级的所有行政组织。点击树形结构的“-”，则收起该行政组织下一级的所有行政组织。

 1.5.5	界面描述-行政组织业务属性修改界面
 1.	功能按钮区域
 1)	保存按钮：点击保存按钮，若保存成功，提示保存成功，返回上一级界面，若保存失败，提示用户保存失败的原因，停留在当前界面。
 2)	右全移按钮：点击右全移按钮，将左框中的数据全部移到右框。
 3)	右移按钮：从左框中选择一条数据，点击右移按钮，将左框选中的数据移到右框。
 4)	左移按钮：从右框中选择一条数据，点击左移按钮，将右框选中的数据移到左框。
 5)	左全移按钮：点击左全移按钮，将右框中的数据全部移到左框。
 6)	重置按钮：点击重置按钮，恢复行政组织业务属性的初始状态。
 7)	取消按钮：点击取消按钮，退出当前界面，返回主界面。
 8)	编辑部门电子地图按钮：点击编辑部门电子地图按钮，进入“编辑部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 9)	编辑自提区域电子地图按钮：点击编辑自提区域电子地图按钮，进入“编辑自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 10)	编辑派送区域电子地图按钮：点击编辑派送区域电子地图按钮，进入“编辑派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】,【提货信息】,【外场信息】,【调度组信息】，【车队信息】，【车队组信息】，【事业部信息】。

 1.5.7	界面描述-行政组织业务属性详情界面
 2.	功能按钮区域
 1)	修改按钮：点击修改按钮，进入修改界面，参见【图二：行政组织业务属性修改界面】。
 2)	查看部门电子地图按钮：点击查看部门电子地图按钮，进入“查看部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3)	查看自提区域电子地图按钮：点击查看自提区域电子地图按钮，进入“查看自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 4)	查看派送区域电子地图按钮：点击查看派送区域电子地图按钮，进入“查看派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】，【提货信息】，【外场信息】，【调度组信息】，【车队信息】，【车队组信息】，【车队信息】，【部门基本信息】。

 SR-1	选择省份信息后，城市的选择范围自动变成已选省份所包含的城市。选择城市信息后，区县的选择范围自动变成已选城市所包含的区县。
 SR-2	只有选择了“是否营业部”，界面才能修改或者显示营业部信息。
 SR-3	只有选择了“可到达”，界面才能修改或者显示提货信息，到达适用产品。
 SR-4	只有选择了“是否外场”，界面才能修改或者显示外场信息。
 SR-5	只有选择了“是否车队调度组”，界面才能修改或者显示调度组信息。
 SR-6	只有选择了“可自提”，界面才能修改或者显示“自提区域描述”。
 SR-7	只有选择了“可派送”，界面才能修改或者显示“派送区域描述”。
 SR-8	只有选择了“可出发”，界面才能修改或者显示“车队”,“出发适用产品”，“所属集中开单组”。
 SR-9	外场简码,外场编码均不可重复。如果录入的已存在，提示用户已存在。
 SR-10	只有选择了“是否车队”，界面才能修改或者显示车队信息。
 SR-11	只有选择了“是否车队组”，界面才能修改或者显示车队组信息。
 SR-12	在一个事业部内，集中接送货车队编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-13	只有选择了“是否驻地部门”，界面才能修改或者显示“驻地营业部所属外场”。
 SR-14	只有选择了“是否事业部”，界面才能修改或者显示“事业部信息”。
 SR-15	事业部编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-16	最大临时欠款额度的不是人工维护，是动态变化的，根据前3个月的最高收入所在等级决定。
 SR-17	外场的部门面积要大于货区面积，外场的货区面积要大于货台面积。如果用户填写的值不满足此规则，则提示用户。
 SR-18	当有客户在某部门开临欠时，此部门的已用临欠额度做相应的更新。

 * 1.5.3	界面描述-主界面
 1.	功能按钮区域
 1)	查询按钮：输入查询条件，点击查询按钮，系统返回查询结果，刷新查询列表。
 2)	查看详细信息：点击树形结构中的组织名称，在树型结构的右边显示这个组织的详情，参见【图三：行政组织业务属性详情界面】。
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性查询条件】。
 3.	树型结构区域
 1)	树型结构展示了行政组织的名称，点击树型结构中的部门名称，在右边显示这个部门的业务属性详情。
 2)	点击树形结构的“+”，在组织树中展开该行政组织下一级的所有行政组织。点击树形结构的“-”，则收起该行政组织下一级的所有行政组织。

 1.5.5	界面描述-行政组织业务属性修改界面
 1.	功能按钮区域
 1)	保存按钮：点击保存按钮，若保存成功，提示保存成功，返回上一级界面，若保存失败，提示用户保存失败的原因，停留在当前界面。
 2)	右全移按钮：点击右全移按钮，将左框中的数据全部移到右框。
 3)	右移按钮：从左框中选择一条数据，点击右移按钮，将左框选中的数据移到右框。
 4)	左移按钮：从右框中选择一条数据，点击左移按钮，将右框选中的数据移到左框。
 5)	左全移按钮：点击左全移按钮，将右框中的数据全部移到左框。
 6)	重置按钮：点击重置按钮，恢复行政组织业务属性的初始状态。
 7)	取消按钮：点击取消按钮，退出当前界面，返回主界面。
 8)	编辑部门电子地图按钮：点击编辑部门电子地图按钮，进入“编辑部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 9)	编辑自提区域电子地图按钮：点击编辑自提区域电子地图按钮，进入“编辑自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 10)	编辑派送区域电子地图按钮：点击编辑派送区域电子地图按钮，进入“编辑派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】,【提货信息】,【外场信息】,【调度组信息】，【车队信息】，【车队组信息】，【事业部信息】。

 1.5.7	界面描述-行政组织业务属性详情界面
 2.	功能按钮区域
 1)	修改按钮：点击修改按钮，进入修改界面，参见【图二：行政组织业务属性修改界面】。
 2)	查看部门电子地图按钮：点击查看部门电子地图按钮，进入“查看部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3)	查看自提区域电子地图按钮：点击查看自提区域电子地图按钮，进入“查看自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 4)	查看派送区域电子地图按钮：点击查看派送区域电子地图按钮，进入“查看派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】，【提货信息】，【外场信息】，【调度组信息】，【车队信息】，【车队组信息】，【车队信息】，【部门基本信息】。

 SR-1	选择省份信息后，城市的选择范围自动变成已选省份所包含的城市。选择城市信息后，区县的选择范围自动变成已选城市所包含的区县。
 SR-2	只有选择了“是否营业部”，界面才能修改或者显示营业部信息。
 SR-3	只有选择了“可到达”，界面才能修改或者显示提货信息，到达适用产品。
 SR-4	只有选择了“是否外场”，界面才能修改或者显示外场信息。
 SR-5	只有选择了“是否车队调度组”，界面才能修改或者显示调度组信息。
 SR-6	只有选择了“可自提”，界面才能修改或者显示“自提区域描述”。
 SR-7	只有选择了“可派送”，界面才能修改或者显示“派送区域描述”。
 SR-8	只有选择了“可出发”，界面才能修改或者显示“车队”,“出发适用产品”，“所属集中开单组”。
 SR-9	外场简码,外场编码均不可重复。如果录入的已存在，提示用户已存在。
 SR-10	只有选择了“是否车队”，界面才能修改或者显示车队信息。
 SR-11	只有选择了“是否车队组”，界面才能修改或者显示车队组信息。
 SR-12	在一个事业部内，集中接送货车队编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-13	只有选择了“是否驻地部门”，界面才能修改或者显示“驻地营业部所属外场”。
 SR-14	只有选择了“是否事业部”，界面才能修改或者显示“事业部信息”。
 SR-15	事业部编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-16	最大临时欠款额度的不是人工维护，是动态变化的，根据前3个月的最高收入所在等级决定。
 SR-17	外场的部门面积要大于货区面积，外场的货区面积要大于货台面积。如果用户填写的值不满足此规则，则提示用户。
 SR-18	当有客户在某部门开临欠时，此部门的已用临欠额度做相应的更新。

 * 1.5.3	界面描述-主界面
 1.	功能按钮区域
 1)	查询按钮：输入查询条件，点击查询按钮，系统返回查询结果，刷新查询列表。
 2)	查看详细信息：点击树形结构中的组织名称，在树型结构的右边显示这个组织的详情，参见【图三：行政组织业务属性详情界面】。
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性查询条件】。
 3.	树型结构区域
 1)	树型结构展示了行政组织的名称，点击树型结构中的部门名称，在右边显示这个部门的业务属性详情。
 2)	点击树形结构的“+”，在组织树中展开该行政组织下一级的所有行政组织。点击树形结构的“-”，则收起该行政组织下一级的所有行政组织。

 1.5.5	界面描述-行政组织业务属性修改界面
 1.	功能按钮区域
 1)	保存按钮：点击保存按钮，若保存成功，提示保存成功，返回上一级界面，若保存失败，提示用户保存失败的原因，停留在当前界面。
 2)	右全移按钮：点击右全移按钮，将左框中的数据全部移到右框。
 3)	右移按钮：从左框中选择一条数据，点击右移按钮，将左框选中的数据移到右框。
 4)	左移按钮：从右框中选择一条数据，点击左移按钮，将右框选中的数据移到左框。
 5)	左全移按钮：点击左全移按钮，将右框中的数据全部移到左框。
 6)	重置按钮：点击重置按钮，恢复行政组织业务属性的初始状态。
 7)	取消按钮：点击取消按钮，退出当前界面，返回主界面。
 8)	编辑部门电子地图按钮：点击编辑部门电子地图按钮，进入“编辑部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 9)	编辑自提区域电子地图按钮：点击编辑自提区域电子地图按钮，进入“编辑自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 10)	编辑派送区域电子地图按钮：点击编辑派送区域电子地图按钮，进入“编辑派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】,【提货信息】,【外场信息】,【调度组信息】，【车队信息】，【车队组信息】，【事业部信息】。

 1.5.7	界面描述-行政组织业务属性详情界面
 2.	功能按钮区域
 1)	修改按钮：点击修改按钮，进入修改界面，参见【图二：行政组织业务属性修改界面】。
 2)	查看部门电子地图按钮：点击查看部门电子地图按钮，进入“查看部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3)	查看自提区域电子地图按钮：点击查看自提区域电子地图按钮，进入“查看自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 4)	查看派送区域电子地图按钮：点击查看派送区域电子地图按钮，进入“查看派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】，【提货信息】，【外场信息】，【调度组信息】，【车队信息】，【车队组信息】，【车队信息】，【部门基本信息】。

 SR-1	选择省份信息后，城市的选择范围自动变成已选省份所包含的城市。选择城市信息后，区县的选择范围自动变成已选城市所包含的区县。
 SR-2	只有选择了“是否营业部”，界面才能修改或者显示营业部信息。
 SR-3	只有选择了“可到达”，界面才能修改或者显示提货信息，到达适用产品。
 SR-4	只有选择了“是否外场”，界面才能修改或者显示外场信息。
 SR-5	只有选择了“是否车队调度组”，界面才能修改或者显示调度组信息。
 SR-6	只有选择了“可自提”，界面才能修改或者显示“自提区域描述”。
 SR-7	只有选择了“可派送”，界面才能修改或者显示“派送区域描述”。
 SR-8	只有选择了“可出发”，界面才能修改或者显示“车队”,“出发适用产品”，“所属集中开单组”。
 SR-9	外场简码,外场编码均不可重复。如果录入的已存在，提示用户已存在。
 SR-10	只有选择了“是否车队”，界面才能修改或者显示车队信息。
 SR-11	只有选择了“是否车队组”，界面才能修改或者显示车队组信息。
 SR-12	在一个事业部内，集中接送货车队编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-13	只有选择了“是否驻地部门”，界面才能修改或者显示“驻地营业部所属外场”。
 SR-14	只有选择了“是否事业部”，界面才能修改或者显示“事业部信息”。
 SR-15	事业部编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-16	最大临时欠款额度的不是人工维护，是动态变化的，根据前3个月的最高收入所在等级决定。
 SR-17	外场的部门面积要大于货区面积，外场的货区面积要大于货台面积。如果用户填写的值不满足此规则，则提示用户。
 SR-18	当有客户在某部门开临欠时，此部门的已用临欠额度做相应的更新。

 * 1.5.3	界面描述-主界面
 1.	功能按钮区域
 1)	查询按钮：输入查询条件，点击查询按钮，系统返回查询结果，刷新查询列表。
 2)	查看详细信息：点击树形结构中的组织名称，在树型结构的右边显示这个组织的详情，参见【图三：行政组织业务属性详情界面】。
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性查询条件】。
 3.	树型结构区域
 1)	树型结构展示了行政组织的名称，点击树型结构中的部门名称，在右边显示这个部门的业务属性详情。
 2)	点击树形结构的“+”，在组织树中展开该行政组织下一级的所有行政组织。点击树形结构的“-”，则收起该行政组织下一级的所有行政组织。

 1.5.5	界面描述-行政组织业务属性修改界面
 1.	功能按钮区域
 1)	保存按钮：点击保存按钮，若保存成功，提示保存成功，返回上一级界面，若保存失败，提示用户保存失败的原因，停留在当前界面。
 2)	右全移按钮：点击右全移按钮，将左框中的数据全部移到右框。
 3)	右移按钮：从左框中选择一条数据，点击右移按钮，将左框选中的数据移到右框。
 4)	左移按钮：从右框中选择一条数据，点击左移按钮，将右框选中的数据移到左框。
 5)	左全移按钮：点击左全移按钮，将右框中的数据全部移到左框。
 6)	重置按钮：点击重置按钮，恢复行政组织业务属性的初始状态。
 7)	取消按钮：点击取消按钮，退出当前界面，返回主界面。
 8)	编辑部门电子地图按钮：点击编辑部门电子地图按钮，进入“编辑部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 9)	编辑自提区域电子地图按钮：点击编辑自提区域电子地图按钮，进入“编辑自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 10)	编辑派送区域电子地图按钮：点击编辑派送区域电子地图按钮，进入“编辑派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】,【提货信息】,【外场信息】,【调度组信息】，【车队信息】，【车队组信息】，【事业部信息】。

 1.5.7	界面描述-行政组织业务属性详情界面
 2.	功能按钮区域
 1)	修改按钮：点击修改按钮，进入修改界面，参见【图二：行政组织业务属性修改界面】。
 2)	查看部门电子地图按钮：点击查看部门电子地图按钮，进入“查看部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3)	查看自提区域电子地图按钮：点击查看自提区域电子地图按钮，进入“查看自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 4)	查看派送区域电子地图按钮：点击查看派送区域电子地图按钮，进入“查看派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】，【提货信息】，【外场信息】，【调度组信息】，【车队信息】，【车队组信息】，【车队信息】，【部门基本信息】。

 SR-1	选择省份信息后，城市的选择范围自动变成已选省份所包含的城市。选择城市信息后，区县的选择范围自动变成已选城市所包含的区县。
 SR-2	只有选择了“是否营业部”，界面才能修改或者显示营业部信息。
 SR-3	只有选择了“可到达”，界面才能修改或者显示提货信息，到达适用产品。
 SR-4	只有选择了“是否外场”，界面才能修改或者显示外场信息。
 SR-5	只有选择了“是否车队调度组”，界面才能修改或者显示调度组信息。
 SR-6	只有选择了“可自提”，界面才能修改或者显示“自提区域描述”。
 SR-7	只有选择了“可派送”，界面才能修改或者显示“派送区域描述”。
 SR-8	只有选择了“可出发”，界面才能修改或者显示“车队”,“出发适用产品”，“所属集中开单组”。
 SR-9	外场简码,外场编码均不可重复。如果录入的已存在，提示用户已存在。
 SR-10	只有选择了“是否车队”，界面才能修改或者显示车队信息。
 SR-11	只有选择了“是否车队组”，界面才能修改或者显示车队组信息。
 SR-12	在一个事业部内，集中接送货车队编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-13	只有选择了“是否驻地部门”，界面才能修改或者显示“驻地营业部所属外场”。
 SR-14	只有选择了“是否事业部”，界面才能修改或者显示“事业部信息”。
 SR-15	事业部编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-16	最大临时欠款额度的不是人工维护，是动态变化的，根据前3个月的最高收入所在等级决定。
 SR-17	外场的部门面积要大于货区面积，外场的货区面积要大于货台面积。如果用户填写的值不满足此规则，则提示用户。
 SR-18	当有客户在某部门开临欠时，此部门的已用临欠额度做相应的更新。

 * 1.5.3	界面描述-主界面
 1.	功能按钮区域
 1)	查询按钮：输入查询条件，点击查询按钮，系统返回查询结果，刷新查询列表。
 2)	查看详细信息：点击树形结构中的组织名称，在树型结构的右边显示这个组织的详情，参见【图三：行政组织业务属性详情界面】。
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性查询条件】。
 3.	树型结构区域
 1)	树型结构展示了行政组织的名称，点击树型结构中的部门名称，在右边显示这个部门的业务属性详情。
 2)	点击树形结构的“+”，在组织树中展开该行政组织下一级的所有行政组织。点击树形结构的“-”，则收起该行政组织下一级的所有行政组织。

 1.5.5	界面描述-行政组织业务属性修改界面
 1.	功能按钮区域
 1)	保存按钮：点击保存按钮，若保存成功，提示保存成功，返回上一级界面，若保存失败，提示用户保存失败的原因，停留在当前界面。
 2)	右全移按钮：点击右全移按钮，将左框中的数据全部移到右框。
 3)	右移按钮：从左框中选择一条数据，点击右移按钮，将左框选中的数据移到右框。
 4)	左移按钮：从右框中选择一条数据，点击左移按钮，将右框选中的数据移到左框。
 5)	左全移按钮：点击左全移按钮，将右框中的数据全部移到左框。
 6)	重置按钮：点击重置按钮，恢复行政组织业务属性的初始状态。
 7)	取消按钮：点击取消按钮，退出当前界面，返回主界面。
 8)	编辑部门电子地图按钮：点击编辑部门电子地图按钮，进入“编辑部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 9)	编辑自提区域电子地图按钮：点击编辑自提区域电子地图按钮，进入“编辑自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 10)	编辑派送区域电子地图按钮：点击编辑派送区域电子地图按钮，进入“编辑派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】,【提货信息】,【外场信息】,【调度组信息】，【车队信息】，【车队组信息】，【事业部信息】。

 1.5.7	界面描述-行政组织业务属性详情界面
 2.	功能按钮区域
 1)	修改按钮：点击修改按钮，进入修改界面，参见【图二：行政组织业务属性修改界面】。
 2)	查看部门电子地图按钮：点击查看部门电子地图按钮，进入“查看部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3)	查看自提区域电子地图按钮：点击查看自提区域电子地图按钮，进入“查看自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 4)	查看派送区域电子地图按钮：点击查看派送区域电子地图按钮，进入“查看派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】，【提货信息】，【外场信息】，【调度组信息】，【车队信息】，【车队组信息】，【车队信息】，【部门基本信息】。

 SR-1	选择省份信息后，城市的选择范围自动变成已选省份所包含的城市。选择城市信息后，区县的选择范围自动变成已选城市所包含的区县。
 SR-2	只有选择了“是否营业部”，界面才能修改或者显示营业部信息。
 SR-3	只有选择了“可到达”，界面才能修改或者显示提货信息，到达适用产品。
 SR-4	只有选择了“是否外场”，界面才能修改或者显示外场信息。
 SR-5	只有选择了“是否车队调度组”，界面才能修改或者显示调度组信息。
 SR-6	只有选择了“可自提”，界面才能修改或者显示“自提区域描述”。
 SR-7	只有选择了“可派送”，界面才能修改或者显示“派送区域描述”。
 SR-8	只有选择了“可出发”，界面才能修改或者显示“车队”,“出发适用产品”，“所属集中开单组”。
 SR-9	外场简码,外场编码均不可重复。如果录入的已存在，提示用户已存在。
 SR-10	只有选择了“是否车队”，界面才能修改或者显示车队信息。
 SR-11	只有选择了“是否车队组”，界面才能修改或者显示车队组信息。
 SR-12	在一个事业部内，集中接送货车队编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-13	只有选择了“是否驻地部门”，界面才能修改或者显示“驻地营业部所属外场”。
 SR-14	只有选择了“是否事业部”，界面才能修改或者显示“事业部信息”。
 SR-15	事业部编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-16	最大临时欠款额度的不是人工维护，是动态变化的，根据前3个月的最高收入所在等级决定。
 SR-17	外场的部门面积要大于货区面积，外场的货区面积要大于货台面积。如果用户填写的值不满足此规则，则提示用户。
 SR-18	当有客户在某部门开临欠时，此部门的已用临欠额度做相应的更新。

 * 1.5.3	界面描述-主界面
 1.	功能按钮区域
 1)	查询按钮：输入查询条件，点击查询按钮，系统返回查询结果，刷新查询列表。
 2)	查看详细信息：点击树形结构中的组织名称，在树型结构的右边显示这个组织的详情，参见【图三：行政组织业务属性详情界面】。
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性查询条件】。
 3.	树型结构区域
 1)	树型结构展示了行政组织的名称，点击树型结构中的部门名称，在右边显示这个部门的业务属性详情。
 2)	点击树形结构的“+”，在组织树中展开该行政组织下一级的所有行政组织。点击树形结构的“-”，则收起该行政组织下一级的所有行政组织。

 1.5.5	界面描述-行政组织业务属性修改界面
 1.	功能按钮区域
 1)	保存按钮：点击保存按钮，若保存成功，提示保存成功，返回上一级界面，若保存失败，提示用户保存失败的原因，停留在当前界面。
 2)	右全移按钮：点击右全移按钮，将左框中的数据全部移到右框。
 3)	右移按钮：从左框中选择一条数据，点击右移按钮，将左框选中的数据移到右框。
 4)	左移按钮：从右框中选择一条数据，点击左移按钮，将右框选中的数据移到左框。
 5)	左全移按钮：点击左全移按钮，将右框中的数据全部移到左框。
 6)	重置按钮：点击重置按钮，恢复行政组织业务属性的初始状态。
 7)	取消按钮：点击取消按钮，退出当前界面，返回主界面。
 8)	编辑部门电子地图按钮：点击编辑部门电子地图按钮，进入“编辑部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 9)	编辑自提区域电子地图按钮：点击编辑自提区域电子地图按钮，进入“编辑自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 10)	编辑派送区域电子地图按钮：点击编辑派送区域电子地图按钮，进入“编辑派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】,【提货信息】,【外场信息】,【调度组信息】，【车队信息】，【车队组信息】，【事业部信息】。

 1.5.7	界面描述-行政组织业务属性详情界面
 2.	功能按钮区域
 1)	修改按钮：点击修改按钮，进入修改界面，参见【图二：行政组织业务属性修改界面】。
 2)	查看部门电子地图按钮：点击查看部门电子地图按钮，进入“查看部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3)	查看自提区域电子地图按钮：点击查看自提区域电子地图按钮，进入“查看自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 4)	查看派送区域电子地图按钮：点击查看派送区域电子地图按钮，进入“查看派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】，【提货信息】，【外场信息】，【调度组信息】，【车队信息】，【车队组信息】，【车队信息】，【部门基本信息】。

 SR-1	选择省份信息后，城市的选择范围自动变成已选省份所包含的城市。选择城市信息后，区县的选择范围自动变成已选城市所包含的区县。
 SR-2	只有选择了“是否营业部”，界面才能修改或者显示营业部信息。
 SR-3	只有选择了“可到达”，界面才能修改或者显示提货信息，到达适用产品。
 SR-4	只有选择了“是否外场”，界面才能修改或者显示外场信息。
 SR-5	只有选择了“是否车队调度组”，界面才能修改或者显示调度组信息。
 SR-6	只有选择了“可自提”，界面才能修改或者显示“自提区域描述”。
 SR-7	只有选择了“可派送”，界面才能修改或者显示“派送区域描述”。
 SR-8	只有选择了“可出发”，界面才能修改或者显示“车队”,“出发适用产品”，“所属集中开单组”。
 SR-9	外场简码,外场编码均不可重复。如果录入的已存在，提示用户已存在。
 SR-10	只有选择了“是否车队”，界面才能修改或者显示车队信息。
 SR-11	只有选择了“是否车队组”，界面才能修改或者显示车队组信息。
 SR-12	在一个事业部内，集中接送货车队编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-13	只有选择了“是否驻地部门”，界面才能修改或者显示“驻地营业部所属外场”。
 SR-14	只有选择了“是否事业部”，界面才能修改或者显示“事业部信息”。
 SR-15	事业部编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-16	最大临时欠款额度的不是人工维护，是动态变化的，根据前3个月的最高收入所在等级决定。
 SR-17	外场的部门面积要大于货区面积，外场的货区面积要大于货台面积。如果用户填写的值不满足此规则，则提示用户。
 SR-18	当有客户在某部门开临欠时，此部门的已用临欠额度做相应的更新。

 * 1.5.3	界面描述-主界面
 1.	功能按钮区域
 1)	查询按钮：输入查询条件，点击查询按钮，系统返回查询结果，刷新查询列表。
 2)	查看详细信息：点击树形结构中的组织名称，在树型结构的右边显示这个组织的详情，参见【图三：行政组织业务属性详情界面】。
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性查询条件】。
 3.	树型结构区域
 1)	树型结构展示了行政组织的名称，点击树型结构中的部门名称，在右边显示这个部门的业务属性详情。
 2)	点击树形结构的“+”，在组织树中展开该行政组织下一级的所有行政组织。点击树形结构的“-”，则收起该行政组织下一级的所有行政组织。

 1.5.5	界面描述-行政组织业务属性修改界面
 1.	功能按钮区域
 1)	保存按钮：点击保存按钮，若保存成功，提示保存成功，返回上一级界面，若保存失败，提示用户保存失败的原因，停留在当前界面。
 2)	右全移按钮：点击右全移按钮，将左框中的数据全部移到右框。
 3)	右移按钮：从左框中选择一条数据，点击右移按钮，将左框选中的数据移到右框。
 4)	左移按钮：从右框中选择一条数据，点击左移按钮，将右框选中的数据移到左框。
 5)	左全移按钮：点击左全移按钮，将右框中的数据全部移到左框。
 6)	重置按钮：点击重置按钮，恢复行政组织业务属性的初始状态。
 7)	取消按钮：点击取消按钮，退出当前界面，返回主界面。
 8)	编辑部门电子地图按钮：点击编辑部门电子地图按钮，进入“编辑部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 9)	编辑自提区域电子地图按钮：点击编辑自提区域电子地图按钮，进入“编辑自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 10)	编辑派送区域电子地图按钮：点击编辑派送区域电子地图按钮，进入“编辑派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】,【提货信息】,【外场信息】,【调度组信息】，【车队信息】，【车队组信息】，【事业部信息】。

 1.5.7	界面描述-行政组织业务属性详情界面
 2.	功能按钮区域
 1)	修改按钮：点击修改按钮，进入修改界面，参见【图二：行政组织业务属性修改界面】。
 2)	查看部门电子地图按钮：点击查看部门电子地图按钮，进入“查看部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3)	查看自提区域电子地图按钮：点击查看自提区域电子地图按钮，进入“查看自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 4)	查看派送区域电子地图按钮：点击查看派送区域电子地图按钮，进入“查看派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】，【提货信息】，【外场信息】，【调度组信息】，【车队信息】，【车队组信息】，【车队信息】，【部门基本信息】。

 SR-1	选择省份信息后，城市的选择范围自动变成已选省份所包含的城市。选择城市信息后，区县的选择范围自动变成已选城市所包含的区县。
 SR-2	只有选择了“是否营业部”，界面才能修改或者显示营业部信息。
 SR-3	只有选择了“可到达”，界面才能修改或者显示提货信息，到达适用产品。
 SR-4	只有选择了“是否外场”，界面才能修改或者显示外场信息。
 SR-5	只有选择了“是否车队调度组”，界面才能修改或者显示调度组信息。
 SR-6	只有选择了“可自提”，界面才能修改或者显示“自提区域描述”。
 SR-7	只有选择了“可派送”，界面才能修改或者显示“派送区域描述”。
 SR-8	只有选择了“可出发”，界面才能修改或者显示“车队”,“出发适用产品”，“所属集中开单组”。
 SR-9	外场简码,外场编码均不可重复。如果录入的已存在，提示用户已存在。
 SR-10	只有选择了“是否车队”，界面才能修改或者显示车队信息。
 SR-11	只有选择了“是否车队组”，界面才能修改或者显示车队组信息。
 SR-12	在一个事业部内，集中接送货车队编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-13	只有选择了“是否驻地部门”，界面才能修改或者显示“驻地营业部所属外场”。
 SR-14	只有选择了“是否事业部”，界面才能修改或者显示“事业部信息”。
 SR-15	事业部编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-16	最大临时欠款额度的不是人工维护，是动态变化的，根据前3个月的最高收入所在等级决定。
 SR-17	外场的部门面积要大于货区面积，外场的货区面积要大于货台面积。如果用户填写的值不满足此规则，则提示用户。
 SR-18	当有客户在某部门开临欠时，此部门的已用临欠额度做相应的更新。

 * 1.5.3	界面描述-主界面
 1.	功能按钮区域
 1)	查询按钮：输入查询条件，点击查询按钮，系统返回查询结果，刷新查询列表。
 2)	查看详细信息：点击树形结构中的组织名称，在树型结构的右边显示这个组织的详情，参见【图三：行政组织业务属性详情界面】。
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性查询条件】。
 3.	树型结构区域
 1)	树型结构展示了行政组织的名称，点击树型结构中的部门名称，在右边显示这个部门的业务属性详情。
 2)	点击树形结构的“+”，在组织树中展开该行政组织下一级的所有行政组织。点击树形结构的“-”，则收起该行政组织下一级的所有行政组织。

 1.5.5	界面描述-行政组织业务属性修改界面
 1.	功能按钮区域
 1)	保存按钮：点击保存按钮，若保存成功，提示保存成功，返回上一级界面，若保存失败，提示用户保存失败的原因，停留在当前界面。
 2)	右全移按钮：点击右全移按钮，将左框中的数据全部移到右框。
 3)	右移按钮：从左框中选择一条数据，点击右移按钮，将左框选中的数据移到右框。
 4)	左移按钮：从右框中选择一条数据，点击左移按钮，将右框选中的数据移到左框。
 5)	左全移按钮：点击左全移按钮，将右框中的数据全部移到左框。
 6)	重置按钮：点击重置按钮，恢复行政组织业务属性的初始状态。
 7)	取消按钮：点击取消按钮，退出当前界面，返回主界面。
 8)	编辑部门电子地图按钮：点击编辑部门电子地图按钮，进入“编辑部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 9)	编辑自提区域电子地图按钮：点击编辑自提区域电子地图按钮，进入“编辑自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 10)	编辑派送区域电子地图按钮：点击编辑派送区域电子地图按钮，进入“编辑派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】,【提货信息】,【外场信息】,【调度组信息】，【车队信息】，【车队组信息】，【事业部信息】。

 1.5.7	界面描述-行政组织业务属性详情界面
 2.	功能按钮区域
 1)	修改按钮：点击修改按钮，进入修改界面，参见【图二：行政组织业务属性修改界面】。
 2)	查看部门电子地图按钮：点击查看部门电子地图按钮，进入“查看部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3)	查看自提区域电子地图按钮：点击查看自提区域电子地图按钮，进入“查看自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 4)	查看派送区域电子地图按钮：点击查看派送区域电子地图按钮，进入“查看派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】，【提货信息】，【外场信息】，【调度组信息】，【车队信息】，【车队组信息】，【车队信息】，【部门基本信息】。

 SR-1	选择省份信息后，城市的选择范围自动变成已选省份所包含的城市。选择城市信息后，区县的选择范围自动变成已选城市所包含的区县。
 SR-2	只有选择了“是否营业部”，界面才能修改或者显示营业部信息。
 SR-3	只有选择了“可到达”，界面才能修改或者显示提货信息，到达适用产品。
 SR-4	只有选择了“是否外场”，界面才能修改或者显示外场信息。
 SR-5	只有选择了“是否车队调度组”，界面才能修改或者显示调度组信息。
 SR-6	只有选择了“可自提”，界面才能修改或者显示“自提区域描述”。
 SR-7	只有选择了“可派送”，界面才能修改或者显示“派送区域描述”。
 SR-8	只有选择了“可出发”，界面才能修改或者显示“车队”,“出发适用产品”，“所属集中开单组”。
 SR-9	外场简码,外场编码均不可重复。如果录入的已存在，提示用户已存在。
 SR-10	只有选择了“是否车队”，界面才能修改或者显示车队信息。
 SR-11	只有选择了“是否车队组”，界面才能修改或者显示车队组信息。
 SR-12	在一个事业部内，集中接送货车队编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-13	只有选择了“是否驻地部门”，界面才能修改或者显示“驻地营业部所属外场”。
 SR-14	只有选择了“是否事业部”，界面才能修改或者显示“事业部信息”。
 SR-15	事业部编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-16	最大临时欠款额度的不是人工维护，是动态变化的，根据前3个月的最高收入所在等级决定。
 SR-17	外场的部门面积要大于货区面积，外场的货区面积要大于货台面积。如果用户填写的值不满足此规则，则提示用户。
 SR-18	当有客户在某部门开临欠时，此部门的已用临欠额度做相应的更新。

 * 1.5.3	界面描述-主界面
 1.	功能按钮区域
 1)	查询按钮：输入查询条件，点击查询按钮，系统返回查询结果，刷新查询列表。
 2)	查看详细信息：点击树形结构中的组织名称，在树型结构的右边显示这个组织的详情，参见【图三：行政组织业务属性详情界面】。
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性查询条件】。
 3.	树型结构区域
 1)	树型结构展示了行政组织的名称，点击树型结构中的部门名称，在右边显示这个部门的业务属性详情。
 2)	点击树形结构的“+”，在组织树中展开该行政组织下一级的所有行政组织。点击树形结构的“-”，则收起该行政组织下一级的所有行政组织。

 1.5.5	界面描述-行政组织业务属性修改界面
 1.	功能按钮区域
 1)	保存按钮：点击保存按钮，若保存成功，提示保存成功，返回上一级界面，若保存失败，提示用户保存失败的原因，停留在当前界面。
 2)	右全移按钮：点击右全移按钮，将左框中的数据全部移到右框。
 3)	右移按钮：从左框中选择一条数据，点击右移按钮，将左框选中的数据移到右框。
 4)	左移按钮：从右框中选择一条数据，点击左移按钮，将右框选中的数据移到左框。
 5)	左全移按钮：点击左全移按钮，将右框中的数据全部移到左框。
 6)	重置按钮：点击重置按钮，恢复行政组织业务属性的初始状态。
 7)	取消按钮：点击取消按钮，退出当前界面，返回主界面。
 8)	编辑部门电子地图按钮：点击编辑部门电子地图按钮，进入“编辑部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 9)	编辑自提区域电子地图按钮：点击编辑自提区域电子地图按钮，进入“编辑自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 10)	编辑派送区域电子地图按钮：点击编辑派送区域电子地图按钮，进入“编辑派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】,【提货信息】,【外场信息】,【调度组信息】，【车队信息】，【车队组信息】，【事业部信息】。

 1.5.7	界面描述-行政组织业务属性详情界面
 2.	功能按钮区域
 1)	修改按钮：点击修改按钮，进入修改界面，参见【图二：行政组织业务属性修改界面】。
 2)	查看部门电子地图按钮：点击查看部门电子地图按钮，进入“查看部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3)	查看自提区域电子地图按钮：点击查看自提区域电子地图按钮，进入“查看自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 4)	查看派送区域电子地图按钮：点击查看派送区域电子地图按钮，进入“查看派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】，【提货信息】，【外场信息】，【调度组信息】，【车队信息】，【车队组信息】，【车队信息】，【部门基本信息】。

 SR-1	选择省份信息后，城市的选择范围自动变成已选省份所包含的城市。选择城市信息后，区县的选择范围自动变成已选城市所包含的区县。
 SR-2	只有选择了“是否营业部”，界面才能修改或者显示营业部信息。
 SR-3	只有选择了“可到达”，界面才能修改或者显示提货信息，到达适用产品。
 SR-4	只有选择了“是否外场”，界面才能修改或者显示外场信息。
 SR-5	只有选择了“是否车队调度组”，界面才能修改或者显示调度组信息。
 SR-6	只有选择了“可自提”，界面才能修改或者显示“自提区域描述”。
 SR-7	只有选择了“可派送”，界面才能修改或者显示“派送区域描述”。
 SR-8	只有选择了“可出发”，界面才能修改或者显示“车队”,“出发适用产品”，“所属集中开单组”。
 SR-9	外场简码,外场编码均不可重复。如果录入的已存在，提示用户已存在。
 SR-10	只有选择了“是否车队”，界面才能修改或者显示车队信息。
 SR-11	只有选择了“是否车队组”，界面才能修改或者显示车队组信息。
 SR-12	在一个事业部内，集中接送货车队编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-13	只有选择了“是否驻地部门”，界面才能修改或者显示“驻地营业部所属外场”。
 SR-14	只有选择了“是否事业部”，界面才能修改或者显示“事业部信息”。
 SR-15	事业部编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-16	最大临时欠款额度的不是人工维护，是动态变化的，根据前3个月的最高收入所在等级决定。
 SR-17	外场的部门面积要大于货区面积，外场的货区面积要大于货台面积。如果用户填写的值不满足此规则，则提示用户。
 SR-18	当有客户在某部门开临欠时，此部门的已用临欠额度做相应的更新。

 * 1.5.3	界面描述-主界面
 1.	功能按钮区域
 1)	查询按钮：输入查询条件，点击查询按钮，系统返回查询结果，刷新查询列表。
 2)	查看详细信息：点击树形结构中的组织名称，在树型结构的右边显示这个组织的详情，参见【图三：行政组织业务属性详情界面】。
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性查询条件】。
 3.	树型结构区域
 1)	树型结构展示了行政组织的名称，点击树型结构中的部门名称，在右边显示这个部门的业务属性详情。
 2)	点击树形结构的“+”，在组织树中展开该行政组织下一级的所有行政组织。点击树形结构的“-”，则收起该行政组织下一级的所有行政组织。

 1.5.5	界面描述-行政组织业务属性修改界面
 1.	功能按钮区域
 1)	保存按钮：点击保存按钮，若保存成功，提示保存成功，返回上一级界面，若保存失败，提示用户保存失败的原因，停留在当前界面。
 2)	右全移按钮：点击右全移按钮，将左框中的数据全部移到右框。
 3)	右移按钮：从左框中选择一条数据，点击右移按钮，将左框选中的数据移到右框。
 4)	左移按钮：从右框中选择一条数据，点击左移按钮，将右框选中的数据移到左框。
 5)	左全移按钮：点击左全移按钮，将右框中的数据全部移到左框。
 6)	重置按钮：点击重置按钮，恢复行政组织业务属性的初始状态。
 7)	取消按钮：点击取消按钮，退出当前界面，返回主界面。
 8)	编辑部门电子地图按钮：点击编辑部门电子地图按钮，进入“编辑部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 9)	编辑自提区域电子地图按钮：点击编辑自提区域电子地图按钮，进入“编辑自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 10)	编辑派送区域电子地图按钮：点击编辑派送区域电子地图按钮，进入“编辑派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】,【提货信息】,【外场信息】,【调度组信息】，【车队信息】，【车队组信息】，【事业部信息】。

 1.5.7	界面描述-行政组织业务属性详情界面
 2.	功能按钮区域
 1)	修改按钮：点击修改按钮，进入修改界面，参见【图二：行政组织业务属性修改界面】。
 2)	查看部门电子地图按钮：点击查看部门电子地图按钮，进入“查看部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3)	查看自提区域电子地图按钮：点击查看自提区域电子地图按钮，进入“查看自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 4)	查看派送区域电子地图按钮：点击查看派送区域电子地图按钮，进入“查看派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】，【提货信息】，【外场信息】，【调度组信息】，【车队信息】，【车队组信息】，【车队信息】，【部门基本信息】。

 SR-1	选择省份信息后，城市的选择范围自动变成已选省份所包含的城市。选择城市信息后，区县的选择范围自动变成已选城市所包含的区县。
 SR-2	只有选择了“是否营业部”，界面才能修改或者显示营业部信息。
 SR-3	只有选择了“可到达”，界面才能修改或者显示提货信息，到达适用产品。
 SR-4	只有选择了“是否外场”，界面才能修改或者显示外场信息。
 SR-5	只有选择了“是否车队调度组”，界面才能修改或者显示调度组信息。
 SR-6	只有选择了“可自提”，界面才能修改或者显示“自提区域描述”。
 SR-7	只有选择了“可派送”，界面才能修改或者显示“派送区域描述”。
 SR-8	只有选择了“可出发”，界面才能修改或者显示“车队”,“出发适用产品”，“所属集中开单组”。
 SR-9	外场简码,外场编码均不可重复。如果录入的已存在，提示用户已存在。
 SR-10	只有选择了“是否车队”，界面才能修改或者显示车队信息。
 SR-11	只有选择了“是否车队组”，界面才能修改或者显示车队组信息。
 SR-12	在一个事业部内，集中接送货车队编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-13	只有选择了“是否驻地部门”，界面才能修改或者显示“驻地营业部所属外场”。
 SR-14	只有选择了“是否事业部”，界面才能修改或者显示“事业部信息”。
 SR-15	事业部编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-16	最大临时欠款额度的不是人工维护，是动态变化的，根据前3个月的最高收入所在等级决定。
 SR-17	外场的部门面积要大于货区面积，外场的货区面积要大于货台面积。如果用户填写的值不满足此规则，则提示用户。
 SR-18	当有客户在某部门开临欠时，此部门的已用临欠额度做相应的更新。

 * 1.5.3	界面描述-主界面
 1.	功能按钮区域
 1)	查询按钮：输入查询条件，点击查询按钮，系统返回查询结果，刷新查询列表。
 2)	查看详细信息：点击树形结构中的组织名称，在树型结构的右边显示这个组织的详情，参见【图三：行政组织业务属性详情界面】。
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性查询条件】。
 3.	树型结构区域
 1)	树型结构展示了行政组织的名称，点击树型结构中的部门名称，在右边显示这个部门的业务属性详情。
 2)	点击树形结构的“+”，在组织树中展开该行政组织下一级的所有行政组织。点击树形结构的“-”，则收起该行政组织下一级的所有行政组织。

 1.5.5	界面描述-行政组织业务属性修改界面
 1.	功能按钮区域
 1)	保存按钮：点击保存按钮，若保存成功，提示保存成功，返回上一级界面，若保存失败，提示用户保存失败的原因，停留在当前界面。
 2)	右全移按钮：点击右全移按钮，将左框中的数据全部移到右框。
 3)	右移按钮：从左框中选择一条数据，点击右移按钮，将左框选中的数据移到右框。
 4)	左移按钮：从右框中选择一条数据，点击左移按钮，将右框选中的数据移到左框。
 5)	左全移按钮：点击左全移按钮，将右框中的数据全部移到左框。
 6)	重置按钮：点击重置按钮，恢复行政组织业务属性的初始状态。
 7)	取消按钮：点击取消按钮，退出当前界面，返回主界面。
 8)	编辑部门电子地图按钮：点击编辑部门电子地图按钮，进入“编辑部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 9)	编辑自提区域电子地图按钮：点击编辑自提区域电子地图按钮，进入“编辑自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 10)	编辑派送区域电子地图按钮：点击编辑派送区域电子地图按钮，进入“编辑派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】,【提货信息】,【外场信息】,【调度组信息】，【车队信息】，【车队组信息】，【事业部信息】。

 1.5.7	界面描述-行政组织业务属性详情界面
 2.	功能按钮区域
 1)	修改按钮：点击修改按钮，进入修改界面，参见【图二：行政组织业务属性修改界面】。
 2)	查看部门电子地图按钮：点击查看部门电子地图按钮，进入“查看部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3)	查看自提区域电子地图按钮：点击查看自提区域电子地图按钮，进入“查看自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 4)	查看派送区域电子地图按钮：点击查看派送区域电子地图按钮，进入“查看派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】，【提货信息】，【外场信息】，【调度组信息】，【车队信息】，【车队组信息】，【车队信息】，【部门基本信息】。

 SR-1	选择省份信息后，城市的选择范围自动变成已选省份所包含的城市。选择城市信息后，区县的选择范围自动变成已选城市所包含的区县。
 SR-2	只有选择了“是否营业部”，界面才能修改或者显示营业部信息。
 SR-3	只有选择了“可到达”，界面才能修改或者显示提货信息，到达适用产品。
 SR-4	只有选择了“是否外场”，界面才能修改或者显示外场信息。
 SR-5	只有选择了“是否车队调度组”，界面才能修改或者显示调度组信息。
 SR-6	只有选择了“可自提”，界面才能修改或者显示“自提区域描述”。
 SR-7	只有选择了“可派送”，界面才能修改或者显示“派送区域描述”。
 SR-8	只有选择了“可出发”，界面才能修改或者显示“车队”,“出发适用产品”，“所属集中开单组”。
 SR-9	外场简码,外场编码均不可重复。如果录入的已存在，提示用户已存在。
 SR-10	只有选择了“是否车队”，界面才能修改或者显示车队信息。
 SR-11	只有选择了“是否车队组”，界面才能修改或者显示车队组信息。
 SR-12	在一个事业部内，集中接送货车队编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-13	只有选择了“是否驻地部门”，界面才能修改或者显示“驻地营业部所属外场”。
 SR-14	只有选择了“是否事业部”，界面才能修改或者显示“事业部信息”。
 SR-15	事业部编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-16	最大临时欠款额度的不是人工维护，是动态变化的，根据前3个月的最高收入所在等级决定。
 SR-17	外场的部门面积要大于货区面积，外场的货区面积要大于货台面积。如果用户填写的值不满足此规则，则提示用户。
 SR-18	当有客户在某部门开临欠时，此部门的已用临欠额度做相应的更新。

 * 1.5.3	界面描述-主界面
 1.	功能按钮区域
 1)	查询按钮：输入查询条件，点击查询按钮，系统返回查询结果，刷新查询列表。
 2)	查看详细信息：点击树形结构中的组织名称，在树型结构的右边显示这个组织的详情，参见【图三：行政组织业务属性详情界面】。
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性查询条件】。
 3.	树型结构区域
 1)	树型结构展示了行政组织的名称，点击树型结构中的部门名称，在右边显示这个部门的业务属性详情。
 2)	点击树形结构的“+”，在组织树中展开该行政组织下一级的所有行政组织。点击树形结构的“-”，则收起该行政组织下一级的所有行政组织。

 1.5.5	界面描述-行政组织业务属性修改界面
 1.	功能按钮区域
 1)	保存按钮：点击保存按钮，若保存成功，提示保存成功，返回上一级界面，若保存失败，提示用户保存失败的原因，停留在当前界面。
 2)	右全移按钮：点击右全移按钮，将左框中的数据全部移到右框。
 3)	右移按钮：从左框中选择一条数据，点击右移按钮，将左框选中的数据移到右框。
 4)	左移按钮：从右框中选择一条数据，点击左移按钮，将右框选中的数据移到左框。
 5)	左全移按钮：点击左全移按钮，将右框中的数据全部移到左框。
 6)	重置按钮：点击重置按钮，恢复行政组织业务属性的初始状态。
 7)	取消按钮：点击取消按钮，退出当前界面，返回主界面。
 8)	编辑部门电子地图按钮：点击编辑部门电子地图按钮，进入“编辑部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 9)	编辑自提区域电子地图按钮：点击编辑自提区域电子地图按钮，进入“编辑自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 10)	编辑派送区域电子地图按钮：点击编辑派送区域电子地图按钮，进入“编辑派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】,【提货信息】,【外场信息】,【调度组信息】，【车队信息】，【车队组信息】，【事业部信息】。

 1.5.7	界面描述-行政组织业务属性详情界面
 2.	功能按钮区域
 1)	修改按钮：点击修改按钮，进入修改界面，参见【图二：行政组织业务属性修改界面】。
 2)	查看部门电子地图按钮：点击查看部门电子地图按钮，进入“查看部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3)	查看自提区域电子地图按钮：点击查看自提区域电子地图按钮，进入“查看自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 4)	查看派送区域电子地图按钮：点击查看派送区域电子地图按钮，进入“查看派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】，【提货信息】，【外场信息】，【调度组信息】，【车队信息】，【车队组信息】，【车队信息】，【部门基本信息】。

 SR-1	选择省份信息后，城市的选择范围自动变成已选省份所包含的城市。选择城市信息后，区县的选择范围自动变成已选城市所包含的区县。
 SR-2	只有选择了“是否营业部”，界面才能修改或者显示营业部信息。
 SR-3	只有选择了“可到达”，界面才能修改或者显示提货信息，到达适用产品。
 SR-4	只有选择了“是否外场”，界面才能修改或者显示外场信息。
 SR-5	只有选择了“是否车队调度组”，界面才能修改或者显示调度组信息。
 SR-6	只有选择了“可自提”，界面才能修改或者显示“自提区域描述”。
 SR-7	只有选择了“可派送”，界面才能修改或者显示“派送区域描述”。
 SR-8	只有选择了“可出发”，界面才能修改或者显示“车队”,“出发适用产品”，“所属集中开单组”。
 SR-9	外场简码,外场编码均不可重复。如果录入的已存在，提示用户已存在。
 SR-10	只有选择了“是否车队”，界面才能修改或者显示车队信息。
 SR-11	只有选择了“是否车队组”，界面才能修改或者显示车队组信息。
 SR-12	在一个事业部内，集中接送货车队编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-13	只有选择了“是否驻地部门”，界面才能修改或者显示“驻地营业部所属外场”。
 SR-14	只有选择了“是否事业部”，界面才能修改或者显示“事业部信息”。
 SR-15	事业部编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-16	最大临时欠款额度的不是人工维护，是动态变化的，根据前3个月的最高收入所在等级决定。
 SR-17	外场的部门面积要大于货区面积，外场的货区面积要大于货台面积。如果用户填写的值不满足此规则，则提示用户。
 SR-18	当有客户在某部门开临欠时，此部门的已用临欠额度做相应的更新。

 * 1.5.3	界面描述-主界面
 1.	功能按钮区域
 1)	查询按钮：输入查询条件，点击查询按钮，系统返回查询结果，刷新查询列表。
 2)	查看详细信息：点击树形结构中的组织名称，在树型结构的右边显示这个组织的详情，参见【图三：行政组织业务属性详情界面】。
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性查询条件】。
 3.	树型结构区域
 1)	树型结构展示了行政组织的名称，点击树型结构中的部门名称，在右边显示这个部门的业务属性详情。
 2)	点击树形结构的“+”，在组织树中展开该行政组织下一级的所有行政组织。点击树形结构的“-”，则收起该行政组织下一级的所有行政组织。

 1.5.5	界面描述-行政组织业务属性修改界面
 1.	功能按钮区域
 1)	保存按钮：点击保存按钮，若保存成功，提示保存成功，返回上一级界面，若保存失败，提示用户保存失败的原因，停留在当前界面。
 2)	右全移按钮：点击右全移按钮，将左框中的数据全部移到右框。
 3)	右移按钮：从左框中选择一条数据，点击右移按钮，将左框选中的数据移到右框。
 4)	左移按钮：从右框中选择一条数据，点击左移按钮，将右框选中的数据移到左框。
 5)	左全移按钮：点击左全移按钮，将右框中的数据全部移到左框。
 6)	重置按钮：点击重置按钮，恢复行政组织业务属性的初始状态。
 7)	取消按钮：点击取消按钮，退出当前界面，返回主界面。
 8)	编辑部门电子地图按钮：点击编辑部门电子地图按钮，进入“编辑部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 9)	编辑自提区域电子地图按钮：点击编辑自提区域电子地图按钮，进入“编辑自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 10)	编辑派送区域电子地图按钮：点击编辑派送区域电子地图按钮，进入“编辑派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】,【提货信息】,【外场信息】,【调度组信息】，【车队信息】，【车队组信息】，【事业部信息】。

 1.5.7	界面描述-行政组织业务属性详情界面
 2.	功能按钮区域
 1)	修改按钮：点击修改按钮，进入修改界面，参见【图二：行政组织业务属性修改界面】。
 2)	查看部门电子地图按钮：点击查看部门电子地图按钮，进入“查看部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3)	查看自提区域电子地图按钮：点击查看自提区域电子地图按钮，进入“查看自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 4)	查看派送区域电子地图按钮：点击查看派送区域电子地图按钮，进入“查看派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】，【提货信息】，【外场信息】，【调度组信息】，【车队信息】，【车队组信息】，【车队信息】，【部门基本信息】。

 SR-1	选择省份信息后，城市的选择范围自动变成已选省份所包含的城市。选择城市信息后，区县的选择范围自动变成已选城市所包含的区县。
 SR-2	只有选择了“是否营业部”，界面才能修改或者显示营业部信息。
 SR-3	只有选择了“可到达”，界面才能修改或者显示提货信息，到达适用产品。
 SR-4	只有选择了“是否外场”，界面才能修改或者显示外场信息。
 SR-5	只有选择了“是否车队调度组”，界面才能修改或者显示调度组信息。
 SR-6	只有选择了“可自提”，界面才能修改或者显示“自提区域描述”。
 SR-7	只有选择了“可派送”，界面才能修改或者显示“派送区域描述”。
 SR-8	只有选择了“可出发”，界面才能修改或者显示“车队”,“出发适用产品”，“所属集中开单组”。
 SR-9	外场简码,外场编码均不可重复。如果录入的已存在，提示用户已存在。
 SR-10	只有选择了“是否车队”，界面才能修改或者显示车队信息。
 SR-11	只有选择了“是否车队组”，界面才能修改或者显示车队组信息。
 SR-12	在一个事业部内，集中接送货车队编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-13	只有选择了“是否驻地部门”，界面才能修改或者显示“驻地营业部所属外场”。
 SR-14	只有选择了“是否事业部”，界面才能修改或者显示“事业部信息”。
 SR-15	事业部编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-16	最大临时欠款额度的不是人工维护，是动态变化的，根据前3个月的最高收入所在等级决定。
 SR-17	外场的部门面积要大于货区面积，外场的货区面积要大于货台面积。如果用户填写的值不满足此规则，则提示用户。
 SR-18	当有客户在某部门开临欠时，此部门的已用临欠额度做相应的更新。

 * 1.5.3	界面描述-主界面
 1.	功能按钮区域
 1)	查询按钮：输入查询条件，点击查询按钮，系统返回查询结果，刷新查询列表。
 2)	查看详细信息：点击树形结构中的组织名称，在树型结构的右边显示这个组织的详情，参见【图三：行政组织业务属性详情界面】。
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性查询条件】。
 3.	树型结构区域
 1)	树型结构展示了行政组织的名称，点击树型结构中的部门名称，在右边显示这个部门的业务属性详情。
 2)	点击树形结构的“+”，在组织树中展开该行政组织下一级的所有行政组织。点击树形结构的“-”，则收起该行政组织下一级的所有行政组织。

 1.5.5	界面描述-行政组织业务属性修改界面
 1.	功能按钮区域
 1)	保存按钮：点击保存按钮，若保存成功，提示保存成功，返回上一级界面，若保存失败，提示用户保存失败的原因，停留在当前界面。
 2)	右全移按钮：点击右全移按钮，将左框中的数据全部移到右框。
 3)	右移按钮：从左框中选择一条数据，点击右移按钮，将左框选中的数据移到右框。
 4)	左移按钮：从右框中选择一条数据，点击左移按钮，将右框选中的数据移到左框。
 5)	左全移按钮：点击左全移按钮，将右框中的数据全部移到左框。
 6)	重置按钮：点击重置按钮，恢复行政组织业务属性的初始状态。
 7)	取消按钮：点击取消按钮，退出当前界面，返回主界面。
 8)	编辑部门电子地图按钮：点击编辑部门电子地图按钮，进入“编辑部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 9)	编辑自提区域电子地图按钮：点击编辑自提区域电子地图按钮，进入“编辑自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 10)	编辑派送区域电子地图按钮：点击编辑派送区域电子地图按钮，进入“编辑派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】,【提货信息】,【外场信息】,【调度组信息】，【车队信息】，【车队组信息】，【事业部信息】。

 1.5.7	界面描述-行政组织业务属性详情界面
 2.	功能按钮区域
 1)	修改按钮：点击修改按钮，进入修改界面，参见【图二：行政组织业务属性修改界面】。
 2)	查看部门电子地图按钮：点击查看部门电子地图按钮，进入“查看部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3)	查看自提区域电子地图按钮：点击查看自提区域电子地图按钮，进入“查看自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 4)	查看派送区域电子地图按钮：点击查看派送区域电子地图按钮，进入“查看派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】，【提货信息】，【外场信息】，【调度组信息】，【车队信息】，【车队组信息】，【车队信息】，【部门基本信息】。

 SR-1	选择省份信息后，城市的选择范围自动变成已选省份所包含的城市。选择城市信息后，区县的选择范围自动变成已选城市所包含的区县。
 SR-2	只有选择了“是否营业部”，界面才能修改或者显示营业部信息。
 SR-3	只有选择了“可到达”，界面才能修改或者显示提货信息，到达适用产品。
 SR-4	只有选择了“是否外场”，界面才能修改或者显示外场信息。
 SR-5	只有选择了“是否车队调度组”，界面才能修改或者显示调度组信息。
 SR-6	只有选择了“可自提”，界面才能修改或者显示“自提区域描述”。
 SR-7	只有选择了“可派送”，界面才能修改或者显示“派送区域描述”。
 SR-8	只有选择了“可出发”，界面才能修改或者显示“车队”,“出发适用产品”，“所属集中开单组”。
 SR-9	外场简码,外场编码均不可重复。如果录入的已存在，提示用户已存在。
 SR-10	只有选择了“是否车队”，界面才能修改或者显示车队信息。
 SR-11	只有选择了“是否车队组”，界面才能修改或者显示车队组信息。
 SR-12	在一个事业部内，集中接送货车队编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-13	只有选择了“是否驻地部门”，界面才能修改或者显示“驻地营业部所属外场”。
 SR-14	只有选择了“是否事业部”，界面才能修改或者显示“事业部信息”。
 SR-15	事业部编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-16	最大临时欠款额度的不是人工维护，是动态变化的，根据前3个月的最高收入所在等级决定。
 SR-17	外场的部门面积要大于货区面积，外场的货区面积要大于货台面积。如果用户填写的值不满足此规则，则提示用户。
 SR-18	当有客户在某部门开临欠时，此部门的已用临欠额度做相应的更新。

 * 1.5.3	界面描述-主界面
 1.	功能按钮区域
 1)	查询按钮：输入查询条件，点击查询按钮，系统返回查询结果，刷新查询列表。
 2)	查看详细信息：点击树形结构中的组织名称，在树型结构的右边显示这个组织的详情，参见【图三：行政组织业务属性详情界面】。
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性查询条件】。
 3.	树型结构区域
 1)	树型结构展示了行政组织的名称，点击树型结构中的部门名称，在右边显示这个部门的业务属性详情。
 2)	点击树形结构的“+”，在组织树中展开该行政组织下一级的所有行政组织。点击树形结构的“-”，则收起该行政组织下一级的所有行政组织。

 1.5.5	界面描述-行政组织业务属性修改界面
 1.	功能按钮区域
 1)	保存按钮：点击保存按钮，若保存成功，提示保存成功，返回上一级界面，若保存失败，提示用户保存失败的原因，停留在当前界面。
 2)	右全移按钮：点击右全移按钮，将左框中的数据全部移到右框。
 3)	右移按钮：从左框中选择一条数据，点击右移按钮，将左框选中的数据移到右框。
 4)	左移按钮：从右框中选择一条数据，点击左移按钮，将右框选中的数据移到左框。
 5)	左全移按钮：点击左全移按钮，将右框中的数据全部移到左框。
 6)	重置按钮：点击重置按钮，恢复行政组织业务属性的初始状态。
 7)	取消按钮：点击取消按钮，退出当前界面，返回主界面。
 8)	编辑部门电子地图按钮：点击编辑部门电子地图按钮，进入“编辑部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 9)	编辑自提区域电子地图按钮：点击编辑自提区域电子地图按钮，进入“编辑自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 10)	编辑派送区域电子地图按钮：点击编辑派送区域电子地图按钮，进入“编辑派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】,【提货信息】,【外场信息】,【调度组信息】，【车队信息】，【车队组信息】，【事业部信息】。

 1.5.7	界面描述-行政组织业务属性详情界面
 2.	功能按钮区域
 1)	修改按钮：点击修改按钮，进入修改界面，参见【图二：行政组织业务属性修改界面】。
 2)	查看部门电子地图按钮：点击查看部门电子地图按钮，进入“查看部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3)	查看自提区域电子地图按钮：点击查看自提区域电子地图按钮，进入“查看自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 4)	查看派送区域电子地图按钮：点击查看派送区域电子地图按钮，进入“查看派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】，【提货信息】，【外场信息】，【调度组信息】，【车队信息】，【车队组信息】，【车队信息】，【部门基本信息】。

 SR-1	选择省份信息后，城市的选择范围自动变成已选省份所包含的城市。选择城市信息后，区县的选择范围自动变成已选城市所包含的区县。
 SR-2	只有选择了“是否营业部”，界面才能修改或者显示营业部信息。
 SR-3	只有选择了“可到达”，界面才能修改或者显示提货信息，到达适用产品。
 SR-4	只有选择了“是否外场”，界面才能修改或者显示外场信息。
 SR-5	只有选择了“是否车队调度组”，界面才能修改或者显示调度组信息。
 SR-6	只有选择了“可自提”，界面才能修改或者显示“自提区域描述”。
 SR-7	只有选择了“可派送”，界面才能修改或者显示“派送区域描述”。
 SR-8	只有选择了“可出发”，界面才能修改或者显示“车队”,“出发适用产品”，“所属集中开单组”。
 SR-9	外场简码,外场编码均不可重复。如果录入的已存在，提示用户已存在。
 SR-10	只有选择了“是否车队”，界面才能修改或者显示车队信息。
 SR-11	只有选择了“是否车队组”，界面才能修改或者显示车队组信息。
 SR-12	在一个事业部内，集中接送货车队编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-13	只有选择了“是否驻地部门”，界面才能修改或者显示“驻地营业部所属外场”。
 SR-14	只有选择了“是否事业部”，界面才能修改或者显示“事业部信息”。
 SR-15	事业部编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-16	最大临时欠款额度的不是人工维护，是动态变化的，根据前3个月的最高收入所在等级决定。
 SR-17	外场的部门面积要大于货区面积，外场的货区面积要大于货台面积。如果用户填写的值不满足此规则，则提示用户。
 SR-18	当有客户在某部门开临欠时，此部门的已用临欠额度做相应的更新。

 * 1.5.3	界面描述-主界面
 1.	功能按钮区域
 1)	查询按钮：输入查询条件，点击查询按钮，系统返回查询结果，刷新查询列表。
 2)	查看详细信息：点击树形结构中的组织名称，在树型结构的右边显示这个组织的详情，参见【图三：行政组织业务属性详情界面】。
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性查询条件】。
 3.	树型结构区域
 1)	树型结构展示了行政组织的名称，点击树型结构中的部门名称，在右边显示这个部门的业务属性详情。
 2)	点击树形结构的“+”，在组织树中展开该行政组织下一级的所有行政组织。点击树形结构的“-”，则收起该行政组织下一级的所有行政组织。

 1.5.5	界面描述-行政组织业务属性修改界面
 1.	功能按钮区域
 1)	保存按钮：点击保存按钮，若保存成功，提示保存成功，返回上一级界面，若保存失败，提示用户保存失败的原因，停留在当前界面。
 2)	右全移按钮：点击右全移按钮，将左框中的数据全部移到右框。
 3)	右移按钮：从左框中选择一条数据，点击右移按钮，将左框选中的数据移到右框。
 4)	左移按钮：从右框中选择一条数据，点击左移按钮，将右框选中的数据移到左框。
 5)	左全移按钮：点击左全移按钮，将右框中的数据全部移到左框。
 6)	重置按钮：点击重置按钮，恢复行政组织业务属性的初始状态。
 7)	取消按钮：点击取消按钮，退出当前界面，返回主界面。
 8)	编辑部门电子地图按钮：点击编辑部门电子地图按钮，进入“编辑部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 9)	编辑自提区域电子地图按钮：点击编辑自提区域电子地图按钮，进入“编辑自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 10)	编辑派送区域电子地图按钮：点击编辑派送区域电子地图按钮，进入“编辑派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】,【提货信息】,【外场信息】,【调度组信息】，【车队信息】，【车队组信息】，【事业部信息】。

 1.5.7	界面描述-行政组织业务属性详情界面
 2.	功能按钮区域
 1)	修改按钮：点击修改按钮，进入修改界面，参见【图二：行政组织业务属性修改界面】。
 2)	查看部门电子地图按钮：点击查看部门电子地图按钮，进入“查看部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3)	查看自提区域电子地图按钮：点击查看自提区域电子地图按钮，进入“查看自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 4)	查看派送区域电子地图按钮：点击查看派送区域电子地图按钮，进入“查看派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】，【提货信息】，【外场信息】，【调度组信息】，【车队信息】，【车队组信息】，【车队信息】，【部门基本信息】。

 SR-1	选择省份信息后，城市的选择范围自动变成已选省份所包含的城市。选择城市信息后，区县的选择范围自动变成已选城市所包含的区县。
 SR-2	只有选择了“是否营业部”，界面才能修改或者显示营业部信息。
 SR-3	只有选择了“可到达”，界面才能修改或者显示提货信息，到达适用产品。
 SR-4	只有选择了“是否外场”，界面才能修改或者显示外场信息。
 SR-5	只有选择了“是否车队调度组”，界面才能修改或者显示调度组信息。
 SR-6	只有选择了“可自提”，界面才能修改或者显示“自提区域描述”。
 SR-7	只有选择了“可派送”，界面才能修改或者显示“派送区域描述”。
 SR-8	只有选择了“可出发”，界面才能修改或者显示“车队”,“出发适用产品”，“所属集中开单组”。
 SR-9	外场简码,外场编码均不可重复。如果录入的已存在，提示用户已存在。
 SR-10	只有选择了“是否车队”，界面才能修改或者显示车队信息。
 SR-11	只有选择了“是否车队组”，界面才能修改或者显示车队组信息。
 SR-12	在一个事业部内，集中接送货车队编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-13	只有选择了“是否驻地部门”，界面才能修改或者显示“驻地营业部所属外场”。
 SR-14	只有选择了“是否事业部”，界面才能修改或者显示“事业部信息”。
 SR-15	事业部编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-16	最大临时欠款额度的不是人工维护，是动态变化的，根据前3个月的最高收入所在等级决定。
 SR-17	外场的部门面积要大于货区面积，外场的货区面积要大于货台面积。如果用户填写的值不满足此规则，则提示用户。
 SR-18	当有客户在某部门开临欠时，此部门的已用临欠额度做相应的更新。

 * 1.5.3	界面描述-主界面
 1.	功能按钮区域
 1)	查询按钮：输入查询条件，点击查询按钮，系统返回查询结果，刷新查询列表。
 2)	查看详细信息：点击树形结构中的组织名称，在树型结构的右边显示这个组织的详情，参见【图三：行政组织业务属性详情界面】。
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性查询条件】。
 3.	树型结构区域
 1)	树型结构展示了行政组织的名称，点击树型结构中的部门名称，在右边显示这个部门的业务属性详情。
 2)	点击树形结构的“+”，在组织树中展开该行政组织下一级的所有行政组织。点击树形结构的“-”，则收起该行政组织下一级的所有行政组织。

 1.5.5	界面描述-行政组织业务属性修改界面
 1.	功能按钮区域
 1)	保存按钮：点击保存按钮，若保存成功，提示保存成功，返回上一级界面，若保存失败，提示用户保存失败的原因，停留在当前界面。
 2)	右全移按钮：点击右全移按钮，将左框中的数据全部移到右框。
 3)	右移按钮：从左框中选择一条数据，点击右移按钮，将左框选中的数据移到右框。
 4)	左移按钮：从右框中选择一条数据，点击左移按钮，将右框选中的数据移到左框。
 5)	左全移按钮：点击左全移按钮，将右框中的数据全部移到左框。
 6)	重置按钮：点击重置按钮，恢复行政组织业务属性的初始状态。
 7)	取消按钮：点击取消按钮，退出当前界面，返回主界面。
 8)	编辑部门电子地图按钮：点击编辑部门电子地图按钮，进入“编辑部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 9)	编辑自提区域电子地图按钮：点击编辑自提区域电子地图按钮，进入“编辑自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 10)	编辑派送区域电子地图按钮：点击编辑派送区域电子地图按钮，进入“编辑派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】,【提货信息】,【外场信息】,【调度组信息】，【车队信息】，【车队组信息】，【事业部信息】。

 1.5.7	界面描述-行政组织业务属性详情界面
 2.	功能按钮区域
 1)	修改按钮：点击修改按钮，进入修改界面，参见【图二：行政组织业务属性修改界面】。
 2)	查看部门电子地图按钮：点击查看部门电子地图按钮，进入“查看部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3)	查看自提区域电子地图按钮：点击查看自提区域电子地图按钮，进入“查看自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 4)	查看派送区域电子地图按钮：点击查看派送区域电子地图按钮，进入“查看派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】，【提货信息】，【外场信息】，【调度组信息】，【车队信息】，【车队组信息】，【车队信息】，【部门基本信息】。

 SR-1	选择省份信息后，城市的选择范围自动变成已选省份所包含的城市。选择城市信息后，区县的选择范围自动变成已选城市所包含的区县。
 SR-2	只有选择了“是否营业部”，界面才能修改或者显示营业部信息。
 SR-3	只有选择了“可到达”，界面才能修改或者显示提货信息，到达适用产品。
 SR-4	只有选择了“是否外场”，界面才能修改或者显示外场信息。
 SR-5	只有选择了“是否车队调度组”，界面才能修改或者显示调度组信息。
 SR-6	只有选择了“可自提”，界面才能修改或者显示“自提区域描述”。
 SR-7	只有选择了“可派送”，界面才能修改或者显示“派送区域描述”。
 SR-8	只有选择了“可出发”，界面才能修改或者显示“车队”,“出发适用产品”，“所属集中开单组”。
 SR-9	外场简码,外场编码均不可重复。如果录入的已存在，提示用户已存在。
 SR-10	只有选择了“是否车队”，界面才能修改或者显示车队信息。
 SR-11	只有选择了“是否车队组”，界面才能修改或者显示车队组信息。
 SR-12	在一个事业部内，集中接送货车队编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-13	只有选择了“是否驻地部门”，界面才能修改或者显示“驻地营业部所属外场”。
 SR-14	只有选择了“是否事业部”，界面才能修改或者显示“事业部信息”。
 SR-15	事业部编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-16	最大临时欠款额度的不是人工维护，是动态变化的，根据前3个月的最高收入所在等级决定。
 SR-17	外场的部门面积要大于货区面积，外场的货区面积要大于货台面积。如果用户填写的值不满足此规则，则提示用户。
 SR-18	当有客户在某部门开临欠时，此部门的已用临欠额度做相应的更新。

 * 1.5.3	界面描述-主界面
 1.	功能按钮区域
 1)	查询按钮：输入查询条件，点击查询按钮，系统返回查询结果，刷新查询列表。
 2)	查看详细信息：点击树形结构中的组织名称，在树型结构的右边显示这个组织的详情，参见【图三：行政组织业务属性详情界面】。
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性查询条件】。
 3.	树型结构区域
 1)	树型结构展示了行政组织的名称，点击树型结构中的部门名称，在右边显示这个部门的业务属性详情。
 2)	点击树形结构的“+”，在组织树中展开该行政组织下一级的所有行政组织。点击树形结构的“-”，则收起该行政组织下一级的所有行政组织。

 1.5.5	界面描述-行政组织业务属性修改界面
 1.	功能按钮区域
 1)	保存按钮：点击保存按钮，若保存成功，提示保存成功，返回上一级界面，若保存失败，提示用户保存失败的原因，停留在当前界面。
 2)	右全移按钮：点击右全移按钮，将左框中的数据全部移到右框。
 3)	右移按钮：从左框中选择一条数据，点击右移按钮，将左框选中的数据移到右框。
 4)	左移按钮：从右框中选择一条数据，点击左移按钮，将右框选中的数据移到左框。
 5)	左全移按钮：点击左全移按钮，将右框中的数据全部移到左框。
 6)	重置按钮：点击重置按钮，恢复行政组织业务属性的初始状态。
 7)	取消按钮：点击取消按钮，退出当前界面，返回主界面。
 8)	编辑部门电子地图按钮：点击编辑部门电子地图按钮，进入“编辑部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 9)	编辑自提区域电子地图按钮：点击编辑自提区域电子地图按钮，进入“编辑自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 10)	编辑派送区域电子地图按钮：点击编辑派送区域电子地图按钮，进入“编辑派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】,【提货信息】,【外场信息】,【调度组信息】，【车队信息】，【车队组信息】，【事业部信息】。

 1.5.7	界面描述-行政组织业务属性详情界面
 2.	功能按钮区域
 1)	修改按钮：点击修改按钮，进入修改界面，参见【图二：行政组织业务属性修改界面】。
 2)	查看部门电子地图按钮：点击查看部门电子地图按钮，进入“查看部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3)	查看自提区域电子地图按钮：点击查看自提区域电子地图按钮，进入“查看自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 4)	查看派送区域电子地图按钮：点击查看派送区域电子地图按钮，进入“查看派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】，【提货信息】，【外场信息】，【调度组信息】，【车队信息】，【车队组信息】，【车队信息】，【部门基本信息】。

 SR-1	选择省份信息后，城市的选择范围自动变成已选省份所包含的城市。选择城市信息后，区县的选择范围自动变成已选城市所包含的区县。
 SR-2	只有选择了“是否营业部”，界面才能修改或者显示营业部信息。
 SR-3	只有选择了“可到达”，界面才能修改或者显示提货信息，到达适用产品。
 SR-4	只有选择了“是否外场”，界面才能修改或者显示外场信息。
 SR-5	只有选择了“是否车队调度组”，界面才能修改或者显示调度组信息。
 SR-6	只有选择了“可自提”，界面才能修改或者显示“自提区域描述”。
 SR-7	只有选择了“可派送”，界面才能修改或者显示“派送区域描述”。
 SR-8	只有选择了“可出发”，界面才能修改或者显示“车队”,“出发适用产品”，“所属集中开单组”。
 SR-9	外场简码,外场编码均不可重复。如果录入的已存在，提示用户已存在。
 SR-10	只有选择了“是否车队”，界面才能修改或者显示车队信息。
 SR-11	只有选择了“是否车队组”，界面才能修改或者显示车队组信息。
 SR-12	在一个事业部内，集中接送货车队编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-13	只有选择了“是否驻地部门”，界面才能修改或者显示“驻地营业部所属外场”。
 SR-14	只有选择了“是否事业部”，界面才能修改或者显示“事业部信息”。
 SR-15	事业部编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-16	最大临时欠款额度的不是人工维护，是动态变化的，根据前3个月的最高收入所在等级决定。
 SR-17	外场的部门面积要大于货区面积，外场的货区面积要大于货台面积。如果用户填写的值不满足此规则，则提示用户。
 SR-18	当有客户在某部门开临欠时，此部门的已用临欠额度做相应的更新。

 * 1.5.3	界面描述-主界面
 1.	功能按钮区域
 1)	查询按钮：输入查询条件，点击查询按钮，系统返回查询结果，刷新查询列表。
 2)	查看详细信息：点击树形结构中的组织名称，在树型结构的右边显示这个组织的详情，参见【图三：行政组织业务属性详情界面】。
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性查询条件】。
 3.	树型结构区域
 1)	树型结构展示了行政组织的名称，点击树型结构中的部门名称，在右边显示这个部门的业务属性详情。
 2)	点击树形结构的“+”，在组织树中展开该行政组织下一级的所有行政组织。点击树形结构的“-”，则收起该行政组织下一级的所有行政组织。

 1.5.5	界面描述-行政组织业务属性修改界面
 1.	功能按钮区域
 1)	保存按钮：点击保存按钮，若保存成功，提示保存成功，返回上一级界面，若保存失败，提示用户保存失败的原因，停留在当前界面。
 2)	右全移按钮：点击右全移按钮，将左框中的数据全部移到右框。
 3)	右移按钮：从左框中选择一条数据，点击右移按钮，将左框选中的数据移到右框。
 4)	左移按钮：从右框中选择一条数据，点击左移按钮，将右框选中的数据移到左框。
 5)	左全移按钮：点击左全移按钮，将右框中的数据全部移到左框。
 6)	重置按钮：点击重置按钮，恢复行政组织业务属性的初始状态。
 7)	取消按钮：点击取消按钮，退出当前界面，返回主界面。
 8)	编辑部门电子地图按钮：点击编辑部门电子地图按钮，进入“编辑部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 9)	编辑自提区域电子地图按钮：点击编辑自提区域电子地图按钮，进入“编辑自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 10)	编辑派送区域电子地图按钮：点击编辑派送区域电子地图按钮，进入“编辑派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】,【提货信息】,【外场信息】,【调度组信息】，【车队信息】，【车队组信息】，【事业部信息】。

 1.5.7	界面描述-行政组织业务属性详情界面
 2.	功能按钮区域
 1)	修改按钮：点击修改按钮，进入修改界面，参见【图二：行政组织业务属性修改界面】。
 2)	查看部门电子地图按钮：点击查看部门电子地图按钮，进入“查看部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3)	查看自提区域电子地图按钮：点击查看自提区域电子地图按钮，进入“查看自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 4)	查看派送区域电子地图按钮：点击查看派送区域电子地图按钮，进入“查看派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】，【提货信息】，【外场信息】，【调度组信息】，【车队信息】，【车队组信息】，【车队信息】，【部门基本信息】。

 SR-1	选择省份信息后，城市的选择范围自动变成已选省份所包含的城市。选择城市信息后，区县的选择范围自动变成已选城市所包含的区县。
 SR-2	只有选择了“是否营业部”，界面才能修改或者显示营业部信息。
 SR-3	只有选择了“可到达”，界面才能修改或者显示提货信息，到达适用产品。
 SR-4	只有选择了“是否外场”，界面才能修改或者显示外场信息。
 SR-5	只有选择了“是否车队调度组”，界面才能修改或者显示调度组信息。
 SR-6	只有选择了“可自提”，界面才能修改或者显示“自提区域描述”。
 SR-7	只有选择了“可派送”，界面才能修改或者显示“派送区域描述”。
 SR-8	只有选择了“可出发”，界面才能修改或者显示“车队”,“出发适用产品”，“所属集中开单组”。
 SR-9	外场简码,外场编码均不可重复。如果录入的已存在，提示用户已存在。
 SR-10	只有选择了“是否车队”，界面才能修改或者显示车队信息。
 SR-11	只有选择了“是否车队组”，界面才能修改或者显示车队组信息。
 SR-12	在一个事业部内，集中接送货车队编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-13	只有选择了“是否驻地部门”，界面才能修改或者显示“驻地营业部所属外场”。
 SR-14	只有选择了“是否事业部”，界面才能修改或者显示“事业部信息”。
 SR-15	事业部编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-16	最大临时欠款额度的不是人工维护，是动态变化的，根据前3个月的最高收入所在等级决定。
 SR-17	外场的部门面积要大于货区面积，外场的货区面积要大于货台面积。如果用户填写的值不满足此规则，则提示用户。
 SR-18	当有客户在某部门开临欠时，此部门的已用临欠额度做相应的更新。

 * 1.5.3	界面描述-主界面
 1.	功能按钮区域
 1)	查询按钮：输入查询条件，点击查询按钮，系统返回查询结果，刷新查询列表。
 2)	查看详细信息：点击树形结构中的组织名称，在树型结构的右边显示这个组织的详情，参见【图三：行政组织业务属性详情界面】。
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性查询条件】。
 3.	树型结构区域
 1)	树型结构展示了行政组织的名称，点击树型结构中的部门名称，在右边显示这个部门的业务属性详情。
 2)	点击树形结构的“+”，在组织树中展开该行政组织下一级的所有行政组织。点击树形结构的“-”，则收起该行政组织下一级的所有行政组织。

 1.5.5	界面描述-行政组织业务属性修改界面
 1.	功能按钮区域
 1)	保存按钮：点击保存按钮，若保存成功，提示保存成功，返回上一级界面，若保存失败，提示用户保存失败的原因，停留在当前界面。
 2)	右全移按钮：点击右全移按钮，将左框中的数据全部移到右框。
 3)	右移按钮：从左框中选择一条数据，点击右移按钮，将左框选中的数据移到右框。
 4)	左移按钮：从右框中选择一条数据，点击左移按钮，将右框选中的数据移到左框。
 5)	左全移按钮：点击左全移按钮，将右框中的数据全部移到左框。
 6)	重置按钮：点击重置按钮，恢复行政组织业务属性的初始状态。
 7)	取消按钮：点击取消按钮，退出当前界面，返回主界面。
 8)	编辑部门电子地图按钮：点击编辑部门电子地图按钮，进入“编辑部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 9)	编辑自提区域电子地图按钮：点击编辑自提区域电子地图按钮，进入“编辑自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 10)	编辑派送区域电子地图按钮：点击编辑派送区域电子地图按钮，进入“编辑派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】,【提货信息】,【外场信息】,【调度组信息】，【车队信息】，【车队组信息】，【事业部信息】。

 1.5.7	界面描述-行政组织业务属性详情界面
 2.	功能按钮区域
 1)	修改按钮：点击修改按钮，进入修改界面，参见【图二：行政组织业务属性修改界面】。
 2)	查看部门电子地图按钮：点击查看部门电子地图按钮，进入“查看部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3)	查看自提区域电子地图按钮：点击查看自提区域电子地图按钮，进入“查看自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 4)	查看派送区域电子地图按钮：点击查看派送区域电子地图按钮，进入“查看派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】，【提货信息】，【外场信息】，【调度组信息】，【车队信息】，【车队组信息】，【车队信息】，【部门基本信息】。

 SR-1	选择省份信息后，城市的选择范围自动变成已选省份所包含的城市。选择城市信息后，区县的选择范围自动变成已选城市所包含的区县。
 SR-2	只有选择了“是否营业部”，界面才能修改或者显示营业部信息。
 SR-3	只有选择了“可到达”，界面才能修改或者显示提货信息，到达适用产品。
 SR-4	只有选择了“是否外场”，界面才能修改或者显示外场信息。
 SR-5	只有选择了“是否车队调度组”，界面才能修改或者显示调度组信息。
 SR-6	只有选择了“可自提”，界面才能修改或者显示“自提区域描述”。
 SR-7	只有选择了“可派送”，界面才能修改或者显示“派送区域描述”。
 SR-8	只有选择了“可出发”，界面才能修改或者显示“车队”,“出发适用产品”，“所属集中开单组”。
 SR-9	外场简码,外场编码均不可重复。如果录入的已存在，提示用户已存在。
 SR-10	只有选择了“是否车队”，界面才能修改或者显示车队信息。
 SR-11	只有选择了“是否车队组”，界面才能修改或者显示车队组信息。
 SR-12	在一个事业部内，集中接送货车队编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-13	只有选择了“是否驻地部门”，界面才能修改或者显示“驻地营业部所属外场”。
 SR-14	只有选择了“是否事业部”，界面才能修改或者显示“事业部信息”。
 SR-15	事业部编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-16	最大临时欠款额度的不是人工维护，是动态变化的，根据前3个月的最高收入所在等级决定。
 SR-17	外场的部门面积要大于货区面积，外场的货区面积要大于货台面积。如果用户填写的值不满足此规则，则提示用户。
 SR-18	当有客户在某部门开临欠时，此部门的已用临欠额度做相应的更新。

 * 1.5.3	界面描述-主界面
 1.	功能按钮区域
 1)	查询按钮：输入查询条件，点击查询按钮，系统返回查询结果，刷新查询列表。
 2)	查看详细信息：点击树形结构中的组织名称，在树型结构的右边显示这个组织的详情，参见【图三：行政组织业务属性详情界面】。
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性查询条件】。
 3.	树型结构区域
 1)	树型结构展示了行政组织的名称，点击树型结构中的部门名称，在右边显示这个部门的业务属性详情。
 2)	点击树形结构的“+”，在组织树中展开该行政组织下一级的所有行政组织。点击树形结构的“-”，则收起该行政组织下一级的所有行政组织。

 1.5.5	界面描述-行政组织业务属性修改界面
 1.	功能按钮区域
 1)	保存按钮：点击保存按钮，若保存成功，提示保存成功，返回上一级界面，若保存失败，提示用户保存失败的原因，停留在当前界面。
 2)	右全移按钮：点击右全移按钮，将左框中的数据全部移到右框。
 3)	右移按钮：从左框中选择一条数据，点击右移按钮，将左框选中的数据移到右框。
 4)	左移按钮：从右框中选择一条数据，点击左移按钮，将右框选中的数据移到左框。
 5)	左全移按钮：点击左全移按钮，将右框中的数据全部移到左框。
 6)	重置按钮：点击重置按钮，恢复行政组织业务属性的初始状态。
 7)	取消按钮：点击取消按钮，退出当前界面，返回主界面。
 8)	编辑部门电子地图按钮：点击编辑部门电子地图按钮，进入“编辑部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 9)	编辑自提区域电子地图按钮：点击编辑自提区域电子地图按钮，进入“编辑自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 10)	编辑派送区域电子地图按钮：点击编辑派送区域电子地图按钮，进入“编辑派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】,【提货信息】,【外场信息】,【调度组信息】，【车队信息】，【车队组信息】，【事业部信息】。

 1.5.7	界面描述-行政组织业务属性详情界面
 2.	功能按钮区域
 1)	修改按钮：点击修改按钮，进入修改界面，参见【图二：行政组织业务属性修改界面】。
 2)	查看部门电子地图按钮：点击查看部门电子地图按钮，进入“查看部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3)	查看自提区域电子地图按钮：点击查看自提区域电子地图按钮，进入“查看自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 4)	查看派送区域电子地图按钮：点击查看派送区域电子地图按钮，进入“查看派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】，【提货信息】，【外场信息】，【调度组信息】，【车队信息】，【车队组信息】，【车队信息】，【部门基本信息】。

 SR-1	选择省份信息后，城市的选择范围自动变成已选省份所包含的城市。选择城市信息后，区县的选择范围自动变成已选城市所包含的区县。
 SR-2	只有选择了“是否营业部”，界面才能修改或者显示营业部信息。
 SR-3	只有选择了“可到达”，界面才能修改或者显示提货信息，到达适用产品。
 SR-4	只有选择了“是否外场”，界面才能修改或者显示外场信息。
 SR-5	只有选择了“是否车队调度组”，界面才能修改或者显示调度组信息。
 SR-6	只有选择了“可自提”，界面才能修改或者显示“自提区域描述”。
 SR-7	只有选择了“可派送”，界面才能修改或者显示“派送区域描述”。
 SR-8	只有选择了“可出发”，界面才能修改或者显示“车队”,“出发适用产品”，“所属集中开单组”。
 SR-9	外场简码,外场编码均不可重复。如果录入的已存在，提示用户已存在。
 SR-10	只有选择了“是否车队”，界面才能修改或者显示车队信息。
 SR-11	只有选择了“是否车队组”，界面才能修改或者显示车队组信息。
 SR-12	在一个事业部内，集中接送货车队编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-13	只有选择了“是否驻地部门”，界面才能修改或者显示“驻地营业部所属外场”。
 SR-14	只有选择了“是否事业部”，界面才能修改或者显示“事业部信息”。
 SR-15	事业部编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-16	最大临时欠款额度的不是人工维护，是动态变化的，根据前3个月的最高收入所在等级决定。
 SR-17	外场的部门面积要大于货区面积，外场的货区面积要大于货台面积。如果用户填写的值不满足此规则，则提示用户。
 SR-18	当有客户在某部门开临欠时，此部门的已用临欠额度做相应的更新。
 * 1.5.3	界面描述-主界面
 1.	功能按钮区域
 1)	查询按钮：输入查询条件，点击查询按钮，系统返回查询结果，刷新查询列表。
 2)	查看详细信息：点击树形结构中的组织名称，在树型结构的右边显示这个组织的详情，参见【图三：行政组织业务属性详情界面】。
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性查询条件】。
 3.	树型结构区域
 1)	树型结构展示了行政组织的名称，点击树型结构中的部门名称，在右边显示这个部门的业务属性详情。
 2)	点击树形结构的“+”，在组织树中展开该行政组织下一级的所有行政组织。点击树形结构的“-”，则收起该行政组织下一级的所有行政组织。

 1.5.5	界面描述-行政组织业务属性修改界面
 1.	功能按钮区域
 1)	保存按钮：点击保存按钮，若保存成功，提示保存成功，返回上一级界面，若保存失败，提示用户保存失败的原因，停留在当前界面。
 2)	右全移按钮：点击右全移按钮，将左框中的数据全部移到右框。
 3)	右移按钮：从左框中选择一条数据，点击右移按钮，将左框选中的数据移到右框。
 4)	左移按钮：从右框中选择一条数据，点击左移按钮，将右框选中的数据移到左框。
 5)	左全移按钮：点击左全移按钮，将右框中的数据全部移到左框。
 6)	重置按钮：点击重置按钮，恢复行政组织业务属性的初始状态。
 7)	取消按钮：点击取消按钮，退出当前界面，返回主界面。
 8)	编辑部门电子地图按钮：点击编辑部门电子地图按钮，进入“编辑部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 9)	编辑自提区域电子地图按钮：点击编辑自提区域电子地图按钮，进入“编辑自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 10)	编辑派送区域电子地图按钮：点击编辑派送区域电子地图按钮，进入“编辑派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】,【提货信息】,【外场信息】,【调度组信息】，【车队信息】，【车队组信息】，【事业部信息】。

 1.5.7	界面描述-行政组织业务属性详情界面
 2.	功能按钮区域
 1)	修改按钮：点击修改按钮，进入修改界面，参见【图二：行政组织业务属性修改界面】。
 2)	查看部门电子地图按钮：点击查看部门电子地图按钮，进入“查看部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3)	查看自提区域电子地图按钮：点击查看自提区域电子地图按钮，进入“查看自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 4)	查看派送区域电子地图按钮：点击查看派送区域电子地图按钮，进入“查看派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】，【提货信息】，【外场信息】，【调度组信息】，【车队信息】，【车队组信息】，【车队信息】，【部门基本信息】。

 SR-1	选择省份信息后，城市的选择范围自动变成已选省份所包含的城市。选择城市信息后，区县的选择范围自动变成已选城市所包含的区县。
 SR-2	只有选择了“是否营业部”，界面才能修改或者显示营业部信息。
 SR-3	只有选择了“可到达”，界面才能修改或者显示提货信息，到达适用产品。
 SR-4	只有选择了“是否外场”，界面才能修改或者显示外场信息。
 SR-5	只有选择了“是否车队调度组”，界面才能修改或者显示调度组信息。
 SR-6	只有选择了“可自提”，界面才能修改或者显示“自提区域描述”。
 SR-7	只有选择了“可派送”，界面才能修改或者显示“派送区域描述”。
 SR-8	只有选择了“可出发”，界面才能修改或者显示“车队”,“出发适用产品”，“所属集中开单组”。
 SR-9	外场简码,外场编码均不可重复。如果录入的已存在，提示用户已存在。
 SR-10	只有选择了“是否车队”，界面才能修改或者显示车队信息。
 SR-11	只有选择了“是否车队组”，界面才能修改或者显示车队组信息。
 SR-12	在一个事业部内，集中接送货车队编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-13	只有选择了“是否驻地部门”，界面才能修改或者显示“驻地营业部所属外场”。
 SR-14	只有选择了“是否事业部”，界面才能修改或者显示“事业部信息”。
 SR-15	事业部编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-16	最大临时欠款额度的不是人工维护，是动态变化的，根据前3个月的最高收入所在等级决定。
 SR-17	外场的部门面积要大于货区面积，外场的货区面积要大于货台面积。如果用户填写的值不满足此规则，则提示用户。
 SR-18	当有客户在某部门开临欠时，此部门的已用临欠额度做相应的更新。
 * 1.5.3	界面描述-主界面
 1.	功能按钮区域
 1)	查询按钮：输入查询条件，点击查询按钮，系统返回查询结果，刷新查询列表。
 2)	查看详细信息：点击树形结构中的组织名称，在树型结构的右边显示这个组织的详情，参见【图三：行政组织业务属性详情界面】。
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性查询条件】。
 3.	树型结构区域
 1)	树型结构展示了行政组织的名称，点击树型结构中的部门名称，在右边显示这个部门的业务属性详情。
 2)	点击树形结构的“+”，在组织树中展开该行政组织下一级的所有行政组织。点击树形结构的“-”，则收起该行政组织下一级的所有行政组织。

 1.5.5	界面描述-行政组织业务属性修改界面
 1.	功能按钮区域
 1)	保存按钮：点击保存按钮，若保存成功，提示保存成功，返回上一级界面，若保存失败，提示用户保存失败的原因，停留在当前界面。
 2)	右全移按钮：点击右全移按钮，将左框中的数据全部移到右框。
 3)	右移按钮：从左框中选择一条数据，点击右移按钮，将左框选中的数据移到右框。
 4)	左移按钮：从右框中选择一条数据，点击左移按钮，将右框选中的数据移到左框。
 5)	左全移按钮：点击左全移按钮，将右框中的数据全部移到左框。
 6)	重置按钮：点击重置按钮，恢复行政组织业务属性的初始状态。
 7)	取消按钮：点击取消按钮，退出当前界面，返回主界面。
 8)	编辑部门电子地图按钮：点击编辑部门电子地图按钮，进入“编辑部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 9)	编辑自提区域电子地图按钮：点击编辑自提区域电子地图按钮，进入“编辑自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 10)	编辑派送区域电子地图按钮：点击编辑派送区域电子地图按钮，进入“编辑派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】,【提货信息】,【外场信息】,【调度组信息】，【车队信息】，【车队组信息】，【事业部信息】。

 1.5.7	界面描述-行政组织业务属性详情界面
 2.	功能按钮区域
 1)	修改按钮：点击修改按钮，进入修改界面，参见【图二：行政组织业务属性修改界面】。
 2)	查看部门电子地图按钮：点击查看部门电子地图按钮，进入“查看部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3)	查看自提区域电子地图按钮：点击查看自提区域电子地图按钮，进入“查看自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 4)	查看派送区域电子地图按钮：点击查看派送区域电子地图按钮，进入“查看派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】，【提货信息】，【外场信息】，【调度组信息】，【车队信息】，【车队组信息】，【车队信息】，【部门基本信息】。

 SR-1	选择省份信息后，城市的选择范围自动变成已选省份所包含的城市。选择城市信息后，区县的选择范围自动变成已选城市所包含的区县。
 SR-2	只有选择了“是否营业部”，界面才能修改或者显示营业部信息。
 SR-3	只有选择了“可到达”，界面才能修改或者显示提货信息，到达适用产品。
 SR-4	只有选择了“是否外场”，界面才能修改或者显示外场信息。
 SR-5	只有选择了“是否车队调度组”，界面才能修改或者显示调度组信息。
 SR-6	只有选择了“可自提”，界面才能修改或者显示“自提区域描述”。
 SR-7	只有选择了“可派送”，界面才能修改或者显示“派送区域描述”。
 SR-8	只有选择了“可出发”，界面才能修改或者显示“车队”,“出发适用产品”，“所属集中开单组”。
 SR-9	外场简码,外场编码均不可重复。如果录入的已存在，提示用户已存在。
 SR-10	只有选择了“是否车队”，界面才能修改或者显示车队信息。
 SR-11	只有选择了“是否车队组”，界面才能修改或者显示车队组信息。
 SR-12	在一个事业部内，集中接送货车队编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-13	只有选择了“是否驻地部门”，界面才能修改或者显示“驻地营业部所属外场”。
 SR-14	只有选择了“是否事业部”，界面才能修改或者显示“事业部信息”。
 SR-15	事业部编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-16	最大临时欠款额度的不是人工维护，是动态变化的，根据前3个月的最高收入所在等级决定。
 SR-17	外场的部门面积要大于货区面积，外场的货区面积要大于货台面积。如果用户填写的值不满足此规则，则提示用户。
 SR-18	当有客户在某部门开临欠时，此部门的已用临欠额度做相应的更新。
 * 1.5.3	界面描述-主界面
 1.	功能按钮区域
 1)	查询按钮：输入查询条件，点击查询按钮，系统返回查询结果，刷新查询列表。
 2)	查看详细信息：点击树形结构中的组织名称，在树型结构的右边显示这个组织的详情，参见【图三：行政组织业务属性详情界面】。
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性查询条件】。
 3.	树型结构区域
 1)	树型结构展示了行政组织的名称，点击树型结构中的部门名称，在右边显示这个部门的业务属性详情。
 2)	点击树形结构的“+”，在组织树中展开该行政组织下一级的所有行政组织。点击树形结构的“-”，则收起该行政组织下一级的所有行政组织。

 1.5.5	界面描述-行政组织业务属性修改界面
 1.	功能按钮区域
 1)	保存按钮：点击保存按钮，若保存成功，提示保存成功，返回上一级界面，若保存失败，提示用户保存失败的原因，停留在当前界面。
 2)	右全移按钮：点击右全移按钮，将左框中的数据全部移到右框。
 3)	右移按钮：从左框中选择一条数据，点击右移按钮，将左框选中的数据移到右框。
 4)	左移按钮：从右框中选择一条数据，点击左移按钮，将右框选中的数据移到左框。
 5)	左全移按钮：点击左全移按钮，将右框中的数据全部移到左框。
 6)	重置按钮：点击重置按钮，恢复行政组织业务属性的初始状态。
 7)	取消按钮：点击取消按钮，退出当前界面，返回主界面。
 8)	编辑部门电子地图按钮：点击编辑部门电子地图按钮，进入“编辑部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 9)	编辑自提区域电子地图按钮：点击编辑自提区域电子地图按钮，进入“编辑自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 10)	编辑派送区域电子地图按钮：点击编辑派送区域电子地图按钮，进入“编辑派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】,【提货信息】,【外场信息】,【调度组信息】，【车队信息】，【车队组信息】，【事业部信息】。

 1.5.7	界面描述-行政组织业务属性详情界面
 2.	功能按钮区域
 1)	修改按钮：点击修改按钮，进入修改界面，参见【图二：行政组织业务属性修改界面】。
 2)	查看部门电子地图按钮：点击查看部门电子地图按钮，进入“查看部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3)	查看自提区域电子地图按钮：点击查看自提区域电子地图按钮，进入“查看自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 4)	查看派送区域电子地图按钮：点击查看派送区域电子地图按钮，进入“查看派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】，【提货信息】，【外场信息】，【调度组信息】，【车队信息】，【车队组信息】，【车队信息】，【部门基本信息】。

 SR-1	选择省份信息后，城市的选择范围自动变成已选省份所包含的城市。选择城市信息后，区县的选择范围自动变成已选城市所包含的区县。
 SR-2	只有选择了“是否营业部”，界面才能修改或者显示营业部信息。
 SR-3	只有选择了“可到达”，界面才能修改或者显示提货信息，到达适用产品。
 SR-4	只有选择了“是否外场”，界面才能修改或者显示外场信息。
 SR-5	只有选择了“是否车队调度组”，界面才能修改或者显示调度组信息。
 SR-6	只有选择了“可自提”，界面才能修改或者显示“自提区域描述”。
 SR-7	只有选择了“可派送”，界面才能修改或者显示“派送区域描述”。
 SR-8	只有选择了“可出发”，界面才能修改或者显示“车队”,“出发适用产品”，“所属集中开单组”。
 SR-9	外场简码,外场编码均不可重复。如果录入的已存在，提示用户已存在。
 SR-10	只有选择了“是否车队”，界面才能修改或者显示车队信息。
 SR-11	只有选择了“是否车队组”，界面才能修改或者显示车队组信息。
 SR-12	在一个事业部内，集中接送货车队编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-13	只有选择了“是否驻地部门”，界面才能修改或者显示“驻地营业部所属外场”。
 SR-14	只有选择了“是否事业部”，界面才能修改或者显示“事业部信息”。
 SR-15	事业部编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-16	最大临时欠款额度的不是人工维护，是动态变化的，根据前3个月的最高收入所在等级决定。
 SR-17	外场的部门面积要大于货区面积，外场的货区面积要大于货台面积。如果用户填写的值不满足此规则，则提示用户。
 SR-18	当有客户在某部门开临欠时，此部门的已用临欠额度做相应的更新。
 * 1.5.3	界面描述-主界面
 1.	功能按钮区域
 1)	查询按钮：输入查询条件，点击查询按钮，系统返回查询结果，刷新查询列表。
 2)	查看详细信息：点击树形结构中的组织名称，在树型结构的右边显示这个组织的详情，参见【图三：行政组织业务属性详情界面】。
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性查询条件】。
 3.	树型结构区域
 1)	树型结构展示了行政组织的名称，点击树型结构中的部门名称，在右边显示这个部门的业务属性详情。
 2)	点击树形结构的“+”，在组织树中展开该行政组织下一级的所有行政组织。点击树形结构的“-”，则收起该行政组织下一级的所有行政组织。

 1.5.5	界面描述-行政组织业务属性修改界面
 1.	功能按钮区域
 1)	保存按钮：点击保存按钮，若保存成功，提示保存成功，返回上一级界面，若保存失败，提示用户保存失败的原因，停留在当前界面。
 2)	右全移按钮：点击右全移按钮，将左框中的数据全部移到右框。
 3)	右移按钮：从左框中选择一条数据，点击右移按钮，将左框选中的数据移到右框。
 4)	左移按钮：从右框中选择一条数据，点击左移按钮，将右框选中的数据移到左框。
 5)	左全移按钮：点击左全移按钮，将右框中的数据全部移到左框。
 6)	重置按钮：点击重置按钮，恢复行政组织业务属性的初始状态。
 7)	取消按钮：点击取消按钮，退出当前界面，返回主界面。
 8)	编辑部门电子地图按钮：点击编辑部门电子地图按钮，进入“编辑部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 9)	编辑自提区域电子地图按钮：点击编辑自提区域电子地图按钮，进入“编辑自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 10)	编辑派送区域电子地图按钮：点击编辑派送区域电子地图按钮，进入“编辑派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】,【提货信息】,【外场信息】,【调度组信息】，【车队信息】，【车队组信息】，【事业部信息】。

 1.5.7	界面描述-行政组织业务属性详情界面
 2.	功能按钮区域
 1)	修改按钮：点击修改按钮，进入修改界面，参见【图二：行政组织业务属性修改界面】。
 2)	查看部门电子地图按钮：点击查看部门电子地图按钮，进入“查看部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3)	查看自提区域电子地图按钮：点击查看自提区域电子地图按钮，进入“查看自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 4)	查看派送区域电子地图按钮：点击查看派送区域电子地图按钮，进入“查看派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】，【提货信息】，【外场信息】，【调度组信息】，【车队信息】，【车队组信息】，【车队信息】，【部门基本信息】。

 SR-1	选择省份信息后，城市的选择范围自动变成已选省份所包含的城市。选择城市信息后，区县的选择范围自动变成已选城市所包含的区县。
 SR-2	只有选择了“是否营业部”，界面才能修改或者显示营业部信息。
 SR-3	只有选择了“可到达”，界面才能修改或者显示提货信息，到达适用产品。
 SR-4	只有选择了“是否外场”，界面才能修改或者显示外场信息。
 SR-5	只有选择了“是否车队调度组”，界面才能修改或者显示调度组信息。
 SR-6	只有选择了“可自提”，界面才能修改或者显示“自提区域描述”。
 SR-7	只有选择了“可派送”，界面才能修改或者显示“派送区域描述”。
 SR-8	只有选择了“可出发”，界面才能修改或者显示“车队”,“出发适用产品”，“所属集中开单组”。
 SR-9	外场简码,外场编码均不可重复。如果录入的已存在，提示用户已存在。
 SR-10	只有选择了“是否车队”，界面才能修改或者显示车队信息。
 SR-11	只有选择了“是否车队组”，界面才能修改或者显示车队组信息。
 SR-12	在一个事业部内，集中接送货车队编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-13	只有选择了“是否驻地部门”，界面才能修改或者显示“驻地营业部所属外场”。
 SR-14	只有选择了“是否事业部”，界面才能修改或者显示“事业部信息”。
 SR-15	事业部编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-16	最大临时欠款额度的不是人工维护，是动态变化的，根据前3个月的最高收入所在等级决定。
 SR-17	外场的部门面积要大于货区面积，外场的货区面积要大于货台面积。如果用户填写的值不满足此规则，则提示用户。
 SR-18	当有客户在某部门开临欠时，此部门的已用临欠额度做相应的更新。
 * 1.5.3	界面描述-主界面
 1.	功能按钮区域
 1)	查询按钮：输入查询条件，点击查询按钮，系统返回查询结果，刷新查询列表。
 2)	查看详细信息：点击树形结构中的组织名称，在树型结构的右边显示这个组织的详情，参见【图三：行政组织业务属性详情界面】。
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性查询条件】。
 3.	树型结构区域
 1)	树型结构展示了行政组织的名称，点击树型结构中的部门名称，在右边显示这个部门的业务属性详情。
 2)	点击树形结构的“+”，在组织树中展开该行政组织下一级的所有行政组织。点击树形结构的“-”，则收起该行政组织下一级的所有行政组织。

 1.5.5	界面描述-行政组织业务属性修改界面
 1.	功能按钮区域
 1)	保存按钮：点击保存按钮，若保存成功，提示保存成功，返回上一级界面，若保存失败，提示用户保存失败的原因，停留在当前界面。
 2)	右全移按钮：点击右全移按钮，将左框中的数据全部移到右框。
 3)	右移按钮：从左框中选择一条数据，点击右移按钮，将左框选中的数据移到右框。
 4)	左移按钮：从右框中选择一条数据，点击左移按钮，将右框选中的数据移到左框。
 5)	左全移按钮：点击左全移按钮，将右框中的数据全部移到左框。
 6)	重置按钮：点击重置按钮，恢复行政组织业务属性的初始状态。
 7)	取消按钮：点击取消按钮，退出当前界面，返回主界面。
 8)	编辑部门电子地图按钮：点击编辑部门电子地图按钮，进入“编辑部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 9)	编辑自提区域电子地图按钮：点击编辑自提区域电子地图按钮，进入“编辑自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 10)	编辑派送区域电子地图按钮：点击编辑派送区域电子地图按钮，进入“编辑派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】,【提货信息】,【外场信息】,【调度组信息】，【车队信息】，【车队组信息】，【事业部信息】。

 1.5.7	界面描述-行政组织业务属性详情界面
 2.	功能按钮区域
 1)	修改按钮：点击修改按钮，进入修改界面，参见【图二：行政组织业务属性修改界面】。
 2)	查看部门电子地图按钮：点击查看部门电子地图按钮，进入“查看部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3)	查看自提区域电子地图按钮：点击查看自提区域电子地图按钮，进入“查看自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 4)	查看派送区域电子地图按钮：点击查看派送区域电子地图按钮，进入“查看派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】，【提货信息】，【外场信息】，【调度组信息】，【车队信息】，【车队组信息】，【车队信息】，【部门基本信息】。

 SR-1	选择省份信息后，城市的选择范围自动变成已选省份所包含的城市。选择城市信息后，区县的选择范围自动变成已选城市所包含的区县。
 SR-2	只有选择了“是否营业部”，界面才能修改或者显示营业部信息。
 SR-3	只有选择了“可到达”，界面才能修改或者显示提货信息，到达适用产品。
 SR-4	只有选择了“是否外场”，界面才能修改或者显示外场信息。
 SR-5	只有选择了“是否车队调度组”，界面才能修改或者显示调度组信息。
 SR-6	只有选择了“可自提”，界面才能修改或者显示“自提区域描述”。
 SR-7	只有选择了“可派送”，界面才能修改或者显示“派送区域描述”。
 SR-8	只有选择了“可出发”，界面才能修改或者显示“车队”,“出发适用产品”，“所属集中开单组”。
 SR-9	外场简码,外场编码均不可重复。如果录入的已存在，提示用户已存在。
 SR-10	只有选择了“是否车队”，界面才能修改或者显示车队信息。
 SR-11	只有选择了“是否车队组”，界面才能修改或者显示车队组信息。
 SR-12	在一个事业部内，集中接送货车队编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-13	只有选择了“是否驻地部门”，界面才能修改或者显示“驻地营业部所属外场”。
 SR-14	只有选择了“是否事业部”，界面才能修改或者显示“事业部信息”。
 SR-15	事业部编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-16	最大临时欠款额度的不是人工维护，是动态变化的，根据前3个月的最高收入所在等级决定。
 SR-17	外场的部门面积要大于货区面积，外场的货区面积要大于货台面积。如果用户填写的值不满足此规则，则提示用户。
 SR-18	当有客户在某部门开临欠时，此部门的已用临欠额度做相应的更新。
 * 1.5.3	界面描述-主界面
 1.	功能按钮区域
 1)	查询按钮：输入查询条件，点击查询按钮，系统返回查询结果，刷新查询列表。
 2)	查看详细信息：点击树形结构中的组织名称，在树型结构的右边显示这个组织的详情，参见【图三：行政组织业务属性详情界面】。
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性查询条件】。
 3.	树型结构区域
 1)	树型结构展示了行政组织的名称，点击树型结构中的部门名称，在右边显示这个部门的业务属性详情。
 2)	点击树形结构的“+”，在组织树中展开该行政组织下一级的所有行政组织。点击树形结构的“-”，则收起该行政组织下一级的所有行政组织。

 1.5.5	界面描述-行政组织业务属性修改界面
 1.	功能按钮区域
 1)	保存按钮：点击保存按钮，若保存成功，提示保存成功，返回上一级界面，若保存失败，提示用户保存失败的原因，停留在当前界面。
 2)	右全移按钮：点击右全移按钮，将左框中的数据全部移到右框。
 3)	右移按钮：从左框中选择一条数据，点击右移按钮，将左框选中的数据移到右框。
 4)	左移按钮：从右框中选择一条数据，点击左移按钮，将右框选中的数据移到左框。
 5)	左全移按钮：点击左全移按钮，将右框中的数据全部移到左框。
 6)	重置按钮：点击重置按钮，恢复行政组织业务属性的初始状态。
 7)	取消按钮：点击取消按钮，退出当前界面，返回主界面。
 8)	编辑部门电子地图按钮：点击编辑部门电子地图按钮，进入“编辑部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 9)	编辑自提区域电子地图按钮：点击编辑自提区域电子地图按钮，进入“编辑自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 10)	编辑派送区域电子地图按钮：点击编辑派送区域电子地图按钮，进入“编辑派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 2.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】,【提货信息】,【外场信息】,【调度组信息】，【车队信息】，【车队组信息】，【事业部信息】。

 1.5.7	界面描述-行政组织业务属性详情界面
 2.	功能按钮区域
 1)	修改按钮：点击修改按钮，进入修改界面，参见【图二：行政组织业务属性修改界面】。
 2)	查看部门电子地图按钮：点击查看部门电子地图按钮，进入“查看部门电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3)	查看自提区域电子地图按钮：点击查看自提区域电子地图按钮，进入“查看自提区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 4)	查看派送区域电子地图按钮：点击查看派送区域电子地图按钮，进入“查看派送区域电子地图”界面。参见【图四：编辑或查看电子地图界面】
 3.	字段输入区域
 1)	参见数据元素【行政组织业务属性信息】，【提货信息】，【外场信息】，【调度组信息】，【车队信息】，【车队组信息】，【车队信息】，【部门基本信息】。

 SR-1	选择省份信息后，城市的选择范围自动变成已选省份所包含的城市。选择城市信息后，区县的选择范围自动变成已选城市所包含的区县。
 SR-2	只有选择了“是否营业部”，界面才能修改或者显示营业部信息。
 SR-3	只有选择了“可到达”，界面才能修改或者显示提货信息，到达适用产品。
 SR-4	只有选择了“是否外场”，界面才能修改或者显示外场信息。
 SR-5	只有选择了“是否车队调度组”，界面才能修改或者显示调度组信息。
 SR-6	只有选择了“可自提”，界面才能修改或者显示“自提区域描述”。
 SR-7	只有选择了“可派送”，界面才能修改或者显示“派送区域描述”。
 SR-8	只有选择了“可出发”，界面才能修改或者显示“车队”,“出发适用产品”，“所属集中开单组”。
 SR-9	外场简码,外场编码均不可重复。如果录入的已存在，提示用户已存在。
 SR-10	只有选择了“是否车队”，界面才能修改或者显示车队信息。
 SR-11	只有选择了“是否车队组”，界面才能修改或者显示车队组信息。
 SR-12	在一个事业部内，集中接送货车队编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-13	只有选择了“是否驻地部门”，界面才能修改或者显示“驻地营业部所属外场”。
 SR-14	只有选择了“是否事业部”，界面才能修改或者显示“事业部信息”。
 SR-15	事业部编码不能重复，当输入的编码已存在时，提示用户编码已存在。
 SR-16	最大临时欠款额度的不是人工维护，是动态变化的，根据前3个月的最高收入所在等级决定。
 SR-17	外场的部门面积要大于货区面积，外场的货区面积要大于货台面积。如果用户填写的值不满足此规则，则提示用户。
 SR-18	当有客户在某部门开临欠时，此部门的已用临欠额度做相应的更新。

 */
package com.deppon.foss.module.base.baseinfo.server.service.impl;

import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang.ArrayUtils;
import org.apache.commons.lang.BooleanUtils;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.transaction.annotation.Transactional;
import com.deppon.foss.base.util.ComnConst;
import com.deppon.foss.base.util.SqlUtil;
import com.deppon.foss.base.util.define.NumberConstants;
import com.deppon.foss.framework.cache.CacheManager;
import com.deppon.foss.framework.cache.ICache;
import com.deppon.foss.framework.exception.BusinessException;
import com.deppon.foss.framework.server.components.logger.LogBuffer;
import com.deppon.foss.framework.shared.util.string.StringUtil;
import com.deppon.foss.module.base.baseinfo.api.server.dao.IMotorcadeDao;
import com.deppon.foss.module.base.baseinfo.api.server.dao.IOrgAdministrativeInfoDao;
import com.deppon.foss.module.base.baseinfo.api.server.dao.IOrgAdministrativeInfoToUUDao;
import com.deppon.foss.module.base.baseinfo.api.server.dao.IOutfieldDao;
import com.deppon.foss.module.base.baseinfo.api.server.dao.ISaleDepartmentDao;
import com.deppon.foss.module.base.baseinfo.api.server.service.IAdministrativeRegionsService;
import com.deppon.foss.module.base.baseinfo.api.server.service.IBillingGroupTransFerService;
import com.deppon.foss.module.base.baseinfo.api.server.service.IEmployeeService;
import com.deppon.foss.module.base.baseinfo.api.server.service.IFinancialOrganizationsService;
import com.deppon.foss.module.base.baseinfo.api.server.service.ILdpAgencyDeptService;
import com.deppon.foss.module.base.baseinfo.api.server.service.ILineService;
import com.deppon.foss.module.base.baseinfo.api.server.service.IMotorcadeServeDistrictService;
import com.deppon.foss.module.base.baseinfo.api.server.service.IMotorcadeServeSalesAreaService;
import com.deppon.foss.module.base.baseinfo.api.server.service.IMotorcadeService;
import com.deppon.foss.module.base.baseinfo.api.server.service.IOrgAdministrativeInfoService;
import com.deppon.foss.module.base.baseinfo.api.server.service.IOrgGisUrlService;
import com.deppon.foss.module.base.baseinfo.api.server.service.IOutfieldService;
import com.deppon.foss.module.base.baseinfo.api.server.service.ISaleDepartmentService;
import com.deppon.foss.module.base.baseinfo.api.server.service.ISalesBillingGroupService;
import com.deppon.foss.module.base.baseinfo.api.server.service.ISalesDescExpandService;
import com.deppon.foss.module.base.baseinfo.api.server.service.ISalesMotorcadeService;
import com.deppon.foss.module.base.baseinfo.api.server.service.ISalesProductService;
import com.deppon.foss.module.base.baseinfo.api.server.service.ISecurityTfrMotorcadeService;
import com.deppon.foss.module.base.baseinfo.api.server.service.IUserDeptDataService;
import com.deppon.foss.module.base.baseinfo.api.server.service.IVehicleAgencyCompanyService;
import com.deppon.foss.module.base.baseinfo.api.server.service.IVehicleAgencyDeptService;
import com.deppon.foss.module.base.baseinfo.api.server.service.esb.ISendOrgAdministrativeInfoService;
import com.deppon.foss.module.base.baseinfo.api.server.service.esb.ISyncInformationService;
import com.deppon.foss.module.base.baseinfo.api.server.service.esb.ISyncSecurityTfrMotorcadeService;
import com.deppon.foss.module.base.baseinfo.api.server.service.esb.ISyncSalesDescExpandService;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.BillingGroupTransFerEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.EmployeeEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.EsbCallBackLog;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.FinancialOrganizationsEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.MotorcadeEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.MotorcadeServeDistrictEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.MotorcadeServeSalesAreaEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.OrgAdministrativeInfoEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.OrgAdministrativeInfoToUUEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.OuterBranchEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.OuterBranchExpressEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.OutfieldEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.SaleDepartmentEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.SalesBillingGroupEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.SalesDescExpandEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.SalesMotorcadeEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.SalesProductEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.SecurityTfrMotorcadeEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.vo.OrgAdministrativeInfoVo;
import com.deppon.foss.util.common.FossTTLCache;
import com.deppon.foss.util.define.FossConstants;
import com.google.inject.Inject;

/**
 * 组织信息 Service 实现
 * 
 * @author 087584-foss-lijun
 * @date 2012-11-2 下午2:41:34
 * 
 */
public class OrgAdministrativeInfoService implements
		IOrgAdministrativeInfoService {

	/**
	 * 日志类
	 */
	private static final Logger LOGGER = LoggerFactory
			.getLogger(OrgAdministrativeInfoService.class);

	private IUserDeptDataService userDeptDataService;
	
	/**
	 * 
	 * vehicleAgencyDeptService
	 */
	@Inject
	private IVehicleAgencyDeptService vehicleAgencyDeptService;

	
	/**
	 * 保安组
	 */
	private ISecurityTfrMotorcadeService securityTfrMotorcadeService;
	/**
	 * 
	 * vehicleAgencyCompanyService
	 */
	@Inject
	private IVehicleAgencyCompanyService vehicleAgencyCompanyService;

	/**
	 * 
	 * orgAdministrativeInfoDao
	 */
	@Inject
	private IOrgAdministrativeInfoDao orgAdministrativeInfoDao;

	/**
	 * 
	 * financialOrganizationsService
	 */
	@Inject
	private IFinancialOrganizationsService financialOrganizationsService;
	
	private ILdpAgencyDeptService ldpAgencyDeptService;

	/**
	 * 
	 * administrativeRegionsService
	 */
	@Inject
	private IAdministrativeRegionsService administrativeRegionsService;

	/**
	 * 
	 * saleDepartmentDao
	 */
	@Inject
	private ISaleDepartmentDao saleDepartmentDao;

	/**
	 * 
	 * motorcadeDao
	 */
	@Inject
	private IMotorcadeDao motorcadeDao;

	/**
	 * 
	 * outfieldDao
	 */
	@Inject
	private IOutfieldDao outfieldDao;

	/**
	 * 外场service
	 */
	@Inject
	private IOutfieldService outfieldService;

	/**
	 * 车队service
	 */
	@Inject
	private IMotorcadeService motorcadeService;

	@Inject
	private ILineService lineService;

	/**
	 * GIS地址转换service
	 */
	private IOrgGisUrlService orgGisUrlService;
	
	private ISyncInformationService syncInformationService;
	public void setSyncInformationService(
			ISyncInformationService syncInformationService) {
		this.syncInformationService = syncInformationService;
	}

	/**
	 * 同步保安组信息service
	 */
	private ISyncSecurityTfrMotorcadeService syncSecurityTfrMotorcadeService;

	public void setSyncSecurityTfrMotorcadeService(
			ISyncSecurityTfrMotorcadeService syncSecurityTfrMotorcadeService) {
		this.syncSecurityTfrMotorcadeService = syncSecurityTfrMotorcadeService;
	}
	
	
	public void setOrgGisUrlService(IOrgGisUrlService orgGisUrlService) {
		this.orgGisUrlService = orgGisUrlService;
	}

	public void setSecurityTfrMotorcadeService(
			ISecurityTfrMotorcadeService securityTfrMotorcadeService) {
		this.securityTfrMotorcadeService = securityTfrMotorcadeService;
	}

	/**
	 * 撤销组织提醒"接口结果操作Service
	 */
//	private IOrgAdministrativeInfoRemindService orgAdministrativeInfoRemindService;
//	
//	public void setOrgAdministrativeInfoRemindService(
//			IOrgAdministrativeInfoRemindService orgAdministrativeInfoRemindService) {
//		this.orgAdministrativeInfoRemindService = orgAdministrativeInfoRemindService;
//	}

	/**
	 * @param lineService
	 *            the lineService to set
	 */
	public void setLineService(ILineService lineService) {
		this.lineService = lineService;
	}

	/**
	 * 车队服务营业区
	 */
	private IMotorcadeServeSalesAreaService motorcadeServeSalesAreaService;

	/**
	 * 车队负责行政区域
	 */
	private IMotorcadeServeDistrictService motorcadeServeDistrictService;

	/**
	 * 营业部service
	 */
	@Inject
	private ISaleDepartmentService saleDepartmentService;

	/**
	 * 营业部下产品
	 */
	private ISalesProductService salesProductService;

	/**
	 * 营业部下车队
	 */
	private ISalesMotorcadeService salesMotorcadeService;

	/**
	 * 营业部集中开单组
	 */
	@Inject
	private ISalesBillingGroupService salesBillingGroupService;

	/**
	 * 营业部自提派送区域描述扩展
	 */
	@Inject
	private ISalesDescExpandService salesDescExpandService;
	
	/**
	 * 同步营业部自提派送区域描述扩给周边系统，订单，快递等
	 */
	private ISyncSalesDescExpandService syncSalesDescExpandService;
	
	

	/**
	 * 人员Service
	 */
	private IEmployeeService employeeService;

	public void setEmployeeService(IEmployeeService employeeService) {
		this.employeeService = employeeService;
	}
	
	/**
	 * 集中开单组对应外场
	 */
	private IBillingGroupTransFerService billingGroupTransFerService;

	public void setBillingGroupTransFerService(
			IBillingGroupTransFerService billingGroupTransFerService) {
		this.billingGroupTransFerService = billingGroupTransFerService;
	}

	/**
	 * @param outfieldService
	 *            the outfieldService to set
	 */
	public void setOutfieldService(IOutfieldService outfieldService) {
		this.outfieldService = outfieldService;
	}

	/**
	 * @param motorcadeService
	 *            the motorcadeService to set
	 */
	public void setMotorcadeService(IMotorcadeService motorcadeService) {
		this.motorcadeService = motorcadeService;
	}

	/**
	 * @param motorcadeServeSalesAreaService
	 *            the motorcadeServeSalesAreaService to set
	 */
	public void setMotorcadeServeSalesAreaService(
			IMotorcadeServeSalesAreaService motorcadeServeSalesAreaService) {
		this.motorcadeServeSalesAreaService = motorcadeServeSalesAreaService;
	}

	/**
	 * @param motorcadeServeDistrictService
	 *            the motorcadeServeDistrictService to set
	 */
	public void setMotorcadeServeDistrictService(
			IMotorcadeServeDistrictService motorcadeServeDistrictService) {
		this.motorcadeServeDistrictService = motorcadeServeDistrictService;
	}

	/**
	 * @param saleDepartmentService
	 *            the saleDepartmentService to set
	 */
	public void setSaleDepartmentService(
			ISaleDepartmentService saleDepartmentService) {
		this.saleDepartmentService = saleDepartmentService;
	}

	/**
	 * @param salesProductService
	 *            the salesProductService to set
	 */
	public void setSalesProductService(ISalesProductService salesProductService) {
		this.salesProductService = salesProductService;
	}

	/**
	 * @param salesMotorcadeService
	 *            the salesMotorcadeService to set
	 */
	public void setSalesMotorcadeService(
			ISalesMotorcadeService salesMotorcadeService) {
		this.salesMotorcadeService = salesMotorcadeService;
	}

	/**
	 * @param salesBillingGroupService
	 *            the salesBillingGroupService to set
	 */
	public void setSalesBillingGroupService(
			ISalesBillingGroupService salesBillingGroupService) {
		this.salesBillingGroupService = salesBillingGroupService;
	}

	/**
	 * 
	 * sendOrgAdministrativeInfoService
	 */
	private ISendOrgAdministrativeInfoService sendOrgAdministrativeInfoService;

	/**
	 * 操作组织中间表的Dao
	 */
	private IOrgAdministrativeInfoToUUDao orgAdministrativeInfoToUUDao;
	/**
	 * 
	 * dpap平台日志
	 */
	private static final LogBuffer logBuffer = new LogBuffer();

	/**
	 * 
	 * @date Mar 11, 2013 1:47:09 PM
	 * @param saleDepartmentDao
	 * @see
	 */
	public void setSaleDepartmentDao(ISaleDepartmentDao saleDepartmentDao) {
		this.saleDepartmentDao = saleDepartmentDao;
	}

	/**
	 * @param vehicleAgencyCompanyService
	 *            the vehicleAgencyCompanyService to set
	 */
	public void setVehicleAgencyCompanyService(
			IVehicleAgencyCompanyService vehicleAgencyCompanyService) {
		this.vehicleAgencyCompanyService = vehicleAgencyCompanyService;
	}

	/**
	 * 
	 * @date Mar 11, 2013 1:47:15 PM
	 * @param motorcadeDao
	 * @see
	 */
	public void setMotorcadeDao(IMotorcadeDao motorcadeDao) {
		this.motorcadeDao = motorcadeDao;
	}

	/**
	 * 
	 * @date Mar 11, 2013 1:47:21 PM
	 * @param outfieldDao
	 * @see
	 */
	public void setOutfieldDao(IOutfieldDao outfieldDao) {
		this.outfieldDao = outfieldDao;
	}

	/**
	 * 
	 * @date Mar 11, 2013 1:47:43 PM
	 * @param sendOrgAdministrativeInfoService
	 * @see
	 */
	public void setSendOrgAdministrativeInfoService(
			ISendOrgAdministrativeInfoService sendOrgAdministrativeInfoService) {
		this.sendOrgAdministrativeInfoService = sendOrgAdministrativeInfoService;
	}

	/**
	 * 
	 * @date Mar 11, 2013 1:47:50 PM
	 * @param orgAdministrativeInfoDao
	 * @see
	 */
	public void setOrgAdministrativeInfoDao(
			IOrgAdministrativeInfoDao orgAdministrativeInfoDao) {
		this.orgAdministrativeInfoDao = orgAdministrativeInfoDao;
	}

	/**
	 * 
	 * @date Mar 11, 2013 1:47:55 PM
	 * @param financialOrganizationsService
	 * @see
	 */
	public void setFinancialOrganizationsService(
			IFinancialOrganizationsService financialOrganizationsService) {
		this.financialOrganizationsService = financialOrganizationsService;
	}

	/**
	 * 
	 * @date Mar 11, 2013 1:48:02 PM
	 * @param administrativeRegionsService
	 * @see
	 */
	public void setAdministrativeRegionsService(
			IAdministrativeRegionsService administrativeRegionsService) {
		this.administrativeRegionsService = administrativeRegionsService;
	}

	/**
	 * 
	 * @date Mar 13, 2013 10:31:38 AM
	 * @param vehicleAgencyDeptService
	 * @see
	 */
	public void setVehicleAgencyDeptService(
			IVehicleAgencyDeptService vehicleAgencyDeptService) {
		this.vehicleAgencyDeptService = vehicleAgencyDeptService;
	}

	
	public void setLdpAgencyDeptService(ILdpAgencyDeptService ldpAgencyDeptService) {
		this.ldpAgencyDeptService = ldpAgencyDeptService;
	}

	/**
	 * @set
	 * @param userDeptDataService
	 */
	public void setUserDeptDataService(IUserDeptDataService userDeptDataService) {
		/*
		 *@set
		 *@this.userDeptDataService = userDeptDataService
		 */
		this.userDeptDataService = userDeptDataService;
	}

	public void setOrgAdministrativeInfoToUUDao(
			IOrgAdministrativeInfoToUUDao orgAdministrativeInfoToUUDao) {
		this.orgAdministrativeInfoToUUDao = orgAdministrativeInfoToUUDao;
	}
   
	/**
	 * 组织信息 新增
	 * 
	 * @author 087584-foss-lijun
	 * @date 2012-11-2 下午2:41:34
	 * @see com.deppon.foss.module.base.baseinfo.api.server.service.IOrgAdministrativeInfoService#addOrgAdministrativeInfo(com.deppon.foss.module.base.baseinfo.api.shared.domain.OrgAdministrativeInfoEntity)
	 */
	@Override
	@Transactional
	public OrgAdministrativeInfoEntity addOrgAdministrativeInfo(
			OrgAdministrativeInfoEntity entity) {
		// 检查参数的合法性
		if (null == entity) {
			return null;
		}

		OrgAdministrativeInfoEntity entityAdd = orgAdministrativeInfoDao
				.addOrgAdministrativeInfo(entity);
		if (entityAdd == null) {
			return null;
		}

		// 同步 行政组织 到官网
		syncToOfficialWebsite(entityAdd);
//		//插入到组织中间表以备同步至UUMS系统（因为组织信息除从接口中新增外不会在FOSS中新增）
//		orgAdministrativeInfoToUUDao.addOrgAdministrativeInfoToUU(this.
//				insertAdministrativeInfoToMiddleTable(entityAdd,"ADD"));
		// 清缓存
		invalidList(entityAdd.getCode());

		//刷新用户数据权限
		userDeptDataService.addUserDeptBySyncOrg(entityAdd.getCode());
		
		return entityAdd;
	}

	/**
	 * 通过code标识来删除
	 * 
	 * @author 087584-foss-lijun
	 * @date 2012-11-2 下午2:41:34
	 * @see com.deppon.foss.module.base.baseinfo.api.server.dao.IOrgAdministrativeInfoDao#deleteOrgAdministrativeInfo(java.lang.String)
	 */
	@Override
	@Transactional
	public OrgAdministrativeInfoEntity deleteOrgAdministrativeInfo(
			OrgAdministrativeInfoEntity entity) {
		// 请求合法性判断：
		if (null == entity || StringUtils.isBlank(entity.getCode())) {
			return null;
		}
		OrgAdministrativeInfoEntity entityDelete = orgAdministrativeInfoDao
				.deleteOrgAdministrativeInfo(entity);

		entityDelete = orgAdministrativeInfoDao
				.queryLastestOrgAdministrativeInfoByCode(entity.getCode());
		if (entityDelete == null) {
			return null;
		}

		// 更新缓存
		invalidOrgCode(entityDelete.getCode());
		invalidList(entityDelete.getCode());
		invalidUnifiedCode(entityDelete.getUnifiedCode());

		// 将 作废 更新到营业部，车队，外场中
		this.deleteRely(entityDelete);

		// 同步 行政组织 到官网
		syncToOfficialWebsite(entityDelete);
//		//插入到组织中间表以备同步至UUMS系统（因为组织信息除从接口中删除外不会在FOSS中删除）
//		orgAdministrativeInfoToUUDao.addOrgAdministrativeInfoToUU(this.
//				insertAdministrativeInfoToMiddleTable(entityDelete,"DELETE"));

		return entityDelete;
	}

	/**
	 * 更新
	 * 
	 * @author 087584-foss-lijun
	 * @date 2012-11-2 下午2:41:34
	 * @see com.deppon.foss.module.base.baseinfo.api.server.dao.IOrgAdministrativeInfoDao#updateOrgAdministrativeInfo(com.deppon.foss.module.base.baseinfo.api.shared.domain.OrgAdministrativeInfoEntity)
	 */
	@Override
	@Transactional
	public OrgAdministrativeInfoEntity updateOrgAdministrativeInfo(
			OrgAdministrativeInfoEntity entity, boolean isRename) {
		// 检查参数的合法性
		if (null == entity || StringUtils.isBlank(entity.getCode())) {
			return null;
		}

		entity.setModifyDateOfUU(orgAdministrativeInfoToUUDao.querySystimestamp());//查询当前数据库时间
		OrgAdministrativeInfoEntity entityUpdate = orgAdministrativeInfoDao
				.updateOrgAdministrativeInfo(entity);
		//308865 2016-11-02接收方法返回值，重用
		OrgAdministrativeInfoToUUEntity infoToUUEntity = this.insertAdministrativeInfoToMiddleTable(entityUpdate,"UPDATE");
		//插入到组织中间表以备同步至UUMS系统
		orgAdministrativeInfoToUUDao.addOrgAdministrativeInfoToUU(infoToUUEntity);
		//插入FOSS归属字段小时间链表数据
		//插入小时间链表的更新时间与待发送给UUMS的中间表插入时间一致
		orgAdministrativeInfoToUUDao.addOrgAdministrativeInfoFOSS(infoToUUEntity);

		// 更新缓存
		invalidOrgCode(entity.getCode());
		invalidList(entity.getCode());
		invalidUnifiedCode(entity.getUnifiedCode());

		// 将名字更新到营业部，车队，外场中
		if (BooleanUtils.isTrue(isRename)) {
			// 更新营业部，车队，外场表
			relevanceOperate(entityUpdate);
			// 更新线路中的线路名称
			lineService.rename(entityUpdate.getCode(), entityUpdate.getName(),
					entityUpdate.getModifyUser());
		}

		/**
		 * 同步 行政组织 到官网
		 */

		// 存放同步对象的动态数组
		List<OrgAdministrativeInfoEntity> entitys = new ArrayList<OrgAdministrativeInfoEntity>();

		// 先查出作废的对象
		List<String> entityCondition = new ArrayList<String>();
		entityCondition.add(entity.getCode());
		List<OrgAdministrativeInfoEntity> entityResults = orgAdministrativeInfoDao
				.queryOrgAdministrativeInfoByCodeActive(entityCondition,
						FossConstants.INACTIVE);
		if (CollectionUtils.isNotEmpty(entityResults)) {
			entitys.addAll(entityResults);
		}

		// 再查出新增的对象
//		OrgAdministrativeInfoEntity entityResult = queryOrgAdministrativeInfoByCodeNoCache(entity
//				.getCode());
//		entityUpdate = this.attachSubsidiaryName(entityUpdate);
//		entityUpdate = this.attachDistrictName(entityUpdate);
//		entityUpdate = this.attachOrgName(entityUpdate);
		entitys.add(entityUpdate);

		syncToOfficialWebsite(entitys);

		return entityUpdate;
	}

	/**
	 * 以下全为查询
	 */

	/**
	 * 精确查询 通过 CODE 查询 通过组织编码在缓存中查找组织，找不到就从数据库中找
	 * 
	 * @author 087584-foss-lijun
	 * @date 2012-11-2 下午2:41:34
	 * @param 只返回表里面的基本数据
	 */
	@Override
	public OrgAdministrativeInfoEntity queryOrgAdministrativeInfoByCodeClean(
			String code) {
		if (StringUtils.isBlank(code)) {
			return null;
		}

		OrgAdministrativeInfoEntity entityResult = null;
		if (SqlUtil.loadCache) {// 客户端不读缓存
			entityResult = queryOrgCodeCache(code);
		} else {
			entityResult = orgAdministrativeInfoDao
					.queryOrgAdministrativeInfoByCode(code);
		}
		return entityResult;
	}
	
	/**
	 * 精确查询 通过 CODE在缓存中查询组织，如果缓存中没有找到再走一次数据库查询（新增方法）
	 * <p>TODO(方法详细描述说明、方法参数的具体涵义)</p> 
	 * @author 268984 
	 * @date 2016-2-24 下午2:13:36
	 * @param code
	 * @return
	 * @see
	 */
	@Override
    public OrgAdministrativeInfoEntity querySimpleOrgAdministrativeInfoByCodeCache(String code){
		if (StringUtils.isBlank(code)) {
			return null;
		}
		OrgAdministrativeInfoEntity entityResult = null;
			entityResult = queryOrgCodeCache(code);
		//如果缓存中没有找到，再走一次数据库查询	
       if(entityResult==null){        
			entityResult = orgAdministrativeInfoDao
					.queryOrgAdministrativeInfoByCode(code);
		}
		return entityResult;
    }
	/**
	 * 精确查询 通过 CODE 查询
	 * 
	 * @author 087584-foss-lijun
	 * @date 2012-11-2 下午2:41:34
	 * @param 只返回表里面的基本数据
	 */
	@Override
	public OrgAdministrativeInfoEntity queryOrgAdministrativeInfoByCodeClean(
			String code, Date billDate) {
		if (StringUtils.isBlank(code)) {
			return null;
		}
		Date date = billDate == null ? new Date() : billDate;
		List<OrgAdministrativeInfoEntity> alist = orgAdministrativeInfoDao
				.queryOrgAdministrativeInfoForCache(code, date);

		return CollectionUtils.isEmpty(alist) ? null : alist
				.get(NumberConstants.ZERO);
	}

	/**
	 * 精确查询 通过 部门编码CODE 查询
	 * 
	 * @author 087584-foss-lijun
	 * @date 2012-11-2 下午2:41:34
	 * @see com.deppon.foss.module.base.baseinfo.api.server.dao.IOrgAdministrativeInfoService#queryOrgAdministrativeInfoByCode(java.lang.String)
	 */
	@Override
	public OrgAdministrativeInfoEntity queryOrgAdministrativeInfoByCode(
			String code) {
		if (StringUtils.isBlank(code)) {
			return null;
		}

		OrgAdministrativeInfoEntity entity = null;
		if (SqlUtil.loadCache) {// 客户端不读缓存
			entity = queryOrgCodeCache(code);
		} else {
			entity = orgAdministrativeInfoDao
					.queryOrgAdministrativeInfoByCode(code);
		}
		if (entity != null) {
			entity = this.attachSubsidiaryName(entity);
			entity = this.attachDistrictName(entity);
			entity = this.attachOrgName(entity);
		}

		return entity;
	}
	/**
 	 * 精确查询 通过 部门编码CODE 查询补码
 	 * 
 	 * @author 130346-foss-lifanghong
 	 * @date 2014-01-03 下午2:41:34
 	 * @see com.deppon.foss.module.base.baseinfo.api.server.dao.IOrgAdministrativeInfoService#queryOrgAdministrativeInfoByCode(java.lang.String)
 	 */
	@Override
	public String queryComplementSimpleNameInfoByCode(
			String code){
		if(ldpAgencyDeptService.queryLdpAgencyDeptIsExistsByCode(code)){
			OuterBranchExpressEntity outerBranchExpressEntity;
			String agentDeptName;
			String complementSimpleName;
			String[] str;
			outerBranchExpressEntity = ldpAgencyDeptService.queryLdpAgencyDeptByCode(code, "Y");
			agentDeptName = outerBranchExpressEntity.getAgentDeptName();
			//落地配网点的补码截取“-”号前面的部分 厦门和福州的显示为M厦门、M福州
			if(agentDeptName.endsWith("M福建-福州网点")){
				complementSimpleName = "M福州";
			}
			if (agentDeptName.endsWith("M福建-厦门网点")){
				complementSimpleName = "M厦门";
			}else{
			str = agentDeptName.split("-");
			complementSimpleName = str[0];
			}
			return complementSimpleName;
		}else{
		if (StringUtils.isBlank(code)) {
			return null;
		}

		OrgAdministrativeInfoEntity entity = null;
		if (SqlUtil.loadCache) {// 客户端不读缓存
			entity = queryOrgCodeCache(code);
		} else {
			entity = orgAdministrativeInfoDao
					.queryOrgAdministrativeInfoByCode(code);
		}
		if (entity != null) {
			entity = this.attachSubsidiaryName(entity);
			entity = this.attachDistrictName(entity);
			entity = this.attachOrgName(entity);
			return entity.getComplementSimpleName();
		}else{
			return null;
		}

		
		}
		
	}

	/**
	 * 精确查询 (不走缓存) 通过 CODE 查询
	 * 
	 * @author 087584-foss-lijun
	 * @date 2012-11-2 下午2:41:34
	 */
	@Override
	public OrgAdministrativeInfoEntity queryOrgAdministrativeInfoByCodeNoCache(
			String code) {
		if (null == code) {
			return null;
		}
		OrgAdministrativeInfoEntity entityResult = orgAdministrativeInfoDao
				.queryOrgAdministrativeInfoByCode(code);
		entityResult = this.attachSubsidiaryName(entityResult);
		entityResult = this.attachDistrictName(entityResult);
		entityResult = this.attachOrgName(entityResult);
		return entityResult;
	}

	/**
	 * 精确查询 根据多个编码批量查询
	 * 
	 * @author 087584-foss-lijun
	 * @date 2012-10-18 下午4:1:47
	 * @see com.deppon.foss.module.base.baseinfo.api.server.dao.IOrgAdministrativeInfoService#queryOrgAdministrativeInfoByCode(java.lang.String)
	 */
	@Override
	public List<OrgAdministrativeInfoEntity> queryOrgAdministrativeInfoBatchByCode(
			String[] codes) {
		if (ArrayUtils.isEmpty(codes)) {
			return null;
		}

		// 在缓存中查找
		List<OrgAdministrativeInfoEntity> entityResults = new ArrayList<OrgAdministrativeInfoEntity>();
		if (SqlUtil.loadCache) {// 客户端不读缓存
			for (String code : codes) {
				OrgAdministrativeInfoEntity org = queryOrgCodeCache(code);
				if (org != null) {
					entityResults.add(org);
				}
			}
		}
		{
			// 如果缓存中找不到，那么到数据库中再找一遍
			if (CollectionUtils.isEmpty(entityResults)) {
				entityResults = orgAdministrativeInfoDao
						.queryOrgAdministrativeInfoBatchByCode(codes);
			}
		}

		entityResults = this.attachSubsidiaryName(entityResults);
		entityResults = this.attachDistrictName(entityResults);
		entityResults = this.attachOrgName(entityResults);
		return entityResults;
	}

	/**
	 * 精确查询 动态的查询条件。 如果传入的对象为空，传入一个对象，可查出所有的数据，如果传入的对象的属性不为空或者空白，则设置为查询条件
	 * 
	 * @author 087584-foss-lijun
	 * @date 2012-10-19 上午11:11:15
	 * @see com.deppon.foss.module.base.baseinfo.api.server.dao.IOrgAdministrativeInfoService#queryOrgAdministrativeInfoExactByEntity(com.deppon.foss.module.base.baseinfo.api.shared.domain.OrgAdministrativeInfoEntity,
	 *      int, int)
	 */
	@Override
	public List<OrgAdministrativeInfoEntity> queryOrgAdministrativeInfoExactByEntity(
			OrgAdministrativeInfoEntity entity, int start, int limit) {
		List<OrgAdministrativeInfoEntity> entityResults = orgAdministrativeInfoDao
				.queryOrgAdministrativeInfoExactByEntity(entity, start, limit);
		entityResults = this.attachSubsidiaryName(entityResults);
		entityResults = this.attachDistrictName(entityResults);
		entityResults = this.attachOrgName(entityResults);
		return entityResults;
	}

	/**
	 * 精确查询-查询总条数，用于分页 动态的查询条件。
	 * 如果传入的对象为空，传入一个对象，可查出所有的数据，如果传入的对象的属性不为空或者空白，则设置为查询条件
	 * 
	 * @author 087584-foss-lijun
	 * @date 2012-10-19 上午11:09:53
	 * @see com.deppon.foss.module.base.baseinfo.api.server.dao.IOrgAdministrativeInfoService#queryOrgAdministrativeInfoExactByEntityCount(com.deppon.foss.module.base.baseinfo.api.shared.domain.OrgAdministrativeInfoEntity)
	 */
	@Override
	public long queryOrgAdministrativeInfoExactByEntityCount(
			OrgAdministrativeInfoEntity entity) {
		return orgAdministrativeInfoDao
				.queryOrgAdministrativeInfoExactByEntityCount(entity);
	}

	/**
	 * 模糊查询 动态的查询条件。 如果传入的对象为空，传入一个对象，可查出所有的数据，如果传入的对象的属性不为空或者空白，则设置为模糊查询的查询条件
	 * 
	 * @author 087584-foss-lijun
	 * @date 2012-11-2 下午2:41:34
	 * @see com.deppon.foss.module.base.baseinfo.api.server.dao.IOrgAdministrativeInfoService#deleteOrgAdministrativeInfoMore(java.lang.String[])
	 */
	@Override
	public List<OrgAdministrativeInfoEntity> queryOrgAdministrativeInfoByEntity(
			OrgAdministrativeInfoEntity entity, int start, int limit) {
		List<OrgAdministrativeInfoEntity> entityResults = querySimpleOrgAdministrativeInfoByEntity(
				entity, start, limit);
		entityResults = this.attachSubsidiaryName(entityResults);
		entityResults = this.attachDistrictName(entityResults);
		entityResults = this.attachOrgName(entityResults);
		return entityResults;
	}

	/**
	 * 
	 * 模糊查询 动态的查询条件。 如果传入的对象为空，传入一个对象，可查出所有的数据，如果传入的对象的属性不为空或者空白，则设置为模糊查询的查询条件
	 * queryOrgAdministrativeInfoByEntity的简化方法，针对一些不需要冗余属性的查询
	 * 
	 * @author foss-zhujunyong
	 * @date May 2, 2013 4:36:01 PM
	 * @param entity
	 * @param start
	 * @param limit
	 * @return
	 * @see com.deppon.foss.module.base.baseinfo.api.server.service.IOrgAdministrativeInfoService#querySimpleOrgAdministrativeInfoByEntity(com.deppon.foss.module.base.baseinfo.api.shared.domain.OrgAdministrativeInfoEntity,
	 *      int, int)
	 */
	@Override
	public List<OrgAdministrativeInfoEntity> querySimpleOrgAdministrativeInfoByEntity(
			OrgAdministrativeInfoEntity entity, int start, int limit) {
		LOGGER.info("Enter Service querySimpleOrgAdministrativeInfoByEntity...");
		List<OrgAdministrativeInfoEntity> list = orgAdministrativeInfoDao.queryOrgAdministrativeInfoByEntity(
				entity, start, limit);
		LOGGER.info("Exit Service querySimpleOrgAdministrativeInfoByEntity...");
		return list;
	}

	/**
	 * 动态的查询条件-查询总条数。 如果传入的对象为空，传入一个对象，可查出所有的数据，如果传入的对象的属性不为空或者空白，则设置为模糊查询的查询条件
	 * 
	 * @author 087584-foss-lijun
	 * @date 2012-11-2 下午2:41:34
	 * @see com.deppon.foss.module.baseinfo.server.service.IOrgAdministrativeInfoService#queryOrgAdministrativeInfoCountByEntity(com.deppon.foss.module.base.baseinfo.api.shared.domain.district.shared.domain.OrgAdministrativeInfoEntity)
	 */
	@Override
	public long queryOrgAdministrativeInfoByEntityCount(
			OrgAdministrativeInfoEntity entity) {
		return orgAdministrativeInfoDao
				.queryOrgAdministrativeInfoByEntityCount(entity);
	}

	/**
	 * 以下为特殊查询
	 */

	/**
	 * 精确查询 通过 组织标杆编码unifiedCode 查询组织;
	 * 
	 * @author 087584-foss-lijun
	 * @date 2012-10-20 下午4:26:46
	 * @see com.deppon.foss.module.base.baseinfo.api.server.service.IOrgAdministrativeInfoService#queryOrgAdministrativeInfoNameByCode(java.lang.String)
	 */
	@Override
	public OrgAdministrativeInfoEntity queryOrgAdministrativeInfoByUnifiedCode(
			String unifiedCode) {
		if (StringUtils.isBlank(unifiedCode)) {
			return null;
		}

		OrgAdministrativeInfoEntity entityResult = queryOrgAdministrativeInfoByUnifiedCodeClean(unifiedCode);

		entityResult = this.attachSubsidiaryName(entityResult);
		entityResult = this.attachDistrictName(entityResult);
		entityResult = this.attachOrgName(entityResult);
		return entityResult;
	}

	/**
	 * 
	 * <p>
	 * 通过 组织标杆编码unifiedCode 查询组织
	 * </p>
	 * 
	 * @author foss-zhujunyong
	 * @date Mar 1, 2013 3:18:37 PM
	 * @param unifiedCode
	 * @return
	 * @see
	 */
	@Override
	public OrgAdministrativeInfoEntity queryOrgAdministrativeInfoByUnifiedCodeClean(
			String unifiedCode) {
		if (StringUtils.isBlank(unifiedCode)) {
			return null;
		}
		// 先找缓存
		OrgAdministrativeInfoEntity entityResult = null;
		if (SqlUtil.loadCache) {// 客户端不读缓存
			entityResult = queryUnifiedCodeCache(unifiedCode);
		} else {
			OrgAdministrativeInfoEntity entityCondition = new OrgAdministrativeInfoEntity();
			entityCondition.setUnifiedCode(unifiedCode);
			List<OrgAdministrativeInfoEntity> entitys = orgAdministrativeInfoDao
					.queryOrgAdministrativeInfoExactByEntity(entityCondition,
							0, 1);
			if (CollectionUtils.isNotEmpty(entitys)) {
				entityResult = entitys.get(0);
			}
		}
		return entityResult;
	}

	/**
	 * 精确查询 通过 CODE 查询 NAME
	 * 
	 * @author 087584-foss-lijun
	 * @date 2012-10-20 下午4:26:46
	 * @see com.deppon.foss.module.base.baseinfo.api.server.service.IOrgAdministrativeInfoService#queryOrgAdministrativeInfoNameByCode(java.lang.String)
	 */
	@Override
	public String queryOrgAdministrativeInfoNameByCode(String code) {
		// 检查参数
		if (StringUtils.isBlank(code)) {
			return null;
		}
		String name = null;
		// 在缓存中查找
		OrgAdministrativeInfoEntity entity = null;
		if (SqlUtil.loadCache) {// 服务器端会走这段代码 客户端直接从数据库读取 --xiaowei 添加
			entity = queryOrgCodeCache(code);
			if (entity != null) {
				name = entity.getName();
			}
		} else {
			name = orgAdministrativeInfoDao.queryOrgNameByCode(code);
		}
		return name;
	}

	/**
	 * 精确查询，
	 * 
	 * 根据行政区域编码查询部门名称
	 * 
	 * @author 087584-foss-lijun
	 * @date 2012-12-11 上午11:33:12
	 * @see com.deppon.foss.module.base.baseinfo.api.server.service.IOrgAdministrativeInfoService#queryOrgAdministrativeInfoByDistrictCode(java.lang.String,
	 *      java.util.Date)
	 */
	@Override
	public List<OrgAdministrativeInfoEntity> queryOrgAdministrativeInfoByDistrictCode(
			String districtCode, Date billDate) {
		return orgAdministrativeInfoDao
				.queryOrgAdministrativeInfoByDistrictCode(districtCode,
						billDate);
	}

	/**
	 * 下面是关联操作
	 */

	/**
	 * 行政组织更新时的关联操作
	 * 
	 * @author 087584-foss-lijun
	 * @date 2012-12-11 上午11:33:12
	 */
	public void relevanceOperate(OrgAdministrativeInfoEntity entity) {
		// 检查参数
		if (entity == null) {
			return;
		}
//BAMP监控异常优化  减少不必要的查询
//		OrgAdministrativeInfoEntity entityResult = queryOrgAdministrativeInfoByCodeClean(entity
//				.getCode());

		if (entity.checkSaleDepartment()) {
			// 设置 营业部的名字
			SaleDepartmentEntity saleDepartmentEntity = saleDepartmentDao
					.querySaleDepartmentByCode(entity.getCode());
			if (saleDepartmentEntity != null
					&& !StringUtils.equals(entity.getName(),
							saleDepartmentEntity.getName())) {
				saleDepartmentEntity.setName(entity.getName());
				saleDepartmentDao.updateSaleDepartment(saleDepartmentEntity);
			}
		}

		if (entity.checkDispatchTeam() || entity.checkTransDepartment()
				|| entity.checkTransTeam()) {
			// 设置 车队 的名字
			MotorcadeEntity motorcadeEntity = motorcadeDao
					.queryMotorcadeByCode(entity.getCode());
			if (motorcadeEntity != null
					&& !StringUtils.equals(entity.getName(),
							motorcadeEntity.getName())) {
				motorcadeEntity.setName(entity.getName());
				motorcadeDao.updateMotorcade(motorcadeEntity);
			}
		}

		if (entity.checkTransferCenter()) {
			// 设置 外场的名字
			OutfieldEntity outfieldEntity = outfieldDao
					.queryOutfieldByOrgCode(entity.getCode());
			if (outfieldEntity != null
					&& !StringUtils.equals(entity.getName(),
							outfieldEntity.getName())) {
				outfieldEntity.setName(entity.getName());
				outfieldDao.updateOutfield(outfieldEntity);
			}
		}
	}

	/**
	 * 作废单个组织时，关联作废 营业部，车队，外场
	 * 
	 * @author 087584-foss-lijun
	 * @date 2012-12-11 上午11:33:12
	 */
	@Override
	public void deleteRely(OrgAdministrativeInfoEntity entity) {
		// 检查参数
		if (entity == null || StringUtils.isBlank(entity.getCode())) {
			return;
		}

		// 作废 营业部
		SaleDepartmentEntity saleDepartmentEntity = new SaleDepartmentEntity();
		saleDepartmentEntity.setCode(entity.getCode());
		saleDepartmentEntity.setModifyUser(entity.getModifyUser());
		saleDepartmentDao.deleteSaleDepartment(saleDepartmentEntity);

		// 作废 车队
		MotorcadeEntity motorcadeEntity = new MotorcadeEntity();
		motorcadeEntity.setCode(entity.getCode());
		motorcadeEntity.setModifyUser(entity.getModifyUser());
		MotorcadeEntity result = motorcadeDao.deleteMotorcade(motorcadeEntity);
		if (result != null) {
			List<MotorcadeEntity> motorcadeList = new ArrayList<MotorcadeEntity>();
			motorcadeEntity.setCreateDate(motorcadeEntity.getModifyDate());
			motorcadeList.add(result);
			//同步车队信息给OMS
			syncInformationService.syncMotorcadeToOms(motorcadeList, NumberConstants.NUMBER_3);
		}
		// 作废 外场
		OutfieldEntity outfieldEntity = new OutfieldEntity();
		outfieldEntity.setOrgCode(entity.getCode());
		outfieldEntity.setModifyUser(entity.getModifyUser());
		outfieldDao.deleteOutfield(outfieldEntity);
	}

	/**
	 * 给部门加上“名称”
	 * 
	 * @author 087584-foss-lijun
	 * @date 2012-12-3 下午4:55:43
	 */
	private OrgAdministrativeInfoEntity attachOrgName(
			OrgAdministrativeInfoEntity entity) {
		if (entity == null) {
			return entity;
		}

		// 添加“实体财务部”的名称
		if (StringUtils.isBlank(entity.getEntityFinanceName())) {
			String name = queryOrgAdministrativeInfoNameByCode(entity
					.getEntityFinance());
			entity.setEntityFinanceName(name);
		}
		// 添加“派送排单服务外场”的名称
		if (StringUtils.isBlank(entity.getDeliverOutfieldName())) {
			String name = queryOrgAdministrativeInfoNameByCode(entity
					.getDeliverOutfield());
			entity.setDeliverOutfieldName(name);
		}
		// 添加“理货部门服务外场”的名称
		if (StringUtils.isBlank(entity.getArrangeOutfieldName())) {
			String name = queryOrgAdministrativeInfoNameByCode(entity
					.getArrangeOutfield());
			entity.setArrangeOutfieldName(name);
		}
		return entity;
	}

	/**
	 * 给部门加上“名称”
	 * 
	 * @author 087584-foss-lijun
	 * @date 2012-12-3 下午4:55:43
	 */
	private List<OrgAdministrativeInfoEntity> attachOrgName(
			List<OrgAdministrativeInfoEntity> entitys) {
		if (CollectionUtils.isEmpty(entitys)) {
			return entitys;
		}
		for (OrgAdministrativeInfoEntity entity : entitys) {
			this.attachOrgName(entity);
		}

		return entitys;
	}

	/**
	 * 给部门加上“财务组织的子公司名称”
	 * 
	 * @author 087584-foss-lijun
	 * @date 2012-12-3 下午4:55:43
	 */
	@Override
	public OrgAdministrativeInfoEntity attachSubsidiaryName(
			OrgAdministrativeInfoEntity entity) {
		if (entity == null || StringUtils.isBlank(entity.getSubsidiaryCode())
				|| StringUtils.isNotBlank(entity.getSubsidiaryName())) {
			return entity;
		}

		FinancialOrganizationsEntity financialOrganizations = financialOrganizationsService
				.queryFinancialOrganizationsByCode(entity.getSubsidiaryCode());
		if (financialOrganizations != null) {
			entity.setSubsidiaryName(financialOrganizations.getName());
		}
		return entity;
	}

	/**
	 * 给部门加上“财务组织的子公司名称”
	 * 
	 * @author 087584-foss-lijun
	 * @date 2012-12-3 下午4:55:43
	 */
	@Override
	public List<OrgAdministrativeInfoEntity> attachSubsidiaryName(
			List<OrgAdministrativeInfoEntity> entitys) {
		if (CollectionUtils.isEmpty(entitys)) {
			return entitys;
		}

		for (OrgAdministrativeInfoEntity entity : entitys) {
			this.attachSubsidiaryName(entity);
		}

		return entitys;
	}

	/**
	 * 给部门加上国家地址，省，市，区县的名字
	 * 
	 * @author 087584-foss-lijun
	 * @date 2012-12-3 下午4:55:43
	 */
	@Override
	public OrgAdministrativeInfoEntity attachDistrictName(
			OrgAdministrativeInfoEntity entity) {
		if (entity == null) {
			return entity;
		}
		if (StringUtils.isBlank(entity.getCountryRegionName())) {
			entity.setCountryRegionName(administrativeRegionsService
					.gainDistrictNameByCode(entity.getCountryRegion()));
		}

		if (StringUtils.isBlank(entity.getProvName())) {
			entity.setProvName(administrativeRegionsService
					.gainDistrictNameByCode(entity.getProvCode()));
		}

		if (StringUtils.isBlank(entity.getCityName())) {
			entity.setCityName(administrativeRegionsService
					.gainDistrictNameByCode(entity.getCityCode()));
		}
		//350909       郭倩云          零担轻货上分拣出发城市取得是简称
		if (StringUtils.isBlank(entity.getSimpleCityName())) {
			entity.setSimpleCityName(administrativeRegionsService
					.gainDistrictSimpleNameByCode(entity.getCityCode()));
		}

		if (StringUtils.isBlank(entity.getCountyName())) {
			entity.setCountyName(administrativeRegionsService
					.gainDistrictNameByCode(entity.getCountyCode()));
		}

		return entity;
	}

	/**
	 * 给部门加上国家地址，省，市，区县的名字
	 * 
	 * @author 087584-foss-lijun
	 * @date 2012-12-3 下午4:55:43
	 */
	@Override
	public List<OrgAdministrativeInfoEntity> attachDistrictName(
			List<OrgAdministrativeInfoEntity> entitys) {
		if (CollectionUtils.isEmpty(entitys)) {
			return entitys;
		}

		for (OrgAdministrativeInfoEntity entity : entitys) {
			if (entity != null) {
				entity = this.attachDistrictName(entity);
			}
		}

		return entitys;
	}

	/**
	 * 通过部门编码，部门时间，从缓存中取部门信息
	 * 
	 * @author zhangdongping
	 * @date 2012-12-28 上午11:50:05
	 * @see com.deppon.foss.module.base.baseinfo.api.server.service.IOrgAdministrativeInfoService#queryOrgAdministrativeInfoByCode(java.lang.String,
	 *      java.util.Date)
	 */
	@Override
	public OrgAdministrativeInfoEntity queryOrgAdministrativeInfoByCode(
			String code, Date billDate) {
		if (StringUtils.isBlank(code)) {
			return null;
		}
		Date date = billDate == null ? new Date() : billDate;
		// 在缓存中查找
		List<OrgAdministrativeInfoEntity> alist = null;
		if (SqlUtil.loadCache) {// 客户端不读缓存
			alist = queryListCache(code);
		}
		// 缓存查不到就查询
		OrgAdministrativeInfoEntity result = null;
		if (CollectionUtils.isNotEmpty(alist)) {
			for (OrgAdministrativeInfoEntity entity : alist) {
				if (entity == null || entity.getCreateDate() == null
						|| entity.getModifyDate() == null) {
					continue;
				}
				if (entity.getCreateDate().getTime() <= date.getTime()
						&& date.getTime() < entity.getModifyDate().getTime()) {
					result = entity;
					break;
				}
			}
		}
		// 缓存中找不到就找数据库
		if (result == null) {
			alist = orgAdministrativeInfoDao
					.queryOrgAdministrativeInfoForCache(code, date);
			if (CollectionUtils.isEmpty(alist)) {
				return null;
			} else {
				// 087584-foss-lijun 给组织加上子公司名称
				result = alist.get(NumberConstants.ZERO);
			}
		}
		result = this.attachSubsidiaryName(result);
		result = this.attachDistrictName(result);
		result = this.attachOrgName(result);
		return result;
	}

	/**
	 * 
	 * <p>
	 * 清空缓存
	 * </p>
	 * 
	 * @author foss-zhujunyong
	 * @date Mar 13, 2013 10:36:13 AM
	 * @param key
	 * @see
	 */
	@SuppressWarnings("unchecked")
	private void invalidOrgCode(String key) {
		((ICache<String, OrgAdministrativeInfoEntity>) CacheManager
				.getInstance().getCache(
						FossTTLCache.ORGANIZATION_ORGCODE_CACHE_UUID))
				.invalid(key);
	}

	/**
	 * 
	 * <p>
	 * 取缓存中的数据
	 * </p>
	 * 
	 * @author foss-zhujunyong
	 * @date Mar 13, 2013 10:36:29 AM
	 * @param key
	 * @return
	 * @see
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	private OrgAdministrativeInfoEntity queryOrgCodeCache(String key) {
		OrgAdministrativeInfoEntity result = null;
		try {
			CacheManager cacheManager = CacheManager.getInstance();
			if (cacheManager == null) {
				return null;
			}
			ICache cache = cacheManager
					.getCache(FossTTLCache.ORGANIZATION_ORGCODE_CACHE_UUID);
			if (cache == null) {
				return null;
			}
			result = (OrgAdministrativeInfoEntity) cache.get(key);
		} catch (Exception t) {
			LOGGER.error("cache找不到", t);
		}
		return result;
	}

	/**
	 * 
	 * <p>
	 * 清空缓存列表
	 * </p>
	 * 
	 * @author foss-zhujunyong
	 * @date Mar 13, 2013 10:36:42 AM
	 * @param key
	 * @see
	 */
	@SuppressWarnings("unchecked")
	private void invalidList(String key) {
		((ICache<String, List<OrgAdministrativeInfoEntity>>) CacheManager
				.getInstance().getCache(
						FossTTLCache.ORGANIZATION_ORGCODE_LIST_CACHE_UUID))
				.invalid(key);
	}

	/**
	 * 
	 * <p>
	 * 取缓存中的数据
	 * </p>
	 * 
	 * @author foss-zhujunyong
	 * @date Mar 13, 2013 10:36:57 AM
	 * @param key
	 * @return
	 * @see
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	private List<OrgAdministrativeInfoEntity> queryListCache(String key) {
		List<OrgAdministrativeInfoEntity> resultList = new ArrayList<OrgAdministrativeInfoEntity>();
		try {
			CacheManager cacheManager = CacheManager.getInstance();
			if (cacheManager == null) {
				return resultList;
			}
			ICache cache = cacheManager
					.getCache(FossTTLCache.ORGANIZATION_ORGCODE_LIST_CACHE_UUID);
			if (cache == null) {
				return resultList;
			}
			resultList = (List<OrgAdministrativeInfoEntity>) cache.get(key);
		} catch (Exception t) {
			LOGGER.error("cache找不到", t);
		}
		return resultList;
	}

	/**
	 * 
	 * <p>
	 * 清空缓存
	 * </p>
	 * 
	 * @author foss-zhujunyong
	 * @date Mar 13, 2013 10:37:13 AM
	 * @param key
	 * @see
	 */
	@SuppressWarnings("unchecked")
	private void invalidUnifiedCode(String key) {
		((ICache<String, OrgAdministrativeInfoEntity>) CacheManager
				.getInstance().getCache(
						FossTTLCache.ORGANIZATION_UNIFIEDCODE_CACHE_UUID))
				.invalid(key);
	}

	/**
	 * 
	 * <p>
	 * 取缓存中的数据
	 * </p>
	 * 
	 * @author foss-zhujunyong
	 * @date Mar 13, 2013 10:37:22 AM
	 * @param key
	 * @return
	 * @see
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	private OrgAdministrativeInfoEntity queryUnifiedCodeCache(String key) {
		OrgAdministrativeInfoEntity result = null;
		try {
			CacheManager cacheManager = CacheManager.getInstance();
			if (cacheManager == null) {
				return null;
			}
			ICache cache = cacheManager
					.getCache(FossTTLCache.ORGANIZATION_UNIFIEDCODE_CACHE_UUID);
			if (cache == null) {
				return null;
			}
			result = (OrgAdministrativeInfoEntity) cache.get(key);
		} catch (Exception t) {
			LOGGER.error("cache找不到", t);
		}
		return result;
	}

	/**
	 * 
	 * <p>
	 * 同步到官网
	 * </p>
	 * 
	 * @author foss-zhujunyong
	 * @date Feb 20, 2013 5:44:48 PM
	 * @param entitys
	 * @see
	 */
	private void syncToOfficialWebsite(OrgAdministrativeInfoEntity entity) {
		if (entity == null) {
			return;
		}
		List<OrgAdministrativeInfoEntity> list = new ArrayList<OrgAdministrativeInfoEntity>();
		list.add(entity);
		syncToOfficialWebsite(list);
	}

	/**
	 * 
	 * <p>
	 * 同步到官网
	 * </p>
	 * 
	 * @author foss-zhujunyong
	 * @date Feb 20, 2013 5:44:48 PM
	 * @param entitys
	 * @see
	 */
	@Override
	public void syncToOfficialWebsite(List<OrgAdministrativeInfoEntity> entitys) {
		if (CollectionUtils.isEmpty(entitys)) {
			return;
		}
		EsbCallBackLog callBackLog = new EsbCallBackLog();
		try {
			callBackLog.setId(entitys.get(0).getId());
			callBackLog.setCreateTime(new Date());
			sendOrgAdministrativeInfoService
					.sendOrgAdministrativeInfoToOfficialWebsite(entitys);
			callBackLog.setReason("发送成功");
		} catch (Exception e) {
			LOGGER.error("同步行政组织信息到官网失败", e);
			callBackLog.setReason(e.getMessage());
		} finally {
			try {
				logBuffer.write(callBackLog);
			} catch (Exception t) {
				LOGGER.error("logBuffer写日志出错", t);
			}
		}
	}

	/**
	 * 查询车队班车部下的小组
	 * 
	 * @author 078838-foss-zhangbin
	 * @date 2012-12-3 下午4:55:43
	 */
	@Override
	public List<OrgAdministrativeInfoEntity> searchShuttleGroup(
			String transDepartmentCode) {
		List<OrgAdministrativeInfoEntity> orgAdministrativeInfoEntityList = null;
		if (StringUtil.isBlank(transDepartmentCode)) {
			orgAdministrativeInfoEntityList = new ArrayList<OrgAdministrativeInfoEntity>();
		} else {
			orgAdministrativeInfoEntityList = orgAdministrativeInfoDao
					.searchShuttleGroup(transDepartmentCode);
		}
		return orgAdministrativeInfoEntityList;
	}

	/**
	 * 
	 * <p>
	 * 通过编码在缓存中查名称(包括德邦自有部门和代理网点)
	 * </p>
	 * 
	 * @author foss-zhujunyong
	 * @date Feb 28, 2013 3:25:33 PM
	 * @param code
	 * @return
	 * @see
	 */
	@Override
	public String queryCommonNameByCommonCodeFromCache(String code) {
		if (StringUtils.isBlank(code)) {
			return null;
		}
		// 先在缓存中找德邦组织
		OrgAdministrativeInfoEntity org = null;
		//20140317 xmm MANA-2018 start 修改:客户端不读缓存
		if (SqlUtil.loadCache) {// 客户端不读缓存
			org = queryOrgCodeCache(code);
		} else {
			org = orgAdministrativeInfoDao
					.queryOrgAdministrativeInfoByCode(code);
		}
		//20140317 xmm MANA-2018 end 修改:客户端不读缓存
		if (org != null) {
			return org.getName();
		}
		// 再到代理公司中找
		String companyName = vehicleAgencyCompanyService
				.queryBusinessPartnerNameByCode(code);
		if (StringUtils.isNotBlank(companyName)) {
			return companyName;
		}
		// 最后到代理网点中找
		OuterBranchEntity outBranch = vehicleAgencyDeptService
				.queryOuterBranchByBranchCode(code, null);
		if (outBranch != null) {
			return outBranch.getAgentDeptName();
		}
		// 组织和代理网点里都找不到，只能返回null
		return null;
	}

	/**
	 * 
	 * <p>
	 * 通过编码查名称(包括德邦自有部门和代理网点)
	 * </p>
	 * 
	 * @author foss-zhujunyong
	 * @date Feb 28, 2013 3:25:33 PM
	 * @param code
	 * @return
	 * @see
	 */
	@Override
	public String queryCommonNameByCommonCode(String code) {
		if (StringUtils.isBlank(code)) {
			return null;
		}
		// 先找德邦组织
		String name = queryOrgAdministrativeInfoNameByCode(code);
		if (StringUtils.isNotBlank(name)) {
			return name;
		}
		// 再到代理公司中找
		String companyName = vehicleAgencyCompanyService
				.queryBusinessPartnerNameByCode(code);
		if (StringUtils.isNotBlank(companyName)) {
			return companyName;
		}
		// 最后到代理网点中找
		OuterBranchEntity outBranch = vehicleAgencyDeptService
				.queryOuterBranchByBranchCode(code, null);
		if (outBranch != null) {
			return outBranch.getAgentDeptName();
		}
		// 组织和代理网点里都找不到，只能返回null
		return null;
	}

	/**
	 * 根据历史时间和组织编码查询组织信息（查询历史组织信息）
	 * 
	 * 若时间为空，则只根据组织编码查询组织信息 否则将根据时间，查询在creatTime和modifyTime时间段的部门
	 * 不根据Active='Y'来查询
	 * 
	 * @author 026123-foss-lifengteng
	 * @date 2013-4-17 下午6:02:26
	 */
	@Override
	public OrgAdministrativeInfoEntity queryOrgInfoByCodeAndTime(String code,
			Date billTime) {
		if (StringUtils.isBlank(code)) {
			return null;
		} else {
			return orgAdministrativeInfoDao.queryOrgAdministrativeInfoByCode(
					code, billTime);
		}
	}
	/**
     * 
     *<p>修改行政组织基本信息（行政业务组织主信息，包括理货部门，排单部门）</p>
     *@author 130566-zengJunfan
     *@date   2013-7-11下午2:31:22
     * @param vo
     * @param userCode
     */
	@Override
	public void updateOrgAdministrativeInfo(OrgAdministrativeInfoVo vo, String userCode){
		if (vo == null) {
			throw new BusinessException("vo为空不能修改");
		}
		if (vo.getOrgAdministrativeInfoEntity() != null) {
			vo.getOrgAdministrativeInfoEntity().setModifyUser(userCode);
			//修改行政组织信息
			OrgAdministrativeInfoEntity infoEntity=updateOrgAdministrativeInfo(vo.getOrgAdministrativeInfoEntity(),false);
			//设置行政业务组织
			vo.setOrgAdministrativeInfoEntity(infoEntity);
		}
	}
	
	/**
	 * <p>
	 * 修改行政组织数据+营业部信息<br/>
	 * 方法名：updateOutfield
	 * </p>
	 * 
	 * 此方法原来在action中，移到service中以便事务管理
	 * 
	 * @author 078838-foss-zhangbin
	 * @时间 2012-11-07
	 * @since JDK1.6
	 */
	@Override
	@Transactional
	public void updateAllOrgAdministrativeInfo(OrgAdministrativeInfoVo vo,
			String userCode) {
		//313353 sonar
		this.sonarSplitOne(vo);
		
		//oms需要的数据273311
		List<SalesDescExpandEntity> salesDescExpandEntitys = new ArrayList<SalesDescExpandEntity>();
		//组织信息不为空
		if (vo.getOrgAdministrativeInfoEntity() != null) {
			vo.getOrgAdministrativeInfoEntity().setModifyUser(userCode);
			//修改行政组织信息
			OrgAdministrativeInfoEntity infoEntity=updateOrgAdministrativeInfo(vo.getOrgAdministrativeInfoEntity(),false);
			//更新GIS短地址信息-200664 yangjinheng
			orgGisUrlService.updateGisUrlInfo(infoEntity);
			//设置行政业务组织
			vo.setOrgAdministrativeInfoEntity(infoEntity);
		}
		SaleDepartmentEntity saleDepartmentEntityVo = vo
				.getSaleDepartmentEntity();
		if (saleDepartmentEntityVo != null) {// 营业部
			// 删除营业部自提派送区域的的扩展字段描述信息，由于信息记录少直接删除不在判断
			SalesDescExpandEntity salesDescExpandEntity = new SalesDescExpandEntity();
			salesDescExpandEntity.setCode(saleDepartmentEntityVo.getCode());
			
			salesDescExpandService.updateSalesDescExpand(salesDescExpandEntitys,salesDescExpandEntity);
			// 判断自提范围描述的字符长度
			String pickDesc = saleDepartmentEntityVo.getPickupAreaDesc();
			if (StringUtil.isNotBlank(pickDesc)) {
				try {
					if (pickDesc.getBytes(ComnConst.STRING_TYPE_UTF8).length > NumberConstants.PROP_LENG_4000) {
						saleDepartmentEntityVo.setPickAreaIsExpand(FossConstants.YES);
						saleDepartmentEntityVo.setPickupAreaDesc(pickDesc.substring(NumberConstants.ZERO,
										NumberConstants.NUMBER_1333));
						// 将超过内容插入扩展表
						String[] pickDescList = changeString(pickDesc);
						SalesDescExpandEntity pickUpEntity = new SalesDescExpandEntity();
						pickUpEntity.setCode(saleDepartmentEntityVo.getCode());
						pickUpEntity.setCreateUser(userCode);
						pickUpEntity.setModifyUser(userCode);
						pickUpEntity.setDescType(ComnConst.SALES_DEPARTMENT_DESC_EXPAND_TYPE_PICKUP);
						salesDescExpandService.addSalesDescExpandByType(salesDescExpandEntitys,pickDescList, pickUpEntity);
						
					} else {
						saleDepartmentEntityVo.setPickAreaIsExpand(FossConstants.NO);
					}
				} catch (UnsupportedEncodingException e) {
					e.printStackTrace();
				}
			} else {
				saleDepartmentEntityVo.setPickAreaIsExpand(FossConstants.NO);
			}
			// 判断派送范围描述的字符长度
			String deliveryDesc = saleDepartmentEntityVo.getDeliveryAreaDesc();
			if (StringUtil.isNotBlank(deliveryDesc)) {
				try {
					if (deliveryDesc.getBytes(ComnConst.STRING_TYPE_UTF8).length > NumberConstants.PROP_LENG_4000) {
						saleDepartmentEntityVo.setDeliveryAreaIsExpand(FossConstants.YES);
						saleDepartmentEntityVo.setDeliveryAreaDesc(deliveryDesc.substring(NumberConstants.ZERO,
										NumberConstants.NUMBER_1333));
						// 将超过内容插入扩展表
						String[] deliveryDescList = changeString(deliveryDesc);
						SalesDescExpandEntity deliveryEntity = new SalesDescExpandEntity();
						deliveryEntity.setCode(saleDepartmentEntityVo.getCode());
						deliveryEntity.setCreateUser(userCode);
						deliveryEntity.setModifyUser(userCode);
						deliveryEntity.setDescType(ComnConst.SALES_DEPARTMENT_DESC_EXPAND_TYPE_DELIVERY);
					    salesDescExpandService.addSalesDescExpandByType(salesDescExpandEntitys,deliveryDescList, deliveryEntity);
					} else {
						saleDepartmentEntityVo
								.setDeliveryAreaIsExpand(FossConstants.NO);
					}
				} catch (UnsupportedEncodingException e) {
					e.printStackTrace();
				}
			} else {
				saleDepartmentEntityVo
						.setDeliveryAreaIsExpand(FossConstants.NO);
			}
			//判断快递自提范围描述长度
			String expressPickupAreaDesc =saleDepartmentEntityVo.getExpressPickupAreaDesc();
			if(StringUtil.isNotBlank(expressPickupAreaDesc)){
				try {
					if(expressPickupAreaDesc.getBytes(ComnConst.STRING_TYPE_UTF8).length>NumberConstants.PROP_LENG_4000){
						//给是否可扩展字段设置
						saleDepartmentEntityVo.setExpressPickupAreaIsExp(FossConstants.YES);
						//快递自提描述中只设置1333个字
						saleDepartmentEntityVo.setExpressPickupAreaDesc(expressPickupAreaDesc.substring(NumberConstants.ZERO,
										NumberConstants.NUMBER_1333));
						//将超过的内容插入扩展表中
						String[] expressPickupAreaDescs = changeString(expressPickupAreaDesc);
						SalesDescExpandEntity expressPickupEntity = new SalesDescExpandEntity();
						expressPickupEntity
								.setCode(saleDepartmentEntityVo.getCode());
						expressPickupEntity.setCreateUser(userCode);
						expressPickupEntity.setModifyUser(userCode);
						//设置快递自提类型
						expressPickupEntity.setDescType(ComnConst.SALES_DEPARTMENT_DESC_EXPAND_TYPE_EXPRESS_PICKUP);
						//将超过的字数插入扩展表
						salesDescExpandService.addSalesDescExpandByType(salesDescExpandEntitys,expressPickupAreaDescs,expressPickupEntity);
					}else{
						//设置是否可扩展为否
						saleDepartmentEntityVo.setExpressPickupAreaIsExp(FossConstants.NO);
					}
				} catch (UnsupportedEncodingException e) {
					e.printStackTrace();
				}
			}
			//判断快递派送范围描述长度
			String expressDeliveryAreaDesc =saleDepartmentEntityVo.getExpressDeliveryAreaDesc();
			if(StringUtil.isNotBlank(expressDeliveryAreaDesc)){
				try {
					if(expressDeliveryAreaDesc.getBytes(ComnConst.STRING_TYPE_UTF8).length>NumberConstants.PROP_LENG_4000){
						//给是否可扩展字段设置
						saleDepartmentEntityVo.setExpressDeliveryAreaIsExp(FossConstants.YES);
						//快递派送描述中只设置1333个字
						saleDepartmentEntityVo.setExpressDeliveryAreaDesc(expressDeliveryAreaDesc.substring(NumberConstants.ZERO,
										NumberConstants.NUMBER_1333));
						//将超过的内容插入扩展表中
						String[] expressDeliveryAreaDescs = changeString(expressDeliveryAreaDesc);
						SalesDescExpandEntity expressDeliveryEntity = new SalesDescExpandEntity();
						expressDeliveryEntity
								.setCode(saleDepartmentEntityVo.getCode());
						expressDeliveryEntity.setCreateUser(userCode);
						expressDeliveryEntity.setModifyUser(userCode);
						//设置快递派送类型
						expressDeliveryEntity.setDescType(ComnConst.SALES_DEPARTMENT_DESC_EXPAND_TYPE_EXPRESS_DELIVERY);
						//将超过的字数插入扩展表
						salesDescExpandService.addSalesDescExpandByType(salesDescExpandEntitys,
								expressDeliveryAreaDescs,expressDeliveryEntity);
					}else{
						//设置是否可扩展为否
						saleDepartmentEntityVo.setExpressDeliveryAreaIsExp(FossConstants.NO);
					}
				} catch (UnsupportedEncodingException e) {
					e.printStackTrace();
				}
			}
			//同步给oms接口
			syncSalesDescExpandService.syncSalesDescExpand(salesDescExpandEntitys, "");
			// 同步组织名称
			vo.getSaleDepartmentEntity().setName(vo.getOrgAdministrativeInfoEntity().getName());
			//查询营业部，是否已新增,防止营业部两条有效数据-dujunhui-187862
			SaleDepartmentEntity myEntity=saleDepartmentService.querySaleDepartmentByCodeNoCache(vo.getOrgAdministrativeInfoEntity().getCode());
			if (myEntity!=null) {
				//判断快递派送区域中有无生效的快点点部坐标信息--
				/*ExpressDeliveryMapManageEntity mapEntity=expressDeliveryMapManageService.
						queryExpressDeliveryMapManageEntityByCode(saleDepartmentEntityVo.getCode());
				if(StringUtils.equals(saleDepartmentEntityVo.getCanExpressDelivery(), FossConstants.ACTIVE)&&
						null!=mapEntity&&
						!StringUtils.equals(mapEntity.getDeptCoordinate(), saleDepartmentEntityVo.getDeliveryCoordinate())){
					saleDepartmentEntityVo.setDeliveryCoordinate(mapEntity.getDeptCoordinate());
				}*/
				
				saleDepartmentEntityVo.setModifyUser(userCode);
				SaleDepartmentEntity saleDepartmentEntity = saleDepartmentService.updateSaleDepartment(saleDepartmentEntityVo);
				vo.setSaleDepartmentEntity(saleDepartmentEntity);
			} else {
				saleDepartmentEntityVo.setCreateUser(userCode);

				if (StringUtils.isNotBlank(saleDepartmentEntityVo.getCode())
						&& StringUtils.isNotBlank(saleDepartmentEntityVo
								.getName())) {
					SaleDepartmentEntity saleDepartmentEntity = saleDepartmentService
							.addSaleDepartment(saleDepartmentEntityVo);
					vo.setSaleDepartmentEntity(saleDepartmentEntity);
				}
			}
			//营业部产品的更改
			if (vo.getSalesProductEntityList() != null) {
				SalesProductEntity salesProductEntity = new SalesProductEntity();
				salesProductEntity.setSalesDeptCode(vo
						.getSaleDepartmentEntity().getCode());
				salesProductService
						.deleteSalesProductBySalesDeptCode(salesProductEntity);// 作废营部关联的产品
				for (SalesProductEntity salesProduct : vo
						.getSalesProductEntityList()) {
					salesProduct.setCreateUser(userCode);
				}
				List<SalesProductEntity> salesProductEntityList = salesProductService
						.addSalesProductMore(vo.getSalesProductEntityList());
				vo.setSalesProductEntityList(salesProductEntityList);
			}
			// 查询已选的集中开单组
			List<SalesBillingGroupEntity> selectedCentralizedBillingGroupList = salesBillingGroupService
					.queryBillingGroupListBySaleDepCode(vo
							.getOrgAdministrativeInfoEntity().getCode());

			// 传已选的集中开单组到前台
			vo.setSelectedCentralizedBillingGroupList(selectedCentralizedBillingGroupList);
			
			//查询已选的营业部车队
			SalesMotorcadeEntity salesMotorcadeEntity = new SalesMotorcadeEntity();
			salesMotorcadeEntity.setSalesdeptCode(vo.getOrgAdministrativeInfoEntity().getCode());
			List<SalesMotorcadeEntity> salesMotorcadeEntityList = salesMotorcadeService
					.querySalesMotorcadeExactByEntity(salesMotorcadeEntity,
							NumberConstants.ZERO, Integer.MAX_VALUE);
			vo.setSalesMotorcadeEntityList(salesMotorcadeEntityList);// 营业部车队信息	
		}
	}
	
	/**
	 * sonar优化拆分
	 * 
	 * @author 313353
	 */
	private void sonarSplitOne(OrgAdministrativeInfoVo vo) {
		if (vo == null) {
			throw new BusinessException("vo为空不能修改");
		}
	}
	
	/**
	 *<p>Title: updateSaleOrgByGisMap</p>
	 *<p>修改GIS地图，更细营业部信息</p>
	 *@author 130566-ZengJunfan
	 *@date 2014-6-6下午5:31:30
	 * @param orgAdministrativeInfoVo
	 * @param userCode
	 */
	@Transactional
	@Override
	public void updateSaleOrgByGisMap(OrgAdministrativeInfoVo orgAdministrativeInfoVo,
			String userCode){
		//非空校验
		//313353 sonar
		this.sonarSplitTwo(orgAdministrativeInfoVo, userCode);
		
		//oms需要的数据273311
		List<SalesDescExpandEntity> salesDescExpandEntitys = new ArrayList<SalesDescExpandEntity>();
		//若营业部信息不为空
		if(null !=orgAdministrativeInfoVo.getSaleDepartmentEntity()){
			SaleDepartmentEntity saleDepartmentEntityVo = orgAdministrativeInfoVo.getSaleDepartmentEntity();
			// 删除营业部自提派送区域的的扩展字段描述信息，由于信息记录少直接删除不在判断
			SalesDescExpandEntity salesDescExpandEntity = new SalesDescExpandEntity();
			salesDescExpandEntity.setCode(saleDepartmentEntityVo.getCode());
			 salesDescExpandService.updateSalesDescExpand(salesDescExpandEntitys,salesDescExpandEntity);
			// (1)判断自提范围描述的字符长度
			String pickDesc = saleDepartmentEntityVo.getPickupAreaDesc();
			if (StringUtil.isNotBlank(pickDesc)) {
				try {
					if (pickDesc.getBytes(ComnConst.STRING_TYPE_UTF8).length > NumberConstants.PROP_LENG_4000) {
						saleDepartmentEntityVo
								.setPickAreaIsExpand(FossConstants.YES);
						saleDepartmentEntityVo.setPickupAreaDesc(pickDesc
								.substring(NumberConstants.ZERO,
										NumberConstants.NUMBER_1333));
						// 将超过内容插入扩展表
						String[] pickDescList = changeString(pickDesc);
						SalesDescExpandEntity pickUpEntity = new SalesDescExpandEntity();
						pickUpEntity.setCode(saleDepartmentEntityVo.getCode());
						pickUpEntity.setCreateUser(userCode);
						pickUpEntity.setModifyUser(userCode);
						pickUpEntity
								.setDescType(ComnConst.SALES_DEPARTMENT_DESC_EXPAND_TYPE_PICKUP);
						salesDescExpandService.addSalesDescExpandByType(salesDescExpandEntitys,pickDescList, pickUpEntity);
					} else {
						saleDepartmentEntityVo
								.setPickAreaIsExpand(FossConstants.NO);
					}
				} catch (UnsupportedEncodingException e) {
					e.printStackTrace();
				}
			} else {
				saleDepartmentEntityVo.setPickAreaIsExpand(FossConstants.NO);
			}
			// (2)判断派送范围描述的字符长度
			String deliveryDesc = saleDepartmentEntityVo.getDeliveryAreaDesc();
			if (StringUtil.isNotBlank(deliveryDesc)) {
				try {
					if (deliveryDesc.getBytes(ComnConst.STRING_TYPE_UTF8).length > NumberConstants.PROP_LENG_4000) {
						saleDepartmentEntityVo
								.setDeliveryAreaIsExpand(FossConstants.YES);
						saleDepartmentEntityVo.setDeliveryAreaDesc(deliveryDesc
								.substring(NumberConstants.ZERO,
										NumberConstants.NUMBER_1333));
						// 将超过内容插入扩展表
						String[] deliveryDescList = changeString(deliveryDesc);
						SalesDescExpandEntity deliveryEntity = new SalesDescExpandEntity();
						deliveryEntity
								.setCode(saleDepartmentEntityVo.getCode());
						deliveryEntity.setCreateUser(userCode);
						deliveryEntity.setModifyUser(userCode);
						deliveryEntity
								.setDescType(ComnConst.SALES_DEPARTMENT_DESC_EXPAND_TYPE_DELIVERY);
						salesDescExpandService.addSalesDescExpandByType(
								salesDescExpandEntitys,deliveryDescList, deliveryEntity);
					} else {
						saleDepartmentEntityVo
								.setDeliveryAreaIsExpand(FossConstants.NO);
					}
				} catch (UnsupportedEncodingException e) {
					e.printStackTrace();
				}
			} else {
				saleDepartmentEntityVo
						.setDeliveryAreaIsExpand(FossConstants.NO);
			}
			//(3)判断快递自提范围描述长度
			String expressPickupAreaDesc =saleDepartmentEntityVo.getExpressPickupAreaDesc();
			if(StringUtil.isNotBlank(expressPickupAreaDesc)){
				try {
					if(expressPickupAreaDesc.getBytes(ComnConst.STRING_TYPE_UTF8).length>NumberConstants.PROP_LENG_4000){
						//给是否可扩展字段设置
						saleDepartmentEntityVo.setExpressPickupAreaIsExp(FossConstants.YES);
						//快递自提描述中只设置1333个字
						saleDepartmentEntityVo.setExpressPickupAreaDesc(expressPickupAreaDesc.substring(NumberConstants.ZERO,
										NumberConstants.NUMBER_1333));
						//将超过的内容插入扩展表中
						String[] expressPickupAreaDescs = changeString(expressPickupAreaDesc);
						SalesDescExpandEntity expressPickupEntity = new SalesDescExpandEntity();
						expressPickupEntity
								.setCode(saleDepartmentEntityVo.getCode());
						expressPickupEntity.setCreateUser(userCode);
						expressPickupEntity.setModifyUser(userCode);
						//设置快递自提类型
						expressPickupEntity.setDescType(ComnConst.SALES_DEPARTMENT_DESC_EXPAND_TYPE_EXPRESS_PICKUP);
						//将超过的字数插入扩展表
						salesDescExpandService.addSalesDescExpandByType(salesDescExpandEntitys,expressPickupAreaDescs,expressPickupEntity);
					}else{
						//设置是否可扩展为否
						saleDepartmentEntityVo.setExpressPickupAreaIsExp(FossConstants.NO);
					}
				} catch (UnsupportedEncodingException e) {
					e.printStackTrace();
				}
			}
			//(4)判断快递派送范围描述长度
			String expressDeliveryAreaDesc =saleDepartmentEntityVo.getExpressDeliveryAreaDesc();
			if(StringUtil.isNotBlank(expressDeliveryAreaDesc)){
				try {
					if(expressDeliveryAreaDesc.getBytes(ComnConst.STRING_TYPE_UTF8).length>NumberConstants.PROP_LENG_4000){
						//给是否可扩展字段设置
						saleDepartmentEntityVo.setExpressDeliveryAreaIsExp(FossConstants.YES);
						//快递派送描述中只设置1333个字
						saleDepartmentEntityVo.setExpressDeliveryAreaDesc(expressDeliveryAreaDesc.substring(NumberConstants.ZERO,
										NumberConstants.NUMBER_1333));
						//将超过的内容插入扩展表中
						String[] expressDeliveryAreaDescs = changeString(expressDeliveryAreaDesc);
						SalesDescExpandEntity expressDeliveryEntity = new SalesDescExpandEntity();
						expressDeliveryEntity
								.setCode(saleDepartmentEntityVo.getCode());
						expressDeliveryEntity.setCreateUser(userCode);
						expressDeliveryEntity.setModifyUser(userCode);
						//设置快递派送类型
						expressDeliveryEntity.setDescType(ComnConst.SALES_DEPARTMENT_DESC_EXPAND_TYPE_EXPRESS_DELIVERY);
						//将超过的字数插入扩展表
						salesDescExpandService.addSalesDescExpandByType(salesDescExpandEntitys,expressDeliveryAreaDescs,expressDeliveryEntity);
					}else{
						//设置是否可扩展为否
						saleDepartmentEntityVo.setExpressDeliveryAreaIsExp(FossConstants.NO);
					}
				} catch (UnsupportedEncodingException e) {
					e.printStackTrace();
				}
			}
			//同步给oms接口
			syncSalesDescExpandService.syncSalesDescExpand(salesDescExpandEntitys, "");
			/**
			 * 查询该部门的名称
			 */
			//组织编码
			String orgCode =orgAdministrativeInfoVo.getSaleDepartmentEntity().getCode();
			// 同步营业部名称
			orgAdministrativeInfoVo.getSaleDepartmentEntity().setName(queryOrgAdministrativeInfoNameByCode(orgCode));
			//查询该营业部是否在库中存在
			SaleDepartmentEntity resultEntity =saleDepartmentService.querySaleDepartmentByCodeNoCache(orgCode);
			//更新操作
			if (null !=resultEntity) {
				saleDepartmentEntityVo.setModifyUser(userCode);
				SaleDepartmentEntity saleDepartmentEntity = saleDepartmentService
						.updateSaleDepartment(saleDepartmentEntityVo);
				orgAdministrativeInfoVo.setSaleDepartmentEntity(saleDepartmentEntity);
			} else {
				saleDepartmentEntityVo.setCreateUser(userCode);
				//名字和编码非空
				if (StringUtils.isNotBlank(saleDepartmentEntityVo.getCode())
						&& StringUtils.isNotBlank(saleDepartmentEntityVo
								.getName())) {
					SaleDepartmentEntity saleDepartmentEntity = saleDepartmentService
							.addSaleDepartment(saleDepartmentEntityVo);
					orgAdministrativeInfoVo.setSaleDepartmentEntity(saleDepartmentEntity);
				}
			}
			//营业部产品的更改
			if (orgAdministrativeInfoVo.getSalesProductEntityList() != null) {
				SalesProductEntity salesProductEntity = new SalesProductEntity();
				salesProductEntity.setSalesDeptCode(orgCode);
				salesProductService
						.deleteSalesProductBySalesDeptCode(salesProductEntity);// 作废营部关联的产品
				for (SalesProductEntity salesProduct : orgAdministrativeInfoVo.getSalesProductEntityList()) {
					salesProduct.setCreateUser(userCode);
				}
				List<SalesProductEntity> salesProductEntityList = salesProductService
						.addSalesProductMore(orgAdministrativeInfoVo.getSalesProductEntityList());
				orgAdministrativeInfoVo.setSalesProductEntityList(salesProductEntityList);
			}
			// 查询已选的集中开单组
			List<SalesBillingGroupEntity> selectedCentralizedBillingGroupList = salesBillingGroupService
					.queryBillingGroupListBySaleDepCode(orgCode);
			// 传已选的集中开单组到前台
			orgAdministrativeInfoVo.setSelectedCentralizedBillingGroupList(selectedCentralizedBillingGroupList);
			//查询已选的营业部车队
			SalesMotorcadeEntity salesMotorcadeEntity = new SalesMotorcadeEntity();
			salesMotorcadeEntity.setSalesdeptCode(orgCode);
			List<SalesMotorcadeEntity> salesMotorcadeEntityList = salesMotorcadeService
					.querySalesMotorcadeExactByEntity(salesMotorcadeEntity,
							NumberConstants.ZERO, Integer.MAX_VALUE);
			orgAdministrativeInfoVo.setSalesMotorcadeEntityList(salesMotorcadeEntityList);// 营业部车队信息	
		}
	}
	
	/**
	 * sonar优化拆分
	 * 
	 * @author 313353
	 */
	private void sonarSplitTwo(OrgAdministrativeInfoVo orgAdministrativeInfoVo,
			String userCode) {
		if(null ==orgAdministrativeInfoVo||StringUtils.isBlank(userCode)){
			throw new BusinessException("参数为空，不能更新修改");
		}
	}
	
	/**
	 * 
	 *<p>修改行政组织以及车队相关信息</p>
	 *@author 130566-zengJunfan
	 *@date   2013-7-27下午1:42:48
	 * @param vo
	 * @param userCode
	 */
	@Override
	@Transactional
	public void updateOrgAndMotorcadeInfo(OrgAdministrativeInfoVo vo,
			String userCode) {
		if (vo == null) {
			throw new BusinessException("vo为空不能修改");
		}
		//组织基本信息不为空
		if (vo.getOrgAdministrativeInfoEntity() != null) {
			vo.getOrgAdministrativeInfoEntity().setModifyUser(userCode);
			//修改行政组织信息
			OrgAdministrativeInfoEntity infoEntity=updateOrgAdministrativeInfo(vo.getOrgAdministrativeInfoEntity(),false);
			//设置行政业务组织
			vo.setOrgAdministrativeInfoEntity(infoEntity);
		}
		List<MotorcadeEntity> motorcadeList = new ArrayList<MotorcadeEntity>();
		MotorcadeEntity motorcadeEntity =  new MotorcadeEntity();
		if (vo.getMotorcadeEntity() != null) {// 车队信息
			// 同步组织名称
			vo.getMotorcadeEntity().setName(
					vo.getOrgAdministrativeInfoEntity().getName());
			
			//先去库中查询该车队实体是否存在
			motorcadeEntity=motorcadeService.queryMotorcadeByCode(vo.getMotorcadeEntity().getCode());
			//若在库中存在，则实行修改
			if (null != motorcadeEntity) {
				vo.getMotorcadeEntity().setModifyUser(userCode);
				motorcadeEntity = motorcadeService.updateMotorcade(vo.getMotorcadeEntity());
				//同步给OMS的数据
				motorcadeList.add(motorcadeEntity);
			} else {
				vo.getMotorcadeEntity().setCreateUser(userCode);
				motorcadeEntity = motorcadeService.addMotorcade(vo.getMotorcadeEntity());
				//同步给OMS的数据
				motorcadeList.add(motorcadeEntity);
			}
			// 判断得到的所属上级车队名是否为空
			if (StringUtils.isEmpty(motorcadeEntity.getParentOrgCodeName())) {
				// 获取给上级组织编码对应的名字
				String parentOrgCodeName = this
						.queryOrgAdministrativeInfoNameByCode(motorcadeEntity
								.getParentOrgCode());
				motorcadeEntity.setParentOrgCodeName(parentOrgCodeName);
			}
			vo.setMotorcadeEntity(motorcadeEntity);
		}
		/**
		 * 更新车队负责行政区域
		 */
		//若车队负责行政区域的废除集合不为空，做废除操作
		//313353 sonar
		this.sonarSplitThree(vo, userCode, motorcadeList);
		
		//若车队负责行政区域的新增集合不为空，做新增操作
		if (CollectionUtils.isNotEmpty(vo.getMotorcadeServeDistrictEntityAddList())) {
			for (MotorcadeServeDistrictEntity motorcadeServeDistrictEntity : vo
					.getMotorcadeServeDistrictEntityAddList()) {
				motorcadeServeDistrictEntity.setCreateUser(userCode);
			}
			List<MotorcadeServeDistrictEntity> motorcadeServeDistrictEntitys = 
					motorcadeServeDistrictService.addMotorcadeServeDistrictMore(vo
					.getMotorcadeServeDistrictEntityAddList());
			//同步给OMS的数据
			if(motorcadeList.size()>0){
				motorcadeList.get(0).setMotorcadeServeDistrictEntityAddList(motorcadeServeDistrictEntitys);
			}
			
		}
	
		
		/**
		 * 更新车队负责营业区
		 */
		//若车队负责营业区的废除集合不为空，删除
		//313353 sonar
		this.sonarSplitFour(vo, userCode, motorcadeList);
		
		//若车队负责营业区的新增集合不为空，新增
		if (CollectionUtils.isNotEmpty(vo
				.getMotorcadeServeSalesAreaEntityAddList())) {
			for (MotorcadeServeSalesAreaEntity motorcadeServeSalesAreaEntity : vo
					.getMotorcadeServeSalesAreaEntityAddList()) {
				motorcadeServeSalesAreaEntity.setCreateUser(userCode);
			}
			List<MotorcadeServeSalesAreaEntity> motorcadeServeSalesAreaEntitys = 
					motorcadeServeSalesAreaService.addMotorcadeServeSalesAreaMore(vo
					.getMotorcadeServeSalesAreaEntityAddList());
			//同步给OMS的数据
			if(motorcadeList.size()>0){
				motorcadeList.get(0).setMotorcadeServeSalesAreaEntityAddList(motorcadeServeSalesAreaEntitys);
			}
			
		}
		
		/**
		 * 更新车队服务的营业部
		 */
		//若车队负责营业部的废除集合不为空，废除
		//313353 sonar
		this.sonarSplitFive(vo, userCode, motorcadeList);

		//若车队负责营业部的新增集合不为空，新增
		if(CollectionUtils.isNotEmpty(vo.getMotorcadeServeSalesDeptEntityAddList())){
			for (SalesMotorcadeEntity entity : vo.getMotorcadeServeSalesDeptEntityAddList()) {
				entity.setCreateUser(userCode);
			}
			List<SalesMotorcadeEntity> salesMotorcadeEntitys = 
					salesMotorcadeService.addSalesMotorcadeMore(vo.getMotorcadeServeSalesDeptEntityAddList());
			//同步给OMS的数据
			if(motorcadeList.size()>0){
				motorcadeList.get(0).setMotorcadeServeSalesDeptEntityAddList(salesMotorcadeEntitys);
			}
			
		}
		
		//同步所有数据给OMS
		if(vo.getMotorcadeEntity() != null){
			syncInformationService.syncMotorcadeToOms(motorcadeList, 1);
		}
		
		//车队负责的营业区域查询
		MotorcadeServeSalesAreaEntity motorcadeServeSalesAreaEntity = new MotorcadeServeSalesAreaEntity();
		motorcadeServeSalesAreaEntity.setMotorcadeCode(vo
				.getOrgAdministrativeInfoEntity().getCode());
		List<MotorcadeServeSalesAreaEntity> motorcadeServeSalesAreaEntityList = motorcadeServeSalesAreaService
				.queryMotorcadeServeSalesAreaExactByEntityAll(motorcadeServeSalesAreaEntity);
		vo.setMotorcadeServeSalesAreaEntityList(motorcadeServeSalesAreaEntityList);
		//车队负责的行政区域查询		
		MotorcadeServeDistrictEntity motorcadeServeDistrictEntity = new MotorcadeServeDistrictEntity();
		motorcadeServeDistrictEntity.setMotorcadeCode(vo
				.getOrgAdministrativeInfoEntity().getCode());
		List<MotorcadeServeDistrictEntity> motorcadeServeDistrictEntityList = motorcadeServeDistrictService
				.queryMotorcadeServeDistrictExactByEntityAll(motorcadeServeDistrictEntity);
		vo.setMotorcadeServeDistrictEntityList(motorcadeServeDistrictEntityList);		
		//车队服务营业部查询		
		SalesMotorcadeEntity motorcadeServeSalesDeptEntity = new SalesMotorcadeEntity();
		motorcadeServeSalesDeptEntity.setMotorcadeCode(vo
				.getOrgAdministrativeInfoEntity().getCode());
		List<SalesMotorcadeEntity> motorcadeServeSalesDeptEntityList = salesMotorcadeService
				.querySalesMotorcadeExactByEntity(
						motorcadeServeSalesDeptEntity, NumberConstants.ZERO,
						Integer.MAX_VALUE);
		vo.setMotorcadeServeSalesDeptEntityList(motorcadeServeSalesDeptEntityList);		
	}
	
	/**
	 * sonar优化拆分
	 * 
	 * @author 313353
	 */
	private void sonarSplitThree(OrgAdministrativeInfoVo vo, String userCode,
			List<MotorcadeEntity> motorcadeList) {
		//若车队负责行政区域的废除集合不为空，做废除操作
				if (CollectionUtils.isNotEmpty(vo
						.getMotorcadeServeDistrictEntityDeleteList())) {
					List<MotorcadeServeDistrictEntity> entitys = vo
							.getMotorcadeServeDistrictEntityDeleteList();
					List<String> virtualCodes = new ArrayList<String>();
					for (MotorcadeServeDistrictEntity entity : entitys) {
						if (null != entity) {
							virtualCodes.add(entity.getVirtualCode());
						}
					}
					MotorcadeServeDistrictEntity rumotorcadeServeDistrict = 
							motorcadeServeDistrictService.deleteMotorcadeServeDistrictMore(
							(String[]) virtualCodes.toArray(new String[0]), userCode);
					//同步给OMS的数据
					if (rumotorcadeServeDistrict != null) {
						if (motorcadeList.size() > 0) {
							List<MotorcadeServeDistrictEntity> listmd = new ArrayList<MotorcadeServeDistrictEntity>();
							for (MotorcadeServeDistrictEntity entity : entitys) {
								entity.setActive(rumotorcadeServeDistrict.getActive());
								listmd.add(entity);
							}
							motorcadeList.get(0)
									.setMotorcadeServeDistrictEntityDeleteList(listmd);
						}
					}
					
				}
	}
	
	/**
	 * sonar优化拆分
	 * 
	 * @author 313353
	 */
	private void sonarSplitFour(OrgAdministrativeInfoVo vo, String userCode,
			List<MotorcadeEntity> motorcadeList) {
		// 若车队负责营业区的废除集合不为空，删除
		if (CollectionUtils.isNotEmpty(vo
				.getMotorcadeServeSalesAreaEntityDeleteList())) {
			List<MotorcadeServeSalesAreaEntity> entitys = vo
					.getMotorcadeServeSalesAreaEntityDeleteList();
			List<String> virtualCodes = new ArrayList<String>();
			for (MotorcadeServeSalesAreaEntity entity : entitys) {
				if (null != entity) {
					virtualCodes.add(entity.getVirtualCode());
				}
			}
			MotorcadeServeSalesAreaEntity motorcadeServeSalesArea = motorcadeServeSalesAreaService
					.deleteMotorcadeServeSalesAreaMore(
							(String[]) virtualCodes.toArray(new String[0]),
							userCode);
			// 同步给OMS的数据
			if (motorcadeServeSalesArea != null) {
				if (motorcadeList.size() > 0) {
					List<MotorcadeServeSalesAreaEntity> listSa = new ArrayList<MotorcadeServeSalesAreaEntity>();

					for (MotorcadeServeSalesAreaEntity entity : entitys) {
						entity.setActive(motorcadeServeSalesArea.getActive());

						listSa.add(entity);
					}
					motorcadeList.get(0)
							.setMotorcadeServeSalesAreaEntityDeleteList(listSa);
				}
			}

		}
	}
 	
	/**
	 * sonar优化拆分
	 * 
	 * @author 313353
	 */
	private void sonarSplitFive(OrgAdministrativeInfoVo vo, String userCode,
			List<MotorcadeEntity> motorcadeList) {
		//若车队负责营业部的废除集合不为空，废除
		if(CollectionUtils.isNotEmpty(vo.getMotorcadeServeSalesDeptEntityDeleteList())){
			List<String> virtualCodes = new ArrayList<String>();
			for(SalesMotorcadeEntity entity:vo.getMotorcadeServeSalesDeptEntityDeleteList()){
				if(entity != null){
						virtualCodes.add(entity.getVirtualCode());
				}
			}
			SalesMotorcadeEntity salesMotorcadeEntity = 
					salesMotorcadeService.deleteSalesMotorcadeMore((String[]) virtualCodes.toArray(new String[0]), userCode);
			if(salesMotorcadeEntity != null){
				if(motorcadeList.size()>0){
				List<SalesMotorcadeEntity> listSm = new ArrayList<SalesMotorcadeEntity>();
				for(SalesMotorcadeEntity entity : vo.getMotorcadeServeSalesDeptEntityDeleteList()){
					entity.setActive(salesMotorcadeEntity.getActive());
						listSm.add(entity);
					}
					motorcadeList.get(0).setMotorcadeServeSalesDeptEntityDeleteList(listSm);
				}
			}
		}
	}
	
	/**
	 * 
	 *<p>修改行政组织以及外场相关信息</p>
	 *@author 130566-zengJunfan
	 *@date   2013-7-27下午1:53:39
	 * @param vo
	 * @param userCode
	 */
	@Override
	@Transactional
	public void updateOrgAndOutfieldInfo(OrgAdministrativeInfoVo vo,
			String userCode) {
		if (vo == null) {
			throw new BusinessException("vo为空不能修改");
		}
		//组织基本信息不为空
		if (vo.getOrgAdministrativeInfoEntity() != null) {
			vo.getOrgAdministrativeInfoEntity().setModifyUser(userCode);
			//修改行政组织信息
			OrgAdministrativeInfoEntity infoEntity=updateOrgAdministrativeInfo(vo.getOrgAdministrativeInfoEntity(),false);
			//设置行政业务组织
			vo.setOrgAdministrativeInfoEntity(infoEntity);
		}
		if (vo.getOutfieldEntity() != null) {// 外场不为空时
			// 同步组织名称
			vo.getOutfieldEntity().setName(
					vo.getOrgAdministrativeInfoEntity().getName());
			OutfieldEntity outfieldEntity = null;
			if (StringUtils.isNotBlank(vo.getOutfieldEntity().getId())) {
				vo.getOutfieldEntity().setModifyUser(userCode);
				outfieldEntity = outfieldService.updateOutfield(vo
						.getOutfieldEntity());
			} else {
				vo.getOutfieldEntity().setCreateUser(userCode);
				outfieldEntity = outfieldService.addOutfield(vo
						.getOutfieldEntity());
			}
			vo.setOutfieldEntity(outfieldEntity);
		}
	}
	/**
	 * .
	 * <p>
	 * 修改保安组数据<br/>
	 * 方法名：updateOutfield
	 * </p>
	 * 
	 * @author 130346-foss-lifanghong
	 * @时间 2014-05-20
	 * @since JDK1.6
	 */
	@Override
	@Transactional
	public void updateSecurityTfrMotorcadeInfoByOrg(OrgAdministrativeInfoVo vo,
			String userCode) {
		if (vo == null) {
			throw new BusinessException("vo为空不能修改");
		}
		//int n;
		//组织基本信息不为空
		if (vo.getOrgAdministrativeInfoEntity() != null) {
			vo.getOrgAdministrativeInfoEntity().setModifyUser(userCode);
			//修改行政组织信息
			OrgAdministrativeInfoEntity infoEntity=updateOrgAdministrativeInfo(vo.getOrgAdministrativeInfoEntity(),false);
			//设置行政业务组织
			vo.setOrgAdministrativeInfoEntity(infoEntity);
		}
		if (vo.getSecurityTfrMotorcadeEntity() != null) {// 保安組不为空时
//			// 同步组织名称
//			vo.getSecurityTfrMotorcadeEntity()(
//					vo.getOrgAdministrativeInfoEntity().getName());
			List<SecurityTfrMotorcadeEntity> securityTfrMotorcadeEntityList = new ArrayList<SecurityTfrMotorcadeEntity>();
			if (StringUtils.isNotBlank(vo.getSecurityTfrMotorcadeEntity().getId())) {
				vo.getSecurityTfrMotorcadeEntity().setModifyUser(userCode);
				SecurityTfrMotorcadeEntity entity = vo.getSecurityTfrMotorcadeEntity();
				entity.setActive(FossConstants.INACTIVE);
				securityTfrMotorcadeService.updateSecurityTfrMotorcade(vo.getSecurityTfrMotorcadeEntity());
				securityTfrMotorcadeService.addSecurityTfrMotorcade(vo.getSecurityTfrMotorcadeEntity());
				securityTfrMotorcadeEntityList.add(vo.getSecurityTfrMotorcadeEntity());
				syncSecurityTfrMotorcadeService.syncSecurityTfrMotorcadeToEcs(securityTfrMotorcadeEntityList, NumberConstants.NUMBER_2);
			} else {
				vo.getSecurityTfrMotorcadeEntity().setCreateUser(userCode);
				securityTfrMotorcadeService.addSecurityTfrMotorcade(vo.getSecurityTfrMotorcadeEntity());
				securityTfrMotorcadeEntityList.add(vo.getSecurityTfrMotorcadeEntity());
				syncSecurityTfrMotorcadeService.syncSecurityTfrMotorcadeToEcs(securityTfrMotorcadeEntityList, NumberConstants.NUMBER_1);
			}
			SecurityTfrMotorcadeEntity entity = new SecurityTfrMotorcadeEntity() ;
			List<SecurityTfrMotorcadeEntity> entitys = 
					securityTfrMotorcadeService.querySecurityTfrMotorcadeListBySecurityCode(vo.getSecurityTfrMotorcadeEntity(),NumberConstants.NUMBER_1, NumberConstants.ZERO);
			if(CollectionUtils.isEmpty(entitys)){
				vo.setSecurityTfrMotorcadeEntity(entity);
			}else{
				vo.setSecurityTfrMotorcadeEntity(entitys.get(NumberConstants.ZERO));
			}
		}
	}
	
	
	/**
	 * 
	 *<p>修改组织数据和集中开单组数据</p>
	 *@author 130566-zengJunfan
	 *@date   2013-7-27下午2:00:12
	 * @param vo
	 * @param userCode
	 */
	@Override
	@Transactional
	public void updateOrgAndBillingGroupInfo(OrgAdministrativeInfoVo vo,String userCode){
		if (vo == null) {
			throw new BusinessException("vo为空不能修改");
		}
		//组织基本信息不为空
		if (vo.getOrgAdministrativeInfoEntity() != null) {
			vo.getOrgAdministrativeInfoEntity().setModifyUser(userCode);
			//修改行政组织信息
			OrgAdministrativeInfoEntity infoEntity=updateOrgAdministrativeInfo(vo.getOrgAdministrativeInfoEntity(),false);
			//设置行政业务组织
			vo.setOrgAdministrativeInfoEntity(infoEntity);
		}
		// 判断集中开单组外场不为空
		if (vo.getBillingGroupTransFerEntity() != null) {
			billingGroupTransFerService.mergeBillingGroupTransfer(vo
					.getBillingGroupTransFerEntity());
		}		
		//更新集中开单组营业部
		if(CollectionUtils.isNotEmpty(vo.getSalesBillingGroupEntityDeleteList())){
			for (SalesBillingGroupEntity salesBillingGroupEntity : vo.getSalesBillingGroupEntityDeleteList()) {
				salesBillingGroupEntity.setModifyUser(userCode);
			}
			salesBillingGroupService.deleteSalesBillingGroupEntities(vo.getSalesBillingGroupEntityDeleteList());
		}
		if(CollectionUtils.isNotEmpty(vo.getSalesBillingGroupEntityAddList())){
			for (SalesBillingGroupEntity salesBillingGroupEntity : vo.getSalesBillingGroupEntityAddList()) {
				salesBillingGroupEntity.setCreateUser(userCode);
			}
			salesBillingGroupService.addSalesBillingGroupEntityMore(vo.getSalesBillingGroupEntityAddList());
		}	
		// 查询集中开单组对应的外场
		BillingGroupTransFerEntity billingGroupTransFerEntity = new BillingGroupTransFerEntity();
		billingGroupTransFerEntity = billingGroupTransFerService
				.queryTransFerListByBillingGroupCode(vo
						.getOrgAdministrativeInfoEntity().getCode());
		vo.setBillingGroupTransFerEntity(billingGroupTransFerEntity);		
		//查询集中开单组营业部
		List<SalesBillingGroupEntity> salesBillingGroupEntityList =salesBillingGroupService.
				queryBillingGroupListByBillingGroupCode(vo.getOrgAdministrativeInfoEntity().getCode());
		vo.setSalesBillingGroupEntityList(salesBillingGroupEntityList);		
		
	}
	
	public List<OrgAdministrativeInfoEntity> removeDuplicate(
			List<OrgAdministrativeInfoEntity> allList,
			List<SalesBillingGroupEntity> selectedList) {
		if (CollectionUtils.isEmpty(allList)
				|| CollectionUtils.isEmpty(selectedList)) {
			return allList;
		}
		Map<String, OrgAdministrativeInfoEntity> allMap = new HashMap<String, OrgAdministrativeInfoEntity>();
		for (OrgAdministrativeInfoEntity entity : allList) {
			allMap.put(entity.getCode(), entity);
		}
		Map<String, SalesBillingGroupEntity> selectMap = new HashMap<String, SalesBillingGroupEntity>();
		for (SalesBillingGroupEntity entity : selectedList) {
			selectMap.put(entity.getBillingGroupCode(), entity);
		}

		List<String> duplicatedCode = new ArrayList<String>();
		for (Map.Entry<String, OrgAdministrativeInfoEntity> allEntry : allMap
				.entrySet()) {
			for (Map.Entry<String, SalesBillingGroupEntity> selectEntry : selectMap
					.entrySet()) {
				if (StringUtils.equals(allEntry.getKey(), selectEntry.getKey())) {
					duplicatedCode.add(allEntry.getKey());
				}
			}
		}

		for (String code : duplicatedCode) {
			allMap.remove(code);
		}
		List<OrgAdministrativeInfoEntity> result = new ArrayList<OrgAdministrativeInfoEntity>();
		for (Map.Entry<String, OrgAdministrativeInfoEntity> entry : allMap
				.entrySet()) {
			result.add(entry.getValue());
		}

		return result;
	}
	

	/**
	 * 
	 * 将传入的字符串按一定长度转换成数组
	 * 
	 * @author 088933-foss-zhangjiheng
	 * @date 2013-6-21 下午6:36:49
	 */
	private String[] changeString(String str) {
		int beginIndex = NumberConstants.NUMBER_1333;
		int avgLen = NumberConstants.NUMBER_1333;
		// 获取字符串的字节长度
		int len = str.length() - beginIndex;
		// 需要分割次数，向下取整
		int count = (int) Math.ceil(Double.valueOf(len)
				/ Double.valueOf(avgLen));
		String[] strList = new String[count];
		for (int n = 0; n < count; n++) {
			int endIndex = beginIndex + (n + 1) * avgLen;
			if (endIndex > str.length()) {
				endIndex = str.length();
			}
			strList[n] = str.substring(beginIndex + n * avgLen, endIndex);

		}
		return strList;
	}

	/**
	 * 根据组织标杆编码查询组织信息
	 * 
	 * @author foss-qiaolifeng
	 * @date 2013-7-2 上午11:26:44
	 * @param
	 * @return 成功失败标记
	 * @exception 
	 * @see
	 */
	@Override
	public OrgAdministrativeInfoEntity queryOrgAdministrativeInfoByUnifiedCodeNoCache(
			String unifiedCode) {
		if (StringUtils.isBlank(unifiedCode)) {
			return null;
		}
		OrgAdministrativeInfoEntity entityResult = null;
		OrgAdministrativeInfoEntity entityCondition = new OrgAdministrativeInfoEntity();
		entityCondition.setUnifiedCode(unifiedCode);
		List<OrgAdministrativeInfoEntity> entitys = orgAdministrativeInfoDao
				.queryOrgAdministrativeInfoExactByEntity(entityCondition, 0, 1);
		if (CollectionUtils.isNotEmpty(entitys)) {
			entityResult = entitys.get(0);
		}

		return entityResult;
	}

	/** 
	 * 根据组织标杆编码查询所有子组织
	 * @author foss-qiaolifeng
	 * @date 2013-7-2 下午4:07:09
	 * @param unifiedCode
	 * @return
	 * @see com.deppon.foss.module.base.baseinfo.api.server.service.IOrgAdministrativeInfoService#queryOrgAdministrativeInfoByUnifiedCodeNoCacheList(java.lang.String)
	 */
	@Override
	public List<OrgAdministrativeInfoEntity> queryOrgAdministrativeInfoByUnifiedCodeNoCacheList(
			String unifiedCode) {
		
		if (StringUtils.isBlank(unifiedCode)) {
			return null;
		}

		OrgAdministrativeInfoEntity entityCondition = new OrgAdministrativeInfoEntity();
		entityCondition.setParentOrgUnifiedCode(unifiedCode);
		List<OrgAdministrativeInfoEntity> entityResultChildList = orgAdministrativeInfoDao
				.queryOrgAdministrativeInfoExactByEntity(entityCondition, 0, Integer.MAX_VALUE);
		return entityResultChildList;
	}

	/** 
	 * 通过 组织标杆编码查询该组织下的所有全部组织信息
	 * @author foss-qiaolifeng
	 * @date 2013-7-17 下午6:46:11
	 * @param parentOrgUnicode
	 * @return
	 * @see com.deppon.foss.module.base.baseinfo.api.server.service.IOrgAdministrativeInfoService#queryAllOrgAdministrativeInfoByParentOrgUnicodeCode(java.lang.String)
	 */
	@Override
	public List<OrgAdministrativeInfoEntity> queryAllOrgAdministrativeInfoByParentOrgUnicodeCode(
			String parentOrgUnicode) {
		//检查父标杆编码不能为空
		if(StringUtils.isBlank(parentOrgUnicode)){
			return null;
		}
		
		//查询
		List<OrgAdministrativeInfoEntity> entityResultChildList = orgAdministrativeInfoDao.
				queryAllOrgAdministrativeInfoByParentOrgUnicodeCode(parentOrgUnicode, FossConstants.ACTIVE);
		
		return entityResultChildList;
	}
	
	/** 
	 * 通过 组织标杆编码查询该组织下的所有全部组织信息
	 * @author foss-qiaolifeng
	 * 
	 * @date 2013-7-17 下午6:46:11
	 * @param parentOrgUnicode
	 * @return
	 * @see com.deppon.foss.module.base.baseinfo.api.server.service.IOrgAdministrativeInfoService#queryAllOrgAdministrativeInfoByParentOrgUnicodeCode(java.lang.String)
	 */
	@Override
	public String queryParentOrgNameByParentOrgUnifiedCode(
			String parentOrgUnicode) {
		//检查父标杆编码不能为空
		if(StringUtils.isBlank(parentOrgUnicode)){
			return null;
		}
		return orgAdministrativeInfoDao.queryParentOrgNameByParentOrgUnifiedCode(parentOrgUnicode);
		
	}
	/**
	 * 根据标杆编码获取部门名称
	 * @remark 
	 * @author WangQianJin
	 * @date 2014-3-12 下午4:00:13
	 */
	@Override
	public String queryDeptNameByUnifiedCode(String unifiedCode){
		return orgAdministrativeInfoDao.queryDeptNameByUnifiedCode(unifiedCode);
	}

	/**
	 * 根据部门编码向下查找其下的所有子部门，判断当前部门是否存在其中
	 *
	 * auther:wangpeng_078816
	 * date:2014-4-19
	 *
	 */
	@Override
	public long queryDeptInfoByCode(List<String> codes,
			String code) {
		if(StringUtils.isEmpty(code)&& CollectionUtils.isEmpty(codes)){
			return 0;
		}
		return orgAdministrativeInfoDao.queryDeptInfoByCode(codes, code);
	}
	/**
	 * 配合主数据项目接口新增组织信息
	 * @author 187862-dujunhui
	 * @date 2015-4-16 下午3:8:5
	 */
	@Override
	@Transactional
	public OrgAdministrativeInfoEntity addOrgAdministrativeInfoOfUU(
			OrgAdministrativeInfoEntity entity) {
		// 检查参数的合法性
		if (null == entity) {
			return null;
		}

		OrgAdministrativeInfoEntity entityAdd = orgAdministrativeInfoDao
				.addOrgAdministrativeInfoOfUU(entity);
		if (entityAdd == null) {
			return null;
		}

		// 清缓存
		invalidList(entityAdd.getCode());

		//刷新用户数据权限
		userDeptDataService.addUserDeptBySyncOrg(entityAdd.getCode());
		
		return entityAdd;
	}
	
	/**
	 * 根据部门编码查询标杆编码
	 */
	@Override
    public String queryUnifiedCodeByCode(String code) {
		return orgAdministrativeInfoDao.queryUnifiedCodeByCode(code);
	}
	
	/**
	 * 配合主数据项目接口更新组织信息
	 * @author 187862-dujunhui
	 * @date 2015-4-16 下午3:35:8
	 */
	@Override
	@Transactional
	public OrgAdministrativeInfoEntity updateOrgAdministrativeInfoOfUU(
			OrgAdministrativeInfoEntity entity, boolean isRename) {
		// 检查参数的合法性
		if (null == entity || StringUtils.isBlank(entity.getCode())) {
			return null;
		}

		OrgAdministrativeInfoEntity entityUpdate = orgAdministrativeInfoDao
				.updateOrgAdministrativeInfoOfUU(entity);
		
		// 更新缓存
		invalidOrgCode(entity.getCode());
		invalidList(entity.getCode());
		invalidUnifiedCode(entity.getUnifiedCode());

		// 将名字更新到营业部，车队，外场中
		if (BooleanUtils.isTrue(isRename)) {
			// 更新营业部，车队，外场表
			relevanceOperate(entityUpdate);
			// 更新线路中的线路名称
			lineService.rename(entityUpdate.getCode(), entityUpdate.getName(),
					entityUpdate.getModifyUser());
		}

		return entityUpdate;
	}
	
	/**
	 * 配合主数据项目接口作废组织信息
	 * @author 187862-dujunhui
	 * @date 2015-4-16 下午3:48:6
	 */
	@Override
	@Transactional
	public OrgAdministrativeInfoEntity deleteOrgAdministrativeInfoOfUU(
			OrgAdministrativeInfoEntity entity) {
		// 请求合法性判断：
		if (null == entity || StringUtils.isBlank(entity.getCode())) {
			return null;
		}
		OrgAdministrativeInfoEntity entityDelete = orgAdministrativeInfoDao
				.deleteOrgAdministrativeInfoOfUU(entity);

		entityDelete = orgAdministrativeInfoDao
				.queryLastestOrgAdministrativeInfoByCode(entity.getCode());
		if (entityDelete == null) {
			return null;
		}

		// 更新缓存
		invalidOrgCode(entityDelete.getCode());
		invalidList(entityDelete.getCode());
		invalidUnifiedCode(entityDelete.getUnifiedCode());

		// 将 作废 更新到营业部，车队，外场中
		this.deleteRely(entityDelete);

		return entityDelete;
	}

	/**
	 * <p>行政组织变动时将变动信息插入到中间表中</p>
	 * @author 187862-dujunhui
	 * @date 20150-4-11 上午9:10:24
	 * @param entity
	 * @see
	 */
	private OrgAdministrativeInfoToUUEntity insertAdministrativeInfoToMiddleTable(OrgAdministrativeInfoEntity entity,String operateType) {
		if (entity == null) {
			return null;
		}
		OrgAdministrativeInfoToUUEntity uuEntity=new OrgAdministrativeInfoToUUEntity();
		// ID
		uuEntity.setId(entity.getId());
		// 组织编码
		uuEntity.setCode(entity.getCode());
		// 组织名称
		uuEntity.setName(entity.getName());
		// 是否空运总调
		uuEntity.setAirDispatch(entity.getAirDispatch());
		// 理货业务类型
		uuEntity.setArrangeBizType(entity.getArrangeBizType());
		// 理货部门服务外场组织编码
		uuEntity.setArrangeOutfield(entity.getArrangeOutfield());
		// 是否集中开单组
		uuEntity.setBillingGroup(entity.getBillingGroup());
		//补码简称
		uuEntity.setComplementSimpleName(entity.getComplementSimpleName());
		// 国家地区
		uuEntity.setCountryRegion(entity.getCountryRegion());
		// 派送排单服务外场组织编码
		uuEntity.setDeliverOutfield(entity.getDeliverOutfield());
		// 部门服务区坐标编号
		uuEntity.setDepCoordinate(entity.getDepCoordinate());
		// 部门面积
		uuEntity.setDeptArea(entity.getDeptArea());
		//城市编码
		uuEntity.setCityCode(entity.getCityCode());
		//区县编码
		uuEntity.setCountyCode(entity.getCountyCode());
		// 省份编码
		uuEntity.setProvCode(entity.getProvCode());
		// 是否车队调度组
		uuEntity.setDispatchTeam(entity.getDispatchTeam());
		// 是否可空运配载
		uuEntity.setDoAirDispatch(entity.getDoAirDispatch());
		//是否快递大区
		uuEntity.setExpressBigRegion(entity.getExpressBigRegion());
		//是否快递分部
		uuEntity.setExpressBranch(entity.getExpressBranch());
		//是否快递点部
		uuEntity.setExpressPart(entity.getExpressPart());
		//是否快递虚拟营业部
		uuEntity.setExpressSalesDepartment(entity.getExpressSalesDepartment());
		//是否快递分拣
		uuEntity.setExpressSorting(entity.getExpressSorting());
		// 是否理货
		uuEntity.setIsArrangeGoods(entity.getIsArrangeGoods());
		// 是否派送排单
		uuEntity.setIsDeliverSchedule(entity.getIsDeliverSchedule());
		// 是否实体财务部
		uuEntity.setIsEntityFinance(entity.getIsEntityFinance());
		// 是否大区
		uuEntity.setBigRegion(entity.getBigRegion());
		// 是否事业部
		uuEntity.setDivision(entity.getDivision());
		//是否保安组 
		uuEntity.setIsSecurity(entity.getIsSecurity());
		// 是否营业小区
		uuEntity.setSmallRegion(entity.getSmallRegion());
		// 组织拼音
		uuEntity.setPinyin(entity.getPinyin());
		// 是否营业部派送部
		uuEntity.setSalesDepartment(entity.getSalesDepartment());
		// 是否车队
		uuEntity.setTransDepartment(entity.getTransDepartment());
		// 是否车队组
		uuEntity.setTransTeam(entity.getTransTeam());
		// 是否外场
		uuEntity.setTransferCenter(entity.getTransferCenter());
		// 事业部编码
		uuEntity.setDivisionCode(entity.getDivisionCode());
		// 部门简称
		uuEntity.setOrgSimpleName(entity.getOrgSimpleName());
		// 组织标杆编码
		uuEntity.setUnifiedCode(entity.getUnifiedCode());
		//组织电话
		uuEntity.setOrgPhone(entity.getDepTelephone());
		//组织传真
		uuEntity.setOrgFax(entity.getDepFax());
		//组织邮编号码
		uuEntity.setOrgZipCode(entity.getZipCode());
		//组织地址
		uuEntity.setOrgAddress(entity.getAddress());
		//是否事业部
		uuEntity.setIsManageDepartment(entity.getIsManageDepartment());
		//版本号
		uuEntity.setVersionNo(entity.getVersionNo());
		//部门英文简称
		uuEntity.setOrgEnSimple(entity.getOrgEnSimple());
		// 创建人工号
		uuEntity.setCreateUser(entity.getCreateUser());
		// 创建时间
		uuEntity.setCreateDate(entity.getCreateDate());
		//修改人工号
		uuEntity.setModifyUser(entity.getModifyUser());
		// 更新时间
		uuEntity.setModifyDate(entity.getModifyDate());
		//操作类型
		uuEntity.setOperateType(operateType);
		//修改时间字符串型
		uuEntity.setModifyDateOfUU(entity.getModifyDateOfUU());
		
		return uuEntity;
	}
	/**
	 * 配合主数据项目接口查询组织信息
	 * @author 187862-dujunhui
	 * @date 2015-4-20 下午5:41:25
	 */
	@Override
	public List<OrgAdministrativeInfoEntity> queryOrgAdministrativeInfoOfUUByCodeAndTime(
			OrgAdministrativeInfoEntity entity) {
		return null;
	}
	/**
	 * 
	 * <p>配合主数据项目，插入UUMS至FOSS组织信息</p> 
	 * @author 187862-dujunhui 
	 * @date 2015-4-27 下午2:54:04 
	 * @see com.deppon.foss.module.base.baseinfo.api.server.service.IOrgAdministrativeInfoService#addUUMSToFOSSList()
	 */
	@Override
	@Transactional
	public OrgAdministrativeInfoEntity addUUMSToFOSS(OrgAdministrativeInfoEntity entity) {
		if(entity!=null){
			return orgAdministrativeInfoToUUDao.addUUMSToFOSSMidTable(entity);
		}
		return null;
	}
	
	/**
	 * 
	 * <p>配合主数据项目，根据UUMS至FOSS的中间表关联FOSS组织表查询组织信息</p> 
	 * @author 187862-dujunhui 
	 * @date 2015-4-28 上午10:28:00
	 * @param entity
	 * @return
	 * @see
	 */
	@Override
	public OrgAdministrativeInfoEntity queryOrgAdministrationInfoByMidTable(OrgAdministrativeInfoEntity entity){
		return orgAdministrativeInfoDao.queryOrgAdministrationInfoByMidTable(entity);
	}


	@Override
	public List<OrgAdministrativeInfoEntity> queryOrgAdministrativeInfoBatchByCodeClean(
			String[] codes) {
		if (ArrayUtils.isEmpty(codes)) {
			return null;
		}

		// 在缓存中查找
		List<OrgAdministrativeInfoEntity> entityResults = new ArrayList<OrgAdministrativeInfoEntity>();
		if (SqlUtil.loadCache) {// 客户端不读缓存
			for (String code : codes) {
				OrgAdministrativeInfoEntity org = queryOrgCodeCache(code);
				if (org != null) {
					entityResults.add(org);
				}
			}
		}
		{
			// 如果缓存中找不到，那么到数据库中再找一遍
			if (CollectionUtils.isEmpty(entityResults)) {
				entityResults = orgAdministrativeInfoDao
						.queryOrgAdministrativeInfoBatchByCode(codes);
			}
		}
		return entityResults;
	}

	/**
	 * <p>根据部门名称查询其所在城市名称</p> 
	 * @author 187862-dujunhui 
	 * @date 2015-9-9 下午4:26:04
	 * @param String orgName
	 * @see
	 */
	@Override
	public String queryCityNameByOrgName(String orgName) {
		if(StringUtil.isEmpty(orgName)){
			return null;
		}
		return orgAdministrativeInfoDao.queryCityNameByOrgName(orgName);
	}

	/**
	 * <p>根据部门标杆编码查询部门编码</p> 
	 * @author 187862-dujunhui 
	 * @date 2015-10-13 上午8:25:52
	 * @param String unifiedCode
	 * @see
	 */
	@Override
	public String queryOrgCodeByUnifiedCode(String unifiedCode) {
		if(StringUtil.isEmpty(unifiedCode)){
			return null;
		}
		return orgAdministrativeInfoDao.queryOrgCodeByOrgUnifiedCode(unifiedCode);
	}

	/**
	 * 提供给中转查询方法：出发到达确认需求
	 * @author 187862-dujunhui
	 * @date 2015-11-2 下午2:08:33
	 */
	@Override
	public String queryDepartureOrArriveFleet(String empCode){
		if(StringUtil.isEmpty(empCode)){
			return null;
		}
		EmployeeEntity  entity=employeeService.querySimpleEmployeeByEmpCode(empCode);
		if(entity!=null){//当前查询人所属部门非空
			OrgAdministrativeInfoEntity orgEntity=this.queryOrgAdministrativeInfoByCodeClean(entity.getOrgCode());
			if(orgEntity!=null && !StringUtil.equals("Y", orgEntity.getSalesDepartment())){//当前查询人所属部门非营业部
				if(StringUtil.equals("Y", orgEntity.getTransDepartment())){//是车队
					return orgEntity.getCode();
					}else if(!StringUtil.equals("Y", orgEntity.getTransferCenter())){//非车队非外场情况下查询上级
						OrgAdministrativeInfoEntity orgUpEntity=this.queryOrgAdministrativeInfoByCodeClean(orgEntity.getParentOrgCode());
						if(orgUpEntity!=null && StringUtil.equals("Y", orgUpEntity.getTransDepartment())){//上级是车队则返回编码
							return orgUpEntity.getCode();
						}
					}
			}
		}
		return null;
	}

	@Override
	public Map<String, String> queryOrgNameMapsByCodes(List<String> orgs) {
		
		return orgAdministrativeInfoDao.queryOrgNameMapsByCodes(orgs);
		
	}

	/**
	 * 提供给结算查询方法：提供组织及其子公司信息
	 * @author 273296
	 * 
	 */
	@Override
	public OrgAdministrativeInfoEntity queryOrgAdministrativeInfoByCodeToPkp(
			String code) {
		if (StringUtils.isBlank(code)) {
			return null;
		}
		OrgAdministrativeInfoEntity entity = orgAdministrativeInfoDao
					.queryOrgAdministrativeInfoByCode(code);
		
		if (entity != null) {
			entity = this.attachSubsidiaryName(entity);
		}
		return entity;
	}


	@Override
	public OrgAdministrativeInfoEntity querySimpleOrgAdministrativeInfoByCode(
			String code) {
		if (StringUtils.isBlank(code)) {
			return null;
		}
		OrgAdministrativeInfoEntity entity = orgAdministrativeInfoDao
					.queryOrgAdministrativeInfoByCode(code);
		return entity;
	}

	/**
	 *根据code查询名称
	 */
	@Override
	public String querySimpleNameByCode(String reportDepartmentCode) {
		if (StringUtils.isBlank(reportDepartmentCode)) {
			return null;
		}
		// 先找德邦组织
		return orgAdministrativeInfoDao.queryOrgNameByCode(reportDepartmentCode);
	}
	/** 
	 * <p>根据部门编码跟开单时间查询组织信息，不包含关联各种组织名称之类，只查询基础信息</p> 
	 * 不从缓存进行查询，直接从DB获取
	 * @author Foss-151211-yangtaohong 
	 * @date 2016-4-26 下午8:26:48
	 * @param code
	 * @param billDate
	 * @return 
	 * @see com.deppon.foss.module.base.baseinfo.api.server.service.IOrgAdministrativeInfoService#queryOrgInfoByCodeAndTimeNoAttach(java.lang.String, java.util.Date)
	 */
	@Override
	public OrgAdministrativeInfoEntity queryOrgInfoByCodeAndTimeNoAttach(
			String code, Date billDate) {
		if (StringUtils.isBlank(code)) {
			return null;
		}
		//如果开单时间传入为空，new Date
		Date date = billDate == null ? new Date() : billDate;
		// 不从缓存中查找，直接查询数据库
		List<OrgAdministrativeInfoEntity> alist = orgAdministrativeInfoDao
				.queryOrgAdministrativeInfoForCache(code, date);
		if (CollectionUtils.isEmpty(alist)) {
				return null;
			} else {
				return alist.get(NumberConstants.ZERO);
			}
		}
	
	
	
	public void setSyncSalesDescExpandService(
			ISyncSalesDescExpandService syncSalesDescExpandService) {
		this.syncSalesDescExpandService = syncSalesDescExpandService;
	}

	public void setSalesDescExpandService(
			ISalesDescExpandService salesDescExpandService) {
		this.salesDescExpandService = salesDescExpandService;
	}


	@Override
	public List<OrgAdministrativeInfoEntity> queryCurrentUserChangeDeptsByDeptNameLike(
			String empCode, String deptName, int start, int limit) {
		
		return orgAdministrativeInfoDao.queryCurrentUserChangeDeptsByDeptNameLike(empCode,deptName,start,limit);
	}


	@Override
	public Long queryCurrentUserChangeDeptsCountsByDeptNameLike(
			String empCode, String deptName) {
		return orgAdministrativeInfoDao.queryCurrentUserChangeDeptsCountsByDeptNameLike(empCode,deptName);
	}
}
