/**
 *  initial comments.
 */
/*******************************************************************************
 * Copyright 2013 PKP
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *    http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * PROJECT NAME	: pkp-waybill
 * 
 * FILE PATH        	: src/main/java/com/deppon/foss/module/pickup/waybill/server/service/impl/LabelPrintInfoService.java
 * 
 * FILE NAME        	: LabelPrintInfoService.java
 * 
 * AUTHOR			: FOSS接送货系统开发组
 * 
 * HOME PAGE		: http://www.deppon.com
 * 
 * COPYRIGHT		: Copyright (c) 2012  Deppon All Rights Reserved.
 ******************************************************************************/
package com.deppon.foss.module.pickup.waybill.server.service.impl;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.deppon.foss.base.util.define.NumberConstants;
import com.deppon.foss.framework.exception.BusinessException;
import com.deppon.foss.framework.shared.util.classes.BeanUtils;
import com.deppon.foss.framework.shared.util.string.StringUtil;
import com.deppon.foss.module.base.baseinfo.api.server.dao.ICustomerDao;
import com.deppon.foss.module.base.baseinfo.api.server.service.IAdministrativeRegionsService;
import com.deppon.foss.module.base.baseinfo.api.server.service.IAsteriskSalesDeptService;
import com.deppon.foss.module.base.baseinfo.api.server.service.IExpressPrintStarService;
import com.deppon.foss.module.base.baseinfo.api.server.service.IFreightRouteService;
import com.deppon.foss.module.base.baseinfo.api.server.service.IGoodsAreaService;
import com.deppon.foss.module.base.baseinfo.api.server.service.ILdpAgencyDeptService;
import com.deppon.foss.module.base.baseinfo.api.server.service.IOrgAdministrativeInfoService;
import com.deppon.foss.module.base.baseinfo.api.server.service.IOutfieldService;
import com.deppon.foss.module.base.baseinfo.api.server.service.IPrintMarketingContentService;
import com.deppon.foss.module.base.baseinfo.api.server.service.ISaleDepartmentService;
import com.deppon.foss.module.base.baseinfo.api.server.service.IVehicleAgencyDeptService;
import com.deppon.foss.module.base.baseinfo.api.server.service.complex.IOrgAdministrativeInfoComplexService;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.AdministrativeRegionsEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.CustomerEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.ExpressPrintStarEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.GoodsAreaEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.OrgAdministrativeInfoEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.OuterBranchEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.OuterBranchExpressEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.OutfieldEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.SaleDepartmentEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.dto.FreightRouteLineDto;
import com.deppon.foss.module.base.baseinfo.api.shared.exception.FreightRouteException;
import com.deppon.foss.module.base.dict.api.server.service.IDataDictionaryValueService;
import com.deppon.foss.module.base.dict.api.shared.define.DictionaryValueConstants;
import com.deppon.foss.module.base.dict.api.shared.domain.DataDictionaryValueEntity;
import com.deppon.foss.module.frameworkimpl.server.context.FossUserContext;
import com.deppon.foss.module.pickup.order.api.server.dao.IDispatchOrderEntityDao;
import com.deppon.foss.module.pickup.order.api.shared.domain.DispatchOrderEntity;
import com.deppon.foss.module.pickup.pricing.api.server.service.IGoodsTypeService;
import com.deppon.foss.module.pickup.pricing.api.server.service.IProductService;
import com.deppon.foss.module.pickup.pricing.api.shared.define.PricingConstants;
import com.deppon.foss.module.pickup.pricing.api.shared.define.PricingConstants.ProductEntityConstants;
import com.deppon.foss.module.pickup.pricing.api.shared.domain.GoodsTypeEntity;
import com.deppon.foss.module.pickup.pricing.api.shared.domain.ProductEntity;
import com.deppon.foss.module.pickup.waybill.api.server.dao.IActualFreightDao;
import com.deppon.foss.module.pickup.waybill.api.server.dao.IWaybillDao;
import com.deppon.foss.module.pickup.waybill.api.server.service.ILabelPrintInfoService;
import com.deppon.foss.module.pickup.waybill.api.server.service.ILabeledGoodService;
import com.deppon.foss.module.pickup.waybill.api.server.service.IOmsOrderService;
import com.deppon.foss.module.pickup.waybill.api.server.service.IWaybillManagerService;
import com.deppon.foss.module.pickup.waybill.api.server.service.IWaybillPendingService;
import com.deppon.foss.module.pickup.waybill.api.server.service.IWaybillRfcService;
import com.deppon.foss.module.pickup.waybill.shared.define.WaybillConstants;
import com.deppon.foss.module.pickup.waybill.shared.domain.ActualFreightEntity;
import com.deppon.foss.module.pickup.waybill.shared.domain.LabelPrintEntity;
import com.deppon.foss.module.pickup.waybill.shared.domain.LabeledGoodEntity;
import com.deppon.foss.module.pickup.waybill.shared.domain.OmsOrderEntity;
import com.deppon.foss.module.pickup.waybill.shared.domain.WaybillEntity;
import com.deppon.foss.module.pickup.waybill.shared.domain.WaybillPendingEntity;
import com.deppon.foss.module.pickup.waybill.shared.domain.WaybillPictureEntity;
import com.deppon.foss.module.pickup.waybill.shared.dto.BarcodePrintLabelDto;
import com.deppon.foss.module.pickup.waybill.shared.dto.EWaybillPrintDto;
import com.deppon.foss.module.pickup.waybill.shared.dto.FreightRouteCommonsDto;
import com.deppon.foss.module.pickup.waybill.shared.dto.FreightRouteDto;
import com.deppon.foss.module.pickup.waybill.shared.dto.FreightRouteParamCommonsDto;
import com.deppon.foss.module.pickup.waybill.shared.dto.RouteLineInfoDto;
import com.deppon.foss.module.pickup.waybill.shared.exception.WaybillLabelPrintException;
import com.deppon.foss.module.pickup.waybill.shared.exception.WaybillValidateException;
import com.deppon.foss.module.pickup.waybill.shared.hessian.IWaybillHessianRemoting;
import com.deppon.foss.module.transfer.scheduling.api.server.service.ICalculateTransportPathService;
import com.deppon.foss.module.transfer.scheduling.api.shared.domain.PathDetailEntity;
import com.deppon.foss.module.transfer.stock.api.server.service.IStockService;
import com.deppon.foss.module.transfer.stock.api.shared.domain.StockEntity;
import com.deppon.foss.util.define.FossConstants;
 
/**
 * 获得标签打印信息 标签打印主service。获得标签基本数据 解析货物走货路径
 * <p style="display:none">
 * modifyRecord
 * </p>
 * <p style="display:none">
 * version:V1.0,author:foss-jiangfei,date:2012-11-13 下午4:20:08,content:
 * </p>
 * 营业员开完单后，打印运单标签。 外场操作员发现货物标签损坏或标签条码不能识别时或需要包装更改时，重新补打标签。
 * 条码打印界面包含信息：如上图，分为5个部分。 1、运单信息： 1.1 运单号：开单时的运单号，可编辑。 1.2
 * 件数：为运单号开单总件数，来源开单信息，不可编辑。 1.3 始发站：对应运单号的始发部门，来源开单信息，不可编辑。 1.4
 * 收货人；对应货物收货人，来源开单信息，不可编辑。 1.5 目的站：对应货物最终到达部门，来源开单信息，不可编辑。 1.6
 * 运输性质：选项为精准、普货、偏线、空运；来源开单信息，不可编辑。 运单号录入后，才会关联显示1.2~1.6字段信息。
 * 2、模板标注信息：显示内容，如图“条码打印”中的2，固定式，不可编辑。 3、包含信息： 3.1 起始件数序号：可编辑，输入信息为数字。 3.2
 * 截止件数序号：可编辑，输入信息为数字。 3.3 补打件数：可编辑，为数字格式，下拉框或手动输入，整数，1为开始，递增。 操作要求参见SR-5。 3.4
 * 异型货物：货物为异常尺寸或其他类型时，人工勾选此项。 3.5 当前打印机：显示本地打印机名称，下拉框，可选择打印机，默认为选择，来源打印设置。
 * 4、最终打印流水号： 4.1 默认显示为空； 4.2 起始件数序号与截止件数序号录入后，件数对应的流水号信息，添加到此列表显示框中。
 * 具体增减匹配原则，参见SR-3。 5、包含信息： 5.1
 * 打印设置按钮；点击打印设置按钮，link标签打印机设置弹出框，参见界面原型及描述1.5.3、1.5.4。 5.2
 * 打印按钮：可直接按照打印标签模板来打印标签。 5.3 退出按钮：退出当前页面。 界面描述： 1. 界面标题：标签打印机设置，界面信息如下： 1.1
 * 主打印机：可选择按钮本地机器的打印机。 1.2 备用打印机：可选择按钮本地机器的打印机。 1.3 左边距：可设置左边距。 1.4 上边距：可设置上边距。
 * 1.5 保存设置按钮：可保存设置。 1.6 退出按钮：退出当前操作界面。 1、 查询出来的运单信息填充相应控件，打印件数默认为运单件数，不可更改
 * 
 * 2、如果运单是特殊货物，异常货物复选框功打勾，如果是非特殊物品，不打勾
 * 
 * 1、输入的运单单号必须存在，如果是在开单界面，点击打印标签时， 则运单号自动显示在打印标签的运单号栏内 2、如果单号为空，需要提示输入运单号（扩展）
 * 3、打印标签，那么需要判断是否已安装驱动（扩展） 4、打印模板 “标签打印样例”界面元素可参考标签打印信息
 * 标签上呈现公司LOGO、打印人工号，打印日期，条码、单号，总件数， 包装，走货路径，货区库位号，始发城市、最终目的站中文名称、
 * 最终外场中文名称，运输性质、送货标志 、A、B货标志 打印内容标签信息解释
 * 
 * （1）走货路径：货物在运输途中将要经过的外场，以编码的形式呈现，标签上最多呈现4个中转外场编码。 数据来源：所属部门所在的部门信息表中的“外场编码”；
 * （2）货区库位号：与现有标签的实现形式相同。
 * 
 * （3）最终目的站：货物最终到达目的站中文名称，包括营业部、派送部、偏线。使用汉字，字体高度达7mm 。 数据来源：与现有标签的实现形式相同。
 * 
 * （4）最终外场：货物最后经过的一个外场中文名称，使用汉字，字体高度达10mm，便于人工分拣时识别
 * 
 * 数据来源：根据提货网点中对应的最终外场，去部门信息中查询该最终外场对应的城市，读取城市的名称。
 * 
 * （5）打印人工号及打印日期：标签打印人的工号及打印日期，便于品管判断开单差错、标签差错及包装不合格
 * 
 * 数据来源：打印人工号为所使用打印程序的当前ERP的登陆工号，打印日期为当前日期。
 * 
 * （6）始发城市：货物出发城市，增加始发城市，便于后面环节发现问题时联系
 * 
 * 数据来源：始发配载部门基础资料中，营业部对应到相应的配载部门，再去部门信息中读取该配载部门所在城市。
 * 
 * （7）运输性质：“精准”的是黑底白字，其他的都是白底黑字
 * 
 * （8）总件数：货物的总件数，便于品管判断开单差错及标签差错
 * 
 * 数据来源：营业部司机开单件数
 * 
 * （9）送货标志：区分派送货物与自提货物
 * 
 * 数据来源：开单提货方式中，需要送货的，显示“【送】”字
 * 
 * （10）货物包装：显示货物的包装信息 数据来源：开单界面录入的开单信息，包装信息太长不能打下的部分，不打印。
 * 
 * 打印规则： （1）、条码打印：运单单号+流水号（格式4位，例如：0001）+平均重量
 * （平均重量=总重量/件数，3位)+最终外场编码（一般3位）+目的站编码（提货网点对应编码）
 * （2）走货路径及对应的库位号只保留前四个，且全部居中显示，超出规定的部分将不能打印出来
 * 
 * 
 * 注：红圈所示为走货路径和库位号
 * 
 * （3）始发城市要能最大支持打印4个汉字，当字数为3个及以下时， 一排打印，当字数为4个时，分成上下两排打印，例如： ，
 * 超出4个汉字不再打印。目的站最多支持打印7个汉字，超过规定字数的部分将不能打印出来，
 * 考虑到以后派送区域将详细到街道，可能对派送区域进行编号，目的站名称中可能会包含数字， 例如：上海浦东⑩
 * 
 * 
 * （4）最终外场最多支持打印5个汉字，超过规定字数的部分将不能打印出来 （公司目前还没有5个字的外场/专线名称）
 * 
 * （5）单号打印要求 单号排列形式为上面4位，下面4位。后4位基本可以做为判断货物的依据，便于操作人员快速识别单号
 * 
 * 
 * 注：目前是使用8位数的单号，未来当8位数的单号用完时，将自动升级为9位。当升级为9位时， 上面打印5位数字，下面仍打印4位数字，如下图所示：
 * 
 * 
 * （6）LOGO、运输性质、件数等打印要求 取消了标签“打印部门、打印人”，但新增了打印人工号，保留了打印日期，
 * 仍可为品管提供判断依据；件数支持4位数，因为目前开单件数基本不会超过5000件，
 * 若超过5000件，会直接走整车，无需贴标签；保留包装信息，但最多支持5个汉字，
 * 超出将不允许打印，也不允许出现“跳纸”现象，即未打印出来的包装信息跳到下一张标签上。
 * 
 * （7）在标签上添加A\B货标志，用英文字母表示。其中A代表一类货物，B代表一类货物 具体如下图所示：AB货信息读取开单时的所选的AB货选项。
 * 
 * 注：字体大小与走货路径中的字母大小相同 （8）打印异常货物，在包装前面打印【异】
 * 
 * 
 * 7、打印后系统自动记录打印流水号、打印人、打印时间
 * 
 * 8、如果运输性质为“精准”，匹配基础资料SUC-724-录入出发地与目的地时效信息，
 * 中的“长短途”数据元素，如果是“长”打印时在运输性质后面加“（长）”， 如果是“短”打印时在运输性质后面加“（短）”
 * 
 * 起始件数序号、截止件数序号与最终打印流水号匹配关系： 1. 时，对应最新打印流水号列表框添加后，显示为： 2.
 * 时，对应最新打印流水号列表框增减后，显示为： 。 1.从其他页面，跳转条码打印页面时，默认将已选择的流水号关联到“最终打印流水号”列表中。
 * 
 * 点击打印按钮，则完成流水号的打印。 2. 最终打印流水号已有信息，如果再通过“起始件数序号及截止件数序号编辑框”添加信息时，
 * 系统会提示“是否要继续手动添加打印流水号？”选择是，则已有的最终流水号信息被替换
 * （通过编辑起始件数序号或截止件数序号，来增减）；选择否，则“最终打印流水号中的流水号”信息不变动。
 * 当补打件数输入数值时，则起始件数序号、截止件数序号为空； 输入补打件数，点击打印按钮时，系统会在原流水号基础上递增流水号，
 * 总件数不变。例如开单件数为3件，输入补打件数2时，打印标签记录为4/3,5/3。 1、流水号和件数放在一起，以000X/件数形式存在，A/B货标志换位置；
 * 2、条码内信息保留：运单号9位、流水号4位、目的站编码4位、现条码内的重量和最终外场字段取消； 3、把条码放置在标签的右下角，条码下方显示条码内数字内容；
 * 4、目的站字体可随字体的多少调整大小 1.8.1 运单信息：
 * 
 * 运单单号 运单单号 件数 运单件数 收货人 收货联系人 出发城市 收货城市 到达城市 到达城市 外场编码 外场编码 库位号 对于的库位号 最终外场城市名称
 * 件数流水号 标签打印件数对应的流水号。 件数流水号：格式统一制定 录入货物信息SUC业务规则 1.
 * 若货物为违禁品，则系统自动提示“货物为违禁品，不可开单！”； 2. 若货物为贵重物品，则系统自动勾选“贵重物品”，且不可修改； 3.
 * 若货物为限保物品，则系统自动限定保价金额，且不可修改，并提示“货物为限保物品”； 4.
 * 违禁品、拒收品、贵重物品、限保物品（含保价金额上限）具体类型可在系统中进行配置； 1. 货物重量单位为千克； 2.
 * 运单开单时，货物的件数、重量及体积文本框是必填项，默认值为空； 3. 件数只能是大于等于1的整数，重量及体积只能大于0。 4.
 * 体积、重量这种过程数据保留两位小数 1. 尺寸录入文本框，支持'长*宽*高*件数+长*宽*高*（即多个尺寸相加）的计算； 2.
 * 如果件数是1，则不强制在录入时要“*1”； 3.
 * 货物尺寸为计算器输入，输入的尺寸可以进行加减，例如：1*1*1*5+2*2*2*3-0.5*0.5*0.5， 显示为输入文本； 4.
 * 尺寸计算单位为厘米，尺寸计算出数据后转换单位为立方米后，在货物体积中显示数据；
 * 例如：尺寸录入为：50*50*20（其中20为件数），则体积显示数据为：0.05； 5.
 * 体积为空时，录入尺寸后，填充体积。当尺寸修改时，体积随之变处。当修改体积时，尺寸不变化。 6.
 * 体积初始值为“0”，仍保持必填，操作员根据实际情况改，选择木架或木箱或两者都选择后则该值不能为0 1. 货物体积单位为立方米； 2.
 * 营业员可以修改通过尺寸计算器计算得出的体积数据； 3. 系统设置货物重量体积比区间值（该值由基础资料配置），在运单提交时，系统自动对重量体积比进行校验：
 * 即重量体积比X=重量/体积； 3.1 当X不在设置的区间中，弹出提示“请确认录入的重量体积是否准确！”；
 * （该弹窗有两个按钮：确定、取消）点击确定时，弹出确认运单信息界面；点击取消，点返回运单录入界面； 3.2 当X在区间中，无提示；直接进入确认运单信息界面；
 * 4. 录入重量体积后，系统校验单票的重量体积及单件（平均单件）的重量体积是否
 * 满足“修改-查询行政组织业务属性”基础资料中的单票和单件重量体积限制；只要该四项中有 一项不满足，则提示“XX超出提货网点限制，请重新选择提货网点！”；
 * 1. 货物包装总件数小于等于货物总件数，如果大于总件数，提示：“包装件数不能大于总件数”； 1.
 * 当木包装件数大于等于1时，系统校验出发城市和对应目的站的走货路由中是否有有打木架功
 * 能的部门，若有，则提醒营业员“是否收入代打木架？”，是，则进入场代打木架信息录入界面”，
 * 并显示第一个有打木架功能的部门名称；若走货路由中无有打木架功能的部门，则不提示“是否收入代打木架？”； 2.
 * 当走货路由中有有打木架功能的部门为多个时，只显示系统路由中第一有有打木架功能的部门， 且不可修改； 1.
 * 运输类型为汽运时，货物类型为唯一选择项；即，非A即B；默认不可勾选，只有当走货路由经过 特定的城市时需要录入货物类型,特定城市可在系统中进行配置； 2.
 * 运输类型为空运时，货物类型为下拉选择框，默认显示为普货，目前只有这一个分类，该类型可做配置； 1. 贵重物品判断规则： a.
 * 单票单件货物，体积≤0.05立方且保价声明价值≥1万元； b. 单票多件货物，平均单件体积≤0.2立方且平均单件保价声明价值≥1万元；
 * （注：平均单件体积=开单总体积÷开单件数，平均单件保价=开单保价声明价值÷开单件数） c. 高保价货物，单票货物保价≥10万元；
 * 满足以上任意一个条件时，系统将判定该票货物为贵重物品并自动勾选"贵重物品"复选框，且为灰色，
 * 不可编辑；不满足以上条件时，该复选框为可编辑状态，用户可根据实际情况自行选择是否勾选； 2.
 * 若"贵重物品"复选框被勾选，则在【储运注意事项】中自动加入提示记录"贵重物品"字段，
 * 若该货物为贵重物品时，"储运注意事项"中信息显示优先级为：贵重物品＞其他； 1. 录入的打木架货物件数和打木箱件数之和必须大于等于录入的木包装件数； 2.
 * 系统默认标签流水号前X的货物为需要代打木架货物，X等于录入的“打木架货物件数”和“打木箱货物件数”之和； 3.
 * 营业员在打印标签时，按流水号先贴要打木架或打木箱的货物； 1.
 * 录入的打木架货物体积和打木箱货物体积之和乘以1.4必须小于等于货物总体积；该1.4为打木架体积计算系统， 可配置； 2.
 * 营业部开单时按打完木架后的包装开，即包装中含“木架/木箱”，开单件数为货物打木架/木箱前的实际件数 （防止丢货），尺寸和重量按照以下公式计算： 1.1
 * 整票货物代打时：开单体积=代打货物体积*1.4；开单重量=所有货物重量+代打货物体积*42； 1.2
 * 部分货物代打时，开单体积=代打货物体积*1.4+未打木架货物体积；开单重量=所有货物重量+代打货物体积*42。
 * 即：营业部按照代打货物未打木架之前体积的1.4倍来开单收费，重量另加，单票中未打木架的货物的体积和重量不变； 1.3
 * 例如：一票货物需全部代打，货物体积为1个方，重量为100KG，则开单体积为1.4个方，
 * 开单重量为100+1*42=142KG，收取客户包装费为150*1.4=210元； 1.4
 * 需要加托时，仍按照50元/个另外收取费用，托的重量和体积不再另加；营业部不需要再更改由于打 木架引起重量和体积的变化； 3.
 * 打木架要在“对内备注”中备注“代打木架/木箱”，特殊要求（特别是合打情况）必须在对内备注 和A4纸上都注明，例如：货物1、2、3合打成一件等； 4.
 * 开单件数为代打木架前货物实际件数，包装为打木架后的包装，打木架后件数发生变化后，需及时更改件数；
 * 
 * 
 * 录入运输信息SUC业务 规则 1. 收货部门默认为操作者所在的部门，不可修改； 2.
 * 若操作者部门为集中开单部门时，则收货部门可修改，其选择部门只能为开单组服务的集中接货区域营业部；
 * 且其进进入运单开单界面时，系统自动默认收货部门为上一次开单的收货部门； 1. 默认显示精准； 1.
 * 根据部门的性质或所在城市确定部门所作业务的性质，如有些部门可做所有运输性质的业务，
 * 部分部门无法做精准业务，所有规则根据营业部业务管制确定（根据出发城市、到达城市确定部门可做的业务性质， 所有数据读取自营业部业务管制基础资料）； 1.
 * 当运输性质为空运时，提货方式有：自提（不含机场提货费）、免费自提、机场自提、免费送货、
 * 送货进仓、送货上楼、送货（不含上楼)；默认为自提（不含机场提货费）； 2.
 * 如果客户是CRM中的合同客户，在开单时提货方式选项中增加"免费送货"选项，免费送货送货费为0（不可修改）； 3.
 * 当运输性质为精准、普货、偏线时，提货方式有：自提、免费送货、送货进仓、送货上楼、 送货（不含上楼)、内部带货自提；默认为自提； 1.
 * 当运输性质为空运时，开单提货网点显示空运代理网点及公司可做空运的自有网点； 2. 当运输性质为偏线时，提货网点只显示偏线代理网点； 3.
 * 当运输性质为精准、普货时，提货网点显示我司所有可所到达的网点； 1. 当运输性质为空运，且提货方式为机场自提时，增值服务的其它费用中可添加对就有规则的费用
 * （暂定方案：对于单独开单的可做增值服务费用添加。若以后在产品定义中区分了单独开单和合大票，则另考虑）； 1.
 * 提货方式为机场自提时，代收货款设置为0且不可编辑，不能开单含到付款，，付款方式不能开到付；
 * 否则，提示：“提货方式为【机场自提】时，到付金额必须为0，付款方式不能为到付”； 2.
 * 提货方式为内部带货自提时，只能填写发货人收货人信息和货物信息，所有涉及金额的控件均为0， 收货人和发货人只能为OA系统中部门； 1.
 * 提货方式为自提（不含机场提货费）、免费自提、内部带货自提时，只显示可做自提业务的网点； 2. 提货方式为送货时，只显示可做送货业务的网点； 1.
 * 目的站可由收货客户地址的城市（即收货客户地址中的“市”）生成，也可手工录入； 2. 系统自动过滤只显示目的站城市符合条件的网点信息； 3.
 * 选择确定提货网点信息后，系统自动生成对应网点的目的站名称于目的站框内； 网点目的站读取对应的网点目的站基础资料； 4.
 * 在网点目的站基础资料中有‘取消到达日期’，如果当前日期在‘取消到达日期’之前，
 * 那么提示“xx营业部将于xx年xx月xx日临时取消到达，届时货物将转至xx营业部，请做好客户解释工作！”
 * （其中第一个xx营业部，为当前营业部、第二个xx营业部为网点目的站基础资料中的‘转货部门‘， xx年xx月xx日为‘取消到达日期’） 5.
 * 录入重量体积后，系统校验单票的重量体积及单件（平均单件）的重量体积是否满足
 * “修改-查询行政组织业务属性”基础资料中的单票和单件重量体积限制；只要该四项中有一项不满足， 则提示“XX超出提货网点限制，请重新选择提货网点！”； 1.
 * 当通过运输性质、提货方式和目的站过滤的提货网点唯一时，直接显示提货网点名称； 1.
 * 当勾选上门接货时，自动显示文本框，录入接货司机工号，接货费数字框可录入，手写现付金额，可编辑 2.
 * 当不勾选上门接货时，接货费清0变灰且不可录入，手写现付金额变灰，不可编辑 1. 当录单部门为集中开单部门时，自动勾选上门接货，且不可修改； 2.
 * 上门接货默认不勾选，可修改；3. 1. 对外备注可多选，选择的项目信息依次显示在储运注意事项中；默认为空； 2. 当选择空时，则其它所有选项自动不勾选；
 * 3. 对外备注已选择录入后，若再选择空，则清空已选择的所有对内备注； 1.
 * 储运注意事项=对外备注&对内备注&大车直送（若勾选大车直送），各字段以“；”分开； 2. 对外备注永远在储运注意事项的最前面； 1.
 * 当运输性质为精准、普货、偏线时，显示配载线路；系统自动根据营业部所在城市和到达目的站 匹配走货线路基础资料，生成预配线路，且不可修改； 2.
 * 当运输性质为空运时，显示配载航班，包括：早班、中班、晚班、中转航班；默认为空； 1. 系统自动匹配始发配载部门基础资料，通过配载类型来判断配载部门； 1.
 * 如果提货网点为自有网点时，最终配载部门为提货网点名称；如果提货网点不是自有网点，
 * 则最终配载部门为外发代理网点的管理部门；（参考基础资料：外发代理、部门基础信息基础资料）； 2.
 * 当运输类型为空运时，最终配载部门可编辑，且列举对应收货部门可走空运货的空运总调， 默认显示为空；若对应收货部门可走空运货的总运总调唯一时，则直接显示；
 * 1. 预计出发时间在运单提交时进行判断填充； 2. 预计出发时间适用于运输类型为“精准”； 3.
 * 预计出发时间=预计出发日期,准点出发时间。【格式如：2011-6-28 ,12:00:00】
 * （部门对应的“准点出发时间”，数据取自基础资料：经营-运作基础资料）； 4.
 * 如果开单当前时间在准点出发时间前，则预计出发日期=开单日期；否则，预计出发日期=开单日期+1； 5.
 * 当运输性质为普货、偏线时，则预计出发日期=开单日期+1； 1. 预计提货/派送时间适用于运输类型为“精准”； 2.
 * 提货方式为“自提”时，若部门对应的“是否当天出发”为“是”， 则预计提货/派送时间=预计出发日期+到达营业部承诺天数：到达营业部承诺时点；
 * 否则，预计提货/派送时间=预计出发日期+到达营业部承诺天数-1：到达营业部承诺时点； （部门对应的“是否当天出发”，数据取自基础资料：经营-运作发车标准；
 * “到达营业部承诺天数”和“到达营业部承诺时点” ，数据取自基础资料：专线-城市承诺时间标准；） 3. 提货方式包含为“送货
 * ”时，若部门对应的“是否当天出发”为“是”， 则预计提货/派送时间=预计出发日期+到达营业部承诺天数+派送承诺需加天数：
 * 派送承诺时点；否则，预计提货/派送时间=预计出发日期+派送承诺需加天数-1：
 * 派送承诺时点；（部门对应的“是否当天出发”，数据取自基础资料：经营-运作发车标准；
 * “到达营业部承诺天数”、“到达营业部承诺时点”、“派送承诺时点”、“派送承诺需加天数”， 数据取自基础资料：专线-城市承诺时间标准；） 1.
 * 大车直送默认不勾选，且不可修改； 2. 当单票货物重量超过8吨或体积大于25方时，系统提醒“是否需要大车直送？”；
 * 营业员确定后，自动勾选大车直送，且大车直送变为可修改状态； 3. 勾选大车直送时，在储运注意事项中增加大车直送显示；不勾选时，不显示；
 * 1、检验单号是否唯一（有效状态的运单唯一，中止/逻辑删除等的运单不参与检查），
 * 如果唯一系统不做操作，如果不唯一，系统提示“XX单号已经使用，请重新输入单号”
 * 2、新增一条业务规则：在提交运单之前，若相邻两次输入的单号（两次单号分别为A与B且单号输入合法）
 * 差别较大时，系统给予用户友好提示避免录错单号，但不限制单号的输入。具体规则为： 1）若前后两次输入的单号位数相同，当|A-B|≥100时系统给予提示；
 * 2）若前后两次输入的单号位数不同，系统给予提示； 3）提示信息为：前后两票单号相差过大，请检查所输单号是否是本部门所属单号！
 * 
 ** 增值服务SUC规则如下 1.1 相关业务用例 BUC_FOSS_5.20.30_510 确认承运信息 1.2 用例描述 营业员通过本用例录入增值服务信息。
 * 1.3 用例条件 条件类型 描述 引用系统用例 前置条件 后置条件 1.4 操作用户角色 操作用户 描述 营业员 可查询、录入、修改增值服务信息 1.5
 * 界面要求 1.5.1 表现方式 Web方式 1.5.2 界面原型 1.5.2.1 录入增值服务信息 1.5.2.2 查询发货客户代收货款退款联系人
 * 1.5.2.3 查询其它费用 1.5.3 界面描述 营业员点击运单开单，进入运单开单界面。 本界面为录入增值服务信息。
 * 界面主要分为二个部分：录入增值服务、查询其它费用。 1. 录入增值服务
 * 录入增值服务分为三个部分：录入增值服务信息界面、录入其它费用列表、查询发货客户代收货款退款联系人； 1.1 录入增值服务信息界面
 * 录入增值服务信息界面包括： 1.1.1 保价声明价值； 1.1.2 保价费率：保价费率可由基础资料配置，可按出发城市区域，出发营业部等； 1.1.3
 * 保价费； 1.1.4 代收货款； 1.1.5 代收费率； 1.1.6 代收手续费； 1.1.7 退款类型：包括三日退、退日退、审核退，默认三日退为空；
 * 1.1.8 收款人姓名； 1.1.9 收款人帐号； 1.1.10 包装费； 1.1.11 装卸费； 1.1.12 送货费； 1.1.13 其它费用合计；
 * 1.1.14 接货费； 1.1.15 返单类别：包含“无需返单”、“客户签收单原件返回”、“客户签收单传真返回”、
 * “运单到达联传真返回”包括无需返单、原件签收单返回、传真件签收单返回、扫描件返回，默认无需返单； 1.1.16 预付费保密； 1.2 录入其它费用列表
 * 录入其它费用列表包括： 1.2.1 费用名称； 1.2.2 费用金额； 1.2.3 新增其它费用：功能按钮； 1.2.4 删除其它费用：功能按钮； 1.3
 * 查询发货客户代收货款退款联系人 1.3.1 操作列； 1.3.2 开户银行； 1.3.3 收款人姓名； 1.3.4 银行帐号； 1.3.5 备注信息；
 * 1.4 录入包装费 2. 查询其它费用 查询其它费用分为四个部分：其它费用列表 、功能按钮； 2.1 其它费用列表： 其它费用列表包括： 2.1.1
 * 名称； 2.1.2 归集类别； 2.1.3 描述； 2.1.4 金额； 2.1.5 金额上限； 2.1.6 金额下限； 2.1.7 是否可修改；
 * 2.1.8 其它费用可基础资料配置，并支持是否启用和是否可见的维护； 2.2 功能按钮： 2.2.1 查询：包括查询条件：名称； 2.2.2 确定；
 * 2.2.3 取消； 1. 限保物品（例如：“陶瓷”、“门窗”等）默认保价1000不可修改,
 * 且保价费率可手动调整；（限保物品从限运物品基础资料中获取）；非限保物品的保价费率不可修改； 2. 实际保险费小于最低保费的按最低保费收取； 3. 保价费
 * = 保价申明价值*保价费率，不可修改； 4. 保价申明价值默认为3000，可以修改；保价声明价值不封顶； 5.
 * 精准（长途）、普货（长途）、偏线，最低一票8元；普货（短途）、 精准（短途）最低一票6元；空运最低一票10元；所有运输方式保价超过最低均按0.4%收取
 * （数据读取自保价设置基础资料）；长短途数据读取计价基础资料； 6. 实际保价费小于最低保费的按最低保费收取； 7.
 * 保价费率首先是配置的标准费率。当有区域保价费率时，以区域保价费率为准。 当客户为合同客户时，则以合同签订为准。所有的保价费率以读取的为准，不可修改。
 * 限保物品的保价费率同样不可修改 行政组织业务属性-营业部信息中增加增值服务（返回签单、货到付款、代收货款）选项，
 * 开单是否可以进行返回签单、货到付款、代收货款需要根据到达部门属性 是否可以（返回签单、货到付款、代收货款）来决定 1.
 * 如果不是CRM客户或者派送网点基础资料中代收货款属性为”否”，代收货款设置为0且不可编辑； 2.
 * 如果是CRM客户、对应派送网点基础资料中代收货款属性为”是”且CRM中有账户信息，
 * 代收货款可编辑，且可以选择所有的退款类型，若CRM中若无账户信息，则退款类型只能选择审核退 3. 开单时系统默认代收货款为空； 4.
 * 代收货款栏默认为空，如果没有代收货款，则要求输入0；否则，进行提示：“请确认该单没有代收货款，
 * 如无，请输入数字0”；当代收货款大于0时，输入后，对于选择的退款类型，有如下限制： 3.1 三日退：在收到客户代收货款后第三天给客户打款。 3.1.1
 * 默认退款类型为三日退； 3.1.2 代收10000元以下费率0.5%， 10000元以上费率0.4%；最低10元/票，最高100元/票；
 * 有部分城市三日退费率为0.（通过基础资料“代收货款费率”及“特殊城市与部门代收货款费率”实现）。 3.2
 * 审核退：收到客户代收货款，出发部门审核后，给客户打款。 3.2.1
 * 代收10000元以下费率0.5%，10000元以上费率0.4%；最低10元/票，最高100元/票（
 * 通过基础资料“代收货款费率”及“特殊城市与部门代收货款费率”实现）。 3.2.2
 * 选择审核退时，客户收款信息体现在开单界面，若无账号时可以提交运单后再走账号修改流程进行补充。 3.3 即日退：在收到客户代收货款后24小时到账。
 * 3.3.1 代收手续费率1%，最低20元/票，最高200元/票；有部分城市特殊（通过基础资料“代收货款费率”及“特殊城市 与部门代收货款费率”实现）。
 * 3.3.2 必须先录入客户收款银行信息，提交时，银行信息不能为空； 3.3.3 只支持4个银行：农行、工行、建行、招行；否则，给予提示信息； 5.
 * 限制代收货款金额不能小于10元，可以等于10元；但可以为0；该数字“10”可由基础资料配置； 6.
 * 网上订单导入开单时，代收货款金额读取网上订单的代收货款金额，有数据时不可对代收货款进行修改， 只可起草出发更改进行修改；若网上代收货款为0
 * ，系统可支持修改代收货款金额； 7. 默认的代收费率由基础资料配置； 1. 保价费和代收货款费用无法编辑更改，只能更改保险声明价值和代收货款金额； 1.
 * 代收退款收款人姓名只能为发货客户绑定的收款人姓名和帐号，且只能选择，不能修改；
 * 当退款人姓名和帐号唯一时，直接显示；（数据读取CRM客户信息资料（退款帐户信息）） 2.
 * CRM客户信息资料的要先在CRM中录入客户退款帐户信息，且第一次在我司办理代收货款业务时， 退款类型只能为审核退； 3.
 * 同一客户多个银行信息的显示问题：当有两个或以上账号时，弹出账号信息（包括开户银行、收款人、
 * 账号、备注），选中其中的一条银行信息记录后，账号和收款人信息显示在开单界面对应的位置； 1. 包装费默认为0，可手工修改； 2.
 * 当录入有打木加信息时，默认显示包装费=max（150*打木架货物体积，30）+max（300*打木箱货物体积，40），
 * 且可修改，修改的金额只能大于等于默认显示金额；其中150、30、300、40为打木架单价（元/方）、打木架最低一票、
 * 打木箱单价（元/方）、打木箱最低一票，可由基础资料配置； 1. 装卸费金额需满足不能超过纯运费的15%（特殊部门为35%）。
 * 即：装卸费（M）<=纯运费（C0）*15%（特殊部门为35%）=【重量/体积】（Z）*原费率（Q0）*15%（特殊部门为35%），
 * （其中，原费率Q0为：公布价）。 当装卸费大于零时，开单显示费率（Q）=（M+CO*优惠折扣）/（优惠折扣*Z） ， 开单显示运费（C）=Q*Z=C0+M
 * 。且此显示费率不可更改；（对于专线的散客而言） 2. 如果该客户为月结客户、整车、中转下线或偏线，则原费率（Q0）为装卸费前的费率，为系统默认的公布价。
 * 开单最终显示费率（Q）=（M+CO*优惠折扣）/（优惠折扣*Z） ，开单显示运费（C）=Q*Z=C0+M ； 3.
 * 当修改除装卸费影响外有影响费率的地方时（如目的站更改、重量和体积变化影响到费率），
 * 需先清空装卸费为零，然后再修改数据。如：月结客户与非月结客户、整车与非整车、目的站、重量、体积； 4.
 * 当装卸费由M1修改为M2时：先判断M2是否满足公式：M2<=(Q1-M1/Z）*Z*15%（特殊部门为35%）。
 * 如果公式成立，则最终显示费率Q2=Q1-M1/Z+M2/Z，最终显示运费（C2）= Q2*Z。否则，清空装卸费为零，
 * 最终显示费率Q2=Q1-M1/Z，最终显示运费（C2）= Q2*Z。（其中Q1是装卸费M1时的费率,Z为重量/体积）； 5.
 * 系统如果是运费最低一票，要求装卸费=0，即装卸费不允许修改。（只限制配载类型为专线的，包括月结）； 6.
 * 对于显示费率不等于显示费率乘以重量的问题，要求如下： 6.1.
 * 若该单含装卸费且折算后的费率（A）的有效小数位为小于或等于两位小数，则显示费率（Q）=费率（A）。 且显示运费等于该显示费率*重量； 6.2.
 * 若该单含装卸费且折算后的费率（A）的有效小数位大于两位小数，令费率（B）=费率（A）
 * 的取前2个小数位的值（注：直接截取A的值，不四舍五入）。则显示费率（Q）=费率（B）+0.01。 显示运费等于该显示费率*重量； 7.
 * 只要含与不含装卸费两者有交叉的，均以不含为准； 8. 装卸费特殊部门表： （建议：做为可配置的基础数据表） 9.
 * 2012年12月1日开业的部门不能开装卸费 10. 如果订单渠道为阿里巴巴或者是月发越送属性客户不可开装卸费 11.
 * 是否可以开装卸费的依据取决于部门的业务属性（即部门属性基础资料中增加是否可开装卸费的字段）。 12.
 * 装卸费上限由增值服务配置基础资料实现（在产品API中体现）。 1. 送货费默认不可改小，但可改大。除了月结客户外，只能对系统计算出的送货费取值进行上调，
 * 不能下调。当送货费取值大于最高送货费（基础资料配置）时，送货费自动跳改为最高送货费值， 但用户可以上调送货费； 2. 通过送货费基础资料来实现： 2.1.
 * 若提货方式为送货进仓，开单送货费直接读取送货进仓送货费基础资料，取值终止； 2.2.
 * 若提货方式为送货上门，则开单的送货费取值顺序：特殊区域送货费优于全国标准送货费；
 * （即：先到特殊区域送货费基础资料中取值，若取到值，取值终止；否则，再到全国标准送货费基础资料取值， 取值终止。） 2.3.
 * 特殊区域和全国标准送货费取值规则：送货费=货物重量*送货费率； 2.3.1
 * 先判断开单体积在哪个体积区间，筛选出符合条件的所有记录，再判断开单重量在已被体积筛选
 * 出来的记录中的哪个重量区间，来确定是哪一条记录。然后再根据费率计算，计算出来的值与该条的最低
 * 送货费进行比较，若小于最低送货费时，就取最低送货费，取值终止；若大于最低送货费且小于最高送货费时，
 * 就取计算出来的值，取值终止；若大于最高送货费时，就取最高送货费，取值终止。 2.3.2 标淮派送范围收取送货费标准： 货物重量 标准 0-300KG
 * 55元/票 301-500KG 0.2元/KG 501KG或2.5立方米以上 100元/票，不封顶 2.3.3
 * 当送货费取值小于最高送货费时，开单送货费不可以更改；当送货费取值高于最高送货费时，
 * 开单送货费可手动更改，如果手动更改的值小于最高送货费时，系统弹出提示框：“该票送货费不得低于 【最高送货费】” 2.3.4
 * 仅使用于汽运专线，对“空运”、“偏线”以及“中转下线” 的不受以上收费的限制。 2.3.5
 * “月结”客户的送货费收费按以上计算出默认值，但可以修改。（送货费不受限制。可向上修改也 可以向下修改，最小为0） 2.3.6
 * 除月结客户的属性外其它所有情况的送货费不可向下修改，只能向上修改 2.3.7 最高送货费做基础资料配置； 3. 非标准派送范围加收操作费标准： 3.1
 * 超远加收送货费标准： 距离（公里） 30-50 50-100 100-150 加收金额（元） 50 100 150 3.1.1
 * 距离为客户所在区域与公司最近网点的距离（距离以ERP谷歌地图测量的导航距离为准）； 3.1.2
 * 客户所在地30公里范围内如果有公司的营业网点，无论是否做派送，该区域均不能收取超远加收送货费； 3.1.3 非标准派送的费用添加无上限 3.2
 * 特殊区域（进仓）： 3.2.1 特殊区域类型：大型超市和商场、大型工厂（需提供进仓编号）； 3.2.2 收费标准：进仓费实报实销，并加收150元操作费；
 * 4. 区域送货费限制： 4.1 当开单提货网点的所在城市或区域为“XX”、提货方式为：送货”XX”(XX待定，但前提是：提货方式必须为送货)时，
 * 送货费固定为XX元，且不可修改；财务成本提取为XX元。（该类型城市或区域、送货费固定标准、成本提取标准可配置） 4.2
 * 当开单提货网点为XX营业部时，开单送货费为XX元，内部成本提取为XX元（目前该方案营业部：深圳华强苏发大厦
 * 营业部、深圳华强钟表市场营业部）。（该类营业部类型、送货费固定标准、成本提取标准可配置） 4.3 内部带货、空运、偏线及中转下线不受上述需求的限制。 5.
 * 限制大件大票货到达“XX部门”或“XX区域”或其它限制类型区域： 5.1
 * 当开单提货网点为“XX部门”或“XX区域”或其它限制类型区域，判断单件重量是否超过XXKG，
 * 或体积是否超过X立方，是的话提示：“单件超过XKG或单票超过X立方，请开到XX派送部或其它内容”。
 * （单件重量＝重量/件数）。【即开单限制：可通过到达部门限制基础资料实现】 5.2
 * 当开单提货网点为“XX部门”或“XX区域”或其它限制类型区域时，其他费用中的“送货上楼费”屏蔽或显示但不可选择； 5.3
 * 若“XX区域”或其它限制类型区域再开派送部，适用以上需求； 5.4 空运、偏线及中转下线不受上述需求的限制； 5.5 内部带货受上述需求的限制； 5.6
 * “XX部门”或“XX区域”或其它限制类型区域及判断规则由基础资料配置； 1.
 * 开单时系统默认其他费用为综合服务费和燃油附加费且不可移除,其他费用由手动添加， 费用根据基础资料中的内容进行读取，根据开单内容自动添加；（可基础资料配置）
 * 2. 运输类型为“精准（长途）、普货（长途）、偏线、空运”时，燃油附加费默认为4元；
 * 运输类型为“普货（短途）、精准（短途）”时，燃油附加费默认为2元；均不可修改；（可基础资料配置） 3. 综合服务费：（费用金额由基础资料配置） 3.1
 * 综合服务费默认为2元不可修改、剔除； 3.2 月结客户可以删除2元的综合服务费； 3.3 淘宝、阿里巴巴订单导入开单时，系统自动不收取2元的综合服务费；
 * 4. 燃油附加费：（费用金额由基础资料配置） 运输类型为“精准（长途）、普货（长途）、偏线、空运”时，燃油附加费默认为4元；
 * 运输类型为“普货（短途）、精准（短途）”时，燃油附加费默认为2元；均不可修改； 5.
 * 其他费用中“是否可修改”打勾时，对应费用类型的金额可以金额上限和金额下限之间修改； 6. 其他费用合计等于其他费用列表中各项费用数据之和； 1.
 * 原件签收单返回类：系统默认收取客户15元/票，可更改收取客户20元/票。偏线不允许做签收单； 2. 空运、偏线和中转下线的“返单类型”不可选择； 3.
 * 若有选择，则返单费用信息自动显示在其他费用信息列表中，可以其它费用列表中修改签收费用； 4.
 * 如果选择有返单类型，系统会自动生成一条签收单记录，记录信息包含：运单号、运单ID、库存状态、
 * 当前操作部门（运单开单时，是填开部门）、是否签收、是否作废、出发部门(运单开单出发部门)、 签收单类型、签收状态； 5.
 * 月结客户允许修改对应返单类别的返单金额（区间为对应返单类别的上限值和下限值）， 非月结客户只能选择对应的返单类别的默认金额，不能修改；返单费用项目不能删除
 * 1. 运单新增时，运输性质选择空运、提货网点非我司自有网点时，不能选择预付运费保密； 2.
 * 已开启预付运费保密运单提交后，始发更改中预付运费保密可以取消。未开启预付运费保密运单提交后，
 * 若货物未有非本部门入库操作，则始发更改中预付运费保密可选择；若货物有非本部门入库操作，
 * 则始发更改中预付运费保密否可选择，若要更改，则必须返货后，作废重新开单； 3. 运单保存未提交时，可以在调出运单的时候，预付运费保密自由选择； 4.
 * 已开启预付运费保密的运单，始发更改中预付更改到付或到付更改预付，涉及预付运费有变动时， 不影响预付费保密功能； 5.
 * 开启预付运费保密，预付运费不能为0，否则不能保存、提交； 6. 开单付款方式为临时欠款时，预付运费保密选项不可选择，其他付款方式都行； 7.
 * 开启预付运费保密，运单出库后，始发更改中运输性质由汽运专线更改为偏线、空运时， 必须取消预付运费保密后才能提交； 8.
 * 预付运费保密开启时，非出发部门用户综合查询预付运费不显示，即“预付金额”不显示； 9.
 * 预付运费保密开启后，到达联打印时，费率、运费、其他服务费用明细、费用合计中的现付总计均不显示； 1. ； 2.
 * 1）开单总费用、预付金额、到付金额，取整，四舍五入；
 * 2）开单所有录入的金额数值，最多可录入到小数点后两位小数，无效的0省略不显示，如100.00显示100, 100.10显示100.1；
 * 3）开单总费用、预付金额、到付金额之外的，即中间环节的金额保留两位小数，依据四舍五入规则。
 * 4）费率最多可保留两位小数，小数点多于两位时，全进1。比如，系统折算生成的费率为1.201时，显示为1.21。 1. 接货费只能录入数字
 * 1）限保物品不限制保价金额，限制保价费率，增值服务部门可以配置对应限保物品的保价费率； 2）限保物品的保价费率通过基础资料进行配置；
 * 3）取消偏线、空运最高保价5000元的限制； 2、装卸费开单运费占比及特殊部门装卸费需做成基础资料配置
 * 3、"其它费用"中的费用名称对应的归集类别的费用划分到增值服务对应的费用中，同时需增加归集类别的配置资料。
 * 4、超远派送送货标准的基础资料是需要配置的；超远派送费用无上限限制
 * 
 * 
 * * 运单收银SUC业务规则 1. 计费类型分为重量计费、体积计费，由系统自动生成，不可修改；默认重量计费； 2.
 * 对于一票货物系统分别按重量和体积分别计费并取大优先的原则计费； 若按重量计费运费较按体积计费运费较高，则计费类型为重量计费；
 * 若按体积计费运费较按重量计费运费较高，则计费类型为体积计费； 3. 运输类型为汽运时,计费重量为空，不可修改；
 * 4.运输类型为空运时计费重量应为重量和体积*1000000/6000进行对比，取大； 1. 费率为对应计费类型、目的站、提货网点及运输类型的走货单价；
 * 2. 目的站、提货网点及运输类型确认后，即可自动显示对应计费类型的费率； （来自价格基础资料） 3.
 * 费率可以保留到小数点后2位；运费、预付金额、到付金额为整数， 按照四舍五入的原则； 1. 公布价运费、增值服务费用、优惠合计需通过点击计算费用获取； 2.
 * 当提货网点信息未录入，不可计费运费；当录了提货网点， 货物的重量和体积以及其他服务费用录入不完整时， 点击计算费用，得到当前填写的信息费用信息； 3.
 * 公布价运费（即重量、体积计费的运费）=每公斤单价/每方价格与货物实际重量/体积的乘积，
 * 对于一票货物系统分别按重量和体积分别计费并取大优先的原则计费；（来自价格基础资料） 4.
 * 增值服务费=送货费+包装费+保价费+代收手续费+接货费+其他费用合计； 5. 优惠合计=优惠总合计； 6.
 * 总运费=公布价运费+增值服务费-优惠合计=预付金额+到付金额； 7. 在提交运单时，系统记录该次计算费用时所用的所有价格费用的规则版本号； 8.
 * 采用费用明细取整、总费用取整的原则 9. 任何客户包含月结客户不可减免综合服务费。 10.
 * 开单界面选择付款方式为"现金"时，默认预付金额为开单总金额并允许修改，且修改的同时到付
 * 金额随预付金额变化而变化，变化规则为：到付金额=总金额-预付金额，到付金额不能修改。
 * 例如，开单界面选择付款方式为"现金"时，当一票货的总金额为300元时，默认预付金额为300元，到付
 * 金额为0，将预付金额改为100元之后，到付金额变为200元 1.
 * 必须输入提货网点、货物的重量和体积以及其他服务费用，计算出总费用后再输入验证编码进行验证； （优惠券编码开单时，对运单有上下限金额的限制，该上下限可配置）
 * 2. 输入优惠券编码后，焦点转移时，系统调用CRM接口，校验该编码是否存在，如果存在，则将优惠信息
 * 显示在优惠信息列表中，费用为对应的优惠券的金额；如果不存在提示为：你输入的优惠券编码不存在，请重新输入； 3.
 * 当修改优惠编码时，则焦点转移时，系统自动调用CRM接口，校验该编码，同时修改对应的优惠减免 记录和优惠信息； 4. 优惠金额必须小于等于开单总金额； 5.
 * 当付款金额为单一的现付或到付时，优惠券可以单独减免，当付款金额既有现付又有到付时，优先选
 * 择减免现付金额，如存在优惠金额此时减免现付有余时，可再充抵到付费用，但优惠金额必须小于等于开单总金额； 6.
 * 暂存时，只显示减免金额，运单实收或应收金额上不显示，即暂存时，不生成实收或应收单据； 7. 当费用变化时，优惠编码必须重新输入；8. 1.
 * 当发货客户有月结客户属性时，才可选择月结；并默认显示付款方式为月结； 2. 当发货客户有信用额度的属性时，才可选择临时欠款的付款方式； 3.
 * 支持发货客户的多种付款方式叠加，但月结和临时欠款不可同时出现； 4.
 * 当开单为订单导入开单，且为网上订单，并选择了网上支付时，导入开单后的付款方式显示网上支付； 同时付款方式可修改，付款方式中增加网上支付选项； 5.
 * 开单为空运、偏线、中转下线时不能选择“网上支付”； 1.
 * 当付款方式为现付时，预付金额必须大于0；否则，提示信息“付款方式非到付，预付金额不能小于等于0”； 2.
 * 当付款方式为到付时，预付金额不能大于0；否则，提示信息“付款方式为【到付】，预付金额不能大于0”； 3.
 * 月结客户的信用金额直接限制该客户的当月发货金额，当月发货金额超过信用额度，当月将无法再开单月结， 提示“该客户的剩余可用信息额度不足，不能开月结”； 4.
 * 临时欠款时，需要客户中的信用额度超过运费，否则，提示“该客户的剩余可用信息额度不足， 不能开临时欠款”；
 * 
 * 确认会员资质SUC规则 1. 签约合同客户： 1.1 营业部合同客户只享受合同优惠；当有促销的优惠时，合同客户可享受最大优惠折扣，
 * 但不叠加；（促销优惠为基础资料配置属性） 备注：当运单为网络订单（官网订单、阿里巴巴订单、淘宝订单、呼叫中心订单），
 * 且客户为合同客户时，为了保证不重复享受折扣， 除运单是阿里巴巴订单且月结客户优惠类型为“普通货物打折方案”以阿里巴巴费率计算外，
 * 其他情况都按照合同优惠来进行计算； 1.2 客户为非本部门的合同客户时，不在本部门享受合同优惠；；
 * 合同客户有绑定其他营业部时，可在所绑定的其他营业部享受合同归属部门同等优惠； 1.3 所有合同客户可以减免综合服务费； 1.4
 * 所有合同客户享受合同签订的保价费率和代收货款费率； 1.5 合同客户通过月结审核的，可选择付款方式为：“月结”； 其他客户不能选择为“月结”； 1.6
 * 合同客户为“价格折扣”优惠时，客户发货除最低每票的运费不受影响外，
 * 其他运费超过最低每票标准的，总运费按照其折扣比例打折优惠（折后总运费不低于最低每票标准运费）； 1.7
 * 合同客户为“月发月送”优惠时，客户发货价格按照月发月送标准； 1.7.1. 开单不能含装卸费； 1.7.2.
 * 当月发越送与空运同时存在时，以空运规则为准，可开装卸费； 1.8 合同客户有免费送货属性的，在优惠信息列表中自动优惠标准派送的送货费用，
 * 对于月结属性的客户可以向下修改送货费，最小为0；其它所有情况的送货费不可向下修改，只能向上修改； 1.9 合同用户仅在合同有效期内享受合同优惠。 1.
 * 非公司签约客户： 1.1 发货客户只能选择本部门的客户，但通过会员卡号可查询其他部门客户信息； 若客户为其它部门合同客户时，客户不享受合同优惠； 1.2
 * 客户优惠信息由基础资料配置，优惠信息包括：我司享受优惠区域部门、 优惠类型（如线路优惠、货物类型优惠等，可配置）、 优惠名称，对应的的优惠的具体信息；
 * 1.3 优惠类型有优先级，其优先级由基础资料配置； （当普通优惠与促销优惠同时同在时，促销优惠优于普通优惠；） 1.4
 * 系统自动根据承运信息，给出对应运单可享的优先级最高的优惠， 、当最高优先级并列出现时，默认勾选最大优惠的优惠方案； 对于同一优惠类型的优惠，存在互拆；
 * 例：当线路优惠和区域优惠同时存在时，系统只给出线路优惠； （点面原则（异常优先）：即点面同时存在时，以点为准。
 * 如：优惠1：上海出发货8折优惠；优惠2：上海到广州9优惠， 由于优惠2包含于优惠1中，为优惠1的一个异常， 则在生成优惠信息时，只显示优惠2的优惠方案）；
 * 1.5 阿里巴巴客户： 1.5.1 阿里巴巴订单导入开单时，对于诚信通会员， 系统按如下方式进行折扣： 运输类型 限制要求 普货 精准（长/短途）
 * 起步价格 30元 40元/20元 小于1000公斤或5立方 大于等于1000公斤或5立方 （该折扣表内容由基础资料配置）
 * 备注：对于阿里的普通会员，系统只减免2元的综合服务费。 1.5.2 阿里巴巴订单导入开单时，在“优惠方案中”自动新增“阿里巴巴优惠费”项，
 * 且系统自动计算优惠金额。公布价仍显示为公司散客开单标准的公布价。 （阿里巴巴优惠费=公司标准公布价总运费—阿里巴巴折扣的总运费）； 也为公布价优惠的一种；
 * 1.5.3 阿里诚信通会员客户下单后，阿里订单导入开单， 且“该客户同时为部门的月结客户，其月结优惠类型为‘普通货物打折方案’时”，
 * 则开单时阿里价格优于月结客户价格，以“阿里诚信通会员价格方案”计算运费；
 * 其他的月结优惠类型(公布价、价格折扣、月发月送)开单时月结客户价格优于阿里价格规则； 1.5.4 当阿里巴巴订单开空运和偏线不享受对应的阿里巴巴优惠，
 * 但可享受正常开单的优惠； 1. 客户享受的优惠类型自动显示在优惠信息显示列表中； 2. 合同优惠包括公布价折扣优惠和增值服务优惠； 3.
 * 对于公布价优惠：只显示客户可以享受的公布价优惠信息， 且默认勾选“合同规定的优惠方案”或“与合同优惠有冲突时， 系统规则使用的优惠方案”的公布价折扣优惠；
 * 4. 当客户为合同客户时，不仅显示合同公布价优惠， 还显示对应线路或货物类型或货物种类等其它配置的所有与本次承运相关的公布价优
 * 惠方案中系统规则使用的较合同优惠更优的优惠方案； 5. 当客户为合同客户时，若勾选非合同公布价优惠时且为非促销优惠时，
 * 则不再享受对应客户的所有合同优惠（包括公布价优惠、增值服务优惠及月发月送、月结等优惠）； 6.
 * 当客户为非合同客户时，自动默认勾选系统规则可使用的折扣最低的公布价优惠方案； 7. 公布价优惠方案只可勾选一种，不可多选； 8.
 * 合同客户的增值服务优惠项不可修改（即不可以取消或增加勾选）， 非合同客户的增值服务优惠项可修改（即可以取消或增加勾选） 9.
 * 任何客户包含月结客户不可减免综合服务费 1. 公布价优惠金额=本次承运的公布价总价*（1-优惠折扣）； 2. 增值服务优惠金额： 2.1
 * 保价费和代收手续款的优惠金额=声明价值/代收货款*（ 公司标准的保价费率/代收费率-签约合同的保价费率/代收费率）； 2.2
 * 其它优惠或费用减免由优惠规则配置生成； 1. 只有月结属性的客户才可以享受月结的付款方式；且当客户为月结客户时， 付款方式自动默认为月结； 2.
 * 只有信用额度的客户才可以享受临时欠款的付款方式；且对应客户的信用额度全国统配， 不绑定部门，例：客户A在我司可享信用额度为5000，且其合同主体为部门a，
 * A已用额度为2000，且无论客户A在a部门发货，或是在其它任务我司的部门发货， 其可用额度均为3000； 3. 系统自动过滤客户不能享受的付款方式；
 * 
 * 
 * 
 * 录入发货客户信息SUC业务规则 营业员点击运单开单，进入运单开单界面。 本用例分为两个界面：录入发货客户信息、选择发货客户； 1. 录入发货客户信息：
 * 界面为信息录入界面：包括：手机、电话、客户名称、 客户编码、发货联系人（发货部门）、发货人地址； 1.1 手机：发货人手机号码； 1.2
 * 电话：发货人电话号码； 1.3 客户名称：发货客户公司或单位名称，可支持搜索查询； 1.4 客户编码：我司给客户的客户号； 1.5
 * 发货联系人（发货部门，支持模糊搜索）： 发货客户的客户姓名， 当“运单开单”中的“开单提货方式”为“内部带货自提”时，
 * “发货联系人”字段更改为“发货部门”； 1.6 发货人地址：发货客户的详细联系地址， 支持国家行政区域自动过滤； 2. 选择发货客户界面：
 * 界面为选择客户信息界面：包括两部分： 客户信息列表区域、功能按钮区域； 2.1. 客户信息列表区域： 包括：客户编码、客户名称、联系人、手机、
 * 电话、地址(规范化地址和详细地址)； 2.2. 功能按钮区域： 包括：确定、取消； 3. 选择热门城市界面 界面信息包含人热门城市 4. 选择省份界面
 * 界面信息包含省份 5. 选择城市界面 界面信息保护城市 6. 选择区县界面 界面信息保护区县 1.6 操作步骤 1.6.1 录入 序号 基本步骤 相关数据
 * 补充步骤 1 录入手机号码 1. 系统自动查询CRM系统中对应手机号码绑定的客户信息， 如果有弹窗，弹窗操作见扩展1a，如果没有，
 * 弹出FOSS历史开单记录中对应手机号码绑定的客户信息，并弹窗，弹窗操作见扩展1b； 2. 规则-请参见系统规则SR1；
 * 
 * 2 录入电话号码 1. 如果手机号码没有填写， 系统自动查询CRM系统中对应电话号码绑定的客户信息， 如果有弹窗，弹窗操作见扩展2a，如果没
 * ，弹出FOSS历史开单记录中对应手机号码绑定的客户信息， 并弹窗，弹窗操作见扩展2b； 2. 规则-请参见系统规则SR1；
 * 
 * 3 录入客户名称和客户编码 1. 规则-请参见系统规则SR2、SR3； 4 录入发货联系人（发货部门） 1. 规则-请参见系统规则SR4、SR5、SR8；
 * 5 录入发货人地址 1. 提供下拉框选择输入，系统自动过滤输入的行政区下一级行政级的字段； 2. 规则-请参见系统规则SR6； 1.6.2 扩展 序号
 * 扩展事件 相关数据 备注 1a 当录入的手机号码在CRM系统中有手机号码绑定的客户信息， 则自动弹窗并显示手机号码为录入的手机号的所有客户信息，
 * 营业员选择录入一条记录，并确定；选择的客户信息自动带入发货客户信息中； 客户信息 1.
 * 规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则； 2. 规则-请参见系统规则SR5 、SR6、SR7；
 * 
 * 1b 当录入的手机号码在CRM系统中没有手机号码绑定的客户信息时， 如果该客户在这3个月有发过货，则弹出历史发货记录，
 * 营业员选择录入一条记录，并确定；选择的客户信息自动带入发货客户信息中； 客户信息 3.
 * 规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则； 4. 规则-请参见系统规则SR5 、SR6、SR7；
 * 
 * 2a 当录入的电话号码在CRM系统中有电话号码绑定的客户信息， 则自动弹窗并显示电话号码为录入的电话号码的所有客户信息，
 * 营业员选择录入一条记录，并确定；选择的客户信息自动带入发货客户信息中； 客户信息 1.
 * 规则-请参见系统用例SUC-492中的“1.6.2扩展2a”的规则； 2. 规则-请参见系统规则SR5、SR6、SR7；
 * 
 * 
 * 2b 当录入的电话号码在CRM系统中没有电话号码绑定的客户信息时， 如果该客户在这3个月有发过货，则弹出历史发货记录，
 * 营业员选择录入一条记录，并确定；选择的客户信息自动带入发货客户信息中； 客户信息 1.
 * 规则-请参见系统用例SUC-492中的“1.6.2扩展2a”的规则； 2. 规则-请参见系统规则SR5、SR6、SR7；
 * 
 * 1.7 业务规则 序号 描述 SR1 1. 发货客户手机号码及固定电话至少提供一个，手机号码只能为数字并且为11位； 2.
 * 固定电话号码只能为数字，且可添加多个；添加多个时， 必须用“，”或“、”或“/”分开；固定电话号码字段也可以录入手机号； 3.
 * 手机、电话为精确查询全公司客户信息 4. 手机、电话带出的客户信息会覆盖原来已带出的客户信息。
 * 若未带出客户信息则当客户ID不为空时清空除手机外的其它已带出的客户信息（即），否则不清空 SR2 1.
 * 若发货客户为公司会员客户，则录入发货客户信息后系统界面显示该发货客户联系人编码； 2.
 * 客户名称精确查询全公司客户信息。当客户名称为带出的客户时（以隐藏的客户ID是否为空做为判断条件），
 * 清空客户时则清空手机、电话、联系人、地址、行政区域、客户编码，否则只清空客户名称、客户编码、客户ID（隐藏）； SR3 1.
 * 若发货客户为会员客户，则录入发货客户信息后系统给予提示； 2. 提未信息为在运单开单界面下方加色放大显示； 3.
 * 通过选择录入的客户名称和客户编码不可修改，但可删除录入； SR4 1. 当“运单开单”中的“开单提货方式”为“内部带货自提”时，
 * “发货联系人”字段更改为“发货部门”； 2. 联系人不用带出客户信息 SR5 1. 若为公司内部带货，输入发货部门关键字支持模糊搜索 SR6 1.
 * 客户详细地址必填至乡/镇，且乡镇下一级内容不能为空； 2. 当鼠标点击规范化地址文本框时，显示如下图片， 包含热门城市、省份、城市、县区，选择热门城市，
 * 会直接跳到区县，现在省份后自动跳到城市， 选择城市后自动跳到区县（必须选择完上一级行政区域后，才能选择下一行政区域），
 * 选择完区县后，会把规范化地址显示在规范化文本框内，例如：江苏省-苏州市-相城区 3.
 * 地址可以进行拼音和首写字母进行匹配，例如输入“GZ”会在规范化地址文本框下面显示 ；
 * 匹配时可带出城市、区、县等符合的信息，该设计来自官网，具体可以参考官网 4. 当增值服务中有返单业务时，则发货人地址为必填项；其他情况非必填。 SR7
 * 1. 使用电话号码和手机进行匹配，弹出CRM发货客户选择框进行选择，如果匹配不到，
 * 再使用运单发货历史客户进行匹配，弹窗选择，选择后填充客户编码、客户名称、联系人、地址； 2.
 * 但是对于电话号码匹配，只有当发货人手机、客户名称为空时，才会用电话号码检索并弹窗显示； 3.
 * 使用手机号码、电话号码、客户名称弹出选择框选择记录后覆盖原先记录 4. 修改联系人时，需要清空客户名称 5.
 * 使用手机号码弹出选择框选择记录后覆盖原先记录，查询不到时，清空客户名称 6.
 * 导入发货客户信息后，联系人名称不可修改，为灰色；当营业员进行清空发货客户的客户名称操作时， 联系人名称可修改，为可编辑状态； 7.
 * 点击客户名称查询控件，弹出查询信息:窗口SUC-424-查找会员 8. 如果查询出来的记录只有一条，也需要进行选择 9. 发货客户名称精确查询且查询全公司
 * SR8 1. 发货人省市区默认为始发营业部的省市区
 * 
 * 
 * 录入收货客户SUC业务规则 营业员点击运单开单，进入运单开单界面。 本界面分为两个界面：录入收货客户信息、选择收货客户。 1. 录入收货客户信息：
 * 界面为信息录入界面：包括：手机、电话、发货收货联系人（发货收货部门）、发货收货人地址； 1.1 手机：发货收货人手机号码； 1.2
 * 电话：发货收货人电话号码； 1.3
 * 收货联系人（收货部门）：收货客户的客户姓名，当“运单开单”中的“开单提货方式”为“内部带货自提”时，“收货联系人”字段更改为“收货部门”； 1.4
 * 收货人地址：收货客户的详细联系地址，支持国家行政区域自动过滤； 1.5 客户名称 1.6 客户编码 2. 选择收货客户界面：
 * 界面为选择客户信息界面：包括两部分：客户信息列表区域、功能按钮区域； 2.1. 客户信息列表区域：
 * 包括：联系人、手机、电话、地址（规范化地址和详细地址）； 2.2. 功能按钮区域： 包括：确定、取消； 3. 选择热门城市界面 界面信息包含人热门城市
 * 4. 选择省份界面 界面信息包含省份 5. 选择城市界面 界面信息保护城市 6. 选择区县界面 界面信息保护区县
 * 
 * 1.6 操作步骤 1.6.1 录入 序号 基本步骤 相关数据 补充步骤 1 录入手机号码 1. 系统自动查询CRM系统中对应手机号码绑定的客户信息，
 * 如果有弹窗，弹窗操作见扩展1a，和如果没有， 弹出FOSS历史开单记录中对应手机号码绑定的客户信息， 并弹窗，弹窗操作见扩展1b； 2.
 * 规则-请参见系统规则SR1、SR5、SR6； 2 录入电话号码 1. 如果手机号码没有填写， 系统自动查询CRM系统中对应电话号码绑定的客户信息，
 * 如果有弹窗，弹窗操作见扩展2a，如果没有， 弹出FOSS历史开单记录中对应手机号码绑定的客户信息， 并弹窗，弹窗操作见扩展2b； 1.
 * 1、系统自动查询CRM系统中对应电话号码绑定的客户信息 和FOSS历史开单记录中对应手机号码绑定的客户信息，并弹窗， 弹窗操作参见扩展2a； 2.
 * 规则-请参见系统规则SR1、SR5 、SR6； 3 录入收货联系人（收货部门） 1. 规则-请参见系统规则SR2、SR3； 4 录入收货人地址 1.
 * 提供下拉框选择输入，系统自动过滤输入的行政区下一级行政级的字段； 2. 地址在系统后台通过GIS系统进行匹配，
 * 如果是禁行区域，地址颜色为红色，如果是进仓区域，地址颜色为黄色 3. 规则-请参见系统规则SR4； 1.6.2 扩展 序号 扩展事件 相关数据 备注 1a
 * 当录入的手机号码在CRM系统中有手机号码绑定的客户信息， 则自动弹窗并显示手机号码为录入的手机号的所有客户信息，
 * 营业员选择录入一条记录，并确定；选择的客户信息自动带入收货客户信息中； 当光标焦点移至录入手机号码时，系统自动调用CRM系统对应发货客户的历史发货记录，
 * 并自动弹窗显示所有该发货客户的历史发货记录；营业员选择一条记录，并确定， 选择的客户信息自动带信收货客户信息中； 客户信息 1.
 * 规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则； 2. 规则-请参见系统规则SR5 、SR6； 1. 规则-请参见系统规则SR5；
 * 1b 当录入的手机号码在CRM系统中没有手机号码绑定的客户信息时，
 * 则如果该客户在这3个月有发过货，则弹出历史收货记录自动弹窗并显示手机号码为录入的手机号的所有客户信息，
 * 营业员选择录入一条记录，并确定；选择的客户信息自动带入收货客户信息中； 客户信息 1.
 * 规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则； 2. 规则-请参见系统规则SR5 、SR6； 2a2a
 * 当录入的电话号码在CRM系统中有电话号码绑定的客户信息， 则自动弹窗并显示电话号码为录入的电话号码的所有客户信息，
 * 营业员选择录入一条记录，并确定；选择的客户信息自动带入收货客户信息中； 当录入的电话号码在CRM系统中有电话号码绑定的客户信息，
 * 则自动弹窗并显示电话号码为录入的电话号码的所有客户信息， 营业员选择录入一条记录，并确定；选择的客户信息自动带入收货客户信息中； 客户信息客户信息 1.
 * 规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则； 2. 规则-请参见系统规则SR5 、SR6； 1.
 * 规则-请参见系统用例SUC-492中的“1.6.2扩展2a”的规则； 2. 规则-请参见系统规则SR6；
 * 
 * 2b 当录入的电话号码在CRM系统中没有电话号码绑定的客户信息时， 如果该客户在这3个月有发过货，则弹出历史收货记录，
 * 营业员选择录入一条记录，并确定；选择的客户信息自动带入收货客户信息中； 客户信息 1.
 * 规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则； 2. 规则-请参见系统规则SR5 、SR6；
 * 
 * 1.7 业务规则 序号 描述 SR1 1. 收货客户手机号码及固定电话至少提供一个，手机号码只能为数字并且为11位，
 * 固定电话号码只能为数字，且可添加多个； SR2 1. 当“运单开单”中的“开单提货方式”为“内部带货自提”时， “收货联系人”字段更改为“收货部门”；
 * SR3 1. 若为公司内部带货，则收货客户信息中的收货部门名称必须与OA系统中组织架构名称保持一致； SR4 1.
 * 客户详细地址必填至乡/镇，且乡镇下一级内容不能为空；
 * 
 * 2. 当鼠标点击规范化地址文本框时，显示如下图片， 包含热门城市、省份、城市、县区，选择热门城市，会直接跳到区县， 现在省份后自动跳到城市，
 * 选择城市后自动跳到区县（必须选择完上一级行政区域后，才能选择下一行政区域），
 * 选择完区县后，会把规范化地址显示在规范化文本框内，例如：江苏省-苏州市-相城区 3.
 * 地址可以进行拼音和首写字母进行匹配，例如输入“GZ”会在规范化地址文本框下面显示 ；
 * 匹配时可带出城市、区、县等符合的信息，该设计来自官网，具体可以参考官网 4. 当提货方式含“自提”时，收货人地址为非必填项； SR5 1.
 * 使用电话号码和手机进行匹配，如果是唯一匹配一条CRM客户信息时， 填充客户编码、客户名称、联系人、地址，如果有多条需弹出选择框进行选择，
 * 如果查询不到CRM客户信息时，使用FOSS三个月运单历史记录中的收货信息查询，
 * 唯一匹配一条进行填充收货客户信息，多条进行弹窗选择，如果都查询不到，不做其他操作 2.
 * 但是对于电话号码匹配，只有当发货人手机、客户名称为空时，才会用电话号码检索并弹窗显示 3.
 * 使用手机号码、电话号码、客户名称弹出选择框选择记录后覆盖原先记录 4. 修改联系人时，需要清空客户名称，当清空客户名称时，会同时删除客户编码 5.
 * 使用手机号码、电话号码弹出选择框选择记录后覆盖原先记录 6. 点击客户名称查询控件，弹出查询信息:窗口SUC-424-查找会员 7.
 * 身份证号、客户编码、客户名称、联系人编码可以查询到全公司的客户 1. 只有当收货人手机为空，且发货客户信息已录入时，才会检索并弹窗显示； 2.
 * 若未查询到历史记录，则无法提示； 3. 通过选择录入的收货人信息均可修改； 4.
 * 使用号码进行匹配，如果是唯一匹配一条CRM客户信息时，填充客户编码和客户名称，如果有多条不做操作 SR6 1.
 * 通过选择录入收货发货信息，同时带出对应的目的站和提货网点信息； 2. 带出目的站仍然使用GIS进行查询，并以GIS返回为准； 3.
 * 若GIS未查询得出，则以历史开单的目的站和提货网点信息为准；
 * 
 * 
 * 查找会员SUC业务规则 营业员点击运单开单界面中的查询客户，进入查询客户信息界面。 本界面为查询客户信息。
 * 界面主要分为三个部分：查询条件区域、查询结果区域、功能按钮。 1. 查询条件区域： 1.1 会员卡号：支持会员卡号的模糊搜索，并可查询部门全部会员信息；
 * 1.2 发货联系人 1.3 电话 1.4 客户编码 1.5 客户名称 1.6 手机 1.7 发货人地址 1.8 复选框"查询全公司" 2. 查询结果区域：
 * 2.1 客户编码 2.2 客户名称 2.3 联系人编码 2.4 月结审核 2.5 联系人 2.6 手机 2.7 电话 2.8 身份证 2.9 信用额度
 * 2.10 地址 2.11 越发越送审核编号 2.12 生效时间 2.13 失效时间 3. 功能按钮： 3.1 重置： 3.2 查询； 3.3 查询部门会员
 * 1.6 操作步骤 1.6.1 录入 序号 基本步骤 相关数据 补充步骤 1 录入查询条件，查询符合条件的客户信息 查询条件信息 1.
 * 系统查询CRM系统中本部门符合条件的客户信息； 2. 规则-请参见系统规则SR1； 2 查询本部门所有的会员客户信息 1. 规则-请参见系统规则SR2；
 * 3 导入选择的客户信息至发/收货客户信息中：双击选中的客户信息， 对应客户信息进入发/收货客户信息中 1. 规则-请参见系统规则SR3； 1.6.2 扩展
 * 序号 扩展事件 相关数据 备注 1a 步骤1中，若未查询到符合条件的客户信息，系统给予提示 1. 提示信息为“未查询到符合条件的客户信息！”； 2b
 * 步骤2号，若本部门无会员，系统给予提示 1. 提示信息为“部门无会员信息！”； 1.7 业务规则 序号 描述 SR1 1. 支持单一和组合查询条件查询；
 * 2. 只有勾选复选框时，按照身份证号、客户编码、 客户名称、联系人编码精确查全公司客户信息且查询条件中包含有身份证号、
 * 客户编码、客户名称、联系人编码其中任意一项时，忽略其它查询条件， 否则为模糊查询本部门客户信息； 3. 当查询到的记录为某客户编码中的其中一条信息时，
 * 显示该编码对应的所有的客户信息； 4. 当客户为越发越送客户时，则显示该客户对应的越发越送审核编号、
 * 生效时间、失效时间；当越发越送审核编号有多个时，则只显示最后一次审核信息； SR2 1. 当条件都为空时，点击查询按钮，查询出本部门会员； SR3 1.
 * 通过查询条件带出的客户信息被填充到相关控件中时， 发货客户联系人为不可修改状态， 若要修改则需要清空全部带出的客户信息；
 * 
 * 
 * 确认公布总价SUC业务规则 1 打开“运单开单”界面。 2 录入发货人信息 参考SUC-492 3 录入收货客户信息 参考SUC-493 4 录入货物信息
 * 参考SUC-494 5 录入运输信息 参考SUC-496 进行前面5操作之后，若是空运， 系统读取空运公布价价格方案（基础资料参考SUC-581）
 * 计算出公布总价，显示在运单开单界面。 若是汽运，系统读取汽运公布价价格方案（基础资料参考SUC-581） 计算出公布总价， 显示在运单开单界面。
 * 参考规则SR1，SR2，SR3 扩展事件写非典型或异常操作过程 序号 扩展事件 相关数据 备注 5a 5b 1.7 业务规则 序号 描述 SR1
 * 1）汽运：上门发货汽运运费最低X元一票； （同城、卡航；可配置）； 上门接货汽运运费最低X元一票；（同城、卡航；可配置）；
 * 2）空运：空运运费最低X元一票；（可配置）； SR2 1）汽运：当货物为“接货”时， 系统自动匹配生成公布价“接货价格方案”； 当货物为“非接货”时，
 * 系统自动匹配生成公布价“非接货的价格方案”； 2）空运：系统自动匹配公布价 “空运价格方案”； 空运价格只有上门发货一套价格方案，
 * 如有接货费在其他费用里添加一项接货费。 SR3 1）计费方式分为重量计费、体积计费； 重量、体积计费的运费=每公斤单价与货物实际重量的乘积 或
 * 每方单价与货物实际体积的乘积， 对于一票货物，系统按重量和体积分别计算并取大优先的原则计费给出公布价总运费, 计费方式即为取大的一方；
 * 
 * 运单提交SUC业务规则 客户上门发货确认承运信息后，营业员告知客户运输费用后， 为客户开具运单，打印标签并粘贴至货物的过程。 1.3 用例条件 条件类型
 * 描述 引用系统用例 前置条件 1. 运单已填写完整 DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入发货客户信息-V0.1.doc
 * DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入货物信息-V0.2.doc
 * DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入收货客户信息-V0.1.doc
 * DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入运输信息-V0.1.doc
 * DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息-V0.1.doc
 * DP-FOSS-接送货系统用例-客户上门-根据订单确认承运信息-导入订单-V0.1.doc
 * DP-FOSS-接送货系统用例-客户上门-确认承运信息-查询目的站-V0.1.doc
 * DP-FOSS-接送货系统用例-客户上门-承运计费报价-确认公布总价-V0.1.doc 后置条件 1. 传送运单号、金额、帐号等结算数据到财务子系统 2.
 * 传送货物名称、件数、重量等货物信息到中转子系统，安排运输计划 3. 传送运单号等信息到官网，客户查询运单状态 4.
 * 给收货人发送出发短信，给上门接货客户发送短信 5. 订单信息反馈给给CRM系统，订单处理结果为：已开单。 6、 当运输性质为精准空运时，
 * 提交成功后会自动生成订舱信息流到最终配载部门（即总调）的舱位信息中 1.4 操作用户角色 操作用户 描述 营业员 1. 确认客户承运信息，开单收货，
 * 收取现付金额，且打印标签及运单出发联让客户签字确认。 1.5 界面要求 1.5.1 表现方式 Web方式 1.5.2 界面原型 1.5.2.1
 * 集中开单界面 1.5.2.2 营业部开单界面 1.5.2.3 运单确认提交界面 1.5.3 界面描述 1.5.3.1 营业部、集中开单界面
 * 界面共包括7个部分：1、发货客户信息； 2、收货客户信息；3、货物信息； 4、运输信息；5、增值服务信息； 6、计费付款；7、功能按钮。
 * 具体描述参考DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入发货客户信息-V0.1.doc
 * DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入货物信息-V0.2.doc
 * DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入收货客户信息-V0.1.doc
 * DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入运输信息-V0.1.doc
 * DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息-V0.1.doc 1.5.3.2 运单确认提交界面
 * 界面共包括3个部分：1、运单基本信息； 2、功能复选框；3、功能按钮 1、运单基本信息：单号、到付总运费、预付总运费、
 * 代收货款、保险价值、收货人名称、付款方式、提货网点、 提货方式、收货人地址、收货人电话、货物名称、 重量/体积/件数、包装、重量/体积/件数（代打木架）。
 * 2、功能选项：打印运单下拉框有各种版本（可以配置，且可以配置默认模板） （选择之后，点击确定系统自动打印运单，只能选其一，参考规则SR8）、
 * 打印标签（选择之后，点击确定系统自动打印标签）、 提交后新增（选择之后，点击确定系统打开一个新的开单界面）。 3、功能按钮：确定、取消 。 1.6
 * 操作步骤 序号 基本步骤 相关数据 补充步骤 1 营业员“填写”完整的运单信息。 2 点击暂存 1、客户上门提供的货物承运信息。
 * 2、来此crm系统订单的数据。 3、上门接货客户提供的承运信息。 1、用户暂存的运单数据时允许修改 23 点击“提交”按钮提交运单。
 * 1、客户上门提供的货物承运信息。 2、来此crm系统订单的数据。 3、上门接货客户提供的承运信息。 1、点击运单“提交”按钮，弹出“运单确认提交页面”，
 * 页面默认选择上“打印运单（全打）”、“打印标签”、 “确定后新增运单”复选框。 2、提交后，同步数据到中转子系统，、CRM系统、官网系统，
 * 财务子系统。(将单独出来写接口用例，此处将参考这些接口系统用例) 3、系统自动根据出发部门、运输性质、到达部门生成默认唯一走货路径(基础资料)；
 * 参考综合系统基础资料用例。 4、当运输性质为精准空运时，提交成功后会自动生成订舱信息 （包括：预计出发时间、航班时间（早中晚）、重量）
 * 流到最终配载部门（即总调）的舱位信息中。 5、保存使用的价格版本号 56、参考规则SR1、SR12 34 点击运单确认提交页面的“确定”按钮。
 * 1、点击确定后，打开一个新的运单开单界面。 2、系统自动打印运单,选择系统默认的打印模板，
 * 参考DP-FOSS-接送货系统用例-客户上门-确认承运信息-打印运单-V0.1.doc
 * 3、系统自动打印标签，参考DP-FOSS-接送货系统用例-客户上门-确认承运信息-打印标签V0.1.doc 4、调用中转入库接口 参考规则SR13 45
 * 若有签收单返单时，需要打印签收单标签， 打印内容包括：单号、始发部门、到达部门、目的站。 参考SUC-504打印签收单标签(整车)
 * 扩展事件写非典型或异常操作过程 序号 扩展事件 相关数据 备注 2a 营业员在弹出代打木架对话框“录入第X件”需要打木架。
 * 若货物需要代打木架，系统自动弹出代打木架对话框。代打木架精确到第几件。 参考规则SR3 2b2a 如运单必填信息未填写完整或填写内容不符合要求
 * （参考数据元素输入限制、长度、是否必填、运单号重复等）， 提交时给予提示。 提示为：“×××未填写整或输入内容不符合要求，请重新输入！”，
 * 且将此文本输入框标记为红色，光标置于此文本框中。 重新填写正确完整后，跳转步骤1。 参考规则SR7 2c2b 若为月结或临时欠款，
 * 如果客户既有应收账款金额加上本次应收金额超过客户最大信用额度， 不能提交开单。 弹出提示：客户既有应收账款金额加上本次应收金额超过客户最大信用额度，
 * 不能提交开单。参考SR9 *2d2c 若为月结或临时欠款，如果客户已有应收账款超过最大账期，不能提交开单。
 * 弹出提示：客户已有应收账款超过最大账期，不能提交开单。参考SR9 2e2d 提交时，当重量体积比不在设置的区间（重量体积比基础资料）中，
 * 弹出提示“请确认录入的重量体积是否准确！”； （该弹窗有两个按钮：确定、取消）点击确定时，弹出确认运单信息界面；
 * 点击取消，点返回运单录入界面；当X在区间中，无提示； 直接进入确认运单信息界面； 参考规则SR10 3a 步骤3中，可点击“取消”按钮，取消提交运单。
 * 取消提交运单，返回到系统运单开单界面，界面信息可编辑， 修改信息后，可再次进行提交，跳到步骤2。 3b 步骤3中，也可取消选择默认选择的复选框。
 * 1、如取消选择“打印运单”，确定之后，系统不进行自动打印运单， 需点击开单界面上的“打印运单”按钮，打印运单出发联。
 * 2、如取消选择“确定后新增运单”，确定之后， 系统返回到填写完整的运单开单界面，但是运单界面成灰色不可编辑， 需点击开单界面上的“新增”按钮，新增运单。
 * 3、如取消选择“打印标签”，确定之后， 系统不进行自动打印标签，需点击开单界面上的“打印标签”按钮，打印运单标签。 1.7 业务规则 序号 描述 SR1
 * 1、若为上门接货，开单提交生成后， 系统短信通知发货人及收货人。 短信模板可在系统中进行设置。 给发货人或收货人发送短信时， 若无手机号码则不发送。
 * 发送短信内容中包含“货物的件数”。 注：“货物的件数”为货物包装之前的件数。 系统自动给发货人、收货人发送货物出发短信（短信模板内容可配置）；
 * 否则只需要给收货人发短信；若收发货人无手机号码则不发送。 给收货人的短信内容：您好！这里是德邦物流，
 * （发货人姓名***）从（出发城市***）给您发来货物， 单号为（****）的（***货物的件数）件货，即日出发。
 * 目的地（*****客户的收获地址）。附：德邦物流营业部的电话、地址、营业部名称。 给发货人的短信内容：您好！这里是德邦物流，
 * 您从（出发城市***）给（收货人姓名***）托运的货物， 单号为（****）的（***货物的件数）件货，即日出发。
 * 目的地（*****客户的收获地址）。附：德邦物流营业部的电话、地址、营业部名称。 SR2 运单现付金额不为0，则在出发部门生成现金收款单；
 * 若到付金额不为0，则在到达部门生成应收单若付款方式为“现付”， “银行卡”，则在出发部门生成现金收款单； 若付款方式为“到付”在到达部门生成应收单。
 * 若付款方式为“临时欠款”，“网上支付”， “月结”在出发部门生成应收单；若运单包含“代收货款”， 则在出发部门生成应付单，到达部门生成应收单；
 * 若运单包含“装卸费”，则在出发部门生成应付单。 SR3 开单代打木架外场默认为第一外场， 如果第一外场不支持打木架，则营业员自己判定选择的代打木架外场。
 * 开单代打木架外场默认为开单走货路径中第一个可代打木架的外场，不可修改。 1）若货物包装中含有“木”字样，且走货路径上有代打木架外场，
 * 系统提示：是否需要代打木架？； 2）选择代打木架后，若默认的代打木架外场非走货路径上第一外场时， 系统给予提醒，便于营业员与客户衡量是否继续代打木架；
 * 3）若货物包装中含有“木”字样，但走货路径上没有可代打木架的外场， 则不能开代打木架，系统提示：走货路径上没有可代打木架的外场，不能代打木架。 SR4
 * 当运输性质为 “精准卡航”及“精准城运”时， 系统自动计算预计出发时间与预计提货/派送时间。 ①预计出发时间：
 * 由预计出发日期和准点出发时点（取自基础资料）组成， 形如【2012-04-09 12:00:00】。 若开单当前时点在准点出发时点前，
 * 则预计出发日期=开单日期；否则，预计出发日期=开单日期+1； ② 预计提货时间（开单提货方式为自提）：
 * 由预计提货日期和到达营业部承诺时点（取自基础资料）组成， 形如【2012-04-09 12:00:00】。若为当天出发，
 * 则预计提货日期=预计出发日期+到达营业部承诺天数； 否则预计提货时间=预计出发日期+到达营业部承诺天数-1。 ③ 预计派送时间（开单提货方式为送货）：
 * 由预计派送日期和派送承诺时点（取自基础资料）组成， 形如【2012-04-09 12:00:00】。若为当天出发，
 * 预计派送时间=预计出发日期+到达营业部承诺天数+派送承诺需加天数； 否则预计派送时间=预计出发日期+派送承诺需加天数-1。 SR5
 * 如果开单信息来自集中或非集中上门接货： 1、司机有PDA PDA开单后：则点击“PDA补录”走PDA补录流程引用系统用例SUC-491-补录运单。
 * 2、司机无PDA 则新增运单，进入开单界面走提交运单流程。 SR6 “运单确认提交界面”上的复选框可以单选，可以多选。 SR7
 * 提交时系统校验规则参考如下用例规则： SUC-492录入发货客户信息 SUC-493录入收货客户信息 SUC-494录入货物信息
 * SUC-495录入增值服务信息 SUC-496录入运输信息 SUC-311导入订单 SUC-397 确认公布总价 SUC-126 查询目的站 SR8
 * 运单确认提交页面，打印运运单下拉框只能选其一， 默认为运单模板配置基础资料中配置默认的模板， 如果不需要打印，不勾选即可。 SR9
 * 若为月结或临时欠款，则系统需要对客户应收账款日期及信用额度进行判断： 1）欠款天数 以客户为基本单位，开单/派送时付款方式为“临时欠款”，
 * 最长一笔欠款时间超过30天，该客户将不能继续开单为“临时欠款”， 假如客户的临时欠款未还款金额超过客户自己的信用额度，
 * 也不能继续开单；开单付款方式为“月结”，最长一笔欠款时间超过70天， 该客户将不能继续开单为“月结”；（始发应收账款从开单之日起计算，
 * 到付应收账款从第一次派送出库之日起计算，以更改方式更改为“临时欠款”或“月结”的， 从开单之日开始计算） 2）欠款额度
 * 临时欠款：以部门为单位，根据收入等级（前三个月最高收入金额） 设置该部门每月临时欠款最高额度（余额），详见下表； 当部门临时欠款未还款金额大于该金额时，
 * 将无法继续开单未“临时欠款”； 收入区间 项目 10万以下 3万 10-15万 5万 15-20万 7万 20-30万 10万 30-50万 15万
 * 50-100万 20万 100万以上 40万 月结：以客户为单位，连续2个月发货金额在3000元以上可申请月结， 月结额度不得高于近期最高走货金额的2倍，
 * 若客户连续两月发货量低于2000元，取消月结权限。 SR10 1. 系统设置货物重量体积比区间值（该值由基础资料配置），
 * 在运单提交时，系统自动对重量体积比进行校验：即重量体积比X=重量/体积； 当X不在设置的区间中，弹出提示“请确认录入的重量体积是否准确！”；
 * （该弹窗有两个按钮：确定、取消）点击确定时，弹出确认运单信息界面； 点击取消，点返回运单录入界面；当X在区间中，无提示； 直接进入确认运单信息界面；
 * SR11 1）用户可以随时录入运单信息随时暂存运单， 但必须录入打印标签所需的关键字段才可暂存运单。 目前暂存运单打印标签所需运单信息包含收货部门、
 * 运单号、目的站、提货网点、运输性质、提货方式、包装、件数。 （注：当走货路由经过特定的城市时还需要录入货物类型） 2）系统对录入的运单信息合法性进行校验；
 * 3）运单暂存后不生成正式运单信息、库存信息及财务单据； 4）用户可对已暂存的运单进行修改、暂存、提交（生成正式运单）；
 * 5）若暂存运单，系统锁定运单号及订单信息； 6）暂存的运单不可打印运单出发联； SR12 若PDA开单已打印标签，
 * 在提交运单后弹出的确认界面中打印标签默认不勾选， 若需打印标签则手动勾选"打印标签"复选框。 SR13 1）、如果开单组织是营业部门， 那么开单提交时，
 * 检验是否是驻地部门，如果是驻地部门， 入库对应驻地部门外场， 如果是营业部，入库对应营业部 2）、如果开单组织是开单组，那么开单提交时，
 * 校验是否已经打印标签，如果没有，入库配载部门；
 * 
 * 
 * 录入运输信息（整车）SUC业务规则 营业员点击整车运单开单，进入整车运单开单界面。 本界面为录入整车运输信息。
 * 界面信息包括：收货部门、单号、目的站、提货网点、 对外备注、对内备注、储运注意事项、配载部门、 最终配载部门、到达类型 1. 收货部门：揽货部门； 2.
 * 单号：运单单号； 3. 提货网点：收货客户可以领取货物的部门； 4. 对外备注：客户可以看到的备注信息，包括：空、
 * 保丢不保损、“不承保发霉、变质、虫蛀虫咬之损失”、 “ 不承保刮花、变形、撞凹之损失”、不可重压、易潮、 不可倒置、客户指定提货网点； 5.
 * 对内备注：仅限公司内部人员看到的备注信息； 6. 到达类型：到达客户处还是到达营业部 7. 储运注意事项：对外备注和对内备注信息的叠加； 8.
 * 配载部门:开单收货部门出发货配载专线； 1.6 操作步骤 序号 基本步骤 相关数据 补充步骤 1 录入收货部门 1. 规则-请参见系统规则SR1； 2
 * 录入单号 系统校验单号的合法性 1. 规则-请参见系统规则SR2； 3 录入提货网点 1. 规则-请参见系统规则SR3； 4 录入对外备注 1.
 * 规则-请参见系统规则SR4； 5 录入对内备注 6 到达类型 1. 规则-请参见系统规则SR5； 6 生成储运注意事项 1. 规则-请参见系统规则SR6；
 * 7 生成配载部门 1. 规则-请参见系统规则SR7； 8 生成最终配载部门 1. 规则-请参见系统规则SR8； 1.7 业务规则 序号 描述 SR1 1.
 * 收货部门默认为操作者所在的部门，不可修改； SR2 1. 单号最大长度为8位，如果超过提示“单号大于8位” 2.
 * 单号不能少于8位，“如果少于8位“单号长度少于7位” 3. 单号与最近开单单号前六位如果不等，那么提示“前后两票单号相差过大，
 * 请检查所输单号是否为本部门所属单号！” SR3 1. 提货网点可由收货客户地址的城市生成，也可手工选择； 2.
 * 系统自动过滤只显示符合录入文本条件的网点信息； SR4 参考SUC-496 录入运输信息 对对外备注的处理 SR5 1. 如果在
 * “是否经过营业部”打勾，付款方式可以选择到付项， 代收货款框可以修改； 2. 如果在“是否经过营业部”不打勾，付款方式中的到付项自动移除，
 * 代收货款清0且不可修改； SR6 1. 储运注意事项=对外备注&对内备注，各字段以“；”分开； 2. 对外备注永远在储运注意事项的最前面； SR7 1.
 * 通过出发部门和提货网点系统自动匹配始发配载部门基础资料；
 * 
 * 
 * 录入收货客户信息（整车）SUC业务规则 营业员点击运单开单，进入运单开单界面。 本界面分为两个界面：录入收货客户信息、选择收货客户。 1.
 * 录入收货客户信息： 界面为信息录入界面：包括：手机、电话、发货收货联系人（发货收货部门）、 发货收货人地址； 1.1 手机：发货收货人手机号码； 1.2
 * 电话：发货收货人电话号码； 1.3 收货联系人（收货部门）：收货客户的客户姓名， 当“运单开单”中的“开单提货方式”为“内部带货自提”时，
 * “收货联系人”字段更改为“收货部门”； 1.4 收货人地址：收货客户的详细联系地址， 支持国家行政区域自动过滤； 1.5 客户名称 1.6 客户编码 2.
 * 选择收货客户界面： 界面为选择客户信息界面：包括两部分： 客户信息列表区域、功能按钮区域； 2.1. 客户信息列表区域：
 * 包括：联系人、手机、电话、地址（规范化地址和详细地址）； 2.2. 功能按钮区域： 包括：确定、取消； 3. 选择热门城市界面 界面信息包含人热门城市
 * 4. 选择省份界面 界面信息包含省份 5. 选择城市界面 界面信息保护城市 6. 选择区县界面 界面信息保护区县 1.6 操作步骤 1.6.1 录入 序号
 * 基本步骤 相关数据 补充步骤 1 录入手机号码 1. 系统自动查询CRM系统中对应手机号码绑定的客户信息， 如果有弹窗，弹窗操作见扩展1a，
 * 如果没有，弹出FOSS历史开单记录中对应手机号码绑定的客户信息， 并弹窗，弹窗操作见扩展1b； 2.
 * 规则-请参见SUC-493-录入收货客户信息SR1、SR5、SR6； 2 录入电话号码 1. 如果手机号码没有填写，
 * 系统自动查询CRM系统中对应电话号码绑定的客户信息， 如果有弹窗，弹窗操作见扩展2a， 如果没有，弹出FOSS历史开单记录中对应手机号码绑定的客户信息，
 * 并弹窗，弹窗操作见扩展2b； 2. 1、规则-请参见SUC-493-录入收货客户信息SR1、SR5 、SR6； 3 录入收货联系人 1. 4
 * 录入收货人地址 1. 提供下拉框选择输入， 系统自动过滤输入的行政区下一级行政级的字段； 2. 地址在系统后台通过GIS系统进行匹配，
 * 如果是禁行区域，地址颜色为红色，如果是进仓区域，地址颜色为黄色 3. 规则-请参见系统规则SR4； 1.6.2 扩展 序号 扩展事件 相关数据 备注 1a
 * 当录入的手机号码在CRM系统中有手机号码绑定的客户信息， 则自动弹窗并显示手机号码为录入的手机号的所有客户信息，
 * 营业员选择录入一条记录，并确定；选择的客户信息自动带入收货客户信息中； 客户信息 1.
 * 规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则； 2. 规则-请参见SUC-493-录入收货客户信息SR5 、SR6； 1b
 * 当录入的手机号码在CRM系统中没有手机号码绑定的客户信息时， 如果该客户在这3个月有发过货，则弹出历史收货记录，
 * 营业员选择录入一条记录，并确定；选择的客户信息自动带入收货客户信息中； 客户信息 1.
 * 规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则； 2. 规则-请参见SUC-493-录入收货客户信息SR5 、SR6；
 * 
 * 2a 当录入的电话号码在CRM系统中有电话号码绑定的客户信息， 则自动弹窗并显示电话号码为录入的电话号码的所有客户信息，
 * 营业员选择录入一条记录，并确定；选择的客户信息自动带入收货客户信息中； 客户信息 1.
 * 规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则； 2. 规则-请参见SUC-493-录入收货客户信息SR5 、SR6； 3. 2b
 * 当录入的电话号码在CRM系统中没有电话号码绑定的客户信息时， 如果该客户在这3个月有发过货，则弹出历史收货记录，
 * 营业员选择录入一条记录，并确定；选择的客户信息自动带入收货客户信息中； 客户信息 1.
 * 规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则； 2. 规则-请参见SUC-493-录入收货客户信息SR5 、SR6； 4.
 * 1.6.1 录入 序号 基本步骤 相关数据 补充步骤 1 录入手机号码 1. 系统自动查询CRM系统中对应手机号码绑定的客户信息和
 * FOSS历史开单记录中对应手机号码绑定的客户信息，并弹窗， 弹窗操作见扩展1b； 2. 规则-请参见系统规则SR1； 2 录入电话号码 1.
 * 系统自动查询CRM系统中对应电话号码绑定的客户信息和FOSS历史开单记录中对应手机号码绑定的客户信息， 并弹窗，弹窗操作参见扩展2a； 2.
 * 规则-请参见系统规则SR1； 3 录入客户名称 1. 规则-请参见系统规则SR2 4 录入收货联系人 5 录入收货人地址 1. 提供下拉框选择输入，
 * 系统自动过滤输入的行政区下一级行政级的字段； 2. 地址在系统后台通过GIS系统进行匹配， 如果是禁行区域，地址颜色为红色，
 * 如果是进仓区域，地址颜色为黄色; 3. 规则-请参见系统规则SR3； 1.6.2 扩展 序号 扩展事件 相关数据 备注 1a
 * 当光标焦点移至录入手机号码时， 系统自动调用CRM系统对应发货客户的历史发货记录， 并自动弹窗显示所有该发货客户的历史发货记录；
 * 营业员选择一条记录，并确定，选择的客户信息自动带信收货客户信息中； 客户信息 1. 规则-请参见系统规则SR4； 1b
 * 当录入的手机号码在CRM系统中有手机号码绑定的客户信息， 则自动弹窗并显示手机号码为录入的手机号的所有客户信息， 营业员选择录入一条记录，并确定；
 * 选择的客户信息自动带入收货客户信息中； 客户信息 1. 规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则； 2a
 * 当录入的电话号码在CRM系统中有电话号码绑定的客户信息， 则自动弹窗并显示电话号码为录入的电话号码的所有客户信息，
 * 营业员选择录入一条记录，并确定；选择的客户信息自动带入收货客户信息中； 客户信息 1.
 * 规则-请参见系统用例SUC-492中的“1.6.2扩展2a”的规则； 1.7 业务规则 序号 描述 SR1 1. 收货客户手机号码及固定电话至少提供一个，
 * 手机号码只能为数字并且为11位，固定电话号码只能为数字， 且可添加多个； SR2 1. 若收货客户为公司会员客户，
 * 则录入收货客户信息后系统界面显示该收货客户联系人编码； SR3 1. 客户详细地址必填至乡/镇， 且乡镇下一级内容不能为空； SR4 1.
 * 只有当收货人手机为空， 且发货客户信息已录入时，才会检索并弹窗显示； 2. 若未查询到历史记录，则无法提示； 3. 通过选择录入的收货人信息均可修改；
 * 1.
 * 
 * 录入货物信息（整车）SUC业务规则
 * 
 * 营业员点击运单开单，进入运单开单界面。 本界面为录入货物信息。 界面主要分为一个部分：录入货物信息。 1. 录入货物信息：
 * 录入信息包括：货物名称、总件数、总重量、货物尺寸、总体积、货物包装 1.1 货物名称：货物的名称； 1.2 总件数：收货时货物的总件数； 1.3
 * 总重量：收货时货物的总重量； 1.4 总体积：收货时货物的总体积； 1.5 货物包装：货物的包装数； 1.6 操作步骤 1.6.1 录入货物信息 序号
 * 基本步骤 相关数据 补充步骤 1 修改货物名称 1. 系统自动匹配违禁品，生成规则； 2. 规则-请参见系统规则SR1； 1.7 业务规则 序号 描述
 * SR1 1. 若货物为违禁品，则系统自动提示“货物为违禁品， 不可开单！”； 2. 违禁品、拒收品、具体类型可在系统中进行配置； SR2
 * 新增一条业务规则：在提交运单之前， 若相邻两次输入的单号（两次单号分别为A与B且单号输入合法）差别较大时，
 * 系统给予用户友好提示避免录错单号，但不限制单号的输入。具体规则为： 1）若前后两次输入的单号位数相同，当|A-B|≥100时系统给予提示；
 * 2）若前后两次输入的单号位数不同，系统给予提示； 3）提示信息为：前后两票单号相差过大， 请检查所输单号是否是本部门所属单号！
 * 
 * 
 * 营业员点击运单开单，进入运单开单界面。 本用例分为两个界面：录入发货客户信息、 选择发货客户； 1. 录入发货客户信息：
 * 界面为信息录入界面：包括：手机、电话、客户名称、 客户编码、发货联系人（发货部门）、发货人地址； 1.1 手机：发货人手机号码； 1.2
 * 电话：发货人电话号码； 1.3 客户名称：发货客户公司或单位名称， 可支持搜索查询； 1.4 客户编码：我司给客户的客户号； 1.5
 * 发货联系人（发货部门）：发货客户的客户姓名， 当“运单开单”中的“开单提货方式”为“内部带货自提”时， “发货联系人”字段更改为“发货部门”； 1.6
 * 发货人地址：发货客户的详细联系地址， 支持国家行政区域自动过滤； 2. 选择发货客户界面： 界面为选择客户信息界面：包括两部分：
 * 客户信息列表区域、功能按钮区域； 2.1. 客户信息列表区域： 包括：客户编码、客户名称、联系人、手机、 电话、地址(规范化地址和详细地址)； 2.2.
 * 功能按钮区域： 包括：确定、取消； 3. 选择热门城市界面 界面信息包含人热门城市 4. 选择省份界面 界面信息包含省份 5. 选择城市界面
 * 界面信息保护城市 6. 选择区县界面 界面信息保护区县 1.6 操作步骤 1.6.1 录入 序号 基本步骤 相关数据 补充步骤 1 录入手机号码 1.
 * 系统自动查询CRM系统中对应手机号码绑定的客户信息， 如果有弹窗，弹窗操作见扩展1a， 如果没有，弹出FOSS历史开单记录中对应手机号码绑定的客户信息，
 * 并弹窗，弹窗操作见扩展1b； 2. 规则-请参见系统规则SUC-492-录入发货客户信息SR1； 2 录入电话号码 2.
 * 如果手机号码没有填写，系统自动查询CRM系统中对应电话号码绑定的客户信息， 如果有弹窗，弹窗操作见扩展2a，
 * 如果没有，弹出FOSS历史开单记录中对应手机号码绑定的客户信息， 并弹窗，弹窗操作见扩展2b； 3.
 * 规则-请参见系统规则SUC-492-录入发货客户信息SR1； 3 录入客户名称和客户编码 1.
 * 规则-请参见系统规则SUC-492-录入发货客户信息SR2、SR3； 4 录入发货联系人 5 录入发货人地址 1. 提供下拉框选择输入，
 * 系统自动过滤输入的行政区下一级行政级的字段； 2. 规则-请参见系统规则SUC-492-录入发货客户信息SR6； 1.6.2 扩展 序号 扩展事件
 * 相关数据 备注 1a 当录入的手机号码在CRM系统中有手机号码绑定的客户信息， 则自动弹窗并显示手机号码为录入的手机号的所有客户信息，
 * 营业员选择录入一条记录，并确定；选择的客户信息自动带入发货客户信息中； 客户信息 1.
 * 规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则； 2. 规则-请参见系统规则SUC-492-录入发货客户信息SR5 、SR6、SR7；
 * 1b 当录入的手机号码在CRM系统中没有手机号码绑定的客户信息时， 如果该客户在这3个月有发过货，则弹出历史发货记录，营业员选择录入一条记录，
 * 并确定；选择的客户信息自动带入发货客户信息中； 客户信息 3. 规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则； 4.
 * 规则-请参见系统规则SUC-492-录入发货客户信息SR5 、SR6、SR7； 2a 当录入的电话号码在CRM系统中有电话号码绑定的客户信息，
 * 则自动弹窗并显示电话号码为录入的电话号码的所有客户信息， 营业员选择录入一条记录，并确定；选择的客户信息自动带入发货客户信息中； 客户信息 1.
 * 规则-请参见系统用例SUC-492中的“1.6.2扩展2a”的规则； 2. 规则-请参见系统规则SUC-492-录入发货客户信息SR5、SR6、SR7；
 * 2b 当录入的电话号码在CRM系统中没有电话号码绑定的客户信息时， 如果该客户在这3个月有发过货，则弹出历史发货记录，营业员选择录入一条记录，
 * 并确定；选择的客户信息自动带入发货客户信息中； 客户信息 1. 规则-请参见系统用例SUC-492中的“1.6.2扩展2a”的规则； 2.
 * 规则-请参见系统规则SUC-492-录入发货客户信息SR5、SR6、SR7； 1 录入手机号码 1. 系统自动查询CRM系统中对应手机号码绑定的客户信息和
 * FOSS历史开单记录中对应手机号码绑定的客户信息，并弹窗，弹窗操作见扩展1a； 1. 规则-请参见系统规则SR1； 2 录入电话号码 1.
 * 系统自动查询CRM系统中对应电话号码绑定的客户信息 和FOSS历史开单记录中对应手机号码绑定的客户信息，并弹窗，弹窗操作参见扩展2a； 1.
 * 规则-请参见系统规则SR1； 3 录入客户名称和客户编码 1. 规则-请参见系统规则SR2、SR3； 4 录入发货联系人 5 录入发货人地址 1.
 * 提供下拉框选择输入， 系统自动过滤输入的行政区下一级行政级的字段； 2. 规则-请参见系统规则SR4； 1.6.2 扩展 序号 扩展事件 相关数据 备注
 * 1a 当录入的手机号码在CRM系统中有手机号码绑定的客户信息， 则自动弹窗并显示手机号码为录入的手机号的所有客户信息，
 * 营业员选择录入一条记录，并确定；选择的客户信息自动带入发货客户信息中； 客户信息 1. 规则-请参见系统规则SR5； 2a
 * 当录入的电话号码在CRM系统中有电话号码绑定的客户信息， 则自动弹窗并显示电话号码为录入的电话号码的所有客户信息，
 * 营业员选择录入一条记录，并确定；选择的客户信息自动带入发货客户信息中； 客户信息 1. 规则-请参见系统规则SR6； 1.7 业务规则 序号 描述 SR1
 * 1.规则参考SUC-492-录入发货客户信息SR1 SR2 1. 规则参考SUC-492-录入发货客户信息SR2 SR3
 * 1.规则参考SUC-492-录入发货客户信息SR3 SR4 1. 规则参考SUC-492-录入发货客户信息SR6 SR5 1.
 * 规则参考SUC-492-录入发货客户信息SR7 SR6 1. 规则参考SUC-492-录入发货客户信息SR8
 * 
 * 
 * 确认整车总价SUC业务规则
 * 
 * 营业员点击整车开单，进入整车开单界面。 本界面为录入整车收银界面。 1. 约车报价：营业员约整车后，请车员受理的价格； 2.
 * 开单报价：营业员根据请车员的受理价格，给客户的实际运费价格； 3. 增值服务费用 4. 总运费：本次承运的客户应付金额； 5.
 * 开单付款方式：客户的付款方式，包括：现金、银行卡、月结、临时欠款、到付； 6. 预付金额 7. 到付金额； 1.6 操作步骤 序号 基本步骤 相关数据
 * 补充步骤 1 录入开单报价 1. 规则-请参见系统规则SR1； 2 查看约车报价、增值服务费用入总运费 1. 规则-请参见系统规则SR2、SR3； 3
 * 选择开单付款方式 1. 规则-请参见系统规则SR4、SR5； 4 预付金额 1. 规则-请参见系统规则SR4、SR5； 5 到付金额 1.
 * 规则-请参见系统规则SR4、SR5； 1.7 业务规则 序号 描述 SR1 1. 开单报价默认等于约车报价； 2.
 * 修改的开单报价只能为约车报价的某个范围区间中，该范围区间可由公司统一配置； SR2 1. 整车导入约车开单时，约车报价为请车员受理的约车价格，不可修改；
 * SR3 1. 总运费=开单报价+增值服务费； 2. 增值服务费=保价费+代收手续费+预付运费保密服务费+返单费+包装费； SR4 1.
 * 整车的付款方式包含现金、银行卡、月结、临时欠款、到付； 2. 支持发货客户的多种付款方式叠加，但月结和临时欠款不能同时存在； 2.
 * 开单只能选择一种付款方式，不可选择两种或以上； 3. 月结客户可以开月结； 4. 若客户非月结，则自运过滤月结的付款方式； 5.
 * 付款方式为到付或者临时欠款时，不能选择预付运费保密； 6. 若整车开单选择直接到达客户处，则不能办理到付； 7.
 * 有信用额度且额度大于等于总运费的发货客户，才可以选择临时欠款； SR5 1. 预付金额必须大于0才能选择预付运费保密； 2.
 * 当付款方式为现付时，预付金额必须大于0；否则， 提示信息“付款方式非到付，预付金额不能小于等于0”； 3. 当付款方式为到付时，预付金额不能大于0；否则，
 * 提示信息“付款方式为【到付】，预付金额不能大于0”； 4. 月结客户的信用金额直接限制该客户的当月发货金额，
 * 当月发货金额超过信用额度，当月将无法再开单月结， 提示“该客户的剩余可用信息额度不足，不能开月结”； 5. 临时欠款时，需要客户中的信用额度超过运费，
 * 否则，提示“该客户的剩余可用信息额度不足，不能开临时欠款”； 6. 当付款方式为临时欠款等收款放货时， 现付到付均为零，不可修改； SR6 1.
 * 约车报价、开单报价、增值服务费用、总运费、预付金额、 到付金额均为整数，按照四舍五入原则；
 * 
 * 
 * 导入整车约车编号SUC业务规则
 * 
 * 营业员通过 界面标题： 约车信息 约车编号：受理后的约车编码 1. 录入发货客户信息： 界面为信息录入界面：包括：手机、电话、客户名称、
 * 客户编码、发货联系人、发货人地址； 1.1 手机：发货人手机号码； 1.2 电话：发货人电话号码； 1.3
 * 客户名称：发货客户公司或单位名称，可支持搜索查询； 1.4 客户编码：我司给客户的客户号； 1.5 发货联系人：发货客户的客户姓名； 2.
 * 录入收货客户信息： 界面为信息录入界面：包括：手机、电话、发货联系人、发货人地址； 1.6 手机：发货人手机号码； 1.7 电话：发货人电话号码； 1.8
 * 收货联系人：收货客户的客户姓名 1.9 收货人地址：收货客户的详细联系地址，支持国家行政区域自动过滤； 3. 录入货物信息：
 * 录入信息包括：货物名称、总件数、总重量、货物尺寸、总体积、货物包装 1.1 货物名称：货物的名称； 1.2 总件数：收货时货物的总件数； 1.3
 * 总重量：收货时货物的总重量； 1.4 总体积：收货时货物的总体积； 1.5 货物包装：货物的包装数； 4.界面标题：计费付款
 * 录入信息包括：约车报价、总运费、增值服务费、 开单付款方式、预付金额、到付金额 1.1 约车报价：整车约车费用 1.2 总运费：运费总合 1.3
 * 增值服务费：增值服务费总合 1.4 开单付款方式：开发付款的方式 1.5 预付金额：现付金额 1.6 到付金额：到付金额 1.6 操作步骤 1.6.1
 * 导入整车约车编号 序号 基本步骤 相关数据 补充步骤 1 用户输入约车编号 2 用户点击“确定”按钮 约车信息 系统自动带出相应的约车信息，
 * 约车编号不可编辑，规则参考SR1 扩展事件写非典型或异常操作过程 序号 扩展事件 相关数据 备注 1.7 业务规则 序号 描述 SR1
 * 1、校验是否有此约车编号，如果没有，提示无此约车编号， 如果有，但是没有受理，提示“约车编号未受理”，如果受理拒绝，
 * 提示“约车失败”并提示失败原因，如果单号已经导入过，不能重复导入， 提示“约车编号已经导入过”，如果不是本部门的整车约车编号，
 * 录入后提示“不能导入其他部门整车约车编号” 2、根据约车信息填充界面，请车费用填充进约车报价中。
 * 
 * 
 * 
 * 运单提交（离线）SUC业务规则
 * 
 * 1.1 相关业务用例 BUC_FOSS_5.20.30_550 营业部离线开单 1.2 用例描述 营业员通过本用例录入提交。 1.3 用例条件 条件类型
 * 描述 引用系统用例 前置条件 1. 运单在线登录成功 2. 运单已填写完整 SUC-441录入收货客户信息(离线) SUC-442录入发货客户信息(离线)
 * SUC-443录入货物信息(离线) SUC-444录入增值服务信息(离线) SUC-445录入运输信息(离线) SUC-412运单收银(离线)
 * SUC-372暂存存运单(离线) SUC-362在线登录 后置条件 1. 传送运单号、金额、帐号等结算数据到财务子系统 2.
 * 传送货物名称、件数、重量等货物信息到中转子系统，安排运输计划 3. 传送运单号等信息到官网，客户查询运单状态 4.
 * 给收货人发送出发短信，给上门接货客户发送短信 5. 订单信息反馈给CRM系统，订单处理结果为：离线已开单。 6、 当运输性质为精准空运时，
 * 提交成功后会自动生成订舱信息流到最终配载部门（即总调）的舱位信息中 1.4 操作用户角色 操作用户 描述 营业员 通过运单开单界面，提交离线运单信息
 * 1.5 界面要求 1.5.1 表现方式 Web方式 1.5.2 界面原型 1.5.2.1 运单离线开单界面 1.5.2.2 运单确认提交界面 1.5.3
 * 界面描述 1.5.3.1 运单开单界面 界面共包括7个部分： 1、发货客户信息； 2、收货客户信息； 3、货物信息； 4、运输信息； 5、增值服务信息；
 * 6、计费付款； 7、功能按钮。 具体描述参考DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入发货客户信息-V0.1.doc
 * DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入货物信息-V0.2.doc
 * DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入收货客户信息-V0.1.doc
 * DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入运输信息-V0.1.doc
 * DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息-V0.1.doc 运单确认提交界面 界面共包括3个部分： 1、离线运单基本信息；
 * 2、在线基本信息 3、功能复选框； 4、功能按钮 1、 运单基本信息：单号、到付总运费、预付总运费、 代收货款、保险价值、收货人名称、付款方式、
 * 提货网点、提货方式、收货人地址、收货人电话、 货物名称、重量/体积/件数、包装 。 2、 运单基本信息：单号、到付总运费、
 * 预付总运费、代收货款、保险价值、收货人名称、 付款方式、提货网点、提货方式、收货人地址、 收货人电话、货物名称、重量/体积/件数、包装
 * 3、功能复选框：打印运单（选择之后，点击确定系统自动打印运单）、 打印标签（选择之后，点击确定系统自动打印标签）、
 * 下一条离线运单信息（选择后提交运单成功后填充下一条）。 4、功能按钮：确定、取消 。 1.6 操作步骤 序号 基本步骤 相关数据 补充步骤 1
 * 营业员在运单查询界面，查询出离线开单未提交的运单 2 点击“修改” 收货客户信息、发货客户信息、货物信息、
 * 增值服务信息、计费付款信息、运输信息、代打木架信息 进入开单界面 1、自动填充发货客户信息 参考规则SR1、 SR2 2、自动填充发货收货客户信息
 * 参考规则SR1 、SR2 3、自动填充货物信息 参考规则SR3，SR7 4、自动填充运输信息 参考规则SR4，SR7 5、自动填充增值服务信息
 * 参考规则SR5，SR7 6、自动填充计费付款信息 参考规则SR6，SR7 填充完之后， 如果有代打木架，弹出代打木架信息录入界面 2
 * 点击“提交”按钮提交运单。 1、客户上门提供的货物承运信息。 2、上门接货客户提供的承运信息。
 * 1.提交运单，根据系统规则SUC-439提交运单系统用例进行提交 2. 调用中转接口，生成库存信息 3.系统自动弹出，运单确认提交界面 1.7 业务规则
 * 序号 描述 SR1 1.根据离线录入的发货客户信息， 使用发货联系人手机号码到远程服务器进行匹配客户信息， 如果没有，根据离线填写的发货客户信息，
 * 填充发货联系人手机号、发货联系人、发货人地址、发货人电话号码， 如果有，根据查询出来到客户信息，显示会员编码和客户名称，
 * 并根据离线填写的客户信息，填充发货联系人手机号、发货联系人、 发货人地址、发货人电话号码。填充时不需要进行联动和校验
 * 1.填充发货信息和发货信息时，根据发货客户手机到CRM进行查询， 无论查询出有多少条阻塞式弹出CRM查询框让用户进行选择，
 * 当发货客户手机为空时，根据电话号码到CRM进行查询， 无论查询出有多少条阻塞式弹出CRM查询框让用户进行选择，
 * 当用户选择时进行填充，如果客户选择取消时，不填充 2.如果修改，修改规则参考系统用例SUC-492录入发货客户信息 SR2
 * 11.如果修改，修改规则参考系统用例SUC-492录入发货客户信息和SUC-493录入收货客户信息 .根据离线录入的收货客户信息，
 * 使用收货联系人手机号码到远程服务器进行匹配客户信息， 如果没有，根据离线填写的收货客户信息，
 * 填充发货联系人手机号、发货联系人、发货人地址、发货人电话号码， 如果有，根据查询出来到客户信息，显示会员编码和客户名称，
 * 并根据离线填写的收货客户信息，填充发货联系人手机号、发货联系人、 发货人地址、发货人电话号码。填充时不需要进行联动和校验
 * 2.如果修改，修改规则参考系统用例SUC-493录入收货客户信息 SR3 1、 把货物信息填充到界面中，在填充过程中， 不需要进行联动和校验 2、1、
 * 如果修改、修改规则参考系统用例SUC-494 录入货物信息 SR4 1、把运输信息到界面中，在填充过程中， 不需要进行联动和校验
 * 2、如果修改，修改规则参考系统用例SUC-496录入运输信息 SR5 1、把增值服务信息填充到界面中，在填充过程中，不需要进行联动和校验
 * 21、如果修改，修改规则参考系统用例SUC-494录入增值服务信息 SR6
 * 1.如果发货客户有优惠协议，那么根据SUC-486-运单收银系统用例规则进行重新计价 21.如果修改，修改规则参考系统用例SUC-408 运单收银 SR7
 * 1、在填充过程中涉及到需要用基础资料、产品价格和客户资质的校验、 计算、联动，都用最新信息进行校验、计算、联动，
 * 如果离线保存时已经有计算或联动的值，需要进行覆盖， 需要最新计算和联动的值。
 * 
 * 运单收银（离线）SUC业务规则
 * 
 * 1.1 相关业务用例 BUC_FOSS_5.20.30_550 (营业部离线开单) 1.2 用例描述
 * 当网络故障或服务器原因导致营业部不能正常开单时，客户上门发货为汽运或空运，营业员确认承运信息之后，通过离线系统计算货物总付款金额。 1.3 用例条件
 * 条件类型 描述 引用系统用例 前置条件 1. 确认承运信息已录入完毕； 后置条件 1. 录入收入； 1.4 操作用户角色 操作用户 描述 营业员
 * 可查询、确认发货/收货客户应付款金额，及客户的付款方式 开单员 可查询、确认发货/收货客户应付款金额，及客户的付款方式 1.5 界面要求 1.5.1
 * 表现方式 Web页面 1.5.2 界面原型 1.5.3 界面描述 营业员点击离线运单开单，进入离线运单开单界面。 本界面标题：计费付款。 1.
 * 计费类型：包括重量计费、体积计费，默认显示重量计费； 2. 计费费率， 3. 公布价运费 4. 增值服务费用 5. 总运费 6.
 * 开单付款方式：包括现金、到付； 7. 预付金额； 8. 到付金额； 9. 计费重量。 1.6 操作步骤 1.6.1 运单收银 序号 基本步骤 相关数据
 * 补充步骤 1 查看计费类型和计费费率 1. 规则-请参见系统规则SR1、SR2； 2 查看公布价运费和增值服务费及总运费 1.
 * 规则-请参见系统规则SR3； 3 录入付款方式 1. 规则-请参见系统规则SR4； 4 确认和录入预付金额和到付金额 1. 规则-请参见系统规则SR5；
 * 5 查看计费类型和计费费率 1. 规则-请参见系统规则SR1、SR2； 扩展事件写非典型或异常操作过程 序号 扩展事件 相关数据 备注 5a 5b 1.7
 * 业务规则 序号 描述 SR1 1. 计费类型分为重量计费、体积计费， 由系统自动生成，不可修改； 默认重量计费； 2.
 * 对于一票货物系统分别按重量和体积分别计费并取大优先的原则计费； 若按重量计费运费较按体积计费运费较高，
 * 则计费类型为重量计费；若按体积计费运费较按重量计费运费较高， 则计费类型为体积计费； 3. 运输类型为汽运时,计费重量为空，不可修改； 2.4.
 * 运输类型为空运时计费重量应为重量和体积*1000000/6000进行对比，取大； SR2 1. 费率为对应计费类型、目的站、提货网点及运输类型的走货单价；
 * 2. 目的站、提货网点及运输类型确认后， 即可自动显示对应计费类型的费率；（来自本地价格基础资料） 3.
 * 费率可以保留到小数点后2位；运费、预付金额、到付金额为整数， 按照四舍五入的原则； SR3 1.
 * 公布价运费（即重量、体积计费的运费）=每公斤单价/每方价格与货物实际重量/体积的乘积， 对于一票货物系统分别按重量和体积分别计费并取大优先的原则计费；
 * （来自价格基础资料，下载并且使用当前启用的最新的价格版本， 参考SUC-547下载基础资料PC-SR1） 2.
 * 增值服务费=送货费+包装费+保价费+代收手续费+其他费用和； 3. 总运费费用=公布价运费+增值服务费+装卸费 =预付金额+到付金额； 3.4.
 * 公布价运费=纯运费+装卸费 SR4 1. 付款方式只有：到付，现付 SR5 1. 当付款方式为现付时，预付金额必须大于0；否则，
 * 提示信息“付款方式为现付，预付金额必须大于0”； 2. 当付款方式为到付时，到付金额必须大于0；否则，
 * 提示信息“付款方式为【到付】，到付金额必须大于0”； 3. 发货人和收货人都付款，付款方式为现付; 发货人跟收货人都付款，付款方式选择到付。 4.3.
 * 支持发货人、收货人付款方式的组合， 例如付款方式为到付500：那么预付金额可以未300， 到付金额为200，总和等于500 ，那么预付300，
 * 可以选择现金100元，临时欠款100，银行卡刷卡100元。 SR6 参考suc-403生成运单SR1: 系统自动检测，
 * 如果客户端X天还没有更新，不能打开离线运单界面， 并提示“请在间隔X天内，在线登录系统
 * 
 * 
 * 确认公布总价（离线）SUC业务规则 1.1 相关业务用例 BUC_FOSS_5.20.30_550 (营业部离线开单) 1.2 用例描述
 * 当网络故障或服务器原因导致营业部不能正常开单时， 客户上门发货为汽运或空运，营业员确认承运信息之后，
 * 通过离线系统计算出本地公布价与计费重量或计费体积乘积的运费。 1.3 用例条件 条件类型 描述 引用系统用例 前置条件
 * 离线系统已经更新最新且已启用的价格版本 参考规则SR4 后置条件 离线开单保存 1.4 操作用户角色 操作用户 描述 营业员 营业员录入货物承运信息等。
 * 开单员 开单员录入货物承运信息等。 1.5 界面要求 1.5.1 表现方式 Web页面 1.5.2 界面原型 无 1.5.3 界面描述 无 1.6
 * 操作步骤 1.6.1 计算公布总价 序号 基本步骤 相关数据 补充步骤 1 登陆离线系统 2 打开“离线开单”界面。 3 录入发货人信息
 * 参考SUC-442 4 录入收货客户信息 参考SUC-441 5 录入货物信息 参考SUC-443 6 录入运输信息 参考SUC-445
 * 进行前面5操作之后，若是空运， 系统读取本地下载的空运公布价价格方案计算出公布总价， 显示在运单开单界面。
 * 若是汽运，系统读取本地下载的汽运公布价价格方案（计算出公布总价， 显示在运单开单界面。 参考规则SR1，SR2，SR3 扩展事件写非典型或异常操作过程
 * 序号 扩展事件 相关数据 备注 5a 1.7 业务规则 序号 描述 SR1 1）汽运：上门发货汽运运费最低X元一票；（同城、卡航；可配置）；
 * 上门接货汽运运费最低X元一票；（同城、卡航；可配置）； 2）空运：空运运费最低X元一票；（可配置）； SR2
 * 1）汽运：当货物为“接货”时，系统自动匹配生成公布价“接货价格方案”； 当货物为“非接货”时，系统自动匹配生成公布价“非接货的价格方案”；
 * 2）空运：系统自动匹配公布价 “空运价格方案”； 空运价格只有上门发货一套价格方案， 如有接货费在其他费用里添加一项接货费。
 * （来自价格基础资料，下载并且使用当前启用的最新的价格版本，参考SUC-547下载基础资料PC-SR1） SR3 1）计费方式分为重量计费、体积计费；重量、
 * 体积计费的运费=每公斤单价与货物实际重量的乘积 或 每方单价与货物实际体积的乘积，
 * 对于一票货物，系统按重量和体积分别计算并取大优先的原则计费给出公布价总运费, 计费方式即为取大的一方； SR4 参考suc-403生成运单SR1:
 * 系统自动检测，如果客户端X天还没有更新， 不能打开离线运单界面，并提示“请在间隔X天内，在线登录系统
 * 
 * 
 * 录入运输信息（离线）SUC业务规则 营业员点击运单开单，进入运单开单界面。 本界面标题：录入运输信息。 界面信息包括：收货部门、单号、运输性质、配载类型、
 * 提货方式、目的站、提货网点、上门接货、集中接货、对外备注、 对内备注、储运注意事项、配载线路（配载航班）、配载部门、
 * 最终配载部门、预计出发时间、预计派送/提货时间。 1. 收货部门：揽货部门； 2. 单号：运单单号； 3.
 * 运输性质：公司产品类型，包括精准空运、精准汽运（长途）、 精准卡航、精准城运、汽运偏线、精准汽运（短途）； 4.
 * 配载类型：公司走货方式，包括专线、偏线（外发）、合大票、单独开单； 5. 提货方式：公司提供的送货方式，包括自提（不含机场提货费）、
 * 免费自提、机场自提、送货上门、免费送货、自提、内部带货自提、送货进仓； 6. 目的站：客户所发货物要到达的目的城市和区域； 7.
 * 提货网点：收货客户可以领取货物的部门； 8. 上门接货：我司提货的一种服务，司机上门接货，确认承运， 有区别于客户上门发货； 9.
 * 集中接货：是否为集中接送货区域，以集中接货的方式揽货， 是对上门接货的一个属性补充； 10. 对外备注：客户可以看到的备注信息，包括：空、保丢不保损、
 * “不承保发霉、变质、虫蛀虫咬之损失”、“ 不承保刮花、变形、撞凹之损失”、 不可重压、易潮、不可倒置、客户指定提货网点； 11.
 * 对内备注：仅限公司内部人员看到的备注信息； 12. 储运注意事项：对外备注和对内备注信息的叠加； 13.
 * 配载线路（配载航班）:配载类型为偏线（外发）或专线时时， 显示“配载线路”，为从出发部门到达开单目的站，我司走货的线路；
 * 配载类型为合大票或单独开单时，显示“配载航班”，为我司规则的空运走货的航班类型， 包括早班、中班、晚班； 14. 配载部门:开单收货部门出发货配载专线；
 * 15. 最终配载部门:货物到达的最终部门； 16. 预计出发时间:我司走货的预计出发时间， 适用于运输类型为“精准卡航”及“精准城运”； 17.
 * 预计派送/提货时间: 我司承诺客户的可提货或送货的时间， 适用于运输类型为“精准卡航”及“精准城运”； 1.6 操作步骤 序号 基本步骤 相关数据
 * 补充步骤 1 录入收货部门 1. 规则-请参考SUC-496录入运输信息-系统规则SR1； 2 录入单号 1.
 * 系统校验单号的合法性；单号唯一在离线提交时，判断， 除单号唯一性其他参考规则SR1 3 录入运输性质 1.
 * 规则-请参考SUC-496录入运输信息-系统规则SR2、SR3； 4 录入配载类型 1.
 * 规则-请参考SUC-496录入运输信息-系统规则SR3、SR4、SR5、SR6； 5 录入提货方式 1.
 * 规则-请参考SUC-496录入运输信息-系统规则SR4、SR6、SR7、SR8； 6 录入目的站 1.
 * 规则-请参考SUC-496录入运输信息-系统规则SR9； 7 录入提货网点 1.
 * 规则-请参考SUC-496录入运输信息-系统规则SR5、SR8、SR9、SR10； 8 勾选是否上门接货 1.
 * 规则-请参考SUC-496录入运输信息-系统规则SR11； 2. 勾选上门接货，必须输入司机工号，司机工号为6为数字。参考规则SR3 9 勾选是否集中接货
 * 1. 规则-请参考SUC-496录入运输信息-系统规则SR11、SR12； 10 录入对外备注 1.
 * 规则-请参考SUC-496录入运输信息-系统规则SR13、SR14； 11 录入对内备注 1. 参考规则SR2 12 生成储运注意事项 1.
 * 规则-请参考SUC-496录入运输信息-系统规则SR14； 13 录入配载线路（配载航班） 1.
 * 规则-请参考SUC-496录入运输信息-系统规则SR15； 2. 参考SUC-547下载基础资料(PC) 14 录入配载部门 1.
 * 规则-请参考SUC-496录入运输信息-系统规则SR16； 15 录入最终配载部门 1. 规则-请参考SUC-496录入运输信息-系统规则SR17； 16
 * 生成预计出发时间 1. 规则-请参考SUC-496录入运输信息-系统规则SR18； 17 生成预计派送/提货时间 1.
 * 规则-请参考SUC-496录入运输信息-系统规则SR19； 1.7 业务规则 序号 描述 SR1 1、单号为8-9位数字， 不能输入重复单号。 SR2
 * 1、对内备注仅公司内部人员可见， 输入字符长度不得超过500。 SR3 1、当勾选上门接货时， 司机工号必填，且为6位数字。 SR4
 * 参考suc-403生成运单SR1: 系统自动检测，如果客户端X天还没有更新， 不能打开离线运单界面，并提示“请在间隔X天内，在线登录系统
 * 
 * 
 * 录入收货客户信息（离线）SUC业务规则
 * 
 * 1.1 相关业务用例 BUC_FOSS_5.20.30_550 营业部离线开单 1.2 用例描述 营业员通过本用例录入收货客户信息。 1.3 用例条件
 * 条件类型 描述 引用系统用例 前置条件 1. 离线登录成功 后置条件 1.4 操作用户角色 操作用户 描述 营业员 可查询、录入、修改收货客户信息 1.5
 * 界面要求 1.5.1 表现方式 Web方式 1.5.2 界面原型 1.5.3 界面描述 营业员点击运单开单，进入运单开单界面。 本界面为录入收货客户信息。
 * 界面为信息录入界面包括：手机、电话、客户名称、 客户编码、收货联系人（收货部门）、收货人地址； 1. 手机：收货人手机号码； 2.
 * 电话：收货人电话号码，可以添加多个； 3. 收货联系人：收货客户的客户姓名； 4. 收货人地址：收货客户的详细联系地址， 支持国家行政区域自动过滤；
 * 1.6 操作步骤 序号 基本步骤 相关数据 补充步骤 1 录入手机号码 1. 规则-请参见系统规则SR1； 2 录入电话号码 1.
 * 规则-请参见系统规则SR1； 3 录入收货联系人（收货部门） 规则-请参见系统规则SR3、SR4； 4 录入收货人地址 1. 规则-请参见系统规则SR2；
 * 1.7 业务规则 序号 描述 SR1 1. 收货客户手机号码及固定电话至少提供一个， 手机号码只能为数字并且为11位，固定电话号码只能为数字，
 * 且可添加多个；添加多个时，必须用“，”或“、”或“/”分开； 固定电话号码字段也可以录入手机号； SR2 1. 客户详细地址必填至乡/镇，
 * 且乡镇下一级内容不能为空； SR3 1. 当“运单开单”中的“开单提货方式”为“内部带货自提”时， “收货联系人”字段更改为“收货部门”； SR4 1.
 * 若为公司内部带货，则收货客户信息中的收货部门名称必须与OA系统中组织架构名称保持一致； SR5 前提：收货人信息都已填充完毕，再进行手机号，
 * 电话号码修改： ① 如在三月记录中，是否再次弹出框选择记录后覆盖原来的信息， 不选择只修改手机号or电话号码，发货客户其他信息不置空 ②
 * 如不在三月记录中，是否只修改手机号或电话， 发货客户其他信息不置空------- 1、再次弹出框选择记录后覆盖原来的信息2、
 * 如果带出时是CRM客户，那么要删除客户编码和客户名称后才能够修改联系人信息，
 * 如果带出来不是，那么可以直接修改，那么修改电话号码和手机号，带出的信息都会覆盖
 * 
 * 
 * 录入发货客户信息（离线）SUC业务规则
 * 
 * 1.1 相关业务用例 BUC_FOSS_5.60.05_520 确认承运信息 1.2 用例描述 营业员在网络不通时，通过本用例录入发货客户信息。 1.3
 * 用例条件 条件类型 描述 引用系统用例 前置条件 离线登录成功； 后置条件 1. 运单收银 2. 录入增值服务信息 1.4 操作用户角色 操作用户 描述
 * 营业员 可查询、录入、修改发货客户信息 1.5 界面要求 1.5.1 表现方式 Web方式 1.5.2 界面原型 1.5.3 界面描述
 * 营业员点击运单开单，进入运单开单界面。 本界面为录入发货客户信息。 界面为信息录入界面：包括：手机、电话、 发货联系人（发货部门）、发货人地址； 1.
 * 手机：发货人手机号码； 2. 电话：发货人电话号码，可以添加多个； 3. 发货联系人（发货部门）：发货客户的客户姓名，
 * 当“运单开单”中的“开单提货方式”为“内部带货自提”时， “发货联系人”字段更改为“发货部门”； 4. 发货人地址：发货客户的详细联系地址，
 * 支持国家行政区域自动过滤； 1.6 操作步骤 序号 基本步骤 相关数据 补充步骤 1 录入手机号码 1. 规则-请参见系统规则SR1； 2 录入电话号码
 * 1. 规则-请参见系统规则SR1； 3 录入发货联系人（发货部门） 1. 规则-请参见系统规则SR2、SR3； 4 录入发货人地址 1.
 * 提供下拉框选择输入，系统自动过滤输入的行政区下一级行政级的字段； 2. 规则-请参见系统规则SR4； 1.7 业务规则 序号 描述 SR1 1.
 * 发货客户手机号码及固定电话至少提供一个， 手机号码只能为数字并且为11位，固定电话号码只能为数字， 且可添加多个,
 * 添加多个时，必须用“，”或“、”或“/”分开；固定电话号码字段也可以录入手机号； SR2 1. 当“运单开单”中的“开单提货方式”为“内部带货自提”时，
 * “发货联系人”字段更改为“发货部门”； SR3 1. 若为公司内部带货，则发货客户信息中的发货部门名称必须与OA系统中组织架构名称保持一致； SR4 1.
 * 客户详细地址必填至乡/镇，且乡镇下一级内容不能为空； SR5 1．焦点到联系人文本框后，下个焦点直接跳过地址分段输入框，到下个控件
 * 
 * 
 * @author foss-jiangfei
 * @date 2012-11-13 下午4:20:08
 * @since
 * @version
 * 
 *          录入货物信息SUC业务规则 1. 若货物为违禁品，则系统自动提示“货物为违禁品，不可开单！”； 2.
 *          若货物为贵重物品，则系统自动勾选“贵重物品”，且不可修改； 3.
 *          若货物为限保物品，则系统自动限定保价金额，且不可修改，并提示“货物为限保物品”； 4.
 *          违禁品、拒收品、贵重物品、限保物品（含保价金额上限）具体类型可在系统中进行配置； 1. 货物重量单位为千克； 2.
 *          运单开单时，货物的件数、重量及体积文本框是必填项，默认值为空； 3. 件数只能是大于等于1的整数，重量及体积只能大于0。 4.
 *          体积、重量这种过程数据保留两位小数 1. 尺寸录入文本框，支持'长*宽*高*件数+长*宽*高*（即多个尺寸相加）的计算； 2.
 *          如果件数是1，则不强制在录入时要“*1”； 3.
 *          货物尺寸为计算器输入，输入的尺寸可以进行加减，例如：1*1*1*5+2*2*2*3-0.5*0.5*0.5， 显示为输入文本； 4.
 *          尺寸计算单位为厘米，尺寸计算出数据后转换单位为立方米后，在货物体积中显示数据；
 *          例如：尺寸录入为：50*50*20（其中20为件数），则体积显示数据为：0.05； 5.
 *          体积为空时，录入尺寸后，填充体积。当尺寸修改时，体积随之变处。当修改体积时，尺寸不变化。 6.
 *          体积初始值为“0”，仍保持必填，操作员根据实际情况改，选择木架或木箱或两者都选择后则该值不能为0 1. 货物体积单位为立方米； 2.
 *          营业员可以修改通过尺寸计算器计算得出的体积数据； 3.
 *          系统设置货物重量体积比区间值（该值由基础资料配置），在运单提交时，系统自动对重量体积比进行校验： 即重量体积比X=重量/体积； 3.1
 *          当X不在设置的区间中，弹出提示“请确认录入的重量体积是否准确！”；
 *          （该弹窗有两个按钮：确定、取消）点击确定时，弹出确认运单信息界面；点击取消，点返回运单录入界面； 3.2
 *          当X在区间中，无提示；直接进入确认运单信息界面； 4. 录入重量体积后，系统校验单票的重量体积及单件（平均单件）的重量体积是否
 *          满足“修改-查询行政组织业务属性”基础资料中的单票和单件重量体积限制；只要该四项中有
 *          一项不满足，则提示“XX超出提货网点限制，请重新选择提货网点！”； 1.
 *          货物包装总件数小于等于货物总件数，如果大于总件数，提示：“包装件数不能大于总件数”； 1.
 *          当木包装件数大于等于1时，系统校验出发城市和对应目的站的走货路由中是否有有打木架功
 *          能的部门，若有，则提醒营业员“是否收入代打木架？”，是，则进入场代打木架信息录入界面”，
 *          并显示第一个有打木架功能的部门名称；若走货路由中无有打木架功能的部门，则不提示“是否收入代打木架？”； 2.
 *          当走货路由中有有打木架功能的部门为多个时，只显示系统路由中第一有有打木架功能的部门， 且不可修改； 1.
 *          运输类型为汽运时，货物类型为唯一选择项；即，非A即B；默认不可勾选，只有当走货路由经过
 *          特定的城市时需要录入货物类型,特定城市可在系统中进行配置； 2.
 *          运输类型为空运时，货物类型为下拉选择框，默认显示为普货，目前只有这一个分类，该类型可做配置； 1. 贵重物品判断规则： a.
 *          单票单件货物，体积≤0.05立方且保价声明价值≥1万元； b. 单票多件货物，平均单件体积≤0.2立方且平均单件保价声明价值≥1万元；
 *          （注：平均单件体积=开单总体积÷开单件数，平均单件保价=开单保价声明价值÷开单件数） c. 高保价货物，单票货物保价≥10万元；
 *          满足以上任意一个条件时，系统将判定该票货物为贵重物品并自动勾选"贵重物品"复选框，且为灰色，
 *          不可编辑；不满足以上条件时，该复选框为可编辑状态，用户可根据实际情况自行选择是否勾选； 2.
 *          若"贵重物品"复选框被勾选，则在【储运注意事项】中自动加入提示记录"贵重物品"字段，
 *          若该货物为贵重物品时，"储运注意事项"中信息显示优先级为：贵重物品＞其他； 1.
 *          录入的打木架货物件数和打木箱件数之和必须大于等于录入的木包装件数； 2.
 *          系统默认标签流水号前X的货物为需要代打木架货物，X等于录入的“打木架货物件数”和“打木箱货物件数”之和； 3.
 *          营业员在打印标签时，按流水号先贴要打木架或打木箱的货物； 1.
 *          录入的打木架货物体积和打木箱货物体积之和乘以1.4必须小于等于货物总体积；该1.4为打木架体积计算系统， 可配置； 2.
 *          营业部开单时按打完木架后的包装开，即包装中含“木架/木箱”，开单件数为货物打木架/木箱前的实际件数
 *          （防止丢货），尺寸和重量按照以下公式计算： 1.1
 *          整票货物代打时：开单体积=代打货物体积*1.4；开单重量=所有货物重量+代打货物体积*42； 1.2
 *          部分货物代打时，开单体积=代打货物体积*1.4+未打木架货物体积；开单重量=所有货物重量+代打货物体积*42。
 *          即：营业部按照代打货物未打木架之前体积的1.4倍来开单收费，重量另加，单票中未打木架的货物的体积和重量不变； 1.3
 *          例如：一票货物需全部代打，货物体积为1个方，重量为100KG，则开单体积为1.4个方，
 *          开单重量为100+1*42=142KG，收取客户包装费为150*1.4=210元； 1.4
 *          需要加托时，仍按照50元/个另外收取费用，托的重量和体积不再另加；营业部不需要再更改由于打 木架引起重量和体积的变化； 3.
 *          打木架要在“对内备注”中备注“代打木架/木箱”，特殊要求（特别是合打情况）必须在对内备注
 *          和A4纸上都注明，例如：货物1、2、3合打成一件等； 4.
 *          开单件数为代打木架前货物实际件数，包装为打木架后的包装，打木架后件数发生变化后，需及时更改件数；
 * 
 * 
 *          录入运输信息SUC业务 规则 1. 收货部门默认为操作者所在的部门，不可修改； 2.
 *          若操作者部门为集中开单部门时，则收货部门可修改，其选择部门只能为开单组服务的集中接货区域营业部；
 *          且其进进入运单开单界面时，系统自动默认收货部门为上一次开单的收货部门； 1. 默认显示精准； 1.
 *          根据部门的性质或所在城市确定部门所作业务的性质，如有些部门可做所有运输性质的业务，
 *          部分部门无法做精准业务，所有规则根据营业部业务管制确定（根据出发城市、到达城市确定部门可做的业务性质，
 *          所有数据读取自营业部业务管制基础资料）； 1. 当运输性质为空运时，提货方式有：自提（不含机场提货费）、免费自提、机场自提、免费送货、
 *          送货进仓、送货上楼、送货（不含上楼)；默认为自提（不含机场提货费）； 2.
 *          如果客户是CRM中的合同客户，在开单时提货方式选项中增加"免费送货"选项，免费送货送货费为0（不可修改）； 3.
 *          当运输性质为精准、普货、偏线时，提货方式有：自提、免费送货、送货进仓、送货上楼、 送货（不含上楼)、内部带货自提；默认为自提； 1.
 *          当运输性质为空运时，开单提货网点显示空运代理网点及公司可做空运的自有网点； 2. 当运输性质为偏线时，提货网点只显示偏线代理网点； 3.
 *          当运输性质为精准、普货时，提货网点显示我司所有可所到达的网点； 1.
 *          当运输性质为空运，且提货方式为机场自提时，增值服务的其它费用中可添加对就有规则的费用
 *          （暂定方案：对于单独开单的可做增值服务费用添加。若以后在产品定义中区分了单独开单和合大票，则另考虑）； 1.
 *          提货方式为机场自提时，代收货款设置为0且不可编辑，不能开单含到付款，，付款方式不能开到付；
 *          否则，提示：“提货方式为【机场自提】时，到付金额必须为0，付款方式不能为到付”； 2.
 *          提货方式为内部带货自提时，只能填写发货人收货人信息和货物信息，所有涉及金额的控件均为0， 收货人和发货人只能为OA系统中部门； 1.
 *          提货方式为自提（不含机场提货费）、免费自提、内部带货自提时，只显示可做自提业务的网点； 2.
 *          提货方式为送货时，只显示可做送货业务的网点； 1. 目的站可由收货客户地址的城市（即收货客户地址中的“市”）生成，也可手工录入； 2.
 *          系统自动过滤只显示目的站城市符合条件的网点信息； 3. 选择确定提货网点信息后，系统自动生成对应网点的目的站名称于目的站框内；
 *          网点目的站读取对应的网点目的站基础资料； 4. 在网点目的站基础资料中有‘取消到达日期’，如果当前日期在‘取消到达日期’之前，
 *          那么提示“xx营业部将于xx年xx月xx日临时取消到达，届时货物将转至xx营业部，请做好客户解释工作！”
 *          （其中第一个xx营业部，为当前营业部、第二个xx营业部为网点目的站基础资料中的‘转货部门‘， xx年xx月xx日为‘取消到达日期’）
 *          5. 录入重量体积后，系统校验单票的重量体积及单件（平均单件）的重量体积是否满足
 *          “修改-查询行政组织业务属性”基础资料中的单票和单件重量体积限制；只要该四项中有一项不满足，
 *          则提示“XX超出提货网点限制，请重新选择提货网点！”； 1.
 *          当通过运输性质、提货方式和目的站过滤的提货网点唯一时，直接显示提货网点名称； 1.
 *          当勾选上门接货时，自动显示文本框，录入接货司机工号，接货费数字框可录入，手写现付金额，可编辑 2.
 *          当不勾选上门接货时，接货费清0变灰且不可录入，手写现付金额变灰，不可编辑 1.
 *          当录单部门为集中开单部门时，自动勾选上门接货，且不可修改； 2. 上门接货默认不勾选，可修改；3. 1.
 *          对外备注可多选，选择的项目信息依次显示在储运注意事项中；默认为空； 2. 当选择空时，则其它所有选项自动不勾选； 3.
 *          对外备注已选择录入后，若再选择空，则清空已选择的所有对内备注； 1.
 *          储运注意事项=对外备注&对内备注&大车直送（若勾选大车直送），各字段以“；”分开； 2. 对外备注永远在储运注意事项的最前面； 1.
 *          当运输性质为精准、普货、偏线时，显示配载线路；系统自动根据营业部所在城市和到达目的站 匹配走货线路基础资料，生成预配线路，且不可修改；
 *          2. 当运输性质为空运时，显示配载航班，包括：早班、中班、晚班、中转航班；默认为空； 1.
 *          系统自动匹配始发配载部门基础资料，通过配载类型来判断配载部门； 1.
 *          如果提货网点为自有网点时，最终配载部门为提货网点名称；如果提货网点不是自有网点，
 *          则最终配载部门为外发代理网点的管理部门；（参考基础资料：外发代理、部门基础信息基础资料）； 2.
 *          当运输类型为空运时，最终配载部门可编辑，且列举对应收货部门可走空运货的空运总调，
 *          默认显示为空；若对应收货部门可走空运货的总运总调唯一时，则直接显示； 1. 预计出发时间在运单提交时进行判断填充； 2.
 *          预计出发时间适用于运输类型为“精准”； 3. 预计出发时间=预计出发日期,准点出发时间。【格式如：2011-6-28
 *          ,12:00:00】 （部门对应的“准点出发时间”，数据取自基础资料：经营-运作基础资料）； 4.
 *          如果开单当前时间在准点出发时间前，则预计出发日期=开单日期；否则，预计出发日期=开单日期+1； 5.
 *          当运输性质为普货、偏线时，则预计出发日期=开单日期+1； 1. 预计提货/派送时间适用于运输类型为“精准”； 2.
 *          提货方式为“自提”时，若部门对应的“是否当天出发”为“是”，
 *          则预计提货/派送时间=预计出发日期+到达营业部承诺天数：到达营业部承诺时点；
 *          否则，预计提货/派送时间=预计出发日期+到达营业部承诺天数-1：到达营业部承诺时点；
 *          （部门对应的“是否当天出发”，数据取自基础资料：经营-运作发车标准； “到达营业部承诺天数”和“到达营业部承诺时点”
 *          ，数据取自基础资料：专线-城市承诺时间标准；） 3. 提货方式包含为“送货 ”时，若部门对应的“是否当天出发”为“是”，
 *          则预计提货/派送时间=预计出发日期+到达营业部承诺天数+派送承诺需加天数：
 *          派送承诺时点；否则，预计提货/派送时间=预计出发日期+派送承诺需加天数-1：
 *          派送承诺时点；（部门对应的“是否当天出发”，数据取自基础资料：经营-运作发车标准；
 *          “到达营业部承诺天数”、“到达营业部承诺时点”、“派送承诺时点”、“派送承诺需加天数”， 数据取自基础资料：专线-城市承诺时间标准；）
 *          1. 大车直送默认不勾选，且不可修改； 2. 当单票货物重量超过8吨或体积大于25方时，系统提醒“是否需要大车直送？”；
 *          营业员确定后，自动勾选大车直送，且大车直送变为可修改状态； 3. 勾选大车直送时，在储运注意事项中增加大车直送显示；不勾选时，不显示；
 *          1、检验单号是否唯一（有效状态的运单唯一，中止/逻辑删除等的运单不参与检查），
 *          如果唯一系统不做操作，如果不唯一，系统提示“XX单号已经使用，请重新输入单号”
 *          2、新增一条业务规则：在提交运单之前，若相邻两次输入的单号（两次单号分别为A与B且单号输入合法）
 *          差别较大时，系统给予用户友好提示避免录错单号，但不限制单号的输入。具体规则为：
 *          1）若前后两次输入的单号位数相同，当|A-B|≥100时系统给予提示； 2）若前后两次输入的单号位数不同，系统给予提示；
 *          3）提示信息为：前后两票单号相差过大，请检查所输单号是否是本部门所属单号！
 * 
 **          增值服务SUC规则如下 1.1 相关业务用例 BUC_FOSS_5.20.30_510 确认承运信息 1.2 用例描述
 *          营业员通过本用例录入增值服务信息。 1.3 用例条件 条件类型 描述 引用系统用例 前置条件 后置条件 1.4 操作用户角色 操作用户
 *          描述 营业员 可查询、录入、修改增值服务信息 1.5 界面要求 1.5.1 表现方式 Web方式 1.5.2 界面原型 1.5.2.1
 *          录入增值服务信息 1.5.2.2 查询发货客户代收货款退款联系人 1.5.2.3 查询其它费用 1.5.3 界面描述
 *          营业员点击运单开单，进入运单开单界面。 本界面为录入增值服务信息。 界面主要分为二个部分：录入增值服务、查询其它费用。 1.
 *          录入增值服务 录入增值服务分为三个部分：录入增值服务信息界面、录入其它费用列表、查询发货客户代收货款退款联系人； 1.1
 *          录入增值服务信息界面 录入增值服务信息界面包括： 1.1.1 保价声明价值； 1.1.2
 *          保价费率：保价费率可由基础资料配置，可按出发城市区域，出发营业部等； 1.1.3 保价费； 1.1.4 代收货款； 1.1.5
 *          代收费率； 1.1.6 代收手续费； 1.1.7 退款类型：包括三日退、退日退、审核退，默认三日退为空； 1.1.8 收款人姓名；
 *          1.1.9 收款人帐号； 1.1.10 包装费； 1.1.11 装卸费； 1.1.12 送货费； 1.1.13 其它费用合计；
 *          1.1.14 接货费； 1.1.15 返单类别：包含“无需返单”、“客户签收单原件返回”、“客户签收单传真返回”、
 *          “运单到达联传真返回”包括无需返单、原件签收单返回、传真件签收单返回、扫描件返回，默认无需返单； 1.1.16 预付费保密； 1.2
 *          录入其它费用列表 录入其它费用列表包括： 1.2.1 费用名称； 1.2.2 费用金额； 1.2.3 新增其它费用：功能按钮；
 *          1.2.4 删除其它费用：功能按钮； 1.3 查询发货客户代收货款退款联系人 1.3.1 操作列； 1.3.2 开户银行； 1.3.3
 *          收款人姓名； 1.3.4 银行帐号； 1.3.5 备注信息； 1.4 录入包装费 2. 查询其它费用
 *          查询其它费用分为四个部分：其它费用列表 、功能按钮； 2.1 其它费用列表： 其它费用列表包括： 2.1.1 名称； 2.1.2
 *          归集类别； 2.1.3 描述； 2.1.4 金额； 2.1.5 金额上限； 2.1.6 金额下限； 2.1.7 是否可修改； 2.1.8
 *          其它费用可基础资料配置，并支持是否启用和是否可见的维护； 2.2 功能按钮： 2.2.1 查询：包括查询条件：名称； 2.2.2 确定；
 *          2.2.3 取消； 1. 限保物品（例如：“陶瓷”、“门窗”等）默认保价1000不可修改,
 *          且保价费率可手动调整；（限保物品从限运物品基础资料中获取）；非限保物品的保价费率不可修改； 2.
 *          实际保险费小于最低保费的按最低保费收取； 3. 保价费 = 保价申明价值*保价费率，不可修改； 4.
 *          保价申明价值默认为3000，可以修改；保价声明价值不封顶； 5. 精准（长途）、普货（长途）、偏线，最低一票8元；普货（短途）、
 *          精准（短途）最低一票6元；空运最低一票10元；所有运输方式保价超过最低均按0.4%收取
 *          （数据读取自保价设置基础资料）；长短途数据读取计价基础资料； 6. 实际保价费小于最低保费的按最低保费收取； 7.
 *          保价费率首先是配置的标准费率。当有区域保价费率时，以区域保价费率为准。
 *          当客户为合同客户时，则以合同签订为准。所有的保价费率以读取的为准，不可修改。 限保物品的保价费率同样不可修改
 *          行政组织业务属性-营业部信息中增加增值服务（返回签单、货到付款、代收货款）选项，
 *          开单是否可以进行返回签单、货到付款、代收货款需要根据到达部门属性 是否可以（返回签单、货到付款、代收货款）来决定 1.
 *          如果不是CRM客户或者派送网点基础资料中代收货款属性为”否”，代收货款设置为0且不可编辑； 2.
 *          如果是CRM客户、对应派送网点基础资料中代收货款属性为”是”且CRM中有账户信息，
 *          代收货款可编辑，且可以选择所有的退款类型，若CRM中若无账户信息，则退款类型只能选择审核退 3. 开单时系统默认代收货款为空； 4.
 *          代收货款栏默认为空，如果没有代收货款，则要求输入0；否则，进行提示：“请确认该单没有代收货款，
 *          如无，请输入数字0”；当代收货款大于0时，输入后，对于选择的退款类型，有如下限制： 3.1
 *          三日退：在收到客户代收货款后第三天给客户打款。 3.1.1 默认退款类型为三日退； 3.1.2 代收10000元以下费率0.5%，
 *          10000元以上费率0.4%；最低10元/票，最高100元/票；
 *          有部分城市三日退费率为0.（通过基础资料“代收货款费率”及“特殊城市与部门代收货款费率”实现）。 3.2
 *          审核退：收到客户代收货款，出发部门审核后，给客户打款。 3.2.1
 *          代收10000元以下费率0.5%，10000元以上费率0.4%；最低10元/票，最高100元/票（
 *          通过基础资料“代收货款费率”及“特殊城市与部门代收货款费率”实现）。 3.2.2
 *          选择审核退时，客户收款信息体现在开单界面，若无账号时可以提交运单后再走账号修改流程进行补充。 3.3
 *          即日退：在收到客户代收货款后24小时到账。 3.3.1
 *          代收手续费率1%，最低20元/票，最高200元/票；有部分城市特殊（通过基础资料“代收货款费率”及“特殊城市
 *          与部门代收货款费率”实现）。 3.3.2 必须先录入客户收款银行信息，提交时，银行信息不能为空； 3.3.3
 *          只支持4个银行：农行、工行、建行、招行；否则，给予提示信息； 5.
 *          限制代收货款金额不能小于10元，可以等于10元；但可以为0；该数字“10”可由基础资料配置； 6.
 *          网上订单导入开单时，代收货款金额读取网上订单的代收货款金额，有数据时不可对代收货款进行修改，
 *          只可起草出发更改进行修改；若网上代收货款为0 ，系统可支持修改代收货款金额； 7. 默认的代收费率由基础资料配置； 1.
 *          保价费和代收货款费用无法编辑更改，只能更改保险声明价值和代收货款金额； 1.
 *          代收退款收款人姓名只能为发货客户绑定的收款人姓名和帐号，且只能选择，不能修改；
 *          当退款人姓名和帐号唯一时，直接显示；（数据读取CRM客户信息资料（退款帐户信息）） 2.
 *          CRM客户信息资料的要先在CRM中录入客户退款帐户信息，且第一次在我司办理代收货款业务时， 退款类型只能为审核退； 3.
 *          同一客户多个银行信息的显示问题：当有两个或以上账号时，弹出账号信息（包括开户银行、收款人、
 *          账号、备注），选中其中的一条银行信息记录后，账号和收款人信息显示在开单界面对应的位置； 1. 包装费默认为0，可手工修改； 2.
 *          当录入有打木加信息时，默认显示包装费=max（150*打木架货物体积，30）+max（300*打木箱货物体积，40），
 *          且可修改，修改的金额只能大于等于默认显示金额；其中150、30、300、40为打木架单价（元/方）、打木架最低一票、
 *          打木箱单价（元/方）、打木箱最低一票，可由基础资料配置； 1. 装卸费金额需满足不能超过纯运费的15%（特殊部门为35%）。
 *          即：装卸费（M）<=纯运费（C0）*15%（特殊部门为35%）=【重量/体积】（Z）*原费率（Q0）*15%（特殊部门为35%），
 *          （其中，原费率Q0为：公布价）。 当装卸费大于零时，开单显示费率（Q）=（M+CO*优惠折扣）/（优惠折扣*Z） ，
 *          开单显示运费（C）=Q*Z=C0+M 。且此显示费率不可更改；（对于专线的散客而言） 2.
 *          如果该客户为月结客户、整车、中转下线或偏线，则原费率（Q0）为装卸费前的费率，为系统默认的公布价。
 *          开单最终显示费率（Q）=（M+CO*优惠折扣）/（优惠折扣*Z） ，开单显示运费（C）=Q*Z=C0+M ； 3.
 *          当修改除装卸费影响外有影响费率的地方时（如目的站更改、重量和体积变化影响到费率），
 *          需先清空装卸费为零，然后再修改数据。如：月结客户与非月结客户、整车与非整车、目的站、重量、体积； 4.
 *          当装卸费由M1修改为M2时：先判断M2是否满足公式：M2<=(Q1-M1/Z）*Z*15%（特殊部门为35%）。
 *          如果公式成立，则最终显示费率Q2=Q1-M1/Z+M2/Z，最终显示运费（C2）= Q2*Z。否则，清空装卸费为零，
 *          最终显示费率Q2=Q1-M1/Z，最终显示运费（C2）= Q2*Z。（其中Q1是装卸费M1时的费率,Z为重量/体积）； 5.
 *          系统如果是运费最低一票，要求装卸费=0，即装卸费不允许修改。（只限制配载类型为专线的，包括月结）； 6.
 *          对于显示费率不等于显示费率乘以重量的问题，要求如下： 6.1.
 *          若该单含装卸费且折算后的费率（A）的有效小数位为小于或等于两位小数，则显示费率（Q）=费率（A）。 且显示运费等于该显示费率*重量；
 *          6.2. 若该单含装卸费且折算后的费率（A）的有效小数位大于两位小数，令费率（B）=费率（A）
 *          的取前2个小数位的值（注：直接截取A的值，不四舍五入）。则显示费率（Q）=费率（B）+0.01。 显示运费等于该显示费率*重量； 7.
 *          只要含与不含装卸费两者有交叉的，均以不含为准； 8. 装卸费特殊部门表： （建议：做为可配置的基础数据表） 9.
 *          2012年12月1日开业的部门不能开装卸费 10. 如果订单渠道为阿里巴巴或者是月发越送属性客户不可开装卸费 11.
 *          是否可以开装卸费的依据取决于部门的业务属性（即部门属性基础资料中增加是否可开装卸费的字段）。 12.
 *          装卸费上限由增值服务配置基础资料实现（在产品API中体现）。 1.
 *          送货费默认不可改小，但可改大。除了月结客户外，只能对系统计算出的送货费取值进行上调，
 *          不能下调。当送货费取值大于最高送货费（基础资料配置）时，送货费自动跳改为最高送货费值， 但用户可以上调送货费； 2.
 *          通过送货费基础资料来实现： 2.1. 若提货方式为送货进仓，开单送货费直接读取送货进仓送货费基础资料，取值终止； 2.2.
 *          若提货方式为送货上门，则开单的送货费取值顺序：特殊区域送货费优于全国标准送货费；
 *          （即：先到特殊区域送货费基础资料中取值，若取到值，取值终止；否则，再到全国标准送货费基础资料取值， 取值终止。） 2.3.
 *          特殊区域和全国标准送货费取值规则：送货费=货物重量*送货费率； 2.3.1
 *          先判断开单体积在哪个体积区间，筛选出符合条件的所有记录，再判断开单重量在已被体积筛选
 *          出来的记录中的哪个重量区间，来确定是哪一条记录。然后再根据费率计算，计算出来的值与该条的最低
 *          送货费进行比较，若小于最低送货费时，就取最低送货费，取值终止；若大于最低送货费且小于最高送货费时，
 *          就取计算出来的值，取值终止；若大于最高送货费时，就取最高送货费，取值终止。 2.3.2 标淮派送范围收取送货费标准： 货物重量 标准
 *          0-300KG 55元/票 301-500KG 0.2元/KG 501KG或2.5立方米以上 100元/票，不封顶 2.3.3
 *          当送货费取值小于最高送货费时，开单送货费不可以更改；当送货费取值高于最高送货费时，
 *          开单送货费可手动更改，如果手动更改的值小于最高送货费时，系统弹出提示框：“该票送货费不得低于 【最高送货费】” 2.3.4
 *          仅使用于汽运专线，对“空运”、“偏线”以及“中转下线” 的不受以上收费的限制。 2.3.5
 *          “月结”客户的送货费收费按以上计算出默认值，但可以修改。（送货费不受限制。可向上修改也 可以向下修改，最小为0） 2.3.6
 *          除月结客户的属性外其它所有情况的送货费不可向下修改，只能向上修改 2.3.7 最高送货费做基础资料配置； 3.
 *          非标准派送范围加收操作费标准： 3.1 超远加收送货费标准： 距离（公里） 30-50 50-100 100-150 加收金额（元）
 *          50 100 150 3.1.1 距离为客户所在区域与公司最近网点的距离（距离以ERP谷歌地图测量的导航距离为准）； 3.1.2
 *          客户所在地30公里范围内如果有公司的营业网点，无论是否做派送，该区域均不能收取超远加收送货费； 3.1.3 非标准派送的费用添加无上限
 *          3.2 特殊区域（进仓）： 3.2.1 特殊区域类型：大型超市和商场、大型工厂（需提供进仓编号）； 3.2.2
 *          收费标准：进仓费实报实销，并加收150元操作费； 4. 区域送货费限制： 4.1
 *          当开单提货网点的所在城市或区域为“XX”、提货方式为：送货”XX”(XX待定，但前提是：提货方式必须为送货)时，
 *          送货费固定为XX元，且不可修改；财务成本提取为XX元。（该类型城市或区域、送货费固定标准、成本提取标准可配置） 4.2
 *          当开单提货网点为XX营业部时，开单送货费为XX元，内部成本提取为XX元（目前该方案营业部：深圳华强苏发大厦
 *          营业部、深圳华强钟表市场营业部）。（该类营业部类型、送货费固定标准、成本提取标准可配置） 4.3
 *          内部带货、空运、偏线及中转下线不受上述需求的限制。 5. 限制大件大票货到达“XX部门”或“XX区域”或其它限制类型区域： 5.1
 *          当开单提货网点为“XX部门”或“XX区域”或其它限制类型区域，判断单件重量是否超过XXKG，
 *          或体积是否超过X立方，是的话提示：“单件超过XKG或单票超过X立方，请开到XX派送部或其它内容”。
 *          （单件重量＝重量/件数）。【即开单限制：可通过到达部门限制基础资料实现】 5.2
 *          当开单提货网点为“XX部门”或“XX区域”或其它限制类型区域时，其他费用中的“送货上楼费”屏蔽或显示但不可选择； 5.3
 *          若“XX区域”或其它限制类型区域再开派送部，适用以上需求； 5.4 空运、偏线及中转下线不受上述需求的限制； 5.5
 *          内部带货受上述需求的限制； 5.6 “XX部门”或“XX区域”或其它限制类型区域及判断规则由基础资料配置； 1.
 *          开单时系统默认其他费用为综合服务费和燃油附加费且不可移除,其他费用由手动添加，
 *          费用根据基础资料中的内容进行读取，根据开单内容自动添加；（可基础资料配置） 2.
 *          运输类型为“精准（长途）、普货（长途）、偏线、空运”时，燃油附加费默认为4元；
 *          运输类型为“普货（短途）、精准（短途）”时，燃油附加费默认为2元；均不可修改；（可基础资料配置） 3.
 *          综合服务费：（费用金额由基础资料配置） 3.1 综合服务费默认为2元不可修改、剔除； 3.2 月结客户可以删除2元的综合服务费； 3.3
 *          淘宝、阿里巴巴订单导入开单时，系统自动不收取2元的综合服务费； 4. 燃油附加费：（费用金额由基础资料配置）
 *          运输类型为“精准（长途）、普货（长途）、偏线、空运”时，燃油附加费默认为4元；
 *          运输类型为“普货（短途）、精准（短途）”时，燃油附加费默认为2元；均不可修改； 5.
 *          其他费用中“是否可修改”打勾时，对应费用类型的金额可以金额上限和金额下限之间修改； 6.
 *          其他费用合计等于其他费用列表中各项费用数据之和； 1.
 *          原件签收单返回类：系统默认收取客户15元/票，可更改收取客户20元/票。偏线不允许做签收单； 2.
 *          空运、偏线和中转下线的“返单类型”不可选择； 3.
 *          若有选择，则返单费用信息自动显示在其他费用信息列表中，可以其它费用列表中修改签收费用； 4.
 *          如果选择有返单类型，系统会自动生成一条签收单记录，记录信息包含：运单号、运单ID、库存状态、
 *          当前操作部门（运单开单时，是填开部门）、是否签收、是否作废、出发部门(运单开单出发部门)、 签收单类型、签收状态； 5.
 *          月结客户允许修改对应返单类别的返单金额（区间为对应返单类别的上限值和下限值），
 *          非月结客户只能选择对应的返单类别的默认金额，不能修改；返单费用项目不能删除 1.
 *          运单新增时，运输性质选择空运、提货网点非我司自有网点时，不能选择预付运费保密； 2.
 *          已开启预付运费保密运单提交后，始发更改中预付运费保密可以取消。未开启预付运费保密运单提交后，
 *          若货物未有非本部门入库操作，则始发更改中预付运费保密可选择；若货物有非本部门入库操作，
 *          则始发更改中预付运费保密否可选择，若要更改，则必须返货后，作废重新开单； 3.
 *          运单保存未提交时，可以在调出运单的时候，预付运费保密自由选择； 4.
 *          已开启预付运费保密的运单，始发更改中预付更改到付或到付更改预付，涉及预付运费有变动时， 不影响预付费保密功能； 5.
 *          开启预付运费保密，预付运费不能为0，否则不能保存、提交； 6. 开单付款方式为临时欠款时，预付运费保密选项不可选择，其他付款方式都行；
 *          7. 开启预付运费保密，运单出库后，始发更改中运输性质由汽运专线更改为偏线、空运时， 必须取消预付运费保密后才能提交； 8.
 *          预付运费保密开启时，非出发部门用户综合查询预付运费不显示，即“预付金额”不显示； 9.
 *          预付运费保密开启后，到达联打印时，费率、运费、其他服务费用明细、费用合计中的现付总计均不显示； 1. ； 2.
 *          1）开单总费用、预付金额、到付金额，取整，四舍五入；
 *          2）开单所有录入的金额数值，最多可录入到小数点后两位小数，无效的0省略不显示，如100.00显示100, 100.10显示100.1；
 *          3）开单总费用、预付金额、到付金额之外的，即中间环节的金额保留两位小数，依据四舍五入规则。
 *          4）费率最多可保留两位小数，小数点多于两位时，全进1。比如，系统折算生成的费率为1.201时，显示为1.21。 1. 接货费只能录入数字
 *          1）限保物品不限制保价金额，限制保价费率，增值服务部门可以配置对应限保物品的保价费率； 2）限保物品的保价费率通过基础资料进行配置；
 *          3）取消偏线、空运最高保价5000元的限制； 2、装卸费开单运费占比及特殊部门装卸费需做成基础资料配置
 *          3、"其它费用"中的费用名称对应的归集类别的费用划分到增值服务对应的费用中，同时需增加归集类别的配置资料。
 *          4、超远派送送货标准的基础资料是需要配置的；超远派送费用无上限限制
 * 
 * 
 *          * 运单收银SUC业务规则 1. 计费类型分为重量计费、体积计费，由系统自动生成，不可修改；默认重量计费； 2.
 *          对于一票货物系统分别按重量和体积分别计费并取大优先的原则计费； 若按重量计费运费较按体积计费运费较高，则计费类型为重量计费；
 *          若按体积计费运费较按重量计费运费较高，则计费类型为体积计费； 3. 运输类型为汽运时,计费重量为空，不可修改；
 *          4.运输类型为空运时计费重量应为重量和体积*1000000/6000进行对比，取大； 1.
 *          费率为对应计费类型、目的站、提货网点及运输类型的走货单价； 2. 目的站、提货网点及运输类型确认后，即可自动显示对应计费类型的费率；
 *          （来自价格基础资料） 3. 费率可以保留到小数点后2位；运费、预付金额、到付金额为整数， 按照四舍五入的原则； 1.
 *          公布价运费、增值服务费用、优惠合计需通过点击计算费用获取； 2. 当提货网点信息未录入，不可计费运费；当录了提货网点，
 *          货物的重量和体积以及其他服务费用录入不完整时， 点击计算费用，得到当前填写的信息费用信息； 3.
 *          公布价运费（即重量、体积计费的运费）=每公斤单价/每方价格与货物实际重量/体积的乘积，
 *          对于一票货物系统分别按重量和体积分别计费并取大优先的原则计费；（来自价格基础资料） 4.
 *          增值服务费=送货费+包装费+保价费+代收手续费+接货费+其他费用合计； 5. 优惠合计=优惠总合计； 6.
 *          总运费=公布价运费+增值服务费-优惠合计=预付金额+到付金额； 7.
 *          在提交运单时，系统记录该次计算费用时所用的所有价格费用的规则版本号； 8. 采用费用明细取整、总费用取整的原则 9.
 *          任何客户包含月结客户不可减免综合服务费。 10. 开单界面选择付款方式为"现金"时，默认预付金额为开单总金额并允许修改，且修改的同时到付
 *          金额随预付金额变化而变化，变化规则为：到付金额=总金额-预付金额，到付金额不能修改。
 *          例如，开单界面选择付款方式为"现金"时，当一票货的总金额为300元时，默认预付金额为300元，到付
 *          金额为0，将预付金额改为100元之后，到付金额变为200元 1.
 *          必须输入提货网点、货物的重量和体积以及其他服务费用，计算出总费用后再输入验证编码进行验证；
 *          （优惠券编码开单时，对运单有上下限金额的限制，该上下限可配置） 2.
 *          输入优惠券编码后，焦点转移时，系统调用CRM接口，校验该编码是否存在，如果存在，则将优惠信息
 *          显示在优惠信息列表中，费用为对应的优惠券的金额；如果不存在提示为：你输入的优惠券编码不存在，请重新输入； 3.
 *          当修改优惠编码时，则焦点转移时，系统自动调用CRM接口，校验该编码，同时修改对应的优惠减免 记录和优惠信息； 4.
 *          优惠金额必须小于等于开单总金额； 5. 当付款金额为单一的现付或到付时，优惠券可以单独减免，当付款金额既有现付又有到付时，优先选
 *          择减免现付金额，如存在优惠金额此时减免现付有余时，可再充抵到付费用，但优惠金额必须小于等于开单总金额； 6.
 *          暂存时，只显示减免金额，运单实收或应收金额上不显示，即暂存时，不生成实收或应收单据； 7. 当费用变化时，优惠编码必须重新输入；8.
 *          1. 当发货客户有月结客户属性时，才可选择月结；并默认显示付款方式为月结； 2.
 *          当发货客户有信用额度的属性时，才可选择临时欠款的付款方式； 3. 支持发货客户的多种付款方式叠加，但月结和临时欠款不可同时出现； 4.
 *          当开单为订单导入开单，且为网上订单，并选择了网上支付时，导入开单后的付款方式显示网上支付；
 *          同时付款方式可修改，付款方式中增加网上支付选项； 5. 开单为空运、偏线、中转下线时不能选择“网上支付”； 1.
 *          当付款方式为现付时，预付金额必须大于0；否则，提示信息“付款方式非到付，预付金额不能小于等于0”； 2.
 *          当付款方式为到付时，预付金额不能大于0；否则，提示信息“付款方式为【到付】，预付金额不能大于0”； 3.
 *          月结客户的信用金额直接限制该客户的当月发货金额，当月发货金额超过信用额度，当月将无法再开单月结，
 *          提示“该客户的剩余可用信息额度不足，不能开月结”； 4.
 *          临时欠款时，需要客户中的信用额度超过运费，否则，提示“该客户的剩余可用信息额度不足， 不能开临时欠款”；
 * 
 *          确认会员资质SUC规则 1. 签约合同客户： 1.1 营业部合同客户只享受合同优惠；当有促销的优惠时，合同客户可享受最大优惠折扣，
 *          但不叠加；（促销优惠为基础资料配置属性） 备注：当运单为网络订单（官网订单、阿里巴巴订单、淘宝订单、呼叫中心订单），
 *          且客户为合同客户时，为了保证不重复享受折扣， 除运单是阿里巴巴订单且月结客户优惠类型为“普通货物打折方案”以阿里巴巴费率计算外，
 *          其他情况都按照合同优惠来进行计算； 1.2 客户为非本部门的合同客户时，不在本部门享受合同优惠；；
 *          合同客户有绑定其他营业部时，可在所绑定的其他营业部享受合同归属部门同等优惠； 1.3 所有合同客户可以减免综合服务费； 1.4
 *          所有合同客户享受合同签订的保价费率和代收货款费率； 1.5 合同客户通过月结审核的，可选择付款方式为：“月结”；
 *          其他客户不能选择为“月结”； 1.6 合同客户为“价格折扣”优惠时，客户发货除最低每票的运费不受影响外，
 *          其他运费超过最低每票标准的，总运费按照其折扣比例打折优惠（折后总运费不低于最低每票标准运费）； 1.7
 *          合同客户为“月发月送”优惠时，客户发货价格按照月发月送标准； 1.7.1. 开单不能含装卸费； 1.7.2.
 *          当月发越送与空运同时存在时，以空运规则为准，可开装卸费； 1.8 合同客户有免费送货属性的，在优惠信息列表中自动优惠标准派送的送货费用，
 *          对于月结属性的客户可以向下修改送货费，最小为0；其它所有情况的送货费不可向下修改，只能向上修改； 1.9
 *          合同用户仅在合同有效期内享受合同优惠。 1. 非公司签约客户： 1.1
 *          发货客户只能选择本部门的客户，但通过会员卡号可查询其他部门客户信息； 若客户为其它部门合同客户时，客户不享受合同优惠； 1.2
 *          客户优惠信息由基础资料配置，优惠信息包括：我司享受优惠区域部门、 优惠类型（如线路优惠、货物类型优惠等，可配置）、
 *          优惠名称，对应的的优惠的具体信息； 1.3 优惠类型有优先级，其优先级由基础资料配置；
 *          （当普通优惠与促销优惠同时同在时，促销优惠优于普通优惠；） 1.4 系统自动根据承运信息，给出对应运单可享的优先级最高的优惠，
 *          、当最高优先级并列出现时，默认勾选最大优惠的优惠方案； 对于同一优惠类型的优惠，存在互拆；
 *          例：当线路优惠和区域优惠同时存在时，系统只给出线路优惠； （点面原则（异常优先）：即点面同时存在时，以点为准。
 *          如：优惠1：上海出发货8折优惠；优惠2：上海到广州9优惠， 由于优惠2包含于优惠1中，为优惠1的一个异常，
 *          则在生成优惠信息时，只显示优惠2的优惠方案）； 1.5 阿里巴巴客户： 1.5.1 阿里巴巴订单导入开单时，对于诚信通会员，
 *          系统按如下方式进行折扣： 运输类型 限制要求 普货 精准（长/短途） 起步价格 30元 40元/20元 小于1000公斤或5立方
 *          大于等于1000公斤或5立方 （该折扣表内容由基础资料配置） 备注：对于阿里的普通会员，系统只减免2元的综合服务费。 1.5.2
 *          阿里巴巴订单导入开单时，在“优惠方案中”自动新增“阿里巴巴优惠费”项， 且系统自动计算优惠金额。公布价仍显示为公司散客开单标准的公布价。
 *          （阿里巴巴优惠费=公司标准公布价总运费—阿里巴巴折扣的总运费）； 也为公布价优惠的一种； 1.5.3
 *          阿里诚信通会员客户下单后，阿里订单导入开单， 且“该客户同时为部门的月结客户，其月结优惠类型为‘普通货物打折方案’时”，
 *          则开单时阿里价格优于月结客户价格，以“阿里诚信通会员价格方案”计算运费；
 *          其他的月结优惠类型(公布价、价格折扣、月发月送)开单时月结客户价格优于阿里价格规则； 1.5.4
 *          当阿里巴巴订单开空运和偏线不享受对应的阿里巴巴优惠， 但可享受正常开单的优惠； 1. 客户享受的优惠类型自动显示在优惠信息显示列表中；
 *          2. 合同优惠包括公布价折扣优惠和增值服务优惠； 3. 对于公布价优惠：只显示客户可以享受的公布价优惠信息，
 *          且默认勾选“合同规定的优惠方案”或“与合同优惠有冲突时， 系统规则使用的优惠方案”的公布价折扣优惠； 4.
 *          当客户为合同客户时，不仅显示合同公布价优惠， 还显示对应线路或货物类型或货物种类等其它配置的所有与本次承运相关的公布价优
 *          惠方案中系统规则使用的较合同优惠更优的优惠方案； 5. 当客户为合同客户时，若勾选非合同公布价优惠时且为非促销优惠时，
 *          则不再享受对应客户的所有合同优惠（包括公布价优惠、增值服务优惠及月发月送、月结等优惠）； 6.
 *          当客户为非合同客户时，自动默认勾选系统规则可使用的折扣最低的公布价优惠方案； 7. 公布价优惠方案只可勾选一种，不可多选； 8.
 *          合同客户的增值服务优惠项不可修改（即不可以取消或增加勾选）， 非合同客户的增值服务优惠项可修改（即可以取消或增加勾选） 9.
 *          任何客户包含月结客户不可减免综合服务费 1. 公布价优惠金额=本次承运的公布价总价*（1-优惠折扣）； 2. 增值服务优惠金额： 2.1
 *          保价费和代收手续款的优惠金额=声明价值/代收货款*（ 公司标准的保价费率/代收费率-签约合同的保价费率/代收费率）； 2.2
 *          其它优惠或费用减免由优惠规则配置生成； 1. 只有月结属性的客户才可以享受月结的付款方式；且当客户为月结客户时，
 *          付款方式自动默认为月结； 2. 只有信用额度的客户才可以享受临时欠款的付款方式；且对应客户的信用额度全国统配，
 *          不绑定部门，例：客户A在我司可享信用额度为5000，且其合同主体为部门a，
 *          A已用额度为2000，且无论客户A在a部门发货，或是在其它任务我司的部门发货， 其可用额度均为3000； 3.
 *          系统自动过滤客户不能享受的付款方式；
 * 
 * 
 * 
 *          录入发货客户信息SUC业务规则 营业员点击运单开单，进入运单开单界面。 本用例分为两个界面：录入发货客户信息、选择发货客户； 1.
 *          录入发货客户信息： 界面为信息录入界面：包括：手机、电话、客户名称、 客户编码、发货联系人（发货部门）、发货人地址； 1.1
 *          手机：发货人手机号码； 1.2 电话：发货人电话号码； 1.3 客户名称：发货客户公司或单位名称，可支持搜索查询； 1.4
 *          客户编码：我司给客户的客户号； 1.5 发货联系人（发货部门，支持模糊搜索）： 发货客户的客户姓名，
 *          当“运单开单”中的“开单提货方式”为“内部带货自提”时， “发货联系人”字段更改为“发货部门”； 1.6
 *          发货人地址：发货客户的详细联系地址， 支持国家行政区域自动过滤； 2. 选择发货客户界面： 界面为选择客户信息界面：包括两部分：
 *          客户信息列表区域、功能按钮区域； 2.1. 客户信息列表区域： 包括：客户编码、客户名称、联系人、手机、
 *          电话、地址(规范化地址和详细地址)； 2.2. 功能按钮区域： 包括：确定、取消； 3. 选择热门城市界面 界面信息包含人热门城市 4.
 *          选择省份界面 界面信息包含省份 5. 选择城市界面 界面信息保护城市 6. 选择区县界面 界面信息保护区县 1.6 操作步骤 1.6.1
 *          录入 序号 基本步骤 相关数据 补充步骤 1 录入手机号码 1. 系统自动查询CRM系统中对应手机号码绑定的客户信息，
 *          如果有弹窗，弹窗操作见扩展1a，如果没有， 弹出FOSS历史开单记录中对应手机号码绑定的客户信息，并弹窗，弹窗操作见扩展1b； 2.
 *          规则-请参见系统规则SR1；
 * 
 *          2 录入电话号码 1. 如果手机号码没有填写， 系统自动查询CRM系统中对应电话号码绑定的客户信息，
 *          如果有弹窗，弹窗操作见扩展2a，如果没 ，弹出FOSS历史开单记录中对应手机号码绑定的客户信息， 并弹窗，弹窗操作见扩展2b； 2.
 *          规则-请参见系统规则SR1；
 * 
 *          3 录入客户名称和客户编码 1. 规则-请参见系统规则SR2、SR3； 4 录入发货联系人（发货部门） 1.
 *          规则-请参见系统规则SR4、SR5、SR8； 5 录入发货人地址 1. 提供下拉框选择输入，系统自动过滤输入的行政区下一级行政级的字段；
 *          2. 规则-请参见系统规则SR6； 1.6.2 扩展 序号 扩展事件 相关数据 备注 1a
 *          当录入的手机号码在CRM系统中有手机号码绑定的客户信息， 则自动弹窗并显示手机号码为录入的手机号的所有客户信息，
 *          营业员选择录入一条记录，并确定；选择的客户信息自动带入发货客户信息中； 客户信息 1.
 *          规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则； 2. 规则-请参见系统规则SR5 、SR6、SR7；
 * 
 *          1b 当录入的手机号码在CRM系统中没有手机号码绑定的客户信息时， 如果该客户在这3个月有发过货，则弹出历史发货记录，
 *          营业员选择录入一条记录，并确定；选择的客户信息自动带入发货客户信息中； 客户信息 3.
 *          规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则； 4. 规则-请参见系统规则SR5 、SR6、SR7；
 * 
 *          2a 当录入的电话号码在CRM系统中有电话号码绑定的客户信息， 则自动弹窗并显示电话号码为录入的电话号码的所有客户信息，
 *          营业员选择录入一条记录，并确定；选择的客户信息自动带入发货客户信息中； 客户信息 1.
 *          规则-请参见系统用例SUC-492中的“1.6.2扩展2a”的规则； 2. 规则-请参见系统规则SR5、SR6、SR7；
 * 
 * 
 *          2b 当录入的电话号码在CRM系统中没有电话号码绑定的客户信息时， 如果该客户在这3个月有发过货，则弹出历史发货记录，
 *          营业员选择录入一条记录，并确定；选择的客户信息自动带入发货客户信息中； 客户信息 1.
 *          规则-请参见系统用例SUC-492中的“1.6.2扩展2a”的规则； 2. 规则-请参见系统规则SR5、SR6、SR7；
 * 
 *          1.7 业务规则 序号 描述 SR1 1. 发货客户手机号码及固定电话至少提供一个，手机号码只能为数字并且为11位； 2.
 *          固定电话号码只能为数字，且可添加多个；添加多个时， 必须用“，”或“、”或“/”分开；固定电话号码字段也可以录入手机号； 3.
 *          手机、电话为精确查询全公司客户信息 4. 手机、电话带出的客户信息会覆盖原来已带出的客户信息。
 *          若未带出客户信息则当客户ID不为空时清空除手机外的其它已带出的客户信息（即），否则不清空 SR2 1.
 *          若发货客户为公司会员客户，则录入发货客户信息后系统界面显示该发货客户联系人编码； 2.
 *          客户名称精确查询全公司客户信息。当客户名称为带出的客户时（以隐藏的客户ID是否为空做为判断条件），
 *          清空客户时则清空手机、电话、联系人、地址、行政区域、客户编码，否则只清空客户名称、客户编码、客户ID（隐藏）； SR3 1.
 *          若发货客户为会员客户，则录入发货客户信息后系统给予提示； 2. 提未信息为在运单开单界面下方加色放大显示； 3.
 *          通过选择录入的客户名称和客户编码不可修改，但可删除录入； SR4 1. 当“运单开单”中的“开单提货方式”为“内部带货自提”时，
 *          “发货联系人”字段更改为“发货部门”； 2. 联系人不用带出客户信息 SR5 1. 若为公司内部带货，输入发货部门关键字支持模糊搜索
 *          SR6 1. 客户详细地址必填至乡/镇，且乡镇下一级内容不能为空； 2. 当鼠标点击规范化地址文本框时，显示如下图片，
 *          包含热门城市、省份、城市、县区，选择热门城市， 会直接跳到区县，现在省份后自动跳到城市，
 *          选择城市后自动跳到区县（必须选择完上一级行政区域后，才能选择下一行政区域），
 *          选择完区县后，会把规范化地址显示在规范化文本框内，例如：江苏省-苏州市-相城区 3.
 *          地址可以进行拼音和首写字母进行匹配，例如输入“GZ”会在规范化地址文本框下面显示 ；
 *          匹配时可带出城市、区、县等符合的信息，该设计来自官网，具体可以参考官网 4.
 *          当增值服务中有返单业务时，则发货人地址为必填项；其他情况非必填。 SR7 1.
 *          使用电话号码和手机进行匹配，弹出CRM发货客户选择框进行选择，如果匹配不到，
 *          再使用运单发货历史客户进行匹配，弹窗选择，选择后填充客户编码、客户名称、联系人、地址； 2.
 *          但是对于电话号码匹配，只有当发货人手机、客户名称为空时，才会用电话号码检索并弹窗显示； 3.
 *          使用手机号码、电话号码、客户名称弹出选择框选择记录后覆盖原先记录 4. 修改联系人时，需要清空客户名称 5.
 *          使用手机号码弹出选择框选择记录后覆盖原先记录，查询不到时，清空客户名称 6.
 *          导入发货客户信息后，联系人名称不可修改，为灰色；当营业员进行清空发货客户的客户名称操作时， 联系人名称可修改，为可编辑状态； 7.
 *          点击客户名称查询控件，弹出查询信息:窗口SUC-424-查找会员 8. 如果查询出来的记录只有一条，也需要进行选择 9.
 *          发货客户名称精确查询且查询全公司 SR8 1. 发货人省市区默认为始发营业部的省市区
 * 
 * 
 *          录入收货客户SUC业务规则 营业员点击运单开单，进入运单开单界面。 本界面分为两个界面：录入收货客户信息、选择收货客户。 1.
 *          录入收货客户信息： 界面为信息录入界面：包括：手机、电话、发货收货联系人（发货收货部门）、发货收货人地址； 1.1
 *          手机：发货收货人手机号码； 1.2 电话：发货收货人电话号码； 1.3
 *          收货联系人（收货部门）：收货客户的客户姓名，当“运单开单”中的“开单提货方式
 *          ”为“内部带货自提”时，“收货联系人”字段更改为“收货部门”； 1.4 收货人地址：收货客户的详细联系地址，支持国家行政区域自动过滤；
 *          1.5 客户名称 1.6 客户编码 2. 选择收货客户界面： 界面为选择客户信息界面：包括两部分：客户信息列表区域、功能按钮区域；
 *          2.1. 客户信息列表区域： 包括：联系人、手机、电话、地址（规范化地址和详细地址）； 2.2. 功能按钮区域： 包括：确定、取消；
 *          3. 选择热门城市界面 界面信息包含人热门城市 4. 选择省份界面 界面信息包含省份 5. 选择城市界面 界面信息保护城市 6.
 *          选择区县界面 界面信息保护区县
 * 
 *          1.6 操作步骤 1.6.1 录入 序号 基本步骤 相关数据 补充步骤 1 录入手机号码 1.
 *          系统自动查询CRM系统中对应手机号码绑定的客户信息， 如果有弹窗，弹窗操作见扩展1a，和如果没有，
 *          弹出FOSS历史开单记录中对应手机号码绑定的客户信息， 并弹窗，弹窗操作见扩展1b； 2. 规则-请参见系统规则SR1、SR5、SR6；
 *          2 录入电话号码 1. 如果手机号码没有填写， 系统自动查询CRM系统中对应电话号码绑定的客户信息，
 *          如果有弹窗，弹窗操作见扩展2a，如果没有， 弹出FOSS历史开单记录中对应手机号码绑定的客户信息， 并弹窗，弹窗操作见扩展2b； 1.
 *          1、系统自动查询CRM系统中对应电话号码绑定的客户信息 和FOSS历史开单记录中对应手机号码绑定的客户信息，并弹窗，
 *          弹窗操作参见扩展2a； 2. 规则-请参见系统规则SR1、SR5 、SR6； 3 录入收货联系人（收货部门） 1.
 *          规则-请参见系统规则SR2、SR3； 4 录入收货人地址 1. 提供下拉框选择输入，系统自动过滤输入的行政区下一级行政级的字段； 2.
 *          地址在系统后台通过GIS系统进行匹配， 如果是禁行区域，地址颜色为红色，如果是进仓区域，地址颜色为黄色 3.
 *          规则-请参见系统规则SR4； 1.6.2 扩展 序号 扩展事件 相关数据 备注 1a
 *          当录入的手机号码在CRM系统中有手机号码绑定的客户信息， 则自动弹窗并显示手机号码为录入的手机号的所有客户信息，
 *          营业员选择录入一条记录，并确定；选择的客户信息自动带入收货客户信息中；
 *          当光标焦点移至录入手机号码时，系统自动调用CRM系统对应发货客户的历史发货记录，
 *          并自动弹窗显示所有该发货客户的历史发货记录；营业员选择一条记录，并确定， 选择的客户信息自动带信收货客户信息中； 客户信息 1.
 *          规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则； 2. 规则-请参见系统规则SR5 、SR6； 1.
 *          规则-请参见系统规则SR5； 1b 当录入的手机号码在CRM系统中没有手机号码绑定的客户信息时，
 *          则如果该客户在这3个月有发过货，则弹出历史收货记录自动弹窗并显示手机号码为录入的手机号的所有客户信息，
 *          营业员选择录入一条记录，并确定；选择的客户信息自动带入收货客户信息中； 客户信息 1.
 *          规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则； 2. 规则-请参见系统规则SR5 、SR6； 2a2a
 *          当录入的电话号码在CRM系统中有电话号码绑定的客户信息， 则自动弹窗并显示电话号码为录入的电话号码的所有客户信息，
 *          营业员选择录入一条记录，并确定；选择的客户信息自动带入收货客户信息中； 当录入的电话号码在CRM系统中有电话号码绑定的客户信息，
 *          则自动弹窗并显示电话号码为录入的电话号码的所有客户信息， 营业员选择录入一条记录，并确定；选择的客户信息自动带入收货客户信息中；
 *          客户信息客户信息 1. 规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则； 2. 规则-请参见系统规则SR5
 *          、SR6； 1. 规则-请参见系统用例SUC-492中的“1.6.2扩展2a”的规则； 2. 规则-请参见系统规则SR6；
 * 
 *          2b 当录入的电话号码在CRM系统中没有电话号码绑定的客户信息时， 如果该客户在这3个月有发过货，则弹出历史收货记录，
 *          营业员选择录入一条记录，并确定；选择的客户信息自动带入收货客户信息中； 客户信息 1.
 *          规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则； 2. 规则-请参见系统规则SR5 、SR6；
 * 
 *          1.7 业务规则 序号 描述 SR1 1. 收货客户手机号码及固定电话至少提供一个，手机号码只能为数字并且为11位，
 *          固定电话号码只能为数字，且可添加多个； SR2 1. 当“运单开单”中的“开单提货方式”为“内部带货自提”时，
 *          “收货联系人”字段更改为“收货部门”； SR3 1.
 *          若为公司内部带货，则收货客户信息中的收货部门名称必须与OA系统中组织架构名称保持一致； SR4 1.
 *          客户详细地址必填至乡/镇，且乡镇下一级内容不能为空；
 * 
 *          2. 当鼠标点击规范化地址文本框时，显示如下图片， 包含热门城市、省份、城市、县区，选择热门城市，会直接跳到区县，
 *          现在省份后自动跳到城市， 选择城市后自动跳到区县（必须选择完上一级行政区域后，才能选择下一行政区域），
 *          选择完区县后，会把规范化地址显示在规范化文本框内，例如：江苏省-苏州市-相城区 3.
 *          地址可以进行拼音和首写字母进行匹配，例如输入“GZ”会在规范化地址文本框下面显示 ；
 *          匹配时可带出城市、区、县等符合的信息，该设计来自官网，具体可以参考官网 4. 当提货方式含“自提”时，收货人地址为非必填项； SR5
 *          1. 使用电话号码和手机进行匹配，如果是唯一匹配一条CRM客户信息时，
 *          填充客户编码、客户名称、联系人、地址，如果有多条需弹出选择框进行选择，
 *          如果查询不到CRM客户信息时，使用FOSS三个月运单历史记录中的收货信息查询，
 *          唯一匹配一条进行填充收货客户信息，多条进行弹窗选择，如果都查询不到，不做其他操作 2.
 *          但是对于电话号码匹配，只有当发货人手机、客户名称为空时，才会用电话号码检索并弹窗显示 3.
 *          使用手机号码、电话号码、客户名称弹出选择框选择记录后覆盖原先记录 4.
 *          修改联系人时，需要清空客户名称，当清空客户名称时，会同时删除客户编码 5. 使用手机号码、电话号码弹出选择框选择记录后覆盖原先记录 6.
 *          点击客户名称查询控件，弹出查询信息:窗口SUC-424-查找会员 7. 身份证号、客户编码、客户名称、联系人编码可以查询到全公司的客户
 *          1. 只有当收货人手机为空，且发货客户信息已录入时，才会检索并弹窗显示； 2. 若未查询到历史记录，则无法提示； 3.
 *          通过选择录入的收货人信息均可修改； 4.
 *          使用号码进行匹配，如果是唯一匹配一条CRM客户信息时，填充客户编码和客户名称，如果有多条不做操作 SR6 1.
 *          通过选择录入收货发货信息，同时带出对应的目的站和提货网点信息； 2. 带出目的站仍然使用GIS进行查询，并以GIS返回为准； 3.
 *          若GIS未查询得出，则以历史开单的目的站和提货网点信息为准；
 * 
 * 
 *          查找会员SUC业务规则 营业员点击运单开单界面中的查询客户，进入查询客户信息界面。 本界面为查询客户信息。
 *          界面主要分为三个部分：查询条件区域、查询结果区域、功能按钮。 1. 查询条件区域： 1.1
 *          会员卡号：支持会员卡号的模糊搜索，并可查询部门全部会员信息； 1.2 发货联系人 1.3 电话 1.4 客户编码 1.5 客户名称
 *          1.6 手机 1.7 发货人地址 1.8 复选框"查询全公司" 2. 查询结果区域： 2.1 客户编码 2.2 客户名称 2.3
 *          联系人编码 2.4 月结审核 2.5 联系人 2.6 手机 2.7 电话 2.8 身份证 2.9 信用额度 2.10 地址 2.11
 *          越发越送审核编号 2.12 生效时间 2.13 失效时间 3. 功能按钮： 3.1 重置： 3.2 查询； 3.3 查询部门会员 1.6
 *          操作步骤 1.6.1 录入 序号 基本步骤 相关数据 补充步骤 1 录入查询条件，查询符合条件的客户信息 查询条件信息 1.
 *          系统查询CRM系统中本部门符合条件的客户信息； 2. 规则-请参见系统规则SR1； 2 查询本部门所有的会员客户信息 1.
 *          规则-请参见系统规则SR2； 3 导入选择的客户信息至发/收货客户信息中：双击选中的客户信息， 对应客户信息进入发/收货客户信息中 1.
 *          规则-请参见系统规则SR3； 1.6.2 扩展 序号 扩展事件 相关数据 备注 1a
 *          步骤1中，若未查询到符合条件的客户信息，系统给予提示 1. 提示信息为“未查询到符合条件的客户信息！”； 2b
 *          步骤2号，若本部门无会员，系统给予提示 1. 提示信息为“部门无会员信息！”； 1.7 业务规则 序号 描述 SR1 1.
 *          支持单一和组合查询条件查询； 2. 只有勾选复选框时，按照身份证号、客户编码、
 *          客户名称、联系人编码精确查全公司客户信息且查询条件中包含有身份证号、 客户编码、客户名称、联系人编码其中任意一项时，忽略其它查询条件，
 *          否则为模糊查询本部门客户信息； 3. 当查询到的记录为某客户编码中的其中一条信息时， 显示该编码对应的所有的客户信息； 4.
 *          当客户为越发越送客户时，则显示该客户对应的越发越送审核编号、 生效时间、失效时间；当越发越送审核编号有多个时，则只显示最后一次审核信息；
 *          SR2 1. 当条件都为空时，点击查询按钮，查询出本部门会员； SR3 1. 通过查询条件带出的客户信息被填充到相关控件中时，
 *          发货客户联系人为不可修改状态， 若要修改则需要清空全部带出的客户信息；
 * 
 * 
 *          确认公布总价SUC业务规则 1 打开“运单开单”界面。 2 录入发货人信息 参考SUC-492 3 录入收货客户信息 参考SUC-493
 *          4 录入货物信息 参考SUC-494 5 录入运输信息 参考SUC-496 进行前面5操作之后，若是空运，
 *          系统读取空运公布价价格方案（基础资料参考SUC-581） 计算出公布总价，显示在运单开单界面。
 *          若是汽运，系统读取汽运公布价价格方案（基础资料参考SUC-581） 计算出公布总价， 显示在运单开单界面。
 *          参考规则SR1，SR2，SR3 扩展事件写非典型或异常操作过程 序号 扩展事件 相关数据 备注 5a 5b 1.7 业务规则 序号 描述
 *          SR1 1）汽运：上门发货汽运运费最低X元一票； （同城、卡航；可配置）； 上门接货汽运运费最低X元一票；（同城、卡航；可配置）；
 *          2）空运：空运运费最低X元一票；（可配置）； SR2 1）汽运：当货物为“接货”时， 系统自动匹配生成公布价“接货价格方案”；
 *          当货物为“非接货”时， 系统自动匹配生成公布价“非接货的价格方案”； 2）空运：系统自动匹配公布价 “空运价格方案”；
 *          空运价格只有上门发货一套价格方案， 如有接货费在其他费用里添加一项接货费。 SR3 1）计费方式分为重量计费、体积计费；
 *          重量、体积计费的运费=每公斤单价与货物实际重量的乘积 或 每方单价与货物实际体积的乘积，
 *          对于一票货物，系统按重量和体积分别计算并取大优先的原则计费给出公布价总运费, 计费方式即为取大的一方；
 * 
 *          运单提交SUC业务规则 客户上门发货确认承运信息后，营业员告知客户运输费用后， 为客户开具运单，打印标签并粘贴至货物的过程。 1.3
 *          用例条件 条件类型 描述 引用系统用例 前置条件 1. 运单已填写完整
 *          DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入发货客户信息-V0.1.doc
 *          DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入货物信息-V0.2.doc
 *          DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入收货客户信息-V0.1.doc
 *          DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入运输信息-V0.1.doc
 *          DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息-V0.1.doc
 *          DP-FOSS-接送货系统用例-客户上门-根据订单确认承运信息-导入订单-V0.1.doc
 *          DP-FOSS-接送货系统用例-客户上门-确认承运信息-查询目的站-V0.1.doc
 *          DP-FOSS-接送货系统用例-客户上门-承运计费报价-确认公布总价-V0.1.doc 后置条件 1.
 *          传送运单号、金额、帐号等结算数据到财务子系统 2. 传送货物名称、件数、重量等货物信息到中转子系统，安排运输计划 3.
 *          传送运单号等信息到官网，客户查询运单状态 4. 给收货人发送出发短信，给上门接货客户发送短信 5.
 *          订单信息反馈给给CRM系统，订单处理结果为：已开单。 6、 当运输性质为精准空运时，
 *          提交成功后会自动生成订舱信息流到最终配载部门（即总调）的舱位信息中 1.4 操作用户角色 操作用户 描述 营业员 1.
 *          确认客户承运信息，开单收货， 收取现付金额，且打印标签及运单出发联让客户签字确认。 1.5 界面要求 1.5.1 表现方式 Web方式
 *          1.5.2 界面原型 1.5.2.1 集中开单界面 1.5.2.2 营业部开单界面 1.5.2.3 运单确认提交界面 1.5.3
 *          界面描述 1.5.3.1 营业部、集中开单界面 界面共包括7个部分：1、发货客户信息； 2、收货客户信息；3、货物信息；
 *          4、运输信息；5、增值服务信息； 6、计费付款；7、功能按钮。
 *          具体描述参考DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入发货客户信息-V0.1.doc
 *          DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入货物信息-V0.2.doc
 *          DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入收货客户信息-V0.1.doc
 *          DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入运输信息-V0.1.doc
 *          DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息-V0.1.doc 1.5.3.2 运单确认提交界面
 *          界面共包括3个部分：1、运单基本信息； 2、功能复选框；3、功能按钮 1、运单基本信息：单号、到付总运费、预付总运费、
 *          代收货款、保险价值、收货人名称、付款方式、提货网点、 提货方式、收货人地址、收货人电话、货物名称、
 *          重量/体积/件数、包装、重量/体积/件数（代打木架）。 2、功能选项：打印运单下拉框有各种版本（可以配置，且可以配置默认模板）
 *          （选择之后，点击确定系统自动打印运单，只能选其一，参考规则SR8）、 打印标签（选择之后，点击确定系统自动打印标签）、
 *          提交后新增（选择之后，点击确定系统打开一个新的开单界面）。 3、功能按钮：确定、取消 。 1.6 操作步骤 序号 基本步骤 相关数据
 *          补充步骤 1 营业员“填写”完整的运单信息。 2 点击暂存 1、客户上门提供的货物承运信息。 2、来此crm系统订单的数据。
 *          3、上门接货客户提供的承运信息。 1、用户暂存的运单数据时允许修改 23 点击“提交”按钮提交运单。 1、客户上门提供的货物承运信息。
 *          2、来此crm系统订单的数据。 3、上门接货客户提供的承运信息。 1、点击运单“提交”按钮，弹出“运单确认提交页面”，
 *          页面默认选择上“打印运单（全打）”、“打印标签”、 “确定后新增运单”复选框。
 *          2、提交后，同步数据到中转子系统，、CRM系统、官网系统， 财务子系统。(将单独出来写接口用例，此处将参考这些接口系统用例)
 *          3、系统自动根据出发部门、运输性质、到达部门生成默认唯一走货路径(基础资料)； 参考综合系统基础资料用例。
 *          4、当运输性质为精准空运时，提交成功后会自动生成订舱信息 （包括：预计出发时间、航班时间（早中晚）、重量）
 *          流到最终配载部门（即总调）的舱位信息中。 5、保存使用的价格版本号 56、参考规则SR1、SR12 34
 *          点击运单确认提交页面的“确定”按钮。 1、点击确定后，打开一个新的运单开单界面。 2、系统自动打印运单,选择系统默认的打印模板，
 *          参考DP-FOSS-接送货系统用例-客户上门-确认承运信息-打印运单-V0.1.doc
 *          3、系统自动打印标签，参考DP-FOSS-接送货系统用例-客户上门-确认承运信息-打印标签V0.1.doc 4、调用中转入库接口
 *          参考规则SR13 45 若有签收单返单时，需要打印签收单标签， 打印内容包括：单号、始发部门、到达部门、目的站。
 *          参考SUC-504打印签收单标签(整车) 扩展事件写非典型或异常操作过程 序号 扩展事件 相关数据 备注 2a
 *          营业员在弹出代打木架对话框“录入第X件”需要打木架。 若货物需要代打木架，系统自动弹出代打木架对话框。代打木架精确到第几件。
 *          参考规则SR3 2b2a 如运单必填信息未填写完整或填写内容不符合要求 （参考数据元素输入限制、长度、是否必填、运单号重复等），
 *          提交时给予提示。 提示为：“×××未填写整或输入内容不符合要求，请重新输入！”， 且将此文本输入框标记为红色，光标置于此文本框中。
 *          重新填写正确完整后，跳转步骤1。 参考规则SR7 2c2b 若为月结或临时欠款，
 *          如果客户既有应收账款金额加上本次应收金额超过客户最大信用额度， 不能提交开单。
 *          弹出提示：客户既有应收账款金额加上本次应收金额超过客户最大信用额度， 不能提交开单。参考SR9 *2d2c
 *          若为月结或临时欠款，如果客户已有应收账款超过最大账期，不能提交开单。 弹出提示：客户已有应收账款超过最大账期，不能提交开单。参考SR9
 *          2e2d 提交时，当重量体积比不在设置的区间（重量体积比基础资料）中， 弹出提示“请确认录入的重量体积是否准确！”；
 *          （该弹窗有两个按钮：确定、取消）点击确定时，弹出确认运单信息界面； 点击取消，点返回运单录入界面；当X在区间中，无提示；
 *          直接进入确认运单信息界面； 参考规则SR10 3a 步骤3中，可点击“取消”按钮，取消提交运单。
 *          取消提交运单，返回到系统运单开单界面，界面信息可编辑， 修改信息后，可再次进行提交，跳到步骤2。 3b
 *          步骤3中，也可取消选择默认选择的复选框。 1、如取消选择“打印运单”，确定之后，系统不进行自动打印运单，
 *          需点击开单界面上的“打印运单”按钮，打印运单出发联。 2、如取消选择“确定后新增运单”，确定之后，
 *          系统返回到填写完整的运单开单界面，但是运单界面成灰色不可编辑， 需点击开单界面上的“新增”按钮，新增运单。
 *          3、如取消选择“打印标签”，确定之后， 系统不进行自动打印标签，需点击开单界面上的“打印标签”按钮，打印运单标签。 1.7 业务规则
 *          序号 描述 SR1 1、若为上门接货，开单提交生成后， 系统短信通知发货人及收货人。 短信模板可在系统中进行设置。
 *          给发货人或收货人发送短信时， 若无手机号码则不发送。 发送短信内容中包含“货物的件数”。 注：“货物的件数”为货物包装之前的件数。
 *          系统自动给发货人、收货人发送货物出发短信（短信模板内容可配置）； 否则只需要给收货人发短信；若收发货人无手机号码则不发送。
 *          给收货人的短信内容：您好！这里是德邦物流， （发货人姓名***）从（出发城市***）给您发来货物，
 *          单号为（****）的（***货物的件数）件货，即日出发。
 *          目的地（*****客户的收获地址）。附：德邦物流营业部的电话、地址、营业部名称。 给发货人的短信内容：您好！这里是德邦物流，
 *          您从（出发城市***）给（收货人姓名***）托运的货物， 单号为（****）的（***货物的件数）件货，即日出发。
 *          目的地（*****客户的收获地址）。附：德邦物流营业部的电话、地址、营业部名称。 SR2
 *          运单现付金额不为0，则在出发部门生成现金收款单； 若到付金额不为0，则在到达部门生成应收单若付款方式为“现付”，
 *          “银行卡”，则在出发部门生成现金收款单； 若付款方式为“到付”在到达部门生成应收单。 若付款方式为“临时欠款”，“网上支付”，
 *          “月结”在出发部门生成应收单；若运单包含“代收货款”， 则在出发部门生成应付单，到达部门生成应收单；
 *          若运单包含“装卸费”，则在出发部门生成应付单。 SR3 开单代打木架外场默认为第一外场，
 *          如果第一外场不支持打木架，则营业员自己判定选择的代打木架外场。 开单代打木架外场默认为开单走货路径中第一个可代打木架的外场，不可修改。
 *          1）若货物包装中含有“木”字样，且走货路径上有代打木架外场， 系统提示：是否需要代打木架？；
 *          2）选择代打木架后，若默认的代打木架外场非走货路径上第一外场时， 系统给予提醒，便于营业员与客户衡量是否继续代打木架；
 *          3）若货物包装中含有“木”字样，但走货路径上没有可代打木架的外场，
 *          则不能开代打木架，系统提示：走货路径上没有可代打木架的外场，不能代打木架。 SR4 当运输性质为 “精准卡航”及“精准城运”时，
 *          系统自动计算预计出发时间与预计提货/派送时间。 ①预计出发时间： 由预计出发日期和准点出发时点（取自基础资料）组成，
 *          形如【2012-04-09 12:00:00】。 若开单当前时点在准点出发时点前，
 *          则预计出发日期=开单日期；否则，预计出发日期=开单日期+1； ② 预计提货时间（开单提货方式为自提）：
 *          由预计提货日期和到达营业部承诺时点（取自基础资料）组成， 形如【2012-04-09 12:00:00】。若为当天出发，
 *          则预计提货日期=预计出发日期+到达营业部承诺天数； 否则预计提货时间=预计出发日期+到达营业部承诺天数-1。 ③
 *          预计派送时间（开单提货方式为送货）： 由预计派送日期和派送承诺时点（取自基础资料）组成， 形如【2012-04-09
 *          12:00:00】。若为当天出发， 预计派送时间=预计出发日期+到达营业部承诺天数+派送承诺需加天数；
 *          否则预计派送时间=预计出发日期+派送承诺需加天数-1。 SR5 如果开单信息来自集中或非集中上门接货： 1、司机有PDA
 *          PDA开单后：则点击“PDA补录”走PDA补录流程引用系统用例SUC-491-补录运单。 2、司机无PDA
 *          则新增运单，进入开单界面走提交运单流程。 SR6 “运单确认提交界面”上的复选框可以单选，可以多选。 SR7
 *          提交时系统校验规则参考如下用例规则： SUC-492录入发货客户信息 SUC-493录入收货客户信息 SUC-494录入货物信息
 *          SUC-495录入增值服务信息 SUC-496录入运输信息 SUC-311导入订单 SUC-397 确认公布总价 SUC-126
 *          查询目的站 SR8 运单确认提交页面，打印运运单下拉框只能选其一， 默认为运单模板配置基础资料中配置默认的模板，
 *          如果不需要打印，不勾选即可。 SR9 若为月结或临时欠款，则系统需要对客户应收账款日期及信用额度进行判断： 1）欠款天数
 *          以客户为基本单位，开单/派送时付款方式为“临时欠款”， 最长一笔欠款时间超过30天，该客户将不能继续开单为“临时欠款”，
 *          假如客户的临时欠款未还款金额超过客户自己的信用额度， 也不能继续开单；开单付款方式为“月结”，最长一笔欠款时间超过70天，
 *          该客户将不能继续开单为“月结”；（始发应收账款从开单之日起计算，
 *          到付应收账款从第一次派送出库之日起计算，以更改方式更改为“临时欠款”或“月结”的， 从开单之日开始计算） 2）欠款额度
 *          临时欠款：以部门为单位，根据收入等级（前三个月最高收入金额） 设置该部门每月临时欠款最高额度（余额），详见下表；
 *          当部门临时欠款未还款金额大于该金额时， 将无法继续开单未“临时欠款”； 收入区间 项目 10万以下 3万 10-15万 5万
 *          15-20万 7万 20-30万 10万 30-50万 15万 50-100万 20万 100万以上 40万
 *          月结：以客户为单位，连续2个月发货金额在3000元以上可申请月结， 月结额度不得高于近期最高走货金额的2倍，
 *          若客户连续两月发货量低于2000元，取消月结权限。 SR10 1. 系统设置货物重量体积比区间值（该值由基础资料配置），
 *          在运单提交时，系统自动对重量体积比进行校验：即重量体积比X=重量/体积；
 *          当X不在设置的区间中，弹出提示“请确认录入的重量体积是否准确！”； （该弹窗有两个按钮：确定、取消）点击确定时，弹出确认运单信息界面；
 *          点击取消，点返回运单录入界面；当X在区间中，无提示； 直接进入确认运单信息界面； SR11 1）用户可以随时录入运单信息随时暂存运单，
 *          但必须录入打印标签所需的关键字段才可暂存运单。 目前暂存运单打印标签所需运单信息包含收货部门、
 *          运单号、目的站、提货网点、运输性质、提货方式、包装、件数。 （注：当走货路由经过特定的城市时还需要录入货物类型）
 *          2）系统对录入的运单信息合法性进行校验； 3）运单暂存后不生成正式运单信息、库存信息及财务单据；
 *          4）用户可对已暂存的运单进行修改、暂存、提交（生成正式运单）； 5）若暂存运单，系统锁定运单号及订单信息；
 *          6）暂存的运单不可打印运单出发联； SR12 若PDA开单已打印标签， 在提交运单后弹出的确认界面中打印标签默认不勾选，
 *          若需打印标签则手动勾选"打印标签"复选框。 SR13 1）、如果开单组织是营业部门， 那么开单提交时，
 *          检验是否是驻地部门，如果是驻地部门， 入库对应驻地部门外场， 如果是营业部，入库对应营业部 2）、如果开单组织是开单组，那么开单提交时，
 *          校验是否已经打印标签，如果没有，入库配载部门；
 * 
 * 
 *          录入运输信息（整车）SUC业务规则 营业员点击整车运单开单，进入整车运单开单界面。 本界面为录入整车运输信息。
 *          界面信息包括：收货部门、单号、目的站、提货网点、 对外备注、对内备注、储运注意事项、配载部门、 最终配载部门、到达类型 1.
 *          收货部门：揽货部门； 2. 单号：运单单号； 3. 提货网点：收货客户可以领取货物的部门； 4.
 *          对外备注：客户可以看到的备注信息，包括：空、 保丢不保损、“不承保发霉、变质、虫蛀虫咬之损失”、 “
 *          不承保刮花、变形、撞凹之损失”、不可重压、易潮、 不可倒置、客户指定提货网点； 5. 对内备注：仅限公司内部人员看到的备注信息； 6.
 *          到达类型：到达客户处还是到达营业部 7. 储运注意事项：对外备注和对内备注信息的叠加； 8. 配载部门:开单收货部门出发货配载专线；
 *          1.6 操作步骤 序号 基本步骤 相关数据 补充步骤 1 录入收货部门 1. 规则-请参见系统规则SR1； 2 录入单号
 *          系统校验单号的合法性 1. 规则-请参见系统规则SR2； 3 录入提货网点 1. 规则-请参见系统规则SR3； 4 录入对外备注 1.
 *          规则-请参见系统规则SR4； 5 录入对内备注 6 到达类型 1. 规则-请参见系统规则SR5； 6 生成储运注意事项 1.
 *          规则-请参见系统规则SR6； 7 生成配载部门 1. 规则-请参见系统规则SR7； 8 生成最终配载部门 1.
 *          规则-请参见系统规则SR8； 1.7 业务规则 序号 描述 SR1 1. 收货部门默认为操作者所在的部门，不可修改； SR2 1.
 *          单号最大长度为8位，如果超过提示“单号大于8位” 2. 单号不能少于8位，“如果少于8位“单号长度少于7位” 3.
 *          单号与最近开单单号前六位如果不等，那么提示“前后两票单号相差过大， 请检查所输单号是否为本部门所属单号！” SR3 1.
 *          提货网点可由收货客户地址的城市生成，也可手工选择； 2. 系统自动过滤只显示符合录入文本条件的网点信息； SR4 参考SUC-496
 *          录入运输信息 对对外备注的处理 SR5 1. 如果在 “是否经过营业部”打勾，付款方式可以选择到付项， 代收货款框可以修改； 2.
 *          如果在“是否经过营业部”不打勾，付款方式中的到付项自动移除， 代收货款清0且不可修改； SR6 1.
 *          储运注意事项=对外备注&对内备注，各字段以“；”分开； 2. 对外备注永远在储运注意事项的最前面； SR7 1.
 *          通过出发部门和提货网点系统自动匹配始发配载部门基础资料；
 * 
 * 
 *          录入收货客户信息（整车）SUC业务规则 营业员点击运单开单，进入运单开单界面。 本界面分为两个界面：录入收货客户信息、选择收货客户。
 *          1. 录入收货客户信息： 界面为信息录入界面：包括：手机、电话、发货收货联系人（发货收货部门）、 发货收货人地址； 1.1
 *          手机：发货收货人手机号码； 1.2 电话：发货收货人电话号码； 1.3 收货联系人（收货部门）：收货客户的客户姓名，
 *          当“运单开单”中的“开单提货方式”为“内部带货自提”时， “收货联系人”字段更改为“收货部门”； 1.4
 *          收货人地址：收货客户的详细联系地址， 支持国家行政区域自动过滤； 1.5 客户名称 1.6 客户编码 2. 选择收货客户界面：
 *          界面为选择客户信息界面：包括两部分： 客户信息列表区域、功能按钮区域； 2.1. 客户信息列表区域：
 *          包括：联系人、手机、电话、地址（规范化地址和详细地址）； 2.2. 功能按钮区域： 包括：确定、取消； 3. 选择热门城市界面
 *          界面信息包含人热门城市 4. 选择省份界面 界面信息包含省份 5. 选择城市界面 界面信息保护城市 6. 选择区县界面 界面信息保护区县
 *          1.6 操作步骤 1.6.1 录入 序号 基本步骤 相关数据 补充步骤 1 录入手机号码 1.
 *          系统自动查询CRM系统中对应手机号码绑定的客户信息， 如果有弹窗，弹窗操作见扩展1a，
 *          如果没有，弹出FOSS历史开单记录中对应手机号码绑定的客户信息， 并弹窗，弹窗操作见扩展1b； 2.
 *          规则-请参见SUC-493-录入收货客户信息SR1、SR5、SR6； 2 录入电话号码 1. 如果手机号码没有填写，
 *          系统自动查询CRM系统中对应电话号码绑定的客户信息， 如果有弹窗，弹窗操作见扩展2a，
 *          如果没有，弹出FOSS历史开单记录中对应手机号码绑定的客户信息， 并弹窗，弹窗操作见扩展2b； 2.
 *          1、规则-请参见SUC-493-录入收货客户信息SR1、SR5 、SR6； 3 录入收货联系人 1. 4 录入收货人地址 1.
 *          提供下拉框选择输入， 系统自动过滤输入的行政区下一级行政级的字段； 2. 地址在系统后台通过GIS系统进行匹配，
 *          如果是禁行区域，地址颜色为红色，如果是进仓区域，地址颜色为黄色 3. 规则-请参见系统规则SR4； 1.6.2 扩展 序号 扩展事件
 *          相关数据 备注 1a 当录入的手机号码在CRM系统中有手机号码绑定的客户信息， 则自动弹窗并显示手机号码为录入的手机号的所有客户信息，
 *          营业员选择录入一条记录，并确定；选择的客户信息自动带入收货客户信息中； 客户信息 1.
 *          规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则； 2. 规则-请参见SUC-493-录入收货客户信息SR5
 *          、SR6； 1b 当录入的手机号码在CRM系统中没有手机号码绑定的客户信息时， 如果该客户在这3个月有发过货，则弹出历史收货记录，
 *          营业员选择录入一条记录，并确定；选择的客户信息自动带入收货客户信息中； 客户信息 1.
 *          规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则； 2. 规则-请参见SUC-493-录入收货客户信息SR5
 *          、SR6；
 * 
 *          2a 当录入的电话号码在CRM系统中有电话号码绑定的客户信息， 则自动弹窗并显示电话号码为录入的电话号码的所有客户信息，
 *          营业员选择录入一条记录，并确定；选择的客户信息自动带入收货客户信息中； 客户信息 1.
 *          规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则； 2. 规则-请参见SUC-493-录入收货客户信息SR5
 *          、SR6； 3. 2b 当录入的电话号码在CRM系统中没有电话号码绑定的客户信息时， 如果该客户在这3个月有发过货，则弹出历史收货记录，
 *          营业员选择录入一条记录，并确定；选择的客户信息自动带入收货客户信息中； 客户信息 1.
 *          规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则； 2. 规则-请参见SUC-493-录入收货客户信息SR5
 *          、SR6； 4. 1.6.1 录入 序号 基本步骤 相关数据 补充步骤 1 录入手机号码 1.
 *          系统自动查询CRM系统中对应手机号码绑定的客户信息和 FOSS历史开单记录中对应手机号码绑定的客户信息，并弹窗， 弹窗操作见扩展1b；
 *          2. 规则-请参见系统规则SR1； 2 录入电话号码 1.
 *          系统自动查询CRM系统中对应电话号码绑定的客户信息和FOSS历史开单记录中对应手机号码绑定的客户信息， 并弹窗，弹窗操作参见扩展2a；
 *          2. 规则-请参见系统规则SR1； 3 录入客户名称 1. 规则-请参见系统规则SR2 4 录入收货联系人 5 录入收货人地址 1.
 *          提供下拉框选择输入， 系统自动过滤输入的行政区下一级行政级的字段； 2. 地址在系统后台通过GIS系统进行匹配，
 *          如果是禁行区域，地址颜色为红色， 如果是进仓区域，地址颜色为黄色; 3. 规则-请参见系统规则SR3； 1.6.2 扩展 序号 扩展事件
 *          相关数据 备注 1a 当光标焦点移至录入手机号码时， 系统自动调用CRM系统对应发货客户的历史发货记录，
 *          并自动弹窗显示所有该发货客户的历史发货记录； 营业员选择一条记录，并确定，选择的客户信息自动带信收货客户信息中； 客户信息 1.
 *          规则-请参见系统规则SR4； 1b 当录入的手机号码在CRM系统中有手机号码绑定的客户信息，
 *          则自动弹窗并显示手机号码为录入的手机号的所有客户信息， 营业员选择录入一条记录，并确定； 选择的客户信息自动带入收货客户信息中；
 *          客户信息 1. 规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则； 2a
 *          当录入的电话号码在CRM系统中有电话号码绑定的客户信息， 则自动弹窗并显示电话号码为录入的电话号码的所有客户信息，
 *          营业员选择录入一条记录，并确定；选择的客户信息自动带入收货客户信息中； 客户信息 1.
 *          规则-请参见系统用例SUC-492中的“1.6.2扩展2a”的规则； 1.7 业务规则 序号 描述 SR1 1.
 *          收货客户手机号码及固定电话至少提供一个， 手机号码只能为数字并且为11位，固定电话号码只能为数字， 且可添加多个； SR2 1.
 *          若收货客户为公司会员客户， 则录入收货客户信息后系统界面显示该收货客户联系人编码； SR3 1. 客户详细地址必填至乡/镇，
 *          且乡镇下一级内容不能为空； SR4 1. 只有当收货人手机为空， 且发货客户信息已录入时，才会检索并弹窗显示； 2.
 *          若未查询到历史记录，则无法提示； 3. 通过选择录入的收货人信息均可修改； 1.
 * 
 *          录入货物信息（整车）SUC业务规则
 * 
 *          营业员点击运单开单，进入运单开单界面。 本界面为录入货物信息。 界面主要分为一个部分：录入货物信息。 1. 录入货物信息：
 *          录入信息包括：货物名称、总件数、总重量、货物尺寸、总体积、货物包装 1.1 货物名称：货物的名称； 1.2 总件数：收货时货物的总件数；
 *          1.3 总重量：收货时货物的总重量； 1.4 总体积：收货时货物的总体积； 1.5 货物包装：货物的包装数； 1.6 操作步骤
 *          1.6.1 录入货物信息 序号 基本步骤 相关数据 补充步骤 1 修改货物名称 1. 系统自动匹配违禁品，生成规则； 2.
 *          规则-请参见系统规则SR1； 1.7 业务规则 序号 描述 SR1 1. 若货物为违禁品，则系统自动提示“货物为违禁品， 不可开单！”；
 *          2. 违禁品、拒收品、具体类型可在系统中进行配置； SR2 新增一条业务规则：在提交运单之前，
 *          若相邻两次输入的单号（两次单号分别为A与B且单号输入合法）差别较大时，
 *          系统给予用户友好提示避免录错单号，但不限制单号的输入。具体规则为：
 *          1）若前后两次输入的单号位数相同，当|A-B|≥100时系统给予提示； 2）若前后两次输入的单号位数不同，系统给予提示；
 *          3）提示信息为：前后两票单号相差过大， 请检查所输单号是否是本部门所属单号！
 * 
 * 
 *          营业员点击运单开单，进入运单开单界面。 本用例分为两个界面：录入发货客户信息、 选择发货客户； 1. 录入发货客户信息：
 *          界面为信息录入界面：包括：手机、电话、客户名称、 客户编码、发货联系人（发货部门）、发货人地址； 1.1 手机：发货人手机号码； 1.2
 *          电话：发货人电话号码； 1.3 客户名称：发货客户公司或单位名称， 可支持搜索查询； 1.4 客户编码：我司给客户的客户号； 1.5
 *          发货联系人（发货部门）：发货客户的客户姓名， 当“运单开单”中的“开单提货方式”为“内部带货自提”时，
 *          “发货联系人”字段更改为“发货部门”； 1.6 发货人地址：发货客户的详细联系地址， 支持国家行政区域自动过滤； 2.
 *          选择发货客户界面： 界面为选择客户信息界面：包括两部分： 客户信息列表区域、功能按钮区域； 2.1. 客户信息列表区域：
 *          包括：客户编码、客户名称、联系人、手机、 电话、地址(规范化地址和详细地址)； 2.2. 功能按钮区域： 包括：确定、取消； 3.
 *          选择热门城市界面 界面信息包含人热门城市 4. 选择省份界面 界面信息包含省份 5. 选择城市界面 界面信息保护城市 6. 选择区县界面
 *          界面信息保护区县 1.6 操作步骤 1.6.1 录入 序号 基本步骤 相关数据 补充步骤 1 录入手机号码 1.
 *          系统自动查询CRM系统中对应手机号码绑定的客户信息， 如果有弹窗，弹窗操作见扩展1a，
 *          如果没有，弹出FOSS历史开单记录中对应手机号码绑定的客户信息， 并弹窗，弹窗操作见扩展1b； 2.
 *          规则-请参见系统规则SUC-492-录入发货客户信息SR1； 2 录入电话号码 2.
 *          如果手机号码没有填写，系统自动查询CRM系统中对应电话号码绑定的客户信息， 如果有弹窗，弹窗操作见扩展2a，
 *          如果没有，弹出FOSS历史开单记录中对应手机号码绑定的客户信息， 并弹窗，弹窗操作见扩展2b； 3.
 *          规则-请参见系统规则SUC-492-录入发货客户信息SR1； 3 录入客户名称和客户编码 1.
 *          规则-请参见系统规则SUC-492-录入发货客户信息SR2、SR3； 4 录入发货联系人 5 录入发货人地址 1. 提供下拉框选择输入，
 *          系统自动过滤输入的行政区下一级行政级的字段； 2. 规则-请参见系统规则SUC-492-录入发货客户信息SR6； 1.6.2 扩展 序号
 *          扩展事件 相关数据 备注 1a 当录入的手机号码在CRM系统中有手机号码绑定的客户信息，
 *          则自动弹窗并显示手机号码为录入的手机号的所有客户信息， 营业员选择录入一条记录，并确定；选择的客户信息自动带入发货客户信息中； 客户信息
 *          1. 规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则； 2.
 *          规则-请参见系统规则SUC-492-录入发货客户信息SR5 、SR6、SR7； 1b
 *          当录入的手机号码在CRM系统中没有手机号码绑定的客户信息时， 如果该客户在这3个月有发过货，则弹出历史发货记录，营业员选择录入一条记录，
 *          并确定；选择的客户信息自动带入发货客户信息中； 客户信息 3. 规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则；
 *          4. 规则-请参见系统规则SUC-492-录入发货客户信息SR5 、SR6、SR7； 2a
 *          当录入的电话号码在CRM系统中有电话号码绑定的客户信息， 则自动弹窗并显示电话号码为录入的电话号码的所有客户信息，
 *          营业员选择录入一条记录，并确定；选择的客户信息自动带入发货客户信息中； 客户信息 1.
 *          规则-请参见系统用例SUC-492中的“1.6.2扩展2a”的规则； 2.
 *          规则-请参见系统规则SUC-492-录入发货客户信息SR5、SR6、SR7； 2b
 *          当录入的电话号码在CRM系统中没有电话号码绑定的客户信息时， 如果该客户在这3个月有发过货，则弹出历史发货记录，营业员选择录入一条记录，
 *          并确定；选择的客户信息自动带入发货客户信息中； 客户信息 1. 规则-请参见系统用例SUC-492中的“1.6.2扩展2a”的规则；
 *          2. 规则-请参见系统规则SUC-492-录入发货客户信息SR5、SR6、SR7； 1 录入手机号码 1.
 *          系统自动查询CRM系统中对应手机号码绑定的客户信息和 FOSS历史开单记录中对应手机号码绑定的客户信息，并弹窗，弹窗操作见扩展1a；
 *          1. 规则-请参见系统规则SR1； 2 录入电话号码 1. 系统自动查询CRM系统中对应电话号码绑定的客户信息
 *          和FOSS历史开单记录中对应手机号码绑定的客户信息，并弹窗，弹窗操作参见扩展2a； 1. 规则-请参见系统规则SR1； 3
 *          录入客户名称和客户编码 1. 规则-请参见系统规则SR2、SR3； 4 录入发货联系人 5 录入发货人地址 1. 提供下拉框选择输入，
 *          系统自动过滤输入的行政区下一级行政级的字段； 2. 规则-请参见系统规则SR4； 1.6.2 扩展 序号 扩展事件 相关数据 备注 1a
 *          当录入的手机号码在CRM系统中有手机号码绑定的客户信息， 则自动弹窗并显示手机号码为录入的手机号的所有客户信息，
 *          营业员选择录入一条记录，并确定；选择的客户信息自动带入发货客户信息中； 客户信息 1. 规则-请参见系统规则SR5； 2a
 *          当录入的电话号码在CRM系统中有电话号码绑定的客户信息， 则自动弹窗并显示电话号码为录入的电话号码的所有客户信息，
 *          营业员选择录入一条记录，并确定；选择的客户信息自动带入发货客户信息中； 客户信息 1. 规则-请参见系统规则SR6； 1.7 业务规则
 *          序号 描述 SR1 1.规则参考SUC-492-录入发货客户信息SR1 SR2 1. 规则参考SUC-492-录入发货客户信息SR2
 *          SR3 1.规则参考SUC-492-录入发货客户信息SR3 SR4 1. 规则参考SUC-492-录入发货客户信息SR6 SR5 1.
 *          规则参考SUC-492-录入发货客户信息SR7 SR6 1. 规则参考SUC-492-录入发货客户信息SR8
 * 
 * 
 *          确认整车总价SUC业务规则
 * 
 *          营业员点击整车开单，进入整车开单界面。 本界面为录入整车收银界面。 1. 约车报价：营业员约整车后，请车员受理的价格； 2.
 *          开单报价：营业员根据请车员的受理价格，给客户的实际运费价格； 3. 增值服务费用 4. 总运费：本次承运的客户应付金额； 5.
 *          开单付款方式：客户的付款方式，包括：现金、银行卡、月结、临时欠款、到付； 6. 预付金额 7. 到付金额； 1.6 操作步骤 序号
 *          基本步骤 相关数据 补充步骤 1 录入开单报价 1. 规则-请参见系统规则SR1； 2 查看约车报价、增值服务费用入总运费 1.
 *          规则-请参见系统规则SR2、SR3； 3 选择开单付款方式 1. 规则-请参见系统规则SR4、SR5； 4 预付金额 1.
 *          规则-请参见系统规则SR4、SR5； 5 到付金额 1. 规则-请参见系统规则SR4、SR5； 1.7 业务规则 序号 描述 SR1
 *          1. 开单报价默认等于约车报价； 2. 修改的开单报价只能为约车报价的某个范围区间中，该范围区间可由公司统一配置； SR2 1.
 *          整车导入约车开单时，约车报价为请车员受理的约车价格，不可修改； SR3 1. 总运费=开单报价+增值服务费； 2.
 *          增值服务费=保价费+代收手续费+预付运费保密服务费+返单费+包装费； SR4 1.
 *          整车的付款方式包含现金、银行卡、月结、临时欠款、到付； 2. 支持发货客户的多种付款方式叠加，但月结和临时欠款不能同时存在； 2.
 *          开单只能选择一种付款方式，不可选择两种或以上； 3. 月结客户可以开月结； 4. 若客户非月结，则自运过滤月结的付款方式； 5.
 *          付款方式为到付或者临时欠款时，不能选择预付运费保密； 6. 若整车开单选择直接到达客户处，则不能办理到付； 7.
 *          有信用额度且额度大于等于总运费的发货客户，才可以选择临时欠款； SR5 1. 预付金额必须大于0才能选择预付运费保密； 2.
 *          当付款方式为现付时，预付金额必须大于0；否则， 提示信息“付款方式非到付，预付金额不能小于等于0”； 3.
 *          当付款方式为到付时，预付金额不能大于0；否则， 提示信息“付款方式为【到付】，预付金额不能大于0”； 4.
 *          月结客户的信用金额直接限制该客户的当月发货金额， 当月发货金额超过信用额度，当月将无法再开单月结，
 *          提示“该客户的剩余可用信息额度不足，不能开月结”； 5. 临时欠款时，需要客户中的信用额度超过运费，
 *          否则，提示“该客户的剩余可用信息额度不足，不能开临时欠款”； 6. 当付款方式为临时欠款等收款放货时， 现付到付均为零，不可修改；
 *          SR6 1. 约车报价、开单报价、增值服务费用、总运费、预付金额、 到付金额均为整数，按照四舍五入原则；
 * 
 * 
 *          导入整车约车编号SUC业务规则
 * 
 *          营业员通过 界面标题： 约车信息 约车编号：受理后的约车编码 1. 录入发货客户信息： 界面为信息录入界面：包括：手机、电话、客户名称、
 *          客户编码、发货联系人、发货人地址； 1.1 手机：发货人手机号码； 1.2 电话：发货人电话号码； 1.3
 *          客户名称：发货客户公司或单位名称，可支持搜索查询； 1.4 客户编码：我司给客户的客户号； 1.5 发货联系人：发货客户的客户姓名；
 *          2. 录入收货客户信息： 界面为信息录入界面：包括：手机、电话、发货联系人、发货人地址； 1.6 手机：发货人手机号码； 1.7
 *          电话：发货人电话号码； 1.8 收货联系人：收货客户的客户姓名 1.9 收货人地址：收货客户的详细联系地址，支持国家行政区域自动过滤；
 *          3. 录入货物信息： 录入信息包括：货物名称、总件数、总重量、货物尺寸、总体积、货物包装 1.1 货物名称：货物的名称； 1.2
 *          总件数：收货时货物的总件数； 1.3 总重量：收货时货物的总重量； 1.4 总体积：收货时货物的总体积； 1.5
 *          货物包装：货物的包装数； 4.界面标题：计费付款 录入信息包括：约车报价、总运费、增值服务费、 开单付款方式、预付金额、到付金额 1.1
 *          约车报价：整车约车费用 1.2 总运费：运费总合 1.3 增值服务费：增值服务费总合 1.4 开单付款方式：开发付款的方式 1.5
 *          预付金额：现付金额 1.6 到付金额：到付金额 1.6 操作步骤 1.6.1 导入整车约车编号 序号 基本步骤 相关数据 补充步骤 1
 *          用户输入约车编号 2 用户点击“确定”按钮 约车信息 系统自动带出相应的约车信息， 约车编号不可编辑，规则参考SR1
 *          扩展事件写非典型或异常操作过程 序号 扩展事件 相关数据 备注 1.7 业务规则 序号 描述 SR1
 *          1、校验是否有此约车编号，如果没有，提示无此约车编号， 如果有，但是没有受理，提示“约车编号未受理”，如果受理拒绝，
 *          提示“约车失败”并提示失败原因，如果单号已经导入过，不能重复导入， 提示“约车编号已经导入过”，如果不是本部门的整车约车编号，
 *          录入后提示“不能导入其他部门整车约车编号” 2、根据约车信息填充界面，请车费用填充进约车报价中。
 * 
 * 
 * 
 *          运单提交（离线）SUC业务规则
 * 
 *          1.1 相关业务用例 BUC_FOSS_5.20.30_550 营业部离线开单 1.2 用例描述 营业员通过本用例录入提交。 1.3
 *          用例条件 条件类型 描述 引用系统用例 前置条件 1. 运单在线登录成功 2. 运单已填写完整 SUC-441录入收货客户信息(离线)
 *          SUC-442录入发货客户信息(离线) SUC-443录入货物信息(离线) SUC-444录入增值服务信息(离线)
 *          SUC-445录入运输信息(离线) SUC-412运单收银(离线) SUC-372暂存存运单(离线) SUC-362在线登录 后置条件
 *          1. 传送运单号、金额、帐号等结算数据到财务子系统 2. 传送货物名称、件数、重量等货物信息到中转子系统，安排运输计划 3.
 *          传送运单号等信息到官网，客户查询运单状态 4. 给收货人发送出发短信，给上门接货客户发送短信 5.
 *          订单信息反馈给CRM系统，订单处理结果为：离线已开单。 6、 当运输性质为精准空运时，
 *          提交成功后会自动生成订舱信息流到最终配载部门（即总调）的舱位信息中 1.4 操作用户角色 操作用户 描述 营业员
 *          通过运单开单界面，提交离线运单信息 1.5 界面要求 1.5.1 表现方式 Web方式 1.5.2 界面原型 1.5.2.1
 *          运单离线开单界面 1.5.2.2 运单确认提交界面 1.5.3 界面描述 1.5.3.1 运单开单界面 界面共包括7个部分：
 *          1、发货客户信息； 2、收货客户信息； 3、货物信息； 4、运输信息； 5、增值服务信息； 6、计费付款； 7、功能按钮。
 *          具体描述参考DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入发货客户信息-V0.1.doc
 *          DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入货物信息-V0.2.doc
 *          DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入收货客户信息-V0.1.doc
 *          DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入运输信息-V0.1.doc
 *          DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息-V0.1.doc 运单确认提交界面 界面共包括3个部分：
 *          1、离线运单基本信息； 2、在线基本信息 3、功能复选框； 4、功能按钮 1、 运单基本信息：单号、到付总运费、预付总运费、
 *          代收货款、保险价值、收货人名称、付款方式、 提货网点、提货方式、收货人地址、收货人电话、 货物名称、重量/体积/件数、包装 。 2、
 *          运单基本信息：单号、到付总运费、 预付总运费、代收货款、保险价值、收货人名称、 付款方式、提货网点、提货方式、收货人地址、
 *          收货人电话、货物名称、重量/体积/件数、包装 3、功能复选框：打印运单（选择之后，点击确定系统自动打印运单）、
 *          打印标签（选择之后，点击确定系统自动打印标签）、 下一条离线运单信息（选择后提交运单成功后填充下一条）。 4、功能按钮：确定、取消 。
 *          1.6 操作步骤 序号 基本步骤 相关数据 补充步骤 1 营业员在运单查询界面，查询出离线开单未提交的运单 2 点击“修改”
 *          收货客户信息、发货客户信息、货物信息、 增值服务信息、计费付款信息、运输信息、代打木架信息 进入开单界面 1、自动填充发货客户信息
 *          参考规则SR1、 SR2 2、自动填充发货收货客户信息 参考规则SR1 、SR2 3、自动填充货物信息 参考规则SR3，SR7
 *          4、自动填充运输信息 参考规则SR4，SR7 5、自动填充增值服务信息 参考规则SR5，SR7 6、自动填充计费付款信息
 *          参考规则SR6，SR7 填充完之后， 如果有代打木架，弹出代打木架信息录入界面 2 点击“提交”按钮提交运单。
 *          1、客户上门提供的货物承运信息。 2、上门接货客户提供的承运信息。 1.提交运单，根据系统规则SUC-439提交运单系统用例进行提交
 *          2. 调用中转接口，生成库存信息 3.系统自动弹出，运单确认提交界面 1.7 业务规则 序号 描述 SR1
 *          1.根据离线录入的发货客户信息， 使用发货联系人手机号码到远程服务器进行匹配客户信息， 如果没有，根据离线填写的发货客户信息，
 *          填充发货联系人手机号、发货联系人、发货人地址、发货人电话号码， 如果有，根据查询出来到客户信息，显示会员编码和客户名称，
 *          并根据离线填写的客户信息，填充发货联系人手机号、发货联系人、 发货人地址、发货人电话号码。填充时不需要进行联动和校验
 *          1.填充发货信息和发货信息时，根据发货客户手机到CRM进行查询， 无论查询出有多少条阻塞式弹出CRM查询框让用户进行选择，
 *          当发货客户手机为空时，根据电话号码到CRM进行查询， 无论查询出有多少条阻塞式弹出CRM查询框让用户进行选择，
 *          当用户选择时进行填充，如果客户选择取消时，不填充 2.如果修改，修改规则参考系统用例SUC-492录入发货客户信息 SR2
 *          11.如果修改，修改规则参考系统用例SUC-492录入发货客户信息和SUC-493录入收货客户信息 .根据离线录入的收货客户信息，
 *          使用收货联系人手机号码到远程服务器进行匹配客户信息， 如果没有，根据离线填写的收货客户信息，
 *          填充发货联系人手机号、发货联系人、发货人地址、发货人电话号码， 如果有，根据查询出来到客户信息，显示会员编码和客户名称，
 *          并根据离线填写的收货客户信息，填充发货联系人手机号、发货联系人、 发货人地址、发货人电话号码。填充时不需要进行联动和校验
 *          2.如果修改，修改规则参考系统用例SUC-493录入收货客户信息 SR3 1、 把货物信息填充到界面中，在填充过程中，
 *          不需要进行联动和校验 2、1、 如果修改、修改规则参考系统用例SUC-494 录入货物信息 SR4
 *          1、把运输信息到界面中，在填充过程中， 不需要进行联动和校验 2、如果修改，修改规则参考系统用例SUC-496录入运输信息 SR5
 *          1、把增值服务信息填充到界面中，在填充过程中，不需要进行联动和校验 21、如果修改，修改规则参考系统用例SUC-494录入增值服务信息
 *          SR6 1.如果发货客户有优惠协议，那么根据SUC-486-运单收银系统用例规则进行重新计价
 *          21.如果修改，修改规则参考系统用例SUC-408 运单收银 SR7 1、在填充过程中涉及到需要用基础资料、产品价格和客户资质的校验、
 *          计算、联动，都用最新信息进行校验、计算、联动， 如果离线保存时已经有计算或联动的值，需要进行覆盖， 需要最新计算和联动的值。
 * 
 *          运单收银（离线）SUC业务规则
 * 
 *          1.1 相关业务用例 BUC_FOSS_5.20.30_550 (营业部离线开单) 1.2 用例描述
 *          当网络故障或服务器原因导致营业部不能正常开单时，客户上门发货为汽运或空运，营业员确认承运信息之后，通过离线系统计算货物总付款金额。
 *          1.3 用例条件 条件类型 描述 引用系统用例 前置条件 1. 确认承运信息已录入完毕； 后置条件 1. 录入收入； 1.4
 *          操作用户角色 操作用户 描述 营业员 可查询、确认发货/收货客户应付款金额，及客户的付款方式 开单员
 *          可查询、确认发货/收货客户应付款金额，及客户的付款方式 1.5 界面要求 1.5.1 表现方式 Web页面 1.5.2 界面原型
 *          1.5.3 界面描述 营业员点击离线运单开单，进入离线运单开单界面。 本界面标题：计费付款。 1.
 *          计费类型：包括重量计费、体积计费，默认显示重量计费； 2. 计费费率， 3. 公布价运费 4. 增值服务费用 5. 总运费 6.
 *          开单付款方式：包括现金、到付； 7. 预付金额； 8. 到付金额； 9. 计费重量。 1.6 操作步骤 1.6.1 运单收银 序号
 *          基本步骤 相关数据 补充步骤 1 查看计费类型和计费费率 1. 规则-请参见系统规则SR1、SR2； 2
 *          查看公布价运费和增值服务费及总运费 1. 规则-请参见系统规则SR3； 3 录入付款方式 1. 规则-请参见系统规则SR4； 4
 *          确认和录入预付金额和到付金额 1. 规则-请参见系统规则SR5； 5 查看计费类型和计费费率 1. 规则-请参见系统规则SR1、SR2；
 *          扩展事件写非典型或异常操作过程 序号 扩展事件 相关数据 备注 5a 5b 1.7 业务规则 序号 描述 SR1 1.
 *          计费类型分为重量计费、体积计费， 由系统自动生成，不可修改； 默认重量计费； 2.
 *          对于一票货物系统分别按重量和体积分别计费并取大优先的原则计费； 若按重量计费运费较按体积计费运费较高，
 *          则计费类型为重量计费；若按体积计费运费较按重量计费运费较高， 则计费类型为体积计费； 3. 运输类型为汽运时,计费重量为空，不可修改；
 *          2.4. 运输类型为空运时计费重量应为重量和体积*1000000/6000进行对比，取大； SR2 1.
 *          费率为对应计费类型、目的站、提货网点及运输类型的走货单价； 2. 目的站、提货网点及运输类型确认后，
 *          即可自动显示对应计费类型的费率；（来自本地价格基础资料） 3. 费率可以保留到小数点后2位；运费、预付金额、到付金额为整数，
 *          按照四舍五入的原则； SR3 1. 公布价运费（即重量、体积计费的运费）=每公斤单价/每方价格与货物实际重量/体积的乘积，
 *          对于一票货物系统分别按重量和体积分别计费并取大优先的原则计费； （来自价格基础资料，下载并且使用当前启用的最新的价格版本，
 *          参考SUC-547下载基础资料PC-SR1） 2. 增值服务费=送货费+包装费+保价费+代收手续费+其他费用和； 3.
 *          总运费费用=公布价运费+增值服务费+装卸费 =预付金额+到付金额； 3.4. 公布价运费=纯运费+装卸费 SR4 1.
 *          付款方式只有：到付，现付 SR5 1. 当付款方式为现付时，预付金额必须大于0；否则， 提示信息“付款方式为现付，预付金额必须大于0”；
 *          2. 当付款方式为到付时，到付金额必须大于0；否则， 提示信息“付款方式为【到付】，到付金额必须大于0”； 3.
 *          发货人和收货人都付款，付款方式为现付; 发货人跟收货人都付款，付款方式选择到付。 4.3. 支持发货人、收货人付款方式的组合，
 *          例如付款方式为到付500：那么预付金额可以未300， 到付金额为200，总和等于500 ，那么预付300，
 *          可以选择现金100元，临时欠款100，银行卡刷卡100元。 SR6 参考suc-403生成运单SR1: 系统自动检测，
 *          如果客户端X天还没有更新，不能打开离线运单界面， 并提示“请在间隔X天内，在线登录系统
 * 
 * 
 *          确认公布总价（离线）SUC业务规则 1.1 相关业务用例 BUC_FOSS_5.20.30_550 (营业部离线开单) 1.2 用例描述
 *          当网络故障或服务器原因导致营业部不能正常开单时， 客户上门发货为汽运或空运，营业员确认承运信息之后，
 *          通过离线系统计算出本地公布价与计费重量或计费体积乘积的运费。 1.3 用例条件 条件类型 描述 引用系统用例 前置条件
 *          离线系统已经更新最新且已启用的价格版本 参考规则SR4 后置条件 离线开单保存 1.4 操作用户角色 操作用户 描述 营业员
 *          营业员录入货物承运信息等。 开单员 开单员录入货物承运信息等。 1.5 界面要求 1.5.1 表现方式 Web页面 1.5.2 界面原型
 *          无 1.5.3 界面描述 无 1.6 操作步骤 1.6.1 计算公布总价 序号 基本步骤 相关数据 补充步骤 1 登陆离线系统 2
 *          打开“离线开单”界面。 3 录入发货人信息 参考SUC-442 4 录入收货客户信息 参考SUC-441 5 录入货物信息
 *          参考SUC-443 6 录入运输信息 参考SUC-445 进行前面5操作之后，若是空运，
 *          系统读取本地下载的空运公布价价格方案计算出公布总价， 显示在运单开单界面。
 *          若是汽运，系统读取本地下载的汽运公布价价格方案（计算出公布总价， 显示在运单开单界面。 参考规则SR1，SR2，SR3
 *          扩展事件写非典型或异常操作过程 序号 扩展事件 相关数据 备注 5a 1.7 业务规则 序号 描述 SR1
 *          1）汽运：上门发货汽运运费最低X元一票；（同城、卡航；可配置）； 上门接货汽运运费最低X元一票；（同城、卡航；可配置）；
 *          2）空运：空运运费最低X元一票；（可配置）； SR2 1）汽运：当货物为“接货”时，系统自动匹配生成公布价“接货价格方案”；
 *          当货物为“非接货”时，系统自动匹配生成公布价“非接货的价格方案”； 2）空运：系统自动匹配公布价 “空运价格方案”；
 *          空运价格只有上门发货一套价格方案， 如有接货费在其他费用里添加一项接货费。
 *          （来自价格基础资料，下载并且使用当前启用的最新的价格版本，参考SUC-547下载基础资料PC-SR1） SR3
 *          1）计费方式分为重量计费、体积计费；重量、 体积计费的运费=每公斤单价与货物实际重量的乘积 或 每方单价与货物实际体积的乘积，
 *          对于一票货物，系统按重量和体积分别计算并取大优先的原则计费给出公布价总运费, 计费方式即为取大的一方； SR4
 *          参考suc-403生成运单SR1: 系统自动检测，如果客户端X天还没有更新， 不能打开离线运单界面，并提示“请在间隔X天内，在线登录系统
 * 
 * 
 *          录入运输信息（离线）SUC业务规则 营业员点击运单开单，进入运单开单界面。 本界面标题：录入运输信息。
 *          界面信息包括：收货部门、单号、运输性质、配载类型、 提货方式、目的站、提货网点、上门接货、集中接货、对外备注、
 *          对内备注、储运注意事项、配载线路（配载航班）、配载部门、 最终配载部门、预计出发时间、预计派送/提货时间。 1. 收货部门：揽货部门；
 *          2. 单号：运单单号； 3. 运输性质：公司产品类型，包括精准空运、精准汽运（长途）、 精准卡航、精准城运、汽运偏线、精准汽运（短途）；
 *          4. 配载类型：公司走货方式，包括专线、偏线（外发）、合大票、单独开单； 5.
 *          提货方式：公司提供的送货方式，包括自提（不含机场提货费）、 免费自提、机场自提、送货上门、免费送货、自提、内部带货自提、送货进仓； 6.
 *          目的站：客户所发货物要到达的目的城市和区域； 7. 提货网点：收货客户可以领取货物的部门； 8.
 *          上门接货：我司提货的一种服务，司机上门接货，确认承运， 有区别于客户上门发货； 9.
 *          集中接货：是否为集中接送货区域，以集中接货的方式揽货， 是对上门接货的一个属性补充； 10.
 *          对外备注：客户可以看到的备注信息，包括：空、保丢不保损、 “不承保发霉、变质、虫蛀虫咬之损失”、“ 不承保刮花、变形、撞凹之损失”、
 *          不可重压、易潮、不可倒置、客户指定提货网点； 11. 对内备注：仅限公司内部人员看到的备注信息； 12.
 *          储运注意事项：对外备注和对内备注信息的叠加； 13. 配载线路（配载航班）:配载类型为偏线（外发）或专线时时，
 *          显示“配载线路”，为从出发部门到达开单目的站，我司走货的线路；
 *          配载类型为合大票或单独开单时，显示“配载航班”，为我司规则的空运走货的航班类型， 包括早班、中班、晚班； 14.
 *          配载部门:开单收货部门出发货配载专线； 15. 最终配载部门:货物到达的最终部门； 16. 预计出发时间:我司走货的预计出发时间，
 *          适用于运输类型为“精准卡航”及“精准城运”； 17. 预计派送/提货时间: 我司承诺客户的可提货或送货的时间，
 *          适用于运输类型为“精准卡航”及“精准城运”； 1.6 操作步骤 序号 基本步骤 相关数据 补充步骤 1 录入收货部门 1.
 *          规则-请参考SUC-496录入运输信息-系统规则SR1； 2 录入单号 1. 系统校验单号的合法性；单号唯一在离线提交时，判断，
 *          除单号唯一性其他参考规则SR1 3 录入运输性质 1. 规则-请参考SUC-496录入运输信息-系统规则SR2、SR3； 4
 *          录入配载类型 1. 规则-请参考SUC-496录入运输信息-系统规则SR3、SR4、SR5、SR6； 5 录入提货方式 1.
 *          规则-请参考SUC-496录入运输信息-系统规则SR4、SR6、SR7、SR8； 6 录入目的站 1.
 *          规则-请参考SUC-496录入运输信息-系统规则SR9； 7 录入提货网点 1.
 *          规则-请参考SUC-496录入运输信息-系统规则SR5、SR8、SR9、SR10； 8 勾选是否上门接货 1.
 *          规则-请参考SUC-496录入运输信息-系统规则SR11； 2. 勾选上门接货，必须输入司机工号，司机工号为6为数字。参考规则SR3 9
 *          勾选是否集中接货 1. 规则-请参考SUC-496录入运输信息-系统规则SR11、SR12； 10 录入对外备注 1.
 *          规则-请参考SUC-496录入运输信息-系统规则SR13、SR14； 11 录入对内备注 1. 参考规则SR2 12 生成储运注意事项
 *          1. 规则-请参考SUC-496录入运输信息-系统规则SR14； 13 录入配载线路（配载航班） 1.
 *          规则-请参考SUC-496录入运输信息-系统规则SR15； 2. 参考SUC-547下载基础资料(PC) 14 录入配载部门 1.
 *          规则-请参考SUC-496录入运输信息-系统规则SR16； 15 录入最终配载部门 1.
 *          规则-请参考SUC-496录入运输信息-系统规则SR17； 16 生成预计出发时间 1.
 *          规则-请参考SUC-496录入运输信息-系统规则SR18； 17 生成预计派送/提货时间 1.
 *          规则-请参考SUC-496录入运输信息-系统规则SR19； 1.7 业务规则 序号 描述 SR1 1、单号为8-9位数字，
 *          不能输入重复单号。 SR2 1、对内备注仅公司内部人员可见， 输入字符长度不得超过500。 SR3 1、当勾选上门接货时，
 *          司机工号必填，且为6位数字。 SR4 参考suc-403生成运单SR1: 系统自动检测，如果客户端X天还没有更新，
 *          不能打开离线运单界面，并提示“请在间隔X天内，在线登录系统
 * 
 * 
 *          录入收货客户信息（离线）SUC业务规则
 * 
 *          1.1 相关业务用例 BUC_FOSS_5.20.30_550 营业部离线开单 1.2 用例描述 营业员通过本用例录入收货客户信息。
 *          1.3 用例条件 条件类型 描述 引用系统用例 前置条件 1. 离线登录成功 后置条件 1.4 操作用户角色 操作用户 描述 营业员
 *          可查询、录入、修改收货客户信息 1.5 界面要求 1.5.1 表现方式 Web方式 1.5.2 界面原型 1.5.3 界面描述
 *          营业员点击运单开单，进入运单开单界面。 本界面为录入收货客户信息。 界面为信息录入界面包括：手机、电话、客户名称、
 *          客户编码、收货联系人（收货部门）、收货人地址； 1. 手机：收货人手机号码； 2. 电话：收货人电话号码，可以添加多个； 3.
 *          收货联系人：收货客户的客户姓名； 4. 收货人地址：收货客户的详细联系地址， 支持国家行政区域自动过滤； 1.6 操作步骤 序号
 *          基本步骤 相关数据 补充步骤 1 录入手机号码 1. 规则-请参见系统规则SR1； 2 录入电话号码 1. 规则-请参见系统规则SR1；
 *          3 录入收货联系人（收货部门） 规则-请参见系统规则SR3、SR4； 4 录入收货人地址 1. 规则-请参见系统规则SR2； 1.7
 *          业务规则 序号 描述 SR1 1. 收货客户手机号码及固定电话至少提供一个， 手机号码只能为数字并且为11位，固定电话号码只能为数字，
 *          且可添加多个；添加多个时，必须用“，”或“、”或“/”分开； 固定电话号码字段也可以录入手机号； SR2 1.
 *          客户详细地址必填至乡/镇， 且乡镇下一级内容不能为空； SR3 1. 当“运单开单”中的“开单提货方式”为“内部带货自提”时，
 *          “收货联系人”字段更改为“收货部门”； SR4 1.
 *          若为公司内部带货，则收货客户信息中的收货部门名称必须与OA系统中组织架构名称保持一致； SR5
 *          前提：收货人信息都已填充完毕，再进行手机号， 电话号码修改： ① 如在三月记录中，是否再次弹出框选择记录后覆盖原来的信息，
 *          不选择只修改手机号or电话号码，发货客户其他信息不置空 ② 如不在三月记录中，是否只修改手机号或电话，
 *          发货客户其他信息不置空------- 1、再次弹出框选择记录后覆盖原来的信息2、
 *          如果带出时是CRM客户，那么要删除客户编码和客户名称后才能够修改联系人信息，
 *          如果带出来不是，那么可以直接修改，那么修改电话号码和手机号，带出的信息都会覆盖
 * 
 * 
 *          录入发货客户信息（离线）SUC业务规则
 * 
 *          1.1 相关业务用例 BUC_FOSS_5.60.05_520 确认承运信息 1.2 用例描述
 *          营业员在网络不通时，通过本用例录入发货客户信息。 1.3 用例条件 条件类型 描述 引用系统用例 前置条件 离线登录成功； 后置条件
 *          1. 运单收银 2. 录入增值服务信息 1.4 操作用户角色 操作用户 描述 营业员 可查询、录入、修改发货客户信息 1.5 界面要求
 *          1.5.1 表现方式 Web方式 1.5.2 界面原型 1.5.3 界面描述 营业员点击运单开单，进入运单开单界面。
 *          本界面为录入发货客户信息。 界面为信息录入界面：包括：手机、电话、 发货联系人（发货部门）、发货人地址； 1. 手机：发货人手机号码；
 *          2. 电话：发货人电话号码，可以添加多个； 3. 发货联系人（发货部门）：发货客户的客户姓名，
 *          当“运单开单”中的“开单提货方式”为“内部带货自提”时， “发货联系人”字段更改为“发货部门”； 4.
 *          发货人地址：发货客户的详细联系地址， 支持国家行政区域自动过滤； 1.6 操作步骤 序号 基本步骤 相关数据 补充步骤 1 录入手机号码
 *          1. 规则-请参见系统规则SR1； 2 录入电话号码 1. 规则-请参见系统规则SR1； 3 录入发货联系人（发货部门） 1.
 *          规则-请参见系统规则SR2、SR3； 4 录入发货人地址 1. 提供下拉框选择输入，系统自动过滤输入的行政区下一级行政级的字段； 2.
 *          规则-请参见系统规则SR4； 1.7 业务规则 序号 描述 SR1 1. 发货客户手机号码及固定电话至少提供一个，
 *          手机号码只能为数字并且为11位，固定电话号码只能为数字， 且可添加多个,
 *          添加多个时，必须用“，”或“、”或“/”分开；固定电话号码字段也可以录入手机号； SR2 1.
 *          当“运单开单”中的“开单提货方式”为“内部带货自提”时， “发货联系人”字段更改为“发货部门”； SR3 1.
 *          若为公司内部带货，则发货客户信息中的发货部门名称必须与OA系统中组织架构名称保持一致； SR4 1.
 *          客户详细地址必填至乡/镇，且乡镇下一级内容不能为空； SR5 1．焦点到联系人文本框后，下个焦点直接跳过地址分段输入框，到下个控件
 * 
 */

public class LabelPrintInfoService implements ILabelPrintInfoService {

	// 日志
	private static final Log log = LogFactory.getLog(LabelPrintInfoService.class);
	public static final String TRUE = "true";
	public static final String FALSE = "false";
	
	private static final int THREE = 3;
	private static final int FOUR =4;
	private static final int FIVE = 5;
	private static final int SIX = 6;
	private static final int SEVEN = 7;
	
	/**
	 * 加星标营业部服务
	 */
	private IAsteriskSalesDeptService asteriskSalesDeptService;
	
	/**
	 * 
	 * <p>设置加星标营业部服务</p> 
	 * @author DP-Foss-YueHongJie
	 * @date 2013年5月14日 上午10:57:03
	 * @param asteriskSalesDeptService
	 * @see
	 */
	public void setAsteriskSalesDeptService(
		IAsteriskSalesDeptService asteriskSalesDeptService) {
	    this.asteriskSalesDeptService = asteriskSalesDeptService;
	}

	private static final String SLASH = "-";

	/**
	 * 判断标签是否为送货。 标签打印简称“送”
	 */
	private static final String RECEVICEMETHOD_DELIVER = "送";

	/**
	 * 除送货以外 都为自提。 标签打印简称“自”
	 */
	private static final String RECEVICEMETHOD_PICKUP = "自";

	/**
	 * 接送货 运单DAO层
	 */
	private IWaybillDao waybillDao;

	/**
	 * 接送货 actualFreightDao DAO层
	 */
	private IActualFreightDao actualFreightDao;

	/**
	 * 综合 组织信息 Service接口
	 */
	private IOrgAdministrativeInfoService orgAdministrativeInfoService;
	
	/**
	 * 行政组织服务接口
	 */
	private IAdministrativeRegionsService administrativeRegionsService;

	/**
	 * 综合 走货路径服务类
	 */
	private IFreightRouteService freightRouteService;

	/**
	 * 综合 库区服务类
	 */
	private IGoodsAreaService goodsAreaService;

	/**
	 * (实现ExpressPrintStar的Service接口)
	 */
		
	 private IExpressPrintStarService expressPrintStarService;
	 
	 /**
	 * 调度订单实体DAO
	 */
		private IDispatchOrderEntityDao dispatchOrderEntityDao; 
		
	 
	/* public IDispatchOrderEntityDao getDispatchOrderEntityDao() {
		return dispatchOrderEntityDao;
	}*/

	public void setDispatchOrderEntityDao(
			IDispatchOrderEntityDao dispatchOrderEntityDao) {
		this.dispatchOrderEntityDao = dispatchOrderEntityDao;
	}

	/**
	  * 客户持久层
	  */
	 private ICustomerDao customerDao;
	 
	 public void setCustomerDao(ICustomerDao customerDao) {
		this.customerDao = customerDao;
	 }
	 
	public IExpressPrintStarService getExpressPrintStarService() {
		return expressPrintStarService;
	}
	public void setExpressPrintStarService(
			IExpressPrintStarService expressPrintStarService) {
		this.expressPrintStarService = expressPrintStarService;
	}

	/**
	 * 接送货 产品定义service
	 */
	private IProductService productService;

	/**
	 * 综合 外场service接口
	 */
	private IOutfieldService outfieldService;

	/**
	 * 接送货 运单管理接口
	 */
	private IWaybillManagerService waybillManagerService;

	/**
	 * 综合 营业部service
	 */
	private ISaleDepartmentService saleDepartmentService;

	/**
	 * 综合 偏线代理网点service 接口
	 */
	private IVehicleAgencyDeptService vehicleAgencyDeptService;
	
	/**
	 * 快递代理外发代理服务接口
	 */
	private ILdpAgencyDeptService ldpAgencyDeptService;
	
	private IWaybillPendingService waybillPendingService;

	/**
	 * 价格模型货物类型Service
	 */
	private IGoodsTypeService goodsTypeService;
	
	/**
	 * 更改单服务接口
	 */
	private IWaybillRfcService waybillRfcService;
	
	/**
	 * 远程运单服务
	 */
	IWaybillHessianRemoting waybillHessianRemoting;
	
	/**
	 * 部门复杂查询 
	 */
	IOrgAdministrativeInfoComplexService orgAdministrativeInfoComplexService;
	
	/**
	 * 数据字典服务
	 */
	private IDataDictionaryValueService dataDictionaryValueService;
	
	/**
	 * 货签服务类
	 */
	private ILabeledGoodService labeledGoodService;
	
	/**
	 * 货签服务类
	 */
	public void setLabeledGoodService(ILabeledGoodService labeledGoodService) {
		this.labeledGoodService = labeledGoodService;
	}
	
	/**
	 * 数据字典服务
	 */
	public void setDataDictionaryValueService(IDataDictionaryValueService dataDictionaryValueService) {
		this.dataDictionaryValueService = dataDictionaryValueService;
	}
	
	/**
	 * 部门复杂查询 
	 */
	public void setOrgAdministrativeInfoComplexService(
			IOrgAdministrativeInfoComplexService orgAdministrativeInfoComplexService) {
		this.orgAdministrativeInfoComplexService = orgAdministrativeInfoComplexService;
	}
	/**
	 * 远程运单服务
	 */
	public void setWaybillHessianRemoting(
			IWaybillHessianRemoting waybillHessianRemoting) {
		this.waybillHessianRemoting = waybillHessianRemoting;
	}
	/**
	 * 更改单服务接口service
	 * @author 105888-foss-zhangxingwang
	 */
	public void setWaybillRfcService(IWaybillRfcService waybillRfcService) {
		this.waybillRfcService = waybillRfcService;
	}
	
	/**
	 * 更改单服务接口service
	 * @author 105888-foss-zhangxingwang
	 * @date 2013-7-12 11:07:43
	 */
	private ICalculateTransportPathService calculateTransportPathService;
	
	/**
	 * 更改单服务接口service
	 * @author 105888-foss-zhangxingwang
	 * @date 2013-7-12 11:07:43
	 */
	private IStockService stockService;
	
	private IPrintMarketingContentService printMarketingContentService;
	
	public void setPrintMarketingContentService(
			IPrintMarketingContentService printMarketingContentService) {
		this.printMarketingContentService = printMarketingContentService;
	}
	
	/**
	 * 货物库存接口service
	 * @author 105888-foss-zhangxingwang
	 * @date 2013-7-12 11:07:43
	 */
	public void setStockService(IStockService stockService) {
		this.stockService = stockService;
	}
	/**
	 * 根据出发、库存、到达部门查询走货路径接口service
	 * @author 105888-foss-zhangxingwang
	 * @date 2013-7-12 11:07:43
	 */
	public void setCalculateTransportPathService(
			ICalculateTransportPathService calculateTransportPathService) {
		this.calculateTransportPathService = calculateTransportPathService;
	}
	/**
	 * set 价格模型-货物类型
	 * @author 099223-foss-yuehongjie
	 * @date 2013-5-16
	 */
	public void setGoodsTypeService(IGoodsTypeService goodsTypeService){
		this.goodsTypeService = goodsTypeService;
	}
	
	/**
	 * set 综合 营业部service
	 * 
	 * @author 097972-foss-dengtingting
	 * @date 2013-3-11 下午5:49:11
	 */
	public void setSaleDepartmentService(ISaleDepartmentService saleDepartmentService) {
		this.saleDepartmentService = saleDepartmentService;
	}

	/**
	 * set 综合 偏线代理网点service 接口
	 * 
	 * @author 097972-foss-dengtingting
	 * @date 2013-3-11 下午5:50:08
	 */
	public void setVehicleAgencyDeptService(IVehicleAgencyDeptService vehicleAgencyDeptService) {
		this.vehicleAgencyDeptService = vehicleAgencyDeptService;
	}

	
	public void setLdpAgencyDeptService(ILdpAgencyDeptService ldpAgencyDeptService) {
		this.ldpAgencyDeptService = ldpAgencyDeptService;
	}
	/**
	 * set 接送货 运单管理接口
	 * 
	 * @author 097972-foss-dengtingting
	 * @date 2013-3-11 下午5:50:45
	 */
	public void setWaybillManagerService(IWaybillManagerService waybillManagerService) {
		this.waybillManagerService = waybillManagerService;
	}

	/**
	 * set 产品定义service
	 * 
	 * @author 097972-foss-dengtingting
	 * @date 2013-3-11 下午5:52:30
	 */
	public void setProductService(IProductService productService) {
		this.productService = productService;
	}

	/**
	 * set actualFreightDao
	 * 
	 * @author 097972-foss-dengtingting
	 * @date 2013-3-11 下午5:52:52
	 */
	public void setActualFreightDao(IActualFreightDao actualFreightDao) {
		this.actualFreightDao = actualFreightDao;
	}

	/**
	 * set freightRouteService
	 * 
	 * @author 097972-foss-dengtingting
	 * @date 2013-3-11 下午5:53:10
	 */
	public void setFreightRouteService(IFreightRouteService freightRouteService) {
		this.freightRouteService = freightRouteService;
	}

	/**
	 * set waybillDao
	 * 
	 * @author 097972-foss-dengtingting
	 * @date 2013-3-11 下午5:53:22
	 */
	public void setWaybillDao(IWaybillDao waybillDao) {
		this.waybillDao = waybillDao;
	}

	/**
	 * 获得 orgAdministrativeInfoService
	 * 
	 * @author 097972-foss-dengtingting
	 * @date 2013-3-11 下午5:53:51
	 */
	public IOrgAdministrativeInfoService getOrgAdministrativeInfoService() {
		return orgAdministrativeInfoService;
	}

	/**
	 * set orgAdministrativeInfoService
	 * 
	 * @author 097972-foss-dengtingting
	 * @date 2013-3-11 下午5:55:21
	 */
	public void setOrgAdministrativeInfoService(IOrgAdministrativeInfoService orgAdministrativeInfoService) {
		this.orgAdministrativeInfoService = orgAdministrativeInfoService;
	}
	
	
	public void setAdministrativeRegionsService(IAdministrativeRegionsService administrativeRegionsService) {
		this.administrativeRegionsService = administrativeRegionsService;
	}
	/**
	 * 获得 goodsAreaService
	 * 
	 * @author 097972-foss-dengtingting
	 * @date 2013-3-11 下午5:55:40
	 */
	public IGoodsAreaService getGoodsAreaService() {
		return goodsAreaService;
	}

	/**
	 * set goodsAreaService
	 * 
	 * @author 097972-foss-dengtingting
	 * @date 2013-3-11 下午5:56:31
	 */
	public void setGoodsAreaService(IGoodsAreaService goodsAreaService) {
		this.goodsAreaService = goodsAreaService;
	}

	/**
	 * set outfieldService
	 * 
	 * @author 097972-foss-dengtingting
	 * @date 2013-3-11 下午5:57:35
	 */
	public void setOutfieldService(IOutfieldService outfieldService) {
		this.outfieldService = outfieldService;
	}
	
	/**
	 * 注入运单暂存service
	 * @author 097972-foss-dengtingting
	 * @date 2013-4-15 下午2:27:15
	 */
	public void setWaybillPendingService(IWaybillPendingService waybillPendingService) {
		this.waybillPendingService = waybillPendingService;
	}
	
	private IOmsOrderService omsOrderService;
	
	public void setOmsOrderService(IOmsOrderService omsOrderService) {
		this.omsOrderService = omsOrderService;
	}

	/**
	 * @功能 查询该单是否存在更改目的站未受理的状态
	 * @author 105888-foss-zhangxingwang
	 * @date 2013-7-9 14:04:24
	 */
	public String isExsitWaybillRfcDestinationAndHandlerNotTodo(WaybillEntity waybillEntity, List<String> serialNos){

		//是否更改过目的站
		boolean isChangeDestination = waybillRfcService.isChangeCustomerPickupOrgCode(waybillEntity);
		if(isChangeDestination){
			//受理是否异常，当所有处理都成功了，返回false，否则返回true
			boolean isExistNotTodo = waybillRfcService.isExistsNotHandleTodo(waybillEntity, serialNos);
			if(!isExistNotTodo){
				return "WAY_TFR";//zhongzhuan 
			}else{
				return "WAY_UNDO";//buzhuanda .
			}
		}else{
			return "WAY_BSE";//bse
		}
		
	}
	
	/**
	 * @功能 根据出发、库存、到达部门查找走火路径
	 * @author 105888-foss-zhangxingwang
	 * @date 2013-7-12 11:10:13
	 */
	@Override
	public List<BarcodePrintLabelDto> getLabelPrintInfoReceAndStockAndArri(String waybillNo, List<String> serialNos) {
		// 获得运单基本信息
		BarcodePrintLabelDto printLabelDto = getWaybillInfo(waybillNo, null);
		if (printLabelDto == null) {
			throw new WaybillLabelPrintException(
					WaybillLabelPrintException.PRINT_EXISTWYBILL_EXCEPTION);
		}
		// 获得单个走货路径 以及流水号
		List<BarcodePrintLabelDto> printLabelBeanList = getFreightRouteInfos(
				printLabelDto.getWaybillBean(), serialNos,
				printLabelDto.getProductCode());

		if (printLabelBeanList != null && !printLabelBeanList.isEmpty()) {
			// 将运单信息 以及每个货件的走货路径合并
			for (BarcodePrintLabelDto dto : printLabelBeanList) {
				BeanUtils.copyProperties(printLabelDto, dto, false);
			}
		}
		// getLabeledGoodsInfo(waybillNo, serialNos);
		return printLabelBeanList;
	}
	
	/**
	 * 得到标签打印的信息
	 * 
	 * @author foss-jiangfei
	 * @date 2012-11-13 下午4:24:34
	 * @param waybillNo
	 *            运单号
	 * @param serialNos
	 *            流水号集合
	 * @return BarcodePrintLabelDto
	 * @see
	 */
	@Override
	public BarcodePrintLabelDto getLabelPrintInfos(String waybillNo, List<String> serialNos,String waybillStatus) {
		// 获得运单基本信息
		BarcodePrintLabelDto printLabelBean = getWaybillInfo(waybillNo,waybillStatus);
		if (printLabelBean != null) {
			
			//如果是整车，则不设置走货路径
			if(!PricingConstants.ProductEntityConstants.PRICING_PRODUCT_FULL_VEHICLE.equals(printLabelBean.getProductCode())){
					getFreightRoute(printLabelBean);
			}
			// 获得的流水号
			getLabeledGoodsInfo(printLabelBean, serialNos);
		} else {
			printLabelBean = new BarcodePrintLabelDto();
		}
		log.info(waybillNo+"标签打印最终始发站 :"+printLabelBean.getLeavecity());
		return printLabelBean;
	}

	/**
	 * 得到标签打印的信息(合票专用)
	 * 
	 * @author fanbangyu
	 * @date 2015-9-17 下午4:24:34
	 * @param waybillNo
	 *            运单号
	 * @param serialNos
	 *            流水号集合
	 * @return BarcodePrintLabelDto
	 * @see
	 */
	public  BarcodePrintLabelDto getGxgLabelPrintInfos(WaybillPendingEntity pend,List<String> serialNos,String waybillStatus){
		BarcodePrintLabelDto printLabelBean = getGxgWaybillInfo(pend,waybillStatus);
		if (printLabelBean != null) {
			
			//如果是整车，则不设置走货路径
			if(!PricingConstants.ProductEntityConstants.PRICING_PRODUCT_FULL_VEHICLE.equals(printLabelBean.getProductCode())){
				// 获取综合走货路径
				try{
				getFreightRoute(printLabelBean);
				}catch (Exception e) {
					log.info("找不到获取综合走货路径");
				}
			}
			
			// 获得的流水号
			getLabeledGoodsInfo(printLabelBean, serialNos);
		} else {
			printLabelBean = new BarcodePrintLabelDto();
		}
		return printLabelBean;
	}
	
	
	/**
	 * 得到标签打印的信息 调用中转接口
	 * 
	 * @author foss-jiangfei
	 * @date 2012-11-13 下午4:24:34
	 * @param waybillNo
	 *            运单号
	 * @param serialNos
	 *            流水号
	 * @return
	 * @see
	 */
	@Override
	public List<BarcodePrintLabelDto> getLabelPrintInfoForDepart(String waybillNo, List<String> serialNos) {
		// 获得运单基本信息
		BarcodePrintLabelDto printLabelDto = getWaybillInfo(waybillNo,null);
		if (printLabelDto == null) {
			throw new WaybillLabelPrintException(WaybillLabelPrintException.PRINT_EXISTWYBILL_EXCEPTION);
		}
		
		List<BarcodePrintLabelDto> printLabelBeanList = null;
		//如果不是整车
		if(!PricingConstants.ProductEntityConstants.PRICING_PRODUCT_FULL_VEHICLE.equals(printLabelDto.getProductCode())){
			// 获得单个走货路径 以及流水号
			printLabelBeanList = getFreightRouteInfo(printLabelDto.getWaybillBean(), serialNos, printLabelDto.getProductCode());
			if (printLabelBeanList != null && !printLabelBeanList.isEmpty()) {
				// 将运单信息 以及每个货件的走货路径合并
				for (BarcodePrintLabelDto dto : printLabelBeanList) {
					BeanUtils.copyProperties(printLabelDto, dto, false);
				}
			}
		}
		//如果是整车
		if(PricingConstants.ProductEntityConstants.PRICING_PRODUCT_FULL_VEHICLE.equals(printLabelDto.getProductCode())){
			printLabelBeanList = new ArrayList<BarcodePrintLabelDto>();
			BarcodePrintLabelDto tempDto = new BarcodePrintLabelDto();
			BeanUtils.copyProperties(printLabelDto, tempDto, false);
			printLabelBeanList.add(tempDto);
		}
		return printLabelBeanList;
	}

	/**
	 * @author foss-jiangfei
	 * @date 2012-12-1 下午1:30:30
	 * @param waybillNo
	 *            运单号
	 * @param serialNos
	 *            流水号列表
	 */ 
	private List<BarcodePrintLabelDto> getFreightRouteInfo(WaybillEntity waybill, List<String> serialNos, String productCode) {
		// 得到运单基本信息
	    	String waybillNo = waybill.getWaybillNo();
		// 得到下面的走货路径的顺序是和List String serialNos顺序一致的
		List<BarcodePrintLabelDto> printLabelBeanList = new ArrayList<BarcodePrintLabelDto>();
		PathDetailEntity pathDetail = new PathDetailEntity();
		pathDetail.setWaybillNo(waybillNo);
		//按照岳红杰想法去排序，这个更绝
		if(serialNos.size()>1){
			Collections.sort(serialNos);
		}
		List<RouteLineInfoDto> pathDetailList;
			for (int i = 0; i < serialNos.size(); i++) {
				pathDetail.setGoodsNo(serialNos.get(i));
				// 得到每个货件的走货路径 a-A A-B B-C C-D D-d
				pathDetailList = waybillManagerService.getRouteDetailInfo(waybillNo, serialNos.get(i));
				if (pathDetailList.size() > 0) {
					// 解析该件货对应的走货路径 赋值给打印路径bean
					printLabelBeanList.add(parseTheRoute(pathDetailList, productCode,waybill));
				} else {
					break;
				}
			}
		return printLabelBeanList;

	}
	
	/**
	 * @功能 根据出发、库存、到达部门查询走货路径
	 * @author 105888-foss-zhangxingwang
	 * @date 2013-7-12 11:14:14
	 * @param waybill
	 * @param serialNos
	 * @param productCode
	 * @return
	 */
	private List<BarcodePrintLabelDto> getFreightRouteInfos(WaybillEntity waybill, List<String> serialNos, String productCode) {
		// 得到运单基本信息
	    String waybillNo = waybill.getWaybillNo();
		// 得到下面的走货路径的顺序是和List String serialNos顺序一致的
		List<BarcodePrintLabelDto> printLabelBeanList = new ArrayList<BarcodePrintLabelDto>();
		PathDetailEntity pathDetail = new PathDetailEntity();
		pathDetail.setWaybillNo(waybillNo);
		String origCode = waybill.getReceiveOrgCode();//收货部门Code
		String transModel = waybill.getProductCode();//产品类型
		String objCode = waybill.getCustomerPickupOrgCode();//到达部门
		String currentCode = null;//当前库存部门Code
		
		/**
		 * 判断是否是集中开单
		 */
		if (StringUtils.isNotEmpty(waybill.getPickupCentralized()) && StringUtils.equals(FossConstants.YES, waybill.getPickupCentralized())) {
			//查询组织信息
			OrgAdministrativeInfoEntity orgAdministrativeInfoEntity = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCode(waybill.getCreateOrgCode(),waybill.getBillTime());
			//这里相当于集中开单组最多走三次查询，先查历史记录，如果没有，在找实时的数据，实在找不到，再走中转的走货路径
			if(FossConstants.YES.equals(orgAdministrativeInfoEntity.getBillingGroup())){
				//判断是否是 异地开单
				String  createOrgCode= waybill.getCreateOrgCode();
				if(StringUtil.isNotEmpty(waybillNo)){
					WaybillPictureEntity entity = waybillHessianRemoting.queryWaybillPictureByWaybillNo(waybillNo);
					if(entity!=null && FossConstants.NO.equals(entity.getLocal())){
						//根据本属开单组去查询
						createOrgCode = entity.getLocalBillGroupCode();
					}
				}
				//历史查找
				SaleDepartmentEntity saleDepartment = waybillManagerService.queryPickupCentralizedDeptCodeAndBillTime(createOrgCode,waybill.getBillTime());
				if (saleDepartment != null) {
					origCode = saleDepartment.getCode();
				}else{
					//再实时的查找当前数据
					String transCenterCode = waybillManagerService.queryTransCenterByBillingGroupCode(createOrgCode);
					SaleDepartmentEntity deliverDepartment = orgAdministrativeInfoComplexService.queryStationLeaveOrgByOutfieldCode(transCenterCode);
					if(deliverDepartment == null){
						//如果再找不到，则抛出异常，直接调用中转的走货路径：GUI和Web都有相应的扑捉Exception 方法
						throw new WaybillLabelPrintException("根据集中开单组"+orgAdministrativeInfoEntity.getName()+"("+orgAdministrativeInfoEntity.getCode()+")没有找到对应的外场出发驻地部门!");
					}
					origCode = deliverDepartment.getCode();
				}
			}
		}
	    
		
		//得到运单的库存信息问题，实现通用性。这里说明一下。
		//循环调用stockService方法，主要是因为两个信息都是索引，所以问题不大
		StockEntity entity = new StockEntity();
		List<StockEntity> stockList = new ArrayList<StockEntity>();
		for(int i = 0; i < serialNos.size(); i++){
			entity = stockService.queryUniqueStock(waybillNo, serialNos.get(i));
			stockList.add(entity);
		}
		
		pathDetail.setWaybillNo(waybillNo);
		List<PathDetailEntity> pathDetailList;
		for (int i = 0; i < stockList.size(); i++) {
			currentCode = stockList.get(i).getOrgCode();
			pathDetail.setGoodsNo(serialNos.get(i));
			// 得到每个货件的走货路径 a-A A-B B-C C-D D-d
			pathDetailList = calculateTransportPathService.queryPathDetailEntityListForPrintLabel(origCode, currentCode, objCode, transModel);
	
			if (pathDetailList.size() > 0) {
				// 解析该件货对应的走货路径 赋值给打印路径bean
				printLabelBeanList.add(parseTheTempRoute(pathDetailList, productCode,waybill,stockList.get(i).getSerialNO()));
			} else {
				break;
			}
		}
		return printLabelBeanList;

	}
	
	/**
	 * @功能
	 * @param pathDetailList
	 * @param productCode
	 * @param waybill
	 * @param SerialNo 
	 * @return
	 */
	private BarcodePrintLabelDto parseTheTempRoute(
			List<PathDetailEntity> pathDetailList, String productCode,
			WaybillEntity waybill, String serialNo) {
		
		//通过这个转换RouteLineInfoDto与PathDetailEntity的关系
		List<RouteLineInfoDto> routeLineInfoList = new ArrayList<RouteLineInfoDto>();
		//获得线段列表
		for (PathDetailEntity path : pathDetailList) {
			//DTO接收从中转获取的走货路径  PathDetailEntity
			RouteLineInfoDto routeLineDto = new RouteLineInfoDto();
			//出发部门
			routeLineDto.setOrigOrgCode(path.getOrigOrgCode());
			//下一到达部门
			routeLineDto.setObjectiveOrgCode(path.getObjectiveOrgCode());
			//流水号
			routeLineDto.setGoodsNo(serialNo);
			//运单号
			routeLineDto.setWaybillNo(path.getWaybillNo());
			//加入集合
			routeLineInfoList.add(routeLineDto);
		}
		//再调用parseTheRoute生成BarcodePrintLabelDto
		return parseTheRoute(routeLineInfoList, productCode,waybill);
	}
	/**
	 * 解析该件货对应的走货路径 赋值给打印路径bean
	 * 
	 * @author foss-jiangfei
	 * @date 2012-12-1 下午1:36:30
	 * @param pathDetail
	 */
	private BarcodePrintLabelDto parseTheRoute(List<RouteLineInfoDto> pathDetail, String productCode,WaybillEntity waybillBean) {
		BarcodePrintLabelDto printLabelBean = new BarcodePrintLabelDto();
		// 得到 走货路径 a-A-B-C-D-d （去掉始发营业部）
		StringBuffer path = new StringBuffer();
		// 走货路径 对应 货区号
		List<String> goodsAreaCodeList = new ArrayList<String>();
		// 最终外场部门编码 == 最终外场编码等于 走货路径的最后一条的 出发部门
		String lastChangeCenterOrgCode = pathDetail.get(pathDetail.size() - 1).getOrigOrgCode();
		//350909     郭倩云     倒数第二个外场org编码
		String lastChangeCenterOrgCode2 = null;
		//350909     郭倩云     倒数第三个外场org编码
		String lastChangeCenterOrgCode3 = null;
		//350909     郭倩云     获取倒数第二个和倒数第三个外场org编码
		if (CollectionUtils.isNotEmpty(pathDetail)&&pathDetail.size()==3){
			lastChangeCenterOrgCode2=pathDetail.get(pathDetail.size() - 2).getOrigOrgCode();
		}else if(CollectionUtils.isNotEmpty(pathDetail)&&pathDetail.size()>3){
			lastChangeCenterOrgCode2=pathDetail.get(pathDetail.size() - 2).getOrigOrgCode();
			lastChangeCenterOrgCode3=pathDetail.get(pathDetail.size() - 3).getOrigOrgCode();
		}
		
		int m = 0;
		//判断是否为集中开单组，如果是则第一个就是外场，否则从第二个开始
		if(pathDetail.size()>1){
			OmsOrderEntity omsOrder = omsOrderService.queryOmsOrderByWaybillNo(waybillBean.getWaybillNo());
			if(omsOrder != null){
				//如果是零担电子运单，那么从OmsOrder订单中取是否集中接货
				if(!FossConstants.YES.equals(omsOrder.getPickupCentralized())){
					m=1;
				}
			}else{
				if(FossConstants.NO.equals(waybillBean.getPickupCentralized())){
					m = 1;
				}
			}
		}
		
		//
		// 出发部门
		path.append(pathDetail.get(m).getOrigOrgCode());
		
		
		/** 根据到达部门判断是否追加星符号 ***/
		if(asteriskSalesDeptService.queryAsteriskDeptByCode(waybillBean.getCustomerPickupOrgCode())){
	    	    printLabelBean.setIsStarFlag("true");//记录星标记
		}
		
		// 空运、偏线目的站编码
		if (ProductEntityConstants.PRICING_PRODUCT_PARTIAL_LINE.equals(productCode) || ProductEntityConstants.PRICING_PRODUCT_AIR_FREIGHT.equals(productCode)) {
			for (int i = m; i < pathDetail.size(); i++) {
				RouteLineInfoDto route = pathDetail.get(i);
				// 判断到达部门 是否为外场
				OrgAdministrativeInfoEntity orgEntity = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeClean(pathDetail.get(i).getObjectiveOrgCode());
				if (orgEntity != null && FossConstants.YES.equals(orgEntity.getTransferCenter())) {
					// 到达部门
					path.append(SLASH).append(pathDetail.get(i).getObjectiveOrgCode());
				}
				// 判断出发部门是否为外场
				OrgAdministrativeInfoEntity orgStartEntity = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeClean(pathDetail.get(i).getOrigOrgCode());
				String goodsAreaCode = null;
				if (orgStartEntity != null && FossConstants.YES.equals(orgStartEntity.getTransferCenter())) {
					// 根据走货路径获得货区号

					// 偏线查询货区
					if (i == pathDetail.size() - 1) {
						List<GoodsAreaEntity> goodsAreaEntities = new ArrayList<GoodsAreaEntity>();
						// 空运货区
						if (ProductEntityConstants.PRICING_PRODUCT_AIR_FREIGHT.equals(productCode)) {
							goodsAreaEntities = goodsAreaService.queryGoodsAreaListByType(route.getOrigOrgCode(), DictionaryValueConstants.BSE_GOODSAREA_TYPE_AIRFREIGHT);
						} else {
							// 偏线货区
							goodsAreaEntities = goodsAreaService.queryGoodsAreaListByType(route.getOrigOrgCode(), DictionaryValueConstants.BSE_GOODSAREA_TYPE_OTHER);
						}
						if (goodsAreaEntities.size() > 0) {
							goodsAreaCode = goodsAreaEntities.get(0).getGoodsAreaCode();
						}
					} else {
						goodsAreaCode = goodsAreaService.queryCodeByArriveRegionCode(route.getOrigOrgCode(), route.getObjectiveOrgCode(), productCode);
					}
				}
				if (goodsAreaCode != null) {
				    /**** yhj at 2013-05-09 add start *****/
//					是否追加★符号，不是最后一个记录且还没有打过标记
			    	if(!StringUtils.equalsIgnoreCase(printLabelBean.getIsStarFlag(),FossConstants.YES)){
			    		isPrintTransAsterisk(pathDetail.get(i),waybillBean,printLabelBean);
			    	}
				    /**** yhj at 2013-05-09 add end *****/
				    goodsAreaCodeList.add(goodsAreaCode);
				}
			}
		} else {
			// 专线货区
			for (int i = m; i < pathDetail.size(); i++) {
				RouteLineInfoDto route = pathDetail.get(i);
				// 判断到达部门 是否为外场
				OrgAdministrativeInfoEntity orgEntity = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeClean(pathDetail.get(i).getObjectiveOrgCode());
				if (orgEntity != null && FossConstants.YES.equals(orgEntity.getTransferCenter())) {
					// 到达部门
					path.append(SLASH).append(pathDetail.get(i).getObjectiveOrgCode());
				}
				// 判断出发部门是否为外场
				OrgAdministrativeInfoEntity orgStartEntity = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeClean(pathDetail.get(i).getOrigOrgCode());
				String goodsAreaCode = null;
				if (orgStartEntity != null && FossConstants.YES.equals(orgStartEntity.getTransferCenter())) {
					if(productService.onlineDetermineIsExpressByProductCode(productCode, waybillBean.getBillTime())){
						goodsAreaCode = expressPrintStarService.queryCodeByArriveRegionCode(route.getOrigOrgCode(), route.getObjectiveOrgCode(), productCode);
						if(StringUtils.isEmpty(goodsAreaCode)){
							// 根据走货路径获得货区号
							goodsAreaCode = goodsAreaService.queryCodeByArriveRegionCode(route.getOrigOrgCode(), route.getObjectiveOrgCode(), productCode);
						}
					}else{
						// 根据走货路径获得货区号
						goodsAreaCode = goodsAreaService.queryCodeByArriveRegionCode(route.getOrigOrgCode(), route.getObjectiveOrgCode(), productCode);
					}					
				}
				if (goodsAreaCode != null) {
				    	/**** yhj at 2013-05-09 add start *****/
					 	//	是否追加★符号，不是最后一个记录且还没有打过标记
				    	if(!StringUtils.equalsIgnoreCase(printLabelBean.getIsStarFlag(),FossConstants.YES)){
				    	    isPrintTransAsterisk(pathDetail.get(i),waybillBean,printLabelBean);
				    	}
					 /**** yhj at 2013-05-09 add end *****/
					goodsAreaCodeList.add(goodsAreaCode);
				}
			}
		}
		// set 流水号
		printLabelBean.setPrintSerialnos(pathDetail.get(0).getGoodsNo());
		
//		OutfieldEntity finalOutfieldEntity = queryOutfieldEntity(lastChangeCenterOrgCode);
		// 空运最终外场编码 根据空运总调获取最终外场编码
		if (ProductEntityConstants.PRICING_PRODUCT_AIR_FREIGHT.equals(waybillBean.getProductCode())) {
			OutfieldEntity outfieldEntity = outfieldService.queryOutfieldEntityByAirDispatchCode(lastChangeCenterOrgCode);
			if (outfieldEntity != null) {
				// 最终外场ID
				printLabelBean.setFinaloutfieldid(outfieldEntity.getId());
				// 最终外场编码赋值
				printLabelBean.setLastTransCenterNo(outfieldEntity.getCode());
			}else{
				//
				OutfieldEntity finalOutfieldEntity = queryOutfieldEntity(lastChangeCenterOrgCode);
				if(finalOutfieldEntity!=null){
					// 最终外场ID
					printLabelBean.setFinaloutfieldid(finalOutfieldEntity.getId());
					// 最终外场编码赋值
					printLabelBean.setLastTransCenterNo(finalOutfieldEntity.getCode());
				}
			}
			
		} else {
			OutfieldEntity finalOutfieldEntity = queryOutfieldEntity(lastChangeCenterOrgCode);
			//350909        郭倩云             查询出倒数第二个外场实体
			OutfieldEntity finalOutfieldEntity2 = queryOutfieldEntity(lastChangeCenterOrgCode2);
			//350909        郭倩云             查询出倒数第三个外场实体
			OutfieldEntity finalOutfieldEntity3 = queryOutfieldEntity(lastChangeCenterOrgCode3);
			if (finalOutfieldEntity != null) {
				// 最终外场ID
				printLabelBean.setFinaloutfieldid(finalOutfieldEntity.getId());
				// 最终外场编码赋值
				printLabelBean.setLastTransCenterNo(finalOutfieldEntity.getCode());
			}
			//350909        郭倩云          
			if (finalOutfieldEntity2 != null) {
				// 倒数第二外场ID
				printLabelBean.setLastSecondFinaloutFieldId(finalOutfieldEntity2.getId());
				// 倒数第二外场编码赋值
				printLabelBean.setLastSecondTransCenterNo(finalOutfieldEntity2.getCode());
			}
			//350909        郭倩云           
			if (finalOutfieldEntity3 != null) {
				// 倒数第三外场ID
				printLabelBean.setLastThirdFinaloutFieldId(finalOutfieldEntity3.getId());
				// 倒数第三外场编码赋值
				printLabelBean.setLastThirdTransCenterNo(finalOutfieldEntity3.getCode());
			}

		}
		// 最终外场城市名称 Finaloutname
		OrgAdministrativeInfoEntity outfieldcity = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCode(lastChangeCenterOrgCode);
		//350909       郭倩云         倒数第二外场城市名称
		OrgAdministrativeInfoEntity newOutfieldcity2 = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCode(lastChangeCenterOrgCode2);
		//350909     郭倩云           倒数第三外场城市名称
		OrgAdministrativeInfoEntity newOutfieldcity3 = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCode(lastChangeCenterOrgCode3);
		String finalOutFieldCityName;
		//350909       郭倩云         最终外场简称(比如武汉转运场简称武汉)
		String finalOutFieldCityName1;
		//350909       郭倩云         倒数第二外场简称(比如武汉转运场简称武汉)
		String finalOutFieldCityName2;
		//350909     郭倩云           倒数第三外场简称(比如武汉转运场简称武汉)
		String finalOutFieldCityName3;
		if (outfieldcity != null && StringUtils.isNotEmpty(outfieldcity.getOrgSimpleName())) {
			finalOutFieldCityName = outfieldcity.getOrgSimpleName();
		} else {
			finalOutFieldCityName = "空";
		}
		//350909       郭倩云         最终外场简称(比如武汉转运场简称武汉)
		if (outfieldcity != null && outfieldcity.getComplementSimpleName() != null) {
			finalOutFieldCityName1 = outfieldcity.getComplementSimpleName();
		} else {
			finalOutFieldCityName1 = "";
		}
		//350909       郭倩云         倒数第二外场简称(比如武汉转运场简称武汉)
		if (newOutfieldcity2 != null && newOutfieldcity2.getComplementSimpleName() != null) {
			finalOutFieldCityName2 = newOutfieldcity2.getComplementSimpleName();
		} else {
			finalOutFieldCityName2 = "";
		}
		//350909       郭倩云         倒数第三外场简称(比如武汉转运场简称武汉)
		if (newOutfieldcity3 != null && newOutfieldcity3.getComplementSimpleName() != null) {
			finalOutFieldCityName3 = newOutfieldcity3.getComplementSimpleName();
		} else {
			finalOutFieldCityName3 = "";
		}

		/**######给中转的
		 * wutao
		 * DMANA-3745:FOSS标签打印：货物标签左上角添加收货地址行政区域
		 * 业务逻辑处理：首先判断提货网点是否是驻地营业部，如果是则进行下面的业务逻辑：
		 * 判断提货方式是否自提：如果是自提：则获取提货网点的区域级的名字;否则获取收货地址的区域级名字
		 * 快递和空运以及偏线不走此逻辑
		 */
		String countyRegion = null;
		if (!ProductEntityConstants.PRICING_PRODUCT_PARTIAL_LINE.equals(waybillBean.getProductCode())
				&& !ProductEntityConstants.PRICING_PRODUCT_AIR_FREIGHT.equals(waybillBean.getProductCode())
				&& !productService.onlineDetermineIsExpressByProductCode(waybillBean.getProductCode(), waybillBean.getBillTime())) {
		SaleDepartmentEntity saleDepartmentEntity = saleDepartmentService.querySaleDepartmentByCode(waybillBean.getCustomerPickupOrgCode());
		//判断是否为驻地部门
		if(saleDepartmentEntity.getStation()!=null && FossConstants.YES.equals(saleDepartmentEntity.getStation())){
			//判断提货方式
			if (WaybillConstants.SELF_PICKUP.equals(waybillBean.getReceiveMethod()) || WaybillConstants.INNER_PICKUP.equals(waybillBean.getReceiveMethod()) || WaybillConstants.AIR_PICKUP_FREE.equals(waybillBean.getReceiveMethod())
					|| WaybillConstants.AIRPORT_PICKUP.equals(waybillBean.getReceiveMethod()) || WaybillConstants.AIR_SELF_PICKUP.equals(waybillBean.getReceiveMethod())) {
				countyRegion = WaybillConstants.SELF_PICKUP_REGION;
			}else{
				//非自提，那么就获取发货客户地址的
				if(waybillBean.getReceiveCustomerDistCode()!=null && !"".equals(waybillBean.getReceiveCustomerDistCode())){
					String newCountyRegion = administrativeRegionsService.gainDistrictNameByCode(waybillBean.getReceiveCustomerDistCode());
					if(newCountyRegion!=null && !"".equals(newCountyRegion)){
						countyRegion = newCountyRegion;
					}else{
						countyRegion = "";
					}
				}else{
					countyRegion = "";
				}
			}
		}}
		printLabelBean.setCountyRegion(countyRegion);
		//@author wutao-200945 ==== end
		
		printLabelBean.setLastTransCenterCity(finalOutFieldCityName);
		//350909       郭倩云         最终外场简称(例如武汉转运场简称武汉)
		printLabelBean.setLastFirstTransCenterCity(finalOutFieldCityName1);
		//350909       郭倩云         倒数第二外场城市名称(例如武汉转运场简称武汉)
		printLabelBean.setLastSecondTransCenterCity(finalOutFieldCityName2);
		//350909       郭倩云         倒数第三外场城市名称(例如武汉转运场简称武汉)
		printLabelBean.setLastThirdTransCenterCity(finalOutFieldCityName3);

		if (path.length() > 0) {
			String[] changeCenterOrgCodes = path.toString().split(SLASH);
			List<String> newOrgCode = new ArrayList<String>(FOUR);
			List<String> sortOrgCode = new ArrayList<String>(FOUR);
			int x = 0;
			if (changeCenterOrgCodes.length > 0) {
				// 去掉最后营业部code 外场编码 取最后四位
				// if (changeCenterOrgCodes.length >=2) {
				for (int i = changeCenterOrgCodes.length - 1; (i >= 0 && x < FOUR); i--) {
					newOrgCode.add(changeCenterOrgCodes[i]);
					x++;
				}
				// 倒序
				
				for (int k = newOrgCode.size(); k >= 1; k--) {
					sortOrgCode.add(newOrgCode.get(k - 1));
				}
				// }
				switch (sortOrgCode.size()) {
        				case FOUR:
        					printLabelBean.setAddr4(queryOutfieldCode(sortOrgCode.get(NumberConstants.NUMBER_3)));
        				case THREE:
        					printLabelBean.setAddr3(queryOutfieldCode(sortOrgCode.get(2)));
        				case 2:
        					printLabelBean.setAddr2(queryOutfieldCode(sortOrgCode.get(1)));
        				default: {
        				    printLabelBean.setAddr1(queryOutfieldCode(sortOrgCode.get(0)));
        				}
				}
			}
		}
		// 货区编号 取最后四位
		if (goodsAreaCodeList.size() > 0) {
			List<String> goodsAreaCode = new ArrayList<String>(THREE);
			int y = 0;
			for (int n = 0; (n < goodsAreaCodeList.size() && y < THREE); n++) {
				goodsAreaCode.add(goodsAreaCodeList.get(n));
				y++;
			}
			switch (goodsAreaCode.size()) {
			case FOUR:
				printLabelBean.setLocation4(goodsAreaCode.get(THREE));
			case THREE:
				printLabelBean.setLocation3(goodsAreaCode.get(2));
			case 2:
				printLabelBean.setLocation2(goodsAreaCode.get(1));
			case 1:
				printLabelBean.setLocation1(goodsAreaCode.get(0));
			default: {
				//to do nothing
			}
			}
		}
		return printLabelBean;
	}

	/**
	 * 获得标签流水信息 1 个
	 * 
	 * @author foss-jiangfei
	 * @date 2012-11-13 下午4:40:28
	 * @param waybillNo
	 *            运单号
	 * @param serialNos
	 *            流水号
	 * @see
	 */
	private void getLabeledGoodsInfo(BarcodePrintLabelDto printLabelBean, List<String> serialNos) {
		if (printLabelBean != null) {
			if(CollectionUtils.isNotEmpty(serialNos)){
				List<LabeledGoodEntity> labeledGoodEntityList = labeledGoodService.queryAllSerialByWaybillNo(printLabelBean.getWaybillNumber());
				for(LabeledGoodEntity labeledGoodEntity : labeledGoodEntityList){
					serialNos.add(labeledGoodEntity.getSerialNo());
				}
			}
			List<String> temp = serialNos;
			if (temp != null) {
				Collections.sort(temp);
				StringBuffer printSerialnos = new StringBuffer("");
				for (int i = 0; i < temp.size(); i++) {
					printSerialnos.append("," + temp.get(i));
				}

				String resultSerialNos = printSerialnos.toString();
				if (resultSerialNos.startsWith(",")) {
					resultSerialNos = resultSerialNos.substring(1);
				}
				printLabelBean.setPrintSerialnos(resultSerialNos);
			}
		}
	}

	private OutfieldEntity queryOutfieldEntity(String pOrgCode) {
		OutfieldEntity outfieldEntity = outfieldService.queryOutfieldByOrgCode(pOrgCode);
		return outfieldEntity;
	}

	private String queryOutfieldCode(String pOrgCode) {
		OutfieldEntity outfieldEntity = null;
		// 判断 是否为空运总调
		OrgAdministrativeInfoEntity orgEntity = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeClean(pOrgCode);
		if (orgEntity != null) {
			if (FossConstants.YES.equals(orgEntity.getAirDispatch())) {
				// 空运查外场
				outfieldEntity = outfieldService.queryOutfieldEntityByAirDispatchCode(pOrgCode);
			} else {
				// 偏线、专线查外场
				outfieldEntity = outfieldService.queryOutfieldByOrgCode(pOrgCode);
			}
		}
		return outfieldEntity == null ? null : outfieldEntity.getCode();
	}

	/**
	 * @功能 提供给需要生成走货路径的方法供使用
	 * @author 105888-foss-zhangxingwang
	 * @date 2013-8-31 12:23:10
	 */
	@Override
	public List<FreightRouteCommonsDto> getFreightRouteCommonsList(
			List<FreightRouteParamCommonsDto> freightRouteDtoList) {
		// 走货路径集合
		List<FreightRouteCommonsDto> freightCommonsDtoList = new ArrayList<FreightRouteCommonsDto>();
		FreightRouteCommonsDto freightRouteCommonsDto = new FreightRouteCommonsDto();
		for (FreightRouteParamCommonsDto freightRouteParamCommonsDto : freightRouteDtoList) {
			freightRouteCommonsDto = getFreightRouteCommons(freightRouteParamCommonsDto);
			freightCommonsDtoList.add(freightRouteCommonsDto);
		}
		return freightCommonsDtoList;
	}

	/**
	 * @功能 单独生成走货路径
	 * @author 105888-foss-zhangxingwang
	 * @date 2013-8-31 12:28:15
	 * @param paramCommonsDto
	 * @return FreightRouteCommonsDto
	 */
	private FreightRouteCommonsDto getFreightRouteCommons(
			FreightRouteParamCommonsDto paramCommonsDto) {
		/*
		 * 非空判断 if (StringUtils.isEmpty(paramCommonsDto.getParamsId()) ||
		 * StringUtils.isEmpty(paramCommonsDto.getStartOrgCode()) ||
		 * StringUtils.isEmpty(paramCommonsDto.getLastLoadOrgCode()) ||
		 * StringUtils.isEmpty(paramCommonsDto.getProductCode())) { }
		 */
		if (paramCommonsDto.getBillTime() == null) {
			paramCommonsDto.setBillTime(new Date());
		}
		FreightRouteCommonsDto commonsDto = new FreightRouteCommonsDto();
		commonsDto.setParamsId(paramCommonsDto.getParamsId());
		// 到达部门 ==到达营业部
		String lastLoadOrgCode = paramCommonsDto.getLastLoadOrgCode();

		/**** 到达营业部是否需要追加星符号 yhj at 20130514 add ***/
		if (asteriskSalesDeptService.queryAsteriskDeptByCode(lastLoadOrgCode)) {
			commonsDto.setIsStarFlag("true");
		}
		/**** 到达营业部是否需要追加星符号 yhj at 20130514 add ***/

		// 收货部门 ==出发营业部
		String startOrg = paramCommonsDto.getStartOrgCode();

		// 根据出发到达 营业部得到 走货路径 List A-B B-C C-D 包括始发营业部 和到达营业部门
		List<FreightRouteLineDto> freightRouteLineList = new ArrayList<FreightRouteLineDto>();
		try{
			freightRouteLineList = freightRouteService.queryFreightRouteBySourceTarget(startOrg, lastLoadOrgCode,
							paramCommonsDto.getProductCode(), paramCommonsDto.getBillTime());
		}catch (FreightRouteException e) {
			ProductEntity product = productService.getProductByCache(paramCommonsDto.getProductCode(),new Date());
			String productCode= null;
			//如果没有查询到产品类型，则还是返回产品类型比较好
			if(null == product){
				productCode = paramCommonsDto.getProductCode();
			}else{
				productCode = product.getName();
			}
			SimpleDateFormat sf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			String date = sf.format(paramCommonsDto.getBillTime());
			commonsDto.setParamsId(paramCommonsDto.getParamsId()+"&"+"开单部门编码:"+startOrg+"到达网点编码:"
					+lastLoadOrgCode+"产品类型:"+productCode+"开单时间:" +date+"异常信息:"+e.getErrorCode());
		}

		// 得到走货路径去掉始发营业部 A-B-C-D-d
		List<String> addressInfoList = new ArrayList<String>();
		// 走货路径 对应 货区号
		List<String> goodsAreaCodeList = new ArrayList<String>();
		// 最终外场org编码
		String lastChangeCenterOrgCode = null;
		if (CollectionUtils.isNotEmpty(freightRouteLineList)) {
			lastChangeCenterOrgCode = freightRouteLineList.get(freightRouteLineList.size() - 1).getSourceCode();
			// 最终外场编码 == 最终外场编码等于 走货路径的最后一条的 出发部门
			// lastChangeCenterOrgCode =
			// lastCenterOrgCode.substring(0,lastCenterOrgCode.indexOf(SLASH));
			addressInfoList.add(freightRouteLineList.get(0).getTargetCode());
			// 空运、偏线查货区
			if (ProductEntityConstants.PRICING_PRODUCT_PARTIAL_LINE
					.equals(paramCommonsDto.getProductCode())
					|| ProductEntityConstants.PRICING_PRODUCT_AIR_FREIGHT
							.equals(paramCommonsDto.getProductCode())) {
				for (int i = 1; i < freightRouteLineList.size(); i++) {
					addressInfoList.add(freightRouteLineList.get(i)
							.getTargetCode());
					log.info("===除出发营业部以外走货路径==="
							+ freightRouteLineList.get(i).getTargetCode());
					String goodsAreaCode = null;
					// 根据走货路径获得货区号
					if (i == freightRouteLineList.size() - 1) {
						List<GoodsAreaEntity> goodsAreaEntities = new ArrayList<GoodsAreaEntity>();
						// 空运货区
						if (ProductEntityConstants.PRICING_PRODUCT_AIR_FREIGHT
								.equals(paramCommonsDto.getProductCode())) {
							goodsAreaEntities = goodsAreaService
									.queryGoodsAreaListByType(
											freightRouteLineList.get(i)
													.getSourceCode(),
											DictionaryValueConstants.BSE_GOODSAREA_TYPE_AIRFREIGHT);
						} else {
							// 偏线货区
							goodsAreaEntities = goodsAreaService
									.queryGoodsAreaListByType(
											freightRouteLineList.get(i)
													.getSourceCode(),
											DictionaryValueConstants.BSE_GOODSAREA_TYPE_OTHER);
						}
						if (goodsAreaEntities.size() > 0) {
							goodsAreaCode = goodsAreaEntities.get(0)
									.getGoodsAreaCode();
						}
					} else {
						goodsAreaCode = goodsAreaService
								.queryCodeByArriveRegionCode(
										freightRouteLineList.get(i)
												.getSourceCode(),
										freightRouteLineList.get(i)
												.getTargetCode(),
										paramCommonsDto.getProductCode());
						/**** yhj at 2013-05-09 add start *****/
						// 是否追加★符号，不是最后一个记录且还没有打过标记
						if (!StringUtils.equalsIgnoreCase(
								commonsDto.getIsStarFlag(), FossConstants.YES)) {
							GoodsAreaEntity goodsAreaEntity = null;
							// 获得下一个到达站点对应的库区实体。判断库区实体是否需要打星号标记
							goodsAreaEntity = goodsAreaService
									.queryGoodsAreaByArriveRegionCode(
											freightRouteLineList.get(i)
													.getSourceCode(),
											freightRouteLineList.get(i)
													.getTargetCode(),
											paramCommonsDto.getProductCode());
							if (null != goodsAreaEntity) {
								if (StringUtils
										.equalsIgnoreCase(
												goodsAreaEntity
														.getAsteriskCode(),
												DictionaryValueConstants.ASTERISK_TYPE_LINE1)) {
									commonsDto.setIsStarFlag("true");
								}
							}
						}
						/**** yhj at 2013-05-09 add end *****/
					}
					goodsAreaCodeList.add(goodsAreaCode);
				}
			} else {
				// 专线查货区
				for (int i = 1; i < freightRouteLineList.size(); i++) {
					addressInfoList.add(freightRouteLineList.get(i)
							.getTargetCode());
					log.info("===除出发营业部以外走货路径==="
							+ freightRouteLineList.get(i).getTargetCode());
					// 根据走货路径获得货区号
					String goodsAreaCode = goodsAreaService
							.queryCodeByArriveRegionCode(
									freightRouteLineList.get(i).getSourceCode(),
									freightRouteLineList.get(i).getTargetCode(),
									paramCommonsDto.getProductCode());
					/**** yhj at 2013-05-09 add start *****/
					// 是否追加★符号,不看最后一个且星标记没有被标记
					if (!StringUtils.equalsIgnoreCase(
							commonsDto.getIsStarFlag(), FossConstants.YES)) {
						GoodsAreaEntity goodsAreaEntity = null;
						// 获得下一个到达站点对应的库区实体。判断库区实体是否需要打星号标记
						goodsAreaEntity = goodsAreaService
								.queryGoodsAreaByArriveRegionCode(
										freightRouteLineList.get(i)
												.getSourceCode(),
										freightRouteLineList.get(i)
												.getTargetCode(),
										paramCommonsDto.getProductCode());
						if (null != goodsAreaEntity) {
							if (StringUtils
									.equalsIgnoreCase(
											goodsAreaEntity.getAsteriskCode(),
											DictionaryValueConstants.ASTERISK_TYPE_LINE1)) {
								commonsDto.setIsStarFlag("true");
							}
						}
					}
					/**** yhj at 2013-05-09 add end *****/
					goodsAreaCodeList.add(goodsAreaCode);
				}
			}
		}
		// 空运最终外场编码 根据空运总调获取最终外场编码
		if (ProductEntityConstants.PRICING_PRODUCT_AIR_FREIGHT
				.equals(paramCommonsDto.getProductCode())) {
			OutfieldEntity outfieldEntity = outfieldService
					.queryOutfieldEntityByAirDispatchCode(lastChangeCenterOrgCode);
			if (outfieldEntity != null) {
				// 最终外场ID
				commonsDto.setFinalOutFieldId(outfieldEntity.getId());
				// 最终外场编码赋值
				commonsDto.setLastTransCenterNo(outfieldEntity.getCode());
			}
		} else {
			OutfieldEntity finalOutfieldEntity = queryOutfieldEntity(lastChangeCenterOrgCode);
			if (finalOutfieldEntity != null) {
				// 最终外场ID
				commonsDto.setFinalOutFieldId(finalOutfieldEntity.getId());
				// 最终外场编码赋值
				commonsDto.setLastTransCenterNo(finalOutfieldEntity.getCode());
			}
		}
		// 最终外场城市名称 Finaloutname
		OrgAdministrativeInfoEntity newOutfieldcity = orgAdministrativeInfoService
				.queryOrgAdministrativeInfoByCode(lastChangeCenterOrgCode,
						paramCommonsDto.getBillTime());
		String finalOutFieldCityName;
		if (newOutfieldcity != null && newOutfieldcity.getOrgSimpleName() != null) {
			finalOutFieldCityName = newOutfieldcity.getOrgSimpleName();
		} else {
			finalOutFieldCityName = "空";
		}
		// 最终外场城市名称 Finaloutname

		commonsDto.setLastTransCenterCity(finalOutFieldCityName);
		log.info("==========最终外场编码============"
				+ commonsDto.getLastTransCenterNo());
		log.info("==========最终外场简称============"
				+ commonsDto.getLastTransCenterCity());

		// 去掉最后营业部code 外场编码 取最后四位
		if (addressInfoList.size() >= 2) {
			List<String> newOrgCode = new ArrayList<String>(FOUR);
			List<String> sortOrgCode = new ArrayList<String>(FOUR);
			int x = 0;

			// 倒序
			for (int i = addressInfoList.size() - 2; (i >= 0 && x < FOUR); i--) {
				newOrgCode.add(addressInfoList.get(i));
				x++;
			}
			// 正序
			for (int k = newOrgCode.size(); k >= 1; k--) {
				sortOrgCode.add(newOrgCode.get(k - 1));
			}

			switch (sortOrgCode.size()) {
			case FOUR:
				commonsDto.setAddr4(queryOutfieldCode(sortOrgCode.get(THREE)));
			case THREE:
				commonsDto.setAddr3(queryOutfieldCode(sortOrgCode.get(2)));
			case 2:
				commonsDto.setAddr2(queryOutfieldCode(sortOrgCode.get(1)));
			case 1:

			default: {
				commonsDto.setAddr1(queryOutfieldCode(sortOrgCode.get(0)));
			}
			}

		}

		// 货区编号 取最后四位
		if (goodsAreaCodeList.size() > 0) {
			List<String> goodsAreaCode = new ArrayList<String>(FOUR);
			int y = 0;
			for (int n = 0; (n < goodsAreaCodeList.size() && y < FOUR); n++) {
				goodsAreaCode.add(goodsAreaCodeList.get(n));
				y++;
			}
			switch (goodsAreaCode.size()) {
			case FOUR:
				commonsDto.setLocation4(goodsAreaCode.get(THREE));
			case THREE:
				commonsDto.setLocation3(goodsAreaCode.get(2));
			case 2:
				commonsDto.setLocation2(goodsAreaCode.get(1));
			case 1:
				commonsDto.setLocation1(goodsAreaCode.get(0));
			default: {
				//to do nothing
			}
			}
		}
		
		//判断是否需要判断AB货
		commonsDto.setIsSureAB(FALSE);
		
		for (FreightRouteLineDto f : freightRouteLineList) {
			// 判断线路是否支持AB货分拣
			if(!StringUtils.equals(commonsDto.getIsSureAB(), TRUE)){
				OutfieldEntity entity = outfieldService.querySimpleOutfieldByOrgCode(f.getTargetCode());
				if (entity != null && !StringUtils.equals(commonsDto.getIsSureAB(), TRUE) 
						&& FossConstants.YES.equals(entity.getSortingMachine())) {
					commonsDto.setIsSureAB(TRUE);
				}
			}
		}
		
		// 如果产品 code 为空运、偏线 查询目的站编码
		if (ProductEntityConstants.PRICING_PRODUCT_PARTIAL_LINE.equals(paramCommonsDto.getProductCode())
				|| ProductEntityConstants.PRICING_PRODUCT_AIR_FREIGHT.equals(paramCommonsDto.getProductCode())) {
			// 偏线 查询目的站编码
			OuterBranchEntity outerBranchEntity = vehicleAgencyDeptService
					.queryOuterBranchByBranchCode(
							paramCommonsDto.getLastLoadOrgCode(), null);
			if (outerBranchEntity != null) {
				// 偏线设置目的站编码
				commonsDto.setDestinationCode(outerBranchEntity
						.getStationNumber()); // 目的站打印标签编码
				// 偏线设置目的站简称
				commonsDto.setDestination(outerBranchEntity.getSimplename());
				log.info("======目的站简称=======" + commonsDto.getDestination());
			}
		} else {
			// 专线目的站编码
			SaleDepartmentEntity saleDepartmentEntity = saleDepartmentService
					.querySaleDepartmentByCode(paramCommonsDto.getLastLoadOrgCode());
			if (saleDepartmentEntity != null) {
				commonsDto.setDestinationCode(saleDepartmentEntity.getStationNumber()); // 目的站打印标签编码
			}
			// 根据提货网点OrgCode 获取部门信息
			OrgAdministrativeInfoEntity orgAdministrativeInfoEntity = orgAdministrativeInfoService
					.queryOrgAdministrativeInfoByCode(
							paramCommonsDto.getLastLoadOrgCode(),
							paramCommonsDto.getBillTime());
			if (orgAdministrativeInfoEntity != null) {
				// 设置目的站为提货网点部门简称
				commonsDto.setDestination(orgAdministrativeInfoEntity.getOrgSimpleName());
			} else {
				// 因为组织信息在不停的变化，可能会出现运单开单时间跟组织信息时间的查询不匹配而查询不到数据，所以再查一次最新组织部门信息
				orgAdministrativeInfoEntity = orgAdministrativeInfoService
						.queryOrgAdministrativeInfoByCodeClean(paramCommonsDto.getLastLoadOrgCode());
				if (orgAdministrativeInfoEntity != null) {
					// 设置目的站为提货网点部门简称
					commonsDto.setDestination(orgAdministrativeInfoEntity.getOrgSimpleName());
				}
			}
			log.info("======目的站简称=======" + commonsDto.getDestination());
		}
		return commonsDto;
	}
	/**
	 * 获得走货路径信息 8+3 个 其中3个是最终外场信息
	 * 
	 * @author foss-jiangfei
	 * @date 2012-11-13 下午4:40:28
	 * @param waybillNo
	 *            运单号
	 * @see
	 */
	private void getFreightRoute(BarcodePrintLabelDto printLabelBean) {
		WaybillEntity waybillBean = printLabelBean.getWaybillBean();
		if (waybillBean == null) {
			return;
		}
		// 到达部门 ==到达营业部
		String lastLoadOrgCode = waybillBean.getCustomerPickupOrgCode();
		
		/****到达营业部是否需要追加星符号 yhj at 20130514 add ***/
		if(asteriskSalesDeptService.queryAsteriskDeptByCode(lastLoadOrgCode)){
	    		printLabelBean.setIsStarFlag("true");
		}
		/****到达营业部是否需要追加星符号 yhj at 20130514 add ***/
		
		// 收货部门 ==出发营业部
		String startOrg = waybillBean.getCreateOrgCode();
		/**
		 * 判断是否是集中开单
		 */
		if (StringUtils.isNotEmpty(waybillBean.getPickupCentralized()) && StringUtils.equals(FossConstants.YES, waybillBean.getPickupCentralized())) {
			//查询组织信息
			OrgAdministrativeInfoEntity orgAdministrativeInfoEntity = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCode(waybillBean.getCreateOrgCode(),waybillBean.getBillTime());
			//这里相当于集中开单组最多走三次查询，先查历史记录，如果没有，在找实时的数据，实在找不到，再走中转的走货路径
			if(FossConstants.YES.equals(orgAdministrativeInfoEntity.getBillingGroup())){
				//判断是否是 异地开单
				String waybillNo =  waybillBean.getWaybillNo();
				String  createOrgCode= waybillBean.getCreateOrgCode();
				if(StringUtil.isNotEmpty(waybillNo)){
					WaybillPictureEntity entity = new WaybillPictureEntity();
					entity.setActive(FossConstants.YES);
					entity.setWaybillNo(waybillNo);
					entity = waybillPendingService.queryWaybillPictureByEntity(entity);
					if(entity!=null && FossConstants.NO.equals(entity.getLocal())){
						//根据本属开单组去查询
						createOrgCode = entity.getLocalBillGroupCode();
					}
				}
				//历史查找
				SaleDepartmentEntity saleDepartment = waybillManagerService.queryPickupCentralizedDeptCodeAndBillTime(createOrgCode,waybillBean.getBillTime());
				if (saleDepartment != null) {
					startOrg = saleDepartment.getCode();
				}else{
					//再实时的查找当前数据
					String transCenterCode = waybillManagerService.queryTransCenterByBillingGroupCode(createOrgCode);
					SaleDepartmentEntity deliverDepartment = orgAdministrativeInfoComplexService.queryStationLeaveOrgByOutfieldCode(transCenterCode);
					if(deliverDepartment == null){
						//如果再找不到，则抛出异常，直接调用中转的走货路径：GUI和Web都有相应的扑捉Exception 方法
						throw new WaybillLabelPrintException("根据集中开单组"+orgAdministrativeInfoEntity.getName()+"("+orgAdministrativeInfoEntity.getCode()+")没有找到对应的外场出发驻地部门!");
					}
					startOrg = deliverDepartment.getCode();
				}
			}
		}
		
//		if(StringUtils.equals(FossConstants.YES, waybillBean.getPickupCentralized())){
////			String transCenterCode = waybillManagerService.queryTransCenterByBillingGroupCode(waybillBean.getCreateOrgCode());
////			SaleDepartmentEntity deliverDepartment = orgAdministrativeInfoComplexService.queryStationLeaveOrgByOutfieldCode(transCenterCode);
//			SaleDepartmentEntity saleDepartment = waybill.queryPickupCentralizedDeptCode(waybillBean.getCreateOrgCode());
//			startOrg = deliverDepartment.getCode();
//		}
		/**
		 * 判断是否是集中开单
		 */
		if (StringUtils.isNotEmpty(waybillBean.getPickupCentralized()) && StringUtils.equals(FossConstants.YES, waybillBean.getPickupCentralized())) {
			//查询组织信息
			OrgAdministrativeInfoEntity orgAdministrativeInfoEntity = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCode(waybillBean.getCreateOrgCode(),waybillBean.getBillTime());
			//这里相当于集中开单组最多走三次查询，先查历史记录，如果没有，在找实时的数据，实在找不到，再走中转的走货路径
			if(FossConstants.YES.equals(orgAdministrativeInfoEntity.getBillingGroup())){
				//判断是否是 异地开单
				String waybillNo =  waybillBean.getWaybillNo();
				String  createOrgCode= waybillBean.getCreateOrgCode();
				if(StringUtil.isNotEmpty(waybillNo)){
					WaybillPictureEntity entity = new WaybillPictureEntity();
					entity.setActive(FossConstants.YES);
					entity.setWaybillNo(waybillNo);
					entity = waybillPendingService.queryWaybillPictureByEntity(entity);
					if(entity!=null && FossConstants.NO.equals(entity.getLocal())){
						//根据本属开单组去查询
						createOrgCode = entity.getLocalBillGroupCode();
					}
				}
				//历史查找
				SaleDepartmentEntity saleDepartment = waybillManagerService.queryPickupCentralizedDeptCodeAndBillTime(createOrgCode,waybillBean.getBillTime());
				if (saleDepartment != null) {
					startOrg = saleDepartment.getCode();
				}else{
					//再实时的查找当前数据
					String transCenterCode = waybillManagerService.queryTransCenterByBillingGroupCode(createOrgCode);
					SaleDepartmentEntity deliverDepartment = orgAdministrativeInfoComplexService.queryStationLeaveOrgByOutfieldCode(transCenterCode);
					if(deliverDepartment == null){
						//如果再找不到，则抛出异常，直接调用中转的走货路径：GUI和Web都有相应的扑捉Exception 方法
						throw new WaybillLabelPrintException("根据集中开单组"+orgAdministrativeInfoEntity.getName()+"("+orgAdministrativeInfoEntity.getCode()+")没有找到对应的外场出发驻地部门!");
					}
					startOrg = deliverDepartment.getCode();
				}
			}
		}
		
//		if(StringUtils.equals(FossConstants.YES, waybillBean.getPickupCentralized())){
////			String transCenterCode = waybillManagerService.queryTransCenterByBillingGroupCode(waybillBean.getCreateOrgCode());
////			SaleDepartmentEntity deliverDepartment = orgAdministrativeInfoComplexService.queryStationLeaveOrgByOutfieldCode(transCenterCode);
//			SaleDepartmentEntity saleDepartment = waybill.queryPickupCentralizedDeptCode(waybillBean.getCreateOrgCode());
//			startOrg = deliverDepartment.getCode();
//		}
		// 根据出发到达 营业部得到 走货路径 List A-B B-C C-D 包括始发营业部 和到达营业部门
		List<FreightRouteLineDto> freightRouteLineList = freightRouteService.queryFreightRouteBySourceTarget(startOrg, lastLoadOrgCode, waybillBean.getProductCode(), waybillBean.getBillTime());

		// 得到走货路径去掉始发营业部 A-B-C-D-d
		List<String> addressInfoList = new ArrayList<String>();
		// 走货路径 对应 货区号
		List<String> goodsAreaCodeList = new ArrayList<String>();
		// 最终外场org编码
		String lastChangeCenterOrgCode = null;
		//350909     郭倩云     倒数第二个外场org编码
		String lastChangeCenterOrgCode2 = null;
		//350909     郭倩云     倒数第三个外场org编码
		String lastChangeCenterOrgCode3 = null;
		//350909     郭倩云     获取倒数第二个和倒数第三个外场org编码
		if (CollectionUtils.isNotEmpty(freightRouteLineList)&&freightRouteLineList.size()==3){
			lastChangeCenterOrgCode2=freightRouteLineList.get(freightRouteLineList.size() - 2).getSourceCode();
		}else if(CollectionUtils.isNotEmpty(freightRouteLineList)&&freightRouteLineList.size()>3){
			lastChangeCenterOrgCode2=freightRouteLineList.get(freightRouteLineList.size() - 2).getSourceCode();
			lastChangeCenterOrgCode3=freightRouteLineList.get(freightRouteLineList.size() - 3).getSourceCode();
		}
		if (CollectionUtils.isNotEmpty(freightRouteLineList)) {
			lastChangeCenterOrgCode = freightRouteLineList.get(freightRouteLineList.size() - 1).getSourceCode();
			// 最终外场编码 == 最终外场编码等于 走货路径的最后一条的 出发部门
			// lastChangeCenterOrgCode =
			// lastCenterOrgCode.substring(0,lastCenterOrgCode.indexOf(SLASH));
			addressInfoList.add(freightRouteLineList.get(0).getTargetCode());
			// 空运、偏线查货区
			if (ProductEntityConstants.PRICING_PRODUCT_PARTIAL_LINE.equals(waybillBean.getProductCode()) || ProductEntityConstants.PRICING_PRODUCT_AIR_FREIGHT.equals(waybillBean.getProductCode())) {
				for (int i = 1; i < freightRouteLineList.size(); i++) {
					addressInfoList.add(freightRouteLineList.get(i).getTargetCode());
					log.info("===除出发营业部以外走货路径===" + freightRouteLineList.get(i).getTargetCode());
					String goodsAreaCode = null;
					// 根据走货路径获得货区号
					if (i == freightRouteLineList.size() - 1) {
						List<GoodsAreaEntity> goodsAreaEntities = new ArrayList<GoodsAreaEntity>();
						// 空运货区
						if (ProductEntityConstants.PRICING_PRODUCT_AIR_FREIGHT.equals(waybillBean.getProductCode())) {
							goodsAreaEntities = goodsAreaService.queryGoodsAreaListByType(freightRouteLineList.get(i).getSourceCode(), DictionaryValueConstants.BSE_GOODSAREA_TYPE_AIRFREIGHT);
						} else {
							// 偏线货区
							goodsAreaEntities = goodsAreaService.queryGoodsAreaListByType(freightRouteLineList.get(i).getSourceCode(), DictionaryValueConstants.BSE_GOODSAREA_TYPE_OTHER);
						}
						if (goodsAreaEntities.size() > 0) {
							goodsAreaCode = goodsAreaEntities.get(0).getGoodsAreaCode();
						}
					} else {
						goodsAreaCode = goodsAreaService.queryCodeByArriveRegionCode(freightRouteLineList.get(i).getSourceCode(), freightRouteLineList.get(i).getTargetCode(), waybillBean.getProductCode());
						/**** yhj at 2013-05-09 add start *****/
						//	是否追加★符号，不是最后一个记录且还没有打过标记
				    	if(!StringUtils.equalsIgnoreCase(printLabelBean.getIsStarFlag(),FossConstants.YES)){
				    		isPrintBseAsteriskGoodsArea(freightRouteLineList.get(i),waybillBean,printLabelBean);
				    	}
						/**** yhj at 2013-05-09 add end *****/
					}
					goodsAreaCodeList.add(goodsAreaCode);
				}
			} else {
				// 专线查货区--------快递库区编码查询3357
				for (int i = 1; i < freightRouteLineList.size(); i++) {
					addressInfoList.add(freightRouteLineList.get(i).getTargetCode());
					log.info("===除出发营业部以外走货路径===" + freightRouteLineList.get(i).getTargetCode());
					String goodsAreaCode = null;
					if(productService.onlineDetermineIsExpressByProductCode(waybillBean.getProductCode(), waybillBean.getBillTime())){
						goodsAreaCode = expressPrintStarService.queryCodeByArriveRegionCode(freightRouteLineList.get(i).getSourceCode(), freightRouteLineList.get(i).getTargetCode(), waybillBean.getProductCode());
						if(StringUtils.isEmpty(goodsAreaCode)){
							goodsAreaCode = goodsAreaService.queryCodeByArriveRegionCode(freightRouteLineList.get(i).getSourceCode(), freightRouteLineList.get(i).getTargetCode(), waybillBean.getProductCode());
						}
					}else{
						goodsAreaCode = goodsAreaService.queryCodeByArriveRegionCode(freightRouteLineList.get(i).getSourceCode(), freightRouteLineList.get(i).getTargetCode(), waybillBean.getProductCode());
					}
					/**** yhj at 2013-05-09 add start *****/
					//是否追加★符号,不看最后一个且星标记没有被标记
					if(!StringUtils.equalsIgnoreCase(printLabelBean.getIsStarFlag(),FossConstants.YES)){
					    isPrintBseAsteriskGoodsArea(freightRouteLineList.get(i),waybillBean,printLabelBean);
					}
					/**** yhj at 2013-05-09 add end *****/
					goodsAreaCodeList.add(goodsAreaCode);
				}
			}
		}
		// 空运最终外场编码 根据空运总调获取最终外场编码
		if (ProductEntityConstants.PRICING_PRODUCT_AIR_FREIGHT.equals(waybillBean.getProductCode())) {
			OutfieldEntity outfieldEntity = outfieldService.queryOutfieldEntityByAirDispatchCode(lastChangeCenterOrgCode);
			if (outfieldEntity != null) {
				// 最终外场ID
				printLabelBean.setFinaloutfieldid(outfieldEntity.getId());
				// 最终外场编码赋值
				printLabelBean.setLastTransCenterNo(outfieldEntity.getCode());
			}
		} else {
			OutfieldEntity finalOutfieldEntity = queryOutfieldEntity(lastChangeCenterOrgCode);
			//350909        郭倩云             查询出倒数第二个外场实体
			OutfieldEntity finalOutfieldEntity2 = queryOutfieldEntity(lastChangeCenterOrgCode2);
			//350909        郭倩云             查询出倒数第三个外场实体
			OutfieldEntity finalOutfieldEntity3 = queryOutfieldEntity(lastChangeCenterOrgCode3);
			if (finalOutfieldEntity != null) {
				// 最终外场ID
				printLabelBean.setFinaloutfieldid(finalOutfieldEntity.getId());
				// 最终外场编码赋值
				printLabelBean.setLastTransCenterNo(finalOutfieldEntity.getCode());
			}
			//350909        郭倩云          
			if (finalOutfieldEntity2 != null) {
				// 倒数第二外场ID
				printLabelBean.setLastSecondFinaloutFieldId(finalOutfieldEntity2.getId());
				// 倒数第二外场编码赋值
				printLabelBean.setLastSecondTransCenterNo(finalOutfieldEntity2.getCode());
			}
			//350909        郭倩云           
			if (finalOutfieldEntity3 != null) {
				// 倒数第三外场ID
				printLabelBean.setLastThirdFinaloutFieldId(finalOutfieldEntity3.getId());
				// 倒数第三外场编码赋值
				printLabelBean.setLastThirdTransCenterNo(finalOutfieldEntity3.getCode());
			}
		}
		// 最终外场城市名称 Finaloutname
		OrgAdministrativeInfoEntity newOutfieldcity = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCode(lastChangeCenterOrgCode, waybillBean.getBillTime());
		//350909       郭倩云         倒数第二外场城市名称
		OrgAdministrativeInfoEntity newOutfieldcity2 = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCode(lastChangeCenterOrgCode2, waybillBean.getBillTime());
		//350909     郭倩云           倒数第三外场城市名称
		OrgAdministrativeInfoEntity newOutfieldcity3 = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCode(lastChangeCenterOrgCode3, waybillBean.getBillTime());
		String finalOutFieldCityName;
		//350909       郭倩云         最终外场简称(比如武汉转运场简称武汉)
		String finalOutFieldCityName1;
		//350909       郭倩云         倒数第二外场简称(比如武汉转运场简称武汉)
		String finalOutFieldCityName2;
		//350909     郭倩云           倒数第三外场简称(比如武汉转运场简称武汉)
		String finalOutFieldCityName3;
		if (newOutfieldcity != null && newOutfieldcity.getOrgSimpleName() != null) {
			finalOutFieldCityName = newOutfieldcity.getOrgSimpleName();
		} else {
			finalOutFieldCityName = "空";
		}
		//350909       郭倩云         最终外场简称(比如武汉转运场简称武汉)
		if (newOutfieldcity != null && newOutfieldcity.getComplementSimpleName() != null) {
			finalOutFieldCityName1 = newOutfieldcity.getComplementSimpleName();
		} else {
			finalOutFieldCityName1 = "";
		}
		//350909       郭倩云         倒数第二外场简称(比如武汉转运场简称武汉)
		if (newOutfieldcity2 != null && newOutfieldcity2.getComplementSimpleName() != null) {
			finalOutFieldCityName2 = newOutfieldcity2.getComplementSimpleName();
		} else {
			finalOutFieldCityName2 = "";
		}
		//350909       郭倩云         倒数第三外场简称(比如武汉转运场简称武汉)
		if (newOutfieldcity3 != null && newOutfieldcity3.getComplementSimpleName() != null) {
			finalOutFieldCityName3 = newOutfieldcity3.getComplementSimpleName();
		} else {
			finalOutFieldCityName3 = "";
		}
		
		/**
		 * wutao
		 * DMANA-3745:FOSS标签打印：货物标签左上角添加收货地址行政区域
		 * 业务逻辑处理：首先判断提货网点是否是驻地营业部，如果是则进行下面的业务逻辑：
		 * 判断提货方式是否自提：如果是自提：则获取提货网点的区域级的名字;否则获取收货地址的区域级名字
		 * 快递和偏线以及空运不走此逻辑
		 */
		String countyRegion = "";
		if (!ProductEntityConstants.PRICING_PRODUCT_PARTIAL_LINE.equals(waybillBean.getProductCode())
				&& !ProductEntityConstants.PRICING_PRODUCT_AIR_FREIGHT.equals(waybillBean.getProductCode())
				&& !productService.onlineDetermineIsExpressByProductCode(waybillBean.getProductCode(), waybillBean.getBillTime())) {
		SaleDepartmentEntity saleDepartmentEntity = saleDepartmentService
				.querySaleDepartmentByCode(waybillBean.getCustomerPickupOrgCode());
		//判断是否为驻地部门
		if(saleDepartmentEntity.getStation()!=null && FossConstants.YES.equals(saleDepartmentEntity.getStation())){
			//判断提货方式
			if (WaybillConstants.SELF_PICKUP.equals(waybillBean.getReceiveMethod()) || WaybillConstants.INNER_PICKUP.equals(waybillBean.getReceiveMethod()) || WaybillConstants.AIR_PICKUP_FREE.equals(waybillBean.getReceiveMethod())
					|| WaybillConstants.AIRPORT_PICKUP.equals(waybillBean.getReceiveMethod()) || WaybillConstants.AIR_SELF_PICKUP.equals(waybillBean.getReceiveMethod())) {
				countyRegion = WaybillConstants.SELF_PICKUP_REGION;
			}else{
				//非自提，那么就获取发货客户地址的
				if(waybillBean.getReceiveCustomerDistCode()!=null && !"".equals(waybillBean.getReceiveCustomerDistCode())){
					String newCountyRegion = administrativeRegionsService.gainDistrictNameByCode(waybillBean.getReceiveCustomerDistCode());
					if(newCountyRegion!=null && !"".equals(newCountyRegion)){
						countyRegion = newCountyRegion;
					}else{
						countyRegion = "";
					}
				}else{
					countyRegion = "";
				}
			}
		}
		}
		printLabelBean.setCountyRegion(countyRegion);
		//@author wutao-200945 ==== end
		
		// 最终外场城市名称 Finaloutname
		printLabelBean.setLastTransCenterCity(finalOutFieldCityName);
		//350909       郭倩云         最终外场简称(例如武汉转运场简称武汉)
		printLabelBean.setLastFirstTransCenterCity(finalOutFieldCityName1);
		//350909       郭倩云         倒数第二外场城市名称(例如武汉转运场简称武汉)
		printLabelBean.setLastSecondTransCenterCity(finalOutFieldCityName2);
		//350909       郭倩云         倒数第三外场城市名称(例如武汉转运场简称武汉)
		printLabelBean.setLastThirdTransCenterCity(finalOutFieldCityName3);
		log.info("==========最终外场编码============" + printLabelBean.getLastTransCenterNo());
		log.info("==========最终外场简称============" + printLabelBean.getLastTransCenterCity());
		log.info("==========倒数第二外场编码============" + printLabelBean.getLastSecondTransCenterNo());
		log.info("==========倒数第二外场简称============" + printLabelBean.getLastSecondTransCenterCity());
		log.info("==========倒数第三外场编码============" + printLabelBean.getLastThirdTransCenterNo());
		log.info("==========倒数第三外场简称============" + printLabelBean.getLastThirdTransCenterCity());

		// 去掉最后营业部code 外场编码 取最后四位
		if (addressInfoList.size() >= 2) {
			List<String> newOrgCode = new ArrayList<String>(FOUR);
			List<String> sortOrgCode = new ArrayList<String>(FOUR);
			int x = 0;

			// 倒序
			for (int i = addressInfoList.size() - 2; (i >= 0 && x < FOUR); i--) {
				newOrgCode.add(addressInfoList.get(i));
				x++;
			}
			// 正序
			for (int k = newOrgCode.size(); k >= 1; k--) {
				sortOrgCode.add(newOrgCode.get(k - 1));
			}

			switch (sortOrgCode.size()) {
            			case FOUR:
            				printLabelBean.setAddr4(queryOutfieldCode(sortOrgCode.get(NumberConstants.NUMBER_3)));
            			case THREE:
            				printLabelBean.setAddr3(queryOutfieldCode(sortOrgCode.get(2)));
            			case 2:
            				printLabelBean.setAddr2(queryOutfieldCode(sortOrgCode.get(1)));
            			case 1:
            				
            			default: {
            			    printLabelBean.setAddr1(queryOutfieldCode(sortOrgCode.get(0)));
            			}
			}

		}

		// 货区编号 取最后四位
		if (goodsAreaCodeList.size() > 0) {
			List<String> goodsAreaCode = new ArrayList<String>(FOUR);
			int y = 0;
			for (int n = 0; (n < goodsAreaCodeList.size() && y < FOUR); n++) {
				goodsAreaCode.add(goodsAreaCodeList.get(n));
				y++;
			}
			switch (goodsAreaCode.size()) {
			case FOUR:
				printLabelBean.setLocation4(goodsAreaCode.get(THREE));
			case THREE:
				printLabelBean.setLocation3(goodsAreaCode.get(2));
			case 2:
				printLabelBean.setLocation2(goodsAreaCode.get(1));
			case 1:
				printLabelBean.setLocation1(goodsAreaCode.get(0));
			default: {
				//to do nothing
			}
			}
		}

	}

	
	/**
	 * 
	 * <p>
	 * 中转标签是否打印"★"符号
	 * </p> 
	 * @author DP-Foss-YueHongJie
	 * @date 2013-5-9 下午4:45:08
	 * @see
	 */
	private void isPrintTransAsterisk(RouteLineInfoDto nextRouteLineDto,WaybillEntity waybillBean,BarcodePrintLabelDto printLabelBean){
		//如果是经济快递运单,判断是否需要打星号标记
		if(productService.onlineDetermineIsExpressByProductCode(waybillBean.getProductCode(), waybillBean.getBillTime())){
			 ExpressPrintStarEntity expressPrintStarEntity = expressPrintStarService.queryExpressPrintStarByArriveRegionCode(nextRouteLineDto.getOrigOrgCode(), nextRouteLineDto.getObjectiveOrgCode());
			if(null!=expressPrintStarEntity){
	    	    if(StringUtils.equalsIgnoreCase(expressPrintStarEntity.getAsteriskCode(), DictionaryValueConstants.ASTERISK_TYPE_LINE1)){
	    	    		printLabelBean.setIsStarFlag("true");
	    	    }
    		}		
		}else{
	    	GoodsAreaEntity goodsAreaEntity = null;
    		//获得下一个到达站点对应的库区实体。判断库区实体是否需要打星号标记
	    	goodsAreaEntity = goodsAreaService.queryGoodsAreaByArriveRegionCode(nextRouteLineDto.getOrigOrgCode(), nextRouteLineDto.getObjectiveOrgCode(), waybillBean.getProductCode());
	    	if(null!=goodsAreaEntity){
	    	    if(StringUtils.equalsIgnoreCase(goodsAreaEntity.getAsteriskCode(), DictionaryValueConstants.ASTERISK_TYPE_LINE1)){
	    	    		printLabelBean.setIsStarFlag("true");
	    	    }
    		}
	    }
	}

	/**
	 * 
	 * <p>
	 * 综合走货路径标签是否打印"★"符号
	 * </p> 
	 * @author DP-Foss-YueHongJie
	 * @date 2013-5-9 下午4:45:08
	 * @see
	 */
	private void isPrintBseAsteriskGoodsArea(FreightRouteLineDto currentRouteLineDto,WaybillEntity waybillBean,BarcodePrintLabelDto printLabelBean){
	    	/**** yhj at 2013-05-09 add start *****/
		
		//如果是经济快递运单,判断是否需要打星号标记
		if(productService.onlineDetermineIsExpressByProductCode(waybillBean.getProductCode(), waybillBean.getBillTime())){
			ExpressPrintStarEntity expressPrintStarEntity = expressPrintStarService.queryExpressPrintStarByArriveRegionCode(currentRouteLineDto.getSourceCode(), currentRouteLineDto.getTargetCode());
			if(null!=expressPrintStarEntity){
	    	    if(StringUtils.equalsIgnoreCase(expressPrintStarEntity.getAsteriskCode(), DictionaryValueConstants.ASTERISK_TYPE_LINE1)){
	    	    		printLabelBean.setIsStarFlag("true");
	    	    }
    		}
		}else{
	    	GoodsAreaEntity goodsAreaEntity = null;
    		//获得下一个到达站点对应的库区实体。判断库区实体是否需要打星号标记
	    	goodsAreaEntity = goodsAreaService.queryGoodsAreaByArriveRegionCode(currentRouteLineDto.getSourceCode(), currentRouteLineDto.getTargetCode(), waybillBean.getProductCode());
	    	if(null!=goodsAreaEntity){
	    	    if(StringUtils.equalsIgnoreCase(goodsAreaEntity.getAsteriskCode(), DictionaryValueConstants.ASTERISK_TYPE_LINE1)){
	    	    	printLabelBean.setIsStarFlag("true");
	    	    }
    		}
	    }
    		/**** yhj at 2013-05-09 add end *****/
	}
	
	/**
	 * 根据运单号获得运单基本信息 并set BarcodePrintLabelDto
	 * 
	 * @param waybillNo
	 *            运单号
	 * @param serialNos
	 *            流水号
	 * @author fanbangyu
	 * @date 2012-11-13 下午4:40:28
	 * @see    
	 */
	
	public BarcodePrintLabelDto getGxgWaybillInfo(WaybillPendingEntity pend,String waybillStatus) {
		BarcodePrintLabelDto printLabelBean = new BarcodePrintLabelDto();
		//WaybillEntity waybillBean = null;
		//如果离线未查到数据则查 waybill表
		WaybillPendingEntity pendingEntity = pend;
		if(pend == null)
		{
			return null;
		}
		
		String waybillNo =pend.getWaybillNo();

		//是否图片开单，并且已开单,已开单则不查补录表
		WaybillPictureEntity pictureQueryEntity = new WaybillPictureEntity();
		pictureQueryEntity.setWaybillNo(waybillNo);
		pictureQueryEntity.setActive(WaybillConstants.YES);
		pictureQueryEntity.setPendgingType(WaybillConstants.WAYBILL_PICTURE_TYPE_PDA_ACTIVE);
		/*WaybillPictureEntity waybillPictureEntity = waybillPendingService.queryWaybillPictureByEntity(pictureQueryEntity);
		
		//判断打印标签是否属需要追打★符号标记
		//1、先按照提货网点看对应的站点属性标记是否需要追加打★
		//2、走货路由是否经过青岛如果经过则配载部门名称追加★符号
		
		//增加PDA补录的判断，当运单是PDA单的时候不应该查询该信息的
		if (pendingEntity != null && waybillPictureEntity == null ) {
			waybillBean = new WaybillEntity();
			if(StringUtils.isNotEmpty(pendingEntity.getPendingType())){
				//如果是PDA补录的，并且数据为空，则不允许他进行打印，因为PDA单的数据不全
				if("PDA_PENDING".equals(pendingEntity.getPendingType())){
					waybillBean = waybillDao.queryWaybillByNo(waybillNo);
					if(waybillBean == null){
						return null;
					}
				}
			}
			
			BeanUtils.copyProperties(pendingEntity, waybillBean);
			//打印展会货标记      DMANA-7978标签打印增加展会货标记
			printLabelBean.setIsExhibitCargo(pendingEntity.getIsExhibitCargo());
		}else {
			// 根据运单号查询 运单提交后基本信息
			waybillBean = waybillDao.queryWaybillByNo(waybillNo);
			// 查询该运单是否为作废运单
			ActualFreightEntity actualFreightEntity = actualFreightDao.queryByWaybillNo(waybillNo);
			// 如果运单不存在，或者该运单已作废，则返回 null
			if (waybillBean == null || actualFreightEntity == null || WaybillConstants.OBSOLETE.equals(actualFreightEntity.getStatus())) {
				return null;
			}
			//打印展会货标记      DMANA-7978标签打印增加展会货标记
			if(actualFreightEntity != null){
			printLabelBean.setIsExhibitCargo(actualFreightEntity.getIsExhibitCargo());
						}

		}*/
		//printLabelBean.setWaybillBean(waybillBean);
		//设置运单状态
		
		printLabelBean.setWaybillStatus(WaybillConstants.WAYBILL_STATUS_PC_PENDING);
		
		WaybillEntity waybillBean = new WaybillEntity();
		BeanUtils.copyProperties(pendingEntity, waybillBean);
		printLabelBean.setWaybillBean(waybillBean);
		// 定义变量 提货方式
		String receiveMethod = "空";
		// 判断 为 自提还是送货。
		// 包括汽运自提、空运自提等都简称为“自”
		/*if (WaybillConstants.SELF_PICKUP.equals(pendingEntity.getReceiveMethod()) || WaybillConstants.INNER_PICKUP.equals(pendingEntity.getReceiveMethod()) || WaybillConstants.AIR_PICKUP_FREE.equals(pendingEntity.getReceiveMethod())
				|| WaybillConstants.AIRPORT_PICKUP.equals(pendingEntity.getReceiveMethod()) || WaybillConstants.AIR_SELF_PICKUP.equals(pendingEntity.getReceiveMethod())) {
			receiveMethod = RECEVICEMETHOD_PICKUP;
		} else {
			// 否则默认为“送货” 包括空
			receiveMethod = RECEVICEMETHOD_DELIVER;
		}*/
		String receiveMethodCode =pend.getReceiveMethod();
		if(WaybillConstants.DELIVER_UP.equals(receiveMethodCode) ){
		receiveMethod = RECEVICEMETHOD_DELIVER;
		}else{
			receiveMethod = RECEVICEMETHOD_PICKUP;
		}
		
		// set 提货方式 自提 或 派送
		printLabelBean.setDeliverToDoor(receiveMethod);
		// set 运单号
		printLabelBean.setWaybillNumber(pendingEntity.getWaybillNo());
		// 获取当前登录人工号
		// 如果不为空则 赋值变量 userCode
		/*if (FossUserContext.getCurrentUser() != null && FossUserContext.getCurrentUser().getEmployee() != null) {
			userCode = FossUserContext.getCurrentUser().getEmployee().getEmpCode();
		}*/
		// 设置 打印人工号
		printLabelBean.setOptuserNum(pendingEntity.getCreateUserCode());
		// 设置打印日期 默认为系统当前日期
		printLabelBean.setPrintDate(new SimpleDateFormat("yyyy-MM-dd").format(new Date()));
		// 设置 收货客户联系人
		printLabelBean.setReceiveCustomerContact(pendingEntity.getReceiveCustomerContact());
		// 设置大客户标记
		printLabelBean.setReceiveBigCustomer(pendingEntity.getReceiveBigCustomer());
		printLabelBean.setDeliveryBigCustomer(pendingEntity.getDeliveryBigCustomer());
		
		// 如果产品 code 为空运、偏线 查询目的站编码
		if (ProductEntityConstants.PRICING_PRODUCT_PARTIAL_LINE.equals(pendingEntity.getProductCode()) 
				|| ProductEntityConstants.PRICING_PRODUCT_AIR_FREIGHT.equals(pendingEntity.getProductCode())) {
			// 偏线 查询目的站编码
			OuterBranchEntity outerBranchEntity = vehicleAgencyDeptService.queryOuterBranchByBranchCode(pendingEntity.getCustomerPickupOrgCode(), null);
			if (outerBranchEntity != null) {
				// 偏线设置目的站编码
				printLabelBean.setDestinationCode(outerBranchEntity.getStationNumber()); // 目的站打印标签编码
				// 偏线设置目的站简称
				printLabelBean.setDestination(outerBranchEntity.getSimplename());
				log.info("======目的站简称=======" + printLabelBean.getDestination());
			}
		}
		//查询产品类型为经济快递的目的站编码
		else if(WaybillConstants.directDetermineIsExpressByProductCode(pendingEntity.getProductCode())){
			// 快递代理 查询目的站编码
			OuterBranchExpressEntity outerBranchEntity = ldpAgencyDeptService.queryLdpAgencyDeptByCode(pendingEntity.getCustomerPickupOrgCode(), FossConstants.YES);
			if (outerBranchEntity != null) {
				// 快递代理设置目的站编码
				printLabelBean.setDestinationCode(outerBranchEntity.getStationNumber()); // 目的站打印标签编码
				// 快递代理设置目的站简称
				printLabelBean.setDestination(outerBranchEntity.getSimplename());
				log.info("======目的站简称=======" + printLabelBean.getDestination());
			}
			//若为空，则表示非快递代理网点
			else{
				// 专线目的站编码
				SaleDepartmentEntity saleDepartmentEntity = saleDepartmentService.querySaleDepartmentByCode(pendingEntity.getCustomerPickupOrgCode());
				if (saleDepartmentEntity != null) {
					printLabelBean.setDestinationCode(saleDepartmentEntity.getStationNumber()); // 目的站打印标签编码
				}
				// 根据提货网点OrgCode 获取部门信息
				OrgAdministrativeInfoEntity orgAdministrativeInfoEntity = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCode(pendingEntity.getCustomerPickupOrgCode(), pendingEntity.getBillTime());
				if (orgAdministrativeInfoEntity != null) {
					// 设置目的站为提货网点部门简称
					printLabelBean.setDestination(orgAdministrativeInfoEntity.getOrgSimpleName());
				}else{
					//因为组织信息在不停的变化，可能会出现运单开单时间跟组织信息时间的查询不匹配而查询不到数据，所以再查一次最新组织部门信息
					orgAdministrativeInfoEntity = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeClean(pendingEntity.getCustomerPickupOrgCode());
					if(orgAdministrativeInfoEntity != null){
						// 设置目的站为提货网点部门简称
						printLabelBean.setDestination(orgAdministrativeInfoEntity.getOrgSimpleName());
					}
				}
				if(orgAdministrativeInfoEntity != null){
					//wutao  === start
					/**
					 * 业务逻辑：根据目的站是否是XXX出发快递营业部，如果是，则把IsNoStop设置为YES，否则设置为NO。
					 * 在打印的时候，进行判断 该字段，如果是，则打印出@,否则什么都不打印。
					 */
					String isNonStop = orgAdministrativeInfoEntity.getName();
					if(isNonStop.indexOf(FossConstants.IS_START_EXPRESS) >= 0){
						printLabelBean.setIsNoStop(FossConstants.YES);
					}else{
						printLabelBean.setIsNoStop(FossConstants.NO);
					}
					//wutao === end
				}
				log.info("======目的站简称=======" + printLabelBean.getDestination());
			}
			
			//设置第二城市外场简称和第一外场城市
			setGXGCityLoadOrgName(printLabelBean, pendingEntity);
		}else {
			// 专线目的站编码
			SaleDepartmentEntity saleDepartmentEntity = saleDepartmentService.querySaleDepartmentByCode(pendingEntity.getCustomerPickupOrgCode());
			if (saleDepartmentEntity != null) {
				printLabelBean.setDestinationCode(saleDepartmentEntity.getStationNumber()); // 目的站打印标签编码
			}
			// 根据提货网点OrgCode 获取部门信息
			OrgAdministrativeInfoEntity orgAdministrativeInfoEntity = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCode(pendingEntity.getCustomerPickupOrgCode(), pendingEntity.getBillTime());
			if (orgAdministrativeInfoEntity != null) {
				// 设置目的站为提货网点部门简称
				printLabelBean.setDestination(orgAdministrativeInfoEntity.getOrgSimpleName());
			}else{
				//因为组织信息在不停的变化，可能会出现运单开单时间跟组织信息时间的查询不匹配而查询不到数据，所以再查一次最新组织部门信息
				orgAdministrativeInfoEntity = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeClean(pendingEntity.getCustomerPickupOrgCode());
				if(orgAdministrativeInfoEntity != null){
					// 设置目的站为提货网点部门简称
					printLabelBean.setDestination(orgAdministrativeInfoEntity.getOrgSimpleName());
				}
			}
			log.info("======目的站简称=======" + printLabelBean.getDestination());
		}
		log.info("======目的站编码=======" + printLabelBean.getDestinationCode());
		// A/B 货物 直接得到A/B 别且不等于NULL
		// 空运货物类型应考虑到 yhj at 2013-05-16 edit
		if (pendingEntity.getGoodsTypeCode() != null) {
			//如果不是空运走A/B货物 ,否则走空运取价格模型货物类型名称
			if(!ProductEntityConstants.PRICING_PRODUCT_AIR_FREIGHT.equals(pendingEntity.getProductCode())){
				printLabelBean.setGoodstype(pendingEntity.getGoodsTypeCode()); // 货物类型
			}else{
				GoodsTypeEntity goodsTypeEntity = goodsTypeService.getGoodsTypeByCache(pendingEntity.getGoodsTypeCode(), pendingEntity.getBillTime());
				if(null != goodsTypeEntity){
					printLabelBean.setGoodstype(goodsTypeEntity.getName()); // 货物类型名称
				}
			}
		}
		
		// 根据产品CODE 与开单时间 获得产品信息
		ProductEntity productEntity = productService.getProductByCache(pendingEntity.getProductCode(), pendingEntity.getBillTime());
		
		// 产品code
		printLabelBean.setProductCode(pendingEntity.getProductCode());

		if (productEntity != null && productEntity.getName() != null) {
			String transType = productEntity.getName();
			// 设置运输类型
			printLabelBean.setTranstype(transType);
			// 判断是否偏线
			if (transType.equals(WaybillConstants.HIGHWAYS_REFERRALS)) {
				printLabelBean.setIsAgent("true"); // 运输类型 是否偏线
			} else {
				printLabelBean.setIsAgent("false");
			}
		}
		// 根据收货部门 获取部门信息 始发站
		if (StringUtils.isNotEmpty(pendingEntity.getReceiveOrgCode())) {
			String createOrgCode = pendingEntity.getCreateOrgCode();
			/*if(waybillPictureEntity!=null && FossConstants.NO.equals(waybillPictureEntity.getLocal())
					&& StringUtils.isNotEmpty(waybillPictureEntity.getLocalBillGroupCode())){
				createOrgCode = waybillPictureEntity.getLocalBillGroupCode();
			}*/
			OrgAdministrativeInfoEntity org = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCode(createOrgCode, pendingEntity.getBillTime());
			if (org != null) {
				//经济快递
				if(ProductEntityConstants.PRICING_PRODUCT_EXPRESS_PACKAGE.equals(pendingEntity.getProductCode())){
					//若为经济快递则不用设置，因为在设置第二外场城市时已经设置了
				}else{
					// 设置 始发站 为 收货部门城市名称
					printLabelBean.setLeavecity(org.getCityName());
				}
			}
		}
		// printLabelBean.setOptuserNum(waybillBean.getCreateUserCode()); //
		// 当前用户

		// 重量
		if (pendingEntity.getGoodsWeightTotal() != null) {
			printLabelBean.setWeight(pendingEntity.getGoodsWeightTotal().toString());
		}
		// 包装
		printLabelBean.setPacking(pendingEntity.getGoodsPackage());

		// 总件数
		printLabelBean.setTotalPieces(String.valueOf(pendingEntity.getGoodsQtyTotal()));

		if(StringUtils.isEmpty(pendingEntity.getSpecialShapedGoods()))
		{
			// 是否异常货物
			printLabelBean.setUnusual("");
		}else
		{
			if(FossConstants.YES.equals(pendingEntity.getSpecialShapedGoods()))
			{
				// 是否异常货物
				printLabelBean.setUnusual("异");
			}else
			{
				// 是否异常货物
				printLabelBean.setUnusual("");
			}

		}
		// 航班早班 没有写
		printLabelBean.setPreassembly(pendingEntity.getFlightNumberType());
		return printLabelBean;
	}
	
	
	
	
	/**
	 * 根据运单号获得运单基本信息 并set BarcodePrintLabelDto
	 * 
	 * @param waybillNo
	 *            运单号
	 * @param serialNos
	 *            流水号
	 * @author foss-jiangfei
	 * @date 2012-11-13 下午4:40:28
	 * @see
	 */
	public BarcodePrintLabelDto getWaybillInfo(String waybillNo,String waybillStatus) {
		BarcodePrintLabelDto printLabelBean = new BarcodePrintLabelDto();
		WaybillEntity waybillBean = null;
		//如果离线未查到数据则查 waybill表
		WaybillPendingEntity pendingEntity = waybillPendingService.queryPendingByNo(waybillNo);
		//是否图片开单，并且已开单,已开单则不查补录表
		WaybillPictureEntity pictureQueryEntity = new WaybillPictureEntity();
		pictureQueryEntity.setWaybillNo(waybillNo);
		pictureQueryEntity.setActive(WaybillConstants.YES);
		pictureQueryEntity.setPendgingType(WaybillConstants.WAYBILL_PICTURE_TYPE_PDA_ACTIVE);
		WaybillPictureEntity waybillPictureEntity = waybillPendingService.queryWaybillPictureByEntity(pictureQueryEntity);
		
		//判断打印标签是否属需要追打★符号标记
		//1、先按照提货网点看对应的站点属性标记是否需要追加打★
		//2、走货路由是否经过青岛如果经过则配载部门名称追加★符号
		
		//增加PDA补录的判断，当运单是PDA单的时候不应该查询该信息的
		if (pendingEntity != null && waybillPictureEntity == null ) {
			waybillBean = new WaybillEntity();
			if(StringUtils.isNotEmpty(pendingEntity.getPendingType())){
				//如果是PDA补录的，并且数据为空，则不允许他进行打印，因为PDA单的数据不全
				if("PDA_PENDING".equals(pendingEntity.getPendingType())){
					waybillBean = waybillDao.queryWaybillByNo(waybillNo);
					if(waybillBean == null){
						return null;
					}
				}
			}
			
			BeanUtils.copyProperties(pendingEntity, waybillBean);
			//打印展会货标记      DMANA-7978标签打印增加展会货标记
			printLabelBean.setIsExhibitCargo(pendingEntity.getIsExhibitCargo());
		}else {
			// 根据运单号查询 运单提交后基本信息
			waybillBean = waybillDao.queryWaybillByNo(waybillNo);
			// 查询该运单是否为作废运单
			ActualFreightEntity actualFreightEntity = actualFreightDao.queryByWaybillNo(waybillNo);
			// 如果运单不存在，或者该运单已作废，则返回 null
			if (waybillBean == null || actualFreightEntity == null || WaybillConstants.OBSOLETE.equals(actualFreightEntity.getStatus())) {
				return null;
			}
			//打印展会货标记      DMANA-7978标签打印增加展会货标记
			if(actualFreightEntity != null){
			printLabelBean.setIsExhibitCargo(actualFreightEntity.getIsExhibitCargo());
			//350909      郭倩云        将零担轻货上分拣结果放在printLabelBean中
			printLabelBean.setSortingResult(actualFreightEntity.getSortingResult());
			}
		}
		printLabelBean.setWaybillBean(waybillBean);
		//设置提货网点编码
		printLabelBean.setCustomerPickupOrgCode(waybillBean.getCustomerPickupOrgCode());
		//设置运单状态
		printLabelBean.setWaybillStatus(waybillBean.getPendingType());
		// 定义变量 提货方式
		String receiveMethod = "空";
		// 判断 为 自提还是送货。
		// 包括汽运自提、空运自提等都简称为“自”
		if (WaybillConstants.SELF_PICKUP.equals(waybillBean.getReceiveMethod()) || WaybillConstants.INNER_PICKUP.equals(waybillBean.getReceiveMethod()) || WaybillConstants.AIR_PICKUP_FREE.equals(waybillBean.getReceiveMethod())
				|| WaybillConstants.AIRPORT_PICKUP.equals(waybillBean.getReceiveMethod()) || WaybillConstants.AIR_SELF_PICKUP.equals(waybillBean.getReceiveMethod())) {
			receiveMethod = RECEVICEMETHOD_PICKUP;
		} else {
			// 否则默认为“送货” 包括空
			receiveMethod = RECEVICEMETHOD_DELIVER;
		}
		// set 提货方式 自提 或 派送
		printLabelBean.setDeliverToDoor(receiveMethod);
		// set 运单号
		printLabelBean.setWaybillNumber(waybillBean.getWaybillNo());
		// 定义工号变量
		String userCode = null;
		// 获取当前登录人工号
		// 如果不为空则 赋值变量 userCode
		if (FossUserContext.getCurrentUser() != null && FossUserContext.getCurrentUser().getEmployee() != null) {
			userCode = FossUserContext.getCurrentUser().getEmployee().getEmpCode();
		}
		// 设置 打印人工号
		printLabelBean.setOptuserNum(userCode);
		// 设置打印日期 默认为系统当前日期
		printLabelBean.setPrintDate(new SimpleDateFormat("yyyy-MM-dd").format(new Date()));
		// 设置 收货客户联系人
		printLabelBean.setReceiveCustomerContact(waybillBean.getReceiveCustomerContact());
		// 设置大客户标记
		printLabelBean.setReceiveBigCustomer(waybillBean.getReceiveBigCustomer());
		printLabelBean.setDeliveryBigCustomer(waybillBean.getDeliveryBigCustomer());
		
		// 如果产品 code 为空运、偏线 查询目的站编码
		if (ProductEntityConstants.PRICING_PRODUCT_PARTIAL_LINE.equals(waybillBean.getProductCode()) 
				|| ProductEntityConstants.PRICING_PRODUCT_AIR_FREIGHT.equals(waybillBean.getProductCode())) {
			// 偏线 查询目的站编码
			OuterBranchEntity outerBranchEntity = vehicleAgencyDeptService.queryOuterBranchByBranchCode(waybillBean.getCustomerPickupOrgCode(), null);
			if (outerBranchEntity != null) {
				// 偏线设置目的站编码
				printLabelBean.setDestinationCode(outerBranchEntity.getStationNumber()); // 目的站打印标签编码
				// 偏线设置目的站简称
				printLabelBean.setDestination(outerBranchEntity.getSimplename());
				log.info("======目的站简称=======" + printLabelBean.getDestination());
			}
		}
		//查询产品类型为经济快递的目的站编码
		else if(productService.onlineDetermineIsExpressByProductCode(waybillBean.getProductCode(), waybillBean.getBillTime())){
			// 快递代理 查询目的站编码
			OuterBranchExpressEntity outerBranchEntity = ldpAgencyDeptService.queryLdpAgencyDeptByCode(waybillBean.getCustomerPickupOrgCode(), FossConstants.YES);
			if (outerBranchEntity != null) {
				// 快递代理设置目的站编码
				printLabelBean.setDestinationCode(outerBranchEntity.getStationNumber()); // 目的站打印标签编码
				// 快递代理设置目的站简称
				printLabelBean.setDestination(outerBranchEntity.getSimplename());
				log.info("======目的站简称=======" + printLabelBean.getDestination());
			}
			//若为空，则表示非快递代理网点
			else{
				// 专线目的站编码
				SaleDepartmentEntity saleDepartmentEntity = saleDepartmentService.querySaleDepartmentByCode(waybillBean.getCustomerPickupOrgCode());
				if (saleDepartmentEntity != null) {
					printLabelBean.setDestinationCode(saleDepartmentEntity.getStationNumber()); // 目的站打印标签编码
				}
				// 根据提货网点OrgCode 获取部门信息
				OrgAdministrativeInfoEntity orgAdministrativeInfoEntity = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCode(waybillBean.getCustomerPickupOrgCode(), waybillBean.getBillTime());
				if (orgAdministrativeInfoEntity != null) {
					// 设置目的站为提货网点部门简称
					printLabelBean.setDestination(orgAdministrativeInfoEntity.getOrgSimpleName());
				}else{
					//因为组织信息在不停的变化，可能会出现运单开单时间跟组织信息时间的查询不匹配而查询不到数据，所以再查一次最新组织部门信息
					orgAdministrativeInfoEntity = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeClean(waybillBean.getCustomerPickupOrgCode());
					if(orgAdministrativeInfoEntity != null){
						// 设置目的站为提货网点部门简称
						printLabelBean.setDestination(orgAdministrativeInfoEntity.getOrgSimpleName());
					}
				}
				if(orgAdministrativeInfoEntity != null){
					//wutao  === start
					/**
					 * 业务逻辑：根据目的站是否是XXX出发快递营业部，如果是，则把IsNoStop设置为YES，否则设置为NO。
					 * 在打印的时候，进行判断 该字段，如果是，则打印出@,否则什么都不打印。
					 */
					String isNonStop = orgAdministrativeInfoEntity.getName();
					if(isNonStop.indexOf(FossConstants.IS_START_EXPRESS) >= 0){
						printLabelBean.setIsNoStop(FossConstants.YES);
					}else{
						printLabelBean.setIsNoStop(FossConstants.NO);
					}
					//wutao === end
				}
				log.info("======目的站简称=======" + printLabelBean.getDestination());
			}
			
			//设置第二城市外场简称和第一外场城市
			setSecCityLoadOrgName(printLabelBean, waybillBean);
		}else {
			// 专线目的站编码
			SaleDepartmentEntity saleDepartmentEntity = saleDepartmentService.querySaleDepartmentByCode(waybillBean.getCustomerPickupOrgCode());
			if (saleDepartmentEntity != null) {
				printLabelBean.setDestinationCode(saleDepartmentEntity.getStationNumber()); // 目的站打印标签编码
			}
			// 根据提货网点OrgCode 获取部门信息
			OrgAdministrativeInfoEntity orgAdministrativeInfoEntity = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCode(waybillBean.getCustomerPickupOrgCode(), waybillBean.getBillTime());
			if (orgAdministrativeInfoEntity != null) {
				// 设置目的站为提货网点部门简称
				printLabelBean.setDestination(orgAdministrativeInfoEntity.getOrgSimpleName());
			}else{
				//因为组织信息在不停的变化，可能会出现运单开单时间跟组织信息时间的查询不匹配而查询不到数据，所以再查一次最新组织部门信息
				orgAdministrativeInfoEntity = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeClean(waybillBean.getCustomerPickupOrgCode());
				if(orgAdministrativeInfoEntity != null){
					// 设置目的站为提货网点部门简称
					printLabelBean.setDestination(orgAdministrativeInfoEntity.getOrgSimpleName());
				}
			}
			log.info("======目的站简称=======" + printLabelBean.getDestination());
		}
		log.info("======目的站编码=======" + printLabelBean.getDestinationCode());
		// A/B 货物 直接得到A/B 别且不等于NULL
		// 空运货物类型应考虑到 yhj at 2013-05-16 edit
		if (waybillBean.getGoodsTypeCode() != null) {
			//如果不是空运走A/B货物 ,否则走空运取价格模型货物类型名称
			if(!ProductEntityConstants.PRICING_PRODUCT_AIR_FREIGHT.equals(waybillBean.getProductCode())){
				printLabelBean.setGoodstype(waybillBean.getGoodsTypeCode()); // 货物类型
			}else{
				GoodsTypeEntity goodsTypeEntity = goodsTypeService.getGoodsTypeByCache(waybillBean.getGoodsTypeCode(), waybillBean.getBillTime());
				if(null != goodsTypeEntity){
					printLabelBean.setGoodstype(goodsTypeEntity.getName()); // 货物类型名称
				}
			}
		}
		
		// 根据产品CODE 与开单时间 获得产品信息
		ProductEntity productEntity = productService.getProductByCache(waybillBean.getProductCode(), waybillBean.getBillTime());
		
		// 产品code
		printLabelBean.setProductCode(waybillBean.getProductCode());

		if (productEntity != null && productEntity.getName() != null) {
			String transType = productEntity.getName();
			// 设置运输类型
			printLabelBean.setTranstype(transType);
			// 判断是否偏线
			if (transType.equals(WaybillConstants.HIGHWAYS_REFERRALS)) {
				printLabelBean.setIsAgent("true"); // 运输类型 是否偏线
			} else {
				printLabelBean.setIsAgent("false");
			}
		}
		// 根据收货部门 获取部门信息 始发站
		if (StringUtils.isNotEmpty(waybillBean.getReceiveOrgCode())) {
			String createOrgCode = waybillBean.getCreateOrgCode();
			log.info(waybillNo+"标签打印部门编码:"+createOrgCode);
			WaybillPictureEntity pictureQuery = null;
			if (waybillPictureEntity == null) {
				pictureQuery = new WaybillPictureEntity();
				pictureQuery.setWaybillNo(waybillNo);
				pictureQuery.setActive(WaybillConstants.YES);
				pictureQuery = waybillPendingService.queryWaybillPictureByEntity(pictureQuery);
			} else {
				pictureQuery = waybillPictureEntity;
			}
			if (pictureQuery != null
					&& FossConstants.NO.equals(pictureQuery.getLocal())
					&& StringUtils.isNotEmpty(pictureQuery
							.getLocalBillGroupCode())) {
				createOrgCode = pictureQuery.getLocalBillGroupCode();
				log.info(waybillNo+"标签打印为异地单部门编码"+createOrgCode);
			}
			OrgAdministrativeInfoEntity org = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCode(createOrgCode, waybillBean.getBillTime());
			if (org != null) {
				//经济快递
				if(ProductEntityConstants.PRICING_PRODUCT_EXPRESS_PACKAGE.equals(waybillBean.getProductCode())){
					//若为经济快递则不用设置，因为在设置第二外场城市时已经设置了
				}else{
					// 设置 始发站 为 收货部门城市名称
					log.info(waybillNo+"标签打印始发站 :"+org.getCityName());
					printLabelBean.setLeavecity(org.getCityName());
					//350909     郭倩云        零担轻货上分拣取得是城市简称
					printLabelBean.setSimpleLeaveCity(org.getSimpleCityName());
				}
			}
		}
		// printLabelBean.setOptuserNum(waybillBean.getCreateUserCode()); //
		// 当前用户

		// 重量
		if (waybillBean.getGoodsWeightTotal() != null) {
			printLabelBean.setWeight(waybillBean.getGoodsWeightTotal().toString());
		}
		// 包装
		printLabelBean.setPacking(waybillBean.getGoodsPackage());
		
		//其他包装（用于零担电子运单标签打印）
		printLabelBean.setOtherPackage(waybillBean.getOtherPackage());

		// 总件数
		printLabelBean.setTotalPieces(String.valueOf(waybillBean.getGoodsQtyTotal()));

		if(StringUtils.isEmpty(waybillBean.getSpecialShapedGoods()))
		{
			// 是否异常货物
			printLabelBean.setUnusual("");
		}else
		{
			if(FossConstants.YES.equals(waybillBean.getSpecialShapedGoods()))
			{
				// 是否异常货物
				printLabelBean.setUnusual("异");
			}else
			{
				// 是否异常货物
				printLabelBean.setUnusual("");
			}

		}
		// 航班早班 没有写
		printLabelBean.setPreassembly(waybillBean.getFlightNumberType());
		
		//是否零担电子运单以及订单状态
		OmsOrderEntity omsOrder = omsOrderService.queryOmsOrderByWaybillNo(waybillNo);
		if(omsOrder != null){
			printLabelBean.setIsElecLtlWaybill(FossConstants.YES);
			printLabelBean.setElecLtlWaybillStatus(omsOrder.getWaybillStatus());
		}else{
			printLabelBean.setIsElecLtlWaybill(FossConstants.NO);
		}
		
		return printLabelBean;
	}
	@Override
	public boolean queryIsExpressBill(String waybillNo) {
		String productCode = ProductEntityConstants.PRICING_PRODUCT_EXPRESS_PACKAGE;
		return waybillManagerService.queryIsExpressBill(waybillNo,productCode );
	}
	
	/**
	 * 获取走货线路上第二城市外场部门简称（即出发营业部对应外场所在城市的一下城市对应的第一个外场）：
	 * 1）若为同城（即全部外场在同一城市，或只有一个外场），则返回提货网点对应的部门名称（包含快递代理网点名称）
	 * 2）若非同城（即至少有2个外场对应的城市不一样）
	 * @author 026123-foss-lifengteng
	 * @date 2013-9-29 下午5:31:05
	 */
	private void setSecCityLoadOrgName(BarcodePrintLabelDto printLabelBean,WaybillEntity waybillBean){
		//出发部门编码
		/**
		 * KDTE-5242 5002287202货物标签破损，用FOSS补打标签，提示"找不到走货路径，请确认是否添加了走货路径"
		 *　需要传入的是制单部门而不是到达部门
		 */
		String waybillNo = waybillBean.getWaybillNo();
		String sourceCode = null;
		if(StringUtils.isNotEmpty(waybillNo)){
			//判断是否异地开单
			WaybillPictureEntity waybillPic = new WaybillPictureEntity();
			waybillPic.setActive(FossConstants.YES);
			waybillPic.setWaybillNo(waybillNo);
			waybillPic = waybillPendingService.queryWaybillPictureByEntity(waybillPic);
			if(waybillPic!=null && FossConstants.NO.equals(waybillPic.getLocal())
					&& StringUtil.isNotEmpty(waybillPic.getLocalBillGroupCode())){
				sourceCode = waybillPic.getLocalBillGroupCode();
			}else{
				sourceCode = waybillBean.getCreateOrgCode();
			}
		}else{
			sourceCode = waybillBean.getCreateOrgCode();
		}
		//目的站编码
		String targetCode = waybillBean.getCustomerPickupOrgCode();
		//产品类型
		String productCode = waybillBean.getProductCode();
		
		//出发外场城市名
		String firstCityName = "";
		//获取走货线路
		FreightRouteDto freightRouteDto = waybillManagerService.queryFreightRouteBySourceTarget(sourceCode, targetCode, productCode, new Date());
		//判断是否为空
		if (CollectionUtils.isNotEmpty(freightRouteDto.getFreightRouteLinelist())) {
			List<FreightRouteLineDto> freightRouteLinelist = freightRouteDto.getFreightRouteLinelist();//获得走货路径list
			// 得到途径始发营业部编码和外场编码 , 到达营业部 编码集合LIST A-C C-D D-B 得到这种格式
			List<String> addressInfoList = new ArrayList<String>();
			//拼接走货路径
			for (FreightRouteLineDto f : freightRouteLinelist) {
				addressInfoList.add(f.getSourceCode() + "-" + f.getTargetCode());
			}
			
			// 根据始发外场code 和外场集合 删除重复的外场 得到A C D B 格式的外场集合同时包含出发部门到达部门
			List<String> departmentInfoList = removeDuplicateRoute(addressInfoList);
			
			//判断是否有外场
			if(departmentInfoList.size() >= 2){
				//根据组织编码查询组织信息
				OrgAdministrativeInfoEntity org = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeNoCache(departmentInfoList.get(1));
				//出发外场编码对应的城市名称
				if(null != org){
					firstCityName = StringUtil.defaultIfNull(org.getCityName()).trim();
					printLabelBean.setLeavecity(firstCityName);
				}
				
				//若只有2个，则一定为同城
				if(departmentInfoList.size() == 2){
					//若为同城则设置第二城市外场简称为目的场
					printLabelBean.setSecLoadOrgName(printLabelBean.getDestination());
					return;
				}
				// 判断外场个数（去除出发部门）
				else{
					//外场所在城市名称
					String loadCityName = "";
					//遍历集合（从第2个开始遍历），查找不同城市的外场编码
					for (int i=1; i<=(departmentInfoList.size()-1); i++) {
						OrgAdministrativeInfoEntity loadOrg = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeNoCache(departmentInfoList.get(i));
						if(null != loadOrg){
							//城市名称是否为空
							if(StringUtils.isEmpty(loadOrg.getCityName())){
								AdministrativeRegionsEntity entity = administrativeRegionsService.queryAdministrativeRegionsByCodeNotCache(loadOrg.getCityCode());
								if(null != entity){
									loadCityName = entity.getName();
								}
							}else{
								//获得外场城市名
								loadCityName = StringUtil.defaultIfNull(loadOrg.getCityName()).trim();
							}
						}
						
						//外场所在城市编码与出发外场所在城市不一样
						if(loadOrg != null && StringUtil.isNotEmpty(firstCityName) && StringUtil.isNotEmpty(loadCityName) && !firstCityName.equals(loadCityName) ){
							//找到则设置第二城市外场简称,直接退出
							printLabelBean.setSecLoadOrgName(loadOrg.getOrgSimpleName());
							return;
						}
					}
					
					//若为同城则设置第二城市外场简称为目的场
					printLabelBean.setSecLoadOrgName(printLabelBean.getDestination());
				}
			}else{
				throw new WaybillValidateException("该走货线路错误：只有出发部门和到达部门，没有外场！");
			}
		}
	}
	
	private void setGXGCityLoadOrgName(BarcodePrintLabelDto printLabelBean,WaybillPendingEntity waybillBean){
		//出发部门编码
	/**
		 * KDTE-5242 5002287202货物标签破损，用FOSS补打标签，提示"找不到走货路径，请确认是否添加了走货路径"
		 *　需要传入的是制单部门而不是到达部门
		 */
		/*String sourceCode = null;
		if(StringUtils.isNotEmpty(waybillNo)){
			//判断是否异地开单
			WaybillPictureEntity waybillPic = new WaybillPictureEntity();
			waybillPic.setActive(FossConstants.YES);
			waybillPic.setWaybillNo(waybillNo);
			waybillPic = waybillPendingService.queryWaybillPictureByEntity(waybillPic);
			if(waybillPic!=null && FossConstants.NO.equals(waybillPic.getLocal())
					&& StringUtil.isNotEmpty(waybillPic.getLocalBillGroupCode())){
				sourceCode = waybillPic.getLocalBillGroupCode();
			}else{
				sourceCode = waybillBean.getCreateOrgCode();
			}
		}else{
			sourceCode = waybillBean.getCreateOrgCode();
		}*/
		//目的站编码
		String targetCode = waybillBean.getCustomerPickupOrgCode();
		//产品类型
		String productCode = waybillBean.getProductCode();
		
		//出发外场城市名
		String firstCityName = "";
		//获取走货线路
		FreightRouteDto freightRouteDto = waybillManagerService.queryFreightRouteBySourceTarget(waybillBean.getCreateOrgCode(), targetCode, productCode, new Date());
		//判断是否为空
		if (CollectionUtils.isNotEmpty(freightRouteDto.getFreightRouteLinelist())) {
			List<FreightRouteLineDto> freightRouteLinelist = freightRouteDto.getFreightRouteLinelist();//获得走货路径list
			// 得到途径始发营业部编码和外场编码 , 到达营业部 编码集合LIST A-C C-D D-B 得到这种格式
			List<String> addressInfoList = new ArrayList<String>();
			//拼接走货路径
			for (FreightRouteLineDto f : freightRouteLinelist) {
				addressInfoList.add(f.getSourceCode() + "-" + f.getTargetCode());
			}
			
			// 根据始发外场code 和外场集合 删除重复的外场 得到A C D B 格式的外场集合同时包含出发部门到达部门
			List<String> departmentInfoList = removeDuplicateRoute(addressInfoList);
			
			//判断是否有外场
			if(departmentInfoList.size() >= 2){
				//根据组织编码查询组织信息
				OrgAdministrativeInfoEntity org = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeNoCache(departmentInfoList.get(1));
				//出发外场编码对应的城市名称
				if(null != org){
					firstCityName = StringUtil.defaultIfNull(org.getCityName()).trim();
					printLabelBean.setLeavecity(firstCityName);
				}
				
				//若只有2个，则一定为同城
				if(departmentInfoList.size() == 2){
					//若为同城则设置第二城市外场简称为目的场
					printLabelBean.setSecLoadOrgName(printLabelBean.getDestination());
					return;
				}
				// 判断外场个数（去除出发部门）
				else{
					//外场所在城市名称
					String loadCityName = "";
					//遍历集合（从第2个开始遍历），查找不同城市的外场编码
					for (int i=1; i<=(departmentInfoList.size()-1); i++) {
						OrgAdministrativeInfoEntity loadOrg = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeNoCache(departmentInfoList.get(i));
						if(null != loadOrg){
							//城市名称是否为空
							if(StringUtils.isEmpty(loadOrg.getCityName())){
								AdministrativeRegionsEntity entity = administrativeRegionsService.queryAdministrativeRegionsByCodeNotCache(loadOrg.getCityCode());
								if(null != entity){
									loadCityName = entity.getName();
								}
							}else{
								//获得外场城市名
								loadCityName = StringUtil.defaultIfNull(loadOrg.getCityName()).trim();
							}
						}
						
						//外场所在城市编码与出发外场所在城市不一样
						if(loadOrg != null && StringUtil.isNotEmpty(firstCityName) && StringUtil.isNotEmpty(loadCityName) && !firstCityName.equals(loadCityName) ){
							//找到则设置第二城市外场简称,直接退出
							printLabelBean.setSecLoadOrgName(loadOrg.getOrgSimpleName());
							return;
						}
					}
					
					//若为同城则设置第二城市外场简称为目的场
					printLabelBean.setSecLoadOrgName(printLabelBean.getDestination());
				}
			}else{
				throw new WaybillValidateException("该走货线路错误：只有出发部门和到达部门，没有外场！");
			}
		}
	}
	
	/**
	 * 加入走货路径需要进行相关数据的封装，对运单信息进行判定，如果不是电子运单，直接抛出异常，减少后台交互次数
	 * 需注意：如果传入的流水号集合为空，默认为全部的流水号，因为这边需要考虑到与后台交互的 次数
	 * 修改：修改电子运单待补录也需要进行查询打印出来
	 * @author Foss-105888-Zhangxingwang
	 * @date 2014-6-30 20:03:30
	 * @param eWaybillBillDto
	 */
	@Override
	public List<EWaybillPrintDto> printEWaybillInfos(String waybillNo, List<String> serialNoList) {
		boolean isUnActive = false;
		//判断传入条件是否为空
		if(StringUtils.isEmpty(waybillNo)){
			log.info("传入的运单号为空");
			throw new BusinessException(WaybillLabelPrintException.WAYBILL_NUMBER_NOT_EXIST);
		}
		log.info("传入的对应运单号:"+waybillNo);
		// 查询该运单是否为作废运单
		ActualFreightEntity actualFreightEntity = actualFreightDao.queryByWaybillNo(waybillNo);
		WaybillEntity waybillBean = null;
		if(actualFreightEntity != null){
			//作废或者中止是不能进行相关运单打印的
			if(WaybillConstants.OBSOLETE.equals(actualFreightEntity.getStatus()) || WaybillConstants.ABORTED.equals(actualFreightEntity.getStatus())){
				throw new BusinessException(WaybillLabelPrintException.PRINT_EXISTWYBILL_EXCEPTION);
			}
			
			//判定是否电子运单，如果不是直接抛出异常，减少后台数据交互次数
			if(!WaybillConstants.WAYBILL_EWAYBILL_TYPE.equals(actualFreightEntity.getWaybillType())){
				throw new BusinessException(WaybillLabelPrintException.IS_NOT_EWAYBILLBEAN);
			}
			// 根据运单号查询 运单提交后基本信息
			waybillBean = waybillDao.queryWaybillByNo(waybillNo);
			if(waybillBean == null){
				Map<String, Object> maps = new HashMap<String, Object>();
				maps.put("waybillNo", waybillNo);
				maps.put("active", FossConstants.NO);
				maps.put("pendingType", WaybillConstants.WAYBILL_STATUS_EWAYBILL_PENDING);
				maps.put("waybillType", WaybillConstants.EWAYBILL);
				WaybillPendingEntity waybillPendingEntity = waybillPendingService.queryUnActiveEWaybillPendingByWaybilllNo(maps);
				if(waybillPendingEntity == null){
					throw new BusinessException(WaybillLabelPrintException.WAYBILLBEAN_NULL);
				}
				waybillBean = new WaybillEntity();
				BeanUtils.copyProperties(waybillPendingEntity, waybillBean);
				isUnActive = true;
			}
		}else{
			throw new BusinessException(WaybillLabelPrintException.WAYBILLBEAN_NULL);
		}
		//如果是电子运单待激活的数据，需要自己进行拼接流水号
		if(isUnActive){
			serialNoList = new ArrayList<String>();
			//如果货物件数为空或者为其他数据是没法进行后续操作的
			if(waybillBean.getGoodsQtyTotal() != null && waybillBean.getGoodsQtyTotal() > 0){
				for (int i = 1; i <= waybillBean.getGoodsQtyTotal(); i++) {
					serialNoList.add(String.format("%04d", i));
				}
			}else{
				throw new BusinessException(WaybillLabelPrintException.WAYBILLBEAN_NULL);
			}
		}
		//流水号信息
		if(CollectionUtils.isEmpty(serialNoList)){
			serialNoList = new ArrayList<String>();
			//查询货签信息
			List<LabeledGoodEntity> labelList = labeledGoodService.queryAllSerialByWaybillNo(waybillNo);
			if(CollectionUtils.isNotEmpty(labelList)){
				for(LabeledGoodEntity entity : labelList){
					serialNoList.add(entity.getSerialNo());
				}
			}else{
				throw new BusinessException(WaybillLabelPrintException.WAYBILLBEAN_NULL);
			}
		}
		//封装运单的一些基础数据，方便后期进行数据的统一
		EWaybillPrintDto printDto = getEWaybilllBaseData(waybillBean, actualFreightEntity);
		
		if(printDto == null){
			throw new WaybillLabelPrintException(WaybillLabelPrintException.PRINT_EXISTWYBILL_EXCEPTION);
		}
		//公司微信地址配置      电子运单二期中打印公司微信地址    
		// 获取配置参数
/*		ConfigurationParamsEntity config = pkpsysConfigService.queryConfigurationParamsByEntity(
						DictionaryConstants.SYSTEM_CONFIG_PARM__PKP,WaybillConstants.EWAYBILL_DEPPON_WEIXIN_ADDRESS,FossConstants.ROOT_ORG_CODE);
		//获取系统设定的时间，默认是7天
		if(config != null && StringUtils.isNotBlank(config.getConfValue())){
			printDto.setWeixinAddr(config.getConfValue());
		}*/
		
		//进行流水号的排序，防止打印串号
		if(serialNoList.size()>1){
			Collections.sort(serialNoList);
		}
		//进行走货路径数据的封装
		List<EWaybillPrintDto> printDtoList = new ArrayList<EWaybillPrintDto>();
		//如果是
		if(!isUnActive){
			//进行中转走货路径进行查询，如果报错，在往下查询一次综合走货路径
			try {
				List<RouteLineInfoDto> pathDetailList;
				for (int i = 0; i < serialNoList.size(); i++) {
					// 得到每个货件的走货路径 a-A A-B B-C C-D D-d
					pathDetailList = waybillManagerService.getRouteDetailInfo(waybillNo, serialNoList.get(i));
					if (pathDetailList.size() > 0) {
						// 解析该件货对应的走货路径 赋值给打印路径bean
						printDtoList.add(parseTheRouteForEWaybill(pathDetailList, printDto.getProductCode(), waybillBean));
					} else {
						break;
					}
				}
				//进行剩余数据的复制
				if(printDtoList != null && printDtoList.size() > 0){
					for(EWaybillPrintDto dto : printDtoList){
						BeanUtils.copyProperties(printDto, dto, false);
					}
				}
			} catch (Exception e) {
				log.info("寻求中转走货路径出错，错误详情:"+e);
				isUnActive = true;
			}
		}
		//进行中转走货路径的查询
		if(isUnActive){
			getEWaybillFreightRoute(printDto, waybillBean);
			//如果数据非空，进行清空
			if(CollectionUtils.isNotEmpty(printDtoList)){
				printDtoList.clear();
			}
			//进行数据的封装
			EWaybillPrintDto dto = null;
			for(int i=0;i<serialNoList.size();i++){
				dto = new EWaybillPrintDto();
				BeanUtils.copyProperties(printDto, dto);
				dto.setPrintSerialNos(serialNoList.get(i));
				printDtoList.add(dto);
			}
		}
		return printDtoList;
	}
	
	/**
	 * 获得走货路径信息 8+3 个 其中3个是最终外场信息
	 * 
	 * @author foss-jiangfei
	 * @date 2012-11-13 下午4:40:28
	 * @param waybillNo
	 *            运单号
	 * @see
	 */
	private void getEWaybillFreightRoute(EWaybillPrintDto printLabelBean, WaybillEntity waybillBean) {
		if (waybillBean == null) {
			return;
		}
		// 到达部门 ==到达营业部
		String lastLoadOrgCode = waybillBean.getCustomerPickupOrgCode();
		
		/****到达营业部是否需要追加星符号 yhj at 20130514 add ***/
		if(asteriskSalesDeptService.queryAsteriskDeptByCode(lastLoadOrgCode)){
			printLabelBean.setIsPrintStar(FossConstants.YES);
		}
		/****到达营业部是否需要追加星符号 yhj at 20130514 add ***/
		//判定是否打印@
		if(StringUtils.isNotEmpty(waybillBean.getCustomerPickupOrgCode())){
			OrgAdministrativeInfoEntity orgEntity = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeClean(waybillBean.getCustomerPickupOrgCode());
			if(orgEntity != null && orgEntity.getName().indexOf(FossConstants.IS_START_EXPRESS)>=0){
				//是否打印@
				printLabelBean.setIsPrintAt(FossConstants.YES);
			}
		}
		// 收货部门 ==出发营业部
		String startOrg = waybillBean.getCreateOrgCode();
		/**
		 * 判断是否是集中开单
		 */
		if (StringUtils.isNotEmpty(waybillBean.getPickupCentralized()) && StringUtils.equals(FossConstants.YES, waybillBean.getPickupCentralized())) {
			//查询组织信息
			OrgAdministrativeInfoEntity orgAdministrativeInfoEntity = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCode(waybillBean.getCreateOrgCode(),waybillBean.getBillTime());
			//这里相当于集中开单组最多走三次查询，先查历史记录，如果没有，在找实时的数据，实在找不到，再走中转的走货路径
			if(FossConstants.YES.equals(orgAdministrativeInfoEntity.getBillingGroup())){
				//历史查找
				//判断是否是 异地开单
				String waybillNo =  waybillBean.getWaybillNo();
				String  createOrgCode= waybillBean.getCreateOrgCode();
				if(StringUtil.isNotEmpty(waybillNo)){
					WaybillPictureEntity entity = waybillHessianRemoting.queryWaybillPictureByWaybillNo(waybillNo);
					if(entity!=null && FossConstants.NO.equals(entity.getLocal())){
						//根据本属开单组去查询
						createOrgCode = entity.getLocalBillGroupCode();
					}
				}
				SaleDepartmentEntity saleDepartment = waybillManagerService.queryPickupCentralizedDeptCodeAndBillTime(createOrgCode,waybillBean.getBillTime());
				if (saleDepartment != null) {
					startOrg = saleDepartment.getCode();
				}else{
					//再实时的查找当前数据
					String transCenterCode = waybillManagerService.queryTransCenterByBillingGroupCode(createOrgCode);
					SaleDepartmentEntity deliverDepartment = orgAdministrativeInfoComplexService.queryStationLeaveOrgByOutfieldCode(transCenterCode);
					if(deliverDepartment == null){
						//如果再找不到，则抛出异常，直接调用中转的走货路径：GUI和Web都有相应的扑捉Exception 方法
						throw new WaybillLabelPrintException("根据集中开单组"+orgAdministrativeInfoEntity.getName()+"("+orgAdministrativeInfoEntity.getCode()+")没有找到对应的外场出发驻地部门!");
					}
					startOrg = deliverDepartment.getCode();
				}
			}
		}
		// 根据出发到达 营业部得到 走货路径 List A-B B-C C-D 包括始发营业部 和到达营业部门
		List<FreightRouteLineDto> freightRouteLinelist = freightRouteService.queryFreightRouteBySourceTarget(startOrg, lastLoadOrgCode, waybillBean.getProductCode(), waybillBean.getBillTime());

		if (CollectionUtils.isNotEmpty(freightRouteLinelist)) {
			// 得到走货路径去掉始发营业部 A-B-C-D-d
			List<String> addressInfoList = new ArrayList<String>();
			// 走货路径 对应 货区号
			List<String> goodsAreaCodeList = new ArrayList<String>();
			// 空运、偏线查货区
			if (ProductEntityConstants.PRICING_PRODUCT_PARTIAL_LINE.equals(waybillBean.getProductCode()) || ProductEntityConstants.PRICING_PRODUCT_AIR_FREIGHT.equals(waybillBean.getProductCode())) {
				for (int i = 0; i < freightRouteLinelist.size(); i++) {
					// 判断到达部门 是否为外场
					OrgAdministrativeInfoEntity orgEntity = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeClean(freightRouteLinelist.get(i).getTargetCode());
					if (orgEntity != null && FossConstants.YES.equals(orgEntity.getTransferCenter())) {
						// 到达部门
						addressInfoList.add(freightRouteLinelist.get(i).getTargetCode());
					}
					String goodsAreaCode = null;
					// 根据走货路径获得货区号
					if (i == freightRouteLinelist.size() - 1) {
						List<GoodsAreaEntity> goodsAreaEntities = new ArrayList<GoodsAreaEntity>();
						// 空运货区
						if (ProductEntityConstants.PRICING_PRODUCT_AIR_FREIGHT.equals(waybillBean.getProductCode())) {
							goodsAreaEntities = goodsAreaService.queryGoodsAreaListByType(freightRouteLinelist.get(i).getSourceCode(), DictionaryValueConstants.BSE_GOODSAREA_TYPE_AIRFREIGHT);
						} else {
							// 偏线货区
							goodsAreaEntities = goodsAreaService.queryGoodsAreaListByType(freightRouteLinelist.get(i).getSourceCode(), DictionaryValueConstants.BSE_GOODSAREA_TYPE_OTHER);
						}
						if (goodsAreaEntities.size() > 0) {
							goodsAreaCode = goodsAreaEntities.get(0).getGoodsAreaCode();
						}
					} else {
						goodsAreaCode = goodsAreaService.queryCodeByArriveRegionCode(freightRouteLinelist.get(i).getSourceCode(), freightRouteLinelist.get(i).getTargetCode(), waybillBean.getProductCode());
						/**** yhj at 2013-05-09 add start *****/
						//	是否追加★符号，不是最后一个记录且还没有打过标记
				    	if(!StringUtils.equalsIgnoreCase(printLabelBean.getIsPrintStar(),FossConstants.YES)){
				    		isPrintBseAsteriskGoodsArea(freightRouteLinelist.get(i), printLabelBean);
				    	}
						/**** yhj at 2013-05-09 add end *****/
					}
					if(StringUtils.isNotEmpty(goodsAreaCode)){
						goodsAreaCodeList.add(goodsAreaCode);
					}
				}
			} else {
				// 专线查货区--------快递库区编码查询3357
				for (int i = 0; i < freightRouteLinelist.size(); i++) {
					// 判断到达部门 是否为外场
					OrgAdministrativeInfoEntity orgEntity = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeClean(freightRouteLinelist.get(i).getTargetCode());
					if (orgEntity != null && FossConstants.YES.equals(orgEntity.getTransferCenter())) {
						// 到达部门
						addressInfoList.add(freightRouteLinelist.get(i).getTargetCode());
					}
					String goodsAreaCode = null;
					if(productService.onlineDetermineIsExpressByProductCode(waybillBean.getProductCode(), waybillBean.getBillTime())){
						goodsAreaCode = expressPrintStarService.queryCodeByArriveRegionCode(freightRouteLinelist.get(i).getSourceCode(), freightRouteLinelist.get(i).getTargetCode(), waybillBean.getProductCode());
						if(StringUtils.isEmpty(goodsAreaCode)){
							goodsAreaCode = goodsAreaService.queryCodeByArriveRegionCode(freightRouteLinelist.get(i).getSourceCode(), freightRouteLinelist.get(i).getTargetCode(), waybillBean.getProductCode());
						}
					}else{
						goodsAreaCode = goodsAreaService.queryCodeByArriveRegionCode(freightRouteLinelist.get(i).getSourceCode(), freightRouteLinelist.get(i).getTargetCode(), printLabelBean.getProductCode());
					}
					/**** yhj at 2013-05-09 add start *****/
					//是否追加★符号,不看最后一个且星标记没有被标记
					if(!StringUtils.equalsIgnoreCase(printLabelBean.getIsPrintStar(),FossConstants.YES)){
						isPrintBseAsteriskGoodsArea(freightRouteLinelist.get(i), printLabelBean);
					}
					/**** yhj at 2013-05-09 add end *****/
					if(StringUtils.isNotEmpty(goodsAreaCode)){
						goodsAreaCodeList.add(goodsAreaCode);
					}
				}
			}
			if (addressInfoList.size() > 0) {
				List<String> newOrgCode = new ArrayList<String>(SIX);
				List<String> sortOrgCode = new ArrayList<String>(SIX);
				int x = 0;
				if (addressInfoList.size() > 0) {
					// 去掉最后营业部code 外场编码 取最后四位
					// if (changeCenterOrgCodes.length >=2) {
					for (int i = addressInfoList.size() - 1; (i >= 0 && x < SIX); i--) {
						newOrgCode.add(addressInfoList.get(i));
						x++;
					}
					// 倒序
					
					for (int k = newOrgCode.size(); k >= 1; k--) {
						sortOrgCode.add(newOrgCode.get(k - 1));
					}
					switch (sortOrgCode.size()) {
						case SIX:
							printLabelBean.setOuterField6(queryOutfieldName(sortOrgCode.get(FIVE)));
						case FIVE:
							printLabelBean.setOuterField5(queryOutfieldName(sortOrgCode.get(FOUR)));
	    				case FOUR:
	    					printLabelBean.setOuterField4(queryOutfieldName(sortOrgCode.get(THREE)));
	    				case THREE:
	    					printLabelBean.setOuterField3(queryOutfieldName(sortOrgCode.get(2)));
	    				case 2:
	    					printLabelBean.setOuterField2(queryOutfieldName(sortOrgCode.get(1)));
	    				default: {
	    					printLabelBean.setOuterField1(queryOutfieldName(sortOrgCode.get(0)));
		        		}
					}
				}
			}
			// 货区编号 取最后四位
			if (goodsAreaCodeList.size() > 0) {
				List<String> goodsAreaCode = new ArrayList<String>(SIX);
				int y = 0;
				for (int n = 0; (n < goodsAreaCodeList.size() && y < SIX); n++) {
					goodsAreaCode.add(goodsAreaCodeList.get(n));
					y++;
				}
				switch (goodsAreaCode.size()) {
					case SIX:
						printLabelBean.setLocation6(goodsAreaCode.get(FIVE));
					case FIVE:
						printLabelBean.setLocation5(goodsAreaCode.get(FOUR));
					case FOUR:
						printLabelBean.setLocation4(goodsAreaCode.get(THREE));
					case THREE:
						printLabelBean.setLocation3(goodsAreaCode.get(2));
					case 2:
						printLabelBean.setLocation2(goodsAreaCode.get(1));
					case 1:
						printLabelBean.setLocation1(goodsAreaCode.get(0));
				}
			}
		}
		//判断是否为空
		if (CollectionUtils.isNotEmpty(freightRouteLinelist)) {
			//获取最终配载部门编码
			String lastChangeCenterOrgCode = freightRouteLinelist.get(freightRouteLinelist.size() - 1).getSourceCode();
			//进行数据的赋值
			if(StringUtils.isNotEmpty(lastChangeCenterOrgCode)){
				OrgAdministrativeInfoEntity lastChangeCenterOrg = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeNoCache(lastChangeCenterOrgCode);
				if(lastChangeCenterOrg != null){
					printLabelBean.setLastLoadOrgCode(lastChangeCenterOrgCode);
					printLabelBean.setLastLoadOrgName(lastChangeCenterOrg.getName());
				}
			}
			// 得到途径始发营业部编码和外场编码 , 到达营业部 编码集合LIST A-C C-D D-B 得到这种格式
			List<String> addressInfoList = new ArrayList<String>();
			//拼接走货路径
			for (FreightRouteLineDto f : freightRouteLinelist) {
				addressInfoList.add(f.getSourceCode() + "-" + f.getTargetCode());
			}
			
			// 根据始发外场code 和外场集合 删除重复的外场 得到A C D B 格式的外场集合同时包含出发部门到达部门
			List<String> departmentInfoList = removeDuplicateRoute(addressInfoList);
			String firstCityName = null;
			//判断是否有外场
			if(departmentInfoList.size() >= 2){
				//根据组织编码查询组织信息
				OrgAdministrativeInfoEntity orgInfo = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeNoCache(departmentInfoList.get(1));
				//出发外场编码对应的城市名称
				if(null != orgInfo){
					firstCityName = orgInfo.getCityName();
					printLabelBean.setLeavecity(orgInfo.getCityName());
				}
				
				//若只有2个，则一定为同城
				if(departmentInfoList.size() == 2){
					//若为同城则设置第二城市外场简称为目的场
					printLabelBean.setSecondOutfieldName(printLabelBean.getCustomerPickupOrgName());
					return;
				}
				// 判断外场个数（去除出发部门）
				else{
					//外场所在城市名称
					String loadCityName = "";
					//遍历集合（从第2个开始遍历），查找不同城市的外场编码
					for (int i=1; i<=(departmentInfoList.size()-1); i++) {
						OrgAdministrativeInfoEntity loadOrg = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeNoCache(departmentInfoList.get(i));
						if(null != loadOrg){
							//城市名称是否为空
							if(StringUtils.isEmpty(loadOrg.getCityName())){
								AdministrativeRegionsEntity entityInfo = administrativeRegionsService.queryAdministrativeRegionsByCodeNotCache(loadOrg.getCityCode());
								if(null != entityInfo){
									loadCityName = entityInfo.getName();
								}
							}else{
								//获得外场城市名
								loadCityName = StringUtil.defaultIfNull(loadOrg.getCityName()).trim();
							}
						}
						
						//外场所在城市编码与出发外场所在城市不一样
						if(loadOrg != null && StringUtil.isNotEmpty(firstCityName) && StringUtil.isNotEmpty(loadCityName) && !firstCityName.equals(loadCityName) ){
							//找到则设置第二城市外场简称,直接退出
							printLabelBean.setSecondOutfieldName(loadOrg.getOrgSimpleName());
							return;
						}
					}
					
					//若为同城则设置第二城市外场简称为目的场
					printLabelBean.setSecondOutfieldName(printLabelBean.getCustomerPickupOrgName());
				}
			}
		}

	}
	
	private void isPrintBseAsteriskGoodsArea(FreightRouteLineDto currentRouteLineDto, EWaybillPrintDto printLabelBean){
		//如果是经济快递运单,判断是否需要打星号标记
		if(productService.onlineDetermineIsExpressByProductCode(printLabelBean.getProductCode(), new Date())){
			ExpressPrintStarEntity expressPrintStarEntity = expressPrintStarService.queryExpressPrintStarByArriveRegionCode(currentRouteLineDto.getSourceCode(), currentRouteLineDto.getTargetCode());
			if(null!=expressPrintStarEntity){
	    	    if(StringUtils.equalsIgnoreCase(expressPrintStarEntity.getAsteriskCode(), DictionaryValueConstants.ASTERISK_TYPE_LINE1)){
	    	    	printLabelBean.setIsPrintStar(FossConstants.YES);
	    	    }
			}		
		}else{
	    	GoodsAreaEntity goodsAreaEntity = null;
			//获得下一个到达站点对应的库区实体。判断库区实体是否需要打星号标记
	    	goodsAreaEntity = goodsAreaService.queryGoodsAreaByArriveRegionCode(currentRouteLineDto.getSourceCode(), currentRouteLineDto.getTargetCode(), printLabelBean.getProductCode());
	    	if(null!=goodsAreaEntity){
	    	    if(StringUtils.equalsIgnoreCase(goodsAreaEntity.getAsteriskCode(), DictionaryValueConstants.ASTERISK_TYPE_LINE1)){
	    	    	printLabelBean.setIsPrintStar(FossConstants.YES);
	    	    }
			}
	    }
	}

	
	/**
	 * 拼装走货路径数据
	 * @author Foss-105888-Zhangxingwang
	 * @date 2014-8-27 17:26:40
	 * @param pathDetail
	 * @param productCode
	 * @param waybillBean
	 * @return
	 */
	private EWaybillPrintDto parseTheRouteForEWaybill(List<RouteLineInfoDto> pathDetail, String productCode, WaybillEntity waybillBean) {
		EWaybillPrintDto eWaybillPrintDto = new EWaybillPrintDto();
		// 得到 走货路径 a-A-B-C-D-d （去掉始发营业部）
		StringBuffer path = new StringBuffer();
		// 走货路径 对应 货区号
		List<String> goodsAreaCodeList = new ArrayList<String>();
		int m = 0;
		//判断是否为集中开单组，如果是则第一个就是外场，否则从第二个开始
		if(pathDetail.size()>1){
			if(FossConstants.NO.equals(waybillBean.getPickupCentralized())){
				m = 1;
			}
		}
		// 出发部门
		path.append(pathDetail.get(m).getOrigOrgCode());
		
		if(pathDetail.size() > 0){
			String lastLoadOrgCode = pathDetail.get(pathDetail.size() - 1).getOrigOrgCode();
			eWaybillPrintDto.setLastLoadOrgCode(lastLoadOrgCode);
			OrgAdministrativeInfoEntity lastLoadOrg = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeClean(lastLoadOrgCode);
			if(lastLoadOrg != null){
				//最终
				eWaybillPrintDto.setLastLoadOrgName(lastLoadOrg.getName());
			}
		}
		
		/** 根据到达部门判断是否追加星符号 ***/
		if(asteriskSalesDeptService.queryAsteriskDeptByCode(waybillBean.getCustomerPickupOrgCode())){
			eWaybillPrintDto.setIsPrintStar(FossConstants.YES);//记录星标记
		}
		
		//判定是否打印@
		if(StringUtils.isNotEmpty(waybillBean.getCustomerPickupOrgCode())){
			OrgAdministrativeInfoEntity orgEntity = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeClean(waybillBean.getCustomerPickupOrgCode());
			if(orgEntity != null && orgEntity.getName().indexOf(FossConstants.IS_START_EXPRESS)>=0){
				//是否打印@
				eWaybillPrintDto.setIsPrintAt(FossConstants.YES);
			}
		}
		// 空运、偏线目的站编码
		if (ProductEntityConstants.PRICING_PRODUCT_PARTIAL_LINE.equals(productCode) || ProductEntityConstants.PRICING_PRODUCT_AIR_FREIGHT.equals(productCode)) {
			for (int i = m; i < pathDetail.size(); i++) {
				RouteLineInfoDto route = pathDetail.get(i);
				// 判断到达部门 是否为外场
				OrgAdministrativeInfoEntity orgEntity = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeClean(pathDetail.get(i).getObjectiveOrgCode());
				if (orgEntity != null && FossConstants.YES.equals(orgEntity.getTransferCenter())) {
					// 到达部门
					path.append(SLASH).append(pathDetail.get(i).getObjectiveOrgCode());
				}
				// 判断出发部门是否为外场
				OrgAdministrativeInfoEntity orgStartEntity = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeClean(pathDetail.get(i).getOrigOrgCode());
				String goodsAreaCode = null;
				if (orgStartEntity != null && FossConstants.YES.equals(orgStartEntity.getTransferCenter())) {
					// 根据走货路径获得货区号

					// 偏线查询货区
					if (i == pathDetail.size() - 1) {
						List<GoodsAreaEntity> goodsAreaEntities = new ArrayList<GoodsAreaEntity>();
						// 空运货区
						if (ProductEntityConstants.PRICING_PRODUCT_AIR_FREIGHT.equals(productCode)) {
							goodsAreaEntities = goodsAreaService.queryGoodsAreaListByType(route.getOrigOrgCode(), DictionaryValueConstants.BSE_GOODSAREA_TYPE_AIRFREIGHT);
						} else {
							// 偏线货区
							goodsAreaEntities = goodsAreaService.queryGoodsAreaListByType(route.getOrigOrgCode(), DictionaryValueConstants.BSE_GOODSAREA_TYPE_OTHER);
						}
						if (goodsAreaEntities.size() > 0) {
							goodsAreaCode = goodsAreaEntities.get(0).getGoodsAreaCode();
						}
					} else {
						goodsAreaCode = goodsAreaService.queryCodeByArriveRegionCode(route.getOrigOrgCode(), route.getObjectiveOrgCode(), productCode);
					}
				}
				if (goodsAreaCode != null) {
				    /**** yhj at 2013-05-09 add start *****/
//							是否追加★符号，不是最后一个记录且还没有打过标记
			    	if(!StringUtils.equalsIgnoreCase(eWaybillPrintDto.getIsPrintStar(),FossConstants.YES)){
			    		isPrintTransAsteriskForEWaybill(pathDetail.get(i),waybillBean, eWaybillPrintDto);
			    	}
				    /**** yhj at 2013-05-09 add end *****/
				    goodsAreaCodeList.add(goodsAreaCode);
				}
			}
		} else {
			// 专线货区
			for (int i = m; i < pathDetail.size(); i++) {
				RouteLineInfoDto route = pathDetail.get(i);
				// 判断到达部门 是否为外场
				OrgAdministrativeInfoEntity orgEntity = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeClean(pathDetail.get(i).getObjectiveOrgCode());
				if (orgEntity != null && FossConstants.YES.equals(orgEntity.getTransferCenter())) {
					// 到达部门
					path.append(SLASH).append(pathDetail.get(i).getObjectiveOrgCode());
				}
				// 判断出发部门是否为外场
				OrgAdministrativeInfoEntity orgStartEntity = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeClean(pathDetail.get(i).getOrigOrgCode());
				String goodsAreaCode = null;
				if (orgStartEntity != null && FossConstants.YES.equals(orgStartEntity.getTransferCenter())) {
					if(productService.onlineDetermineIsExpressByProductCode(productCode, waybillBean.getBillTime())){
						goodsAreaCode = expressPrintStarService.queryCodeByArriveRegionCode(route.getOrigOrgCode(), route.getObjectiveOrgCode(), productCode);
						if(StringUtils.isEmpty(goodsAreaCode)){
							// 根据走货路径获得货区号
							goodsAreaCode = goodsAreaService.queryCodeByArriveRegionCode(route.getOrigOrgCode(), route.getObjectiveOrgCode(), productCode);
						}
					}else{
						// 根据走货路径获得货区号
						goodsAreaCode = goodsAreaService.queryCodeByArriveRegionCode(route.getOrigOrgCode(), route.getObjectiveOrgCode(), productCode);
					}					
				}
				if (goodsAreaCode != null) {
				    	/**** yhj at 2013-05-09 add start *****/
					 	//	是否追加★符号，不是最后一个记录且还没有打过标记
				    	if(!StringUtils.equalsIgnoreCase(eWaybillPrintDto.getIsPrintStar(),FossConstants.YES)){
				    		isPrintTransAsteriskForEWaybill(pathDetail.get(i), waybillBean, eWaybillPrintDto);
				    	}
					 /**** yhj at 2013-05-09 add end *****/
					goodsAreaCodeList.add(goodsAreaCode);
				}
			}
		}
			// set 流水号
		eWaybillPrintDto.setPrintSerialNos(pathDetail.get(0).getGoodsNo());

		if (path.length() > 0) {
			String[] changeCenterOrgCodes = path.toString().split(SLASH);
			List<String> newOrgCode = new ArrayList<String>(SIX);
			List<String> sortOrgCode = new ArrayList<String>(SIX);
			int x = 0;
			if (changeCenterOrgCodes.length > 0) {
				// 去掉最后营业部code 外场编码 取最后四位
				// if (changeCenterOrgCodes.length >=2) {
				for (int i = changeCenterOrgCodes.length - 1; (i >= 0 && x < SIX); i--) {
					newOrgCode.add(changeCenterOrgCodes[i]);
					x++;
				}
				// 倒序
				
				for (int k = newOrgCode.size(); k >= 1; k--) {
					sortOrgCode.add(newOrgCode.get(k - 1));
				}
					// }
				switch (sortOrgCode.size()) {
					case SIX:
						eWaybillPrintDto.setOuterField6(queryOutfieldName(sortOrgCode.get(FIVE)));
					case FIVE:
						eWaybillPrintDto.setOuterField5(queryOutfieldName(sortOrgCode.get(FOUR)));
    				case FOUR:
    					eWaybillPrintDto.setOuterField4(queryOutfieldName(sortOrgCode.get(THREE)));
    				case THREE:
    					eWaybillPrintDto.setOuterField3(queryOutfieldName(sortOrgCode.get(2)));
    				case 2:
    					eWaybillPrintDto.setOuterField2(queryOutfieldName(sortOrgCode.get(1)));
    				default: {
    					eWaybillPrintDto.setOuterField1(queryOutfieldName(sortOrgCode.get(0)));
	        		}
				}
			}
		}
		// 货区编号 取最后四位
		if (goodsAreaCodeList.size() > 0) {
			List<String> goodsAreaCode = new ArrayList<String>(SIX);
			int y = 0;
			for (int n = 0; (n < goodsAreaCodeList.size() && y < SIX); n++) {
				goodsAreaCode.add(goodsAreaCodeList.get(n));
				y++;
			}
			switch (goodsAreaCode.size()) {
				case SIX:
					eWaybillPrintDto.setLocation6(goodsAreaCode.get(FIVE));
				case FIVE:
					eWaybillPrintDto.setLocation5(goodsAreaCode.get(FOUR));
				case FOUR:
					eWaybillPrintDto.setLocation4(goodsAreaCode.get(THREE));
				case THREE:
					eWaybillPrintDto.setLocation3(goodsAreaCode.get(2));
				case 2:
					eWaybillPrintDto.setLocation2(goodsAreaCode.get(1));
				case 1:
					eWaybillPrintDto.setLocation1(goodsAreaCode.get(0));
				default: {
					//to do nothing
				}
			}
		}
		return eWaybillPrintDto;
	}

	/**
	 * 查询外场名称
	 * @author Foss-105888-Zhangxingwang
	 * @date 2014-8-27 20:34:59
	 * @param pOrgCode
	 * @return
	 */
	private String queryOutfieldName(String pOrgCode) {
		OutfieldEntity outfieldEntity = null;
		// 判断 是否为空运总调
		OrgAdministrativeInfoEntity orgEntity = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeClean(pOrgCode);
		if (orgEntity != null) {
			if (FossConstants.YES.equals(orgEntity.getAirDispatch())) {
				// 空运查外场
				outfieldEntity = outfieldService.queryOutfieldEntityByAirDispatchCode(pOrgCode);
			} else {
				// 偏线、专线查外场
				outfieldEntity = outfieldService.queryOutfieldByOrgCode(pOrgCode);
			}
		}
		return outfieldEntity == null ? null : outfieldEntity.getName();
	}
	
	/**
	 * 获取是否打印星标
	 * @author Foss-105888-Zhangxingwang
	 * @date 2014-8-27 17:22:58
	 * @param nextRouteLineDto
	 * @param waybillBean
	 * @param printLabelBean
	 */
	private void isPrintTransAsteriskForEWaybill(RouteLineInfoDto nextRouteLineDto,WaybillEntity waybillBean,EWaybillPrintDto printLabelBean){
		//如果是经济快递运单,判断是否需要打星号标记
		if(productService.onlineDetermineIsExpressByProductCode(waybillBean.getProductCode(), waybillBean.getBillTime())){
			ExpressPrintStarEntity expressPrintStarEntity = expressPrintStarService.queryExpressPrintStarByArriveRegionCode(nextRouteLineDto.getOrigOrgCode(), nextRouteLineDto.getObjectiveOrgCode());
			if(null!=expressPrintStarEntity){
	    	    if(StringUtils.equalsIgnoreCase(expressPrintStarEntity.getAsteriskCode(), DictionaryValueConstants.ASTERISK_TYPE_LINE1)){
	    	    	printLabelBean.setIsPrintStar(FossConstants.YES);
	    	    }
    		}		
		}else{
	    	GoodsAreaEntity goodsAreaEntity = null;
    		//获得下一个到达站点对应的库区实体。判断库区实体是否需要打星号标记
	    	goodsAreaEntity = goodsAreaService.queryGoodsAreaByArriveRegionCode(nextRouteLineDto.getOrigOrgCode(), nextRouteLineDto.getObjectiveOrgCode(), waybillBean.getProductCode());
	    	if(null!=goodsAreaEntity){
	    	    if(StringUtils.equalsIgnoreCase(goodsAreaEntity.getAsteriskCode(), DictionaryValueConstants.ASTERISK_TYPE_LINE1)){
	    	    	printLabelBean.setIsPrintStar(FossConstants.YES);
	    	    }
    		}
	    }
	}

	/**
	 * 获取运单基础资料
	 * @author Foss-105888-Zhangxingwang
	 * @date 2014-8-27 17:22:18
	 * @param waybillBean
	 * @return
	 */
	private EWaybillPrintDto getEWaybilllBaseData(WaybillEntity waybillBean, ActualFreightEntity actualFreightEntity) {
		EWaybillPrintDto printDto = new EWaybillPrintDto();
		//封装基本参数
		//运单号
		printDto.setWaybillNo(StringUtil.defaultIfNull(waybillBean.getWaybillNo()));
		//订单信息
		if(StringUtils.isNotEmpty(waybillBean.getOrderNo())){
			DispatchOrderEntity dispatchOrderEntity = dispatchOrderEntityDao.queryBasicDispachOrderEntity(waybillBean.getOrderNo());

//			printDto.setOrderNo(dispatchOrderEntity.getChannelNumber());//无法获取客户单号
			
			printDto.setOrderTime(new SimpleDateFormat("yyyy-MM-dd").format(dispatchOrderEntity.getOrderTime()));
			printDto.setOrderNotes(dispatchOrderEntity.getOrderNotes());
		}
		//开单部门
		printDto.setCreateOrgName(StringUtil.defaultIfNull(waybillBean.getCreateUserDeptName()));
		/**
		 * 寄件人信息
		 */
		//联系人
		printDto.setDeliveryCustomerContact(StringUtil.defaultIfNull(waybillBean.getDeliveryCustomerContact()));
		//提货客户是否大客户
		printDto.setReceiveBigCustomer(waybillBean.getReceiveBigCustomer());
		//发货客户是否大客户
		if(StringUtils.isNotEmpty(waybillBean.getDeliveryCustomerCode())){
			List<CustomerEntity> customerEntityList = customerDao.queryNoDeletedCustInfoByCode(waybillBean.getDeliveryCustomerCode());
			if(CollectionUtils.isNotEmpty(customerEntityList) && FossConstants.YES.equals(customerEntityList.get(0).getIsElecBillBigCust())){
				printDto.setDeliveryBigCustomer(FossConstants.YES);
			}
		}
		//寄件地址数据的拼装
		StringBuffer sf = new StringBuffer();
		AdministrativeRegionsEntity prov = administrativeRegionsService.queryAdministrativeRegionsByCode(StringUtil.defaultIfNull(waybillBean.getDeliveryCustomerProvCode()));
		if(prov != null){
			sf.append(StringUtil.defaultIfNull(prov.getName()));
		}
		AdministrativeRegionsEntity city = administrativeRegionsService.queryAdministrativeRegionsByCode(StringUtil.defaultIfNull(waybillBean.getDeliveryCustomerCityCode()));
		if(city != null){
			sf.append(StringUtil.defaultIfNull(city.getName()));
		}
		AdministrativeRegionsEntity county = administrativeRegionsService.queryAdministrativeRegionsByCode(StringUtil.defaultIfNull(waybillBean.getDeliveryCustomerDistCode()));
		if(county != null){
			sf.append(StringUtil.defaultIfNull(county.getName()));
		}
		sf.append(StringUtil.defaultIfNull(waybillBean.getDeliveryCustomerAddress()));
		//地址备注
		if(StringUtils.isNotEmpty(actualFreightEntity.getDeliveryCustomerAddressNote())){
			sf.append("("+actualFreightEntity.getDeliveryCustomerAddressNote()+")");
		}
		/**
		 * 收件地址
		 */
		printDto.setDeliveryCustomerAddress(StringUtil.defaultIfNull(sf.toString()));
		//寄件人信息
		printDto.setDeliveryCustomerContact(StringUtil.defaultIfNull(waybillBean.getDeliveryCustomerContact()));
		//手机
		printDto.setDeliveryCustomerMobilephone(StringUtil.defaultIfNull(waybillBean.getDeliveryCustomerMobilephone()));
		//电话，
		printDto.setDeliveryCustomerPhone(StringUtil.defaultIfNull(waybillBean.getDeliveryCustomerPhone()));
		//收件人名称
		printDto.setDeliveryCustomerName(StringUtil.defaultIfNull(waybillBean.getDeliveryCustomerName()));
		
		/**
		 * 收件地址数据的拼装
		 */
		//收件人信息
		printDto.setReceiveCustomerContact(StringUtil.defaultIfNull(waybillBean.getReceiveCustomerContact()));
		StringBuffer sf1 = new StringBuffer();
		AdministrativeRegionsEntity prov1 = administrativeRegionsService.queryAdministrativeRegionsByCode(StringUtil.defaultIfNull(waybillBean.getReceiveCustomerProvCode()));
		if(prov1 != null){
			sf1.append(StringUtil.defaultIfNull(prov1.getName()));
		}
		AdministrativeRegionsEntity city1 = administrativeRegionsService.queryAdministrativeRegionsByCode(StringUtil.defaultIfNull(waybillBean.getReceiveCustomerCityCode()));
		if(city1 != null){
			sf1.append(StringUtil.defaultIfNull(city1.getName()));
		}
		AdministrativeRegionsEntity county1 = administrativeRegionsService.queryAdministrativeRegionsByCode(StringUtil.defaultIfNull(waybillBean.getReceiveCustomerDistCode()));
		if(county1 != null){
			sf1.append(StringUtil.defaultIfNull(county1.getName()));
		}
		sf1.append(StringUtil.defaultIfNull(waybillBean.getReceiveCustomerAddress()));
		if(StringUtils.isNotEmpty(actualFreightEntity.getReceiveCustomerAddressNote())){
			sf1.append("("+actualFreightEntity.getReceiveCustomerAddressNote()+")");
		}
		//收件地址
		printDto.setReceiveCustomerAddress(StringUtil.defaultIfNull(sf1.toString()));
		//手机号
		printDto.setReceiveCustomerMobilephone(StringUtil.defaultIfNull(waybillBean.getReceiveCustomerMobilephone()));
		//电话
		printDto.setReceiveCustomerPhone(StringUtil.defaultIfNull(waybillBean.getReceiveCustomerPhone()));
		//提货人联系人
		printDto.setReceiveCustomerName(StringUtil.defaultIfNull(waybillBean.getReceiveCustomerName()));
		/*
		 * 货物信息
		 */
		//货物名称
		printDto.setGoodsName(StringUtil.defaultIfNull(waybillBean.getGoodsName()));
		//货物总件数
		printDto.setGoodsQtyTotal(waybillBean.getGoodsQtyTotal());
		//重量
		printDto.setGoodsWeightTotal(StringUtil.defaultIfNull(waybillBean.getGoodsWeightTotal().toString()));
		//货物包装
		printDto.setGoodsPackage(StringUtil.defaultIfNull(waybillBean.getGoodsPackage()));
		
		/**
		 * 增值服务
		 */
		//保价声明金额
		printDto.setInsuranceAmount(waybillBean.getInsuranceAmount().toString());
		//保价费用
		printDto.setInsuranceFee(waybillBean.getInsuranceFee().toString());
		//受否签收回单
		if(StringUtils.isNotEmpty(waybillBean.getReturnBillType())){
			DataDictionaryValueEntity data = dataDictionaryValueService
					.queryDataDictionaryValueByTermsCodeValueCode(WaybillConstants.RETURN_BILL_TYPE, waybillBean.getReturnBillType());
			if(data != null){
				printDto.setReturnBillType(StringUtil.defaultIfNull(data.getValueName()));
			}
		}
		//代收货款
		printDto.setCodAmount(StringUtil.defaultIfNull(waybillBean.getCodAmount().toString()));
		//代收账号
		if(StringUtils.isNotEmpty(waybillBean.getAccountCode())){
			//进行后台账号数据的加密，因为这个是通用接口，所以需要进行账号的加密而不是写在前台进行加密
			printDto.setAccountNo(StringUtil.defaultIfNull(jiamiAccountNum(waybillBean.getAccountCode())));
		}
		//包装费
		printDto.setPackageFee(StringUtil.defaultIfNull(waybillBean.getPackageFee().toString()));
		// 根据产品CODE 与开单时间 获得产品信息
		printDto.setProductCode(waybillBean.getProductCode());
		ProductEntity productEntity = productService.getProductByCache(waybillBean.getProductCode(), waybillBean.getBillTime());
		if(productEntity != null){
			printDto.setProductName(StringUtil.defaultIfNull(productEntity.getName()));
		}
		
		//计费重量
		printDto.setBillWeight(StringUtil.defaultIfNull(waybillBean.getBillWeight().toString()));
		DataDictionaryValueEntity data = dataDictionaryValueService
				.queryDataDictionaryValueByTermsCodeValueCode(WaybillConstants.PAYMENT_MODE, waybillBean.getPaidMethod());
		if(data != null){
			//付款方式
			printDto.setPaidMethod(StringUtil.defaultIfNull(data.getValueName()));
		}
		//TODO 运费
		printDto.setTransportFee(StringUtil.defaultIfNull(waybillBean.getTransportFee().toString()));
		//总费用
		printDto.setTotalFee(StringUtil.defaultIfNull(waybillBean.getTotalFee().toString()));
		//TODO 收件员
/*		printDto.setDeliverMan(StringUtil.defaultIfNull(waybillBean.getCreateUserName()));
		//TODO 送件人
		printDto.setReceiverMan(null);
		//寄件人签名
		printDto.setDeliveryCustomerContact(waybillBean.getDeliveryCustomerContact());
		//收件人签名
		printDto.setReceiveCustomerContact(StringUtil.defaultIfNull(waybillBean.getReceiveCustomerContact()));*/
		
		//设置提货网点的数据
		OrgAdministrativeInfoEntity destinationOrgInfo = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeNoCache(waybillBean.getCustomerPickupOrgCode());
		if(destinationOrgInfo != null){
			printDto.setCustomerPickupOrgName(destinationOrgInfo.getName());
			printDto.setCustomerPickupOrgCode(waybillBean.getCustomerPickupOrgCode());
		}
		/**
		 * 关于获取到达城市的逻辑，这段代码配合电子运单二期打印时新加的目的站城市
		 * */
		 //到达城市
	    if(StringUtils.equals(ProductEntityConstants.PRICING_PRODUCT_PARTIAL_LINE, waybillBean.getProductCode()) 
	        || StringUtils.equals(ProductEntityConstants.PRICING_PRODUCT_AIR_FREIGHT, waybillBean.getProductCode())){
	    	//空运或者偏线
	    	OuterBranchEntity outerBranchEntity = vehicleAgencyDeptService.queryOuterBranchByBranchCode(waybillBean.getCustomerPickupOrgCode(), null);
	    	if(outerBranchEntity != null){
	    		AdministrativeRegionsEntity city2 = administrativeRegionsService.queryAdministrativeRegionsByCode(outerBranchEntity.getCityCode());
	    		if(city2 != null){
	    			printDto.setDestination(StringUtil.defaultIfNull(city2.getName()));
	    		}
	    	}else{
	    		printDto.setDestination(waybillBean.getCustomerPickupOrgCode());
	    	}
	    }else if(productService.onlineDetermineIsExpressByProductCode(waybillBean.getProductCode(), waybillBean.getBillTime())){
	    	//快递快递代理
	    	OuterBranchExpressEntity outerBranchEntity = ldpAgencyDeptService.queryLdpAgencyDeptByCode(waybillBean.getCustomerPickupOrgCode(), FossConstants.YES);
	      if(outerBranchEntity != null){
	    	  printDto.setDestination(outerBranchEntity.getCityName());
	        }else{
	        	OrgAdministrativeInfoEntity orgDeliveryInfo = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCode(waybillBean.getCustomerPickupOrgCode());
		          if(orgDeliveryInfo != null){
		        	  printDto.setDestination(orgDeliveryInfo.getCityName());
		          }else{
		        	  printDto.setDestination(waybillBean.getCustomerPickupOrgCode());
		          }
	        }
	    }else{
	    		//公司自有网点
	          OrgAdministrativeInfoEntity orgDeliveryInfo = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCode(waybillBean.getCustomerPickupOrgCode());
	          if(orgDeliveryInfo != null){
	        	  printDto.setDestination(orgDeliveryInfo.getCityName());
	          }else{
	        	  printDto.setDestination(waybillBean.getCustomerPickupOrgCode());
	          }
	    }
		/**
		 * 
		 * */
		// 如果产品 code 为空运、偏线 查询目的站编码
		if (ProductEntityConstants.PRICING_PRODUCT_PARTIAL_LINE.equals(waybillBean.getProductCode()) 
				|| ProductEntityConstants.PRICING_PRODUCT_AIR_FREIGHT.equals(waybillBean.getProductCode())) {
			// 偏线 查询目的站编码
			OuterBranchEntity outerBranchEntity = vehicleAgencyDeptService.queryOuterBranchByBranchCode(waybillBean.getCustomerPickupOrgCode(), null);
			if (outerBranchEntity != null) {
				// 偏线设置目的站编码
				printDto.setStationnumber(outerBranchEntity.getStationNumber()); // 目的站打印标签编码
				// 偏线设置目的站简称
				printDto.setCustomerPickupOrgName(outerBranchEntity.getAgentDeptName());
				log.info("======目的站简称=======" + printDto.getCustomerPickupOrgName());
			}
		}
		//查询产品类型为经济快递的目的站编码
		else if(productService.onlineDetermineIsExpressByProductCode(waybillBean.getProductCode(), waybillBean.getBillTime())){
			// 快递代理 查询目的站编码
			OuterBranchExpressEntity outerBranchEntity = ldpAgencyDeptService.queryLdpAgencyDeptByCode(waybillBean.getCustomerPickupOrgCode(), FossConstants.YES);
			if (outerBranchEntity != null) {
				// 快递代理设置目的站编码
				printDto.setStationnumber(outerBranchEntity.getStationNumber()); // 目的站打印标签编码
				// 快递代理设置目的站简称
				printDto.setCustomerPickupOrgName(outerBranchEntity.getSimplename());
				log.info("======目的站简称=======" + printDto.getCustomerPickupOrgName());
			}
			//若为空，则表示非快递代理网点
			else{
				// 专线目的站编码
				SaleDepartmentEntity saleDepartmentEntity = saleDepartmentService.querySaleDepartmentByCode(waybillBean.getCustomerPickupOrgCode());
				if (saleDepartmentEntity != null) {
					printDto.setStationnumber(saleDepartmentEntity.getStationNumber()); // 目的站打印标签编码
				}
				// 根据提货网点OrgCode 获取部门信息
				OrgAdministrativeInfoEntity orgAdministrativeInfoEntity = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCode(waybillBean.getCustomerPickupOrgCode(), waybillBean.getBillTime());
				if (orgAdministrativeInfoEntity != null) {
					// 设置目的站为提货网点部门简称
					printDto.setCustomerPickupOrgName(orgAdministrativeInfoEntity.getName());
				}else{
					//因为组织信息在不停的变化，可能会出现运单开单时间跟组织信息时间的查询不匹配而查询不到数据，所以再查一次最新组织部门信息
					orgAdministrativeInfoEntity = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeClean(waybillBean.getCustomerPickupOrgCode());
					if(orgAdministrativeInfoEntity != null){
						// 设置目的站为提货网点部门简称
						printDto.setCustomerPickupOrgName(orgAdministrativeInfoEntity.getName());
					}
				}
				if(orgAdministrativeInfoEntity != null){
					//wutao  === start
					/**
					 * 业务逻辑：根据目的站是否是XXX出发快递营业部，如果是，则把IsNoStop设置为YES，否则设置为NO。
					 * 在打印的时候，进行判断 该字段，如果是，则打印出@,否则什么都不打印。
					 */
					String isNonStop = orgAdministrativeInfoEntity.getName();
					if(isNonStop.indexOf(FossConstants.IS_START_EXPRESS) >= 0){
						printDto.setIsPrintAt(FossConstants.YES);
					}else{
						printDto.setIsPrintAt(FossConstants.NO);
					}
					//wutao === end
				}
				log.info("======目的站简称=======" + printDto.getCustomerPickupOrgName());
			}
			
			//设置第二城市外场简称和第一外场城市
		}else {
			// 专线目的站编码
			SaleDepartmentEntity saleDepartmentEntity = saleDepartmentService.querySaleDepartmentByCode(waybillBean.getCustomerPickupOrgCode());
			if (saleDepartmentEntity != null) {
				printDto.setStationnumber(saleDepartmentEntity.getStationNumber()); // 目的站打印标签编码
			}
			// 根据提货网点OrgCode 获取部门信息
			OrgAdministrativeInfoEntity orgAdministrativeInfoEntity = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCode(waybillBean.getCustomerPickupOrgCode(), waybillBean.getBillTime());
			if (orgAdministrativeInfoEntity != null) {
				// 设置目的站为提货网点部门简称
				printDto.setCustomerPickupOrgName(orgAdministrativeInfoEntity.getName());
			}else{
				//因为组织信息在不停的变化，可能会出现运单开单时间跟组织信息时间的查询不匹配而查询不到数据，所以再查一次最新组织部门信息
				orgAdministrativeInfoEntity = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeClean(waybillBean.getCustomerPickupOrgCode());
				if(orgAdministrativeInfoEntity != null){
					// 设置目的站为提货网点部门简称
					printDto.setCustomerPickupOrgName(orgAdministrativeInfoEntity.getName());
				}
			}
			log.info("======目的站简称=======" + printDto.getCustomerPickupOrgName());
		}
		//设置第二城市外场
		setSecCityLoadOrgNameForEWaybill(printDto, waybillBean);		
		//是否打印【送】字
		if(StringUtils.isNotEmpty(waybillBean.getReceiveMethod()) && waybillBean.getReceiveMethod().indexOf("DELIVER") >= 0){
			printDto.setIsDeliver(FossConstants.YES);
		}
		return printDto;
	}

	/**
	 * 设置第二城市外场与出发城市
	 * @author Foss-105888-Zhangxingwang
	 * @date 2014-8-18 19:35:45
	 * @param eWaybillDto
	 * @param waybillBean
	 */
	private void setSecCityLoadOrgNameForEWaybill(EWaybillPrintDto printDto,WaybillEntity waybillBean){
		//出发部门编码
		String sourceCode = waybillBean.getCreateOrgCode();
		//目的站编码
		String targetCode = waybillBean.getCustomerPickupOrgCode();
		//产品类型
		String productCode = waybillBean.getProductCode();
		//出发外场城市名
		String firstCityName = "";
		//获取走货线路
		FreightRouteDto freightRouteDto = waybillManagerService.queryFreightRouteBySourceTarget(sourceCode, targetCode, productCode, new Date());
		//判断是否为空
		if (CollectionUtils.isNotEmpty(freightRouteDto.getFreightRouteLinelist())) {
			List<FreightRouteLineDto> freightRouteLinelist = freightRouteDto.getFreightRouteLinelist();//获得走货路径list
			//获取最终配载部门编码
			String lastChangeCenterOrgCode = freightRouteLinelist.get(freightRouteLinelist.size() - 1).getSourceCode();
			//进行数据的赋值
			if(StringUtils.isNotEmpty(lastChangeCenterOrgCode)){
				OrgAdministrativeInfoEntity lastChangeCenterOrg = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeNoCache(lastChangeCenterOrgCode);
				if(lastChangeCenterOrg != null){
					printDto.setLastLoadOrgName(lastChangeCenterOrg.getName());
				}
			}
			// 得到途径始发营业部编码和外场编码 , 到达营业部 编码集合LIST A-C C-D D-B 得到这种格式
			List<String> addressInfoList = new ArrayList<String>();
			//拼接走货路径
			for (FreightRouteLineDto f : freightRouteLinelist) {
				addressInfoList.add(f.getSourceCode() + "-" + f.getTargetCode());
			}
			
			// 根据始发外场code 和外场集合 删除重复的外场 得到A C D B 格式的外场集合同时包含出发部门到达部门
			List<String> departmentInfoList = removeDuplicateRoute(addressInfoList);
			
			//判断是否有外场
			if(departmentInfoList.size() >= 2){
				//根据组织编码查询组织信息
				OrgAdministrativeInfoEntity org = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeNoCache(departmentInfoList.get(1));
				//出发外场编码对应的城市名称
				if(null != org){
					firstCityName = StringUtil.defaultIfNull(org.getCityName()).trim();
					printDto.setLeavecity(firstCityName);
				}
				
				//若只有2个，则一定为同城
				if(departmentInfoList.size() == 2){
					//若为同城则设置第二城市外场简称为目的场
					printDto.setSecondOutfieldName(printDto.getLastLoadOrgName());
					return;
				}
				// 判断外场个数（去除出发部门）
				else{
					//外场所在城市名称
					String loadCityName = "";
					//遍历集合（从第2个开始遍历），查找不同城市的外场编码
					for (int i=1; i<=(departmentInfoList.size()-1); i++) {
						OrgAdministrativeInfoEntity loadOrg = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeNoCache(departmentInfoList.get(i));
						if(null != loadOrg){
							//城市名称是否为空
							if(StringUtils.isEmpty(loadOrg.getCityName())){
								AdministrativeRegionsEntity entity = administrativeRegionsService.queryAdministrativeRegionsByCodeNotCache(loadOrg.getCityCode());
								if(null != entity){
									loadCityName = entity.getName();
								}
							}else{
								//获得外场城市名
								loadCityName = StringUtil.defaultIfNull(loadOrg.getCityName()).trim();
							}
						}
						
						//外场所在城市编码与出发外场所在城市不一样
						if(loadOrg != null && StringUtil.isNotEmpty(firstCityName) && StringUtil.isNotEmpty(loadCityName) && !firstCityName.equals(loadCityName) ){
							//找到则设置第二城市外场简称,直接退出
							printDto.setSecondOutfieldName(loadOrg.getOrgSimpleName());
							return;
						}
					}
					
					//若为同城则设置第二城市外场简称为目的场
					printDto.setSecondOutfieldName(printDto.getLastLoadOrgName());
				}
			}else{
				throw new WaybillValidateException("该走货线路错误：只有出发部门和到达部门，没有外场！");
			}
		}
	}
	
	/**
	 * 根据第一个外场 从外场集合串 取出单个外场列表 删除重复的
	 * @author 026123-foss-lifengteng
	 * @date 2013-9-29 下午6:25:50
	 */
	private List<String> removeDuplicateRoute(List<String> routeList) {
		List<String> temp = new ArrayList<String>();
		for (int i = 0; i < routeList.size(); i++) {
			temp.add(routeList.get(i).substring(0, routeList.get(i).indexOf("-")));
		}
		return temp;
	}
	
	/**
	 * 加密账号信息
	 * @author Foss-105888-Zhangxingwang
	 * @date 2014-9-18 19:55:17
	 * @param bankAccount
	 * @return
	 */
	public String jiamiAccountNum(String bankAccount){
		if(StringUtils.isNotBlank(bankAccount)){
			StringBuffer sb = new StringBuffer();
			if(bankAccount.length() > FIVE){
				sb.append(bankAccount.substring(0, THREE));
				sb.append("*");
				sb.append(bankAccount.substring(bankAccount.length() - FIVE,bankAccount.length()));
			}else{
				sb.append(bankAccount);
			}
			return sb.toString();
		}
        return "";
	}
	
	/**
	 * <p>查询对应的城市广告信息</p>
	 * @author Foss-105888-Zhangxingwang
	 * @date 2014-8-28 15:25:51
	 * @param receiverOgCode
	 */
	@Override
	public String getWaybillDocAd(String receiverOgCode, String cityPattern) {
		//获取当前城市Code
		OrgAdministrativeInfoEntity orgInfo = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCode(receiverOgCode);
		if(orgInfo != null){
			//根据当前城市编码以及出发城市进行相关数据的 查询
			return StringUtil.defaultIfNull(printMarketingContentService.queryEntityByCodeAndPattern(orgInfo.getCityCode(), cityPattern));
		}
		return null;
	}
	
	/**
	 * 判定是否电子运单
	 * @author Foss-105888-Zhangxingwang
	 * @date 2014-8-27 20:39:30
	 */
	@Override
	public boolean isEWaybillInfoByWaybillNo(String waybillNo){
		//判断传入条件是否为空
		if(StringUtils.isEmpty(waybillNo)){
			log.info("传入的运单号为空");
			throw new BusinessException("传入的运单号为空，请稍候重试");
		}
		log.info("运单号:"+waybillNo);
		// 查询该运单是否为作废运单
		ActualFreightEntity actualFreightEntity = actualFreightDao.queryByWaybillNo(waybillNo);
		if(actualFreightEntity != null){
			//作废或者中止是不能进行相关运单打印的
			if(WaybillConstants.OBSOLETE.equals(actualFreightEntity.getStatus()) || WaybillConstants.ABORTED.equals(actualFreightEntity.getStatus())){
				throw new BusinessException("运单已经被作废或者中止");
			}
			
			//判定是否电子运单，如果不是直接抛出异常，减少后台数据交互次数
			if(WaybillConstants.WAYBILL_EWAYBILL_TYPE.equals(actualFreightEntity.getWaybillType())){
				return true;
			}
		}
		return false;
	}
	
	/**
	 * 中转场打印快递标签信息封装
     * @author 220125  yangxiaolong
     * @date 2015-02-22 
     * @param waybillEntity
     * @param serialNos
     * @return
     */
	@Override
	public List<BarcodePrintLabelDto> getLabelPrintInfoExpress(String waybillNo, List<String> serialNos) {
		BarcodePrintLabelDto printLabelBean = new BarcodePrintLabelDto();
		WaybillEntity waybillBean = null;
		//如果离线未查到数据则查 waybill表
		WaybillPendingEntity pendingEntity = waybillPendingService.queryPendingByNo(waybillNo);
		
		//增加PDA补录的判断，当运单是PDA单的时候不应该查询该信息的
		if (pendingEntity != null) {
			waybillBean = new WaybillEntity();
			if(StringUtils.isNotEmpty(pendingEntity.getPendingType())){
				//如果是PDA补录的，并且数据为空，则不允许他进行打印，因为PDA单的数据不全
				if(WaybillConstants.WAYBILL_STATUS_PC_PENDING.equals(pendingEntity.getPendingType()) 
						|| WaybillConstants.WAYBILL_STATUS_PDA_PENDING.equals(pendingEntity.getPendingType())){
					waybillBean = waybillDao.queryWaybillByNo(waybillNo);
					if(waybillBean == null){
						BeanUtils.copyProperties(pendingEntity, waybillBean);
					}
				}
			}
		}else {
			// 根据运单号查询 运单提交后基本信息
			waybillBean = waybillDao.queryWaybillByNo(waybillNo);
			// 查询该运单是否为作废运单
			ActualFreightEntity actualFreightEntity = actualFreightDao.queryByWaybillNo(waybillNo);
			// 如果运单不存在，或者该运单已作废，则返回 null
			if (waybillBean == null || actualFreightEntity == null || WaybillConstants.OBSOLETE.equals(actualFreightEntity.getStatus())) {
				return null;
			}
		}
		String receiveMethod = "空";
		
		if(waybillBean == null){
			throw new WaybillValidateException("运单实体waybillBean为空！");
		}
		// 判断 为 自提还是送货。
		// 包括汽运自提、空运自提等都简称为“自”
		if (StringUtils.isNotEmpty(waybillBean.getReceiveMethod()) && waybillBean.getReceiveMethod().indexOf(WaybillConstants.DELIVER_FREE) >= 0) {
			// 否则默认为“送货” 包括空
			receiveMethod = RECEVICEMETHOD_DELIVER;
		} else {
			receiveMethod = RECEVICEMETHOD_PICKUP;
		}
		// set 提货方式 自提 或 派送
		printLabelBean.setDeliverToDoor(receiveMethod);
		// set 运单号
		printLabelBean.setWaybillNumber(waybillBean.getWaybillNo());
		//set  定义工号变量
		String userCode = null;
		// 获取当前登录人工号
		// 如果不为空则 赋值变量 userCode
		if (FossUserContext.getCurrentUser() != null && FossUserContext.getCurrentUser().getEmployee() != null) {
			userCode = FossUserContext.getCurrentUser().getEmployee().getEmpCode();
		}
		// 设置 打印人工号
		printLabelBean.setOptuserNum(userCode);
		// set  设置打印日期 默认为系统当前日期
		printLabelBean.setPrintDate(new SimpleDateFormat("yyyy-MM-dd").format(new Date()));
		//set  获取目的站编码
		// 如果产品 code 为空运、偏线 查询目的站编码
		if (ProductEntityConstants.PRICING_PRODUCT_PARTIAL_LINE.equals(waybillBean.getProductCode()) 
				|| ProductEntityConstants.PRICING_PRODUCT_AIR_FREIGHT.equals(waybillBean.getProductCode())) {
			// 偏线 查询目的站编码
			OuterBranchEntity outerBranchEntity = vehicleAgencyDeptService.queryOuterBranchByBranchCode(waybillBean.getCustomerPickupOrgCode(), null);
			if (outerBranchEntity != null) {
				// 偏线设置目的站编码
				printLabelBean.setDestinationCode(outerBranchEntity.getStationNumber()); // 目的站打印标签编码
				// 偏线设置目的站简称
				printLabelBean.setDestination(outerBranchEntity.getSimplename());
			}
		}
		//查询产品类型为经济快递的目的站编码
		else if(productService.onlineDetermineIsExpressByProductCode(waybillBean.getProductCode(), waybillBean.getBillTime())){
			// 快递代理 查询目的站编码
			OuterBranchExpressEntity outerBranchEntity = ldpAgencyDeptService.queryLdpAgencyDeptByCode(waybillBean.getCustomerPickupOrgCode(), FossConstants.YES);
			if (outerBranchEntity != null) {
				// 快递代理设置目的站编码
				printLabelBean.setDestinationCode(outerBranchEntity.getStationNumber()); // 目的站打印标签编码
				// 快递代理设置目的站简称
				printLabelBean.setDestination(outerBranchEntity.getSimplename());
				//这里无须解释，一定外发
				printLabelBean.setIsNoStop(FossConstants.YES);
			}
			//若为空，则表示非快递代理网点
			else{
				// 专线目的站编码
				SaleDepartmentEntity saleDepartmentEntity = saleDepartmentService.querySaleDepartmentByCode(waybillBean.getCustomerPickupOrgCode());
				if (saleDepartmentEntity != null) {
					printLabelBean.setDestinationCode(saleDepartmentEntity.getStationNumber()); // 目的站打印标签编码
				}
				// 根据提货网点OrgCode 获取部门信息
				OrgAdministrativeInfoEntity orgAdministrativeInfoEntity = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCode(waybillBean.getCustomerPickupOrgCode(), waybillBean.getBillTime());
				if (orgAdministrativeInfoEntity != null) {
					// 设置目的站为提货网点部门简称
					printLabelBean.setDestination(orgAdministrativeInfoEntity.getOrgSimpleName());
				}else{
					//因为组织信息在不停的变化，可能会出现运单开单时间跟组织信息时间的查询不匹配而查询不到数据，所以再查一次最新组织部门信息
					orgAdministrativeInfoEntity = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeClean(waybillBean.getCustomerPickupOrgCode());
					if(orgAdministrativeInfoEntity != null){
						// 设置目的站为提货网点部门简称
						printLabelBean.setDestination(orgAdministrativeInfoEntity.getOrgSimpleName());
					}
				}
				if(orgAdministrativeInfoEntity != null){
					if(StringUtils.isNotEmpty(orgAdministrativeInfoEntity.getName())
							&& (orgAdministrativeInfoEntity.getName().indexOf("远郊") >= 0
							|| orgAdministrativeInfoEntity.getName().indexOf("出发") >= 0)){
						//设置是否出发快递营业部 即打印@标记
						printLabelBean.setIsNoStop(FossConstants.YES);
					}else{
						printLabelBean.setIsNoStop(FossConstants.NO);
					}
				}
			}
		}else {
			// 专线目的站编码
			SaleDepartmentEntity saleDepartmentEntity = saleDepartmentService.querySaleDepartmentByCode(waybillBean.getCustomerPickupOrgCode());
			if (saleDepartmentEntity != null) {
				printLabelBean.setDestinationCode(saleDepartmentEntity.getStationNumber()); // 目的站打印标签编码
			}
			// 根据提货网点OrgCode 获取部门信息
			OrgAdministrativeInfoEntity orgAdministrativeInfoEntity = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCode(waybillBean.getCustomerPickupOrgCode(), waybillBean.getBillTime());
			if (orgAdministrativeInfoEntity != null) {
				// 设置目的站为提货网点部门简称
				printLabelBean.setDestination(orgAdministrativeInfoEntity.getOrgSimpleName());
			}else{
				//因为组织信息在不停的变化，可能会出现运单开单时间跟组织信息时间的查询不匹配而查询不到数据，所以再查一次最新组织部门信息
				orgAdministrativeInfoEntity = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeClean(waybillBean.getCustomerPickupOrgCode());
				if(orgAdministrativeInfoEntity != null){
					// 设置目的站为提货网点部门简称
					printLabelBean.setDestination(orgAdministrativeInfoEntity.getOrgSimpleName());
				}
			}
		}
		// set 获取总件数
		printLabelBean.setTotalPieces(String.valueOf(waybillBean.getGoodsQtyTotal()));
		// set 1，2,，3获取最终外场城市名称与第二外场城市名称与第一城市外场对应的城市
		String sourceCode = waybillBean.getCreateOrgCode();
		//目的站编码
		String targetCode = waybillBean.getCustomerPickupOrgCode();
		//产品类型
		String productCode = waybillBean.getProductCode();
		//最终外场编码
		String finalOutFieldCode = null;
		//倒数第二外场编码                  
		String lastSecondOutFieldCode=null;
		//出发外场城市名
		String firstCityName = null;
		//第一城市外场
		String firstOutFieldCode = null;
		//获取走货线路
		FreightRouteDto freightRouteDto = waybillManagerService.queryFreightRouteBySourceTarget(sourceCode, targetCode, productCode, new Date());
		if(freightRouteDto == null){
			throw new BusinessException("");
		}
		List<FreightRouteLineDto> freightRouteLinelist = freightRouteDto.getFreightRouteLinelist();//获得走货路径list
		//判断是否为空
		if (CollectionUtils.isNotEmpty(freightRouteLinelist)){
			finalOutFieldCode = freightRouteLinelist.get(freightRouteLinelist.size()-1).getSourceCode();
			//走货路线中倒数第二个站，需考虑到外场分部的情况
			//======开始================================设值最终外场，并判断其是否为“快递分部”
			if(freightRouteLinelist.size() >= THREE){
				lastSecondOutFieldCode=freightRouteLinelist.get(freightRouteLinelist.size()-2).getTargetCode();
				finalOutFieldCode = freightRouteLinelist.get(freightRouteLinelist.size()-1).getSourceCode();
				OrgAdministrativeInfoEntity outFieldFenbuOrg = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeNoCache(finalOutFieldCode);
				//最终外场
				if(null != outFieldFenbuOrg && StringUtils.isNotEmpty(outFieldFenbuOrg.getOrgSimpleName()) 
						&& outFieldFenbuOrg.getOrgSimpleName().indexOf("分部") >= 0){
					OrgAdministrativeInfoEntity outFieldOrg = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeNoCache(lastSecondOutFieldCode);
					printLabelBean.setLastTransCenterCity(outFieldOrg == null ? "空" : outFieldOrg.getOrgSimpleName());
				}else{
					printLabelBean.setLastTransCenterCity(outFieldFenbuOrg.getOrgSimpleName());
				}
			}else{
				finalOutFieldCode = freightRouteLinelist.get(freightRouteLinelist.size()-1).getSourceCode();
				OrgAdministrativeInfoEntity outFieldOrg = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeNoCache(finalOutFieldCode);
				//最终外场
				if(null != outFieldOrg){
					printLabelBean.setLastTransCenterCity(outFieldOrg.getOrgSimpleName());
				}else{
					printLabelBean.setLastTransCenterCity("空");
				}
			}//=======设值最终外场完毕

			//======开始=================================始发外场所在的城市，后期加了校验该外场是否为“快递分部”，如果是快递分部则以下一个外场为准
			//始发外场所在的城市 
			firstOutFieldCode = freightRouteLinelist.get(0).getTargetCode();
			OrgAdministrativeInfoEntity firstOutFieldOrg = orgAdministrativeInfoService.
					queryOrgAdministrativeInfoByCodeNoCache(firstOutFieldCode);
			//始发外场所在的城市    
			if(null != firstOutFieldOrg){
				firstCityName = firstOutFieldOrg.getCityName();
				printLabelBean.setLeavecity(firstOutFieldOrg.getCityName());
			}else{
				printLabelBean.setLeavecity("空");
			}
			//下面这段逻辑为过滤“快递分部”，后期业务要求不过滤快递分部
//			OrgAdministrativeInfoEntity firstOutFieldOrg = orgAdministrativeInfoService.
//					queryOrgAdministrativeInfoByCodeNoCache(firstOutFieldCode);
			//但须校验该组织是否为快递分部，若是，则以快递分部后一个目的站为准，若不是，则以此部门为准
		//	firstOutFieldCode1= freightRouteLinelist.get(1).getTargetCode();
//			OrgAdministrativeInfoEntity firstOutFieldOrg1 = orgAdministrativeInfoService.
//					queryOrgAdministrativeInfoByCodeNoCache(firstOutFieldCode1);
//			if(null != firstOutFieldOrg && firstOutFieldOrg.getCityName().indexOf("分部") >= 0){
//				printLabelBean.setLeavecity(firstOutFieldOrg1 == null ? "空" : firstOutFieldOrg1.getCityName());
//			}else{
//				printLabelBean.setLeavecity(firstOutFieldOrg == null ? "空" : firstOutFieldOrg.getCityName());
//			}
			//===========始发外场所在的城市设值完毕
			// 得到途径始发营业部编码和外场编码 , 到达营业部 编码集合LIST A-C C-D D-B 得到这种格式
			List<String> addressInfoList = new ArrayList<String>();
			
			//拼接走货路径
			for (int i=1;i<freightRouteLinelist.size();i++) {
				addressInfoList.add(freightRouteLinelist.get(i).getTargetCode());
			}
			//==========开始================================设值第二外场开始
			//若只有2个，则一定为同城
			if(freightRouteLinelist.size() == 2){
				//若为同城则设置第二城市外场简称为目的场
				printLabelBean.setSecLoadOrgName(printLabelBean.getDestination());
			}else if(freightRouteLinelist.size() >= 2){
				//外场所在城市名称
				String loadCityName = "";
				//遍历集合（从第2个开始遍历），查找不同城市的外场编码
				for (int i=0; i<=(addressInfoList.size()-1); i++) {
					OrgAdministrativeInfoEntity loadOrg = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeNoCache(addressInfoList.get(i));
					if(null != loadOrg){
						//城市名称是否为空
						if(StringUtils.isEmpty(loadOrg.getCityName())){
							AdministrativeRegionsEntity entity = administrativeRegionsService.queryAdministrativeRegionsByCodeNotCache(loadOrg.getCityCode());
							if(null != entity){
								loadCityName = entity.getName();
							}
						}else{
							//获得外场城市名
							loadCityName = StringUtil.defaultIfNull(loadOrg.getCityName()).trim();
						}
					}
					//外场所在城市编码与出发外场所在城市不一样
					if(loadOrg != null && StringUtil.isNotEmpty(firstCityName) && StringUtil.isNotEmpty(loadCityName) && !firstCityName.equals(loadCityName) ){
						//找到则设置第二城市外场简称,直接退出
						printLabelBean.setSecLoadOrgName(loadOrg.getOrgSimpleName());
						break;
					}
					//若为同城则设置第二城市外场简称为目的场
					printLabelBean.setSecLoadOrgName(printLabelBean.getDestination());
				}
			
			}else{
				throw new WaybillValidateException("该走货线路错误：只有出发部门和到达部门，没有外场！");
			}
			//===============设值第二外场完毕
		}
		if(serialNos != null && serialNos.size()>1){
			//对流水号排序
			Collections.sort(serialNos);
		}
		// set 对于流水号集合组装打印数据集合
		List<BarcodePrintLabelDto> printLabelBeanList = new  ArrayList<BarcodePrintLabelDto>();
		
		if(CollectionUtils.isNotEmpty(serialNos)){
			BarcodePrintLabelDto dto = null;
			for (int i = 0; i<=serialNos.size()- 1; i++) {
				dto =new BarcodePrintLabelDto();
				BeanUtils.copyProperties(printLabelBean, dto);
				dto.setPrintSerialnos(serialNos.get(i));
				printLabelBeanList.add(dto);
			}
		}else{
			printLabelBeanList.add(printLabelBean);
		}
		return printLabelBeanList;
	}
	
	/**
	 * 根据运单号获得运单基本信息供快递使用
	 * @author foss-218438
	 */
	public BarcodePrintLabelDto getWaybillInfoExpress(String waybillNo){
		BarcodePrintLabelDto printLabelBean = new BarcodePrintLabelDto();
		WaybillEntity waybillBean = null;
		//如果离线未查到数据则查 waybill表
		WaybillPendingEntity pendingEntity = waybillPendingService.queryPendingByNo(waybillNo);
		//增加PDA补录的判断，当运单是PDA单的时候不应该查询该信息的
		if (pendingEntity != null) {
			waybillBean = new WaybillEntity();
			if(StringUtils.isNotEmpty(pendingEntity.getPendingType())){
				//如果是PDA补录的，并且数据为空，则不允许他进行打印，因为PDA单的数据不全
				if("PDA_PENDING".equals(pendingEntity.getPendingType())){
					waybillBean = waybillDao.queryWaybillByNo(waybillNo);
					if(waybillBean == null){
						return null;
					}
				}
			}
			BeanUtils.copyProperties(pendingEntity, waybillBean);
		}else {
			// 根据运单号查询 运单提交后基本信息
			waybillBean = waybillDao.queryWaybillByNo(waybillNo);
			// 查询该运单是否为作废运单
			ActualFreightEntity actualFreightEntity = actualFreightDao.queryByWaybillNo(waybillNo);
			// 如果运单不存在，或者该运单已作废，则返回 null
			if (waybillBean == null || actualFreightEntity == null || WaybillConstants.OBSOLETE.equals(actualFreightEntity.getStatus())) {
				return null;
			}
		}
		printLabelBean.setWaybillBean(waybillBean);
		//11月17版本
		//当运输性质为商务专递时获取运输性质打印“空”
		printLabelBean.setProductCode(waybillBean.getProductCode());
		// set 运单号
		printLabelBean.setWaybillNumber(waybillBean.getWaybillNo());
		// 定义工号变量
		String userCode = null;
		// 获取当前登录人工号
		// 如果不为空则 赋值变量 userCode
		if (FossUserContext.getCurrentUser() != null && FossUserContext.getCurrentUser().getEmployee() != null) {
			userCode = FossUserContext.getCurrentUser().getEmployee().getEmpCode();
		}
		// 设置 打印人工号
		printLabelBean.setOptuserNum(userCode);
		// 设置打印日期 默认为系统当前日期
		printLabelBean.setPrintDate(new SimpleDateFormat("yyyy-MM-dd").format(new Date()));
		
		//查询产品类型为经济快递的目的站编码
		if(WaybillConstants.directDetermineIsExpressByProductCode(waybillBean.getProductCode())){
			// 快递代理 查询目的站编码
			OuterBranchExpressEntity outerBranchEntity = ldpAgencyDeptService.queryLdpAgencyDeptByCode(waybillBean.getCustomerPickupOrgCode(), FossConstants.YES);
			if (outerBranchEntity != null) {
				// 快递代理设置目的站编码
				printLabelBean.setDestinationCode(outerBranchEntity.getStationNumber()); // 目的站打印标签编码
				// 快递代理设置目的站简称
				printLabelBean.setDestination(outerBranchEntity.getSimplename());
				log.info("======目的站简称=======" + printLabelBean.getDestination());
			}
			//若为空，则表示非快递代理网点
			else{
				// 专线目的站编码
				SaleDepartmentEntity saleDepartmentEntity = saleDepartmentService.querySaleDepartmentByCode(waybillBean.getCustomerPickupOrgCode());
				if (saleDepartmentEntity != null) {
					printLabelBean.setDestinationCode(saleDepartmentEntity.getStationNumber()); // 目的站打印标签编码
				}
				// 根据提货网点OrgCode 获取部门信息
				OrgAdministrativeInfoEntity orgAdministrativeInfoEntity = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCode(waybillBean.getCustomerPickupOrgCode(), waybillBean.getBillTime());
				if (orgAdministrativeInfoEntity != null) {
					// 设置目的站为提货网点部门简称
					printLabelBean.setDestination(orgAdministrativeInfoEntity.getOrgSimpleName());
				}else{
					//因为组织信息在不停的变化，可能会出现运单开单时间跟组织信息时间的查询不匹配而查询不到数据，所以再查一次最新组织部门信息
					orgAdministrativeInfoEntity = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeClean(waybillBean.getCustomerPickupOrgCode());
					if(orgAdministrativeInfoEntity != null){
						// 设置目的站为提货网点部门简称
						printLabelBean.setDestination(orgAdministrativeInfoEntity.getOrgSimpleName());
					}
				}
				log.info("======目的站简称=======" + printLabelBean.getDestination());
			}
			// 根据产品CODE 与开单时间 获得产品信息
			ProductEntity productEntity = productService.getProductByCache(waybillBean.getProductCode(), waybillBean.getBillTime());
			
			// 产品code
			printLabelBean.setProductCode(waybillBean.getProductCode());
			if (productEntity != null && productEntity.getName() != null) {
				String transType = productEntity.getName();
				// 设置运输类型
				printLabelBean.setTranstype(transType);
			}	
			//出发部门编码
			String sourceCode = waybillBean.getCreateOrgCode();
			//目的站编码
			String targetCode = waybillBean.getCustomerPickupOrgCode();
			//产品类型
			String productCode = waybillBean.getProductCode();
			//最终外场补码简称
			String finalOutFieldCityName;
			//出发外场城市名
			String firstCityName = null;
			//获取走货线路
			FreightRouteDto freightRouteDto = waybillManagerService.queryFreightRouteBySourceTarget(sourceCode, targetCode, productCode, new Date());
			//判断是否为空
			if (CollectionUtils.isNotEmpty(freightRouteDto.getFreightRouteLinelist())) {
				List<FreightRouteLineDto> freightRouteLineList = freightRouteDto.getFreightRouteLinelist();//获得走货路径list
//				finalOutFieldCode = freightRouteLineList.get(freightRouteLineList.size()-1).getSourceCode();
				// 得到途径始发营业部编码和外场编码 , 到达营业部 编码集合LIST A-C C-D D-B 得到这种格式
				List<String> addressInfoList = new ArrayList<String>();
				//拼接走货路径
				for (FreightRouteLineDto f : freightRouteLineList) {
					addressInfoList.add(f.getSourceCode() + "-" + f.getTargetCode());
				}
				// 根据始发外场code 和外场集合 删除重复的外场 得到A C D B 格式的外场集合不包含到达部门
				List<String> departmentInfoList = removeDuplicateRoute(addressInfoList);
				// 最终外场补码简称 finalOutFieldCityName
				OrgAdministrativeInfoEntity outfieldcity = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeNoCache(departmentInfoList.get(departmentInfoList.size()-1));
				if (outfieldcity != null && outfieldcity.getComplementSimpleName() != null) {
					finalOutFieldCityName = outfieldcity.getComplementSimpleName();
				} else {
					finalOutFieldCityName = "空";
				}
				printLabelBean.setLastTransCenterCity(finalOutFieldCityName);
				//判断是否有外场
				if(departmentInfoList.size() >= 2){
					//根据组织编码查询组织信息
					OrgAdministrativeInfoEntity org = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeNoCache(departmentInfoList.get(1));
					//出发外场编码对应的城市名称
					if(null != org){
						firstCityName = StringUtil.defaultIfNull(org.getCityName()).trim();
						printLabelBean.setLeavecity(firstCityName);
					}else{
						printLabelBean.setLeavecity("空");
					}
					
					//若只有2个的时候，说明最多只有一个外场
					if(departmentInfoList.size() == 2){
						//若为同城则设置第二城市外场简称为目的场
						printLabelBean.setSecLoadOrgName(printLabelBean.getDestination());
					}
					// 取走货路径上的第二个外场
					else{
						OrgAdministrativeInfoEntity loadOrg = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeNoCache(departmentInfoList.get(2));
						printLabelBean.setSecLoadOrgName(loadOrg.getComplementSimpleName());
					}
				}else{
					throw new WaybillValidateException("该走货线路错误：只有出发部门和到达部门，没有外场！");
				}
			}else {
				// 专线目的站编码
				SaleDepartmentEntity saleDepartmentEntity = saleDepartmentService.querySaleDepartmentByCode(waybillBean.getCustomerPickupOrgCode());
				if (saleDepartmentEntity != null) {
					printLabelBean.setDestinationCode(saleDepartmentEntity.getStationNumber()); // 目的站打印标签编码
				}
				// 根据提货网点OrgCode 获取部门信息
				OrgAdministrativeInfoEntity orgAdministrativeInfoEntity = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCode(waybillBean.getCustomerPickupOrgCode(), waybillBean.getBillTime());
				if (orgAdministrativeInfoEntity != null) {
					// 设置目的站为提货网点部门简称
					printLabelBean.setDestination(orgAdministrativeInfoEntity.getOrgSimpleName());
				}else{
					//因为组织信息在不停的变化，可能会出现运单开单时间跟组织信息时间的查询不匹配而查询不到数据，所以再查一次最新组织部门信息
					orgAdministrativeInfoEntity = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCodeClean(waybillBean.getCustomerPickupOrgCode());
					if(orgAdministrativeInfoEntity != null){
						// 设置目的站为提货网点部门简称
						printLabelBean.setDestination(orgAdministrativeInfoEntity.getOrgSimpleName());
					}
				}
				log.info("======目的站简称=======" + printLabelBean.getDestination());
			}
		}
		// 总件数
		printLabelBean.setTotalPieces(String.valueOf(waybillBean.getGoodsQtyTotal()));
		return printLabelBean;
	}
	
	
	/**
	 * 快递标签信息封装供中转使用
	 */
	@Override
	public List<BarcodePrintLabelDto> getLabelPrintInfoForDepartExpress(String waybillNo, List<String> serialNos) {
		// 获得运单基本信息
		BarcodePrintLabelDto printLabelDto = getWaybillInfoExpress(waybillNo);
		if (printLabelDto == null) {
			throw new WaybillLabelPrintException(WaybillLabelPrintException.PRINT_EXISTWYBILL_EXCEPTION);
		}
		
		List<BarcodePrintLabelDto> printLabelBeanList = null;
		// 获得单个走货路径 以及流水号
		printLabelBeanList = getFreightRouteInfo(printLabelDto.getWaybillBean(), serialNos, printLabelDto.getProductCode());
		if (printLabelBeanList != null && !printLabelBeanList.isEmpty()) {
			// 将运单信息 以及每个货件的走货路径合并
			for (BarcodePrintLabelDto dto : printLabelBeanList) {
				BeanUtils.copyProperties(printLabelDto, dto, false);
			}
		}
		return printLabelBeanList;
	}
	
	/**
	 * 快递标签打印优化需求信息封装
	 * @author foss-218438
	 */
	public BarcodePrintLabelDto getCommonLabelPrintInfoExpress(String waybillNo, List<String> serialNos,String waybillStatus) {
		// 获得运单基本信息
		BarcodePrintLabelDto printLabelBean = getWaybillInfoExpress(waybillNo);
		if (printLabelBean != null) {
			// 获得的流水号
			getLabeledGoodsInfo(printLabelBean, serialNos);
		} else {
			printLabelBean = new BarcodePrintLabelDto();
		}
		return printLabelBean;
	}
	
	@Override
	public LabelPrintEntity findGxgLabelPrint(WaybillPendingEntity pend) {
		//设置标签打印信息
		BarcodePrintLabelDto labelDto = getGxgLabelPrintInfos(pend, null, "");
		LabelPrintEntity labelDetail = new LabelPrintEntity();
		labelDetail.setWblCode(labelDto.getWaybillNumber());
		//设置送标记
		if (WaybillConstants.YES.equals(labelDto.getDeliverToDoor()) || RECEVICEMETHOD_DELIVER.equals(labelDto.getDeliverToDoor())) {
			labelDetail.setSend("【送】");
		}
		//设置总件数
		labelDetail.setPieces(labelDto.getTotalPieces());
		//设置运输性质
		labelDetail.setTransType(labelDto.getTranstype());
		//设置包装类型
		labelDetail.setWrapType(labelDto.getPacking());
		//设置目的站名称
		labelDetail.setDestinationName(labelDto.getDestination());
		//设置目的站编码
		labelDetail.setDestStationNumber(labelDto.getDestinationCode());
		//设置创建人
		labelDetail.setUserCode(labelDto.getCreateUser());
		//关于PDA打印航班类型的字段添加  220125
		String preassembly=" ";
		if(StringUtil.isNotBlank(labelDto.getPreassembly()))
		{
			//对应早班类型
		if ("MORNING_FLIGHT".equals(labelDto.getPreassembly())) {
			preassembly="(一)";
		   } else {
			  //其余的班次
			preassembly="(二)";
		          }
		 }
		//设置到达外场名称
		if (StringUtil.isNotBlank(labelDto.getLastTransCenterCity()) && labelDto.getLastTransCenterCity().length() > SEVEN) {
			labelDetail.setDestTransCenterName((labelDto.getLastTransCenterCity()).substring(0,SEVEN) + "-" + labelDto.getCountyRegion()+preassembly);
		} else {
			labelDetail.setDestTransCenterName(labelDto.getLastTransCenterCity() + "-" + labelDto.getCountyRegion()+preassembly);
		}
		//设置始发城市名称
		labelDetail.setDepartmentCityName(labelDto.getLeavecity());
		//设置货物类型
		labelDetail.setGoodsType(labelDto.getGoodstype());
		
		//设置库位信息
		List<GoodsAreaEntity>  goodsAreas = new ArrayList<GoodsAreaEntity>();
		GoodsAreaEntity goodsAreaEntity = new GoodsAreaEntity();
		if (StringUtil.isNotBlank(labelDto.getAddr1())) {
			goodsAreaEntity = new GoodsAreaEntity();
			goodsAreaEntity.setTransferCode(labelDto.getAddr1());
			goodsAreaEntity.setGoodsAreaCode(labelDto.getLocation1());
			goodsAreas.add(goodsAreaEntity);
		}
		if (StringUtil.isNotBlank(labelDto.getAddr2())) {
			goodsAreaEntity = new GoodsAreaEntity();
			goodsAreaEntity.setTransferCode(labelDto.getAddr2());
			goodsAreaEntity.setGoodsAreaCode(labelDto.getLocation2());
			goodsAreas.add(goodsAreaEntity);
		}
		if (StringUtil.isNotBlank(labelDto.getAddr3())) {
			goodsAreaEntity = new GoodsAreaEntity();
			goodsAreaEntity.setTransferCode(labelDto.getAddr3());
			goodsAreaEntity.setGoodsAreaCode(labelDto.getLocation3());
			goodsAreas.add(goodsAreaEntity);
		}
		if (StringUtil.isNotBlank(labelDto.getAddr4())) {
			goodsAreaEntity = new GoodsAreaEntity();
			goodsAreaEntity.setTransferCode(labelDto.getAddr4());
			goodsAreaEntity.setGoodsAreaCode(labelDto.getLocation4());
			goodsAreas.add(goodsAreaEntity);
		}
		
		labelDetail.setGoodsAreas(goodsAreas);
		
		/*zhangchengfu 20150516 FOSS展会货开单提示优化需求 begin*/
		if (StringUtil.isNotBlank(labelDto.getIsExhibitCargo())) {
			labelDetail.setIsExhibitCargo(labelDto.getIsExhibitCargo());
		}
		if (StringUtil.isNotBlank(labelDto.getReceiveBigCustomer())) {
			labelDetail.setReceiveBigCustomer(labelDto.getReceiveBigCustomer());
		}
		if (StringUtil.isNotBlank(labelDto.getDeliveryBigCustomer())) {
			labelDetail.setDeliveryBigCustomer(labelDto.getDeliveryBigCustomer());
		}
		
		
		
		
		return labelDetail;
	}
	
	
}