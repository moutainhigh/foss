<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper
	namespace="com.deppon.foss.module.pickup.predeliver.api.server.dao.IDeliverbillDetailDao">
	<resultMap id="BaseResultMap"
		type="com.deppon.foss.module.pickup.predeliver.api.shared.domain.DeliverbillDetailEntity">
		<id column="ID" property="id" jdbcType="VARCHAR" />
		<result column="T_SRV_DELIVERBILL_ID" property="tSrvDeliverbillId"
			jdbcType="VARCHAR" />
		<result column="SERIAL_NO" property="serialNo" jdbcType="DECIMAL" />
		<result column="ARRIVESHEET_NO" property="arrivesheetNo"
			jdbcType="VARCHAR" />
		<result column="WAYBILL_NO" property="waybillNo" jdbcType="VARCHAR" />
		<result column="ARRANGE_STATUS" property="arrangeStatus"
			jdbcType="VARCHAR" />
		<result column="PRE_ARRANGE_GOODS_QTY" property="preArrangeGoodsQty"
			jdbcType="DECIMAL" />
		<result column="ARRANGE_GOODS_QTY" property="arrangeGoodsQty"
			jdbcType="DECIMAL" />
		<result column="WEIGHT" property="weight" jdbcType="DECIMAL" />
		<result column="DIMENSION" property="dimension" jdbcType="VARCHAR" />
		<result column="GOODS_NAME" property="goodsName" jdbcType="VARCHAR" />
		<result column="WAYBILL_GOODS_QTY" property="waybillGoodsQty"
			jdbcType="DECIMAL" />
		<result column="TRANSPORT_TYPE" property="transportType"
			jdbcType="VARCHAR" />
		<result column="ARRIVE_TIME" property="arriveTime" jdbcType="TIMESTAMP" />
		<result column="CONSIGNEE" property="consignee" jdbcType="VARCHAR" />
		<result column="CONSIGNEE_CONTACT" property="consigneeContact"
			jdbcType="VARCHAR" />
		<result column="CONSIGNEE_ADDRESS" property="consigneeAddress"
			jdbcType="VARCHAR" />
		<result column="DELIVER_REQUIRE" property="deliverRequire"
			jdbcType="VARCHAR" />
		<result column="GOODS_STATUS" property="goodsStatus" jdbcType="VARCHAR" />
		<result column="IS_EXCEPTION" property="isException" jdbcType="CHAR" />
		<result column="IS_ALREADY_CONTACT" property="isAlreadyContact"
			jdbcType="CHAR" />
		<result column="ESTIMATED_DELIVER_TIME" property="estimatedDeliverTime"
			jdbcType="TIMESTAMP" />
		<result column="IS_NEED_INVOICE" property="isNeedInvoice"
			jdbcType="CHAR" />
		<result column="PAYMENT_TYPE" property="paymentType" jdbcType="VARCHAR" />
		<result column="NOTES" property="notes" jdbcType="VARCHAR" />
		<result column="DELIVER_TYPE" property="deliverType" jdbcType="VARCHAR" />
		<result column="GOODS_VOLUME_TOTAL" property="goodsVolumeTotal"
			jdbcType="DECIMAL" />
		<result column="PAY_AMOUNT" property="payAmount" jdbcType="DECIMAL" />
		<result column="FAST_WAYBILL_FLAG" property="fastWaybillFlag"
			jdbcType="DECIMAL" />
		<result column="CURRENCY_CODE" property="currencyCode"
			jdbcType="VARCHAR" />
		<result column="GOODS_PACKAGE" property="goodsPackage"
			jdbcType="VARCHAR" />
		<result column="RETURN_BILL_TYPE" property="returnBillType"
			jdbcType="VARCHAR" />
		<result column="DESTROYED" property="destroyed"
			jdbcType="VARCHAR" />
    <result column="CREATE_TIME" property="createDate" jdbcType="TIMESTAMP"/>
    <result column="MODIFY_TIME" property="modifyDate" jdbcType="TIMESTAMP"/>
    <result column="DELIVER_DATE" property="deliverDate" jdbcType="TIMESTAMP"/>
    <result column="T_SRV_DELIVER_HANDOVERBILL_ID" property="srvDeliverHandoverbillId" jdbcType="VARCHAR"/>
	<result column="RECOMMENDED_DELIVERY_TIME" property="recommendedDeliveryTime" jdbcType="VARCHAR" />
	<result column="DISPATCH_SORT_SERIAL_NO" property="dispatchSortSerialNo" jdbcType="VARCHAR" />
	</resultMap>
	
	<resultMap id="DeliverbillDtoMap"
		type="com.deppon.foss.module.pickup.predeliver.api.shared.dto.DeliverbillDto">
		<result column="totalGoodsWeight" property="totalGoodsWeight" jdbcType="DECIMAL" />
		<result column="totalGoodsVolume" property="totalGoodsVolume" jdbcType="DECIMAL" />
	</resultMap>

	<resultMap id="BaseResultWithStockMap"
		type="com.deppon.foss.module.pickup.predeliver.api.shared.domain.DeliverbillDetailEntity"
		extends="BaseResultMap">
		<result column="STOCK_GOODS_QTY" property="stockGoodQty"
			jdbcType="DECIMAL" />
		<result column="DISTRICT_NAME" property="districtName"
			jdbcType="VARCHAR" />
		<result column="PREDELIVERDATE" property="preDeliverDate" jdbcType="VARCHAR" />	
		<result column="DELIVERYTIMEINTERVAL" property="deliveryTimeInterval" jdbcType="VARCHAR" />	
		<result column="DELIVERYTIMEOVER" property="deliveryTimeOver" jdbcType="VARCHAR" />	
		<result column="DELIVERYTIMESTART" property="deliveryTimeStart" jdbcType="VARCHAR" />	
	</resultMap>
	
	<resultMap id="BaseResultWithPrintMap"
		type="com.deppon.foss.module.pickup.predeliver.api.shared.domain.DeliverbillDetailEntity"
		extends="BaseResultMap">
		<result column="DISTRICT_NAME" property="districtName"
			jdbcType="VARCHAR" />
		<result  column="RECEIVE_CUSTOMER_CONTACT" property="receiveCustomerContact" jdbcType="VARCHAR"/>
		<result  column="RECEIVE_METHOD" property="receiveMethod" jdbcType="VARCHAR"/>
	</resultMap>
	
	<resultMap id="BaseResultWithWaybillRfcMap"
		type="com.deppon.foss.module.pickup.predeliver.api.shared.domain.DeliverbillDetailEntity"
		extends="BaseResultMap">
		<result column="STATUS" property="waybillrfcStatus"
			jdbcType="VARCHAR" />
	</resultMap>

	<resultMap id="WaybillToArrangeResultMap"
		type="com.deppon.foss.module.pickup.predeliver.api.shared.dto.WaybillToArrangeDto">
		<result column="ID" property="id" jdbcType="VARCHAR" />
		<result column="WAYBILL_NO" property="waybillNo" jdbcType="VARCHAR" />
		<result column="GOODS_NAME" property="goodsName" jdbcType="VARCHAR" />
		<result column="GOODS_WEIGHT_TOTAL" property="weight" jdbcType="DECIMAL" />
		<result column="GOODS_SIZE" property="dimension" jdbcType="VARCHAR" typeHandler="org.apache.ibatis.type.ClobTypeHandler" />
		<result column="GOODS_VOLUME_TOTAL" property="goodsVolumeTotal" jdbcType="VARCHAR" />
		<result column="GOODS_PACKAGE" property="goodsPackage" jdbcType="VARCHAR" />
		<result column="GOODS_QTY_TOTAL" property="waybillGoodsQty"
			jdbcType="DECIMAL" />
		<result column="ARRANGABLE_GOODS_QTY" property="arrangableGoodsQty"
			jdbcType="DECIMAL" />
		<result column="ARRANGABLE_GOODS_QTY" property="preArrangeGoodsQty"
			jdbcType="DECIMAL" />
		<result column="ARRANGABLE_GOODS_QTY" property="arrangeGoodsQty"
			jdbcType="DECIMAL" />
		<result column="PRODUCT_CODE" property="transportType"
			jdbcType="VARCHAR" />
		<result column="ARRIVE_TIME" property="arriveTime" jdbcType="TIMESTAMP" />
		<result column="DELIVER_DATE" property="deliverDate" jdbcType="TIMESTAMP" />
		<result column="RECEIVE_CUSTOMER_CONTACT" property="consignee"
			jdbcType="VARCHAR" />
		<result column="RECEIVE_CUSTOMER_MOBILEPHONE" property="consigneeContact"
			jdbcType="VARCHAR" />
			
		<result column="RECEIVE_CUSTOMER_PROV_CODE" property="receiveCustomerProvCode"
			jdbcType="VARCHAR" />
		<result column="RECEIVE_CUSTOMER_CITY_CODE" property="receiveCustomerCityCode"
			jdbcType="VARCHAR" />	
		<result column="RECEIVE_CUSTOMER_DIST_CODE" property="receiveCustomerDistCode"
			jdbcType="VARCHAR" />
				
		<result column="RECEIVE_CUSTOMER_ADDRESS" property="consigneeAddress"
			jdbcType="VARCHAR" />
		<result column="RECEIVE_CUSTOMER_ADDRESS_NOTE" property="consigneeAddressNote" jdbcType="VARCHAR" />
		<result column="PRE_CUSTOMER_PICKUP_TIME" property="estimatedDeliverTime"
			jdbcType="TIMESTAMP" />
		<result column="PAYMENT_TYPE" property="paymentType" jdbcType="VARCHAR" />
		<result column="REGION_NAME" property="deliverRegionName" jdbcType="VARCHAR" />
		<result column="INNER_NOTES" property="notes" jdbcType="VARCHAR" typeHandler="org.apache.ibatis.type.ClobTypeHandler"/>
		<result column="RECEIVE_METHOD" property="deliverType"
			jdbcType="VARCHAR" />
		<result column="IS_ALREADY_CONTACT" property="isAlreadyContact"
			jdbcType="VARCHAR" />
		<result column="IS_NEED_INVOICE" property="isNeedInvoice"
			jdbcType="VARCHAR" />
		<result column="IS_SENT_REQUIRED" property="isSentRequired"
			jdbcType="VARCHAR" />
		<result column="DELIVER_REQUIRE" property="deliverRequire"
			jdbcType="VARCHAR" />
		<result column="GOODS_VOLUME_TOTAL" property="goodsVolumeTotal"
			jdbcType="DECIMAL" />
		<result column="TO_PAY_AMOUNT" property="payAmount" jdbcType="DECIMAL" />
		<result column="FAST_WAYBILL_FLAG" property="fastWaybillFlag"
			jdbcType="DECIMAL" />
		<result column="return_bill_type" property="returnBillType"
			jdbcType="VARCHAR" />
		<result column="currency_code" property="currencyCode"
			jdbcType="VARCHAR" />
		<result column="goods_package" property="goodsPackage"
			jdbcType="VARCHAR" />
		<result column="STOCK_GOODS_QTY" property="stockGoodQty"
			jdbcType="DECIMAL" />
		<result column="deliverSuggest" property="deliverSuggest" jdbcType="VARCHAR" />
		<result column="together_Send_Code" property="togetherSendCode" jdbcType="VARCHAR" />
	</resultMap>

	<resultMap id="WaybillDeliveryResultMap"
		type="com.deppon.foss.module.pickup.predeliver.api.shared.dto.WaybillDeliveryDto">
		<result column="OPERATE_ORG_CODE" property="operateOrgCode"
			jdbcType="VARCHAR" />
		<result column="OPERATE_TIME" property="operateTime" jdbcType="TIMESTAMP" />
		<result column="OPERATOR" property="operatorName" jdbcType="VARCHAR" />
		<result column="DRIVER_CODE" property="driverCode" jdbcType="VARCHAR" />
		<result column="ARRANGE_GOODS_QTY" property="operateGoodsQty"
			jdbcType="DECIMAL" />
		<result column="DELIVERBILL_NO" property="deliverbillNo"
			jdbcType="VARCHAR" />
		<result column="VEHICLE_NO" property="vehicleNo" jdbcType="VARCHAR" />
		<result column="DRIVER_NAME" property="driverName" jdbcType="VARCHAR" />
		<result column="EMP_PHONE" property="driverPhone" jdbcType="VARCHAR" />
		<result column="STATUS" property="status" jdbcType="VARCHAR" />
		<result column="IS_EXPRESS" property="isExpress" jdbcType="VARCHAR" />
	</resultMap>

	<resultMap id="UnnotifiedDeliverbillDetailMap"
		type="com.deppon.foss.module.pickup.predeliver.api.shared.dto.DeliverbillDetailDto">
		<result column="WAYBILL_NO" property="waybillNo" jdbcType="VARCHAR" />
		<result column="CONSIGNEE" property="consignee" jdbcType="VARCHAR" />
		<result column="CONSIGNEE_CONTACT" property="consigneeContact"
			jdbcType="VARCHAR" />
		<result column="PAY_AMOUNT" property="payAmount" jdbcType="DECIMAL" />
	</resultMap>

	<resultMap id="QtyInconsistentDeliverbillDetailMap"
		type="com.deppon.foss.module.pickup.predeliver.api.shared.dto.DeliverbillDetailDto">
		<result column="WAYBILL_NO" property="waybillNo" jdbcType="VARCHAR" />
		<result column="ARRANGE_GOODS_QTY" property="arrangeGoodsQty"
			jdbcType="DECIMAL" />
		<result column="ARRIVE_SHEET_GOODS_QTY" property="arriveSheetGoodsQty"
			jdbcType="DECIMAL" />
		<result column="STOCK_GOODS_QTY" property="inStockGoodsQty"
			jdbcType="DECIMAL" />
	</resultMap>

	<sql id="Base_Column_List">
		/*模块：接送货-排单-查询排单明细*/
		ID, T_SRV_DELIVERBILL_ID, SERIAL_NO, ARRIVESHEET_NO,
		WAYBILL_NO,
		ARRANGE_STATUS,
		PRE_ARRANGE_GOODS_QTY, ARRANGE_GOODS_QTY,
		WEIGHT, DIMENSION, GOODS_NAME, WAYBILL_GOODS_QTY,
		TRANSPORT_TYPE,
		ARRIVE_TIME, CONSIGNEE, CONSIGNEE_CONTACT,
		CONSIGNEE_ADDRESS,
		DELIVER_REQUIRE,
		GOODS_STATUS, IS_EXCEPTION, IS_ALREADY_CONTACT,
		ESTIMATED_DELIVER_TIME,
		IS_NEED_INVOICE,
		PAYMENT_TYPE, NOTES,
		DELIVER_TYPE, GOODS_VOLUME_TOTAL, PAY_AMOUNT/100 as
		PAY_AMOUNT,
		FAST_WAYBILL_FLAG,
		CURRENCY_CODE, GOODS_PACKAGE, RETURN_BILL_TYPE,
		T_SRV_DELIVER_HANDOVERBILL_ID,DELIVER_DATE,
		RECOMMENDED_DELIVERY_TIME,DISPATCH_SORT_SERIAL_NO
	</sql>
	
	<sql id="Base_Column_List_Print">
		/*模块：接送货-排单-查询排单明细用于打印*/
		 DBD.ID,
		 DBD.T_SRV_DELIVERBILL_ID,
		 DBD.SERIAL_NO,
		 DBD.ARRIVESHEET_NO,
		 DBD.WAYBILL_NO,
		 DBD.ARRANGE_STATUS,
		 DBD.PRE_ARRANGE_GOODS_QTY,
		 DBD.ARRANGE_GOODS_QTY,
		 DBD.WEIGHT,
		 DBD.DIMENSION,
		 DBD.GOODS_NAME,
		 DBD.WAYBILL_GOODS_QTY,
		 DBD.TRANSPORT_TYPE,
		 DBD.ARRIVE_TIME,
		 DBD.CONSIGNEE,
		 DBD.CONSIGNEE_CONTACT,
		 DBD.CONSIGNEE_ADDRESS,
		 DBD.DELIVER_REQUIRE,
		 DBD.GOODS_STATUS,
		 DBD.IS_EXCEPTION,
		 DBD.IS_ALREADY_CONTACT,
		 DBD.ESTIMATED_DELIVER_TIME,
		 DBD.IS_NEED_INVOICE,
		 DBD.PAYMENT_TYPE,
		 DBD.NOTES,
		 DBD.DELIVER_TYPE,
		 DBD.GOODS_VOLUME_TOTAL,
		 DBD.PAY_AMOUNT / 100 AS PAY_AMOUNT,
		 DBD.FAST_WAYBILL_FLAG,
		 DBD.CURRENCY_CODE,
		 DBD.GOODS_PACKAGE,
		 DBD.RETURN_BILL_TYPE,
		 BD.NAME AS DISTRICT_NAME,
		 W.RECEIVE_CUSTOMER_CONTACT,
		 w.RECEIVE_METHOD
	</sql>
	
	<sql id="Deliverbill_Arrivesheet_Column_List">
		/*模块：接送货-排单-根据派送单ID查找已生成到达联的派送明细列表*/
	    d.ID, 
	    d.T_SRV_DELIVERBILL_ID, 
	    d.SERIAL_NO, 
	    decode(d.arrivesheet_no,'N/A',a.arrivesheet_no,d.arrivesheet_no) arrivesheet_no,
	    d.WAYBILL_NO,
	    d.ARRANGE_STATUS,
	    d.PRE_ARRANGE_GOODS_QTY, 
	    d.ARRANGE_GOODS_QTY,
	    d.WEIGHT, 
	    d.DIMENSION, 
	    d.GOODS_NAME, 
	    d.WAYBILL_GOODS_QTY,
	    d.TRANSPORT_TYPE,
	    d.ARRIVE_TIME, 
	    d.CONSIGNEE, 
	    d.CONSIGNEE_CONTACT,
	    d.CONSIGNEE_ADDRESS,
	    d.DELIVER_REQUIRE,
	    d.GOODS_STATUS, 
	    d.IS_EXCEPTION, 
	    d.IS_ALREADY_CONTACT,
	    d.ESTIMATED_DELIVER_TIME,
	    d.IS_NEED_INVOICE,
	    d.PAYMENT_TYPE, 
	    d.NOTES,
	    d.DELIVER_TYPE, 
	    d.GOODS_VOLUME_TOTAL, 
	    d.PAY_AMOUNT/100 as PAY_AMOUNT,
	    d.FAST_WAYBILL_FLAG,
	    d.CURRENCY_CODE, 
	    d.GOODS_PACKAGE, 
	    d.RETURN_BILL_TYPE,
		r.STATUS,
		a.destroyed
	</sql>

	<sql id="Base_Column_With_Stock_List">
		/*模块：接送货-排单-查询排单明细*/
		dbd.ID, dbd.T_SRV_DELIVERBILL_ID, dbd.SERIAL_NO,
		dbd.ARRIVESHEET_NO,
		dbd.WAYBILL_NO, dbd.ARRANGE_STATUS,
		dbd.PRE_ARRANGE_GOODS_QTY, dbd.ARRANGE_GOODS_QTY, dbd.WEIGHT,
 		dbd.DIMENSION,
		dbd.GOODS_NAME,
		dbd.WAYBILL_GOODS_QTY,
		dbd.TRANSPORT_TYPE, dbd.ARRIVE_TIME, dbd.CONSIGNEE,
		dbd.CONSIGNEE_CONTACT,
		dbd.CONSIGNEE_ADDRESS, dbd.DELIVER_REQUIRE,
		dbd.GOODS_STATUS, dbd.IS_EXCEPTION, dbd.IS_ALREADY_CONTACT,
		dbd.ESTIMATED_DELIVER_TIME,
		dbd.IS_NEED_INVOICE,
		dbd.PAYMENT_TYPE,
		dbd.NOTES, dbd.DELIVER_TYPE, dbd.GOODS_VOLUME_TOTAL,
		dbd.PAY_AMOUNT/100 as PAY_AMOUNT, dbd.FAST_WAYBILL_FLAG,
		dbd.CURRENCY_CODE, dbd.GOODS_PACKAGE, dbd.RETURN_BILL_TYPE,
<!-- 		AF.DIMENSION, -->
		CASE
     		WHEN AF.NOTIFICATION_ORG_CODE = W.LAST_LOAD_ORG_CODE THEN af.deliver_date
     		WHEN AF.UP_DELIVER_DATE_ORG_CODE= W.LAST_LOAD_ORG_CODE THEN af.deliver_date
     	ELSE
      		NULL
 		END AS preDeliverDate,
   		DECODE(AF.NOTIFICATION_ORG_CODE, W.LAST_LOAD_ORG_CODE, af.delivery_time_interval, NULL) AS deliveryTimeInterval,
   		DECODE(AF.NOTIFICATION_ORG_CODE, W.LAST_LOAD_ORG_CODE,af.delivery_time_over, NULL) AS deliveryTimeOver,
   		DECODE(AF.NOTIFICATION_ORG_CODE, W.LAST_LOAD_ORG_CODE, af.delivery_time_start, NULL) AS deliveryTimeStart, 
		ws.STOCK_GOODS_QTY,
		w.RECEIVE_BIG_CUSTOMER as receiveBigCustomer,
		BD.NAME AS DISTRICT_NAME 
	</sql>
	
    <!-- 过滤家装提货方式 -->
  <sql id="select_NotReceiveMethodTmp_where">
    <if test="notReceviedMethods !=null and notReceviedMethods.size > 0">
        AND waybill.RECEIVE_METHOD NOT IN
         <foreach collection="notReceviedMethods" index="index" item="rmethod" open="(" separator="," close=")">
             #{rmethod}
         </foreach>
    </if>
  </sql>
  
	<select id="selectDeliverbillDetailByDeliverbillId" resultMap="BaseResultMap"
		parameterType="java.lang.String">
		select 
		<include refid="Base_Column_List" />
		from PKP.T_SRV_DELIVERBILL_DETAIL t
		where t.t_srv_deliverbill_id = #{id,jdbcType=VARCHAR} 
		order by t.DELIVER_DATE desc Nulls last
	</select>
	
	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.String">
		select
		<include refid="Base_Column_List" />
		from PKP.T_SRV_DELIVERBILL_DETAIL
		where ID = #{id,jdbcType=VARCHAR}
	</select>

	<select id="selectByDeliverbillId" resultMap="BaseResultWithStockMap"
		parameterType="java.util.Map">
		select
		<include refid="Base_Column_With_Stock_List" />
		 FROM PKP.T_SRV_DELIVERBILL_DETAIL DBD
		  LEFT JOIN PKP.T_SRV_ACTUAL_FREIGHT AF ON DBD.WAYBILL_NO = AF.WAYBILL_NO
		 INNER JOIN PKP.T_SRV_WAYBILL W ON DBD.WAYBILL_NO = W.WAYBILL_NO
		  LEFT JOIN TFR.T_OPT_WAYBILL_STOCK WS ON DBD.WAYBILL_NO = WS.WAYBILL_NO
		                                      AND AF.END_STOCK_ORG_CODE =
		                                          WS.ORG_CODE
		                                      AND WS.GOODS_AREA_CODE = #{areaCode, jdbcType=VARCHAR}
		  LEFT JOIN BSE.T_BAS_DISTRICT BD ON BD.CODE = W.RECEIVE_CUSTOMER_DIST_CODE
		                                 AND BD.ACTIVE = 'Y' /** DMANA-4290 **/
		 WHERE T_SRV_DELIVERBILL_ID = #{deliverbillId,jdbcType=VARCHAR}
		   AND W.ACTIVE = 'Y'
		 ORDER BY SERIAL_NO
	</select>
	
	<select id="selectByDeliverbillReturn_bill_type_Sort" resultMap="BaseResultWithStockMap"
		parameterType="java.util.Map">
		select
		<include refid="Base_Column_With_Stock_List" />,
		decode(dbd.return_bill_type,'ORIGINAL',1,'FAX',2,3) as return_bill_type_sort
		 FROM PKP.T_SRV_DELIVERBILL_DETAIL DBD
		  LEFT JOIN PKP.T_SRV_ACTUAL_FREIGHT AF ON DBD.WAYBILL_NO = AF.WAYBILL_NO
		 INNER JOIN PKP.T_SRV_WAYBILL W ON DBD.WAYBILL_NO = W.WAYBILL_NO
		  LEFT JOIN TFR.T_OPT_WAYBILL_STOCK WS ON DBD.WAYBILL_NO = WS.WAYBILL_NO
		                                      AND AF.END_STOCK_ORG_CODE =
		                                          WS.ORG_CODE
		                                      AND WS.GOODS_AREA_CODE = #{areaCode, jdbcType=VARCHAR}
		  LEFT JOIN BSE.T_BAS_DISTRICT BD ON BD.CODE = W.RECEIVE_CUSTOMER_DIST_CODE
		                                 AND BD.ACTIVE = 'Y' /** DMANA-4290 **/
		 WHERE T_SRV_DELIVERBILL_ID = #{deliverbillId,jdbcType=VARCHAR}
		   AND W.ACTIVE = 'Y'
		 ORDER BY return_bill_type_sort asc
	</select>
	
	<select id="selectByDeliverbillIdForPrint" resultMap="BaseResultWithPrintMap"
		parameterType="java.util.Map">
		select
		<include refid="Base_Column_List_Print" />
		FROM PKP.T_SRV_DELIVERBILL_DETAIL DBD
		  LEFT JOIN PKP.T_SRV_WAYBILL W ON W.WAYBILL_NO = DBD.WAYBILL_NO
		  LEFT JOIN BSE.T_BAS_DISTRICT BD ON BD.CODE = W.RECEIVE_CUSTOMER_DIST_CODE
		                                 AND BD.ACTIVE = 'Y' /** DMANA-4290 **/
		 WHERE T_SRV_DELIVERBILL_ID = #{deliverbillId,jdbcType=VARCHAR}
		   AND W.ACTIVE = 'Y'
		 ORDER BY SERIAL_NO
	</select>

	<select id="selectArrivesheetByDeliverbillId" resultMap="BaseResultWithWaybillRfcMap"
		parameterType="java.util.Map">
		select
		<include refid="Deliverbill_Arrivesheet_Column_List" />
		from PKP.T_SRV_DELIVERBILL_DETAIL d
		left join pkp.t_srv_arrivesheet a on a.waybill_no = d.waybill_no 
		and a.status = #{astatus,jdbcType=VARCHAR} 
		and a.destroyed = #{adestroyed,jdbcType=VARCHAR} 
		and a.active = #{active,jdbcType=VARCHAR}
  		left join pkp.t_srv_waybillrfc r on r.waybill_no = d.waybill_no 
  		<![CDATA[
  		and r.status in ( #{preaudit,jdbcType=VARCHAR}, #{preaccept,jdbcType=VARCHAR})
		where T_SRV_DELIVERBILL_ID = #{deliverbillId,jdbcType=VARCHAR}
		order by SERIAL_NO
	]]>
	</select>
	
	<select id="selectArrivesheetByDeliverbillById" resultMap="BaseResultWithWaybillRfcMap"
		parameterType="java.util.Map">
		select
		<include refid="Deliverbill_Arrivesheet_Column_List" />
		from PKP.T_SRV_DELIVERBILL_DETAIL d
		inner join pkp.t_srv_arrivesheet a on a.arrivesheet_no = d.arrivesheet_no 
  		left join pkp.t_srv_waybillrfc r on r.waybill_no = d.waybill_no 
  		<![CDATA[
  		and r.status in ( #{preaudit,jdbcType=VARCHAR}, #{preaccept,jdbcType=VARCHAR})
		where T_SRV_DELIVERBILL_ID = #{deliverbillId,jdbcType=VARCHAR}
		and a.status = #{astatus,jdbcType=VARCHAR} 
		and a.destroyed = #{adestroyed,jdbcType=VARCHAR} 
		and a.active = #{active,jdbcType=VARCHAR} 
		order by SERIAL_NO
	]]>
	</select>

	<select id="selectCountByDeliverbillId" resultType="Long"
		parameterType="java.lang.String">
		select
		/*模块：接送货-排单-派送单明细列表大小*/
		count(1)
		from PKP.T_SRV_DELIVERBILL_DETAIL
		where
		T_SRV_DELIVERBILL_ID = #{deliverbillId,jdbcType=VARCHAR}
	</select>

	<select id="selectIdBySerialNo"
		parameterType="com.deppon.foss.module.pickup.predeliver.api.shared.domain.DeliverbillDetailEntity"
		resultType="String">
		select 
		/*模块：接送货-排单-查询派送单下指定序号的派送单明细ID*/
		ID
		from PKP.T_SRV_DELIVERBILL_DETAIL
		where
		T_SRV_DELIVERBILL_ID = #{tSrvDeliverbillId,jdbcType=VARCHAR}
		and
		SERIAL_NO = #{serialNo,jdbcType=DECIMAL}
	</select>

	<select id="selectMaxSerialNoByDeliverbillId" resultType="Integer"
		parameterType="java.lang.String">
		select  
		/*模块：接送货-排单-查询最大的派送单明细编号*/
		max(SERIAL_NO)
		from PKP.T_SRV_DELIVERBILL_DETAIL
		where T_SRV_DELIVERBILL_ID = #{deliverbillId,jdbcType=VARCHAR}
	</select>

	<select id="selectWaybillToArrangeByCondition"
		parameterType="com.deppon.foss.module.pickup.predeliver.api.shared.dto.WaybillToArrangeDto"
		resultMap="WaybillToArrangeResultMap">
		select * from(
		<![CDATA[
			   select 
			   /*模块：接送货-排单-查询待排运单*/
			   waybill.id,
			   waybill.waybill_no,
			   waybill.goods_name,
			   waybill.goods_weight_total,
			   waybill.goods_size,
			   waybill.goods_qty_total,
			   actual_freight.arrive_goods_qty - actual_freight.arrange_goods_qty as arrangable_goods_qty,
			   actual_freight.RECEIVE_CUSTOMER_ADDRESS_NOTE RECEIVE_CUSTOMER_ADDRESS_NOTE,
			   waybill.product_code,
			   actual_freight.arrive_time,
			   actual_freight.deliver_date,
			   waybill.receive_customer_contact,
			   waybill.receive_customer_mobilephone,
			   waybill.receive_customer_prov_code,
		       waybill.receive_customer_city_code,
		       waybill.receive_customer_dist_code,
			   waybill.receive_customer_address,
			   waybill.pre_customer_pickup_time,
			   actual_freight.PAYMENT_TYPE,
			   V.REGION_NAME,
			   waybill.inner_notes,
			   waybill.receive_method,
			   decode(actual_freight.notification_result, #{notifySuccessFlag,jdbcType=VARCHAR}, 'Y', 'N') as IS_ALREADY_CONTACT,
			   arrivesheet.is_need_invoice,
			   nvl(arrivesheet.is_sent_required, 'N') as is_sent_required,
			   arrivesheet.deliver_require,
			   waybill.goods_volume_total,
			   waybill.to_pay_amount/100 as to_pay_amount,
			   decode(waybill.product_code, #{fastWaybillCode,jdbcType=VARCHAR}, 1, 0) as FAST_WAYBILL_FLAG,
			   waybill.return_bill_type,
			   waybill.currency_code,
			   waybill.goods_package,
			   ws.stock_goods_qty,
				 CASE
				   WHEN WAYBILL.TO_PAY_AMOUNT > 1000000 THEN
				    '是'
				   WHEN WAYBILL.GOODS_WEIGHT_TOTAL > 1000 THEN
				    '是'
				   WHEN WAYBILL.RECEIVE_METHOD = 'DELIVER_UP' AND
				        WAYBILL.GOODS_WEIGHT_TOTAL > 300 THEN
				    '是'
				   WHEN WAYBILL.RECEIVE_METHOD = 'DELIVER_UP' AND
				        (WAYBILL.GOODS_WEIGHT_TOTAL / WAYBILL.GOODS_QTY_TOTAL) > 30 THEN
				    '是'
				   ELSE
				    '否'
				 END AS deliverSuggest,
				 actual_freight.together_Send_Code,
				 actual_freight.together_Send_mark
				 ,waybill.RECEIVE_BIG_CUSTOMER as receiveBigCustomer
		  from pkp.t_srv_waybill waybill
		 inner join pkp.t_srv_actual_freight actual_freight
			on waybill.waybill_no = actual_freight.waybill_no
			 left join pkp.t_srv_arrivesheet arrivesheet
			on waybill.waybill_no = arrivesheet.waybill_no
			and arrivesheet.active = #{arrivesheetActive,jdbcType=VARCHAR}
		    and arrivesheet.status = #{arrivesheetStatus,jdbcType=VARCHAR}
		    and arrivesheet.destroyed = #{arrivesheetDestroyed,jdbcType=VARCHAR}
			 LEFT JOIN BSE.T_BAS_REGION_VEHICLE V
			ON actual_freight.DELIVER_REGION_CODE = V.REGION_CODE
			       AND V.ACTIVE = 'Y' 
			left join tfr.T_OPT_WAYBILL_STOCK ws on waybill.waybill_no = ws.waybill_no
				   and ws.org_code = #{endStockOrgCode, jdbcType=VARCHAR}
				   and ws.GOODS_AREA_CODE = #{goodsAreaCode, jdbcType=VARCHAR}
	]]>
		<include refid="selectWaybillToArrangeByCondition_where" />
    <include refid="select_NotReceiveMethodTmp_where" />
		union all
			<![CDATA[
			   select 
			   /*模块：接送货-排单-查询待排运单*/
			   waybill.id,
			   waybill.waybill_no,
			   waybill.goods_name,
			   waybill.goods_weight_total,
			   waybill.goods_size,
			   waybill.goods_qty_total,
			   waybill.goods_qty_total-actual_freight.arrange_goods_qty as arrangable_goods_qty,
			   actual_freight.RECEIVE_CUSTOMER_ADDRESS_NOTE RECEIVE_CUSTOMER_ADDRESS_NOTE,
			   waybill.product_code,
			   actual_freight.arrive_time,
			   actual_freight.deliver_date,
			   waybill.receive_customer_contact,
			   waybill.receive_customer_mobilephone,
			   waybill.receive_customer_prov_code,
		       waybill.receive_customer_city_code,
		       waybill.receive_customer_dist_code,
			   waybill.receive_customer_address,
			   waybill.pre_customer_pickup_time,
			   actual_freight.PAYMENT_TYPE,
			   V.REGION_NAME,
			   waybill.inner_notes,
			   waybill.receive_method,
			   decode(actual_freight.notification_result, #{notifySuccessFlag,jdbcType=VARCHAR}, 'Y', 'N') as IS_ALREADY_CONTACT,
			   arrivesheet.is_need_invoice,
			   nvl(arrivesheet.is_sent_required, 'N') as is_sent_required,
			   arrivesheet.deliver_require,
			   waybill.goods_volume_total,
			   waybill.to_pay_amount/100 as to_pay_amount,
			   decode(waybill.product_code, #{fastWaybillCode,jdbcType=VARCHAR}, 1, 0) as FAST_WAYBILL_FLAG,
			   waybill.return_bill_type,
			   waybill.currency_code,
			   waybill.goods_package,
			   ws.stock_goods_qty,
				 CASE
				   WHEN WAYBILL.TO_PAY_AMOUNT > 1000000 THEN
				    '是'
				   WHEN WAYBILL.GOODS_WEIGHT_TOTAL > 1000 THEN
				    '是'
				   WHEN WAYBILL.RECEIVE_METHOD = 'DELIVER_UP' AND
				        WAYBILL.GOODS_WEIGHT_TOTAL > 300 THEN
				    '是'
				   WHEN WAYBILL.RECEIVE_METHOD = 'DELIVER_UP' AND
				        (WAYBILL.GOODS_WEIGHT_TOTAL / WAYBILL.GOODS_QTY_TOTAL) > 30 THEN
				    '是'
				   ELSE
				    '否'
				 END AS deliverSuggest,
				 actual_freight.together_Send_Code,
				actual_freight.together_Send_mark
				 ,waybill.RECEIVE_BIG_CUSTOMER as receiveBigCustomer
		  from pkp.t_srv_waybill waybill
		 inner join pkp.t_srv_actual_freight actual_freight
			on waybill.waybill_no = actual_freight.waybill_no
			 	left join pkp.t_srv_arrivesheet arrivesheet
			on waybill.waybill_no = arrivesheet.waybill_no
				and arrivesheet.active = #{arrivesheetActive,jdbcType=VARCHAR}
				and arrivesheet.status = #{arrivesheetStatus,jdbcType=VARCHAR}
				and arrivesheet.destroyed = #{arrivesheetDestroyed,jdbcType=VARCHAR}
			LEFT JOIN BSE.T_BAS_REGION_VEHICLE V
			ON actual_freight.DELIVER_REGION_CODE = V.REGION_CODE
			       AND V.ACTIVE = 'Y' 
			left join tfr.T_OPT_WAYBILL_STOCK ws on waybill.waybill_no = ws.waybill_no
				   and ws.org_code = #{endStockOrgCode, jdbcType=VARCHAR}
				   and ws.GOODS_AREA_CODE = #{goodsAreaCode, jdbcType=VARCHAR}
	]]>
		<include refid="selectWaybillToArrangeByendStockCode_where" />
    <include refid="select_NotReceiveMethodTmp_where" />)	deliver_info
		order by 
		nvl(deliver_info.is_sent_required, 'N') desc,
		deliver_info.product_code,
		deliver_info.arrive_time,
		deliver_info.together_Send_mark nulls last,
		deliver_info.receive_method
	</select>
	
	<!--查询库位中货物信息 -->
	<select id="selectWaybillToArrangeByStoringCondition"
		parameterType="com.deppon.foss.module.pickup.predeliver.api.shared.dto.WaybillToArrangeDto"
		resultMap="WaybillToArrangeResultMap">
		<![CDATA[
			   select 
			   /*模块：接送货-排单-查询待排运单*/
			   waybill.id,
			   waybill.waybill_no,
			   waybill.goods_name,
			   waybill.goods_weight_total,
			   waybill.goods_size,
			   waybill.goods_qty_total,
			   actual_freight.arrive_goods_qty - actual_freight.arrange_goods_qty as arrangable_goods_qty,
			   actual_freight.RECEIVE_CUSTOMER_ADDRESS_NOTE RECEIVE_CUSTOMER_ADDRESS_NOTE,
			   waybill.product_code,
			   actual_freight.arrive_time,
			   actual_freight.deliver_date,
			   waybill.receive_customer_contact,
			   waybill.receive_customer_mobilephone,
			   waybill.receive_customer_prov_code,
		       waybill.receive_customer_city_code,
		       waybill.receive_customer_dist_code,
			   waybill.receive_customer_address,
			   waybill.pre_customer_pickup_time,
			   actual_freight.PAYMENT_TYPE,
			   V.REGION_NAME,
			   waybill.inner_notes,
			   waybill.receive_method,
			   decode(actual_freight.notification_result, #{notifySuccessFlag,jdbcType=VARCHAR}, 'Y', 'N') as IS_ALREADY_CONTACT,
			   arrivesheet.is_need_invoice,
			   nvl(arrivesheet.is_sent_required, 'N') as is_sent_required,
			   arrivesheet.deliver_require,
			   waybill.goods_volume_total,
			   waybill.to_pay_amount/100 as to_pay_amount,
			   decode(waybill.product_code, #{fastWaybillCode,jdbcType=VARCHAR}, 1, 0) as FAST_WAYBILL_FLAG,
			   waybill.return_bill_type,
			   waybill.currency_code,
			   waybill.goods_package,
			   ws.stock_goods_qty,
				 CASE
				   WHEN WAYBILL.TO_PAY_AMOUNT > 1000000 THEN
				    '是'
				   WHEN WAYBILL.GOODS_WEIGHT_TOTAL > 1000 THEN
				    '是'
				   WHEN WAYBILL.RECEIVE_METHOD = 'DELIVER_UP' AND
				        WAYBILL.GOODS_WEIGHT_TOTAL > 300 THEN
				    '是'
				   WHEN WAYBILL.RECEIVE_METHOD = 'DELIVER_UP' AND
				        (WAYBILL.GOODS_WEIGHT_TOTAL / WAYBILL.GOODS_QTY_TOTAL) > 30 THEN
				    '是'
				   ELSE
				    '否'
				 END AS deliverSuggest,
				actual_freight. together_Send_Code
				 ,waybill.RECEIVE_BIG_CUSTOMER as receiveBigCustomer
		  from pkp.t_srv_waybill waybill
		 inner join pkp.t_srv_actual_freight actual_freight
			on waybill.waybill_no = actual_freight.waybill_no
			 left join pkp.t_srv_arrivesheet arrivesheet
			on waybill.waybill_no = arrivesheet.waybill_no
				   and arrivesheet.active = #{arrivesheetActive,jdbcType=VARCHAR}
				   and arrivesheet.status = #{arrivesheetStatus,jdbcType=VARCHAR}
				   and arrivesheet.destroyed = #{arrivesheetDestroyed,jdbcType=VARCHAR}
		    LEFT JOIN BSE.T_BAS_REGION_VEHICLE V
			ON actual_freight.DELIVER_REGION_CODE = V.REGION_CODE
			       AND V.ACTIVE = 'Y' 
			inner join tfr.T_OPT_WAYBILL_STOCK ws on waybill.waybill_no = ws.waybill_no
				   and ws.org_code = #{endStockOrgCode, jdbcType=VARCHAR}
				   and ws.GOODS_AREA_CODE = #{goodsAreaCode, jdbcType=VARCHAR}
				   and ws.position_qty > 0
	]]>
		<include refid="selectWaybillToArrangeByCondition_where" />
    <include refid="select_NotReceiveMethodTmp_where" />
		order by 
		nvl(is_sent_required, 'N') desc,
		product_code,
		arrive_time,
		actual_freight.together_Send_mark nulls last,
		receive_method
	</select>
	
		<select id="selectWaybillToArrangeTotal"
		parameterType="com.deppon.foss.module.pickup.predeliver.api.shared.dto.WaybillToArrangeDto"
		resultMap="DeliverbillDtoMap">
		select sum(goods_weight_total)/1000 as totalGoodsWeight, sum(goods_volume_total) as totalGoodsVolume
		from(
		<![CDATA[
			   select 
			   /*模块：接送货-排单-查询待排运单*/
			   waybill.id,
			   waybill.waybill_no,
			   waybill.goods_name,
			   waybill.goods_weight_total,
			   waybill.goods_size,
			   waybill.goods_qty_total,
			   actual_freight.arrive_goods_qty - actual_freight.arrange_goods_qty as arrangable_goods_qty,
			   actual_freight.RECEIVE_CUSTOMER_ADDRESS_NOTE RECEIVE_CUSTOMER_ADDRESS_NOTE,
			   waybill.product_code,
			   actual_freight.arrive_time,
			   actual_freight.deliver_date,
			   waybill.receive_customer_contact,
			   waybill.receive_customer_mobilephone,
			   waybill.receive_customer_prov_code,
		       waybill.receive_customer_city_code,
		       waybill.receive_customer_dist_code,
			   waybill.receive_customer_address,
			   waybill.pre_customer_pickup_time,
			   actual_freight.PAYMENT_TYPE,
			   waybill.inner_notes,
			   waybill.receive_method,
			   decode(actual_freight.notification_result, #{notifySuccessFlag,jdbcType=VARCHAR}, 'Y', 'N') as IS_ALREADY_CONTACT,
			   arrivesheet.is_need_invoice,
			   nvl(arrivesheet.is_sent_required, 'N') as is_sent_required,
			   arrivesheet.deliver_require,
			   waybill.goods_volume_total,
			   waybill.to_pay_amount/100 as to_pay_amount,
			   decode(waybill.product_code, #{fastWaybillCode,jdbcType=VARCHAR}, 1, 0) as FAST_WAYBILL_FLAG,
			   waybill.return_bill_type,
			   waybill.currency_code,
			   waybill.goods_package,
			   ws.stock_goods_qty
			   ,waybill.RECEIVE_BIG_CUSTOMER as receiveBigCustomer
		  from pkp.t_srv_waybill waybill
		 inner join pkp.t_srv_actual_freight actual_freight
			on waybill.waybill_no = actual_freight.waybill_no
			 left join pkp.t_srv_arrivesheet arrivesheet
			on waybill.waybill_no = arrivesheet.waybill_no
				   and arrivesheet.active = #{arrivesheetActive,jdbcType=VARCHAR}
				   and arrivesheet.status = #{arrivesheetStatus,jdbcType=VARCHAR}
				   and arrivesheet.destroyed = #{arrivesheetDestroyed,jdbcType=VARCHAR}
			left join tfr.T_OPT_WAYBILL_STOCK ws on waybill.waybill_no = ws.waybill_no
				   and ws.org_code = #{endStockOrgCode, jdbcType=VARCHAR}
				   and ws.GOODS_AREA_CODE = #{goodsAreaCode, jdbcType=VARCHAR}
	]]>
		<include refid="selectWaybillToArrangeByCondition_where" />
    <include refid="select_NotReceiveMethodTmp_where" />
		union all
			<![CDATA[
			   select 
			   /*模块：接送货-排单-查询待排运单*/
			   waybill.id,
			   waybill.waybill_no,
			   waybill.goods_name,
			   waybill.goods_weight_total,
			   waybill.goods_size,
			   waybill.goods_qty_total,
			   waybill.goods_qty_total-actual_freight.arrange_goods_qty as arrangable_goods_qty,
			   actual_freight.RECEIVE_CUSTOMER_ADDRESS_NOTE RECEIVE_CUSTOMER_ADDRESS_NOTE,
			   waybill.product_code,
			   actual_freight.arrive_time,
			   actual_freight.deliver_date,
			   waybill.receive_customer_contact,
			   waybill.receive_customer_mobilephone,
			   waybill.receive_customer_prov_code,
		       waybill.receive_customer_city_code,
		       waybill.receive_customer_dist_code,
			   waybill.receive_customer_address,
			   waybill.pre_customer_pickup_time,
			   actual_freight.PAYMENT_TYPE,
			   waybill.inner_notes,
			   waybill.receive_method,
			   decode(actual_freight.notification_result, #{notifySuccessFlag,jdbcType=VARCHAR}, 'Y', 'N') as IS_ALREADY_CONTACT,
			   arrivesheet.is_need_invoice,
			   nvl(arrivesheet.is_sent_required, 'N') as is_sent_required,
			   arrivesheet.deliver_require,
			   waybill.goods_volume_total,
			   waybill.to_pay_amount/100 as to_pay_amount,
			   decode(waybill.product_code, #{fastWaybillCode,jdbcType=VARCHAR}, 1, 0) as FAST_WAYBILL_FLAG,
			   waybill.return_bill_type,
			   waybill.currency_code,
			   waybill.goods_package,
			   ws.stock_goods_qty
			   ,waybill.RECEIVE_BIG_CUSTOMER as receiveBigCustomer
		  from pkp.t_srv_waybill waybill
		 inner join pkp.t_srv_actual_freight actual_freight
			on waybill.waybill_no = actual_freight.waybill_no
			 left join pkp.t_srv_arrivesheet arrivesheet
			on waybill.waybill_no = arrivesheet.waybill_no
				   and arrivesheet.active = #{arrivesheetActive,jdbcType=VARCHAR}
				   and arrivesheet.status = #{arrivesheetStatus,jdbcType=VARCHAR}
				   and arrivesheet.destroyed = #{arrivesheetDestroyed,jdbcType=VARCHAR}
			left join tfr.T_OPT_WAYBILL_STOCK ws on waybill.waybill_no = ws.waybill_no
				   and ws.org_code = #{endStockOrgCode, jdbcType=VARCHAR}
				   and ws.GOODS_AREA_CODE = #{goodsAreaCode, jdbcType=VARCHAR}
	]]>
		<include refid="selectWaybillToArrangeByendStockCode_where" />
    <include refid="select_NotReceiveMethodTmp_where" />)	deliver_info
	</select>
	
	
	<!--统计库位中货物信息 -->
	<select id="selectWaybillToStoringArrangeTotal"
		parameterType="com.deppon.foss.module.pickup.predeliver.api.shared.dto.WaybillToArrangeDto"
		resultMap="DeliverbillDtoMap">
		select sum(goods_weight_total)/1000 as totalGoodsWeight, sum(goods_volume_total) as totalGoodsVolume
		from(
		<![CDATA[
			   select 
			   /*模块：接送货-排单-查询待排运单*/
			   waybill.id,
			   waybill.waybill_no,
			   waybill.goods_name,
			   waybill.goods_weight_total,
			   waybill.goods_size,
			   waybill.goods_qty_total,
			   actual_freight.arrive_goods_qty - actual_freight.arrange_goods_qty as arrangable_goods_qty,
			   actual_freight.RECEIVE_CUSTOMER_ADDRESS_NOTE RECEIVE_CUSTOMER_ADDRESS_NOTE,
			   waybill.product_code,
			   actual_freight.arrive_time,
			   actual_freight.deliver_date,
			   waybill.receive_customer_contact,
			   waybill.receive_customer_mobilephone,
			   waybill.receive_customer_prov_code,
		       waybill.receive_customer_city_code,
		       waybill.receive_customer_dist_code,
			   waybill.receive_customer_address,
			   waybill.pre_customer_pickup_time,
			   actual_freight.PAYMENT_TYPE,
			   waybill.inner_notes,
			   waybill.receive_method,
			   decode(actual_freight.notification_result, #{notifySuccessFlag,jdbcType=VARCHAR}, 'Y', 'N') as IS_ALREADY_CONTACT,
			   arrivesheet.is_need_invoice,
			   nvl(arrivesheet.is_sent_required, 'N') as is_sent_required,
			   arrivesheet.deliver_require,
			   waybill.goods_volume_total,
			   waybill.to_pay_amount/100 as to_pay_amount,
			   decode(waybill.product_code, #{fastWaybillCode,jdbcType=VARCHAR}, 1, 0) as FAST_WAYBILL_FLAG,
			   waybill.return_bill_type,
			   waybill.currency_code,
			   waybill.goods_package,
			   ws.stock_goods_qty
			   ,waybill.RECEIVE_BIG_CUSTOMER as receiveBigCustomer
		  from pkp.t_srv_waybill waybill
		 inner join pkp.t_srv_actual_freight actual_freight
			on waybill.waybill_no = actual_freight.waybill_no
			 left join pkp.t_srv_arrivesheet arrivesheet
			on waybill.waybill_no = arrivesheet.waybill_no
				   and arrivesheet.active = #{arrivesheetActive,jdbcType=VARCHAR}
				   and arrivesheet.status = #{arrivesheetStatus,jdbcType=VARCHAR}
				   and arrivesheet.destroyed = #{arrivesheetDestroyed,jdbcType=VARCHAR}
			inner join tfr.T_OPT_WAYBILL_STOCK ws on waybill.waybill_no = ws.waybill_no
				   and ws.org_code = #{endStockOrgCode, jdbcType=VARCHAR}
				   and ws.GOODS_AREA_CODE = #{goodsAreaCode, jdbcType=VARCHAR}
				   and ws.position_qty > 0
	]]>
		<include refid="selectWaybillToArrangeByCondition_where" />)
	</select>
	
	<!--库存部门、库区关联 -->
	<sql id="select_stock_area_Where">
	    <!-- 最后库存code=库存的部门编码 -->
		<if test="endStockOrgCode != null and endStockOrgCode !=''">	
			<![CDATA[ and ws.ORG_CODE  = #{endStockOrgCode, jdbcType=VARCHAR}]]>
		</if>
		<!-- 库区-->
		<if test="goodsAreaCode != null and goodsAreaCode !=''">	
			<![CDATA[ AND ws.GOODS_AREA_CODE = #{goodsAreaCode, jdbcType=VARCHAR}]]>
		</if>
	</sql>

	<select id="selectWaybillToArrangeCountByCondition"
		parameterType="com.deppon.foss.module.pickup.predeliver.api.shared.dto.WaybillToArrangeDto"
		resultType="Long">
		select count(1) from
	<![CDATA[
		/*模块：接送货-排单-查询待排运单数量*/		
		(select waybill.waybill_no
		  from pkp.t_srv_waybill waybill
		 inner join pkp.t_srv_actual_freight actual_freight
			on waybill.waybill_no = actual_freight.waybill_no
			 left join pkp.t_srv_arrivesheet arrivesheet
			on waybill.waybill_no = arrivesheet.waybill_no
				   and arrivesheet.active = #{arrivesheetActive,jdbcType=VARCHAR}
				   and arrivesheet.status = #{arrivesheetStatus,jdbcType=VARCHAR}
				   and arrivesheet.destroyed = #{arrivesheetDestroyed,jdbcType=VARCHAR}
		   left join tfr.T_OPT_WAYBILL_STOCK ws on waybill.waybill_no = ws.waybill_no
		   	       and ws.org_code = #{endStockOrgCode, jdbcType=VARCHAR}
				   and ws.GOODS_AREA_CODE = #{goodsAreaCode, jdbcType=VARCHAR}
	]]>
		<include refid="selectWaybillToArrangeByCondition_where" />
    <include refid="select_NotReceiveMethodTmp_where" />
		union
	<![CDATA[	
		select 
		/*模块：接送货-排单-查询待排运单数量*/		
		waybill.waybill_no
		  from pkp.t_srv_waybill waybill
		 inner join pkp.t_srv_actual_freight actual_freight
			on waybill.waybill_no = actual_freight.waybill_no
			 left join pkp.t_srv_arrivesheet arrivesheet
			on waybill.waybill_no = arrivesheet.waybill_no
				   and arrivesheet.active = #{arrivesheetActive,jdbcType=VARCHAR}
				   and arrivesheet.status = #{arrivesheetStatus,jdbcType=VARCHAR}
				   and arrivesheet.destroyed = #{arrivesheetDestroyed,jdbcType=VARCHAR}
		   left join tfr.T_OPT_WAYBILL_STOCK ws on waybill.waybill_no = ws.waybill_no
		   	       and ws.org_code = #{endStockOrgCode, jdbcType=VARCHAR}
				   and ws.GOODS_AREA_CODE = #{goodsAreaCode, jdbcType=VARCHAR}
	]]>			   
		<include refid="selectWaybillToArrangeByendStockCode_where" />
    <include refid="select_NotReceiveMethodTmp_where" />)
	</select>

	<!-- 到库位查询 -->
	<select id="selectWaybillToArrangeCountByStoringCondition"
		parameterType="com.deppon.foss.module.pickup.predeliver.api.shared.dto.WaybillToArrangeDto"
		resultType="Long">
	<![CDATA[
		/*模块：接送货-排单-查询待排运单数量*/		
		select count(1) 
		  from pkp.t_srv_waybill waybill
		 inner join pkp.t_srv_actual_freight actual_freight
			on waybill.waybill_no = actual_freight.waybill_no
			 left join pkp.t_srv_arrivesheet arrivesheet
			on waybill.waybill_no = arrivesheet.waybill_no
				   and arrivesheet.active = #{arrivesheetActive,jdbcType=VARCHAR}
				   and arrivesheet.status = #{arrivesheetStatus,jdbcType=VARCHAR}
				   and arrivesheet.destroyed = #{arrivesheetDestroyed,jdbcType=VARCHAR}
		   inner join tfr.T_OPT_WAYBILL_STOCK ws on waybill.waybill_no = ws.waybill_no
		   	       and ws.org_code = #{endStockOrgCode, jdbcType=VARCHAR}
				   and ws.GOODS_AREA_CODE = #{goodsAreaCode, jdbcType=VARCHAR}
				   and ws.position_qty > 0
	]]>
			<include refid="selectWaybillToArrangeByCondition_where" />
      <include refid="select_NotReceiveMethodTmp_where" />
	</select>

	<sql id="selectWaybillToArrangeByCondition_where">
		<where>
		<![CDATA[
				actual_freight.arrive_goods_qty > actual_freight.arrange_goods_qty
			   and waybill.last_load_org_code = ]]>
			<choose>
				<when test="orgCode != null and orgCode != ''">
					#{orgCode,jdbcType=VARCHAR}
				</when>
				<otherwise>
					''
				</otherwise>
			</choose>
			<if test="productCode!=null and productCode!='' ">
				and waybill.product_Code not in(#{productCode,jdbcType=VARCHAR})
			</if>
			<!-- 过滤运输性质为快递的运单 -->
			<if test="isExpress!=null and isExpress!=''">
				<!-- <![CDATA[ and waybill.IS_EXPRESS != #{isExpress,jdbcType=VARCHAR}]]>-->
				<![CDATA[ and waybill.product_Code not in('PACKAGE','RCP','EPEP','DEAP')]]>
			</if>
			<![CDATA[
			   and waybill.active = #{waybillActive,jdbcType=VARCHAR}
			   and actual_freight.end_stock_org_code in (#{endStockOrgCode, jdbcType=VARCHAR},#{orgCode,jdbcType=VARCHAR})
			   and not exists (select 1
					  from pkp.t_srv_waybillrfc rfc
					 where rfc.waybill_no = waybill.waybill_no
					   and rfc.status not in(#{rfcStatus,jdbcType=VARCHAR},#{rfcStatusAuditDeny,jdbcType=VARCHAR},#{rfcStatusAcceptDeny,jdbcType=VARCHAR}))
			   and not exists (select 1
			          from pkp.t_srv_waybill_sign_result re
			         where re.waybill_no = waybill.waybill_no
			           and re.active = 'Y'
			           and re.sign_status = 'SIGN_STATUS_ALL')
		]]>
			<choose>
				<when test="arrayWaybillNos !=null and arrayWaybillNos.length > 0">
						and waybill.waybill_no in
					<foreach collection="arrayWaybillNos" index="index" item="waybillNo" open="(" separator="," close=")">
						#{waybillNo}
					</foreach>
				</when>
				
				<otherwise>
					<if test=" deliverTime != null  and deliverTime != ''  ">
					<![CDATA[and #{deliverTime,jdbcType=TIMESTAMP} >= actual_freight.deliver_date]]>
					</if>
					<if test="districtList!= null and districtList.size>0">
					and waybill.receive_customer_dist_code in
					<foreach collection="districtList" open="(" close=")" separator=","
						item="receiveCustomerDistCode">
						<if test="receiveCustomerDistCode!=null and receiveCustomerDistCode != ''">
		        	      <![CDATA[	#{receiveCustomerDistCode,jdbcType=VARCHAR} ]]>
		                </if>
					</foreach>
		    		</if>
		    		
		    		<if test="deliverRegionList!= null and deliverRegionList.size>0">
					and actual_freight.deliver_region_code in
					<foreach collection="deliverRegionList" open="(" close=")" separator=","
						item="deliverRegionCode">
						<if test="deliverRegionCode!=null and deliverRegionCode != ''">
		        	      <![CDATA[	#{deliverRegionCode,jdbcType=VARCHAR} ]]>
		                </if>
					</foreach>
		    		</if>
					
					<if test="receiveMethod!=null and receiveMethod!='' ">
						and waybill.receive_method like '%' || #{receiveMethod, jdbcType=VARCHAR} || '%'
					</if>
					<if test="isNotification!=null and isNotification!='' and isNotification == 'SUCCESS'">
						and actual_freight.notification_result = #{isNotification, jdbcType=VARCHAR} 
					</if>
					<if test="isNotification == 'FAILURE' ">
						and actual_freight.notification_result != 'SUCCESS' 
					</if>
					<if test="receiveCustomerName!=null and receiveCustomerName!='' ">
						and waybill.receive_customer_contact = #{receiveCustomerName, jdbcType=VARCHAR}
					</if>
					<if test="receiveCustomerPhone!=null and receiveCustomerPhone!='' ">
						and ( waybill.receive_customer_phone =
						#{receiveCustomerPhone,
						jdbcType=VARCHAR} or
						waybill.RECEIVE_CUSTOMER_MOBILEPHONE =
						#{receiveCustomerPhone,
						jdbcType=VARCHAR} )
					</if>
					<if test=" arriveTimeBegin != null  and arriveTimeBegin != ''  ">
					<![CDATA[and actual_freight.arrive_time >= #{arriveTimeBegin,jdbcType=TIMESTAMP}]]>
					</if>
					<if test=" arriveTimeEnd != null  and arriveTimeEnd != ''  ">
					<![CDATA[and actual_freight.arrive_time <= #{arriveTimeEnd,jdbcType=TIMESTAMP}]]>
					</if>
				</otherwise>
			</choose>
		</where>
	</sql>

	<sql id="selectWaybillToArrangeByendStockCode_where">
		<where>
		<![CDATA[
			   waybill.goods_qty_total > actual_freight.arrange_goods_qty
			   and actual_freight.arrive_goods_qty <= actual_freight.arrange_goods_qty
			   and waybill.last_load_org_code = ]]>
			<choose>
				<when test="orgCode != null and orgCode != ''">
					#{orgCode,jdbcType=VARCHAR}
				</when>
				<otherwise>
					''
				</otherwise>
			</choose>
			<if test="productCode!=null and productCode!='' ">
				and waybill.product_Code not in(#{productCode,jdbcType=VARCHAR})
			</if>
			<!--过滤运输性质为快递的运单-->
			<if test="isExpress!=null and isExpress!=''">
				<!-- <![CDATA[ and waybill.IS_EXPRESS != #{isExpress,jdbcType=VARCHAR}]]>-->
				<![CDATA[ and waybill.product_Code not in('PACKAGE','RCP','EPEP','DEAP')]]>
			</if>
			<![CDATA[
			   and actual_freight.end_stock_org_code in (#{endStockOrgCode, jdbcType=VARCHAR},#{orgCode,jdbcType=VARCHAR})
			   and waybill.active = #{waybillActive,jdbcType=VARCHAR}
			   and actual_freight.ever_telnotice_success = #{waybillActive,jdbcType=VARCHAR}
			   and actual_freight.notification_time >= sysdate - 7
			   and not exists (select 1
					  from pkp.t_srv_waybillrfc rfc
					 where rfc.waybill_no = waybill.waybill_no
					   and rfc.status not in(#{rfcStatus,jdbcType=VARCHAR},#{rfcStatusAuditDeny,jdbcType=VARCHAR},#{rfcStatusAcceptDeny,jdbcType=VARCHAR}))
			   and not exists (select 1
			          from pkp.t_srv_waybill_sign_result re
			         where re.waybill_no = waybill.waybill_no
			           and re.active = 'Y'
			           and re.sign_status = 'SIGN_STATUS_ALL')
		]]>
			<choose>
				<when test="arrayWaybillNos !=null and arrayWaybillNos.length > 0">
						and waybill.waybill_no in
					<foreach collection="arrayWaybillNos" index="index" item="waybillNo" open="(" separator="," close=")">
						#{waybillNo}
					</foreach>
				</when>
				<otherwise>
					<if test=" deliverTime != null  and deliverTime != ''  ">
					<![CDATA[and #{deliverTime,jdbcType=TIMESTAMP} >= actual_freight.deliver_date]]>
					</if>
					<if test="districtList!= null and districtList.size>0">
					and waybill.receive_customer_dist_code in
					<foreach collection="districtList" open="(" close=")" separator=","
						item="receiveCustomerDistCode">
						<if test="receiveCustomerDistCode!=null and receiveCustomerDistCode != ''">
		        	      <![CDATA[	#{receiveCustomerDistCode,jdbcType=VARCHAR} ]]>
		                </if>
					</foreach>
		    		</if>
					<if test="deliverRegionList!= null and deliverRegionList.size>0">
					and actual_freight.deliver_region_code in
					<foreach collection="deliverRegionList" open="(" close=")" separator=","
						item="deliverRegionCode">
						<if test="deliverRegionCode!=null and deliverRegionCode != ''">
		        	      <![CDATA[	#{deliverRegionCode,jdbcType=VARCHAR} ]]>
		                </if>
					</foreach>
		    		</if>
					<if test="receiveMethod!=null and receiveMethod!='' ">
						and waybill.receive_method like '%' || #{receiveMethod, jdbcType=VARCHAR} || '%'
					</if>
					<if test="isNotification!=null and isNotification!='' and isNotification == 'SUCCESS'">
						and actual_freight.notification_result = #{isNotification, jdbcType=VARCHAR} 
					</if>
					<if test="isNotification == 'FAILURE' ">
						<![CDATA[and actual_freight.notification_result <> 'SUCCESS' ]]>
					</if>
					<if test="receiveCustomerName!=null and receiveCustomerName!='' ">
						and waybill.receive_customer_contact =
						#{receiveCustomerName,
						jdbcType=VARCHAR}
					</if>
					<if test="receiveCustomerPhone!=null and receiveCustomerPhone!='' ">
						and ( waybill.receive_customer_phone =
						#{receiveCustomerPhone,
						jdbcType=VARCHAR} or
						waybill.RECEIVE_CUSTOMER_MOBILEPHONE =
						#{receiveCustomerPhone,
						jdbcType=VARCHAR} )
					</if>
				</otherwise>
			</choose>
		</where>
	</sql>

	<select id="selectByCondition" resultMap="BaseResultMap"
		parameterType="com.deppon.foss.module.pickup.predeliver.api.shared.dto.WaybillToArrangeDto">
		select
		<include refid="Base_Column_List" />
		from PKP.T_SRV_DELIVERBILL_DETAIL
		<include refid="selectByCondition_where" />
	</select>

	<sql id="selectByCondition_where">
		<where>
			<choose>
				<when test="waybillNo != null and waybillNo != ''">
					waybill_no = #{waybillNo, jdbcType=VARCHAR}
				</when>
				<otherwise>
					waybill_no = ''
				</otherwise>
			</choose>
			<if test="tSrvDeliverbillId!=null and tSrvDeliverbillId!='' ">
				and T_SRV_DELIVERBILL_ID =
				#{tSrvDeliverbillId,jdbcType=VARCHAR}
			</if>
		</where>
	</sql>

	<select id="queryDeliverbillDetailByMap" resultMap="BaseResultMap"
			parameterType="java.util.Map">
		select
		<include refid="Base_Column_List" />
		from PKP.T_SRV_DELIVERBILL_DETAIL
		<where>
			waybill_no = #{waybillNo, jdbcType=VARCHAR}
			and T_SRV_DELIVERBILL_ID =
				#{deliverbillId,jdbcType=VARCHAR}
		</where>
	</select>

	<select id="selectWaybillArrangedFlag" resultType="Long"
		parameterType="com.deppon.foss.module.pickup.predeliver.api.shared.dto.DeliverbillDetailDto">
	<![CDATA[select 
			/*模块：接送货-排单-检验运单是否在指定部门安排过派送*/				
			count(1)
		  from pkp.t_srv_deliverbill db
		 inner join pkp.t_srv_deliverbill_detail dd
			on db.id = dd.t_srv_deliverbill_id
		 inner join pkp.t_srv_actual_freight af
			on dd.waybill_no = af.waybill_no
		 where db.status <> #{status,jdbcType=VARCHAR}
		   and af.end_stock_org_code = #{endStockOrgCode,jdbcType=VARCHAR}
		   and dd.waybill_no = #{waybillNo,jdbcType=VARCHAR}
	]]>
	</select>

	<select id="selectWaybillDeliveryListByWaybillNo"
		parameterType="com.deppon.foss.module.pickup.predeliver.api.shared.dto.WaybillDeliveryDto"
		resultMap="WaybillDeliveryResultMap">
		select 
		/*模块：接送货-排单-查询运单派送信息列表，用于运单轨迹查询*/	
		db.operate_org_code,
		db.operate_time,
		db.operator,
		db.driver_code,
		dbd.arrange_goods_qty,
		db.deliverbill_no,
		db.vehicle_no,
		db.driver_code,
		db.driver_name,
		db.STATUS,
		db.IS_EXPRESS
		from
		pkp.t_srv_deliverbill_detail dbd
		inner join pkp.t_srv_deliverbill db
		on dbd.t_srv_deliverbill_id = db.id
		where 
		dbd.waybill_no = #{waybillNo,jdbcType=VARCHAR}
		<![CDATA[and dbd.arrivesheet_no <> 'N/A']]>
		and db.status in
		<foreach collection="deliverbillStatusList" item="status"
			index="index" open="(" separator="," close=")">
			#{status,
			jdbcType=VARCHAR}
		</foreach>
		order by db.OPERATE_TIME
	</select>

	<select id="selectUnnotifiedDeliverbillDetailList"
		parameterType="com.deppon.foss.module.pickup.predeliver.api.shared.dto.DeliverbillDetailDto"
		resultMap="UnnotifiedDeliverbillDetailMap">
		select 
		/*模块：接送货-排单-查询未通知客户的派送单明细列表*/
		dbd.waybill_no, dbd.consignee, dbd.consignee_contact,
		dbd.pay_amount/100 as pay_amount
		from pkp.t_srv_deliverbill_detail dbd
		where
		dbd.t_srv_deliverbill_id = #{tSrvDeliverbillId,jdbcType=VARCHAR}
		and
		dbd.is_already_contact = #{isAlreadyContact,jdbcType=VARCHAR}
	</select>

	<select id="selectArrivesheetQtyInconsistentListByDeliverbillId"
		parameterType="com.deppon.foss.module.pickup.predeliver.api.shared.dto.DeliverbillDetailDto"
		resultMap="QtyInconsistentDeliverbillDetailMap">
		select 
		/*模块：接送货-排单-查询排单件数与到达联件数不一致的派送单明细列表*/
		dbd.waybill_no, dbd.arrange_goods_qty,
		ash.arrive_sheet_goods_qty
		from pkp.t_srv_deliverbill_detail dbd
		inner
		join pkp.t_srv_arrivesheet ash
		on dbd.waybill_no = ash.waybill_no
		where
		dbd.t_srv_deliverbill_id = #{tSrvDeliverbillId,jdbcType=VARCHAR}
		and
		ash.active = #{arriveSheetDto.active,jdbcType=VARCHAR}
		and
		ash.destroyed = #{arriveSheetDto.destroyed,jdbcType=VARCHAR}
		and
		ash.status = #{arriveSheetDto.status,jdbcType=VARCHAR}
		and 
		<![CDATA[dbd.arrange_goods_qty <> ash.arrive_sheet_goods_qty]]>
	</select>

	<select id="selectInStockQtyInconsistentListByDeliverbillId"
		parameterType="java.lang.String" resultMap="QtyInconsistentDeliverbillDetailMap">
		select 
		/*模块：接送货-排单-查询排单件数与库存件数不一致的派送单明细列表*/
		dbd.waybill_no,
		dbd.arrange_goods_qty,
		nvl(ws.stock_goods_qty, 0)
		as stock_goods_qty
		from pkp.t_srv_deliverbill_detail dbd
		inner join
		pkp.t_srv_actual_freight af
		on dbd.waybill_no = af.waybill_no
		left join
		tfr.t_opt_waybill_stock ws
		on dbd.waybill_no = ws.waybill_no
		and
		ws.org_code = af.end_stock_org_code
		where dbd.t_srv_deliverbill_id =
		#{tSrvDeliverbillId,jdbcType=VARCHAR}
		and 
		<![CDATA[dbd.arrange_goods_qty <> ws.stock_goods_qty]]>
	</select>

	<delete id="deleteByPrimaryKey" parameterType="java.lang.String">
		delete from
		PKP.T_SRV_DELIVERBILL_DETAIL
		where ID = #{id,jdbcType=VARCHAR}
	</delete>

	<insert id="insert"
		parameterType="com.deppon.foss.module.pickup.predeliver.api.shared.domain.DeliverbillDetailEntity">
		insert into PKP.T_SRV_DELIVERBILL_DETAIL (ID,
		T_SRV_DELIVERBILL_ID,
		SERIAL_NO,
		ARRIVESHEET_NO, WAYBILL_NO,
		ARRANGE_STATUS,
		PRE_ARRANGE_GOODS_QTY, ARRANGE_GOODS_QTY, WEIGHT,
		DIMENSION, GOODS_NAME, WAYBILL_GOODS_QTY,
		TRANSPORT_TYPE, ARRIVE_TIME,
		CONSIGNEE,
		CONSIGNEE_CONTACT, CONSIGNEE_ADDRESS, DELIVER_REQUIRE,
		GOODS_STATUS, IS_EXCEPTION, IS_ALREADY_CONTACT,
		ESTIMATED_DELIVER_TIME, IS_NEED_INVOICE, PAYMENT_TYPE,
		NOTES,
		DELIVER_TYPE, GOODS_VOLUME_TOTAL,
		PAY_AMOUNT, FAST_WAYBILL_FLAG,
		CURRENCY_CODE,
		GOODS_PACKAGE, RETURN_BILL_TYPE)
		values
		(#{id,jdbcType=VARCHAR}, #{tSrvDeliverbillId,jdbcType=VARCHAR},
		#{serialNo,jdbcType=DECIMAL},
		#{arrivesheetNo,jdbcType=VARCHAR},
		#{waybillNo,jdbcType=VARCHAR}, #{arrangeStatus,jdbcType=VARCHAR},
		#{preArrangeGoodsQty,jdbcType=DECIMAL},
		#{arrangeGoodsQty,jdbcType=DECIMAL}, #{weight,jdbcType=DECIMAL},
		#{dimension,jdbcType=VARCHAR}, #{goodsName,jdbcType=VARCHAR},
		#{waybillGoodsQty,jdbcType=DECIMAL},
		#{transportType,jdbcType=VARCHAR}, #{arriveTime,jdbcType=TIMESTAMP},
		#{consignee,jdbcType=VARCHAR},
		#{consigneeContact,jdbcType=VARCHAR},
		#{consigneeAddress,jdbcType=VARCHAR},
		#{deliverRequire,jdbcType=VARCHAR},
		#{goodsStatus,jdbcType=VARCHAR},
		#{isException,jdbcType=CHAR}, #{isAlreadyContact,jdbcType=CHAR},
		#{estimatedDeliverTime,jdbcType=TIMESTAMP},
		#{isNeedInvoice,jdbcType=CHAR}, #{paymentType,jdbcType=VARCHAR},
		#{notes,jdbcType=VARCHAR}, #{deliverType,jdbcType=VARCHAR},
		#{goodsVolumeTotal,jdbcType=DECIMAL},
		#{payAmount,jdbcType=DECIMAL}*100,
		#{fastWaybillFlag,jdbcType=DECIMAL},
		#{currencyCode,jdbcType=VARCHAR},
		#{goodsPackage,jdbcType=VARCHAR},
		#{returnBillType,jdbcType=VARCHAR})
	</insert>
	<insert id="insertSelective"
		parameterType="com.deppon.foss.module.pickup.predeliver.api.shared.domain.DeliverbillDetailEntity">
		insert into PKP.T_SRV_DELIVERBILL_DETAIL
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				ID,
			</if>
			<if test="tSrvDeliverbillId != null">
				T_SRV_DELIVERBILL_ID,
			</if>
			<if test="serialNo != null">
				SERIAL_NO,
			</if>
			<if test="arrivesheetNo != null">
				ARRIVESHEET_NO,
			</if>
			<if test="waybillNo != null">
				WAYBILL_NO,
			</if>
			<if test="arrangeStatus != null">
				ARRANGE_STATUS,
			</if>
			<if test="preArrangeGoodsQty != null">
				PRE_ARRANGE_GOODS_QTY,
			</if>
			<if test="arrangeGoodsQty != null">
				ARRANGE_GOODS_QTY,
			</if>
			<if test="weight != null">
				WEIGHT,
			</if>
			<if test="dimension != null">
				DIMENSION,
			</if>
			<if test="goodsName != null">
				GOODS_NAME,
			</if>
			<if test="waybillGoodsQty != null">
				WAYBILL_GOODS_QTY,
			</if>
			<if test="transportType != null">
				TRANSPORT_TYPE,
			</if>
			<if test="arriveTime != null">
				ARRIVE_TIME,
			</if>
			<if test="consignee != null">
				CONSIGNEE,
			</if>
			<if test="consigneeContact != null">
				CONSIGNEE_CONTACT,
			</if>
			<if test="consigneeAddress != null">
				CONSIGNEE_ADDRESS,
			</if>
			<if test="deliverRequire != null">
				DELIVER_REQUIRE,
			</if>
			<if test="goodsStatus != null">
				GOODS_STATUS,
			</if>
			<if test="isException != null">
				IS_EXCEPTION,
			</if>
			<if test="isAlreadyContact != null">
				IS_ALREADY_CONTACT,
			</if>
			<if test="estimatedDeliverTime != null">
				ESTIMATED_DELIVER_TIME,
			</if>
			<if test="isNeedInvoice != null">
				IS_NEED_INVOICE,
			</if>
			<if test="paymentType != null">
				PAYMENT_TYPE,
			</if>
			<if test="notes != null">
				NOTES,
			</if>
			<if test="deliverType != null">
				DELIVER_TYPE,
			</if>
			<if test="goodsVolumeTotal != null">
				GOODS_VOLUME_TOTAL,
			</if>
			<if test="payAmount != null">
				PAY_AMOUNT,
			</if>
			<if test="fastWaybillFlag != null">
				FAST_WAYBILL_FLAG,
			</if>
			<if test="currencyCode != null">
				CURRENCY_CODE,
			</if>
			<if test="goodsPackage != null">
				GOODS_PACKAGE,
			</if>
			<if test="returnBillType != null">
				RETURN_BILL_TYPE,
			</if>
			<if test="createDate != null" >
				CREATE_TIME,
			</if>
			<if test="modifyDate != null" >
				MODIFY_TIME,
			</if>
			<if test="deliverDate != null" >
				DELIVER_DATE,
			</if>
			<if test="cashTime != null" >
				CASH_TIME,
			</if>
			<if test="srvDeliverHandoverbillId != null and srvDeliverHandoverbillId !='' " >
				T_SRV_DELIVER_HANDOVERBILL_ID,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=VARCHAR},
			</if>
			<if test="tSrvDeliverbillId != null">
				#{tSrvDeliverbillId,jdbcType=VARCHAR},
			</if>
			<if test="serialNo != null">
				#{serialNo,jdbcType=DECIMAL},
			</if>
			<if test="arrivesheetNo != null">
				#{arrivesheetNo,jdbcType=VARCHAR},
			</if>
			<if test="waybillNo != null">
				#{waybillNo,jdbcType=VARCHAR},
			</if>
			<if test="arrangeStatus != null">
				#{arrangeStatus,jdbcType=VARCHAR},
			</if>
			<if test="preArrangeGoodsQty != null">
				#{preArrangeGoodsQty,jdbcType=DECIMAL},
			</if>
			<if test="arrangeGoodsQty != null">
				#{arrangeGoodsQty,jdbcType=DECIMAL},
			</if>
			<if test="weight != null">
				#{weight,jdbcType=DECIMAL},
			</if>
			<if test="dimension != null">
				#{dimension,jdbcType=VARCHAR},
			</if>
			<if test="goodsName != null">
				#{goodsName,jdbcType=VARCHAR},
			</if>
			<if test="waybillGoodsQty != null">
				#{waybillGoodsQty,jdbcType=DECIMAL},
			</if>
			<if test="transportType != null">
				#{transportType,jdbcType=VARCHAR},
			</if>
			<if test="arriveTime != null">
				#{arriveTime,jdbcType=TIMESTAMP},
			</if>
			<if test="consignee != null">
				#{consignee,jdbcType=VARCHAR},
			</if>
			<if test="consigneeContact != null">
				#{consigneeContact,jdbcType=VARCHAR},
			</if>
			<if test="consigneeAddress != null">
				#{consigneeAddress,jdbcType=VARCHAR},
			</if>
			<if test="deliverRequire != null">
				#{deliverRequire,jdbcType=VARCHAR},
			</if>
			<if test="goodsStatus != null">
				#{goodsStatus,jdbcType=VARCHAR},
			</if>
			<if test="isException != null">
				#{isException,jdbcType=CHAR},
			</if>
			<if test="isAlreadyContact != null">
				#{isAlreadyContact,jdbcType=CHAR},
			</if>
			<if test="estimatedDeliverTime != null">
				#{estimatedDeliverTime,jdbcType=TIMESTAMP},
			</if>
			<if test="isNeedInvoice != null">
				#{isNeedInvoice,jdbcType=CHAR},
			</if>
			<if test="paymentType != null">
				#{paymentType,jdbcType=VARCHAR},
			</if>
			<if test="notes != null">
				#{notes,jdbcType=VARCHAR},
			</if>
			<if test="deliverType != null">
				#{deliverType,jdbcType=VARCHAR},
			</if>
			<if test="goodsVolumeTotal != null">
				#{goodsVolumeTotal,jdbcType=DECIMAL},
			</if>
			<if test="payAmount != null">
				#{payAmount,jdbcType=DECIMAL}*100,
			</if>
			<if test="fastWaybillFlag != null">
				#{fastWaybillFlag,jdbcType=DECIMAL},
			</if>
			<if test="currencyCode != null">
				#{currencyCode,jdbcType=VARCHAR},
			</if>
			<if test="goodsPackage != null">
				#{goodsPackage,jdbcType=VARCHAR},
			</if>
			<if test="returnBillType != null">
				#{returnBillType,jdbcType=VARCHAR},
			</if>
			<if test="createDate != null" >
				#{createDate,jdbcType=TIMESTAMP},
			</if>
			<if test="modifyDate != null" >
				#{modifyDate,jdbcType=TIMESTAMP},
			</if>
			<if test="deliverDate != null" >
				#{deliverDate,jdbcType=TIMESTAMP},
			</if>
			<if test="cashTime != null" >
				#{cashTime,jdbcType=TIMESTAMP},
			</if>
			<if test="srvDeliverHandoverbillId != null and srvDeliverHandoverbillId !='' " >
				#{srvDeliverHandoverbillId,jdbcType=VARCHAR},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective"
		parameterType="com.deppon.foss.module.pickup.predeliver.api.shared.domain.DeliverbillDetailEntity">
		update PKP.T_SRV_DELIVERBILL_DETAIL
		<set>
			<if test="tSrvDeliverbillId != null">
				T_SRV_DELIVERBILL_ID =
				#{tSrvDeliverbillId,jdbcType=VARCHAR},
			</if>
			<if test="serialNo != null">
				SERIAL_NO = #{serialNo,jdbcType=DECIMAL},
			</if>
			<if test="arrivesheetNo != null">
				ARRIVESHEET_NO = #{arrivesheetNo,jdbcType=VARCHAR},
			</if>
			<if test="waybillNo != null">
				WAYBILL_NO = #{waybillNo,jdbcType=VARCHAR},
			</if>
			<if test="arrangeStatus != null">
				ARRANGE_STATUS = #{arrangeStatus,jdbcType=VARCHAR},
			</if>
			<if test="preArrangeGoodsQty != null">
				PRE_ARRANGE_GOODS_QTY =
				#{preArrangeGoodsQty,jdbcType=DECIMAL},
			</if>
			<if test="arrangeGoodsQty != null">
				ARRANGE_GOODS_QTY = #{arrangeGoodsQty,jdbcType=DECIMAL},
			</if>
			<if test="weight != null">
				WEIGHT = #{weight,jdbcType=DECIMAL},
			</if>
			<if test="dimension != null">
				DIMENSION = #{dimension,jdbcType=VARCHAR},
			</if>
			<if test="goodsName != null">
				GOODS_NAME = #{goodsName,jdbcType=VARCHAR},
			</if>
			<if test="waybillGoodsQty != null">
				WAYBILL_GOODS_QTY = #{waybillGoodsQty,jdbcType=DECIMAL},
			</if>
			<if test="transportType != null">
				TRANSPORT_TYPE = #{transportType,jdbcType=VARCHAR},
			</if>
			<if test="arriveTime != null">
				ARRIVE_TIME = #{arriveTime,jdbcType=TIMESTAMP},
			</if>
			<if test="consignee != null">
				CONSIGNEE = #{consignee,jdbcType=VARCHAR},
			</if>
			<if test="consigneeContact != null">
				CONSIGNEE_CONTACT =
				#{consigneeContact,jdbcType=VARCHAR},
			</if>
			<if test="consigneeAddress != null">
				CONSIGNEE_ADDRESS =
				#{consigneeAddress,jdbcType=VARCHAR},
			</if>
			<if test="deliverRequire != null">
				DELIVER_REQUIRE = #{deliverRequire,jdbcType=VARCHAR},
			</if>
			<if test="goodsStatus != null">
				GOODS_STATUS = #{goodsStatus,jdbcType=VARCHAR},
			</if>
			<if test="isException != null">
				IS_EXCEPTION = #{isException,jdbcType=CHAR},
			</if>
			<if test="isAlreadyContact != null">
				IS_ALREADY_CONTACT = #{isAlreadyContact,jdbcType=CHAR},
			</if>
			<if test="estimatedDeliverTime != null">
				ESTIMATED_DELIVER_TIME =
				#{estimatedDeliverTime,jdbcType=TIMESTAMP},
			</if>
			<if test="isNeedInvoice != null">
				IS_NEED_INVOICE = #{isNeedInvoice,jdbcType=CHAR},
			</if>
			<if test="paymentType != null">
				PAYMENT_TYPE = #{paymentType,jdbcType=VARCHAR},
			</if>
			<if test="notes != null">
				NOTES = #{notes,jdbcType=VARCHAR},
			</if>
			<if test="deliverType != null">
				DELIVER_TYPE = #{deliverType,jdbcType=VARCHAR},
			</if>
			<if test="goodsVolumeTotal != null">
				GOODS_VOLUME_TOTAL =
				#{goodsVolumeTotal,jdbcType=DECIMAL},
			</if>
			<if test="payAmount != null">
				PAY_AMOUNT = #{payAmount,jdbcType=DECIMAL}*100,
			</if>
			<if test="fastWaybillFlag != null">
				FAST_WAYBILL_FLAG = #{fastWaybillFlag,jdbcType=DECIMAL},
			</if>
			<if test="currencyCode != null">
				CURRENCY_CODE = #{currencyCode,jdbcType=VARCHAR},
			</if>
			<if test="goodsPackage != null">
				GOODS_PACKAGE = #{goodsPackage,jdbcType=VARCHAR},
			</if>
			<if test="returnBillType != null">
				RETURN_BILL_TYPE = #{returnBillType,jdbcType=VARCHAR},
			</if>
			<if test="createDate != null" >
				CREATE_TIME=#{createDate,jdbcType=TIMESTAMP},
			</if>
			<if test="modifyDate != null" >
				MODIFY_TIME=#{modifyDate,jdbcType=TIMESTAMP},
			</if>
			<if test="deliverDate != null" >
				DELIVER_DATE = #{deliverDate,jdbcType=TIMESTAMP},
			</if>
			<if test="srvDeliverHandoverbillId != null and srvDeliverHandoverbillId !='' " >
				T_SRV_DELIVER_HANDOVERBILL_ID = #{srvDeliverHandoverbillId,jdbcType=VARCHAR},
			</if>
			<if test="recommendedDeliveryTime != null and recommendedDeliveryTime !=''">
				RECOMMENDED_DELIVERY_TIME = #{recommendedDeliveryTime,jdbcType=VARCHAR},
			</if>
			<if test="dispatchSortSerialNo != null and dispatchSortSerialNo !=''">
				DISPATCH_SORT_SERIAL_NO = #{dispatchSortSerialNo,jdbcType=DECIMAL},
			</if>
		</set>
		where ID = #{id,jdbcType=VARCHAR}
	</update>
	<update id="updateByPrimaryKey"
		parameterType="com.deppon.foss.module.pickup.predeliver.api.shared.domain.DeliverbillDetailEntity">
		update PKP.T_SRV_DELIVERBILL_DETAIL
		set
		T_SRV_DELIVERBILL_ID = #{tSrvDeliverbillId,jdbcType=VARCHAR},
		SERIAL_NO = #{serialNo,jdbcType=DECIMAL},
		ARRIVESHEET_NO =
		#{arrivesheetNo,jdbcType=VARCHAR},
		WAYBILL_NO =
		#{waybillNo,jdbcType=VARCHAR},
		ARRANGE_STATUS =
		#{arrangeStatus,jdbcType=VARCHAR},
		PRE_ARRANGE_GOODS_QTY =
		#{preArrangeGoodsQty,jdbcType=DECIMAL},
		ARRANGE_GOODS_QTY =
		#{arrangeGoodsQty,jdbcType=DECIMAL},
		WEIGHT =
		#{weight,jdbcType=DECIMAL},
		DIMENSION = #{dimension,jdbcType=VARCHAR},
		GOODS_NAME = #{goodsName,jdbcType=VARCHAR},
		WAYBILL_GOODS_QTY =
		#{waybillGoodsQty,jdbcType=DECIMAL},
		TRANSPORT_TYPE =
		#{transportType,jdbcType=VARCHAR},
		ARRIVE_TIME =
		#{arriveTime,jdbcType=TIMESTAMP},
		CONSIGNEE =
		#{consignee,jdbcType=VARCHAR},
		CONSIGNEE_CONTACT =
		#{consigneeContact,jdbcType=VARCHAR},
		CONSIGNEE_ADDRESS =
		#{consigneeAddress,jdbcType=VARCHAR},
		DELIVER_REQUIRE =
		#{deliverRequire,jdbcType=VARCHAR},
		GOODS_STATUS =
		#{goodsStatus,jdbcType=VARCHAR},
		IS_EXCEPTION =
		#{isException,jdbcType=CHAR},
		IS_ALREADY_CONTACT =
		#{isAlreadyContact,jdbcType=CHAR},
		ESTIMATED_DELIVER_TIME =
		#{estimatedDeliverTime,jdbcType=TIMESTAMP},
		IS_NEED_INVOICE =
		#{isNeedInvoice,jdbcType=CHAR},
		PAYMENT_TYPE =
		#{paymentType,jdbcType=VARCHAR},
		NOTES = #{notes,jdbcType=VARCHAR},
		DELIVER_TYPE = #{deliverType,jdbcType=VARCHAR},
		GOODS_VOLUME_TOTAL =
		#{goodsVolumeTotal,jdbcType=DECIMAL},
		PAY_AMOUNT =
		#{payAmount,jdbcType=DECIMAL}*100,
		FAST_WAYBILL_FLAG =
		#{fastWaybillFlag,jdbcType=DECIMAL},
		CURRENCY_CODE =
		#{currencyCode,jdbcType=VARCHAR},
		GOODS_PACKAGE =
		#{goodsPackage,jdbcType=VARCHAR},
		RETURN_BILL_TYPE =
		#{returnBillType,jdbcType=VARCHAR}
		where ID = #{id,jdbcType=VARCHAR}
	</update>

	<update id="updateSerialNos"
		parameterType="com.deppon.foss.module.pickup.predeliver.api.shared.domain.DeliverbillDetailEntity">
	<![CDATA[update PKP.T_SRV_DELIVERBILL_DETAIL
		set SERIAL_NO = SERIAL_NO - 1,
		    MODIFY_TIME = sysdate
		where SERIAL_NO > #{serialNo,jdbcType=DECIMAL}
		and T_SRV_DELIVERBILL_ID = #{tSrvDeliverbillId,jdbcType=VARCHAR}
	]]>
	</update>

	<update id="upDetailByWaybillNo"
		parameterType="com.deppon.foss.module.pickup.predeliver.api.shared.domain.DeliverbillDetailEntity">
		update PKP.T_SRV_DELIVERBILL_DETAIL
		<set>
			<if test="tSrvDeliverbillId != null">
				T_SRV_DELIVERBILL_ID =
				#{tSrvDeliverbillId,jdbcType=VARCHAR},
			</if>
			<if test="serialNo != null">
				SERIAL_NO = #{serialNo,jdbcType=DECIMAL},
			</if>
			<if test="arrivesheetNo != null">
				ARRIVESHEET_NO = #{arrivesheetNo,jdbcType=VARCHAR},
			</if>
			<if test="arrangeStatus != null">
				ARRANGE_STATUS = #{arrangeStatus,jdbcType=VARCHAR},
			</if>
			<if test="preArrangeGoodsQty != null">
				PRE_ARRANGE_GOODS_QTY =
				#{preArrangeGoodsQty,jdbcType=DECIMAL},
			</if>
			<if test="arrangeGoodsQty != null">
				ARRANGE_GOODS_QTY = #{arrangeGoodsQty,jdbcType=DECIMAL},
			</if>
			<if test="weight != null">
				WEIGHT = #{weight,jdbcType=DECIMAL},
			</if>
			<if test="dimension != null">
				DIMENSION = #{dimension,jdbcType=VARCHAR},
			</if>
			<if test="goodsName != null">
				GOODS_NAME = #{goodsName,jdbcType=VARCHAR},
			</if>
			<if test="waybillGoodsQty != null">
				WAYBILL_GOODS_QTY = #{waybillGoodsQty,jdbcType=DECIMAL},
			</if>
			<if test="transportType != null">
				TRANSPORT_TYPE = #{transportType,jdbcType=VARCHAR},
			</if>
			<if test="arriveTime != null">
				ARRIVE_TIME = #{arriveTime,jdbcType=TIMESTAMP},
			</if>
			<if test="consignee != null">
				CONSIGNEE = #{consignee,jdbcType=VARCHAR},
			</if>
			<if test="consigneeContact != null">
				CONSIGNEE_CONTACT =
				#{consigneeContact,jdbcType=VARCHAR},
			</if>
			<if test="consigneeAddress != null">
				CONSIGNEE_ADDRESS =
				#{consigneeAddress,jdbcType=VARCHAR},
			</if>
			<if test="deliverRequire != null">
				DELIVER_REQUIRE = #{deliverRequire,jdbcType=VARCHAR},
			</if>
			<if test="goodsStatus != null">
				GOODS_STATUS = #{goodsStatus,jdbcType=VARCHAR},
			</if>
			<if test="isException != null">
				IS_EXCEPTION = #{isException,jdbcType=CHAR},
			</if>
			<if test="isAlreadyContact != null">
				IS_ALREADY_CONTACT = #{isAlreadyContact,jdbcType=CHAR},
			</if>
			<if test="estimatedDeliverTime != null">
				ESTIMATED_DELIVER_TIME =
				#{estimatedDeliverTime,jdbcType=TIMESTAMP},
			</if>
			<if test="isNeedInvoice != null">
				IS_NEED_INVOICE = #{isNeedInvoice,jdbcType=CHAR},
			</if>
			<if test="paymentType != null">
				PAYMENT_TYPE = #{paymentType,jdbcType=VARCHAR},
			</if>
			<if test="notes != null">
				NOTES = #{notes,jdbcType=VARCHAR},
			</if>
			<if test="deliverType != null">
				DELIVER_TYPE = #{deliverType,jdbcType=VARCHAR},
			</if>
			<if test="goodsVolumeTotal != null">
				GOODS_VOLUME_TOTAL =
				#{goodsVolumeTotal,jdbcType=DECIMAL},
			</if>
			<if test="payAmount != null">
				PAY_AMOUNT = #{payAmount,jdbcType=DECIMAL}*100,
			</if>
			<if test="fastWaybillFlag != null">
				FAST_WAYBILL_FLAG = #{fastWaybillFlag,jdbcType=DECIMAL},
			</if>
			<if test="currencyCode != null">
				CURRENCY_CODE = #{currencyCode,jdbcType=VARCHAR},
			</if>
			<if test="goodsPackage != null">
				GOODS_PACKAGE = #{goodsPackage,jdbcType=VARCHAR},
			</if>
			<if test="returnBillType != null">
				RETURN_BILL_TYPE = #{returnBillType,jdbcType=VARCHAR},
			</if>
			<if test="isCollect != null">
				IS_COLLECT = #{isCollect,jdbcType=VARCHAR},
			</if>
		</set>
		where WAYBILL_NO = #{waybillNo,jdbcType=VARCHAR}
	</update>
	
	<!-- 根据条件查询派送单 到达联编号 -->
	<select id="queryDeliverbillDetailBy"
		resultType="com.deppon.foss.module.pickup.predeliver.api.shared.dto.DeliverbillDetailDto">
		select
		/*模块：接送货-排单-查询派送单明细内 到达联编号*/
		B.ARRIVESHEET_NO as arrivesheetNo
		from pkp.T_SRV_DELIVERBILL A
		inner join
		pkp.t_srv_deliverbill_detail B
		ON A.ID =
		B.T_SRV_DELIVERBILL_ID
		<where>
			<if test="isExpress != null and isExpress != '' and isExpress =='YES'">
			<![CDATA[and a.OPERATE_TIME > TRUNC(SYSDATE)]]>
			</if>
			<if test="isExpress == null or isExpress == ''">
			<![CDATA[and a.OPERATE_TIME > SYSDATE-4]]>
			</if>
			<if test="vehicleNo != null and vehicleNo != '' ">
				AND A.VEHICLE_NO = #{vehicleNo,jdbcType=VARCHAR}
			</if>
			<if test="driverCode != null and driverCode != '' ">
				AND A.DRIVER_CODE = #{driverCode,jdbcType=VARCHAR}
			</if>
			<if test="status != null and status != '' ">
				AND A.STATUS = #{status,jdbcType=VARCHAR}
			</if>
		</where>
	</select>

	<!-- 根据司机编号、车牌号查询送货任务 -->
	<select id="queryDeliverNoByDriverCode"
		parameterType="com.deppon.foss.module.pickup.pda.api.shared.dto.PdaDeliverTaskConditionDto"
		resultType="java.lang.String">
		select 
		/*模块：接送货-排单-根据司机、车牌号 查询派送单ID*/
		distinct a.deliverbill_no
		from pkp.t_srv_deliverbill a
		inner
		join
		pkp.t_srv_deliverbill_detail b
		on a.ID = b.t_srv_deliverbill_id
		<where>
			<if test="driverCode != null and driverCode != '' ">
				and a.driver_code = #{driverCode,jdbcType=VARCHAR}
			</if>
			<if test="vehicleNo != null and vehicleNo != '' ">
				and a.vehicle_no = #{vehicleNo,jdbcType=VARCHAR}
			</if>
			<if test="deliverbillStatus != null and deliverbillStatus != '' ">
				and a.status = #{deliverbillStatus,jdbcType=VARCHAR}
			</if>
		</where>
	</select>
	<!-- 根据派送单ID查询派送单任务明细 -->
	<select id="queryDeliverDetailByDriverCode"
		parameterType="com.deppon.foss.module.pickup.pda.api.shared.dto.PdaDeliverTaskConditionDto"
		resultType="com.deppon.foss.module.pickup.pda.api.shared.dto.PdaDeliverTaskDetailsDto">
		select
		/*模块：接送货-排单-根据司机工号、车牌号 查询司机送货任务*/
		a.deliverbill_no as deliverbillNo,
		b.waybill_no as waybillNo,
		a.submit_time as submitTime,
		c.receive_customer_contact as
		receiveCustomerName,
		c.receive_customer_mobilephone as
		receiveCustomerMobilephone,
		c.receive_customer_address as
		receiveCustomerAddress,
		c.to_pay_amount as toPayAmount,
		c.cod_amount as
		codAmount,
		b.goods_package as goodsPackage,
		b.weight as weight,
		c.precious_goods as preciousGoods,
		b.notes as notes,
		d.arrivesheet_no
		as
		arriveSheetNo,
		d.arrive_sheet_goods_qty as arriveSheetGoodsQty
		from
		pkp.t_srv_deliverbill a
		inner join pkp.t_srv_deliverbill_detail b
		on
		a.ID = b.t_srv_deliverbill_id
		<if test="deliverbillNo != null and deliverbillNo != '' ">
			and a.deliverbill_no = #{deliverbillNo,jdbcType=VARCHAR}
		</if>
		inner join pkp.t_srv_waybill c
		on b.waybill_no = c.waybill_no
		inner
		join
		pkp.t_srv_arrivesheet d
		on b.waybill_no = d.waybill_no and d.destroyed = 'N'
		<if test="arriveSheetActive != null and arriveSheetActive != '' ">
			and d.active= #{arriveSheetActive,jdbcType=VARCHAR}
			AND c.active =#{arriveSheetActive,jdbcType=VARCHAR}
		</if>
		<if test="arriveSheetStatus != null and arriveSheetStatus != '' ">
			and d.status = #{arriveSheetStatus,jdbcType=VARCHAR}
		</if>
	</select>
	
	
	<!-- 根据到达联编号，派送单状态查询送货任务 -->
	<select id="queryDeliverNoByArriveSheetNo"
		parameterType="com.deppon.foss.module.pickup.pda.api.shared.dto.PdaDeliverTaskConditionDto"
		resultType="java.lang.String">
		select 
		/*模块：接送货-排单-根据到达联编号，派送单状态查询派送单编号*/
		distinct a.deliverbill_no
		from pkp.t_srv_deliverbill a
		inner
		join
		pkp.t_srv_deliverbill_detail b
		on a.ID = b.t_srv_deliverbill_id
		<where>
			<choose>
				<when test="arrivesheetNo != null and arrivesheetNo != ''">
					b.ARRIVESHEET_NO = #{arrivesheetNo, jdbcType=VARCHAR}
				</when>
				<otherwise>
					b.ARRIVESHEET_NO = ''
				</otherwise>
			</choose>
			<if test="status != null and status != '' ">
				<![CDATA[ and a.status <> #{status,jdbcType=VARCHAR} ]]>
			</if>
		</where>
	</select>
	<resultMap id="pdaDeliverTaskDtoMap" type="com.deppon.foss.module.pickup.pda.api.shared.dto.PdaDeliverTaskDto">
		<result column="DELIVERBILL_NO" property="deliverbillNo" jdbcType="VARCHAR" />
		<collection property="deliverTaskDetailsDtos" resultMap="pdaDeliverTaskDetailsDtoMap" />
	</resultMap>
	<resultMap id="pdaDeliverTaskDetailsDtoMap" type="com.deppon.foss.module.pickup.pda.api.shared.dto.PdaDeliverTaskDetailsDto">
		<result column="WAYBILL_NO" property="waybillNo" jdbcType="VARCHAR" />
		<result column="submit_time" property="submitTime" jdbcType="TIMESTAMP" /><!--  派送日期 -->
		<result column="RECEIVE_CUSTOMER_CONTACT" property="receiveCustomerName" jdbcType="VARCHAR" /><!--客户姓名 收货（运单） -->
		<result column="receive_customer_mobilephone" property="receiveCustomerMobilephone" jdbcType="VARCHAR" /><!--联系电话 （运单）收货客户手机 -->
		<result column="receive_customer_address" property="receiveCustomerAddress" jdbcType="VARCHAR" /><!-- 客户地址 （运单）收货具体地址 -->
		<result column="receive_customer_phone" property="receiveCustomerPhone" jdbcType="VARCHAR" /><!--联系电话 （运单）收货客户电话 座机   add by 309603  -->
		<result column="to_pay_amount" property="toPayAmount" jdbcType="DECIMAL" /><!--到付金额 （运单） -->
		<result column="cod_amount" property="codAmount" jdbcType="DECIMAL" /><!--代收货款 （运单） -->
		<result column="goods_package" property="goodsPackage" jdbcType="VARCHAR"/> <!--包装 (派送单明细) -->
		<result column="weight" property="weight" jdbcType="DECIMAL"/><!--重量（单位：千克）（派送单明细） -->
		<result column="goods_volume_total" property="volume" jdbcType="DECIMAL"/><!--体积（派送单明细） -->
		<result column="precious_goods" property="preciousGoods" jdbcType="VARCHAR" /><!--是否贵重物品 （运单） -->
		<result column="notes" property="notes" jdbcType="VARCHAR" /><!--备注 (派送单明细) -->
		<result column="arrive_sheet_goods_qty" property="arriveSheetGoodsQty" jdbcType="DECIMAL" /><!-- 件数 （到达联件数）-->
		<result column="arrivesheet_no" property="arriveSheetNo" jdbcType="VARCHAR" /><!--到达联编号 -->
		<result column="IS_COLLECT" property="isCollect" jdbcType="CHAR" />
		<result column="RECEIVE_CUSTOMER_ADDRESS_NOTE" property="receiveCustomerAddressNote" jdbcType="VARCHAR" />
		<result column="BILL_TIME" property="billTime" jdbcType="TIMESTAMP" /> <!-- 开单时间-->
		<result column="receive_org_code" property="receiveOrgCode" jdbcType="VARCHAR" /> <!-- 出发部门Code-->
		<result column="customer_pickup_org_code" property="customerPickupOrgCode" jdbcType="VARCHAR" /> <!-- 到达部门Code-->
		<result column="product_code" property="productCode" jdbcType="VARCHAR" /> <!-- 产品Code-->
		<result column="GOODS_QTY_TOTAL" property="goodsQtyTotal" jdbcType="INTEGER" /> <!-- 运单总件数 add by 242921-->
		<result column="COMPLAIN_STATUS" property="complainStatus" jdbcType="CHAR" />
		<result column="RETURN_BILL_TYPE" property="returnBillType" jdbcType="VARCHAR" /> <!-- 出发部门Code-->
		<result column="DELIVERY_CUSTOMER_PROV_CODE" property="deliveryCustomerProvCode" jdbcType="VARCHAR" /> <!-- 返单类别-->
		<result column="DELIVERY_CUSTOMER_CITY_CODE" property="deliveryCustomerCityCode" jdbcType="VARCHAR" /> <!-- 发货城市编码-->
		<result column="DELIVERY_CUSTOMER_DIST_CODE" property="deliveryCustomerDistCode" jdbcType="VARCHAR" /> <!-- 发货区县编码-->
		<result column="DELIVERY_CUSTOMER_ADDRESS" property="deliveryCustomerAddress" jdbcType="VARCHAR" /> <!-- 发货地址-->
		<result column="DELIVERY_CUSTOMER_ADDRESS_NOTE" property="deliveryCustomerAddressNote" jdbcType="VARCHAR" /> <!-- 发货地址备注-->
		<result column="ARRIVE_CENTRALIZED_SETTLEMENT" property="arriveCentralizedSettlement" jdbcType="VARCHAR" /> <!--239284到达客户是否统一结算-->
		<result column="cash_time" property="cashTime" jdbcType="VARCHAR" /> <!--规定兑现时间-->
		<collection property="serialNum" resultMap="serialnosMap"/>
	</resultMap>
	<resultMap id="serialnosMap" type="java.lang.String">
		<result column="serial_no" property="serialNum" jdbcType="VARCHAR" />
	</resultMap>
		<!-- 根据司机编号、车牌号查询送货任务   -->
	<select id="queryPdaDeliverTaskDtoByCondition" parameterType="com.deppon.foss.module.pickup.pda.api.shared.dto.PdaDeliverTaskConditionDto"
		resultMap="pdaDeliverTaskDtoMap">
		select 
			   /*模块：接送货-排单-根据司机、车牌号、派送单状态查询派送单号*/
			   a.deliverbill_no,
		       b.waybill_no,
		       a.submit_time,
		       c.RECEIVE_CUSTOMER_CONTACT,
		       c.receive_customer_mobilephone,
		       DECODE(F.RECEIVE_CUSTOMER_ADDRESS_NOTE,NULL,C.RECEIVE_CUSTOMER_ADDRESS,C.RECEIVE_CUSTOMER_ADDRESS || '(' || F.RECEIVE_CUSTOMER_ADDRESS_NOTE || ')') RECEIVE_CUSTOMER_ADDRESS,
		       c.to_pay_amount,
		       c.cod_amount,
		       b.goods_package,
		       b.weight,
		       b.goods_volume_total,
		       c.precious_goods,
		       b.notes,
		       d.arrivesheet_no,
		       d.arrive_sheet_goods_qty,
		       s.serial_no,
		       f.is_collect,
		       f.RECEIVE_CUSTOMER_ADDRESS_NOTE,
		       c.bill_time,
		       c.receive_org_code,
		       c.customer_pickup_org_code,
		       c.product_code,
		       c.GOODS_QTY_TOTAL,
		       c.receive_customer_phone,
		       C.RETURN_BILL_TYPE RETURN_BILL_TYPE,
		       C.DELIVERY_CUSTOMER_PROV_CODE DELIVERY_CUSTOMER_PROV_CODE,
		       C.DELIVERY_CUSTOMER_CITY_CODE DELIVERY_CUSTOMER_CITY_CODE,
		       C.DELIVERY_CUSTOMER_DIST_CODE DELIVERY_CUSTOMER_DIST_CODE,
		       C.DELIVERY_CUSTOMER_ADDRESS DELIVERY_CUSTOMER_ADDRESS,
		       F.DELIVERY_CUSTOMER_ADDRESS_NOTE DELIVERY_CUSTOMER_ADDRESS_NOTE,
		       f.COMPLAIN_STATUS,
		       f.cash_time,
			   f.ARRIVE_CENTRALIZED_SETTLEMENT
		  from pkp.t_srv_deliverbill a
		 inner join pkp.t_srv_deliverbill_detail b
		    on a.ID = b.t_srv_deliverbill_id
		 inner join pkp.t_srv_waybill c
		    on b.waybill_no = c.waybill_no
   		 inner join pkp.t_srv_actual_freight f
		 	on f.waybill_no  = c.waybill_no
		 inner join pkp.t_srv_arrivesheet d
		    on b.waybill_no = d.waybill_no
		    and b.arrivesheet_no = d.arrivesheet_no
		inner join (SELECT *
               FROM (SELECT tt.deliverbill_no as deliverbill_no,
                            tt.id as id,
                            ROW_NUMBER() OVER(PARTITION BY tt.deliverbill_no ORDER BY tt.load_start_time DESC) AS maxId
                       FROM tfr.t_opt_load_task tt
                      where  <![CDATA[ tt.task_state <> #{taskState,jdbcType=VARCHAR} ]]> )
              WHERE maxId = 1) ed
		    on a.deliverbill_no = ed.deliverbill_no
		 inner join tfr.t_opt_load_waybill_detail w
		    on ed.id = w.load_task_id and w.waybill_no = b.waybill_no
		 inner join tfr.t_opt_load_serialno s 
		    on s.load_waybill_detail_id = w.id and s.be_loaded ='Y'
 		<where>
	 		<if test="userType != null and userType != '' and userType =='LTL'">
	 			<![CDATA[ AND  a.OPERATE_TIME > SYSDATE-4]]>
			</if>
			<if test="userType != null and userType != '' and userType =='EXPRESS'">
				and a.OPERATE_TIME > TRUNC(SYSDATE)
			</if>
			<if test="userType == null or userType =='' ">
				<if test="deliverbillStatusList != null">
					and a.OPERATE_TIME > TRUNC(SYSDATE)
					and a.status in
					<foreach collection="deliverbillStatusList" index="index" item="status" open="(" separator="," close=")">
						#{status,jdbcType=VARCHAR}
					</foreach>
				</if>
			</if>
	 		<include refid="selectPdaDeliverTaskByCondition_where"/>
			<if test="deliverbillStatus != null and deliverbillStatus != '' ">
					and a.status = #{deliverbillStatus,jdbcType=VARCHAR}
			</if>
		</where>
	</select>
	<resultMap id="pdaDeliverHandTaskDtoMap" type="com.deppon.foss.module.pickup.pda.api.shared.dto.PdaDeliverHandTaskDto">
		<result column="DELIVERBILL_NO" property="deliverbillNo" jdbcType="VARCHAR" />
		<collection property="deliverHandTaskDetailsDtos" resultMap="pdaDeliverHandTaskDetailsDtoMap"/>
	</resultMap>
	<resultMap id="pdaDeliverHandTaskDetailsDtoMap" type="com.deppon.foss.module.pickup.pda.api.shared.dto.PdaDeliverHandTaskDetailsDto">
		<result column="WAYBILL_NO" property="waybillNo" jdbcType="VARCHAR" /><!--  运单号 -->
		<!--<result column="arrivesheet_no" property="arriveSheetNo" jdbcType="VARCHAR" />--><!--到达联编号 -->
		<!--<result column="submit_time" property="submitTime" jdbcType="TIMESTAMP" />--><!--  派送日期 -->
		<result column="goods_qty_total" property="goodsQtyTotal" jdbcType="INTEGER"/><!--  派送单总件数 -->
		<result column="arrive_sheet_goods_qty" property="arriveSheetGoodsQty" jdbcType="INTEGER" /><!-- 件数 （到达联件数）-->
		<result column="weight" property="weight" jdbcType="DECIMAL"/><!--重量（单位：千克）（派送单明细） -->
		<result column="goods_volume_total" property="volume" jdbcType="DECIMAL"/><!--体积（派送单明细） -->
		<!--<result column="precious_goods" property="preciousGoods" jdbcType="VARCHAR" />--><!--是否贵重物品 （运单） -->
		<!-- <result column="product_code" property="productCode" jdbcType="VARCHAR" /> 产品Code -->
		<result column="product_name" property="productName" jdbcType="VARCHAR" /> <!-- 运输性质Name-->
		<result column="scan_qty" property="scanQty" jdbcType="INTEGER"/><!-- 已扫件数-->
		<!--<result column="load_qty" property="loadQty" jdbcType="INTEGER"/>--><!-- 已装车件数-->
		<result column="scan_state" property="scanState" jdbcType="VARCHAR"/><!-- 扫描状态 -->
		<collection property="serialNum" resultMap="serialnosMap"/>
	</resultMap>
	<!-- 根据司机编号、车牌号查询快递派送交接任务   -->
	<select id="queryPdaDeliverHandTaskDtoByCondition" parameterType="com.deppon.foss.module.pickup.pda.api.shared.dto.PdaDeliverHandTaskConditionDto"
		resultMap="pdaDeliverHandTaskDtoMap">
		select 
			t4.deliverbill_no,t4.goods_qty_total,t4.waybill_no,t4.weight,t4.goods_volume_total,
       		t4.arrive_sheet_goods_qty,t4.product_name,t4.scan_qty,t4.scan_state,t5.serial_no
		 from (
			select 
			   /*模块：接送货-二程接驳-根据司机、车牌号查询派送交接任务明细*/
			   a.deliverbill_no,
			   a.goods_qty_total,
		       b.waybill_no,
			 /*a.submit_time,*/
		       b.weight,
		       b.goods_volume_total,
		     /*c.precious_goods,*/
			 /*d.arrivesheet_no,*/
		       d.arrive_sheet_goods_qty,
		       c.product_code,
		       p.name product_name,
		       nvl(w.scan_qty,0) as scan_qty,
           	 /*nvl(w.load_qty,0) as load_qty,*/
           	   s.scan_state
		  	from pkp.t_srv_deliverbill a
		  	inner join pkp.t_srv_deliverbill_detail b on a.ID = b.t_srv_deliverbill_id
		  	inner join pkp.t_srv_waybill c on b.waybill_no = c.waybill_no
		  	inner join pkp.t_srv_arrivesheet d on b.waybill_no = d.waybill_no and b.arrivesheet_no = d.arrivesheet_no 
		  	left join pkp.t_srv_product p on c.product_code = p.code 
			left join tfr.t_opt_load_task t on t.task_no = #{taskNo,jdbcType=VARCHAR} 
		 	left join tfr.t_opt_load_waybill_detail w 
		    	on t.id = w.load_task_id and b.waybill_no = w.waybill_no and w.load_qty>0 
		 	left join tfr.t_opt_load_serialno s 
		    	on s.load_waybill_detail_id = w.id and s.be_loaded ='Y' 
		 	and s.goods_state not in 
		 	<foreach collection="goodsStates" index="index" item="state" open="(" separator="," close=")">
				#{state,jdbcType=VARCHAR}
		 	</foreach>
 			<where>
 				and a.OPERATE_TIME > TRUNC(SYSDATE)
				<if test="deliverbillStatus != null">
					and a.status in
					<foreach collection="deliverbillStatus" index="index" item="status" open="(" separator="," close=")">
						#{status,jdbcType=VARCHAR}
					</foreach>
				</if>
	 			<if test="arriveSheetDestroyed != null and arriveSheetDestroyed != '' ">
					and d.destroyed= #{arriveSheetDestroyed,jdbcType=VARCHAR}
				</if>
				<if test="arriveSheetActive != null and arriveSheetActive != '' ">
					and d.active= #{arriveSheetActive,jdbcType=VARCHAR}
					AND c.active =#{arriveSheetActive,jdbcType=VARCHAR}
				</if>
				<if test="arriveSheetStatus != null and arriveSheetStatus != '' ">
					and d.status = #{arriveSheetStatus,jdbcType=VARCHAR}
				</if>
	    		<if test="driverCode != null and driverCode != '' ">
					and a.driver_code = #{driverCode,jdbcType=VARCHAR}
				</if>
				<if test="vehicleNo != null and vehicleNo != '' ">
					and a.vehicle_no = #{vehicleNo,jdbcType=VARCHAR}
				</if>
			</where>
			) t4 
			left join (
				select t1.deliverbill_no,t2.waybill_no,t3.serial_no from tfr.t_opt_load_task t1
        		join tfr.t_opt_load_waybill_detail t2 on t1.id = t2.load_task_id
        		join tfr.t_opt_load_serialno t3 on t2.id = t3.load_waybill_detail_id 
			)  t5 
			on t4.deliverbill_no = t5.deliverbill_no and t4.waybill_no = t5.waybill_no
	</select>
	<sql id="selectPdaDeliverTaskByCondition_where">
			and s.goods_state not in 
			<foreach collection="goodsStates" index="index" item="state" open="(" separator="," close=")">
					#{state,jdbcType=VARCHAR}
			</foreach>
			<if test="arriveSheetDestroyed != null and arriveSheetDestroyed != '' ">
				and d.destroyed= #{arriveSheetDestroyed,jdbcType=VARCHAR}
			</if>
			<if test="arriveSheetActive != null and arriveSheetActive != '' ">
				and d.active= #{arriveSheetActive,jdbcType=VARCHAR}
				AND c.active =#{arriveSheetActive,jdbcType=VARCHAR}
			</if>
			<if test="arriveSheetStatus != null and arriveSheetStatus != '' ">
				and d.status = #{arriveSheetStatus,jdbcType=VARCHAR}
			</if>
	    	<if test="driverCode != null and driverCode != '' ">
				and a.driver_code = #{driverCode,jdbcType=VARCHAR}
			</if>
			<if test="vehicleNo != null and vehicleNo != '' ">
				and a.vehicle_no = #{vehicleNo,jdbcType=VARCHAR}
			</if>
	</sql>
	<select id="selectByDeliverbillNos" resultType="com.deppon.foss.module.pickup.predeliver.api.shared.dto.DeliverbillDetailDto"
		parameterType="java.util.List">
		select
		    /*模块：接送货-排单-查询排单明细*/
		    deliver.deliverbill_no deliverbillNo,/*派送单号*/
		    deliver.submit_time operateTime,/*排单时间*/
		    dbd.waybill_no waybillNo,/*单号*/
		    dbd.arrivesheet_no arrivesheetNo,/*到达联编号*/
		    dbd.WAYBILL_GOODS_QTY waybillGoodsQty,/*开单件数*/
		    ws.STOCK_GOODS_QTY stockGoodsQty, /*库存件数*/
		    dbd.ARRANGE_GOODS_QTY arrangeGoodsQty, /*排单件数*/
		    dbd.WEIGHT weight,/*排单重量*/
		    dbd.goods_volume_total volumeTotal,/*体积*/
		    dbd.goods_package goodsPackage,/*包装*/
		    dbd.TRANSPORT_TYPE transportType,/*运输性质*/
		    dbd.CONSIGNEE consignee, /*收货人*/
		    dbd.CONSIGNEE_CONTACT consigneeContact,/*联系方式*/
		    dbd.CONSIGNEE_ADDRESS consigneeAddress,/*送货地址*/
		    dbd.deliver_type deliverType,/*提货方式*/
		    sr.sign_time signTime,/*签收时间*/ 
		    deliver.vehicle_no vehicleNo,/*车牌号*/
		    deliver.deliver_type sendCarType,/*派车类型*/
		    deliver.driver_code driverCode,/*司机工号*/
		    deliver.driver_name driverName /*司机姓名*/
		    from PKP.T_SRV_DELIVERBILL deliver 
		    inner join  PKP.T_SRV_DELIVERBILL_DETAIL dbd
		    on deliver.id = dbd.t_srv_deliverbill_id
		    left join
		    pkp.t_srv_actual_freight af
		    on dbd.waybill_no = af.waybill_no
		    left join pkp.t_srv_waybill_sign_result sr
		    on dbd.waybill_no = sr.waybill_no
		    and sr.active='Y'
		    left join
		    tfr.T_OPT_WAYBILL_STOCK ws
		    on dbd.waybill_no = ws.waybill_no
		    and
	    	af.END_STOCK_ORG_CODE = ws.org_code
	    	<if test="loadTimeBegin != null or loadTimeEnd !=null">
	    	  	left join  TFR.T_OPT_LOAD_TASK TT on deliver.DELIVERBILL_NO = TT.DELIVERBILL_NO
		<![CDATA[AND TT.TASK_STATE <>'CANCELED']]>
	    	</if>
			<include refid="selectExportByCondition_where" />
			order by deliver.deliverbill_no
	</select>
	<sql id="selectExportByCondition_where">
		<where>
			<![CDATA[ and nvl(deliver.CREATE_TYPE,' ') <> 'Y' ]]>
			<choose>
				<when test="waybillNo!=null and waybillNo!='' ">
					<![CDATA[and dbd.waybill_no = #{waybillNo, jdbcType=VARCHAR}]]>
				</when>
				<when test="deliverbillNo!=null and deliverbillNo!='' ">
					<![CDATA[and deliver.deliverbill_no = #{deliverbillNo, jdbcType=VARCHAR}]]>
				</when>
				<otherwise>
					<if test="vehicleNo!=null and vehicleNo!='' ">
						and deliver.vehicle_no = #{vehicleNo, jdbcType=VARCHAR}
					</if>
					<if test="driverName!=null and driverName!='' ">
						and deliver.driver_name = #{driverName, jdbcType=VARCHAR}
					</if>
					<if test="status!=null and status!='' ">
						and deliver.status = #{status, jdbcType=VARCHAR}
					</if>
					<if test="driverCode!=null and driverCode!='' ">
						and deliver.DRIVER_CODE = #{driverCode, jdbcType=VARCHAR}
					</if>
					<if test="deliverType!=null and deliverType!='' ">
						and deliver.DELIVER_TYPE = #{deliverType, jdbcType=VARCHAR}
					</if>
					<if test="submitTimeBegin!=null">	
					<![CDATA[and deliver.submit_time >= #{submitTimeBegin, jdbcType=TIMESTAMP}]]>
					</if>
					<if test="submitTimeEnd!=null">	
					<![CDATA[and deliver.submit_time < #{submitTimeEnd, jdbcType=TIMESTAMP}]]>
					</if>
					<if test="createTimeBegin!=null">	
					<![CDATA[and deliver.operate_time >= #{createTimeBegin, jdbcType=TIMESTAMP}]]>
					</if>
					<if test="createTimeEnd!=null">	
					<![CDATA[and deliver.operate_time < #{createTimeEnd, jdbcType=TIMESTAMP}]]>
					</if>
						<if test="loadTimeBegin != null">
			   			<![CDATA[ AND TT.LOAD_END_TIME >= #{loadTimeBegin,jdbcType=TIMESTAMP}]]>
					</if>
					<if test="loadTimeEnd != null">
			   			<![CDATA[ AND TT.LOAD_END_TIME < #{loadTimeEnd,jdbcType=TIMESTAMP}]]>
					</if>
				</otherwise>
			</choose>
			
					<if test="orgCode!=null and orgCode!='' ">
						<![CDATA[and (deliver.create_org_code = #{orgCode, jdbcType=VARCHAR}]]>
					</if>
					<if test="transferCenter!=null and transferCenter!='' ">
						<![CDATA[or deliver.transfer_center = #{transferCenter, jdbcType=VARCHAR}]]>
					</if>
					<if test="orgCode!=null and orgCode!=''  ">
						)
					</if>
		</where>
	</sql>
	
	<select id="selectDetailListByDeliverbillId" resultMap="BaseResultMap"
		parameterType="java.lang.String">
		select 
		/*模块：快递100派送轨迹推送，根据派送单号查询派送单详情列表*/ 
		<include refid="Base_Column_List" />
		 FROM PKP.T_SRV_DELIVERBILL_DETAIL
		 WHERE T_SRV_DELIVERBILL_ID = #{deliverbillId,jdbcType=VARCHAR}
	</select>

	<select id="selectDetailListByWaybillNo" resultMap="BaseResultMap"
		parameterType="java.lang.String">
		select 
		/*根据送单号查询派送单详情列表*/ 
		<include refid="Base_Column_List" />
		 FROM PKP.T_SRV_DELIVERBILL_DETAIL
		 WHERE  WAYBILL_NO = #{waybillId,jdbcType=VARCHAR}
	</select>
  
  <!-- 拖动排序更新序号.239284 -->
  <update id="updateDetailSerialNoByDrag" parameterType="java.util.Map">
		update PKP.T_SRV_DELIVERBILL_DETAIL set SERIAL_NO = #{serialNo, jdbcType=INTEGER}
    where ID = #{detailId ,jdbcType=VARCHAR}
  </update>

</mapper>