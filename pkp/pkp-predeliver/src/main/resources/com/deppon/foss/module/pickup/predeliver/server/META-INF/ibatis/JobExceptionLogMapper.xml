<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.deppon.foss.module.pickup.predeliver.api.shared.domain.JobExceptionLogMapper" >
  <resultMap id="BaseResultMap" type="com.deppon.foss.module.pickup.predeliver.api.shared.domain.JobExceptionLogEntity" >
    <id column="ID" property="id" jdbcType="VARCHAR" />
    <result column="JOB_NAME" property="jobName" jdbcType="VARCHAR" />
    <result column="ERROR_ID" property="errorId" jdbcType="VARCHAR" />
    <result column="ERROR_CODE" property="errorCode" jdbcType="VARCHAR" />
    <result column="ERROR_MSG" property="errorMsg" jdbcType="VARCHAR" />
    <result column="CREATE_TIME" property="createTime" jdbcType="DATE" />
  </resultMap>
  <sql id="Base_Column_List" >
    ID, JOB_NAME, ERROR_ID, ERROR_CODE, ERROR_MSG, CREATE_TIME
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from PKP.T_SRV_JOB_EXCEPTION_LOG
    where ID = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from PKP.T_SRV_JOB_EXCEPTION_LOG
    where ID = #{id,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.deppon.foss.module.pickup.predeliver.api.shared.domain.JobExceptionLogEntity" >
    insert into PKP.T_SRV_JOB_EXCEPTION_LOG (ID, JOB_NAME, ERROR_ID, 
      ERROR_CODE, ERROR_MSG, CREATE_TIME
      )
    values (#{id,jdbcType=VARCHAR}, #{jobName,jdbcType=VARCHAR}, #{errorId,jdbcType=VARCHAR}, 
      #{errorCode,jdbcType=VARCHAR}, #{errorMsg,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.deppon.foss.module.pickup.predeliver.api.shared.domain.JobExceptionLogEntity" >
    insert into PKP.T_SRV_JOB_EXCEPTION_LOG
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        ID,
      </if>
      <if test="jobName != null" >
        JOB_NAME,
      </if>
      <if test="errorId != null" >
        ERROR_ID,
      </if>
      <if test="errorCode != null" >
        ERROR_CODE,
      </if>
      <if test="errorMsg != null" >
        ERROR_MSG,
      </if>
      <if test="createTime != null" >
        CREATE_TIME,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="jobName != null" >
        #{jobName,jdbcType=VARCHAR},
      </if>
      <if test="errorId != null" >
        #{errorId,jdbcType=VARCHAR},
      </if>
      <if test="errorCode != null" >
        #{errorCode,jdbcType=VARCHAR},
      </if>
      <if test="errorMsg != null" >
        #{errorMsg,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.deppon.foss.module.pickup.predeliver.api.shared.domain.JobExceptionLogEntity" >
    update PKP.T_SRV_JOB_EXCEPTION_LOG
    <set >
      <if test="jobName != null" >
        JOB_NAME = #{jobName,jdbcType=VARCHAR},
      </if>
      <if test="errorId != null" >
        ERROR_ID = #{errorId,jdbcType=VARCHAR},
      </if>
      <if test="errorCode != null" >
        ERROR_CODE = #{errorCode,jdbcType=VARCHAR},
      </if>
      <if test="errorMsg != null" >
        ERROR_MSG = #{errorMsg,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where ID = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.deppon.foss.module.pickup.predeliver.api.shared.domain.JobExceptionLogEntity" >
    update PKP.T_SRV_JOB_EXCEPTION_LOG
    set JOB_NAME = #{jobName,jdbcType=VARCHAR},
      ERROR_ID = #{errorId,jdbcType=VARCHAR},
      ERROR_CODE = #{errorCode,jdbcType=VARCHAR},
      ERROR_MSG = #{errorMsg,jdbcType=VARCHAR},
      CREATE_TIME = #{createTime,jdbcType=TIMESTAMP}
    where ID = #{id,jdbcType=VARCHAR}
  </update>
</mapper>