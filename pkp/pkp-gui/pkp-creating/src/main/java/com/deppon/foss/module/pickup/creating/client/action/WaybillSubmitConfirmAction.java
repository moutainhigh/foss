/**
 *  initial comments.
 */
/*******************************************************************************
 * Copyright 2013 PKP
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *    http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * PROJECT NAME	: pkp-creating
 * 
 * FILE PATH        	: src/main/java/com/deppon/foss/module/pickup/creating/client/action/WaybillSubmitConfirmAction.java
 * 
 * FILE NAME        	: WaybillSubmitConfirmAction.java
 * 
 * AUTHOR			: FOSS接送货系统开发组
 * 
 * HOME PAGE		: http://www.deppon.com
 * 
 * COPYRIGHT		: Copyright (c) 2012  Deppon All Rights Reserved.
 ******************************************************************************/
package com.deppon.foss.module.pickup.creating.client.action;

import java.awt.event.ActionEvent;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.UndeclaredThrowableException;
import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.print.PrintException;
import javax.swing.JDialog;
import javax.swing.JOptionPane;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.exception.ExceptionUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.deppon.foss.base.util.define.NumberConstants;
import com.deppon.foss.framework.client.commons.i18n.I18nManager;
import com.deppon.foss.framework.client.commons.i18n.II18n;
import com.deppon.foss.framework.client.component.dataaccess.GuiceContextFactroy;
import com.deppon.foss.framework.client.component.remote.DefaultRemoteServiceFactory;
import com.deppon.foss.framework.client.core.application.IApplication;
import com.deppon.foss.framework.client.core.context.SessionContext;
import com.deppon.foss.framework.client.core.workbench.EditorConfig;
import com.deppon.foss.framework.client.core.workbench.IEditor;
import com.deppon.foss.framework.client.widget.msgbox.MsgBox;
import com.deppon.foss.framework.exception.BusinessException;
import com.deppon.foss.framework.shared.util.string.StringUtil;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.EmployeeEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.OrgAdministrativeInfoEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.UserEntity;
import com.deppon.foss.module.mainframe.client.common.CommonContents;
import com.deppon.foss.module.pickup.common.client.action.AbstractButtonActionListener;
import com.deppon.foss.module.pickup.common.client.ui.UIUtils;
import com.deppon.foss.module.pickup.common.client.utils.BZPartnersContextUtil;
import com.deppon.foss.module.pickup.common.client.utils.BZPartnersJudge;
import com.deppon.foss.module.pickup.common.client.utils.BooleanConvertYesOrNo;
import com.deppon.foss.module.pickup.common.client.utils.BusinessUtils;
import com.deppon.foss.module.pickup.common.client.utils.CommonUtils;
import com.deppon.foss.module.pickup.common.client.utils.CustomerImpOperLogHandler;
import com.deppon.foss.module.pickup.common.client.utils.MessageI18nUtil;
import com.deppon.foss.module.pickup.common.client.vo.DataDictionaryValueVo;
import com.deppon.foss.module.pickup.common.client.vo.PtpWaybillOrgVo;
import com.deppon.foss.module.pickup.common.client.vo.WaybillDiscountVo;
import com.deppon.foss.module.pickup.common.client.vo.WaybillPanelVo;
import com.deppon.foss.module.pickup.creating.client.common.AddWaybillUtils;
import com.deppon.foss.module.pickup.creating.client.common.Common;
import com.deppon.foss.module.pickup.creating.client.common.WaybillDtoFactory;
import com.deppon.foss.module.pickup.creating.client.common.WaybillTempSaveData;
import com.deppon.foss.module.pickup.creating.client.dao.IWoodenRequirementsDao;
import com.deppon.foss.module.pickup.creating.client.service.IWaybillOffLinePendingService;
import com.deppon.foss.module.pickup.creating.client.service.IWaybillService;
import com.deppon.foss.module.pickup.creating.client.service.WaybillServiceFactory;
import com.deppon.foss.module.pickup.creating.client.service.impl.WaybillOffLinePendingService;
import com.deppon.foss.module.pickup.creating.client.ui.PictureWaybillEditUI;
import com.deppon.foss.module.pickup.creating.client.ui.SubmitConfirmCompareImportDialog;
import com.deppon.foss.module.pickup.creating.client.ui.SubmitConfirmDialog;
import com.deppon.foss.module.pickup.creating.client.ui.WaybillEditUI;
import com.deppon.foss.module.pickup.creating.client.ui.editui.ConcessionsPanel.WaybillDiscountCanvas;
import com.deppon.foss.module.pickup.creating.client.ui.editui.IncrementPanel.WaybillOtherCharge;
import com.deppon.foss.module.pickup.creating.client.ui.print.CustomerCouponDialog;
import com.deppon.foss.module.pickup.creating.client.vo.PrintTemplatesModel;
import com.deppon.foss.module.pickup.pricing.api.shared.define.PricingConstants.ProductEntityConstants;
import com.deppon.foss.module.pickup.waybill.shared.define.WaybillConstants;
import com.deppon.foss.module.pickup.waybill.shared.domain.ActualFreightEntity;
import com.deppon.foss.module.pickup.waybill.shared.domain.DispatchOrderChannelNumberEntity;
import com.deppon.foss.module.pickup.waybill.shared.domain.InstallationEntity;
import com.deppon.foss.module.pickup.waybill.shared.domain.IntelligenceBillTimeGather;
import com.deppon.foss.module.pickup.waybill.shared.domain.LabeledGoodEntity;
import com.deppon.foss.module.pickup.waybill.shared.domain.PrintInfoEntity;
import com.deppon.foss.module.pickup.waybill.shared.domain.WaybillDisDtlEntity;
import com.deppon.foss.module.pickup.waybill.shared.domain.WaybillEntity;
import com.deppon.foss.module.pickup.waybill.shared.domain.WaybillPaymentEntity;
import com.deppon.foss.module.pickup.waybill.shared.domain.WaybillPendingEntity;
import com.deppon.foss.module.pickup.waybill.shared.domain.WaybillPictureEntity;
import com.deppon.foss.module.pickup.waybill.shared.domain.WaybillPictureSendSmsEntity;
import com.deppon.foss.module.pickup.waybill.shared.domain.WoodenRequirementsEntity;
import com.deppon.foss.module.pickup.waybill.shared.dto.AddressFieldDto;
import com.deppon.foss.module.pickup.waybill.shared.dto.BarcodePrintLabelDto;
import com.deppon.foss.module.pickup.waybill.shared.dto.CouponInfoDto;
import com.deppon.foss.module.pickup.waybill.shared.dto.GUIPrintLabelDto;
import com.deppon.foss.module.pickup.waybill.shared.dto.PtpWaybillDto;
import com.deppon.foss.module.pickup.waybill.shared.dto.WaybillDto;
import com.deppon.foss.module.pickup.waybill.shared.dto.WaybillPendingDto;
import com.deppon.foss.module.pickup.waybill.shared.exception.WaybillValidateException;
import com.deppon.foss.module.pickup.waybill.shared.hessian.ICustomerHessianRemoting;
import com.deppon.foss.module.transfer.common.api.shared.dto.SwiftNumberInfoDto;
import com.deppon.foss.print.labelprint.LabelPrintContext;
import com.deppon.foss.print.labelprint.LabelPrintManager;
import com.deppon.foss.print.labelprint.service.LblPrtServiceConst;
import com.deppon.foss.prt.PrintUtil;
import com.deppon.foss.util.CollectionUtils;
import com.deppon.foss.util.UUIDUtils;
import com.deppon.foss.util.define.FossConstants;

/**
 * 运单提交确认Action
 * @author 025000-FOSS-helong
 * @date 2012-10-16 下午02:46:47
 *  *  * 录入货物信息SUC业务规则
 * 1.	若货物为违禁品，则系统自动提示“货物为违禁品，不可开单！”；
 *2.	若货物为贵重物品，则系统自动勾选“贵重物品”，且不可修改；
 *3.	若货物为限保物品，则系统自动限定保价金额，且不可修改，并提示“货物为限保物品”；
 *4.	违禁品、拒收品、贵重物品、限保物品（含保价金额上限）具体类型可在系统中进行配置；
 *1.	货物重量单位为千克；
 *2.	运单开单时，货物的件数、重量及体积文本框是必填项，默认值为空； 
 *3.	件数只能是大于等于1的整数，重量及体积只能大于0。
 *4.	体积、重量这种过程数据保留两位小数
 *1.	尺寸录入文本框，支持'长*宽*高*件数+长*宽*高*（即多个尺寸相加）的计算；
 *2.	如果件数是1，则不强制在录入时要“*1”；
 *3.	货物尺寸为计算器输入，输入的尺寸可以进行加减，例如：1*1*1*5+2*2*2*3-0.5*0.5*0.5，
 *显示为输入文本；
 *4.	尺寸计算单位为厘米，尺寸计算出数据后转换单位为立方米后，在货物体积中显示数据；
 *例如：尺寸录入为：50*50*20（其中20为件数），则体积显示数据为：0.05； 
 *5.	体积为空时，录入尺寸后，填充体积。当尺寸修改时，体积随之变处。当修改体积时，尺寸不变化。
 *6.	体积初始值为“0”，仍保持必填，操作员根据实际情况改，选择木架或木箱或两者都选择后则该值不能为0
 *1.	货物体积单位为立方米；
 *2.	营业员可以修改通过尺寸计算器计算得出的体积数据；
 *3.	系统设置货物重量体积比区间值（该值由基础资料配置），在运单提交时，系统自动对重量体积比进行校验：
 *即重量体积比X=重量/体积； 
 *3.1	当X不在设置的区间中，弹出提示“请确认录入的重量体积是否准确！”；
 *（该弹窗有两个按钮：确定、取消）点击确定时，弹出确认运单信息界面；点击取消，点返回运单录入界面；
 *3.2	当X在区间中，无提示；直接进入确认运单信息界面；
 *4.	录入重量体积后，系统校验单票的重量体积及单件（平均单件）的重量体积是否
 *满足“修改-查询行政组织业务属性”基础资料中的单票和单件重量体积限制；只要该四项中有
 *一项不满足，则提示“XX超出提货网点限制，请重新选择提货网点！”； 
 *1.	货物包装总件数小于等于货物总件数，如果大于总件数，提示：“包装件数不能大于总件数”；
 *1.	当木包装件数大于等于1时，系统校验出发城市和对应目的站的走货路由中是否有有打木架功
 *能的部门，若有，则提醒营业员“是否收入代打木架？”，是，则进入场代打木架信息录入界面”，
 *并显示第一个有打木架功能的部门名称；若走货路由中无有打木架功能的部门，则不提示“是否收入代打木架？”；
 *2.	当走货路由中有有打木架功能的部门为多个时，只显示系统路由中第一有有打木架功能的部门，
 *且不可修改；
 *1.	运输类型为汽运时，货物类型为唯一选择项；即，非A即B；默认不可勾选，只有当走货路由经过
 *特定的城市时需要录入货物类型,特定城市可在系统中进行配置；
 *2.	运输类型为空运时，货物类型为下拉选择框，默认显示为普货，目前只有这一个分类，该类型可做配置；
 *1.	贵重物品判断规则： 
 *a. 单票单件货物，体积≤0.05立方且保价声明价值≥1万元； 
 *b. 单票多件货物，平均单件体积≤0.2立方且平均单件保价声明价值≥1万元；
 *（注：平均单件体积=开单总体积÷开单件数，平均单件保价=开单保价声明价值÷开单件数） 
 *c. 高保价货物，单票货物保价≥10万元； 
 *满足以上任意一个条件时，系统将判定该票货物为贵重物品并自动勾选"贵重物品"复选框，且为灰色，
 *不可编辑；不满足以上条件时，该复选框为可编辑状态，用户可根据实际情况自行选择是否勾选； 
 *2.	若"贵重物品"复选框被勾选，则在【储运注意事项】中自动加入提示记录"贵重物品"字段，
 *若该货物为贵重物品时，"储运注意事项"中信息显示优先级为：贵重物品＞其他；
 *1.	录入的打木架货物件数和打木箱件数之和必须大于等于录入的木包装件数；
 *2.	系统默认标签流水号前X的货物为需要代打木架货物，X等于录入的“打木架货物件数”和“打木箱货物件数”之和；
 *3.	营业员在打印标签时，按流水号先贴要打木架或打木箱的货物；
 *1.	录入的打木架货物体积和打木箱货物体积之和乘以1.4必须小于等于货物总体积；该1.4为打木架体积计算系统，
 *可配置；
 *2.	营业部开单时按打完木架后的包装开，即包装中含“木架/木箱”，开单件数为货物打木架/木箱前的实际件数
 *（防止丢货），尺寸和重量按照以下公式计算：
 *1.1	整票货物代打时：开单体积=代打货物体积*1.4；开单重量=所有货物重量+代打货物体积*42；
 *1.2	部分货物代打时，开单体积=代打货物体积*1.4+未打木架货物体积；开单重量=所有货物重量+代打货物体积*42。
 *即：营业部按照代打货物未打木架之前体积的1.4倍来开单收费，重量另加，单票中未打木架的货物的体积和重量不变；
 *1.3	例如：一票货物需全部代打，货物体积为1个方，重量为100KG，则开单体积为1.4个方，
 *开单重量为100+1*42=142KG，收取客户包装费为150*1.4=210元；
 *1.4	需要加托时，仍按照50元/个另外收取费用，托的重量和体积不再另加；营业部不需要再更改由于打
 *木架引起重量和体积的变化；
 *3.	打木架要在“对内备注”中备注“代打木架/木箱”，特殊要求（特别是合打情况）必须在对内备注
 *和A4纸上都注明，例如：货物1、2、3合打成一件等；
 *4.	开单件数为代打木架前货物实际件数，包装为打木架后的包装，打木架后件数发生变化后，需及时更改件数；
 *
 *
 *录入运输信息SUC业务 规则
 *1.	收货部门默认为操作者所在的部门，不可修改；
 *2.	若操作者部门为集中开单部门时，则收货部门可修改，其选择部门只能为开单组服务的集中接货区域营业部；
 *且其进进入运单开单界面时，系统自动默认收货部门为上一次开单的收货部门；
 *1.	默认显示精准；
 *1.	根据部门的性质或所在城市确定部门所作业务的性质，如有些部门可做所有运输性质的业务，
 *部分部门无法做精准业务，所有规则根据营业部业务管制确定（根据出发城市、到达城市确定部门可做的业务性质，
 *所有数据读取自营业部业务管制基础资料）；
 *1.	当运输性质为空运时，提货方式有：自提（不含机场提货费）、免费自提、机场自提、免费送货、
 *送货进仓、送货上楼、送货（不含上楼)；默认为自提（不含机场提货费）；
 *2.	如果客户是CRM中的合同客户，在开单时提货方式选项中增加"免费送货"选项，免费送货送货费为0（不可修改）；
 *3.	当运输性质为精准、普货、偏线时，提货方式有：自提、免费送货、送货进仓、送货上楼、
 *送货（不含上楼)、内部带货自提；默认为自提；
 *1.	当运输性质为空运时，开单提货网点显示空运代理网点及公司可做空运的自有网点；
 *2.	当运输性质为偏线时，提货网点只显示偏线代理网点；
 *3.	当运输性质为精准、普货时，提货网点显示我司所有可所到达的网点；
 *1.	当运输性质为空运，且提货方式为机场自提时，增值服务的其它费用中可添加对就有规则的费用
 *（暂定方案：对于单独开单的可做增值服务费用添加。若以后在产品定义中区分了单独开单和合大票，则另考虑）；
 *1.	提货方式为机场自提时，代收货款设置为0且不可编辑，不能开单含到付款，，付款方式不能开到付；
 *否则，提示：“提货方式为【机场自提】时，到付金额必须为0，付款方式不能为到付”；
 *2.	提货方式为内部带货自提时，只能填写发货人收货人信息和货物信息，所有涉及金额的控件均为0，
 *收货人和发货人只能为OA系统中部门；
 *1.	提货方式为自提（不含机场提货费）、免费自提、内部带货自提时，只显示可做自提业务的网点；
 *2.	提货方式为送货时，只显示可做送货业务的网点；
 *1.	目的站可由收货客户地址的城市（即收货客户地址中的“市”）生成，也可手工录入；
 *2.	系统自动过滤只显示目的站城市符合条件的网点信息；
 *3.	选择确定提货网点信息后，系统自动生成对应网点的目的站名称于目的站框内；
 *网点目的站读取对应的网点目的站基础资料；
 *4.	在网点目的站基础资料中有‘取消到达日期’，如果当前日期在‘取消到达日期’之前，
 *那么提示“xx营业部将于xx年xx月xx日临时取消到达，届时货物将转至xx营业部，请做好客户解释工作！”
 *（其中第一个xx营业部，为当前营业部、第二个xx营业部为网点目的站基础资料中的‘转货部门‘，
 *xx年xx月xx日为‘取消到达日期’）
 *5.	录入重量体积后，系统校验单票的重量体积及单件（平均单件）的重量体积是否满足
 *“修改-查询行政组织业务属性”基础资料中的单票和单件重量体积限制；只要该四项中有一项不满足，
 *则提示“XX超出提货网点限制，请重新选择提货网点！”； 
 *1.	当通过运输性质、提货方式和目的站过滤的提货网点唯一时，直接显示提货网点名称；
 *1.	当勾选上门接货时，自动显示文本框，录入接货司机工号，接货费数字框可录入，手写现付金额，可编辑
 *2.	当不勾选上门接货时，接货费清0变灰且不可录入，手写现付金额变灰，不可编辑
 *1.	当录单部门为集中开单部门时，自动勾选上门接货，且不可修改；
 *2.	上门接货默认不勾选，可修改；3.	
 *1.	对外备注可多选，选择的项目信息依次显示在储运注意事项中；默认为空；
 *2.	当选择空时，则其它所有选项自动不勾选；
 *3.	对外备注已选择录入后，若再选择空，则清空已选择的所有对内备注；
 *1.	储运注意事项=对外备注&对内备注&大车直送（若勾选大车直送），各字段以“；”分开；
 *2.	对外备注永远在储运注意事项的最前面；
 *1.	当运输性质为精准、普货、偏线时，显示配载线路；系统自动根据营业部所在城市和到达目的站
 *匹配走货线路基础资料，生成预配线路，且不可修改；
 *2.	当运输性质为空运时，显示配载航班，包括：早班、中班、晚班、中转航班；默认为空；
 *1.	系统自动匹配始发配载部门基础资料，通过配载类型来判断配载部门；
 *1.	如果提货网点为自有网点时，最终配载部门为提货网点名称；如果提货网点不是自有网点，
 *则最终配载部门为外发代理网点的管理部门；（参考基础资料：外发代理、部门基础信息基础资料）；
 *2.	当运输类型为空运时，最终配载部门可编辑，且列举对应收货部门可走空运货的空运总调，
 *默认显示为空；若对应收货部门可走空运货的总运总调唯一时，则直接显示；
 *1.	预计出发时间在运单提交时进行判断填充；
 *2.	预计出发时间适用于运输类型为“精准”；
 *3.	预计出发时间=预计出发日期,准点出发时间。【格式如：2011-6-28 ,12:00:00】
 *（部门对应的“准点出发时间”，数据取自基础资料：经营-运作基础资料）；
 *4.	如果开单当前时间在准点出发时间前，则预计出发日期=开单日期；否则，预计出发日期=开单日期+1；
 *5.	当运输性质为普货、偏线时，则预计出发日期=开单日期+1；
 *1.	预计提货/派送时间适用于运输类型为“精准”；
 *2.	提货方式为“自提”时，若部门对应的“是否当天出发”为“是”，
 *则预计提货/派送时间=预计出发日期+到达营业部承诺天数：到达营业部承诺时点；
 *否则，预计提货/派送时间=预计出发日期+到达营业部承诺天数-1：到达营业部承诺时点；
 *（部门对应的“是否当天出发”，数据取自基础资料：经营-运作发车标准；
 *“到达营业部承诺天数”和“到达营业部承诺时点” ，数据取自基础资料：专线-城市承诺时间标准；）
 *3.	提货方式包含为“送货 ”时，若部门对应的“是否当天出发”为“是”，
 *则预计提货/派送时间=预计出发日期+到达营业部承诺天数+派送承诺需加天数：
 *派送承诺时点；否则，预计提货/派送时间=预计出发日期+派送承诺需加天数-1：
 *派送承诺时点；（部门对应的“是否当天出发”，数据取自基础资料：经营-运作发车标准；
 *“到达营业部承诺天数”、“到达营业部承诺时点”、“派送承诺时点”、“派送承诺需加天数”，
 *数据取自基础资料：专线-城市承诺时间标准；）
 *1.	大车直送默认不勾选，且不可修改；
 *2.	当单票货物重量超过8吨或体积大于25方时，系统提醒“是否需要大车直送？”；
 *营业员确定后，自动勾选大车直送，且大车直送变为可修改状态；
 *3.	勾选大车直送时，在储运注意事项中增加大车直送显示；不勾选时，不显示；
 *1、检验单号是否唯一（有效状态的运单唯一，中止/逻辑删除等的运单不参与检查），
 *如果唯一系统不做操作，如果不唯一，系统提示“XX单号已经使用，请重新输入单号”
 *2、新增一条业务规则：在提交运单之前，若相邻两次输入的单号（两次单号分别为A与B且单号输入合法）
 *差别较大时，系统给予用户友好提示避免录错单号，但不限制单号的输入。具体规则为： 
 *1）若前后两次输入的单号位数相同，当|A-B|≥100时系统给予提示； 
 *2）若前后两次输入的单号位数不同，系统给予提示； 
 *3）提示信息为：前后两票单号相差过大，请检查所输单号是否是本部门所属单号！
 *
 ** 增值服务SUC规则如下
 * 1.1	相关业务用例
 *BUC_FOSS_5.20.30_510  确认承运信息
 *1.2	用例描述
 *营业员通过本用例录入增值服务信息。
 *1.3	用例条件
 *条件类型	描述	引用系统用例
 *前置条件		
 *后置条件		
 *1.4	操作用户角色
 *操作用户	描述
 *营业员	可查询、录入、修改增值服务信息
 *1.5	界面要求
 *1.5.1	表现方式
 *Web方式
 *1.5.2	界面原型
 *1.5.2.1	录入增值服务信息
 *1.5.2.2	查询发货客户代收货款退款联系人
 *1.5.2.3	查询其它费用 
 *1.5.3	界面描述
 *营业员点击运单开单，进入运单开单界面。
 *本界面为录入增值服务信息。
 *界面主要分为二个部分：录入增值服务、查询其它费用。
 *1.	录入增值服务
 *录入增值服务分为三个部分：录入增值服务信息界面、录入其它费用列表、查询发货客户代收货款退款联系人；
 *1.1	录入增值服务信息界面
 *录入增值服务信息界面包括： 
 *1.1.1	保价声明价值；
 *1.1.2	保价费率：保价费率可由基础资料配置，可按出发城市区域，出发营业部等；
 *1.1.3	保价费；
 *1.1.4	代收货款；
 *1.1.5	代收费率；
 *1.1.6	代收手续费；
 *1.1.7	退款类型：包括三日退、退日退、审核退，默认三日退为空；
 *1.1.8	收款人姓名；
 *1.1.9	收款人帐号；
 *1.1.10	包装费；
 *1.1.11	装卸费；
 *1.1.12	送货费；
 *1.1.13	其它费用合计；
 *1.1.14	接货费；
 *1.1.15	返单类别：包含“无需返单”、“客户签收单原件返回”、“客户签收单传真返回”、
 *“运单到达联传真返回”包括无需返单、原件签收单返回、传真件签收单返回、扫描件返回，默认无需返单；
 *1.1.16	预付费保密；
 *1.2	录入其它费用列表
 *录入其它费用列表包括：
 *1.2.1	费用名称；
 *1.2.2	费用金额；
 *1.2.3	新增其它费用：功能按钮；
 *1.2.4	删除其它费用：功能按钮；
 *1.3	查询发货客户代收货款退款联系人
 *1.3.1	操作列；
 *1.3.2	开户银行；
 *1.3.3	收款人姓名；
 *1.3.4	银行帐号；
 *1.3.5	备注信息；
 *1.4	录入包装费
 *2.	查询其它费用
 *查询其它费用分为四个部分：其它费用列表 、功能按钮；
 *2.1	其它费用列表：
 *其它费用列表包括：
 *2.1.1	名称；
 *2.1.2	归集类别；
 *2.1.3	描述；
 *2.1.4	金额；
 *2.1.5	金额上限；
 *2.1.6	金额下限；
 *2.1.7	是否可修改；
 *2.1.8	其它费用可基础资料配置，并支持是否启用和是否可见的维护；
 *2.2	功能按钮：
 *2.2.1	查询：包括查询条件：名称；
 *2.2.2	确定；
 *2.2.3	取消；
 * 1.	限保物品（例如：“陶瓷”、“门窗”等）默认保价1000不可修改,
 * 且保价费率可手动调整；（限保物品从限运物品基础资料中获取）；非限保物品的保价费率不可修改；
 *2.	实际保险费小于最低保费的按最低保费收取；
 *3.	保价费 = 保价申明价值*保价费率，不可修改；
 *4.	保价申明价值默认为3000，可以修改；保价声明价值不封顶；
 *5.	精准（长途）、普货（长途）、偏线，最低一票8元；普货（短途）、
 *精准（短途）最低一票6元；空运最低一票10元；所有运输方式保价超过最低均按0.4%收取
 *（数据读取自保价设置基础资料）；长短途数据读取计价基础资料；
 *6.	实际保价费小于最低保费的按最低保费收取；
 *7.	保价费率首先是配置的标准费率。当有区域保价费率时，以区域保价费率为准。
 *当客户为合同客户时，则以合同签订为准。所有的保价费率以读取的为准，不可修改。
 *限保物品的保价费率同样不可修改
 *行政组织业务属性-营业部信息中增加增值服务（返回签单、货到付款、代收货款）选项，
 *开单是否可以进行返回签单、货到付款、代收货款需要根据到达部门属性
 *是否可以（返回签单、货到付款、代收货款）来决定
 *1.	如果不是CRM客户或者派送网点基础资料中代收货款属性为”否”，代收货款设置为0且不可编辑；
 *2.	如果是CRM客户、对应派送网点基础资料中代收货款属性为”是”且CRM中有账户信息，
 *代收货款可编辑，且可以选择所有的退款类型，若CRM中若无账户信息，则退款类型只能选择审核退
 *3.	开单时系统默认代收货款为空；
 *4.	代收货款栏默认为空，如果没有代收货款，则要求输入0；否则，进行提示：“请确认该单没有代收货款，
 *如无，请输入数字0”；当代收货款大于0时，输入后，对于选择的退款类型，有如下限制：
 *3.1	三日退：在收到客户代收货款后第三天给客户打款。
 *3.1.1	默认退款类型为三日退；
 *3.1.2	代收10000元以下费率0.5%， 10000元以上费率0.4%；最低10元/票，最高100元/票；
 *有部分城市三日退费率为0.（通过基础资料“代收货款费率”及“特殊城市与部门代收货款费率”实现）。
 *3.2	审核退：收到客户代收货款，出发部门审核后，给客户打款。
 *3.2.1	代收10000元以下费率0.5%，10000元以上费率0.4%；最低10元/票，最高100元/票（
 *通过基础资料“代收货款费率”及“特殊城市与部门代收货款费率”实现）。
 *3.2.2	选择审核退时，客户收款信息体现在开单界面，若无账号时可以提交运单后再走账号修改流程进行补充。
 *3.3	即日退：在收到客户代收货款后24小时到账。
 *3.3.1	代收手续费率1%，最低20元/票，最高200元/票；有部分城市特殊（通过基础资料“代收货款费率”及“特殊城市
 *与部门代收货款费率”实现）。
 *3.3.2	必须先录入客户收款银行信息，提交时，银行信息不能为空；
 *3.3.3	只支持4个银行：农行、工行、建行、招行；否则，给予提示信息；
 *5.	限制代收货款金额不能小于10元，可以等于10元；但可以为0；该数字“10”可由基础资料配置；
 *6.	网上订单导入开单时，代收货款金额读取网上订单的代收货款金额，有数据时不可对代收货款进行修改，
 *只可起草出发更改进行修改；若网上代收货款为0 ，系统可支持修改代收货款金额；
 *7.	默认的代收费率由基础资料配置；
 *1.	保价费和代收货款费用无法编辑更改，只能更改保险声明价值和代收货款金额；
 *1.	代收退款收款人姓名只能为发货客户绑定的收款人姓名和帐号，且只能选择，不能修改；
 *当退款人姓名和帐号唯一时，直接显示；（数据读取CRM客户信息资料（退款帐户信息））
 *2.	CRM客户信息资料的要先在CRM中录入客户退款帐户信息，且第一次在我司办理代收货款业务时，
 *退款类型只能为审核退；
 *3.	同一客户多个银行信息的显示问题：当有两个或以上账号时，弹出账号信息（包括开户银行、收款人、
 *账号、备注），选中其中的一条银行信息记录后，账号和收款人信息显示在开单界面对应的位置；
 *1.	包装费默认为0，可手工修改；
 *2.	当录入有打木加信息时，默认显示包装费=max（150*打木架货物体积，30）+max（300*打木箱货物体积，40），
 *且可修改，修改的金额只能大于等于默认显示金额；其中150、30、300、40为打木架单价（元/方）、打木架最低一票、
 *打木箱单价（元/方）、打木箱最低一票，可由基础资料配置；
 *1.	装卸费金额需满足不能超过纯运费的15%（特殊部门为35%）。
 *即：装卸费（M）<=纯运费（C0）*15%（特殊部门为35%）=【重量/体积】（Z）*原费率（Q0）*15%（特殊部门为35%），
 *（其中，原费率Q0为：公布价）。 当装卸费大于零时，开单显示费率（Q）=（M+CO*优惠折扣）/（优惠折扣*Z） ，
 *开单显示运费（C）=Q*Z=C0+M 。且此显示费率不可更改；（对于专线的散客而言）
 *2.	如果该客户为月结客户、整车、中转下线或偏线，则原费率（Q0）为装卸费前的费率，为系统默认的公布价。
 *开单最终显示费率（Q）=（M+CO*优惠折扣）/（优惠折扣*Z） ，开单显示运费（C）=Q*Z=C0+M ；
 *3.	当修改除装卸费影响外有影响费率的地方时（如目的站更改、重量和体积变化影响到费率），
 *需先清空装卸费为零，然后再修改数据。如：月结客户与非月结客户、整车与非整车、目的站、重量、体积；
 *4.	当装卸费由M1修改为M2时：先判断M2是否满足公式：M2<=(Q1-M1/Z）*Z*15%（特殊部门为35%）。
 *如果公式成立，则最终显示费率Q2=Q1-M1/Z+M2/Z，最终显示运费（C2）= Q2*Z。否则，清空装卸费为零，
 *最终显示费率Q2=Q1-M1/Z，最终显示运费（C2）= Q2*Z。（其中Q1是装卸费M1时的费率,Z为重量/体积）；
 *5.	系统如果是运费最低一票，要求装卸费=0，即装卸费不允许修改。（只限制配载类型为专线的，包括月结）；
 *6.	对于显示费率不等于显示费率乘以重量的问题，要求如下：
 *6.1.	若该单含装卸费且折算后的费率（A）的有效小数位为小于或等于两位小数，则显示费率（Q）=费率（A）。
 *且显示运费等于该显示费率*重量；
 *6.2.	若该单含装卸费且折算后的费率（A）的有效小数位大于两位小数，令费率（B）=费率（A）
 *的取前2个小数位的值（注：直接截取A的值，不四舍五入）。则显示费率（Q）=费率（B）+0.01。
 *显示运费等于该显示费率*重量；
 *7.	只要含与不含装卸费两者有交叉的，均以不含为准；
 *8.	装卸费特殊部门表： （建议：做为可配置的基础数据表）
 *9.	2012年12月1日开业的部门不能开装卸费
 *10.	如果订单渠道为阿里巴巴或者是月发越送属性客户不可开装卸费
 *11.	是否可以开装卸费的依据取决于部门的业务属性（即部门属性基础资料中增加是否可开装卸费的字段）。
 *12.	装卸费上限由增值服务配置基础资料实现（在产品API中体现）。
 *1.	送货费默认不可改小，但可改大。除了月结客户外，只能对系统计算出的送货费取值进行上调，
 *不能下调。当送货费取值大于最高送货费（基础资料配置）时，送货费自动跳改为最高送货费值，
 *但用户可以上调送货费；
 *2.	通过送货费基础资料来实现：
 *2.1.	若提货方式为送货进仓，开单送货费直接读取送货进仓送货费基础资料，取值终止；
 *2.2.	若提货方式为送货上门，则开单的送货费取值顺序：特殊区域送货费优于全国标准送货费；
 *（即：先到特殊区域送货费基础资料中取值，若取到值，取值终止；否则，再到全国标准送货费基础资料取值，
 *取值终止。）
 *2.3.	特殊区域和全国标准送货费取值规则：送货费=货物重量*送货费率； 
 *2.3.1	先判断开单体积在哪个体积区间，筛选出符合条件的所有记录，再判断开单重量在已被体积筛选
 *出来的记录中的哪个重量区间，来确定是哪一条记录。然后再根据费率计算，计算出来的值与该条的最低
 *送货费进行比较，若小于最低送货费时，就取最低送货费，取值终止；若大于最低送货费且小于最高送货费时，
 *就取计算出来的值，取值终止；若大于最高送货费时，就取最高送货费，取值终止。
 *2.3.2	标淮派送范围收取送货费标准：
 *货物重量	标准
 *0-300KG	55元/票
 *301-500KG	0.2元/KG
 *501KG或2.5立方米以上	100元/票，不封顶
 *2.3.3	当送货费取值小于最高送货费时，开单送货费不可以更改；当送货费取值高于最高送货费时，
 *开单送货费可手动更改，如果手动更改的值小于最高送货费时，系统弹出提示框：“该票送货费不得低于
 *【最高送货费】”
 *2.3.4	仅使用于汽运专线，对“空运”、“偏线”以及“中转下线” 的不受以上收费的限制。
 *2.3.5	“月结”客户的送货费收费按以上计算出默认值，但可以修改。（送货费不受限制。可向上修改也
 *可以向下修改，最小为0）
 *2.3.6	除月结客户的属性外其它所有情况的送货费不可向下修改，只能向上修改
 *2.3.7	最高送货费做基础资料配置；
 *3.	非标准派送范围加收操作费标准：
 *3.1	超远加收送货费标准：
 *距离（公里）	30-50	50-100	100-150
 *加收金额（元）	50	100	150
 *3.1.1	距离为客户所在区域与公司最近网点的距离（距离以ERP谷歌地图测量的导航距离为准）；
 *3.1.2	客户所在地30公里范围内如果有公司的营业网点，无论是否做派送，该区域均不能收取超远加收送货费；
 *3.1.3	非标准派送的费用添加无上限
 *3.2	特殊区域（进仓）：
 *3.2.1	特殊区域类型：大型超市和商场、大型工厂（需提供进仓编号）；
 *3.2.2	收费标准：进仓费实报实销，并加收150元操作费；
 *4.	区域送货费限制：
 *4.1	当开单提货网点的所在城市或区域为“XX”、提货方式为：送货”XX”(XX待定，但前提是：提货方式必须为送货)时，
 *送货费固定为XX元，且不可修改；财务成本提取为XX元。（该类型城市或区域、送货费固定标准、成本提取标准可配置）
 *4.2	当开单提货网点为XX营业部时，开单送货费为XX元，内部成本提取为XX元（目前该方案营业部：深圳华强苏发大厦
 *营业部、深圳华强钟表市场营业部）。（该类营业部类型、送货费固定标准、成本提取标准可配置）
 *4.3	内部带货、空运、偏线及中转下线不受上述需求的限制。
 *5.	限制大件大票货到达“XX部门”或“XX区域”或其它限制类型区域：
 *5.1	当开单提货网点为“XX部门”或“XX区域”或其它限制类型区域，判断单件重量是否超过XXKG，
 *或体积是否超过X立方，是的话提示：“单件超过XKG或单票超过X立方，请开到XX派送部或其它内容”。
 *（单件重量＝重量/件数）。【即开单限制：可通过到达部门限制基础资料实现】
 *5.2	当开单提货网点为“XX部门”或“XX区域”或其它限制类型区域时，其他费用中的“送货上楼费”屏蔽或显示但不可选择；
 *5.3	若“XX区域”或其它限制类型区域再开派送部，适用以上需求；
 *5.4	空运、偏线及中转下线不受上述需求的限制；
 *5.5	内部带货受上述需求的限制；
 *5.6	 “XX部门”或“XX区域”或其它限制类型区域及判断规则由基础资料配置；
 *1.	开单时系统默认其他费用为综合服务费和燃油附加费且不可移除,其他费用由手动添加，
 *费用根据基础资料中的内容进行读取，根据开单内容自动添加；（可基础资料配置）
 *2.	运输类型为“精准（长途）、普货（长途）、偏线、空运”时，燃油附加费默认为4元；
 *运输类型为“普货（短途）、精准（短途）”时，燃油附加费默认为2元；均不可修改；（可基础资料配置）
 *3.	综合服务费：（费用金额由基础资料配置）
 *3.1	综合服务费默认为2元不可修改、剔除；
 *3.2	月结客户可以删除2元的综合服务费；
 *3.3	淘宝、阿里巴巴订单导入开单时，系统自动不收取2元的综合服务费；
 *4.	燃油附加费：（费用金额由基础资料配置）
 *运输类型为“精准（长途）、普货（长途）、偏线、空运”时，燃油附加费默认为4元；
 *运输类型为“普货（短途）、精准（短途）”时，燃油附加费默认为2元；均不可修改；
 *5.	其他费用中“是否可修改”打勾时，对应费用类型的金额可以金额上限和金额下限之间修改；
 *6.	其他费用合计等于其他费用列表中各项费用数据之和；
 *1.	原件签收单返回类：系统默认收取客户15元/票，可更改收取客户20元/票。偏线不允许做签收单；
 *2.	空运、偏线和中转下线的“返单类型”不可选择；
 *3.	若有选择，则返单费用信息自动显示在其他费用信息列表中，可以其它费用列表中修改签收费用；
 *4.	如果选择有返单类型，系统会自动生成一条签收单记录，记录信息包含：运单号、运单ID、库存状态、
 *当前操作部门（运单开单时，是填开部门）、是否签收、是否作废、出发部门(运单开单出发部门)、
 *签收单类型、签收状态；
 *5.	月结客户允许修改对应返单类别的返单金额（区间为对应返单类别的上限值和下限值），
 *非月结客户只能选择对应的返单类别的默认金额，不能修改；返单费用项目不能删除
 *1.	运单新增时，运输性质选择空运、提货网点非我司自有网点时，不能选择预付运费保密；
 *2.	已开启预付运费保密运单提交后，始发更改中预付运费保密可以取消。未开启预付运费保密运单提交后，
 *若货物未有非本部门入库操作，则始发更改中预付运费保密可选择；若货物有非本部门入库操作，
 *则始发更改中预付运费保密否可选择，若要更改，则必须返货后，作废重新开单；
 *3.	运单保存未提交时，可以在调出运单的时候，预付运费保密自由选择；
 *4.	已开启预付运费保密的运单，始发更改中预付更改到付或到付更改预付，涉及预付运费有变动时，
 *不影响预付费保密功能；
 *5.	开启预付运费保密，预付运费不能为0，否则不能保存、提交；
 *6.	开单付款方式为临时欠款时，预付运费保密选项不可选择，其他付款方式都行；
 *7.	开启预付运费保密，运单出库后，始发更改中运输性质由汽运专线更改为偏线、空运时，
 *必须取消预付运费保密后才能提交；
 *8.	预付运费保密开启时，非出发部门用户综合查询预付运费不显示，即“预付金额”不显示；
 *9.	预付运费保密开启后，到达联打印时，费率、运费、其他服务费用明细、费用合计中的现付总计均不显示；
 *1.	；
 *2.	1）开单总费用、预付金额、到付金额，取整，四舍五入； 
 *2）开单所有录入的金额数值，最多可录入到小数点后两位小数，无效的0省略不显示，如100.00显示100,
 *100.10显示100.1； 
 *3）开单总费用、预付金额、到付金额之外的，即中间环节的金额保留两位小数，依据四舍五入规则。 
 *4）费率最多可保留两位小数，小数点多于两位时，全进1。比如，系统折算生成的费率为1.201时，显示为1.21。
 *1.	接货费只能录入数字
 *1）限保物品不限制保价金额，限制保价费率，增值服务部门可以配置对应限保物品的保价费率； 
 *2）限保物品的保价费率通过基础资料进行配置； 
 *3）取消偏线、空运最高保价5000元的限制； 
 *2、装卸费开单运费占比及特殊部门装卸费需做成基础资料配置 
 *3、"其它费用"中的费用名称对应的归集类别的费用划分到增值服务对应的费用中，同时需增加归集类别的配置资料。 
 *4、超远派送送货标准的基础资料是需要配置的；超远派送费用无上限限制
 *
 *
 * * 运单收银SUC业务规则
 * 1.	计费类型分为重量计费、体积计费，由系统自动生成，不可修改；默认重量计费；
 *2.	对于一票货物系统分别按重量和体积分别计费并取大优先的原则计费；
 *若按重量计费运费较按体积计费运费较高，则计费类型为重量计费；
 *若按体积计费运费较按重量计费运费较高，则计费类型为体积计费；
 *3.	运输类型为汽运时,计费重量为空，不可修改；
 *4.运输类型为空运时计费重量应为重量和体积*1000000/6000进行对比，取大；
 *1.	费率为对应计费类型、目的站、提货网点及运输类型的走货单价；
 *2.	目的站、提货网点及运输类型确认后，即可自动显示对应计费类型的费率；
 *（来自价格基础资料）
 *3.	费率可以保留到小数点后2位；运费、预付金额、到付金额为整数，
 *按照四舍五入的原则；
 *1.	公布价运费、增值服务费用、优惠合计需通过点击计算费用获取；
 *2.	当提货网点信息未录入，不可计费运费；当录了提货网点，
 *货物的重量和体积以及其他服务费用录入不完整时，
 *点击计算费用，得到当前填写的信息费用信息；
 *3.	公布价运费（即重量、体积计费的运费）=每公斤单价/每方价格与货物实际重量/体积的乘积，
 *对于一票货物系统分别按重量和体积分别计费并取大优先的原则计费；（来自价格基础资料）
 *4.	增值服务费=送货费+包装费+保价费+代收手续费+接货费+其他费用合计；
 *5.	优惠合计=优惠总合计；
 *6.	总运费=公布价运费+增值服务费-优惠合计=预付金额+到付金额；
 *7.	在提交运单时，系统记录该次计算费用时所用的所有价格费用的规则版本号；
 *8.	  采用费用明细取整、总费用取整的原则
 *9.	任何客户包含月结客户不可减免综合服务费。
 *10.	开单界面选择付款方式为"现金"时，默认预付金额为开单总金额并允许修改，且修改的同时到付
 *金额随预付金额变化而变化，变化规则为：到付金额=总金额-预付金额，到付金额不能修改。 
 *例如，开单界面选择付款方式为"现金"时，当一票货的总金额为300元时，默认预付金额为300元，到付
 *金额为0，将预付金额改为100元之后，到付金额变为200元
 *1.	必须输入提货网点、货物的重量和体积以及其他服务费用，计算出总费用后再输入验证编码进行验证；
 *（优惠券编码开单时，对运单有上下限金额的限制，该上下限可配置）
 *2.	输入优惠券编码后，焦点转移时，系统调用CRM接口，校验该编码是否存在，如果存在，则将优惠信息
 *显示在优惠信息列表中，费用为对应的优惠券的金额；如果不存在提示为：你输入的优惠券编码不存在，请重新输入；
 *3.	当修改优惠编码时，则焦点转移时，系统自动调用CRM接口，校验该编码，同时修改对应的优惠减免
 *记录和优惠信息；
 *4.	优惠金额必须小于等于开单总金额；
 *5.	当付款金额为单一的现付或到付时，优惠券可以单独减免，当付款金额既有现付又有到付时，优先选
 *择减免现付金额，如存在优惠金额此时减免现付有余时，可再充抵到付费用，但优惠金额必须小于等于开单总金额；
 *6.	暂存时，只显示减免金额，运单实收或应收金额上不显示，即暂存时，不生成实收或应收单据；
 *7.	当费用变化时，优惠编码必须重新输入；8.	
 *1.	当发货客户有月结客户属性时，才可选择月结；并默认显示付款方式为月结；
 *2.	当发货客户有信用额度的属性时，才可选择临时欠款的付款方式；
 *3.	支持发货客户的多种付款方式叠加，但月结和临时欠款不可同时出现；
 *4.	当开单为订单导入开单，且为网上订单，并选择了网上支付时，导入开单后的付款方式显示网上支付；
 *同时付款方式可修改，付款方式中增加网上支付选项；
 *5.	开单为空运、偏线、中转下线时不能选择“网上支付”；
 *1.	当付款方式为现付时，预付金额必须大于0；否则，提示信息“付款方式非到付，预付金额不能小于等于0”；
 *2.	当付款方式为到付时，预付金额不能大于0；否则，提示信息“付款方式为【到付】，预付金额不能大于0”；
 *3.	月结客户的信用金额直接限制该客户的当月发货金额，当月发货金额超过信用额度，当月将无法再开单月结，
 *提示“该客户的剩余可用信息额度不足，不能开月结”；
 *4.	临时欠款时，需要客户中的信用额度超过运费，否则，提示“该客户的剩余可用信息额度不足，
 *不能开临时欠款”；
 *
 *确认会员资质SUC规则
 *1.	签约合同客户：
 *1.1	营业部合同客户只享受合同优惠；当有促销的优惠时，合同客户可享受最大优惠折扣，
 *但不叠加；（促销优惠为基础资料配置属性）
 *备注：当运单为网络订单（官网订单、阿里巴巴订单、淘宝订单、呼叫中心订单），
 *且客户为合同客户时，为了保证不重复享受折扣，
 *除运单是阿里巴巴订单且月结客户优惠类型为“普通货物打折方案”以阿里巴巴费率计算外，
 *其他情况都按照合同优惠来进行计算；
 *1.2	客户为非本部门的合同客户时，不在本部门享受合同优惠；；
 *合同客户有绑定其他营业部时，可在所绑定的其他营业部享受合同归属部门同等优惠；
 *1.3	所有合同客户可以减免综合服务费；
 *1.4	所有合同客户享受合同签订的保价费率和代收货款费率；
 *1.5	合同客户通过月结审核的，可选择付款方式为：“月结”；
 *其他客户不能选择为“月结”；
 *1.6	合同客户为“价格折扣”优惠时，客户发货除最低每票的运费不受影响外，
 *其他运费超过最低每票标准的，总运费按照其折扣比例打折优惠（折后总运费不低于最低每票标准运费）；
 *1.7	合同客户为“月发月送”优惠时，客户发货价格按照月发月送标准；
 *1.7.1.	开单不能含装卸费；
 *1.7.2.	当月发越送与空运同时存在时，以空运规则为准，可开装卸费；
 *1.8	合同客户有免费送货属性的，在优惠信息列表中自动优惠标准派送的送货费用，
 *对于月结属性的客户可以向下修改送货费，最小为0；其它所有情况的送货费不可向下修改，只能向上修改；
 *1.9	合同用户仅在合同有效期内享受合同优惠。
 *1.	非公司签约客户：
 *1.1	发货客户只能选择本部门的客户，但通过会员卡号可查询其他部门客户信息；
 *若客户为其它部门合同客户时，客户不享受合同优惠；
 *1.2	客户优惠信息由基础资料配置，优惠信息包括：我司享受优惠区域部门、
 *优惠类型（如线路优惠、货物类型优惠等，可配置）、
 *优惠名称，对应的的优惠的具体信息；
 *1.3	优惠类型有优先级，其优先级由基础资料配置；
 *（当普通优惠与促销优惠同时同在时，促销优惠优于普通优惠；）
 *1.4	系统自动根据承运信息，给出对应运单可享的优先级最高的优惠，
 *、当最高优先级并列出现时，默认勾选最大优惠的优惠方案；
 *对于同一优惠类型的优惠，存在互拆；
 *例：当线路优惠和区域优惠同时存在时，系统只给出线路优惠；
 *（点面原则（异常优先）：即点面同时存在时，以点为准。
 *如：优惠1：上海出发货8折优惠；优惠2：上海到广州9优惠，
 *由于优惠2包含于优惠1中，为优惠1的一个异常，
 *则在生成优惠信息时，只显示优惠2的优惠方案）；
 *1.5	阿里巴巴客户：
 *1.5.1	阿里巴巴订单导入开单时，对于诚信通会员，
 *系统按如下方式进行折扣：
 *运输类型
  *限制要求                 	普货	精准（长/短途）
 *起步价格	30元	40元/20元
 *小于1000公斤或5立方		
 *大于等于1000公斤或5立方		
 *（该折扣表内容由基础资料配置）
 *备注：对于阿里的普通会员，系统只减免2元的综合服务费。
 *1.5.2	阿里巴巴订单导入开单时，在“优惠方案中”自动新增“阿里巴巴优惠费”项，
 *且系统自动计算优惠金额。公布价仍显示为公司散客开单标准的公布价。
 *（阿里巴巴优惠费=公司标准公布价总运费—阿里巴巴折扣的总运费）；
 *也为公布价优惠的一种；
 *1.5.3	阿里诚信通会员客户下单后，阿里订单导入开单，
 *且“该客户同时为部门的月结客户，其月结优惠类型为‘普通货物打折方案’时”，
 *则开单时阿里价格优于月结客户价格，以“阿里诚信通会员价格方案”计算运费；
 *其他的月结优惠类型(公布价、价格折扣、月发月送)开单时月结客户价格优于阿里价格规则；
 *1.5.4	当阿里巴巴订单开空运和偏线不享受对应的阿里巴巴优惠，
 *但可享受正常开单的优惠；
 *1.	客户享受的优惠类型自动显示在优惠信息显示列表中；
 *2.	合同优惠包括公布价折扣优惠和增值服务优惠；
 *3.	对于公布价优惠：只显示客户可以享受的公布价优惠信息，
 *且默认勾选“合同规定的优惠方案”或“与合同优惠有冲突时，
 *系统规则使用的优惠方案”的公布价折扣优惠；
 *4.	当客户为合同客户时，不仅显示合同公布价优惠，
 *还显示对应线路或货物类型或货物种类等其它配置的所有与本次承运相关的公布价优
 *惠方案中系统规则使用的较合同优惠更优的优惠方案；
 *5.	当客户为合同客户时，若勾选非合同公布价优惠时且为非促销优惠时，
 *则不再享受对应客户的所有合同优惠（包括公布价优惠、增值服务优惠及月发月送、月结等优惠）；
 *6.	当客户为非合同客户时，自动默认勾选系统规则可使用的折扣最低的公布价优惠方案；
 *7.	公布价优惠方案只可勾选一种，不可多选；
 *8.	合同客户的增值服务优惠项不可修改（即不可以取消或增加勾选），
 *非合同客户的增值服务优惠项可修改（即可以取消或增加勾选）
 *9.	任何客户包含月结客户不可减免综合服务费
 *1.	公布价优惠金额=本次承运的公布价总价*（1-优惠折扣）；
 *2.	增值服务优惠金额：
 *2.1	保价费和代收手续款的优惠金额=声明价值/代收货款*（
 *公司标准的保价费率/代收费率-签约合同的保价费率/代收费率）；
 *2.2	其它优惠或费用减免由优惠规则配置生成；
 *1.	只有月结属性的客户才可以享受月结的付款方式；且当客户为月结客户时，
 *付款方式自动默认为月结；
 *2.	只有信用额度的客户才可以享受临时欠款的付款方式；且对应客户的信用额度全国统配，
 *不绑定部门，例：客户A在我司可享信用额度为5000，且其合同主体为部门a，
 *A已用额度为2000，且无论客户A在a部门发货，或是在其它任务我司的部门发货，
 *其可用额度均为3000；
 *3.	系统自动过滤客户不能享受的付款方式；
 *
 *
 *
 *录入发货客户信息SUC业务规则
 *营业员点击运单开单，进入运单开单界面。
 *本用例分为两个界面：录入发货客户信息、选择发货客户；
 *1.	录入发货客户信息：
 *界面为信息录入界面：包括：手机、电话、客户名称、
 *客户编码、发货联系人（发货部门）、发货人地址；
 *1.1	手机：发货人手机号码；
 *1.2	电话：发货人电话号码；
 *1.3	客户名称：发货客户公司或单位名称，可支持搜索查询；
 *1.4	客户编码：我司给客户的客户号；
 *1.5	发货联系人（发货部门，支持模糊搜索）：
 *发货客户的客户姓名，
 *当“运单开单”中的“开单提货方式”为“内部带货自提”时，
 *“发货联系人”字段更改为“发货部门”；
 *1.6	发货人地址：发货客户的详细联系地址，
 *支持国家行政区域自动过滤；
 *2.	选择发货客户界面：
 *界面为选择客户信息界面：包括两部分：
 *客户信息列表区域、功能按钮区域；
 *2.1.	客户信息列表区域：
 *包括：客户编码、客户名称、联系人、手机、
 *电话、地址(规范化地址和详细地址)；
 *2.2.	功能按钮区域：
 *包括：确定、取消；
 *3.	选择热门城市界面
 * 界面信息包含人热门城市
 *4.	选择省份界面
 *界面信息包含省份
 *5.	选择城市界面
 *  界面信息保护城市
 *6.	选择区县界面
 *       界面信息保护区县
 *1.6	操作步骤
 *1.6.1	录入
 *序号	基本步骤	相关数据	补充步骤
 *1	录入手机号码
 *	1.	系统自动查询CRM系统中对应手机号码绑定的客户信息，
 *	如果有弹窗，弹窗操作见扩展1a，如果没有，
 *	弹出FOSS历史开单记录中对应手机号码绑定的客户信息，并弹窗，弹窗操作见扩展1b；
 *2.	规则-请参见系统规则SR1；
 *
 *2	录入电话号码
 *	1.	如果手机号码没有填写，
 *	系统自动查询CRM系统中对应电话号码绑定的客户信息，
 *	如果有弹窗，弹窗操作见扩展2a，如果没
 *，弹出FOSS历史开单记录中对应手机号码绑定的客户信息，
 *并弹窗，弹窗操作见扩展2b；
 *2.	规则-请参见系统规则SR1；
 *
 *3	录入客户名称和客户编码		1.	规则-请参见系统规则SR2、SR3；
 *4	录入发货联系人（发货部门）		1.	规则-请参见系统规则SR4、SR5、SR8；
 *5	录入发货人地址		1.	提供下拉框选择输入，系统自动过滤输入的行政区下一级行政级的字段；
 *2.	规则-请参见系统规则SR6；
 *1.6.2	扩展
 *序号	扩展事件	相关数据	备注
 *1a	当录入的手机号码在CRM系统中有手机号码绑定的客户信息，
 *则自动弹窗并显示手机号码为录入的手机号的所有客户信息，
 *营业员选择录入一条记录，并确定；选择的客户信息自动带入发货客户信息中；
 *	客户信息	1.	规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则；
 *2.	规则-请参见系统规则SR5 、SR6、SR7；
 *
 *1b	当录入的手机号码在CRM系统中没有手机号码绑定的客户信息时，
 *如果该客户在这3个月有发过货，则弹出历史发货记录，
 *营业员选择录入一条记录，并确定；选择的客户信息自动带入发货客户信息中；
 *	客户信息	3.	规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则；
 *4.	规则-请参见系统规则SR5 、SR6、SR7；
 *
 *2a	当录入的电话号码在CRM系统中有电话号码绑定的客户信息，
 *则自动弹窗并显示电话号码为录入的电话号码的所有客户信息，
 *营业员选择录入一条记录，并确定；选择的客户信息自动带入发货客户信息中；
 *	客户信息	1.	规则-请参见系统用例SUC-492中的“1.6.2扩展2a”的规则；
 *2.	规则-请参见系统规则SR5、SR6、SR7；
 *
 *
 *2b	当录入的电话号码在CRM系统中没有电话号码绑定的客户信息时，
 *如果该客户在这3个月有发过货，则弹出历史发货记录，
 *营业员选择录入一条记录，并确定；选择的客户信息自动带入发货客户信息中；
 *	客户信息	1.	规则-请参见系统用例SUC-492中的“1.6.2扩展2a”的规则；
 *2.	规则-请参见系统规则SR5、SR6、SR7；
 *
 *1.7	业务规则
 *序号	描述
 *SR1	1.	发货客户手机号码及固定电话至少提供一个，手机号码只能为数字并且为11位；
 *2.	固定电话号码只能为数字，且可添加多个；添加多个时，
 *必须用“，”或“、”或“/”分开；固定电话号码字段也可以录入手机号；
 *3.	手机、电话为精确查询全公司客户信息
 *4.	手机、电话带出的客户信息会覆盖原来已带出的客户信息。
 *若未带出客户信息则当客户ID不为空时清空除手机外的其它已带出的客户信息（即），否则不清空
 *SR2	1.	若发货客户为公司会员客户，则录入发货客户信息后系统界面显示该发货客户联系人编码；
 *2.	客户名称精确查询全公司客户信息。当客户名称为带出的客户时（以隐藏的客户ID是否为空做为判断条件），
 *清空客户时则清空手机、电话、联系人、地址、行政区域、客户编码，否则只清空客户名称、客户编码、客户ID（隐藏）；
 *SR3	1.	若发货客户为会员客户，则录入发货客户信息后系统给予提示；
 *2.	提未信息为在运单开单界面下方加色放大显示；
 *3.	通过选择录入的客户名称和客户编码不可修改，但可删除录入；
 *SR4	1.	当“运单开单”中的“开单提货方式”为“内部带货自提”时，
 *“发货联系人”字段更改为“发货部门”；
 *2.	联系人不用带出客户信息
 *SR5	1.	若为公司内部带货，输入发货部门关键字支持模糊搜索 
 *SR6	1.	客户详细地址必填至乡/镇，且乡镇下一级内容不能为空；
 *2.	当鼠标点击规范化地址文本框时，显示如下图片，
 *包含热门城市、省份、城市、县区，选择热门城市，
 *会直接跳到区县，现在省份后自动跳到城市，
 *选择城市后自动跳到区县（必须选择完上一级行政区域后，才能选择下一行政区域），
 *选择完区县后，会把规范化地址显示在规范化文本框内，例如：江苏省-苏州市-相城区
 *3.	地址可以进行拼音和首写字母进行匹配，例如输入“GZ”会在规范化地址文本框下面显示 ；
 *匹配时可带出城市、区、县等符合的信息，该设计来自官网，具体可以参考官网
 *4.	当增值服务中有返单业务时，则发货人地址为必填项；其他情况非必填。
 *SR7	1.	使用电话号码和手机进行匹配，弹出CRM发货客户选择框进行选择，如果匹配不到，
 *再使用运单发货历史客户进行匹配，弹窗选择，选择后填充客户编码、客户名称、联系人、地址；
 *2.	但是对于电话号码匹配，只有当发货人手机、客户名称为空时，才会用电话号码检索并弹窗显示；
 *3.	使用手机号码、电话号码、客户名称弹出选择框选择记录后覆盖原先记录
 *4.	修改联系人时，需要清空客户名称 
 *5.	使用手机号码弹出选择框选择记录后覆盖原先记录，查询不到时，清空客户名称
 *6.	导入发货客户信息后，联系人名称不可修改，为灰色；当营业员进行清空发货客户的客户名称操作时，
 *联系人名称可修改，为可编辑状态；
 *7.	点击客户名称查询控件，弹出查询信息:窗口SUC-424-查找会员
 *8.	如果查询出来的记录只有一条，也需要进行选择
 *9.	发货客户名称精确查询且查询全公司
 *SR8	1. 发货人省市区默认为始发营业部的省市区
 *
 *
 *录入收货客户SUC业务规则
 *营业员点击运单开单，进入运单开单界面。
 *本界面分为两个界面：录入收货客户信息、选择收货客户。
 *1.	录入收货客户信息：
 *界面为信息录入界面：包括：手机、电话、发货收货联系人（发货收货部门）、发货收货人地址；
 *1.1	手机：发货收货人手机号码；
 *1.2	电话：发货收货人电话号码；
 *1.3	收货联系人（收货部门）：收货客户的客户姓名，当“运单开单”中的“开单提货方式”为“内部带货自提”时，“收货联系人”字段更改为“收货部门”；
 *1.4	收货人地址：收货客户的详细联系地址，支持国家行政区域自动过滤；
 *1.5	客户名称
 *1.6	客户编码
 *2.	选择收货客户界面：
 *界面为选择客户信息界面：包括两部分：客户信息列表区域、功能按钮区域；
 *2.1.	客户信息列表区域：
 *包括：联系人、手机、电话、地址（规范化地址和详细地址）；
 *2.2.	功能按钮区域：
 *包括：确定、取消；
 *3.	    选择热门城市界面
 *   界面信息包含人热门城市
 *4.	选择省份界面
 *  界面信息包含省份
 *5.	选择城市界面
 *           界面信息保护城市
 *6.	选择区县界面
 *          界面信息保护区县
 *
 *1.6	操作步骤
 *1.6.1	录入
 *序号	基本步骤	相关数据	补充步骤
 *1	录入手机号码		1.	系统自动查询CRM系统中对应手机号码绑定的客户信息，
 *如果有弹窗，弹窗操作见扩展1a，和如果没有，
 *弹出FOSS历史开单记录中对应手机号码绑定的客户信息，
 *并弹窗，弹窗操作见扩展1b；
 *2.	规则-请参见系统规则SR1、SR5、SR6；
 *2	录入电话号码		1.	如果手机号码没有填写，
 *系统自动查询CRM系统中对应电话号码绑定的客户信息，
 *如果有弹窗，弹窗操作见扩展2a，如果没有，
 *弹出FOSS历史开单记录中对应手机号码绑定的客户信息，
 *并弹窗，弹窗操作见扩展2b；
 *1.	1、系统自动查询CRM系统中对应电话号码绑定的客户信息
 *和FOSS历史开单记录中对应手机号码绑定的客户信息，并弹窗，
 *弹窗操作参见扩展2a；
 *2.	规则-请参见系统规则SR1、SR5 、SR6；
 *3	录入收货联系人（收货部门）		
 *1.	规则-请参见系统规则SR2、SR3；
 *4	录入收货人地址		
 *1.	提供下拉框选择输入，系统自动过滤输入的行政区下一级行政级的字段；
 *2.	地址在系统后台通过GIS系统进行匹配，
 *如果是禁行区域，地址颜色为红色，如果是进仓区域，地址颜色为黄色
 *3.	规则-请参见系统规则SR4；
 *1.6.2	扩展
 *序号	扩展事件	相关数据	备注
 *1a	当录入的手机号码在CRM系统中有手机号码绑定的客户信息，
 *则自动弹窗并显示手机号码为录入的手机号的所有客户信息，
 *营业员选择录入一条记录，并确定；选择的客户信息自动带入收货客户信息中；
 *当光标焦点移至录入手机号码时，系统自动调用CRM系统对应发货客户的历史发货记录，
 *并自动弹窗显示所有该发货客户的历史发货记录；营业员选择一条记录，并确定，
 *选择的客户信息自动带信收货客户信息中；	客户信息
 *	1.	规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则；
 *2.	规则-请参见系统规则SR5 、SR6；
 *1.	规则-请参见系统规则SR5；
 *1b	当录入的手机号码在CRM系统中没有手机号码绑定的客户信息时，
 *则如果该客户在这3个月有发过货，则弹出历史收货记录自动弹窗并显示手机号码为录入的手机号的所有客户信息，
 *营业员选择录入一条记录，并确定；选择的客户信息自动带入收货客户信息中；	
 *客户信息	1.	规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则；
 *2.	规则-请参见系统规则SR5 、SR6；
 *2a2a	当录入的电话号码在CRM系统中有电话号码绑定的客户信息，
 *则自动弹窗并显示电话号码为录入的电话号码的所有客户信息，
 *营业员选择录入一条记录，并确定；选择的客户信息自动带入收货客户信息中；
 *当录入的电话号码在CRM系统中有电话号码绑定的客户信息，
 *则自动弹窗并显示电话号码为录入的电话号码的所有客户信息，
 *营业员选择录入一条记录，并确定；选择的客户信息自动带入收货客户信息中；
 *	客户信息客户信息	1.	规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则；
 *2.	规则-请参见系统规则SR5 、SR6；
 *1.	规则-请参见系统用例SUC-492中的“1.6.2扩展2a”的规则；
 *2.	规则-请参见系统规则SR6；
 *
 *2b	当录入的电话号码在CRM系统中没有电话号码绑定的客户信息时，
 *如果该客户在这3个月有发过货，则弹出历史收货记录，
 *营业员选择录入一条记录，并确定；选择的客户信息自动带入收货客户信息中；
 *	客户信息	1.	规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则；
 *2.	规则-请参见系统规则SR5 、SR6；
 *	
 *1.7	业务规则
 *序号	描述
 *SR1	1.	收货客户手机号码及固定电话至少提供一个，手机号码只能为数字并且为11位，
 *固定电话号码只能为数字，且可添加多个；
 *SR2	1.	当“运单开单”中的“开单提货方式”为“内部带货自提”时，
 *“收货联系人”字段更改为“收货部门”；
 *SR3	1.	若为公司内部带货，则收货客户信息中的收货部门名称必须与OA系统中组织架构名称保持一致；
 *SR4	1.	客户详细地址必填至乡/镇，且乡镇下一级内容不能为空；
 *
 *2.	当鼠标点击规范化地址文本框时，显示如下图片，
 *包含热门城市、省份、城市、县区，选择热门城市，会直接跳到区县，
 *现在省份后自动跳到城市，
 *选择城市后自动跳到区县（必须选择完上一级行政区域后，才能选择下一行政区域），
 *选择完区县后，会把规范化地址显示在规范化文本框内，例如：江苏省-苏州市-相城区
 *3.	地址可以进行拼音和首写字母进行匹配，例如输入“GZ”会在规范化地址文本框下面显示 ；
 *匹配时可带出城市、区、县等符合的信息，该设计来自官网，具体可以参考官网
 *4.	当提货方式含“自提”时，收货人地址为非必填项；
 *SR5	1.	使用电话号码和手机进行匹配，如果是唯一匹配一条CRM客户信息时，
 *填充客户编码、客户名称、联系人、地址，如果有多条需弹出选择框进行选择，
 * 如果查询不到CRM客户信息时，使用FOSS三个月运单历史记录中的收货信息查询，
  *唯一匹配一条进行填充收货客户信息，多条进行弹窗选择，如果都查询不到，不做其他操作
 *2.	但是对于电话号码匹配，只有当发货人手机、客户名称为空时，才会用电话号码检索并弹窗显示
 *3.	使用手机号码、电话号码、客户名称弹出选择框选择记录后覆盖原先记录
 *4.	修改联系人时，需要清空客户名称，当清空客户名称时，会同时删除客户编码
 *5.	使用手机号码、电话号码弹出选择框选择记录后覆盖原先记录
 *6.	点击客户名称查询控件，弹出查询信息:窗口SUC-424-查找会员
 *7.	身份证号、客户编码、客户名称、联系人编码可以查询到全公司的客户
 *1.	只有当收货人手机为空，且发货客户信息已录入时，才会检索并弹窗显示；
 *2.	若未查询到历史记录，则无法提示；
 *3.	通过选择录入的收货人信息均可修改；
 *4.	使用号码进行匹配，如果是唯一匹配一条CRM客户信息时，填充客户编码和客户名称，如果有多条不做操作
 *SR6	1.	通过选择录入收货发货信息，同时带出对应的目的站和提货网点信息；
 *2.	带出目的站仍然使用GIS进行查询，并以GIS返回为准；
 *3.	若GIS未查询得出，则以历史开单的目的站和提货网点信息为准；
 *
 *
 *查找会员SUC业务规则
 *营业员点击运单开单界面中的查询客户，进入查询客户信息界面。
 *本界面为查询客户信息。
 *界面主要分为三个部分：查询条件区域、查询结果区域、功能按钮。
 *1.	查询条件区域：
 *1.1	会员卡号：支持会员卡号的模糊搜索，并可查询部门全部会员信息；
 *1.2	发货联系人
 *1.3	电话
 *1.4	客户编码
 *1.5	客户名称
 *1.6	手机
 *1.7	发货人地址
 *1.8	复选框"查询全公司"
 *2.	查询结果区域：
 *2.1	客户编码
 *2.2	客户名称
 *2.3	联系人编码
 *2.4	月结审核
 *2.5	联系人
 *2.6	手机
 *2.7	电话
 *2.8	身份证
 *2.9	信用额度
 *2.10	地址
 *2.11	越发越送审核编号
 *2.12	生效时间
 *2.13	失效时间
 *3.	功能按钮：
 *3.1	重置：
 *3.2	查询；
 *3.3	查询部门会员
 *1.6	操作步骤
 *1.6.1	录入
 *序号	基本步骤	相关数据	补充步骤
 *1	录入查询条件，查询符合条件的客户信息	查询条件信息	
 *1.	系统查询CRM系统中本部门符合条件的客户信息；
 *2.	规则-请参见系统规则SR1；
 *2	查询本部门所有的会员客户信息		
 *1.	规则-请参见系统规则SR2；
 *3	导入选择的客户信息至发/收货客户信息中：双击选中的客户信息，
 *对应客户信息进入发/收货客户信息中		
 *1.	规则-请参见系统规则SR3；
 *1.6.2	扩展
 *序号	扩展事件	相关数据	备注
 *1a	步骤1中，若未查询到符合条件的客户信息，系统给予提示		
 *1.	提示信息为“未查询到符合条件的客户信息！”；
 *2b	步骤2号，若本部门无会员，系统给予提示		
 *1.	提示信息为“部门无会员信息！”；
 *1.7	业务规则
 *序号	描述
 *SR1	1.	支持单一和组合查询条件查询；
 *2.	只有勾选复选框时，按照身份证号、客户编码、
 *客户名称、联系人编码精确查全公司客户信息且查询条件中包含有身份证号、
 *客户编码、客户名称、联系人编码其中任意一项时，忽略其它查询条件，
 *否则为模糊查询本部门客户信息；
 *3.	当查询到的记录为某客户编码中的其中一条信息时，
 *显示该编码对应的所有的客户信息；
 *4.	当客户为越发越送客户时，则显示该客户对应的越发越送审核编号、
 *生效时间、失效时间；当越发越送审核编号有多个时，则只显示最后一次审核信息；
 *SR2	1.	当条件都为空时，点击查询按钮，查询出本部门会员；
 *SR3	1.	通过查询条件带出的客户信息被填充到相关控件中时，
 *发货客户联系人为不可修改状态，
 *若要修改则需要清空全部带出的客户信息；
 *
 *
 *确认公布总价SUC业务规则
 *1	打开“运单开单”界面。		
 *2	录入发货人信息		参考SUC-492
 *3	录入收货客户信息		参考SUC-493
 *4	录入货物信息		参考SUC-494
 *5	录入运输信息		参考SUC-496
 *进行前面5操作之后，若是空运，
 *系统读取空运公布价价格方案（基础资料参考SUC-581）
 *计算出公布总价，显示在运单开单界面。
 *若是汽运，系统读取汽运公布价价格方案（基础资料参考SUC-581）
 *计算出公布总价，
 *显示在运单开单界面。
 *参考规则SR1，SR2，SR3
 *扩展事件写非典型或异常操作过程
 *序号	扩展事件	相关数据	备注
 *5a			
 *5b			
 *1.7	业务规则
 *序号	描述
 *SR1	1）汽运：上门发货汽运运费最低X元一票；
 *（同城、卡航；可配置）；
 *上门接货汽运运费最低X元一票；（同城、卡航；可配置）；
 *2）空运：空运运费最低X元一票；（可配置）；
 *SR2	1）汽运：当货物为“接货”时，
 *系统自动匹配生成公布价“接货价格方案”；
 *当货物为“非接货”时，
 *系统自动匹配生成公布价“非接货的价格方案”；
 *2）空运：系统自动匹配公布价 “空运价格方案”；
 *空运价格只有上门发货一套价格方案，
 *如有接货费在其他费用里添加一项接货费。
 *SR3	1）计费方式分为重量计费、体积计费；
 *重量、体积计费的运费=每公斤单价与货物实际重量的乘积 或 每方单价与货物实际体积的乘积，
 *对于一票货物，系统按重量和体积分别计算并取大优先的原则计费给出公布价总运费,
 *计费方式即为取大的一方；
 *
 *运单提交SUC业务规则
 *客户上门发货确认承运信息后，营业员告知客户运输费用后，
 *为客户开具运单，打印标签并粘贴至货物的过程。
 *1.3	用例条件
 *条件类型	描述	引用系统用例
 *前置条件	1.	运单已填写完整	
 *DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入发货客户信息-V0.1.doc
 *DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入货物信息-V0.2.doc
 *DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入收货客户信息-V0.1.doc
 *DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入运输信息-V0.1.doc
 *DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息-V0.1.doc
 *DP-FOSS-接送货系统用例-客户上门-根据订单确认承运信息-导入订单-V0.1.doc
 *DP-FOSS-接送货系统用例-客户上门-确认承运信息-查询目的站-V0.1.doc
 *DP-FOSS-接送货系统用例-客户上门-承运计费报价-确认公布总价-V0.1.doc
 *后置条件	1.	传送运单号、金额、帐号等结算数据到财务子系统
 *2.	传送货物名称、件数、重量等货物信息到中转子系统，安排运输计划
 *3.	传送运单号等信息到官网，客户查询运单状态
 *4.	给收货人发送出发短信，给上门接货客户发送短信
 *5.	订单信息反馈给给CRM系统，订单处理结果为：已开单。
 *6、 当运输性质为精准空运时，
 *提交成功后会自动生成订舱信息流到最终配载部门（即总调）的舱位信息中	
 *1.4	操作用户角色
 *操作用户	描述
 *营业员	1.  确认客户承运信息，开单收货，
 *收取现付金额，且打印标签及运单出发联让客户签字确认。
 *1.5	界面要求
 *1.5.1	表现方式
 *Web方式
 *1.5.2	界面原型
 *1.5.2.1	集中开单界面
 *1.5.2.2	营业部开单界面
 *1.5.2.3	运单确认提交界面
 *1.5.3	界面描述
 *1.5.3.1	营业部、集中开单界面
 *界面共包括7个部分：1、发货客户信息；
 *2、收货客户信息；3、货物信息；
 *4、运输信息；5、增值服务信息；
 *6、计费付款；7、功能按钮。
 *具体描述参考DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入发货客户信息-V0.1.doc
 *DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入货物信息-V0.2.doc
 *DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入收货客户信息-V0.1.doc
 *DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入运输信息-V0.1.doc
 *DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息-V0.1.doc
 *1.5.3.2	运单确认提交界面
 *界面共包括3个部分：1、运单基本信息；
 *2、功能复选框；3、功能按钮
 *1、运单基本信息：单号、到付总运费、预付总运费、
 *代收货款、保险价值、收货人名称、付款方式、提货网点、
 *提货方式、收货人地址、收货人电话、货物名称、
 *重量/体积/件数、包装、重量/体积/件数（代打木架）。
 *2、功能选项：打印运单下拉框有各种版本（可以配置，且可以配置默认模板）
 *（选择之后，点击确定系统自动打印运单，只能选其一，参考规则SR8）、
 *打印标签（选择之后，点击确定系统自动打印标签）、
 *提交后新增（选择之后，点击确定系统打开一个新的开单界面）。
 *3、功能按钮：确定、取消 。
 *1.6	操作步骤
 *序号	基本步骤	相关数据	补充步骤
 *1	营业员“填写”完整的运单信息。		
 *2	点击暂存	1、客户上门提供的货物承运信息。
 *2、来此crm系统订单的数据。
 *3、上门接货客户提供的承运信息。
 *	1、用户暂存的运单数据时允许修改
 *23	点击“提交”按钮提交运单。	
 *1、客户上门提供的货物承运信息。
 *2、来此crm系统订单的数据。
 *3、上门接货客户提供的承运信息。
 *	1、点击运单“提交”按钮，弹出“运单确认提交页面”，
 *页面默认选择上“打印运单（全打）”、“打印标签”、
 *“确定后新增运单”复选框。
 *2、提交后，同步数据到中转子系统，、CRM系统、官网系统，
 *财务子系统。(将单独出来写接口用例，此处将参考这些接口系统用例)
 *3、系统自动根据出发部门、运输性质、到达部门生成默认唯一走货路径(基础资料)； 
 *参考综合系统基础资料用例。
 *4、当运输性质为精准空运时，提交成功后会自动生成订舱信息
 *（包括：预计出发时间、航班时间（早中晚）、重量）
 *流到最终配载部门（即总调）的舱位信息中。
 *5、保存使用的价格版本号
 *56、参考规则SR1、SR12
 *34	点击运单确认提交页面的“确定”按钮。		
 *1、点击确定后，打开一个新的运单开单界面。
 *2、系统自动打印运单,选择系统默认的打印模板，
 *参考DP-FOSS-接送货系统用例-客户上门-确认承运信息-打印运单-V0.1.doc
 *3、系统自动打印标签，参考DP-FOSS-接送货系统用例-客户上门-确认承运信息-打印标签V0.1.doc
 *4、调用中转入库接口 参考规则SR13
 *45	若有签收单返单时，需要打印签收单标签，
 *打印内容包括：单号、始发部门、到达部门、目的站。		
 *参考SUC-504打印签收单标签(整车)
 *扩展事件写非典型或异常操作过程
 *序号	扩展事件	相关数据	备注
 *2a	营业员在弹出代打木架对话框“录入第X件”需要打木架。		
 *若货物需要代打木架，系统自动弹出代打木架对话框。代打木架精确到第几件。
 *参考规则SR3
 *2b2a	如运单必填信息未填写完整或填写内容不符合要求
 *（参考数据元素输入限制、长度、是否必填、运单号重复等），
 *提交时给予提示。		提示为：“×××未填写整或输入内容不符合要求，请重新输入！”，
 *且将此文本输入框标记为红色，光标置于此文本框中。
 *重新填写正确完整后，跳转步骤1。
 *参考规则SR7
 *2c2b	若为月结或临时欠款， 如果客户既有应收账款金额加上本次应收金额超过客户最大信用额度，
 *不能提交开单。		弹出提示：客户既有应收账款金额加上本次应收金额超过客户最大信用额度，
 *不能提交开单。参考SR9
 * *2d2c	若为月结或临时欠款，如果客户已有应收账款超过最大账期，不能提交开单。		
 * 弹出提示：客户已有应收账款超过最大账期，不能提交开单。参考SR9
 *2e2d	提交时，当重量体积比不在设置的区间（重量体积比基础资料）中，
 *弹出提示“请确认录入的重量体积是否准确！”；
 *（该弹窗有两个按钮：确定、取消）点击确定时，弹出确认运单信息界面；
 *点击取消，点返回运单录入界面；当X在区间中，无提示；
 *直接进入确认运单信息界面；		参考规则SR10
 *3a	步骤3中，可点击“取消”按钮，取消提交运单。		
 *取消提交运单，返回到系统运单开单界面，界面信息可编辑，
 *修改信息后，可再次进行提交，跳到步骤2。
 *3b	步骤3中，也可取消选择默认选择的复选框。		
 *1、如取消选择“打印运单”，确定之后，系统不进行自动打印运单，
 *需点击开单界面上的“打印运单”按钮，打印运单出发联。
 *2、如取消选择“确定后新增运单”，确定之后，
 *系统返回到填写完整的运单开单界面，但是运单界面成灰色不可编辑，
 *需点击开单界面上的“新增”按钮，新增运单。
 *3、如取消选择“打印标签”，确定之后，
 *系统不进行自动打印标签，需点击开单界面上的“打印标签”按钮，打印运单标签。
 *1.7	业务规则
 *序号	描述
 *SR1	1、若为上门接货，开单提交生成后，
 *系统短信通知发货人及收货人。
 *短信模板可在系统中进行设置。
 *给发货人或收货人发送短信时，
 *若无手机号码则不发送。
 *发送短信内容中包含“货物的件数”。
 *注：“货物的件数”为货物包装之前的件数。
 *系统自动给发货人、收货人发送货物出发短信（短信模板内容可配置）；
 *否则只需要给收货人发短信；若收发货人无手机号码则不发送。
 *给收货人的短信内容：您好！这里是德邦物流，
 *（发货人姓名***）从（出发城市***）给您发来货物，
 *单号为（****）的（***货物的件数）件货，即日出发。
 *目的地（*****客户的收获地址）。附：德邦物流营业部的电话、地址、营业部名称。
 *给发货人的短信内容：您好！这里是德邦物流，
 *您从（出发城市***）给（收货人姓名***）托运的货物，
 *单号为（****）的（***货物的件数）件货，即日出发。
 *目的地（*****客户的收获地址）。附：德邦物流营业部的电话、地址、营业部名称。
 *SR2	运单现付金额不为0，则在出发部门生成现金收款单；
 *若到付金额不为0，则在到达部门生成应收单若付款方式为“现付”，
 *“银行卡”，则在出发部门生成现金收款单；
 *若付款方式为“到付”在到达部门生成应收单。
 *若付款方式为“临时欠款”，“网上支付”，
 *“月结”在出发部门生成应收单；若运单包含“代收货款”，
 *则在出发部门生成应付单，到达部门生成应收单；
 *若运单包含“装卸费”，则在出发部门生成应付单。
 *SR3	开单代打木架外场默认为第一外场，
 *如果第一外场不支持打木架，则营业员自己判定选择的代打木架外场。
 *开单代打木架外场默认为开单走货路径中第一个可代打木架的外场，不可修改。 
 *1）若货物包装中含有“木”字样，且走货路径上有代打木架外场，
 *系统提示：是否需要代打木架？； 
 *2）选择代打木架后，若默认的代打木架外场非走货路径上第一外场时，
 *系统给予提醒，便于营业员与客户衡量是否继续代打木架； 
 *3）若货物包装中含有“木”字样，但走货路径上没有可代打木架的外场，
 *则不能开代打木架，系统提示：走货路径上没有可代打木架的外场，不能代打木架。
 *SR4	当运输性质为 “精准卡航”及“精准城运”时，
 *系统自动计算预计出发时间与预计提货/派送时间。
 *①预计出发时间：
 *由预计出发日期和准点出发时点（取自基础资料）组成，
 *形如【2012-04-09  12:00:00】。
 *若开单当前时点在准点出发时点前，
 *则预计出发日期=开单日期；否则，预计出发日期=开单日期+1；
 *② 预计提货时间（开单提货方式为自提）： 
 *由预计提货日期和到达营业部承诺时点（取自基础资料）组成，
 *形如【2012-04-09  12:00:00】。若为当天出发，
 *则预计提货日期=预计出发日期+到达营业部承诺天数；
 *否则预计提货时间=预计出发日期+到达营业部承诺天数-1。
 *③ 预计派送时间（开单提货方式为送货）：
 *    由预计派送日期和派送承诺时点（取自基础资料）组成，
 *    形如【2012-04-09  12:00:00】。若为当天出发，
 *    预计派送时间=预计出发日期+到达营业部承诺天数+派送承诺需加天数；
 *    否则预计派送时间=预计出发日期+派送承诺需加天数-1。
 *SR5	如果开单信息来自集中或非集中上门接货：
 *1、司机有PDA  PDA开单后：则点击“PDA补录”走PDA补录流程引用系统用例SUC-491-补录运单。
 *2、司机无PDA  则新增运单，进入开单界面走提交运单流程。
 *SR6	“运单确认提交界面”上的复选框可以单选，可以多选。
 *SR7	提交时系统校验规则参考如下用例规则：
 *SUC-492录入发货客户信息
 *SUC-493录入收货客户信息
 *SUC-494录入货物信息
 *SUC-495录入增值服务信息
 *SUC-496录入运输信息
 *SUC-311导入订单
 *SUC-397 确认公布总价
 *SUC-126 查询目的站
 *SR8	运单确认提交页面，打印运运单下拉框只能选其一，
 *默认为运单模板配置基础资料中配置默认的模板，
 *如果不需要打印，不勾选即可。
 *SR9
 *	若为月结或临时欠款，则系统需要对客户应收账款日期及信用额度进行判断：
 *1）欠款天数
 *以客户为基本单位，开单/派送时付款方式为“临时欠款”，
 *最长一笔欠款时间超过30天，该客户将不能继续开单为“临时欠款”，
 *假如客户的临时欠款未还款金额超过客户自己的信用额度，
 *也不能继续开单；开单付款方式为“月结”，最长一笔欠款时间超过70天，
 *该客户将不能继续开单为“月结”；（始发应收账款从开单之日起计算，
 *到付应收账款从第一次派送出库之日起计算，以更改方式更改为“临时欠款”或“月结”的，
 *从开单之日开始计算）
 *2）欠款额度
 *临时欠款：以部门为单位，根据收入等级（前三个月最高收入金额）
 *设置该部门每月临时欠款最高额度（余额），详见下表；
 *当部门临时欠款未还款金额大于该金额时，
 *将无法继续开单未“临时欠款”；
 *收入区间	项目
 *10万以下	3万
 *10-15万	5万
 *15-20万	7万
 *20-30万	10万
 *30-50万	15万
 *50-100万	20万
 *100万以上	40万
 *月结：以客户为单位，连续2个月发货金额在3000元以上可申请月结，
 *月结额度不得高于近期最高走货金额的2倍，
 *若客户连续两月发货量低于2000元，取消月结权限。
 *SR10	1. 系统设置货物重量体积比区间值（该值由基础资料配置），
 *在运单提交时，系统自动对重量体积比进行校验：即重量体积比X=重量/体积；
 * 当X不在设置的区间中，弹出提示“请确认录入的重量体积是否准确！”；
 * （该弹窗有两个按钮：确定、取消）点击确定时，弹出确认运单信息界面；
 * 点击取消，点返回运单录入界面；当X在区间中，无提示；
 * 直接进入确认运单信息界面；
 *SR11	1）用户可以随时录入运单信息随时暂存运单，
 *但必须录入打印标签所需的关键字段才可暂存运单。
 *目前暂存运单打印标签所需运单信息包含收货部门、
 *运单号、目的站、提货网点、运输性质、提货方式、包装、件数。
 *（注：当走货路由经过特定的城市时还需要录入货物类型） 
 *2）系统对录入的运单信息合法性进行校验； 
 *3）运单暂存后不生成正式运单信息、库存信息及财务单据； 
 *4）用户可对已暂存的运单进行修改、暂存、提交（生成正式运单）； 
 *5）若暂存运单，系统锁定运单号及订单信息； 
 *6）暂存的运单不可打印运单出发联；
 *SR12	若PDA开单已打印标签，
 *在提交运单后弹出的确认界面中打印标签默认不勾选，
 *若需打印标签则手动勾选"打印标签"复选框。
 *SR13	1）、如果开单组织是营业部门，
 *那么开单提交时，
 *检验是否是驻地部门，如果是驻地部门，
 *入库对应驻地部门外场，
 *如果是营业部，入库对应营业部
 *2）、如果开单组织是开单组，那么开单提交时，
 *校验是否已经打印标签，如果没有，入库配载部门；
 *
 *
 *录入运输信息（整车）SUC业务规则
 *营业员点击整车运单开单，进入整车运单开单界面。
 *本界面为录入整车运输信息。
 *界面信息包括：收货部门、单号、目的站、提货网点、
 *对外备注、对内备注、储运注意事项、配载部门、
 *最终配载部门、到达类型
 *1.	收货部门：揽货部门；
 *2.	单号：运单单号；
 *3.	提货网点：收货客户可以领取货物的部门；
 *4.	对外备注：客户可以看到的备注信息，包括：空、
 *保丢不保损、“不承保发霉、变质、虫蛀虫咬之损失”、
 *“ 不承保刮花、变形、撞凹之损失”、不可重压、易潮、
 *不可倒置、客户指定提货网点；
 *5.	对内备注：仅限公司内部人员看到的备注信息；
 *6.	到达类型：到达客户处还是到达营业部
 *7.	储运注意事项：对外备注和对内备注信息的叠加；
 *8.	配载部门:开单收货部门出发货配载专线；
 *1.6	操作步骤
 *序号	基本步骤	相关数据	补充步骤
 *1	录入收货部门		1.	规则-请参见系统规则SR1；
 *2	录入单号		系统校验单号的合法性
 *1.	规则-请参见系统规则SR2；
 *3	录入提货网点		1.	 规则-请参见系统规则SR3；
 *4	录入对外备注		1.	 规则-请参见系统规则SR4；
 *5	录入对内备注		
 *6	到达类型		1.	规则-请参见系统规则SR5；
 *6	生成储运注意事项		1.	规则-请参见系统规则SR6；
 *7	生成配载部门		1.	规则-请参见系统规则SR7；
 *8	生成最终配载部门		1.  规则-请参见系统规则SR8；
 *1.7	业务规则
 *序号	描述
 *SR1	1.	收货部门默认为操作者所在的部门，不可修改；
 *SR2	1.	单号最大长度为8位，如果超过提示“单号大于8位”
 *2.	单号不能少于8位，“如果少于8位“单号长度少于7位”
 *3.	单号与最近开单单号前六位如果不等，那么提示“前后两票单号相差过大，
 *请检查所输单号是否为本部门所属单号！”
 *SR3	1.	提货网点可由收货客户地址的城市生成，也可手工选择；
 *2.	系统自动过滤只显示符合录入文本条件的网点信息；
 *SR4	参考SUC-496 录入运输信息 对对外备注的处理
 *SR5	1.	如果在 “是否经过营业部”打勾，付款方式可以选择到付项，
 *代收货款框可以修改；
 *2.	如果在“是否经过营业部”不打勾，付款方式中的到付项自动移除，
 *代收货款清0且不可修改；
 *SR6	1.	储运注意事项=对外备注&对内备注，各字段以“；”分开；
 *2.	对外备注永远在储运注意事项的最前面；
 *SR7	1.	通过出发部门和提货网点系统自动匹配始发配载部门基础资料；
 *
 *
 *录入收货客户信息（整车）SUC业务规则
 *营业员点击运单开单，进入运单开单界面。
 *本界面分为两个界面：录入收货客户信息、选择收货客户。
 *1.	录入收货客户信息：
 *界面为信息录入界面：包括：手机、电话、发货收货联系人（发货收货部门）、
 *发货收货人地址；
 *1.1	手机：发货收货人手机号码；
 *1.2	电话：发货收货人电话号码；
 *1.3	收货联系人（收货部门）：收货客户的客户姓名，
 *当“运单开单”中的“开单提货方式”为“内部带货自提”时，
 *“收货联系人”字段更改为“收货部门”；
 *1.4	收货人地址：收货客户的详细联系地址，
 *支持国家行政区域自动过滤；
 *1.5	客户名称
 *1.6	客户编码
 *2.	选择收货客户界面：
 *界面为选择客户信息界面：包括两部分：
 *客户信息列表区域、功能按钮区域；
 *2.1.	客户信息列表区域：
 *包括：联系人、手机、电话、地址（规范化地址和详细地址）；
 *2.2.	功能按钮区域：
 *包括：确定、取消；
 *3.	    选择热门城市界面
 * 界面信息包含人热门城市
 *4.	选择省份界面
 *   界面信息包含省份
 *5.	选择城市界面
 *           界面信息保护城市
 *6.	选择区县界面
 *      界面信息保护区县
 *1.6	操作步骤
 *1.6.1	录入
 *序号	基本步骤	相关数据	补充步骤
 *1	录入手机号码		
 *1.	系统自动查询CRM系统中对应手机号码绑定的客户信息，
 *如果有弹窗，弹窗操作见扩展1a，
 *如果没有，弹出FOSS历史开单记录中对应手机号码绑定的客户信息，
 *并弹窗，弹窗操作见扩展1b；
 *2.	规则-请参见SUC-493-录入收货客户信息SR1、SR5、SR6；
 *2	录入电话号码		1.	如果手机号码没有填写，
 *系统自动查询CRM系统中对应电话号码绑定的客户信息，
 *如果有弹窗，弹窗操作见扩展2a，
 *如果没有，弹出FOSS历史开单记录中对应手机号码绑定的客户信息，
 *并弹窗，弹窗操作见扩展2b；
 *2.	1、规则-请参见SUC-493-录入收货客户信息SR1、SR5 、SR6；
 *3	录入收货联系人		1.	
 *4	录入收货人地址		
 *1.	提供下拉框选择输入，
 *系统自动过滤输入的行政区下一级行政级的字段；
 *2.	地址在系统后台通过GIS系统进行匹配，
 *如果是禁行区域，地址颜色为红色，如果是进仓区域，地址颜色为黄色
 *3.	规则-请参见系统规则SR4；
 *1.6.2	扩展
 *序号	扩展事件	相关数据	备注
 *1a	当录入的手机号码在CRM系统中有手机号码绑定的客户信息，
 *则自动弹窗并显示手机号码为录入的手机号的所有客户信息，
 *营业员选择录入一条记录，并确定；选择的客户信息自动带入收货客户信息中；
 *	客户信息	1.	规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则；
 *2.	规则-请参见SUC-493-录入收货客户信息SR5 、SR6；
 *1b	当录入的手机号码在CRM系统中没有手机号码绑定的客户信息时，
 *如果该客户在这3个月有发过货，则弹出历史收货记录，
 *营业员选择录入一条记录，并确定；选择的客户信息自动带入收货客户信息中；
 *	客户信息	1.	规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则；
 *2.	规则-请参见SUC-493-录入收货客户信息SR5 、SR6；
 *
 *2a	当录入的电话号码在CRM系统中有电话号码绑定的客户信息，
 *则自动弹窗并显示电话号码为录入的电话号码的所有客户信息，
 *营业员选择录入一条记录，并确定；选择的客户信息自动带入收货客户信息中；
 *	客户信息	1.	规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则；
 *2.	规则-请参见SUC-493-录入收货客户信息SR5 、SR6；
 *3.	
 *2b	当录入的电话号码在CRM系统中没有电话号码绑定的客户信息时，
 *如果该客户在这3个月有发过货，则弹出历史收货记录，
 *营业员选择录入一条记录，并确定；选择的客户信息自动带入收货客户信息中；
 *	客户信息	1.	规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则；
 *2.	规则-请参见SUC-493-录入收货客户信息SR5 、SR6；
 *4.	
 *1.6.1	录入
 *序号	基本步骤	相关数据	补充步骤
 *1	录入手机号码		
 *1.	系统自动查询CRM系统中对应手机号码绑定的客户信息和
 *FOSS历史开单记录中对应手机号码绑定的客户信息，并弹窗，
 *弹窗操作见扩展1b；
 *2.	规则-请参见系统规则SR1；
 *2	录入电话号码		
 *1.	系统自动查询CRM系统中对应电话号码绑定的客户信息和FOSS历史开单记录中对应手机号码绑定的客户信息，
 *并弹窗，弹窗操作参见扩展2a；
 *2.	规则-请参见系统规则SR1；
 *3	录入客户名称		
 *1.	规则-请参见系统规则SR2
 *4	录入收货联系人		
 *5	录入收货人地址		
 *1.	提供下拉框选择输入，
 *系统自动过滤输入的行政区下一级行政级的字段；
 *2.	地址在系统后台通过GIS系统进行匹配，
 *如果是禁行区域，地址颜色为红色，
 *如果是进仓区域，地址颜色为黄色;
 *3.	规则-请参见系统规则SR3；
 *1.6.2	扩展
 *序号	扩展事件	相关数据	备注
 *1a	当光标焦点移至录入手机号码时，
 *系统自动调用CRM系统对应发货客户的历史发货记录，
 *并自动弹窗显示所有该发货客户的历史发货记录；
 *营业员选择一条记录，并确定，选择的客户信息自动带信收货客户信息中；
 *	客户信息	
 *1.	规则-请参见系统规则SR4；
 *1b	当录入的手机号码在CRM系统中有手机号码绑定的客户信息，
 *则自动弹窗并显示手机号码为录入的手机号的所有客户信息，
 *营业员选择录入一条记录，并确定；
 *选择的客户信息自动带入收货客户信息中；	
 *客户信息	1.	规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则；
 *2a	当录入的电话号码在CRM系统中有电话号码绑定的客户信息，
 *则自动弹窗并显示电话号码为录入的电话号码的所有客户信息，
 *营业员选择录入一条记录，并确定；选择的客户信息自动带入收货客户信息中；
 *	客户信息	1.	规则-请参见系统用例SUC-492中的“1.6.2扩展2a”的规则；
 *1.7	业务规则
 *序号	描述
 *SR1	1.	收货客户手机号码及固定电话至少提供一个，
 *手机号码只能为数字并且为11位，固定电话号码只能为数字，
 *且可添加多个；
 *SR2	1.	若收货客户为公司会员客户，
 *则录入收货客户信息后系统界面显示该收货客户联系人编码；
 *SR3	1.	客户详细地址必填至乡/镇，
 *且乡镇下一级内容不能为空；
 *SR4	1.	只有当收货人手机为空，
 *且发货客户信息已录入时，才会检索并弹窗显示；
 *2.	若未查询到历史记录，则无法提示；
 *3.	通过选择录入的收货人信息均可修改；
 *1.	
 *
 *录入货物信息（整车）SUC业务规则
 *
 *营业员点击运单开单，进入运单开单界面。
 *本界面为录入货物信息。
 *界面主要分为一个部分：录入货物信息。
 *1.	录入货物信息：
 *录入信息包括：货物名称、总件数、总重量、货物尺寸、总体积、货物包装
 *1.1	货物名称：货物的名称；
 *1.2	总件数：收货时货物的总件数；
 *1.3	总重量：收货时货物的总重量；
 *1.4	总体积：收货时货物的总体积；
 *1.5	货物包装：货物的包装数；
 *1.6	操作步骤
 *1.6.1	录入货物信息
 *序号	基本步骤	相关数据	补充步骤
 *1	修改货物名称		1.	系统自动匹配违禁品，生成规则；
 *2.	规则-请参见系统规则SR1；
 *1.7	业务规则
 *序号	描述
 *SR1	1.	若货物为违禁品，则系统自动提示“货物为违禁品，
 *不可开单！”；
 *2.	违禁品、拒收品、具体类型可在系统中进行配置；
 *SR2	新增一条业务规则：在提交运单之前，
 *若相邻两次输入的单号（两次单号分别为A与B且单号输入合法）差别较大时，
 *系统给予用户友好提示避免录错单号，但不限制单号的输入。具体规则为： 
 *	1）若前后两次输入的单号位数相同，当|A-B|≥100时系统给予提示； 
 *	2）若前后两次输入的单号位数不同，系统给予提示； 
 *	3）提示信息为：前后两票单号相差过大，
 *请检查所输单号是否是本部门所属单号！
 *
 *
 *营业员点击运单开单，进入运单开单界面。
 *本用例分为两个界面：录入发货客户信息、
 *选择发货客户；
 *1.	录入发货客户信息：
 *界面为信息录入界面：包括：手机、电话、客户名称、
 *客户编码、发货联系人（发货部门）、发货人地址；
 *1.1	手机：发货人手机号码；
 *1.2	电话：发货人电话号码；
 *1.3	客户名称：发货客户公司或单位名称，
 *可支持搜索查询；
 *1.4	客户编码：我司给客户的客户号；
 *1.5	发货联系人（发货部门）：发货客户的客户姓名，
 *当“运单开单”中的“开单提货方式”为“内部带货自提”时，
 *“发货联系人”字段更改为“发货部门”；
 *1.6	发货人地址：发货客户的详细联系地址，
 *支持国家行政区域自动过滤；
 *2.	选择发货客户界面：
 *界面为选择客户信息界面：包括两部分：
 *客户信息列表区域、功能按钮区域；
 *2.1.	客户信息列表区域：
 *包括：客户编码、客户名称、联系人、手机、
 *电话、地址(规范化地址和详细地址)；
 *2.2.	功能按钮区域：
 *包括：确定、取消；
 *3.	选择热门城市界面
 *   界面信息包含人热门城市
 *4.	选择省份界面
 *   界面信息包含省份
 *5.	选择城市界面
 *           界面信息保护城市
 *6.	选择区县界面
 *           界面信息保护区县
 *1.6	操作步骤
 *1.6.1	录入
 *序号	基本步骤	相关数据	补充步骤
 *1	录入手机号码		
 *1.	系统自动查询CRM系统中对应手机号码绑定的客户信息，
 *如果有弹窗，弹窗操作见扩展1a，
 *如果没有，弹出FOSS历史开单记录中对应手机号码绑定的客户信息，
 *并弹窗，弹窗操作见扩展1b；
 *2.	规则-请参见系统规则SUC-492-录入发货客户信息SR1；
 *2	录入电话号码		
 *2.	如果手机号码没有填写，系统自动查询CRM系统中对应电话号码绑定的客户信息，
 *如果有弹窗，弹窗操作见扩展2a，
 *如果没有，弹出FOSS历史开单记录中对应手机号码绑定的客户信息，
 *并弹窗，弹窗操作见扩展2b；
 *3.	规则-请参见系统规则SUC-492-录入发货客户信息SR1；
 *3	录入客户名称和客户编码		
 *1.	规则-请参见系统规则SUC-492-录入发货客户信息SR2、SR3；
 *4	录入发货联系人			
 *5	录入发货人地址		
 *1.	提供下拉框选择输入，
 *系统自动过滤输入的行政区下一级行政级的字段；
 *2.	规则-请参见系统规则SUC-492-录入发货客户信息SR6；
 *1.6.2	扩展
 *序号	扩展事件	相关数据	备注
 *1a	当录入的手机号码在CRM系统中有手机号码绑定的客户信息，
 *则自动弹窗并显示手机号码为录入的手机号的所有客户信息，
 *营业员选择录入一条记录，并确定；选择的客户信息自动带入发货客户信息中；
 *	客户信息	1.	规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则；
 *2.	规则-请参见系统规则SUC-492-录入发货客户信息SR5 、SR6、SR7；
 *1b	当录入的手机号码在CRM系统中没有手机号码绑定的客户信息时，
 *如果该客户在这3个月有发过货，则弹出历史发货记录，营业员选择录入一条记录，
 *并确定；选择的客户信息自动带入发货客户信息中；	客户信息
 *	3.	规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则；
 *4.	规则-请参见系统规则SUC-492-录入发货客户信息SR5 、SR6、SR7；
 *2a	当录入的电话号码在CRM系统中有电话号码绑定的客户信息，
 *则自动弹窗并显示电话号码为录入的电话号码的所有客户信息，
 *营业员选择录入一条记录，并确定；选择的客户信息自动带入发货客户信息中；	客户信息	
 *1.	规则-请参见系统用例SUC-492中的“1.6.2扩展2a”的规则；
 *2.	规则-请参见系统规则SUC-492-录入发货客户信息SR5、SR6、SR7；
 *2b	当录入的电话号码在CRM系统中没有电话号码绑定的客户信息时，
 *如果该客户在这3个月有发过货，则弹出历史发货记录，营业员选择录入一条记录，
 *并确定；选择的客户信息自动带入发货客户信息中；	客户信息	
 *1.	规则-请参见系统用例SUC-492中的“1.6.2扩展2a”的规则；
 *2.	规则-请参见系统规则SUC-492-录入发货客户信息SR5、SR6、SR7；
 *1	录入手机号码		1.	系统自动查询CRM系统中对应手机号码绑定的客户信息和
 *FOSS历史开单记录中对应手机号码绑定的客户信息，并弹窗，弹窗操作见扩展1a；
 *1.	规则-请参见系统规则SR1；
 *2	录入电话号码		1.	系统自动查询CRM系统中对应电话号码绑定的客户信息
 *和FOSS历史开单记录中对应手机号码绑定的客户信息，并弹窗，弹窗操作参见扩展2a；
 *1.	规则-请参见系统规则SR1；
 *3	录入客户名称和客户编码		1.	规则-请参见系统规则SR2、SR3；
 *4	录入发货联系人		
 *5	录入发货人地址		1.	提供下拉框选择输入，
 *系统自动过滤输入的行政区下一级行政级的字段；
 *2.	规则-请参见系统规则SR4；
 *1.6.2	扩展
 *序号	扩展事件	相关数据	备注
 *1a	当录入的手机号码在CRM系统中有手机号码绑定的客户信息，
 *则自动弹窗并显示手机号码为录入的手机号的所有客户信息，
 *营业员选择录入一条记录，并确定；选择的客户信息自动带入发货客户信息中；	
 *客户信息	
 *1.	规则-请参见系统规则SR5；
 *2a	当录入的电话号码在CRM系统中有电话号码绑定的客户信息，
 *则自动弹窗并显示电话号码为录入的电话号码的所有客户信息，
 *营业员选择录入一条记录，并确定；选择的客户信息自动带入发货客户信息中；
 *	客户信息	1.	规则-请参见系统规则SR6；
 *1.7	业务规则
 *序号	描述
 *SR1	1.规则参考SUC-492-录入发货客户信息SR1 
 *SR2	1. 规则参考SUC-492-录入发货客户信息SR2
 *SR3	1.规则参考SUC-492-录入发货客户信息SR3 
 *SR4	1.	规则参考SUC-492-录入发货客户信息SR6
 *SR5	1. 规则参考SUC-492-录入发货客户信息SR7
 *SR6	1. 规则参考SUC-492-录入发货客户信息SR8
 *
 *
 *确认整车总价SUC业务规则
 *
 *营业员点击整车开单，进入整车开单界面。
 *本界面为录入整车收银界面。
 *1.	约车报价：营业员约整车后，请车员受理的价格；
 *2.	开单报价：营业员根据请车员的受理价格，给客户的实际运费价格；
 *3.	增值服务费用
 *4.	总运费：本次承运的客户应付金额；
 *5.	开单付款方式：客户的付款方式，包括：现金、银行卡、月结、临时欠款、到付；
 *6.	预付金额
 *7.	到付金额；
 *1.6	操作步骤
 *序号	基本步骤	相关数据	补充步骤
 *1	录入开单报价		1.	规则-请参见系统规则SR1；
 *2	查看约车报价、增值服务费用入总运费		1.	规则-请参见系统规则SR2、SR3；
 *3	选择开单付款方式		1.	规则-请参见系统规则SR4、SR5；
 *4	预付金额		1.	规则-请参见系统规则SR4、SR5；
 *5	到付金额		1.	规则-请参见系统规则SR4、SR5；
 *1.7	业务规则
 *序号	描述
 *SR1	1.	开单报价默认等于约车报价；
 *2.	修改的开单报价只能为约车报价的某个范围区间中，该范围区间可由公司统一配置；
 *SR2	1.	整车导入约车开单时，约车报价为请车员受理的约车价格，不可修改；
 *SR3	1.	总运费=开单报价+增值服务费；
 *2.	增值服务费=保价费+代收手续费+预付运费保密服务费+返单费+包装费；
 *SR4	1.	整车的付款方式包含现金、银行卡、月结、临时欠款、到付；
 *2.	支持发货客户的多种付款方式叠加，但月结和临时欠款不能同时存在；
 *2.	开单只能选择一种付款方式，不可选择两种或以上；
 *3.	月结客户可以开月结；
 *4.	若客户非月结，则自运过滤月结的付款方式；
 *5.	付款方式为到付或者临时欠款时，不能选择预付运费保密；
 *6.	若整车开单选择直接到达客户处，则不能办理到付；
 *7.	有信用额度且额度大于等于总运费的发货客户，才可以选择临时欠款；
 *SR5	1.	预付金额必须大于0才能选择预付运费保密；
 *2.	当付款方式为现付时，预付金额必须大于0；否则，
 *提示信息“付款方式非到付，预付金额不能小于等于0”；
 *3.	当付款方式为到付时，预付金额不能大于0；否则，
 *提示信息“付款方式为【到付】，预付金额不能大于0”；
 *4.	月结客户的信用金额直接限制该客户的当月发货金额，
 *当月发货金额超过信用额度，当月将无法再开单月结，
 *提示“该客户的剩余可用信息额度不足，不能开月结”；
 *5.	临时欠款时，需要客户中的信用额度超过运费，
 *否则，提示“该客户的剩余可用信息额度不足，不能开临时欠款”；
 *6.	当付款方式为临时欠款等收款放货时，
 *现付到付均为零，不可修改；
 *SR6	1.	约车报价、开单报价、增值服务费用、总运费、预付金额、
 *到付金额均为整数，按照四舍五入原则；
 *
 *
 *导入整车约车编号SUC业务规则
 *
 *营业员通过
 *界面标题： 约车信息
 *约车编号：受理后的约车编码
 *1.	录入发货客户信息：
 *界面为信息录入界面：包括：手机、电话、客户名称、
 *客户编码、发货联系人、发货人地址；
 *1.1	手机：发货人手机号码；
 *1.2	电话：发货人电话号码；
 *1.3	客户名称：发货客户公司或单位名称，可支持搜索查询；
 *1.4	客户编码：我司给客户的客户号；
 *1.5	发货联系人：发货客户的客户姓名；
 *2.	   录入收货客户信息：
 *界面为信息录入界面：包括：手机、电话、发货联系人、发货人地址；
 *1.6	手机：发货人手机号码；
 *1.7	电话：发货人电话号码；
 *1.8	收货联系人：收货客户的客户姓名
 *1.9	收货人地址：收货客户的详细联系地址，支持国家行政区域自动过滤；
 *3.	录入货物信息：
 *录入信息包括：货物名称、总件数、总重量、货物尺寸、总体积、货物包装
 *1.1	货物名称：货物的名称；
 *1.2	总件数：收货时货物的总件数；
 *1.3	总重量：收货时货物的总重量；
 *1.4	总体积：收货时货物的总体积；
 *1.5	货物包装：货物的包装数；
 *4.界面标题：计费付款
 *录入信息包括：约车报价、总运费、增值服务费、
 *开单付款方式、预付金额、到付金额
 *1.1	约车报价：整车约车费用
 *1.2	总运费：运费总合
 *1.3	增值服务费：增值服务费总合
 *1.4	开单付款方式：开发付款的方式
 *1.5	预付金额：现付金额
 *1.6	到付金额：到付金额
 *1.6	操作步骤
 *1.6.1	导入整车约车编号
 *序号	基本步骤	相关数据	补充步骤
 *1	用户输入约车编号		
 *2	用户点击“确定”按钮	约车信息	系统自动带出相应的约车信息，
 *约车编号不可编辑，规则参考SR1
 *扩展事件写非典型或异常操作过程
 *序号	扩展事件	相关数据	备注
 *1.7	业务规则
 *序号	描述
 *SR1	1、校验是否有此约车编号，如果没有，提示无此约车编号，
 *如果有，但是没有受理，提示“约车编号未受理”，如果受理拒绝，
 *提示“约车失败”并提示失败原因，如果单号已经导入过，不能重复导入，
 *提示“约车编号已经导入过”，如果不是本部门的整车约车编号，
 *录入后提示“不能导入其他部门整车约车编号”
 *2、根据约车信息填充界面，请车费用填充进约车报价中。
 *
 *
 *
 *运单提交（离线）SUC业务规则
 *
 *1.1	相关业务用例
 *BUC_FOSS_5.20.30_550  营业部离线开单
 *1.2	用例描述
 *营业员通过本用例录入提交。
 *1.3	用例条件
 *条件类型	描述	引用系统用例
 *前置条件	1.	运单在线登录成功
 *2.	运单已填写完整	SUC-441录入收货客户信息(离线)
 *SUC-442录入发货客户信息(离线)
 *SUC-443录入货物信息(离线)
 *SUC-444录入增值服务信息(离线)
 *SUC-445录入运输信息(离线)
 *SUC-412运单收银(离线)
 *SUC-372暂存存运单(离线)
 *SUC-362在线登录
 *后置条件	1.	传送运单号、金额、帐号等结算数据到财务子系统
 *2.	传送货物名称、件数、重量等货物信息到中转子系统，安排运输计划
 *3.	传送运单号等信息到官网，客户查询运单状态
 *4.	给收货人发送出发短信，给上门接货客户发送短信
 *5.	订单信息反馈给CRM系统，订单处理结果为：离线已开单。
 *6、 当运输性质为精准空运时，
 *提交成功后会自动生成订舱信息流到最终配载部门（即总调）的舱位信息中	
 *1.4	操作用户角色
 *操作用户	描述
 *营业员	通过运单开单界面，提交离线运单信息
 *1.5	界面要求
 *1.5.1	表现方式
 *Web方式
 *1.5.2	界面原型
 *1.5.2.1	运单离线开单界面 
 *1.5.2.2	运单确认提交界面 
 *1.5.3	界面描述
 *1.5.3.1	运单开单界面
 *界面共包括7个部分：
 *1、发货客户信息；
 *2、收货客户信息；
 *3、货物信息；
 *4、运输信息；
 *5、增值服务信息；
 *6、计费付款；
 *7、功能按钮。
 *具体描述参考DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入发货客户信息-V0.1.doc
 *DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入货物信息-V0.2.doc
 *DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入收货客户信息-V0.1.doc
 *DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入运输信息-V0.1.doc
 *DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息-V0.1.doc
 *运单确认提交界面
 *界面共包括3个部分：
 *1、离线运单基本信息；
 *2、在线基本信息  
 *3、功能复选框；
 *4、功能按钮
 *1、	运单基本信息：单号、到付总运费、预付总运费、
 *代收货款、保险价值、收货人名称、付款方式、
 *提货网点、提货方式、收货人地址、收货人电话、
 *货物名称、重量/体积/件数、包装 。
 *2、	运单基本信息：单号、到付总运费、
 *预付总运费、代收货款、保险价值、收货人名称、
 *付款方式、提货网点、提货方式、收货人地址、
 *收货人电话、货物名称、重量/体积/件数、包装
 *3、功能复选框：打印运单（选择之后，点击确定系统自动打印运单）、
 *打印标签（选择之后，点击确定系统自动打印标签）、
 *下一条离线运单信息（选择后提交运单成功后填充下一条）。
 *4、功能按钮：确定、取消 。
 *1.6	操作步骤
 *序号	基本步骤	相关数据	补充步骤
 *1	营业员在运单查询界面，查询出离线开单未提交的运单		
 *2	点击“修改”	收货客户信息、发货客户信息、货物信息、
 *增值服务信息、计费付款信息、运输信息、代打木架信息
进入开单界面
 *1、自动填充发货客户信息
 *参考规则SR1、 SR2 
 *2、自动填充发货收货客户信息
 *参考规则SR1 、SR2
 *3、自动填充货物信息
 *参考规则SR3，SR7
 *4、自动填充运输信息
 *参考规则SR4，SR7
 *5、自动填充增值服务信息
 *参考规则SR5，SR7
 *6、自动填充计费付款信息
 *参考规则SR6，SR7
 *填充完之后，
 *如果有代打木架，弹出代打木架信息录入界面
 *2	点击“提交”按钮提交运单。	
 *1、客户上门提供的货物承运信息。
 *2、上门接货客户提供的承运信息。	
 *1.提交运单，根据系统规则SUC-439提交运单系统用例进行提交
 *2. 调用中转接口，生成库存信息
 *3.系统自动弹出，运单确认提交界面
 *1.7	业务规则
 *序号	描述
 *SR1	1.根据离线录入的发货客户信息，
 *使用发货联系人手机号码到远程服务器进行匹配客户信息，
 *如果没有，根据离线填写的发货客户信息，
 *填充发货联系人手机号、发货联系人、发货人地址、发货人电话号码，
 *如果有，根据查询出来到客户信息，显示会员编码和客户名称，
 *并根据离线填写的客户信息，填充发货联系人手机号、发货联系人、
 *发货人地址、发货人电话号码。填充时不需要进行联动和校验
 *1.填充发货信息和发货信息时，根据发货客户手机到CRM进行查询，
 *无论查询出有多少条阻塞式弹出CRM查询框让用户进行选择，
 *当发货客户手机为空时，根据电话号码到CRM进行查询，
 *无论查询出有多少条阻塞式弹出CRM查询框让用户进行选择，
 *当用户选择时进行填充，如果客户选择取消时，不填充 
 *2.如果修改，修改规则参考系统用例SUC-492录入发货客户信息
 *SR2	11.如果修改，修改规则参考系统用例SUC-492录入发货客户信息和SUC-493录入收货客户信息
 *.根据离线录入的收货客户信息，
 *使用收货联系人手机号码到远程服务器进行匹配客户信息，
 *如果没有，根据离线填写的收货客户信息，
 *填充发货联系人手机号、发货联系人、发货人地址、发货人电话号码，
 *如果有，根据查询出来到客户信息，显示会员编码和客户名称，
 *并根据离线填写的收货客户信息，填充发货联系人手机号、发货联系人、
 *发货人地址、发货人电话号码。填充时不需要进行联动和校验
 *2.如果修改，修改规则参考系统用例SUC-493录入收货客户信息
 *SR3	1、	把货物信息填充到界面中，在填充过程中，
 *不需要进行联动和校验
 *2、1、	如果修改、修改规则参考系统用例SUC-494 录入货物信息
 *SR4	1、把运输信息到界面中，在填充过程中，
 *不需要进行联动和校验
 *2、如果修改，修改规则参考系统用例SUC-496录入运输信息
 *SR5	1、把增值服务信息填充到界面中，在填充过程中，不需要进行联动和校验
 *21、如果修改，修改规则参考系统用例SUC-494录入增值服务信息
 *SR6	1.如果发货客户有优惠协议，那么根据SUC-486-运单收银系统用例规则进行重新计价
 *21.如果修改，修改规则参考系统用例SUC-408  运单收银
 *SR7	1、在填充过程中涉及到需要用基础资料、产品价格和客户资质的校验、
 *计算、联动，都用最新信息进行校验、计算、联动，
 *如果离线保存时已经有计算或联动的值，需要进行覆盖，
 *需要最新计算和联动的值。 
 *
 *运单收银（离线）SUC业务规则
 *
 *1.1	相关业务用例
 *BUC_FOSS_5.20.30_550 (营业部离线开单)
 *1.2	用例描述
 *当网络故障或服务器原因导致营业部不能正常开单时，客户上门发货为汽运或空运，营业员确认承运信息之后，通过离线系统计算货物总付款金额。	
 *1.3	用例条件
 *条件类型	描述	引用系统用例
 *前置条件	1.	确认承运信息已录入完毕；	
 *后置条件	1.	录入收入；	
 *1.4	操作用户角色
 *操作用户	描述
 *营业员	可查询、确认发货/收货客户应付款金额，及客户的付款方式
 *开单员	可查询、确认发货/收货客户应付款金额，及客户的付款方式
 *1.5	界面要求
 *1.5.1	表现方式
 *Web页面 
 *1.5.2	界面原型 
 *1.5.3	界面描述
 *营业员点击离线运单开单，进入离线运单开单界面。
 *本界面标题：计费付款。
 *1.	计费类型：包括重量计费、体积计费，默认显示重量计费；
 *2.	计费费率，
 *3.	公布价运费
 *4.	增值服务费用
 *5.	总运费
 *6.	开单付款方式：包括现金、到付；
 *7.	预付金额；
 *8.	到付金额；
 *9.	计费重量。
 *1.6	操作步骤
 *1.6.1	运单收银
 *序号	基本步骤	相关数据	补充步骤
 *1	查看计费类型和计费费率		1.	规则-请参见系统规则SR1、SR2；
 *2	查看公布价运费和增值服务费及总运费		1.	规则-请参见系统规则SR3；
 *3	录入付款方式		1.	规则-请参见系统规则SR4；
 *4	确认和录入预付金额和到付金额		1.	规则-请参见系统规则SR5；
 *5	查看计费类型和计费费率		1.    规则-请参见系统规则SR1、SR2；
 *扩展事件写非典型或异常操作过程
 *序号	扩展事件	相关数据	备注
 *5a			
 *5b			
 *1.7	业务规则
 *序号	描述
 *SR1	1.	计费类型分为重量计费、体积计费，
 *由系统自动生成，不可修改；
 *默认重量计费；
 *2.	对于一票货物系统分别按重量和体积分别计费并取大优先的原则计费；
 *若按重量计费运费较按体积计费运费较高，
 *则计费类型为重量计费；若按体积计费运费较按重量计费运费较高，
 *则计费类型为体积计费；
 *3.	运输类型为汽运时,计费重量为空，不可修改；
 *2.4.	运输类型为空运时计费重量应为重量和体积*1000000/6000进行对比，取大；
 *SR2	1.	费率为对应计费类型、目的站、提货网点及运输类型的走货单价；
 *2.	目的站、提货网点及运输类型确认后，
 *即可自动显示对应计费类型的费率；（来自本地价格基础资料）
 *3.	费率可以保留到小数点后2位；运费、预付金额、到付金额为整数，
 *按照四舍五入的原则；
 *SR3	1.	公布价运费（即重量、体积计费的运费）=每公斤单价/每方价格与货物实际重量/体积的乘积，
 *对于一票货物系统分别按重量和体积分别计费并取大优先的原则计费；
 *（来自价格基础资料，下载并且使用当前启用的最新的价格版本，
 *参考SUC-547下载基础资料PC-SR1）
 *2.	增值服务费=送货费+包装费+保价费+代收手续费+其他费用和；
 *3.	总运费费用=公布价运费+增值服务费+装卸费 =预付金额+到付金额；
 *3.4.	公布价运费=纯运费+装卸费
 *SR4	1.	付款方式只有：到付，现付
 *SR5	1.	当付款方式为现付时，预付金额必须大于0；否则，
 *提示信息“付款方式为现付，预付金额必须大于0”；
 *2.	当付款方式为到付时，到付金额必须大于0；否则，
 *提示信息“付款方式为【到付】，到付金额必须大于0”；
 *3.	发货人和收货人都付款，付款方式为现付;
 *发货人跟收货人都付款，付款方式选择到付。
 *4.3.	支持发货人、收货人付款方式的组合，
 *例如付款方式为到付500：那么预付金额可以未300，
 *到付金额为200，总和等于500 ，那么预付300，
 *可以选择现金100元，临时欠款100，银行卡刷卡100元。
 *SR6	参考suc-403生成运单SR1: 系统自动检测，
 *如果客户端X天还没有更新，不能打开离线运单界面，
 *并提示“请在间隔X天内，在线登录系统
 *
 *
 *确认公布总价（离线）SUC业务规则
 *1.1	相关业务用例
 *BUC_FOSS_5.20.30_550 (营业部离线开单)
 *1.2	用例描述
 *当网络故障或服务器原因导致营业部不能正常开单时，
 *客户上门发货为汽运或空运，营业员确认承运信息之后，
 *通过离线系统计算出本地公布价与计费重量或计费体积乘积的运费。	
 *1.3	用例条件
 *条件类型	描述	引用系统用例
 *前置条件	离线系统已经更新最新且已启用的价格版本	参考规则SR4
 *后置条件	离线开单保存	
 *1.4	操作用户角色
 *操作用户	描述
 *营业员	营业员录入货物承运信息等。 
 *开单员	开单员录入货物承运信息等。
 *1.5	界面要求
 *1.5.1	表现方式
 *Web页面 
 *1.5.2	界面原型
 *无
 *1.5.3	界面描述
 *无
 *1.6	操作步骤
 *1.6.1	计算公布总价
 *序号	基本步骤	相关数据	补充步骤
 *1	登陆离线系统		
 *2	打开“离线开单”界面。		
 *3	录入发货人信息		参考SUC-442
 *4	录入收货客户信息		参考SUC-441
 *5	录入货物信息		参考SUC-443
 *6	录入运输信息		参考SUC-445
 *进行前面5操作之后，若是空运，
 *系统读取本地下载的空运公布价价格方案计算出公布总价，
 *显示在运单开单界面。
 *若是汽运，系统读取本地下载的汽运公布价价格方案（计算出公布总价，
 *显示在运单开单界面。
 *参考规则SR1，SR2，SR3
 *扩展事件写非典型或异常操作过程
 *序号	扩展事件	相关数据	备注
 *5a			
 *1.7	业务规则
 *序号	描述
 *SR1	1）汽运：上门发货汽运运费最低X元一票；（同城、卡航；可配置）；
 *上门接货汽运运费最低X元一票；（同城、卡航；可配置）；
 *2）空运：空运运费最低X元一票；（可配置）；
 *SR2	1）汽运：当货物为“接货”时，系统自动匹配生成公布价“接货价格方案”；
 *当货物为“非接货”时，系统自动匹配生成公布价“非接货的价格方案”；
 *2）空运：系统自动匹配公布价 “空运价格方案”；
 *空运价格只有上门发货一套价格方案，
 *如有接货费在其他费用里添加一项接货费。
 *（来自价格基础资料，下载并且使用当前启用的最新的价格版本，参考SUC-547下载基础资料PC-SR1）
 *SR3	1）计费方式分为重量计费、体积计费；重量、
 *体积计费的运费=每公斤单价与货物实际重量的乘积 或 每方单价与货物实际体积的乘积，
 *对于一票货物，系统按重量和体积分别计算并取大优先的原则计费给出公布价总运费,
 *计费方式即为取大的一方；
 *SR4	参考suc-403生成运单SR1: 系统自动检测，如果客户端X天还没有更新，
 *不能打开离线运单界面，并提示“请在间隔X天内，在线登录系统
 *
 *
 *录入运输信息（离线）SUC业务规则
 *营业员点击运单开单，进入运单开单界面。
 *本界面标题：录入运输信息。
 *界面信息包括：收货部门、单号、运输性质、配载类型、
 *提货方式、目的站、提货网点、上门接货、集中接货、对外备注、
 *对内备注、储运注意事项、配载线路（配载航班）、配载部门、
 *最终配载部门、预计出发时间、预计派送/提货时间。
 *1.	收货部门：揽货部门；
 *2.	单号：运单单号；
 *3.	运输性质：公司产品类型，包括精准空运、精准汽运（长途）、
 *精准卡航、精准城运、汽运偏线、精准汽运（短途）；
 *4.	配载类型：公司走货方式，包括专线、偏线（外发）、合大票、单独开单；
 *5.	提货方式：公司提供的送货方式，包括自提（不含机场提货费）、
 *免费自提、机场自提、送货上门、免费送货、自提、内部带货自提、送货进仓；
 *6.	目的站：客户所发货物要到达的目的城市和区域；
 *7.	提货网点：收货客户可以领取货物的部门；
 *8.	上门接货：我司提货的一种服务，司机上门接货，确认承运，
 *有区别于客户上门发货；
 *9.	集中接货：是否为集中接送货区域，以集中接货的方式揽货，
 *是对上门接货的一个属性补充；
 *10.	对外备注：客户可以看到的备注信息，包括：空、保丢不保损、
 *“不承保发霉、变质、虫蛀虫咬之损失”、“ 不承保刮花、变形、撞凹之损失”、
 *不可重压、易潮、不可倒置、客户指定提货网点；
 *11.	对内备注：仅限公司内部人员看到的备注信息；
 *12.	储运注意事项：对外备注和对内备注信息的叠加；
 *13.	配载线路（配载航班）:配载类型为偏线（外发）或专线时时，
 *显示“配载线路”，为从出发部门到达开单目的站，我司走货的线路；
 *配载类型为合大票或单独开单时，显示“配载航班”，为我司规则的空运走货的航班类型，
 *包括早班、中班、晚班；
 *14.	配载部门:开单收货部门出发货配载专线；
 *15.	最终配载部门:货物到达的最终部门；
 *16.	预计出发时间:我司走货的预计出发时间，
 *适用于运输类型为“精准卡航”及“精准城运”；
 *17.	预计派送/提货时间: 我司承诺客户的可提货或送货的时间，
 *适用于运输类型为“精准卡航”及“精准城运”；
 *1.6	操作步骤
 *序号	基本步骤	相关数据	补充步骤
 *1	录入收货部门		
 *1.	规则-请参考SUC-496录入运输信息-系统规则SR1；
 *2	录入单号		
 *1.	系统校验单号的合法性；单号唯一在离线提交时，判断，
 * 除单号唯一性其他参考规则SR1
 *3	录入运输性质		
 *1.	规则-请参考SUC-496录入运输信息-系统规则SR2、SR3；
 *4	录入配载类型		
 *1.	规则-请参考SUC-496录入运输信息-系统规则SR3、SR4、SR5、SR6；
 *5	录入提货方式		
 *1.	规则-请参考SUC-496录入运输信息-系统规则SR4、SR6、SR7、SR8；
 *6	录入目的站		
 *1.	规则-请参考SUC-496录入运输信息-系统规则SR9；
 *7	录入提货网点		
 *1.	规则-请参考SUC-496录入运输信息-系统规则SR5、SR8、SR9、SR10；
 *8	勾选是否上门接货		
 *1.	规则-请参考SUC-496录入运输信息-系统规则SR11；
 *2.	勾选上门接货，必须输入司机工号，司机工号为6为数字。参考规则SR3
 *9	勾选是否集中接货		
 *1.	规则-请参考SUC-496录入运输信息-系统规则SR11、SR12；
 *10	录入对外备注		
 *1.	规则-请参考SUC-496录入运输信息-系统规则SR13、SR14；
 *11	录入对内备注		
 *1.    参考规则SR2
 *12	生成储运注意事项		
 *1.	规则-请参考SUC-496录入运输信息-系统规则SR14；
 *13	录入配载线路（配载航班）		
 *1.	规则-请参考SUC-496录入运输信息-系统规则SR15；
 *2.	参考SUC-547下载基础资料(PC)
 *14	录入配载部门		
 *1.	规则-请参考SUC-496录入运输信息-系统规则SR16；
 *15	录入最终配载部门		
 *1.	规则-请参考SUC-496录入运输信息-系统规则SR17；
 *16	生成预计出发时间		
 *1.	规则-请参考SUC-496录入运输信息-系统规则SR18；
 *17	生成预计派送/提货时间		
 *1.	规则-请参考SUC-496录入运输信息-系统规则SR19；
 *1.7	业务规则
 *序号	描述
 *SR1	1、单号为8-9位数字，
 *不能输入重复单号。
 *SR2	1、对内备注仅公司内部人员可见，
 *输入字符长度不得超过500。
 *SR3	1、当勾选上门接货时，
 *司机工号必填，且为6位数字。
 *SR4	参考suc-403生成运单SR1: 
 *系统自动检测，如果客户端X天还没有更新，
 *不能打开离线运单界面，并提示“请在间隔X天内，在线登录系统
 *
 *
 *录入收货客户信息（离线）SUC业务规则
 *
 *1.1	相关业务用例
 *BUC_FOSS_5.20.30_550  营业部离线开单
 *1.2	用例描述
 *营业员通过本用例录入收货客户信息。
 *1.3	用例条件
 *条件类型	描述	引用系统用例
 *前置条件	1.	离线登录成功	
 *后置条件		
 *1.4	操作用户角色
 *操作用户	描述
 *营业员	可查询、录入、修改收货客户信息
 *1.5	界面要求
 *1.5.1	表现方式
 *Web方式
 *1.5.2	界面原型
 *1.5.3	界面描述
 *营业员点击运单开单，进入运单开单界面。
 *本界面为录入收货客户信息。
 *界面为信息录入界面包括：手机、电话、客户名称、
 *客户编码、收货联系人（收货部门）、收货人地址；
 *1.	手机：收货人手机号码；
 *2.	电话：收货人电话号码，可以添加多个；
 *3.	收货联系人：收货客户的客户姓名；
 *4.	收货人地址：收货客户的详细联系地址，
 *支持国家行政区域自动过滤；
 *1.6	操作步骤
 *序号	基本步骤	相关数据	补充步骤
 *1	录入手机号码		
 *1.	规则-请参见系统规则SR1；
 *2	录入电话号码		
 *1.	规则-请参见系统规则SR1；
 *3	录入收货联系人（收货部门）		
 *规则-请参见系统规则SR3、SR4；
 *4	录入收货人地址		
 *1.	规则-请参见系统规则SR2；
 *1.7	业务规则
 *序号	描述
 *SR1	1.	收货客户手机号码及固定电话至少提供一个，
 *手机号码只能为数字并且为11位，固定电话号码只能为数字，
 *且可添加多个；添加多个时，必须用“，”或“、”或“/”分开；
 *固定电话号码字段也可以录入手机号；
 *SR2	1.	客户详细地址必填至乡/镇，
 *且乡镇下一级内容不能为空；
 *SR3	1.	当“运单开单”中的“开单提货方式”为“内部带货自提”时，
 *“收货联系人”字段更改为“收货部门”；
 *SR4	
 *1.	若为公司内部带货，则收货客户信息中的收货部门名称必须与OA系统中组织架构名称保持一致；
 *SR5		前提：收货人信息都已填充完毕，再进行手机号，
 *电话号码修改：
 *① 	如在三月记录中，是否再次弹出框选择记录后覆盖原来的信息，
 *不选择只修改手机号or电话号码，发货客户其他信息不置空
 *② 	如不在三月记录中，是否只修改手机号或电话，
 *发货客户其他信息不置空-------
 *1、再次弹出框选择记录后覆盖原来的信息2、
 *如果带出时是CRM客户，那么要删除客户编码和客户名称后才能够修改联系人信息，
 *如果带出来不是，那么可以直接修改，那么修改电话号码和手机号，带出的信息都会覆盖
 *
 *
 *录入发货客户信息（离线）SUC业务规则
 *
 *1.1	相关业务用例
 *BUC_FOSS_5.60.05_520  确认承运信息
 *1.2	用例描述
 *营业员在网络不通时，通过本用例录入发货客户信息。
 *1.3	用例条件
 *条件类型	描述	引用系统用例
 *前置条件	离线登录成功；	
 *后置条件		
 *1.	运单收银
 *2.	录入增值服务信息
 *1.4	操作用户角色
 *操作用户	描述
 *营业员	可查询、录入、修改发货客户信息
 *1.5	界面要求
 *1.5.1	表现方式
 *Web方式											
 *1.5.2	界面原型 
 *1.5.3	界面描述
 *营业员点击运单开单，进入运单开单界面。
 *本界面为录入发货客户信息。
 *界面为信息录入界面：包括：手机、电话、
 *发货联系人（发货部门）、发货人地址；
 *1.	手机：发货人手机号码；
 *2.	电话：发货人电话号码，可以添加多个；
 *3.	发货联系人（发货部门）：发货客户的客户姓名，
 *当“运单开单”中的“开单提货方式”为“内部带货自提”时，
 *“发货联系人”字段更改为“发货部门”；
 *4.	发货人地址：发货客户的详细联系地址，
 *支持国家行政区域自动过滤；
 *1.6	操作步骤
 *序号	基本步骤	相关数据	补充步骤
 *1	录入手机号码		
 *1.	规则-请参见系统规则SR1；
 *2	录入电话号码		
 *1.	规则-请参见系统规则SR1；
 *3	录入发货联系人（发货部门）		
 *1.	规则-请参见系统规则SR2、SR3；
 *4	录入发货人地址		
 *1.	提供下拉框选择输入，系统自动过滤输入的行政区下一级行政级的字段；
 *2.	规则-请参见系统规则SR4；
 *1.7	业务规则
 *序号	描述
 *SR1	1.	发货客户手机号码及固定电话至少提供一个，
 *手机号码只能为数字并且为11位，固定电话号码只能为数字，
 *且可添加多个, 添加多个时，必须用“，”或“、”或“/”分开；固定电话号码字段也可以录入手机号；
 *SR2	1.	当“运单开单”中的“开单提货方式”为“内部带货自提”时，
 *“发货联系人”字段更改为“发货部门”；
 *SR3	1.	若为公司内部带货，则发货客户信息中的发货部门名称必须与OA系统中组织架构名称保持一致；
 *SR4	1.	客户详细地址必填至乡/镇，且乡镇下一级内容不能为空；
 *SR5 	1．焦点到联系人文本框后，下个焦点直接跳过地址分段输入框，到下个控件
 *
 */
public class WaybillSubmitConfirmAction extends
		AbstractButtonActionListener<JDialog> {
	/**
	 * 国际化
	 */
	private II18n i18n = I18nManager.getI18n(WaybillSubmitConfirmAction.class);
	//Logger
	private static final Log LOG = LogFactory.getLog(WaybillSubmitConfirmAction.class);
	private static final String COMMA = ",";
	private static final String UNKNOWN = "N/A";
	//service object
	private IWaybillService waybillService = WaybillServiceFactory.getWaybillService();
	// 离线暂存
	private IWaybillOffLinePendingService waybillOffLinePendingService = GuiceContextFactroy.getInjector().getInstance(WaybillOffLinePendingService.class);
	//确认对话框
	private JDialog confirmDialog;
	//ui
	private WaybillEditUI waybillEditUI;
	
	// 存储打印数据
	private BarcodePrintLabelDto printLabelBean = new BarcodePrintLabelDto();
	
	
	public BarcodePrintLabelDto getPrintLabelBean() {
		return printLabelBean;
	}

	public void setPrintLabelBean(BarcodePrintLabelDto printLabelBean) {
		this.printLabelBean = printLabelBean;
	}

	private ICustomerHessianRemoting customerHessianRemoting;
	
	//根据单号查询打木架数据
	private IWoodenRequirementsDao woodenRequirementsDao;
	/**
	 * 
	 * <p>
	 * (运单提交确认)
	 * </p>
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-10-16 下午02:46:47
	 * @param e
	 * @see com.deppon.foss.module.pickup.common.client.action.AbstractButtonActionListener#actionPerformed(java.awt.event.ActionEvent)
	 */
	public void actionPerformed(ActionEvent e) {
		//运单绑定vo
		WaybillPanelVo bean = null;
		try {
			//是否打印运单 
			Boolean isPrintWaybill = null;
			//是否打印标签
			Boolean isPrintLabel = null;
			//是否新增
			Boolean isNewAdd = null;
			//打印模板
			String printTemplates = null;
			//是否打印木包装标签
			Boolean isWoodpackaging = null;
			//判断是否为“确认提交”提交对话框
			if (confirmDialog instanceof SubmitConfirmDialog) {
				//转换对象
				SubmitConfirmDialog d = (SubmitConfirmDialog) confirmDialog;
				//获得运单开单界面对象
				waybillEditUI = d.getWaybillEditUI();
				//获得开单界面绑定的vo对象 
				bean = d.getVo();
				//是否打印运单
				isPrintWaybill = d.getChbPrintWaybill().isSelected();
				//是否打印标签
				isPrintLabel = d.getChbPrintLabel().isSelected();
				if(!WaybillConstants.WAYBILL_PICTURE.equals(waybillEditUI.getPictureWaybillType())){
					//是否打印木标签
					isWoodpackaging = d.getWoodpackaging().isSelected();
				}else {
					//是否打印木标签
					isWoodpackaging = false;
				}
				//是否新增
				isNewAdd = d.getChbNewAdd().isSelected();
				//获得打印模板名称
				printTemplates = ((PrintTemplatesModel)d.getPrintTemplates().getSelectedItem()).getKey();
			} else {
				//运单值比较的“提交确认”对话框
				SubmitConfirmCompareImportDialog d = (SubmitConfirmCompareImportDialog) confirmDialog;
				//运单开单界面
				waybillEditUI = d.getWaybillEditUI();
				//获得开单界面绑定的vo对象 
				bean = d.getVo();
				//是否打印运单
				isPrintWaybill = d.getChbPrintWaybill().isSelected();
				//是否打印标签
				isPrintLabel = d.getChbPrintLabel().isSelected();
				//是否打印木标签
				isWoodpackaging = d.getWoodpackaging().isSelected();
				//是否新增
				isNewAdd = d.getChbNewAdd().isSelected();
				//获得打印模板名称
				printTemplates = ((PrintTemplatesModel)d.getPrintTemplates().getSelectedItem()).getKey();
			}
				
			try {
				//zxy 20131026 BUG-57987 start 添加：如果是整车业务，设置整车费用 = 公布价
    			if(bean.getIsWholeVehicle() != null && bean.getIsWholeVehicle()){
    				bean.setWholeVehicleActualfee(bean.getTransportFee());
    			}
    			//zxy 20131026 BUG-57987 end 添加：如果是整车业务，设置整车费用 = 公布价
				if (WaybillConstants.SUBMIT_STATE.equals(waybillEditUI.getWaybillState())) {
					if(StringUtils.isNotBlank(waybillEditUI.getPictureWaybillType()) && 
							WaybillConstants.WAYBILL_PICTURE.equals(waybillEditUI.getPictureWaybillType())){
						BigDecimal weight = bean.getGoodsWeightTotal();
						BigDecimal volume = bean.getGoodsVolumeTotal();
						if(weight == null || weight.compareTo(BigDecimal.ZERO) <= 0
								|| volume == null || volume.compareTo(BigDecimal.ZERO) <= 0){
							saveWaybill(bean,waybillEditUI);//运单暂存
						}else{
							if(StringUtils.isNotBlank(bean.getPackageRemark())){
								StringBuffer sb = new StringBuffer();
								String packageRemark = bean.getPackageRemark();
								//将包装备注项字符串解析成数据组
								String[] remark = StringUtil.defaultIfNull(packageRemark).split(";");
								//判断包装备注中的的这段数据是否存在M信息，存在则用最新的信息替换
								if(!"M".equals(remark[0])){
									sb.append("M;");
									sb.append(bean.getPackageRemark());
									bean.setPackageRemark(sb.toString());
								}
							}else{
								bean.setPackageRemark("M;");
							}
							//运单在线提交
							submit(bean);
						}
						//推送数据给app
						if(!isPrintWaybill){
							if (waybillEditUI.getImportWaybillPanelVo() != null) {//图片开单查询界面点击修改时提交的运单
								if (bean.getIsModifyLabel() != null && Boolean.TRUE.equals(bean.getIsModifyLabel())) {//未修改标签信息不推送数据
									//短信发送
									addWaybillPictureSendMessage(bean);
									//百度云推送
									//addWaybillPicturePushMessage(bean);
									
									/*try {
										*//**
										 * @author hehaisu
										 * @date 2015-01-08
										 * 修改了标签信息后要发送短信到司机手机
										 *//*
										String waybillMessage = "标签信息已更改:" + bean.getWaybillNo() + " 时间:" + new SimpleDateFormat("yyyy-MM-dd hh:mm:ss").format(new Date());
										// 获得当前用户信息
										UserEntity user = (UserEntity) SessionContext.getCurrentUser();
										
										WaybillPictureEntity picture =new WaybillPictureEntity();
										picture.setWaybillNo(bean.getWaybillNo());
										picture.setActive(WaybillConstants.YES);
										picture = waybillService.queryWaybillPictureByEntity(picture);
										//修改为实时发短信
										waybillService.saveWaybillpushmessageSendSms(bean.getWaybillNo(),
																					waybillMessage, 
																					user.getEmployee().getEmpCode(),
																					user.getEmployee().getDepartment().getUnifiedCode(),
																					picture.getMobilephone());
										
										final WaybillPanelVo vo = new WaybillPanelVo();
										BeanUtil.CopyBeanToBean(bean, vo);
										SwingUtilities.invokeLater(new Runnable() {
											@Override
											public void run() {
												try {
													LOG.error("图片运单标签推送开始时间："+vo.getWaybillNo()+"::" + new SimpleDateFormat("yyyy-MM-dd hh:mm:ss").format(new Date()));
													push2App(vo);
													LOG.error("图片运单标签推送结束时间："+vo.getWaybillNo()+"::" + new SimpleDateFormat("yyyy-MM-dd hh:mm:ss").format(new Date()));
												} catch (Exception e) {
													e.printStackTrace();
												}

											}
										});
									} catch (Exception e2) {
										e2.printStackTrace();
									}*/
								}
							} else {
								/**
								 * 直接图片开单，百度云消息推送
								 */
								//addWaybillPicturePushMessage(bean);
								/*try {
									final WaybillPanelVo vo = new WaybillPanelVo();
									BeanUtil.CopyBeanToBean(bean, vo);
									SwingUtilities.invokeLater(new Runnable() {
										@Override
										public void run() {
											try {
												LOG.error("图片运单标签推送开始时间："+vo.getWaybillNo()+"::"  + new SimpleDateFormat("yyyy-MM-dd hh:mm:ss").format(new Date()));
												push2App(vo);
												LOG.error("图片运单标签推送结束时间："+vo.getWaybillNo()+"::"  + new SimpleDateFormat("yyyy-MM-dd hh:mm:ss").format(new Date()));
											} catch (Exception e) {
												e.printStackTrace();
											}

										}
									});
								} catch (Exception e2) {
									e2.printStackTrace();
								}*/
							}
							
						}
						
					}else{
						submit(bean);
					}
					if(isPrintWaybill){
						printInfoInsert(bean);	
					}
				} else {
					offLineTempSave(bean);
				}
				//hbhk 如果有优惠券信息 将FOSS的优惠券标记为已使用
				CouponInfoDto couponInfoDto = bean.getCouponInfoDto();
				if(couponInfoDto != null){
					String couponCode = couponInfoDto.getCouponNumber();
					String customerCode = bean.getDeliveryCustomerCode();
					if(StringUtils.isNotEmpty(customerCode) && StringUtils.isNotEmpty(couponCode)){
						if(customerHessianRemoting == null){
							customerHessianRemoting = DefaultRemoteServiceFactory.getService(ICustomerHessianRemoting.class);
						}
						customerHessianRemoting.useCustomerCoupon(customerCode, couponCode);
					}
				}
				//清除本次优惠券信息
				CustomerCouponDialog.customerCoupons.clear();
				//全局缓存
				cacheData(bean);
					
				//是否打印运单
				if(isPrintWaybill)
				{
					try {
						waybillPrint(waybillEditUI,printTemplates);
					} catch (IllegalAccessException e1) {
						LOG.error("actionPerformed exception", e1);
						String error = ExceptionUtils.getFullStackTrace(e1);
						throw new WaybillValidateException(error);
					} catch (InvocationTargetException e1) {
						LOG.error("actionPerformed exception", e1);
						String error = ExceptionUtils.getFullStackTrace(e1);
						throw new WaybillValidateException(error);
					} catch (NoSuchMethodException e1) {
						LOG.error("actionPerformed exception", e1);
						String error = ExceptionUtils.getFullStackTrace(e1);
						throw new WaybillValidateException(error);
						
					}
				}
		
				//是否打印标签
				if(isPrintLabel)
				{
					waybillLabelPrint(bean.getWaybillNo());
				}
				//是否打印木标签
				if(isWoodpackaging !=null && isWoodpackaging){
					if(CommonContents.logToggle){
						CustomerImpOperLogHandler.setLogger(bean.getWaybillNo()).setInfo("printLabelStart", "打印标签开始:");
					}
					waybillWoodpackagingLabelPrint(bean.getWaybillNo());
					if(CommonContents.logToggle){
						CustomerImpOperLogHandler.setLogger(bean.getWaybillNo()).setInfo("printLabelEnd", "打印标签结束:");
					}
				}
				confirmDialog.dispose();
				//是否新增
				if(isNewAdd)
				{
					waybillNewAdd();
				}
				
				String waybillNo = bean.getWaybillNo();
				if(StringUtils.isNotBlank(waybillEditUI.getPictureWaybillType()) && 
						WaybillConstants.WAYBILL_PICTURE.equals(waybillEditUI.getPictureWaybillType())){
					submitType(waybillEditUI,bean);
					//清空开始开单时间
				}else{
					// 设置控件的编辑状态
					componentSetEnable();
				}
				bean.setStartBillTime(null);
				
				if(CommonContents.logToggle){
					CustomerImpOperLogHandler.setLogger(waybillNo).submitSuccess();
				}
			} catch (WaybillValidateException w) {
				if(bean != null){
					modifyPackage(bean);
				}
				/**
		    	 * BUG-10031:提示信息出现两行相同的提示信息，请去除重复提示信息
		    	 */
		    	String msg = w.getMessage();
		    	if(StringUtils.isEmpty(msg)){
		    	    msg = w.getErrorCode();
		    	}
		    	//生成运单线路信息时出错，原因：
		    	if(msg!=null 
		    			&& (msg.indexOf(i18n.get("foss.pkp.waybill.waybillManagerService.exception.failAddLine"))>=0 
		    				|| msg.indexOf(i18n.get("foss.pkp.waybill.waybillStockService.exception.nullGoodsAreas"))>=0)){
		    		MsgBox.showITServiceInfo(msg);
		    	//查询不到库区！
		    	}else{
		    		MsgBox.showInfo(msg);
		    	}				
			}
		} catch (BusinessException be) {
			if(bean != null){
				modifyPackage(bean);
			}
			LOG.error("actionPerformed exception", be);
			//生成运单线路信息时出错，原因：
			if(be.getMessage()!=null
					&& (be.getMessage().indexOf(i18n.get("foss.pkp.waybill.waybillManagerService.exception.failAddLine"))>=0
						|| be.getMessage().indexOf(i18n.get("foss.pkp.waybill.waybillStockService.exception.nullGoodsAreas"))>=0 )){
				MsgBox.showITServiceInfo(MessageI18nUtil.getMessage(be, i18n));
	    	}else{
	    		MsgBox.showInfo(MessageI18nUtil.getMessage(be, i18n));
	    	}			
		} catch(Throwable ee){
			if(bean != null){
				modifyPackage(bean);
			}
			LOG.error("WaybillSubmitConfirmAction exception", ee);
			if(ee instanceof UndeclaredThrowableException)
			{
				MsgBox.showInfo(i18n.get("foss.gui.creating.waybillSubmitConfirmAction.Exception"));
			}else{
				MsgBox.showInfo(i18n.get("foss.gui.creating.waybillSubmitConfirmAction.Exception")+ee);
			}
			
		}
	}
	
	public IWoodenRequirementsDao getWoodenRequirementsDao() {
		return woodenRequirementsDao;
	}

	public void setWoodenRequirementsDao(
			IWoodenRequirementsDao woodenRequirementsDao) {
		this.woodenRequirementsDao = woodenRequirementsDao;
	}

	private void submitType(WaybillEditUI ui,WaybillPanelVo bean){
		if(i18n.get("foss.gui.creating.buttonPanel.submit.label").equals(ui.pictureWaybillEditUI.getSubmitType())){
			modifyPackage(bean);
			//int pictureWaybillCount = waybillService.getPictureWaybillCount();

			//查询本地待补录运单 by 352676
			int picturePendingLocal = waybillService.getPictureWaybillLocalCount();
			//查询全国带补录运单 by 352676
			int picturePendingAll = waybillService.getPictureWaybillAllCount();
			ui.pictureWaybillEditUI.picturePanel.button.setText("<html>"+i18n.get(
					"foss.gui.creating.picturePanel.labelLocal",
					picturePendingLocal)+"<br/>"+
					i18n.get(
							"foss.gui.creating.picturePanel.labelAll",
							picturePendingAll)+"</html>");
			/*ui.pictureWaybillEditUI.picturePanel.button.setText(i18n.get("foss.gui.creating.picturePanel.label",pictureWaybillCount));*/
			UIUtils.disableUI(ui);
			waybillEditUI.buttonPanel.getFullScreen().setEnabled(true);
			waybillEditUI.pictureWaybillEditUI.picturePanel.topButton.setEnabled(true);
			//获取当前是否有可录订单 by 352676
			int allowPendingCount=0;
			 @SuppressWarnings("unchecked")
			 List<String> newWaybills = (List<String>)SessionContext.get(WaybillConstants.NEW_WAYBILL_NOS);
			 try {
				 //WaybillPictureEntity pictureWaybill = waybillService.getPictureWaybill(newWaybills);
				 WaybillPictureEntity pictureWaybill = waybillService.getPictureWaybillIsExit(newWaybills);
				 if(pictureWaybill !=null ){
					 allowPendingCount=1;
				 }
			} catch (Exception e2) {
				MsgBox.showInfo(e2.getMessage());
			}
			
			if(allowPendingCount > 0){
				ui.pictureWaybillEditUI.picturePanel.pictureViewComp.setVisible(false);
				ui.pictureWaybillEditUI.picturePanel.lable1.setVisible(false);
				ui.pictureWaybillEditUI.picturePanel.nextButton.setVisible(true);
				ui.pictureWaybillEditUI.picturePanel.lable2.setVisible(false);
				ui.pictureWaybillEditUI.picturePanel.backButton.setEnabled(false);
			}else{
				ui.pictureWaybillEditUI.picturePanel.pictureViewComp.setVisible(false);
				ui.pictureWaybillEditUI.picturePanel.lable1.setVisible(true);
				ui.pictureWaybillEditUI.picturePanel.nextButton.setVisible(false);
				ui.pictureWaybillEditUI.picturePanel.lable2.setVisible(false);
				ui.pictureWaybillEditUI.picturePanel.backButton.setEnabled(false);
			}
			
		}else if(i18n.get("foss.gui.creating.buttonPanel.btnSubmitAndNextSingle.label").equals(ui.pictureWaybillEditUI.getSubmitType())){
			String waybillNo = bean.getWaybillNo();
			if(CommonContents.logToggle){
				CustomerImpOperLogHandler.setLogger(waybillNo).setInfo("btnSubmitAndNextSingleStart", "提交并进行下一单加载数据开始:");
			}
			final PictureWaybillEditUI threadUi = ui.pictureWaybillEditUI;
			new Thread(new Runnable() {
				@Override
				public void run() {
					AddWaybillUtils utils = new AddWaybillUtils(threadUi);
					LOG.info("提交并进行下一单开始加载...");
					threadUi.setWaybillNo("");
					utils.newPictureWaybill();
					LOG.info("提交并进行下一单完成加载...");					
				}
			}).start();
			if(CommonContents.logToggle){
				CustomerImpOperLogHandler.setLogger(waybillNo).setInfo("btnSubmitAndNextSingleEnd", "提交并进行下一单加载数据结束:");
			}
		}

	}
	
	/**
	 * 
	 * 全局缓存
	 * @author 025000-FOSS-helong
	 * @date 2013-1-26 下午05:15:41
	 */
	private void cacheData(WaybillPanelVo bean){
		// 将开单成功的运单缓存
		SessionContext.set(WaybillConstants.WAYBILL_NO, bean.getWaybillNo());
		
		//设置最新开单缓存
		Object obj = SessionContext.get(WaybillConstants.NEW_WAYBILL_NOS);
		List<String> lists = new ArrayList<String>();
		if(obj != null){
			lists = (List<String>)obj;
			if(lists.size()> NumberConstants.NUMBER_4){
				lists.remove(lists.size()-1);
			}
		}
		lists.add(0, bean.getWaybillNo());
		SessionContext.set(WaybillConstants.NEW_WAYBILL_NOS, lists);	
		
		if(bean.getPickupCentralized()){
			//缓存集中开单部门编码
			SessionContext.set(WaybillConstants.FOCUS_DEPT_CODE, bean.getReceiveOrgCode());
			//缓存集中开单部门名称
			SessionContext.set(WaybillConstants.FOCUS_DEPT_NAME, bean.getReceiveOrgName());
		}
	}
	
	private void modifyPackage(WaybillPanelVo bean){
		//包装备注
		if (StringUtil.isNotBlank(bean.getPackageRemark())) {
			StringBuffer sb = new StringBuffer();
			String packageRemark = bean.getPackageRemark();
			//将包装备注项字符串解析成数据组
			String[] remark = StringUtil.defaultIfNull(packageRemark).split(";");
			//去掉包装备注中的m,
			for(int i = 0 ; i < remark.length ; i++){
				if(!"M".equals(remark[i])){
					sb.append(remark[i]);
				}
			}
			bean.setPackageRemark(sb.toString());
		}
	}
	
	/**
	 * 
	 * 离线暂存
	 * @author 025000-FOSS-helong
	 * @date 2013-1-10 下午06:00:05
	 */
	private void offLineTempSave(WaybillPanelVo bean){
		WaybillTempSaveData tempSave = new WaybillTempSaveData(waybillEditUI);
		waybillService.tempSaveWaybill(tempSave.getWaybillDto(bean,waybillEditUI));
		MsgBox.showInfo(i18n.get("foss.gui.creating.waybillSubmitConfirmAction.msgBox.tempSaveWaybillSuccess"));
		//设置可以再次暂存
		bean.setPCPending(false);
	}
	
	private void saveWaybill(WaybillPanelVo bean,WaybillEditUI ui){
		WaybillTempSaveData tempSave = new WaybillTempSaveData(ui);
	 	final WaybillPendingDto waybill =tempSave.getWaybillDto(bean,waybillEditUI);
		/* zhangchengfu 20150530 FOSS系统新客户标签需求 begin */
		if (null != bean.getIndustrySourceCategory() 
				&& StringUtil.isNotBlank(bean.getIndustrySourceCategory().getValueCode())) {
			waybill.getWaybillPending().setIndustrySourceCategory(bean.getIndustrySourceCategory().getValueCode());
		}
		if (null != bean.getFlabelleavemonth() 
				&& StringUtil.isNotBlank(bean.getFlabelleavemonth().getValueCode())) {
			waybill.getWaybillPending().setFlabelleavemonth(bean.getFlabelleavemonth().getValueCode());
		}
		/* zhangchengfu 20150530 FOSS系统新客户标签需求 end */
		waybill.setLabeledGoodEntities(bean.getLabeledGoodEntities());
		waybill.setIsExpress(FossConstants.NO); 
		waybill.getWaybillPending().setPendingType(WaybillConstants.WAYBILL_STATUS_PDA_PENDING);
		BigDecimal goodsWeightTotal = waybill.getWaybillPending().getGoodsWeightTotal();
		BigDecimal goodsVolumeTotal = waybill.getWaybillPending().getGoodsVolumeTotal();
		if(goodsWeightTotal == null || goodsWeightTotal.compareTo(BigDecimal.ZERO) == 0){
			waybill.getWaybillPending().setGoodsWeightTotal(BigDecimal.ZERO);
		}
		if(goodsVolumeTotal ==null || goodsVolumeTotal.compareTo(BigDecimal.ZERO) == 0){
			waybill.getWaybillPending().setGoodsVolumeTotal(BigDecimal.ZERO);
		}
		waybill.getWaybillPending().setHandoverStatus(FossConstants.NO);
		waybill.getWaybillPending().setServiceRate(bean.getServiceRate());
		if(StringUtils.isNotBlank(waybill.getWaybillPending().getPackageRemark())){
			StringBuffer sb = new StringBuffer();
			String packageRemark = waybill.getWaybillPending().getPackageRemark();
			//将包装备注项字符串解析成数据组
			String[] remark = StringUtil.defaultIfNull(packageRemark).split(";");
			//判断包装备注中的的这段数据是否存在M信息，存在则用最新的信息替换
			if(!"M".equals(remark[0])){
				sb.append("M;");
				sb.append(waybill.getWaybillPending().getPackageRemark());
				waybill.getWaybillPending().setPackageRemark(sb.toString());
			}
		}else{
			waybill.getWaybillPending().setPackageRemark("M;");
		}
		if(bean.getBusinessZone() != null && bean.getBusinessZone()){
			waybill.getWaybillPending().setBusinessZone(FossConstants.YES);
		}else{
			waybill.getWaybillPending().setBusinessZone(FossConstants.NO);
		}
		if(bean.getResidentialDistrict() != null && bean.getResidentialDistrict()){
			waybill.getWaybillPending().setResidentialDistrict(FossConstants.YES);
		}else{
			waybill.getWaybillPending().setResidentialDistrict(FossConstants.NO);
		}
		
		/**
		 * 20160511添加
		 * @author Foss-278328-hujinyang
		 */
		waybill.setIsGuiSubmit(WaybillConstants.YES);
		waybill.setGuiTitleName(bean.getGuiTitleName());
		if(CommonContents.logToggle){
			 LOG.info("运单号："+bean.getWaybillNo()+" 运单暂存开始... ");
			 CustomerImpOperLogHandler.setLogger(bean.getWaybillNo()).setInfo("saveWaybillStart", "重量体积为0生成待补录开始:");
		}
		long begin = System.currentTimeMillis() ;
		if("图片开单".equals(bean.getGuiTitleName())){
			
			
			new Thread(new Runnable() {
				
				@Override
				public void run() {
//					long t = System.currenstTimeMillis();
					try {
//						Thread.currentThread();
//						Thread.sleep(WaybillConstants.PIC_THREAD_SLEEP_TIME);
						waybillService.tempSaveWaybill(waybill);
					} catch (Exception e) {
						//do nothing
					}
					
				}
			}).start();
		}else{
			waybillService.tempSaveWaybill(waybill);
		}
		if(CommonContents.logToggle){
			 LOG.info("运单号："+bean.getWaybillNo()+" 运单暂存完成. 耗时："+(System.currentTimeMillis()-begin));
			 CustomerImpOperLogHandler.setLogger(bean.getWaybillNo()).setInfo("saveWaybillEnd", "重量体积为0生成待补录结束:");
		}
		MsgBox.showInfo(i18n.get("foss.gui.creating.PictureWaybillTempSaveAction.msgBox.tempSaveWaybillSuccess"));
	}
	
	
	/**
	 * 
	 * 运单在线提交
	 * @author 025000-FOSS-helong
	 * @date 2013-1-10 下午06:00:24
	 */
	private void submit(WaybillPanelVo bean)
	{
		
		final WaybillDto waybill = getWaybillDto(bean);
		//设置是否快递字段  add  by   yangkang
		waybill.setIsExpress(FossConstants.NO);
		//设置是否是GUI提交以及标题来源   因为这个方法pda提交和gui提交公用同一个方法 日志不能确定具体是那种方式提交的  submitWaybill add by hujinyang 20160310
		waybill.setIsGuiSubmit(FossConstants.YES);
		waybill.setGuiTitleName(bean.getGuiTitleName());
		if(CommonContents.logToggle){
			 LOG.info("运单号："+bean.getWaybillNo()+" 重量体积不为0直接开单开始... ");
			 CustomerImpOperLogHandler.setLogger(bean.getWaybillNo()).setInfo("saveSubmitWaybillStart", "重量体积不为0直接开单开始:");
		}
		long begin = System.currentTimeMillis() ;
		if("图片开单".equals(bean.getGuiTitleName())){
			
			
			new Thread(new Runnable() {
				
				@Override
				public void run() {
//					long t = System.currentTimeMillis();
					try {
//						Thread.currentThread();
//						Thread.sleep(WaybillConstants.PIC_THREAD_SLEEP_TIME);
						waybillService.submitWaybill(waybill);
						//业务监控
						waybillService.businessMonitor(waybill);
					} catch (Exception e) {
						//do nothing
					}
					
				}
			}).start();
		}else{
			waybillService.submitWaybill(waybill);
			//业务监控
			try {
				waybillService.businessMonitor(waybill);
			} catch (Exception e) {
				LOG.error("运单提交业务监控数据处理失败：",e);
			}
		}
		if(CommonContents.logToggle){
			LOG.info(" 重量体积不为0直接开单开始. 运单号："+bean.getWaybillNo()+" ; 耗时："+(System.currentTimeMillis()-begin));
			CustomerImpOperLogHandler.setLogger(bean.getWaybillNo()).setInfo("saveSubmitWaybillEnd", "重量体积不为0直接开单结束:");
		}
		
		//业务监控
//		try {
//			waybillService.businessMonitor(waybill);
//		} catch (Exception e) {
//			LOG.error("运单提交业务监控数据处理失败：",e);
//		}
		if(WaybillConstants.WAYBILL_STATUS_OFFLINE_PENDING.equals(bean.getWaybillstatus())){
			//离线运单提交成功后删除本地记录
			waybillOffLinePendingService.deleteByPrimaryKey(bean.getId());
		}
		
		if(StringUtils.isEmpty(bean.getChannelCustId()) && StringUtils.isNotEmpty(bean.getOrderNo())){
			LOG.error("********** 订单号对应的channelCustId值为空！订单号："+bean.getOrderNo()+"**********");
		}
		MsgBox.showInfo(i18n.get("foss.gui.creating.waybillSubmitConfirmAction.msgBox.submitWaybillSuccess"));
	}
	
	/**
	 * 
	 * 将开单界面控件全部设置成不可编辑，将新增按钮设置为可编辑
	 * @author 025000-FOSS-helong
	 * @date 2012-12-1 上午10:49:57
	 */
	private void componentSetEnable(){
		UIUtils.disableUI(waybillEditUI);
		waybillEditUI.buttonPanel.getBtnNew().setEnabled(true);//新增
		waybillEditUI.buttonPanel.getBtnPrint().setEnabled(true);//运单打印
		waybillEditUI.buttonPanel.getBtnPreview().setEnabled(true);//运单打印预览
		waybillEditUI.buttonPanel.getBtnPrintLabel().setEnabled(true);//打印标签
		waybillEditUI.buttonPanel.getBtnSearchBranch().setEnabled(true);//查询网点
		//waybillEditUI.buttonPanel.getBtnGIS().setEnabled(true);//电子地图
		waybillEditUI.buttonPanel.getBtnSearchPrice().setEnabled(true);//公布价查询
		//waybillEditUI.buttonPanel.fullScreen.setEnabled(true);
		
		//把焦点放在这里 防止出现红色的运单已存在的多余提示
		waybillEditUI.buttonPanel.getBtnPrint().grabFocus();
		waybillEditUI.buttonPanel.getBtnPrint().requestFocus();
		
		//设置其他费用不可编辑
		waybillEditUI.incrementPanel.getTblOther().setEnabled(false);
	}
	
	
	/**
	 * 
	 * 运单打印
	 * @author 025000-FOSS-helong
	 * @throws NoSuchMethodException 
	 * @throws InvocationTargetException 
	 * @throws IllegalAccessException 
	 * @date 2012-12-1 上午10:54:49
	 */
	private void waybillPrint(WaybillEditUI ui,String printTemplates) throws IllegalAccessException, InvocationTargetException, NoSuchMethodException
	{
		waybillService.printWaybillFirstTime(ui,printTemplates);
	}
	
	/**
	 * 打木标签打印
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	private void waybillWoodpackagingLabelPrint(String waybillNo){
		try {
			Boolean isPrint=true;
			if (StringUtils.isEmpty(waybillNo)) {
				return;
			}
			//查询运单相关信息
			// 运单信息
			WaybillEntity waybillEntity = waybillService.queryNewWaybillByNumber(waybillNo);
			if(waybillEntity == null){
				return;
		   }
			// 总重量
			printLabelBean.setWeight(String.valueOf(waybillEntity.getGoodsWeightTotal() ==null ? "" : waybillEntity.getGoodsWeightTotal()));
			//总件数
			printLabelBean.setTotalPieces(String.valueOf(waybillEntity.getGoodsQtyTotal() ==null ? "" : waybillEntity.getGoodsQtyTotal()));
			// 运单号
			printLabelBean.setWaybillNumber(waybillEntity.getWaybillNo());
			if(StringUtils.isEmpty(waybillEntity.getProductCode())){
				return;
			}
			//运输性质
			String transtype = waybillService.queryWoodenProductByCache(waybillEntity.getProductCode());
			if(StringUtils.isEmpty(transtype)){
				return;
			}
			printLabelBean.setTranstype(transtype);
			if (confirmDialog instanceof SubmitConfirmDialog) {
				//转换对象
				SubmitConfirmDialog d = (SubmitConfirmDialog) confirmDialog;
				isPrint = d.getChckbxPrintCheckBox().isSelected();
				//德邦Logo
				printLabelBean.setIsPrintLogo(isPrint ? WaybillConstants.YES : WaybillConstants.NO);
			}
			WoodenRequirementsEntity woodenRequirementsEntity = new WoodenRequirementsEntity();
			//查询打木架需求表获取打木相关数据
			woodenRequirementsEntity = waybillService.queryWoodenRequirement(waybillNo); 
			//如果查询打木相关数据不为空就进行打印数据封装
			if (woodenRequirementsEntity == null) {
				return;
			}
			// 打木架货物尺寸
			printLabelBean.setStandGoodsSize(woodenRequirementsEntity.getStandGoodsSize());
			// 打木架货物件数
			printLabelBean.setStandGoodsNum(woodenRequirementsEntity.getStandGoodsNum());
			// 打木架货物体积
			printLabelBean.setStandGoodsVolume(woodenRequirementsEntity.getStandGoodsVolume());
			//打木架要求
			printLabelBean.setStandRequirement(woodenRequirementsEntity.getStandRequirement());
			// 打木箱货物件数
			printLabelBean.setBoxGoodsNum(woodenRequirementsEntity.getBoxGoodsNum());
			// 打木箱货物尺寸
			printLabelBean.setBoxGoodsSize(woodenRequirementsEntity.getBoxGoodsSize());
			// 打木箱货物体积
			printLabelBean.setBoxGoodsVolume(woodenRequirementsEntity.getBoxGoodsVolume());
			//打木箱要求
			printLabelBean.setBoxRequirement(woodenRequirementsEntity.getBoxRequirement());
			//打木托要求
			printLabelBean.setSalverRequirement(woodenRequirementsEntity.getSalverRequirement());
			
			/**
			 * 查询所有流水号
			 */
			List<SwiftNumberInfoDto> labeledlist = waybillService.queryUnpackDetailss(waybillNo);
			if (labeledlist==null) {
				return;
			}
			Collections.sort(labeledlist, new Comparator<SwiftNumberInfoDto>() {
				@Override
				public int compare(SwiftNumberInfoDto q1,SwiftNumberInfoDto q2) {
					int k =Integer.parseInt(q1.getSerialNo()) - Integer.parseInt(q2.getSerialNo());
					return k == 0 ? q2.getPackageType().compareTo(q1.getPackageType()) : k;
				}
			});
			Map<String ,String> totalPiecesMap = new LinkedHashMap<String ,String>();
			// 如果查询的流水号不为空就添加到totalPiecesList
			if (CollectionUtils.isNotEmpty(labeledlist)) {
				for (SwiftNumberInfoDto q : labeledlist) {
					if (StringUtils.isNotBlank(q.getSerialNo())) {
						totalPiecesMap.put(q.getSerialNo(), q.getPackageType());
					}
				}
			}
            Iterator<String> ite = totalPiecesMap.values().iterator();
			
			Map<String, Integer> countMap =new HashMap<String, Integer>();
			
			while(ite.hasNext()){
				String item = ite.next();
				
				if(countMap.containsKey(item)){
					countMap.put(item, Integer.valueOf(countMap.get(item).intValue() + 1));
				}else{
					countMap.put(item, new Integer(1));
				}
			}
			
			//print the count
			for (Iterator iter = countMap.keySet().iterator(); iter.hasNext();) {
				if(countMap.get("MAKE_WOODEN_STOCK")!=null){
					int l=countMap.get("MAKE_WOODEN_STOCK");
					// 打木托件数
					printLabelBean.setSalverGoodsNum(l);
				}else{
					// 打木托件数
					printLabelBean.setSalverGoodsNum(0);
				}
				break;
			}
			//打木托的个数
			printLabelBean.setSalverGoodsNum(printLabelBean.getSalverGoodsNum());
			for (String s : totalPiecesMap.keySet()) {
				/**
				 * 打印一次就清空流水號和包裝類型
				 */
				printLabelBean.setPrintSerialnos(null);
				printLabelBean.setPacking(null);
				// 判断获取的流水号是打木架还是木箱,如果小于等于打木架件数就为打木架
				print(s , totalPiecesMap);	
			}
		} catch (Exception exp) {
			if(LOG.isErrorEnabled()){
				LOG.error(exp);
			}
		}
	}

	@SuppressWarnings("rawtypes")
	private void print(String s, Map<String, String> map) throws Exception {
		int num1=printLabelBean.getStandGoodsNum() ==null ? 0 : printLabelBean.getStandGoodsNum();
		int num2=printLabelBean.getBoxGoodsNum() ==null ? 0 : printLabelBean.getBoxGoodsNum();
		if (StringUtils.isNotBlank(s) && Integer.parseInt(s) <= printLabelBean.getStandGoodsNum()) {
			// 判断页面取出的数据和循环拿出的数据一样（流水号）才打印
				// 判断是否有打托
				if ("MAKE_WOODEN_STOCK".equals(map.get(s))) {
					// 打木包装类型
					printLabelBean
							.setPacking(i18n.get("foss.gui.creating.cargoInfoPanel.wood.buttonLabel"));
				} else {
					printLabelBean.setPacking(i18n.get("foss.gui.creating.cargoInfoPanel.wood.button"));
				}
				//将查询的流水号添加到printLabelBean
				printLabelBean.setPrintSerialnos(s);
				PrintUtil printUtil = new PrintUtil();
				LabelPrintContext ctx = printUtil.printWoodenLabelData(printLabelBean);
				try {
					LabelPrintManager.doLabelPrintAction(LblPrtServiceConst.key_lblprt_program_woodelReturnPrintWorker,ctx);
					UserEntity userEntity = (UserEntity) SessionContext
							.get(SessionContext.KEY_USER);
						GUIPrintLabelDto printLabelEntity = new GUIPrintLabelDto();
						printLabelEntity.setWaybillNo(printLabelBean
								.getWaybillNumber());
						printLabelEntity.setSerialNo(s);
						printLabelEntity.setPrintTime(new Date());
						printLabelEntity.setPrintUserCode(userEntity.getEmployee()
								.getEmpCode());
						printLabelEntity.setPrintUserName(userEntity.getEmployee()
								.getEmpName());
						printLabelEntity.setLableType(2);
						waybillService.addPrintLabelInfo(printLabelEntity);
				} catch (PrintException e1) {
					JOptionPane
							.showMessageDialog(
									null,
									i18n.get("foss.gui.creating.printSignUI.msgbox.error.printerNotConnected"),
									i18n.get("foss.gui.creating.printSignUI.msgbox.error"),
									JOptionPane.WARNING_MESSAGE);
				}
			// 打木箱
		} else if (StringUtils.isNotBlank(s) && Integer.parseInt(s) > printLabelBean.getStandGoodsNum() && Integer.parseInt(s) <= (num1+num2)) {
				// 判断是否有打托
				if ("MAKE_WOODEN_STOCK".equals(map.get(s))) {
					// 打木包装类型
					printLabelBean.setPacking(i18n.get("foss.gui.creating.cargoInfoPanel.wood.buttonLabel.case"));
				} else {
					printLabelBean.setPacking(i18n.get("foss.gui.creating.cargoInfoPanel.wood.button.case"));
				}
				//将查询的流水号添加到printLabelBean
				printLabelBean.setPrintSerialnos(s);
				PrintUtil printUtil = new PrintUtil();
				LabelPrintContext ctx = printUtil
						.printWoodenLabelData(printLabelBean);
				try {
					LabelPrintManager.doLabelPrintAction(LblPrtServiceConst.key_lblprt_program_woodelReturnPrintWorker,ctx);
					UserEntity userEntity = (UserEntity) SessionContext
							.get(SessionContext.KEY_USER);
						GUIPrintLabelDto printLabelEntity = new GUIPrintLabelDto();
						printLabelEntity.setWaybillNo(printLabelBean
								.getWaybillNumber());
						printLabelEntity.setSerialNo(s);
						printLabelEntity.setPrintTime(new Date());
						printLabelEntity.setPrintUserCode(userEntity.getEmployee()
								.getEmpCode());
						printLabelEntity.setPrintUserName(userEntity.getEmployee()
								.getEmpName());
						printLabelEntity.setLableType(2);
						waybillService.addPrintLabelInfo(printLabelEntity);
				} catch (PrintException e1) {
					JOptionPane
							.showMessageDialog(
									null,
									i18n.get("foss.gui.creating.printSignUI.msgbox.error.printerNotConnected"),
									i18n.get("foss.gui.creating.printSignUI.msgbox.error"),
									JOptionPane.WARNING_MESSAGE);
				}
			// 打木托
		} else {
			if (StringUtils.isNotBlank(s) && "MAKE_WOODEN_STOCK".equals(map.get(s))&& ! (Integer.parseInt(s)<= printLabelBean.getStandGoodsNum() && Integer.parseInt(s) <= printLabelBean.getStandGoodsNum() && Integer.parseInt(s) <= (num1+num2))) {
				printLabelBean.setPacking(i18n.get("foss.gui.creating.cargoInfoPanel.wood.button.pallet"));
				//将查询的流水号添加到printLabelBean
				printLabelBean.setPrintSerialnos(s);
				PrintUtil printUtil = new PrintUtil();
				LabelPrintContext ctx = printUtil.printWoodenLabelData(printLabelBean);
				try {
					LabelPrintManager.doLabelPrintAction(LblPrtServiceConst.key_lblprt_program_woodelReturnPrintWorker,ctx);
					UserEntity userEntity = (UserEntity) SessionContext
							.get(SessionContext.KEY_USER);
						GUIPrintLabelDto printLabelEntity = new GUIPrintLabelDto();
						printLabelEntity.setWaybillNo(printLabelBean
								.getWaybillNumber());
						printLabelEntity.setSerialNo(s);
						printLabelEntity.setPrintTime(new Date());
						printLabelEntity.setPrintUserCode(userEntity.getEmployee()
								.getEmpCode());
						printLabelEntity.setPrintUserName(userEntity.getEmployee()
								.getEmpName());
						printLabelEntity.setLableType(2);
						waybillService.addPrintLabelInfo(printLabelEntity);
				} catch (PrintException e1) {
					JOptionPane
							.showMessageDialog(
									null,
									i18n.get("foss.gui.creating.printSignUI.msgbox.error.printerNotConnected"),
									i18n.get("foss.gui.creating.printSignUI.msgbox.error"),
									JOptionPane.WARNING_MESSAGE);
				}
			}
		}
	}

	
	/**
	 * 
	 * 标签打印
	 * @author 025000-FOSS-helong
	 * @throws NoSuchMethodException 
	 * @throws InvocationTargetException 
	 * @throws IllegalAccessException 
	 * @date 2012-12-1 上午10:54:49
	 */
	private void waybillLabelPrint(String waybillNo) {
		try {
			Boolean isPrint=true;
			printLabelBean = waybillService.getLabelPrintInfos(waybillNo,null);
			if (printLabelBean.getWaybillNumber() == null) {
				JOptionPane.showMessageDialog(null, i18n.get("foss.gui.creating.waybillSubmitConfirmAction.showMessageDialog.nullWaybillNumber"), i18n.get("foss.gui.creating.waybillEditUI.common.error"),
						JOptionPane.WARNING_MESSAGE);
				return;
			}
			//如果是合伙人就调用综合的接口查询出对接外场
			String partner=waybillService.selectqueryWaybillForPrint(waybillNo);
			if("Y".equals(partner)){
				if(StringUtils.isEmpty(printLabelBean.getCustomerPickupOrgCode())){
					JOptionPane.showMessageDialog(null,
							i18n.get("foss.waybill.eWaybillService.destinationIsNull"),
							i18n.get("foss.gui.creating.printSignUI.msgbox.error"),
							JOptionPane.WARNING_MESSAGE);
						return;
				}
				//对接外场
				String field=waybillService.selectqueryDeptDeptTransferForNameByCode(printLabelBean.getCustomerPickupOrgCode());
				//如果有对接外场就添加进打印信息,如果对接外场为空就设置对接外场为空字符串（按照原有的货物标签打印）
				if(StringUtils.isBlank(field)){
					JOptionPane.showMessageDialog(null,
							i18n.get("foss.waybill.eWaybillService.partnerdestinationIsNull"),
							i18n.get("foss.gui.creating.printSignUI.msgbox.error"),
							JOptionPane.WARNING_MESSAGE);
					printLabelBean.setPartnerBillingLogo("");
				}else{
					printLabelBean.setPartnerBillingLogo(field);
				}
			}else{
				printLabelBean.setPartnerBillingLogo("");
			}
			if (confirmDialog instanceof SubmitConfirmDialog) {
				//转换对象
				SubmitConfirmDialog d = (SubmitConfirmDialog) confirmDialog;
				isPrint = d.getChckbxPrintCheckBox().isSelected();
			}
			//获得流水号
			printLabelBean.setPrintSerialnos(getSerialNos(waybillNo,printLabelBean.getTotalPieces()));
			//德邦Logo
			printLabelBean.setIsPrintLogo(isPrint ? WaybillConstants.YES : WaybillConstants.NO);
			String serialNosText = getSerialNos(waybillNo,printLabelBean.getTotalPieces());
			String[] serialNos = serialNosText.split(",");
			PrintUtil printUtil = new PrintUtil();
			LabelPrintContext ctx = printUtil.printLabelData(printLabelBean);
			try {
				LabelPrintManager.doLabelPrintAction(LblPrtServiceConst.key_lblprt_program_CommLabelPrintWorker,ctx);
				UserEntity userEntity = (UserEntity)SessionContext.get(SessionContext.KEY_USER);
				for (int i = 0; i < serialNos.length; i++) {
					GUIPrintLabelDto printLabelEntity = new GUIPrintLabelDto();
					printLabelEntity.setWaybillNo(waybillNo);
					printLabelEntity.setSerialNo(serialNos[i]);
					printLabelEntity.setPrintTime(new Date());
					printLabelEntity.setPrintUserCode(userEntity.getEmployee().getEmpCode());
					printLabelEntity.setPrintUserName(userEntity.getEmployee().getEmpName());
					printLabelEntity.setLableType(1);
					waybillService.addPrintLabelInfo(printLabelEntity);
				}
				//如果是拼箱营就继续打印
				WaybillEntity waybillEntity =new WaybillEntity();
				DispatchOrderChannelNumberEntity entity = new DispatchOrderChannelNumberEntity();
				//如果运单号不为空
				if(!"".equals(printLabelBean.getWaybillNumber()) && printLabelBean.getWaybillNumber() != null){
					//根据运单号查询订单号
					waybillEntity =waybillService.queryWaybillByNumber(printLabelBean.getWaybillNumber());
					if( waybillEntity != null){
						//根据订单号查询订单信息
						entity =waybillService.queryWaybillTypeEntityByOrderNo(waybillEntity.getOrderNo());
						//如果订单来源是拼箱营就打印此标签
						if(entity !=null && "PINXIANGYING".equals(entity.getOrderSource())){
								//将渠道单号放入打印数据中
								printLabelBean.setChannelNumber(entity.getChannelNumber());
								LabelPrintContext ctx1 = printUtil.printLabelData(printLabelBean);
								for (int i = 0; i < serialNos.length; i++) {
									//选择拼箱营打印模板
									LabelPrintManager.doLabelPrintAction(LblPrtServiceConst.key_lblprt_program_PinxiangyingLabelPrintWorker,ctx1);
									//记录打印日志
									UserEntity userEntityPin = (UserEntity)SessionContext.get(SessionContext.KEY_USER);
									GUIPrintLabelDto printLabelEntity = new GUIPrintLabelDto();
									printLabelEntity.setWaybillNo(waybillNo);
									printLabelEntity.setSerialNo(serialNos[i]);
									printLabelEntity.setPrintTime(new Date());
									printLabelEntity.setPrintUserCode(userEntityPin.getEmployee().getEmpCode());
									printLabelEntity.setPrintUserName(userEntityPin.getEmployee().getEmpName());
									waybillService.addPrintLabelInfo(printLabelEntity);
								}
							LOG.debug(entity+"判断是不是空：<<>>>"+entity.getOrderSource());
						}
					}
				}
				//MsgBox.showInfo(i18n.get("foss.gui.creating.printSignUI.msgbox.printSuccess"));
			} catch (PrintException e) {
				JOptionPane.showMessageDialog(null, i18n.get("foss.gui.creating.printSignUI.msgbox.error.printerNotConnected"),
						i18n.get("foss.gui.creating.printSignUI.msgbox.error"),
						JOptionPane.WARNING_MESSAGE);
			}

		} catch (Exception exp) {
			LOG.error("标签打印异常"+exp.toString(),exp);
			JOptionPane.showMessageDialog(null, exp.toString(), i18n.get("foss.gui.creating.waybillEditUI.common.error"),
					JOptionPane.WARNING_MESSAGE);
		}
	}
	
	//获得流水号 字符串
	public String getSerialNos(String waybillNo,String totalGoodsQty){
		String resultString = "";
		StringBuffer tempAreaInfo = new StringBuffer("");
		if (WaybillConstants.ONLINE_LOGIN.equals(SessionContext.get(WaybillConstants.LOGIN_TYPE).toString())) {
			 List<LabeledGoodEntity> labeledlist = waybillService.queryAllSerialByWaybillNo(waybillNo);
			for (int i = 0; i < Integer.parseInt(printLabelBean.getTotalPieces()); i++) {
				tempAreaInfo.append(labeledlist.get(i).getSerialNo()).append(COMMA);
				//tempAreaInfo.append( String.format(FORMATSTR,Integer.parseInt(labeledlist.get(i).getSerialNo()))).append(COMMA);
			}
		}else {
			//离线流水号
			tempAreaInfo = getPrintSerialnos(Integer.parseInt(totalGoodsQty));
		}
		if (tempAreaInfo.length() != 0) {
			resultString = tempAreaInfo.substring(0,tempAreaInfo.length()-1);
		}
		return resultString;
	}
	
	//根据货物总件数生成流水号。
		private StringBuffer getPrintSerialnos(int totalGoodsQty){
			StringBuffer serialnos = new StringBuffer();
			if (totalGoodsQty >0) {
				for(int i = 1; i<=totalGoodsQty; i++){
					// 文本区的赋值 补成4位的
					serialnos.append(String.format(WaybillConstants.FORMATSTR,i)).append(COMMA);
				}
			}
			return serialnos;
		}
	/**
	 * 
	 * 运单新增
	 * @author 025000-FOSS-helong
	 * @date 2012-12-1 上午10:55:52
	 */
	public void waybillNewAdd()
	{
		IApplication application = waybillEditUI.getApplication();
		IEditor editor = waybillEditUI.getEditor();
		editor.close();
		
		if(WaybillConstants.WAYBILL_FOCUS.equals(waybillEditUI.getWaybillType()))
		{
			openFocusWaybill(application);
		}else if(WaybillConstants.WAYBILL_SALE_DEPARTMENT.equals(waybillEditUI.getWaybillType()))
		{
			openSalesDepartmentWaybill(application);
		}
	}
	
	/**
	 * 
	 * 打开集中开单
	 * @author 025000-FOSS-helong
	 * @date 2012-12-12 下午07:19:28
	 */
	private void openFocusWaybill(IApplication application)
	{
		EditorConfig editConfig = new EditorConfig();
		editConfig.setTitle(i18n.get("foss.gui.creating.buttonPanel.waybillFocus.label"));
		editConfig.setPluginId("com.deppon.foss.module.pkp-creating");
		IEditor editor = application
				.openEditorAndRetrun(editConfig,
						"com.deppon.foss.module.pickup.creating.client.ui.WaybillEditUI");
		WaybillEditUI waybillEditUI2 = (WaybillEditUI) editor.getComponent();
		waybillEditUI2.setEditor(editor);
		
		//营业部开单
		waybillEditUI2.setWaybillType(WaybillConstants.WAYBILL_FOCUS);
		waybillEditUI2.openUI();
	}
	
	
	/**
	 * 
	 * 打开营业部开单
	 * @author 025000-FOSS-helong
	 * @date 2012-12-12 下午07:20:02
	 */
	private void openSalesDepartmentWaybill(IApplication application)
	{
		EditorConfig editConfig = new EditorConfig();
		editConfig.setTitle(i18n.get("foss.gui.creating.buttonPanel.waybillSaleDepartment.label"));
		editConfig.setPluginId("com.deppon.foss.module.pkp-creating");
		IEditor editor = application
				.openEditorAndRetrun(editConfig,
						"com.deppon.foss.module.pickup.creating.client.ui.WaybillEditUI");
		WaybillEditUI waybillEditUI = (WaybillEditUI) editor.getComponent();
		waybillEditUI.setEditor(editor);
		
		//营业部开单
		waybillEditUI.setWaybillType(WaybillConstants.WAYBILL_SALE_DEPARTMENT);
		waybillEditUI.openUI();
	}

	/**
	 * 
	 * 组装后台DTO
	 * 
	 * @author 025000-FOSS-helong
	 * @throws NoSuchMethodException
	 * @throws InvocationTargetException
	 * @throws IllegalAccessException
	 * @date 2012-11-3 下午04:06:31
	 */
	private WaybillDto getWaybillDto(WaybillPanelVo vo) {
		WaybillDto dto = new WaybillDto();
		//设置运单基本信息
		dto.setWaybillEntity(getWaybillEntity(vo));
		dto.setLabeledGoodEntities(vo.getLabeledGoodEntities());	//zxy 20131118 ISSUE-4391 往后台传木托勾选列表
		//设置原运单号
		String oldWaybillNo = StringUtil.defaultIfNull(vo.getOldWaybillNo());
		if(StringUtil.isNotEmpty(oldWaybillNo)){
			dto.setOldWaybillNo(oldWaybillNo);
		}else{
			dto.setOldWaybillNo(dto.getWaybillEntity().getWaybillNo());
		}
		//非批量开单不允许开内部带货送货 - 272311-sangwenhao
		if(WaybillConstants.DELIVER_INNER_PICKUP.equals(vo.getReceiveMethod().getValueCode())
				&& !waybillEditUI.isBatchWaybill()){
			throw new WaybillValidateException(i18n.get("foss.gui.creating.waybillSubmitConfirmAction.DeliverInnerPickerException"));
		}
		// 非内部带货，内部带货不产生任何与费用相关的数据
		if (!WaybillConstants.INNER_PICKUP.equals(vo.getReceiveMethod().getValueCode())
				&& !WaybillConstants.DELIVER_INNER_PICKUP.equals(vo.getReceiveMethod().getValueCode())) {

			WaybillOtherCharge model = null;
			WaybillDiscountCanvas discountTableModel = null;
			if (confirmDialog instanceof SubmitConfirmDialog) {
				SubmitConfirmDialog d = (SubmitConfirmDialog) confirmDialog;
				model = (WaybillOtherCharge) d.getWaybillEditUI().incrementPanel.getTblOther().getModel();
				discountTableModel = (WaybillDiscountCanvas) d.getWaybillEditUI().canvasContentPanel.getConcessionsPanel().getTblConcessions().getModel();
			} else {
				SubmitConfirmCompareImportDialog d = (SubmitConfirmCompareImportDialog) confirmDialog;
				model = (WaybillOtherCharge) d.getWaybillEditUI().incrementPanel.getTblOther().getModel();
				discountTableModel = (WaybillDiscountCanvas) d.getWaybillEditUI().canvasContentPanel.getConcessionsPanel().getTblConcessions().getModel();
			}

			dto.setWaybillChargeDtlEntity(WaybillDtoFactory.getWaybillChargeDtlEntity(model, vo));
			dto.setWaybillDisDtlEntity(getWaybillDisDtlEntity(discountTableModel, vo));
			dto.setWaybillPaymentEntity(getWaybillPaymentEntity(vo));
			// 设置开户银行信息
			dto.setOpenBank(vo.getOpenBank());
		}

		if (!StringUtils.isEmpty(vo.getPromotionsCode())) {
			CouponInfoDto couponInfoDto = vo.getCouponInfoDto();
			// 判断优惠券实体是否为空
			if (couponInfoDto != null) {
				dto.setCouponInfoDto(couponInfoDto);
			} else {
				throw new WaybillValidateException(i18n.get("foss.gui.creating.waybillSubmitConfirmAction.exception.nullCouponInfo"));
			}
			// 查看是否有优惠券编号
			if (StringUtils.isNotEmpty(vo.getPromotionsCode())) {
				couponInfoDto.setUsed(true);
				dto.setCouponInfoDto(couponInfoDto);
			}
		}

		dto.setWoodenRequirementsEntity(getWoodenRequirementsEntity(vo));
		dto.setActualFreightEntity(getActualFreightEntity(vo));
		/**
		 * 安裝明細
		 * foss-254615-mabinliang
		 */
		if(getSpecialValueAddedServiceEntity(vo)!=null){
		dto.setSpecialValueAddedServiceEntity(getSpecialValueAddedServiceEntity(vo));
		}
		// 优惠券不为空
		
		//降價返券需求：獲取當前版本的價格計算折前運費，需要在提交的時候再次計算運費，故保存 产品价格主参数
		dto.setProductPriceDtoCollection(vo.getProductPriceDtoCollection());
		
		dto.setPartnerBilling(vo.getPartnerBilling());
		//合伙人信息
		dto.setPtpWaybillDto(getPtpWaybillInfo(vo));
		/**
		 * @项目：智能开单项目
		 * @功能：保存IntelligenceBillTimeGather类
		 * @author:218371-foss-zhaoyanjun
		 * @date:2016-05-19下午18:08
		 */
		try {
			if(vo.getIbtg()!=null){
				IntelligenceBillTimeGather ibtg=new IntelligenceBillTimeGather();
				dto.setIbtg(ibtg);
				BeanUtils.copyProperties(dto.getIbtg(), vo.getIbtg());
			}
		} catch (Exception e) {
			if(LOG.isErrorEnabled()){
				LOG.error(e);
			}
		}
		return dto;
	}
	
	private PtpWaybillDto getPtpWaybillInfo(WaybillPanelVo vo){
		PtpWaybillDto ptpWaybillDto = new PtpWaybillDto();
		PtpWaybillOrgVo ptpWaybillOrgVo = vo.getPtpWaybillOrgVo();
		//基础送货费
		ptpWaybillDto.setBaseDeliveryGoodsFeeOrg(StringUtils.isNotBlank(ptpWaybillOrgVo.getBaseDeliveryGoodsFee()) ? ptpWaybillOrgVo.getBaseDeliveryGoodsFee():"0");
		// 打木箱货物费用
		ptpWaybillDto.setBoxChargeOrg(ptpWaybillOrgVo.getBoxCharge()!=null ? ptpWaybillOrgVo.getBoxCharge() : BigDecimal.ZERO);
		//代收货款手续费
		ptpWaybillDto.setCodFeeOrg(ptpWaybillOrgVo.getCodFee()!=null ? ptpWaybillOrgVo.getCodFee() :BigDecimal.ZERO );
		// 送货费+送货上楼费
		ptpWaybillDto.setDeliveryGoodsFeeOrg(StringUtils.isNotBlank(ptpWaybillOrgVo.getDeliveryGoodsFee()) ? ptpWaybillOrgVo.getDeliveryGoodsFee() :"0" );
		//保价费 
		ptpWaybillDto.setInsuranceFeeOrg(ptpWaybillOrgVo.getInsuranceFee()!=null ? ptpWaybillOrgVo.getInsuranceFee() : BigDecimal.ZERO);
		//其他费用
		ptpWaybillDto.setOtherFeeOrg(ptpWaybillOrgVo.getOtherFee()!=null ? ptpWaybillOrgVo.getOtherFee() : BigDecimal.ZERO);
		//包装费
		ptpWaybillDto.setPackageFeeOrg(StringUtils.isNotBlank(ptpWaybillOrgVo.getPackageFee())? ptpWaybillOrgVo.getPackageFee():"0") ;
		//接货费
		ptpWaybillDto.setPickUpFeeOrg(StringUtils.isNotBlank(ptpWaybillOrgVo.getPickUpFee())?ptpWaybillOrgVo.getPickUpFee():"0");
		//打木托货物费用
		ptpWaybillDto.setSalverGoodsChargeOrg(ptpWaybillOrgVo.getSalverGoodsCharge()!=null ? ptpWaybillOrgVo.getSalverGoodsCharge() : BigDecimal.ZERO) ;
		//打木架货物费用
		ptpWaybillDto.setStandChargeOrg(ptpWaybillOrgVo.getStandCharge()!=null ? ptpWaybillOrgVo.getStandCharge() : BigDecimal.ZERO ) ;
		// 总费用
		ptpWaybillDto.setTotalFeeOrg(ptpWaybillOrgVo.getTotalFee()!=null ? ptpWaybillOrgVo.getTotalFee() : BigDecimal.ZERO) ;
		// 公布价运费
		ptpWaybillDto.setTransportFeeOrg(ptpWaybillOrgVo.getTransportFee()!=null ? ptpWaybillOrgVo.getTransportFee():BigDecimal.ZERO) ;
		//偏线费 352676
		ptpWaybillDto.setPartialTransportFeeOrg(ptpWaybillOrgVo.getPartialTransportFee()!=null ? ptpWaybillOrgVo.getPartialTransportFee():BigDecimal.ZERO);		
		//上楼费
		ptpWaybillDto.setUpFloorFeeOrg(StringUtils.isNotBlank(ptpWaybillOrgVo.getUpFloorFee()) ? ptpWaybillOrgVo.getUpFloorFee() : "0" ) ;
		//运单号
		ptpWaybillDto.setWaybillNo(vo.getWaybillNo());
		//送货进仓费
		ptpWaybillDto.setDeliveryWareHouseFeeOrg(ptpWaybillOrgVo.getDeliveryWareHouseFee()!=null ? ptpWaybillOrgVo.getDeliveryWareHouseFee() : BigDecimal.ZERO );
		//大件上楼费
		ptpWaybillDto.setBigGoodsUpFloorFeeOrg(ptpWaybillOrgVo.getBigGoodsUpFloorFee()!=null ? ptpWaybillOrgVo.getBigGoodsUpFloorFee() : BigDecimal.ZERO) ;
		//出发部门
		ptpWaybillDto.setReceiveOrgCode(vo.getReceiveOrgCode());
		//优惠劵金额--合伙人第二批需求--zoushengli
		ptpWaybillDto.setCouponFeeOrg(ptpWaybillOrgVo.getCouponFee()!=null ? ptpWaybillOrgVo.getCouponFee() : BigDecimal.ZERO);
		//到达部门 
		if(vo.getCustomerPickupOrgCode()!=null){
			ptpWaybillDto.setArriveOrgCode(vo.getCustomerPickupOrgCode().getCode());
		}else{
			ptpWaybillDto.setArriveOrgCode(vo.getLastLoadOrgCode());
		}
		//判断到达部门是否为合伙人
		BZPartnersContextUtil bzPartnersContextUtil = BZPartnersContextUtil.getBzPatnersContext();
		boolean flag = bzPartnersContextUtil.isPartner(ptpWaybillDto.getArriveOrgCode());
		ptpWaybillDto.setIsArriveDepPartner(flag);
		if(flag && BZPartnersJudge.IS_PARTENER){
			ptpWaybillDto.setFeeType(WaybillConstants.TWO);//0:成本  1：提成  2：成本和提成
		}else if(!flag && BZPartnersJudge.IS_PARTENER){
			ptpWaybillDto.setFeeType(WaybillConstants.ZERO);//0:成本  1：提成  2：成本和提成
		}else if(flag && !BZPartnersJudge.IS_PARTENER){
			ptpWaybillDto.setFeeType(WaybillConstants.ONE);//0:成本  1：提成  2：成本和提成
		}else{
			ptpWaybillDto.setFeeType(WaybillConstants.NEGATIVE_ONE);//-1：出发到达都不是合伙人  
		}
		//出发部门是否合伙人
		if(BZPartnersJudge.IS_PARTENER){
			ptpWaybillDto.setIsReceiveDepPartner(true);
		}else{
			ptpWaybillDto.setIsReceiveDepPartner(false);
		}
		// 是否上门接货
		ptpWaybillDto.setPickupToDoor(vo.getPickupToDoor());
		//送货上楼安装（家装）
		ptpWaybillDto.setPickupToDoorJZFeeOrg(ptpWaybillOrgVo.getPickupToDoorJZFee()!=null ? ptpWaybillOrgVo.getPickupToDoorJZFee() :BigDecimal.ZERO);
		//异常操作服务费 ZZ
		ptpWaybillDto.setExceptionOpreationFeeOrg(ptpWaybillOrgVo.getExceptionOpreationFee()!=null ? ptpWaybillOrgVo.getExceptionOpreationFee() : BigDecimal.ZERO);
		//超远派送费 CY
		ptpWaybillDto.setOverDistanceFeeOrg(ptpWaybillOrgVo.getOverDistanceFee()!=null ? ptpWaybillOrgVo.getOverDistanceFee() : BigDecimal.ZERO);
		//签收单
		ptpWaybillDto.setSignBillFeeOrg(ptpWaybillOrgVo.getSignBillFee()!=null ? ptpWaybillOrgVo.getSignBillFee() : BigDecimal.ZERO);
		//是否快递
		ptpWaybillDto.setIsExpress(WaybillConstants.NO);
		
		ptpWaybillDto.setIsChanged(WaybillConstants.NO);//是否更改单 Y：更改单；N:开单
		
		//返单类别
		DataDictionaryValueVo dataVo = vo.getReturnBillType();
		if(dataVo!=null){
			ptpWaybillDto.setReturnBillType(dataVo.getValueCode());
		}
		ptpWaybillDto.setBillWeight(vo.getBillWeight());//计费重量
		//币种
		ptpWaybillDto.setCurrencyCode(vo.getCurrencyCode());
	
		UserEntity user = (UserEntity) SessionContext.getCurrentUser();
		if(user != null ){
			EmployeeEntity employeeEntity = user.getEmployee();
			if(employeeEntity!=null){
				ptpWaybillDto.setUserCode(user.getEmployee().getEmpCode());//职员编号
				ptpWaybillDto.setUserName(user.getEmployee().getEmpName());// 用户登录名
				ptpWaybillDto.setCreateUserCode(user.getEmployee().getEmpCode());
				OrgAdministrativeInfoEntity dept = user.getEmployee().getDepartment();
				if(dept!=null){
					ptpWaybillDto.setCurrentDeptCode(dept.getCode());//当前登录部门编码
					ptpWaybillDto.setCurrentDeptName(dept.getName());//当前登录部门名称
					ptpWaybillDto.setCreateOrgCode(dept.getCode());
					ptpWaybillDto.setCurrentDeptUnifieldCode(dept.getUnifiedCode());//标杆编码
				}
			}
			
		}
		//合伙人到达加收金额 2016年9月1日 09:47:12 葛亮亮
		ptpWaybillDto.setOverTransportFeeOrg(ptpWaybillOrgVo.getOverTransportFee() != null ? ptpWaybillOrgVo.getOverTransportFee() : BigDecimal.ZERO);
		//合伙人到达加收费率
		ptpWaybillDto.setOverTransportRateOrg(ptpWaybillOrgVo.getOverTransportRate() != null ? ptpWaybillOrgVo.getOverTransportRate() : BigDecimal.ZERO);
		
		return ptpWaybillDto ;
	}

	/**
	 * 
	 * <p>
	 * 运单其他信息封装<br />
	 * </p>
	 * @author suyujun
	 * @version 0.1 2012-11-29
	 * @param vo
	 * @return
	 * ActualFreightEntity
	 */
	private ActualFreightEntity getActualFreightEntity(WaybillPanelVo vo){
		WaybillEntity waybillEntity = getWaybillEntity(vo); 
		ActualFreightEntity actualFreightEntity = new ActualFreightEntity();
		if(null!=vo.getPartnerBilling()){
			if(vo.getPartnerBilling()){
				actualFreightEntity.setPartnerBillingLogo("Y");
				actualFreightEntity.setPartnerName(vo.getPartnerName());
				actualFreightEntity.setPartnerPhome(vo.getPartnerPhone());
			}else{
				actualFreightEntity.setPartnerBillingLogo("N");
				actualFreightEntity.setPartnerName(vo.getPartnerName());
				actualFreightEntity.setPartnerPhome(vo.getPartnerPhone());
			}
		}
		//开始开单时间
		actualFreightEntity.setStartBillTime(vo.getStartBillTime());
		//运单号
		actualFreightEntity.setWaybillNo(vo.getWaybillNo());
		//货物名称
		actualFreightEntity.setGoodsName(vo.getGoodsName());
		//重量
		actualFreightEntity.setWeight(vo.getGoodsWeightTotal());
		//体积
		actualFreightEntity.setVolume(vo.getGoodsVolumeTotal());
		//件数
		actualFreightEntity.setGoodsQty(vo.getGoodsQtyTotal());
		//尺寸
		actualFreightEntity.setDimension(StringUtils.isNotEmpty(vo.getGoodsSize()) ? vo.getGoodsSize() : "1*1*1*1");
		//保险声明价值
		actualFreightEntity.setInsuranceValue(vo.getInsuranceAmount());
		//包装费
		actualFreightEntity.setPackingFee( vo.getPackageFee()!=null ? vo.getPackageFee() : BigDecimal.valueOf(0));
		//送货费
		actualFreightEntity.setDeliverFee( vo.getDeliveryGoodsFee() != null ? vo.getDeliveryGoodsFee(): BigDecimal.valueOf(0));
		//装卸费
		actualFreightEntity.setLaborFee( vo.getServiceFee()!=null ? vo.getServiceFee() :  BigDecimal.valueOf(0));
		//代收货款
		actualFreightEntity.setCodAmount( vo.getCodAmount() != null ? vo.getCodAmount(): BigDecimal.valueOf(0));
		//增值费
		actualFreightEntity.setValueaddFee( vo.getValueAddFee() !=null ? vo.getValueAddFee(): BigDecimal.valueOf(0));
		//公布价运费
		actualFreightEntity.setFreight( vo.getTransportFee()!=null ? vo.getTransportFee(): BigDecimal.valueOf(0));
		//结清状态 
		actualFreightEntity.setSettleStatus(FossConstants.NO);
		//结清时间
		actualFreightEntity.setSettleTime(new Date());
		//通知状态
		//actualFreightEntity.setNotificationType(vo.get)
		//通知时间
		//actualFreightEntity.setNotificationTime(vo);
		//送货时间 
		//actualFreightEntity.setDeliverDate(vo.getPreCustomerPickupTime());
		//实际送货方式
		actualFreightEntity.setActualDeliverType(vo.getReceiveMethod().getValueCode());
		//运单状态
		actualFreightEntity.setStatus(WaybillConstants.EFFECTIVE);
		//库存天数
		//actualFreightEntity.setStorageDay(vo.getst)
		//库存费用
		//actualFreightEntity.setStorageCharge(vo.get);
		//是否批量开单（批量开单是物质小组开单，不是营业部）
		if(waybillEditUI.isBatchWaybill()){
			actualFreightEntity.setIsBatchCreateWaybill(FossConstants.ACTIVE);
			waybillEntity.setCreateOrgCode(waybillEntity.getReceiveOrgCode());
			actualFreightEntity.setStartStockOrgCode(waybillService.queryStartStocksDepartmentService(waybillEntity));
		}else{
			actualFreightEntity.setStartStockOrgCode(waybillService.queryStartStocksDepartmentService(waybillEntity));
		}
		actualFreightEntity.setEndStockOrgCode(waybillService.queryEndStocksDepartmentService(waybillEntity));
		//actualFreightEntity.setActualDeliverType(vo.getdelivery)
		// 已生效
		actualFreightEntity.setStatus(WaybillConstants.EFFECTIVE);
		
		//判断大票货
		if(vo.getBigTicket() != null && vo.getBigTicket()){
			actualFreightEntity.setBigTicketGoods(FossConstants.YES);
		}else{
			actualFreightEntity.setBigTicketGoods(FossConstants.NO);
		}
		if(vo.getBusinessZone() != null && vo.getBusinessZone()){
			actualFreightEntity.setBusinessZone(FossConstants.YES);
		}else{
			actualFreightEntity.setBusinessZone(FossConstants.NO);
		}
		if(vo.getResidentialDistrict() != null && vo.getResidentialDistrict()){
			actualFreightEntity.setResidentialDistrict(FossConstants.YES);
		}else{
			actualFreightEntity.setResidentialDistrict(FossConstants.NO);
		}
		actualFreightEntity.setPackageRemark(vo.getPackageRemark());
		//整车开单的时候 对actual Freight表的字段做如下调整
		if(vo.getIsWholeVehicle()!= null && vo.getIsWholeVehicle()){
			//1  ARRIVE_GOODS_QTY = 开单件数
			actualFreightEntity.setArriveGoodsQty(vo.getGoodsQtyTotal());
			//2  ARRIVE_NOTOUT_GOODS_QTY 到达未签收件数  = 开单件数
			actualFreightEntity.setArriveNotoutGoodsQty(vo.getGoodsQtyTotal());
			//3  若预计到达时间 不为空则为预计到达时间，否则为当前时间
			//预计到达时间
			Date preArrivedTime = vo.getPreCustomerPickupTime();
			if(null != preArrivedTime){
				actualFreightEntity.setArriveTime(preArrivedTime);
			}else{
				actualFreightEntity.setArriveTime(new Date());
			}
		}
		//保存官网用户名
		actualFreightEntity.setChannelCustId(vo.getChannelCustId());
		//发票标记
		if(StringUtil.isNotEmpty(vo.getInvoice())){
			actualFreightEntity.setInvoice(vo.getInvoice());
		}else{
			actualFreightEntity.setInvoice(WaybillConstants.INVOICE_02);
		}//发货地址备注
		actualFreightEntity.setDeliveryCustomerAddressNote(vo.getDeliveryCustomerAddressNote());
		//收货地址备注
		actualFreightEntity.setReceiveCustomerAddressNote(vo.getReceiveCustomerAddressNote());

		//始发客户是否统一结算
		//如果在客户圈的有效客户我们将 客户圈实体中的统一结算字段传给结算
		if(StringUtil.isNotBlank(vo.getIsCustCircle()) && 
				StringUtil.equals("Y", vo.getIsCustCircle()) && 
				vo.getCustomerCircleEntity() != null &&
						vo.getCusBargainNewEntity() != null  &&
								vo.getCustomerNewEntity() !=null){
			//设置统一结算字段为客户圈实体中的统一结算字段
			actualFreightEntity.setStartCentralizedSettlement(vo.getCustomerCircleEntity().getIsFocusPay());
		}else{
			if(WaybillConstants.IS_NOT_NULL_FOR_AI.equals(vo.getStartCentralizedSettlement())){
				actualFreightEntity.setStartCentralizedSettlement(FossConstants.YES);
			}else{
				actualFreightEntity.setStartCentralizedSettlement(FossConstants.NO);
			}
		}
		actualFreightEntity.setStartContractOrgCode(vo.getStartContractOrgCode());
		actualFreightEntity.setStartReminderOrgCode(vo.getStartReminderOrgCode());
		//到达客户是否统一结算
		if(WaybillConstants.IS_NOT_NULL_FOR_AI.equals(vo.getArriveCentralizedSettlement())){
			actualFreightEntity.setArriveCentralizedSettlement(FossConstants.YES);
		}else{
			actualFreightEntity.setArriveCentralizedSettlement(FossConstants.NO);
		}
		//这里面存储的是【合同部门】标杆【催款部门标杆】
		//注释：催款部门标杆不是所有的都有的
		actualFreightEntity.setArriveContractOrgCode(vo.getArriveContractOrgCode());
		actualFreightEntity.setArriveReminderOrgCode(vo.getArriveReminderOrgCode());
		/**
		 * 将WayBillPanelVo中的IsElectronicInvoice属性添加到actualFreightEntity中
		 * @author 218371-foss-zhaoyanjun
		 * @date:2014-10-22上午08:47
		 */
		actualFreightEntity.setIsElectronicInvoice(vo.getIsElectronicInvoice());
		/**
		 * 将WayBillPanelVo中的invoiceMobilePhone属性添加到actualFreightEntity中
		 * @author 218371-foss-zhaoyanjun
		 * @date:2014-10-22上午08:47
		 */
		actualFreightEntity.setInvoiceMobilePhone(vo.getInvoiceMobilePhone());
		/**
		 * 将WayBillPanelVo中的email属性添加到actualFreightEntity中
		 * @author 218371-foss-zhaoyanjun
		 * @date:2014-10-22上午08:47
		 */
		actualFreightEntity.setEmail(vo.getEmail());
		/**
		 * 将WayBillPanelVo中的纸箱总价存入actualFreightEntity中
		 * @author:218371-foss-zhaoyanjun
		 * @dateL2014-12-4下午21:31
		 */
		actualFreightEntity.setPaperBoxTotlePrice(vo.getPaperBoxTotlePrice());
		/**
		 * 将WayBillPanelVo中的纤袋总价存入actualFreightEntity中
		 * @author:218371-foss-zhaoyanjun
		 * @dateL2014-12-4下午21:31
		 */
		actualFreightEntity.setFibelBagTotlePrice(vo.getFibelBagTotlePrice());
		/**
		 * 将其它纸纤包装总计存入actualFreightEntity中
		 * @author:218371-foss-zhaoyanjun
		 * @dateL2014-12-4下午21:31
		 */
		actualFreightEntity.setOtherTotle(vo.getOtherTotle());
		/**
		 * 将纸纤包装总计存入actualFreightEntity中
		 * @author:218371-foss-zhaoyanjun
		 * @dateL2014-12-4下午21:31
		 */
		actualFreightEntity.setPackingTotle(vo.getPackingTotle());
		//是否展货
		if(vo.getIsExhibitCargo() != null && vo.getIsExhibitCargo()){
			actualFreightEntity.setIsExhibitCargo(FossConstants.YES);
		}else{
			actualFreightEntity.setIsExhibitCargo(FossConstants.NO);			
		}
		/**
		 * 保存交易流水号
		 * @author:218371-foss-zhaoyanjun
		 * @date:2015-01-24
		 */
		actualFreightEntity.setTransactionSerialNumber(vo.getTransactionSerialNumber());
		/**
		 * Dmana-9885保存CRM运费信息
		 * @author:218371-foss-zhaoyanjun
		 * @date:2015-02-05下午16:21
		 */
		actualFreightEntity.setCrmTransportFee(vo.getCrmTransportFee());
		/**
		 * 
		 * Dmana-9885保存CRM重量
		 * @author:218371-foss-zhaoyanjun
		 * @date:2015-02-05下午16:21
		 */
		actualFreightEntity.setCrmWeight(vo.getCrmWeight());
		/**
		 * Dmana-9885保存CRM体积
		 * @author:218371-foss-zhaoyanjun
		 * @date:2015-02-05下午16:21
		 */
		actualFreightEntity.setCrmVolume(vo.getCrmVolume());
		//封装内部发货类型和员工工号
		if(vo.getInternalDeliveryType() != null) {
			actualFreightEntity.setInternalDeliveryType(vo.getInternalDeliveryType().getValueCode());
			actualFreightEntity.setEmployeeNo(vo.getEmployeeNo());
		}
		//封装特殊增值服务类型 foss-254615-mabinliang
		if(vo.getSpecialValueAddedServiceType()!=null){
			actualFreightEntity.setSpecialValueAddedServiceType(vo.getSpecialValueAddedServiceType().getValueCode());
		}
		//新客户标签：客户分群、行业货源品类 zhangchengfu
		if (null != vo.getFlabelleavemonth()) {
			actualFreightEntity.setFlabelleavemonth(vo.getFlabelleavemonth().getValueCode());
		}
		if (null != vo.getIndustrySourceCategory()) {
			actualFreightEntity.setIndustrySourceCategory(vo.getIndustrySourceCategory().getValueCode());
		}
		//为运单添加最低一票标记
		actualFreightEntity.setMinTransportFee(vo.getMinTransportFee());
		//350909          郭倩云               将分拣结果设置到实际承运表实体中
		actualFreightEntity.setSortingResult(vo.getSortingResult());
		return actualFreightEntity;
	}
	/**
	 * 特殊增值服务信息封装
	 * foss-254615-mabinliang
	 * @param vo
	 * @return
	 */
	private List<InstallationEntity> getSpecialValueAddedServiceEntity(
			WaybillPanelVo vo) {
		List<InstallationEntity> list=null;
		if(vo.getInstallationEntityList()!=null){
		   if(vo.getInstallationEntityList().size()>0){
			   list=new ArrayList<InstallationEntity>();
		int rows=vo.getInstallationEntityList().size();
		for(int i=0;i<rows;i++){
		InstallationEntity specialValueAddedServiceEntity=new InstallationEntity();
		specialValueAddedServiceEntity.setUuid(UUIDUtils.getUUID());
		specialValueAddedServiceEntity.setWaybillNo(vo.getWaybillNo());
	    specialValueAddedServiceEntity.setSpecialValueAddedServiceType(vo.getSpecialValueAddedServiceType().getValueName());
	    specialValueAddedServiceEntity.setInstallationName(vo.getInstallationEntityList().get(i).getInstallationName());
	    specialValueAddedServiceEntity.setAmount(vo.getInstallationEntityList().get(i).getAmount());
	    specialValueAddedServiceEntity.setInstallPackages(vo.getInstallationEntityList().get(i).getInstallPackages());
	    specialValueAddedServiceEntity.setHandlingVolume(vo.getInstallationEntityList().get(i).getHandlingVolume());
	    specialValueAddedServiceEntity.setExceedNumberFloors(vo.getInstallationEntityList().get(i).getExceedNumberFloors());
	    specialValueAddedServiceEntity.setInstallationCode(vo.getInstallationEntityList().get(i).getInstallationCode());
	    specialValueAddedServiceEntity.setLowerLimit(vo.getInstallationEntityList().get(i).getLowerLimit());
	    specialValueAddedServiceEntity.setUpperLimit(vo.getInstallationEntityList().get(i).getUpperLimit());
	    specialValueAddedServiceEntity.setActive(vo.getInstallationEntityList().get(i).getActive());
	    list.add(specialValueAddedServiceEntity);
		        }	
		   }
		}	
		return list;
	}
	
	/**
	 * 
	 * 获得运单数据
	 * 
	 * @author 025000-FOSS-helong
	 * @throws NoSuchMethodException
	 * @throws InvocationTargetException
	 * @throws IllegalAccessException
	 * @date 2012-11-3 下午04:15:27
	 */
	private WaybillEntity getWaybillEntity(WaybillPanelVo vo) {
		// 业务工具类
		BusinessUtils businessUtils = new BusinessUtils();
		WaybillEntity entity = new WaybillEntity();
		entity.setMinTransportFee(vo.getMinTransportFee());//最低一票
		entity.setWaybillNo(vo.getWaybillNo());// 运单号
		entity.setOrderNo(vo.getOrderNo());// 订单号
		entity.setOrderChannel(vo.getOrderChannel());// 订单来源
		entity.setOrderPaidMethod(vo.getOrderPayment());// 订单付款方式
		entity.setDeliveryCustomerId(vo.getDeliveryCustomerId());// 发货客户ID
		entity.setDeliverCustContactId(vo.getDeliveryCustomerContactId());// 发货客户联系人ID
		entity.setDeliveryCustomerCode(vo.getDeliveryCustomerCode());// 发货客户编码
		entity.setDeliveryBigCustomer(vo.getDeliveryBigCustomer());// 大客户标记
		entity.setDeliveryCustomerName(vo.getDeliveryCustomerName());// 发货客户名称
		entity.setDeliveryCustomerMobilephone(vo.getDeliveryCustomerMobilephone());// 发货客户手机
		entity.setDeliveryCustomerPhone(vo.getDeliveryCustomerPhone());// 发货客户电话
		entity.setDeliveryCustomerContact(vo.getDeliveryCustomerContact());// 发货客户联系人
		// 发货人地址
		entity.setDeliveryCustomerAddress(vo.getDeliveryCustomerAddress());
		/**
		 * 发货客户省市区
		 */
		AddressFieldDto consignerAddress = null;
		if(StringUtils.isEmpty(vo.getDeliveryCustomerNationCode())){
			consignerAddress = businessUtils.getProvCityCounty(vo.getDeliveryCustomerProvCode(), vo.getDeliveryCustomerCityCode(), vo.getDeliveryCustomerDistCode());
		}else{
			consignerAddress = businessUtils.getDistrict(vo.getDeliveryCustomerAreaDto());
		}

		// 发货国家
		if (null != consignerAddress) {
			// 发货国家
			entity.setDeliveryCustomerNationCode(consignerAddress.getNationId());
			// 发货省份
			entity.setDeliveryCustomerProvCode(consignerAddress.getProvinceId());
			// 发货市
			entity.setDeliveryCustomerCityCode(consignerAddress.getCityId());
			// 发货区
			entity.setDeliveryCustomerDistCode(consignerAddress.getCountyId());
		}

		entity.setReceiveCustomerId(vo.getReceiveCustomerId());// 收货客户ID
		entity.setReceiverCustContactId(vo.getReceiveCustomerContactId());// 收货联系人ID
		entity.setReceiveCustomerCode(vo.getReceiveCustomerCode());// 收货客户编码
		entity.setReceiveBigCustomer(vo.getReceiveBigCustomer());// 收货客户编码
		entity.setReceiveCustomerName(vo.getReceiveCustomerName());// 收货客户名称
		entity.setReceiveCustomerMobilephone(vo.getReceiveCustomerMobilephone());// 收货客户手机
		entity.setReceiveCustomerPhone(vo.getReceiveCustomerPhone());// 收货客户电话
		entity.setReceiveCustomerContact(vo.getReceiveCustomerContact());// 收货客户联系人
		entity.setReceiveCustomerAddress(vo.getReceiveCustomerAddress());// 收货具体地址
		// 接送货地址ID
		entity.setContactAddressId(vo.getContactAddressId());

		/**
		 * 收货客户省市区
		 */
		AddressFieldDto consigneeAddress = businessUtils.getProvCityCounty(vo.getReceiveCustomerProvCode(), vo.getReceiveCustomerCityCode(), vo.getReceiveCustomerDistCode());
		if(StringUtils.isEmpty(vo.getReceiveCustomerNationCode())){
			consigneeAddress = businessUtils.getProvCityCounty(vo.getReceiveCustomerProvCode(), vo.getReceiveCustomerCityCode(), vo.getReceiveCustomerDistCode());
		}else{
			consigneeAddress = businessUtils.getDistrict(vo.getReceiveCustomerAreaDto());
		}
		// 收货国家
		if (null != consigneeAddress) {
			// 收货国家
			entity.setReceiveCustomerNationCode(consigneeAddress.getNationId());
    		// 收货省份
    		entity.setReceiveCustomerProvCode(consigneeAddress.getProvinceId());
    		// 收货市
    		entity.setReceiveCustomerCityCode(consigneeAddress.getCityId());
    		// 收货区
    		entity.setReceiveCustomerDistCode(consigneeAddress.getCountyId());
		}

		entity.setReceiveOrgCode(vo.getReceiveOrgCode());// 收货部门
		entity.setOrderVehicleNum(vo.getVehicleNumber());// 约车编号
		entity.setProductId(vo.getProductCode().getId());// 产品ID
		entity.setProductCode(vo.getProductCode().getCode());// 运输性质
		entity.setReceiveMethod(vo.getReceiveMethod().getValueCode());// 提货方式
		entity.setCustomerPickupOrgCode(vo.getCustomerPickupOrgCode().getCode());// 提货网点
		entity.setLoadMethod(vo.getLoadMethod());// 配载类型
		entity.setTargetOrgCode(vo.getTargetOrgCode());// 目的站
		entity.setPickupToDoor(BooleanConvertYesOrNo.booleanToString(vo.getPickupToDoor()));// 是否上门接货
		entity.setFreePickupGoods(BooleanConvertYesOrNo.booleanToString(vo.getFreePickupGoods()));// 是否免费接货
		entity.setDriverCode(vo.getDriverCode());// 司机

		// 业务工具类
		// 是否是开的集中接送货运单

		entity.setPickupCentralized(BooleanConvertYesOrNo.booleanToString(vo.getPickupCentralized()));// 是否集中接货
		entity.setLoadLineCode(vo.getLoadLineCode());// 配载线路
		entity.setLoadOrgCode(vo.getLoadOrgCode());// 配载部门
		entity.setLastLoadOrgCode(vo.getLastLoadOrgCode());// 最终配载部门
		entity.setPreCustomerPickupTime(vo.getPreCustomerPickupTime());// 预计派送/提货时间
		entity.setPreDepartureTime(vo.getPreDepartureTime());// 预计出发时间
		entity.setCarDirectDelivery(BooleanConvertYesOrNo.booleanToString(vo.getCarDirectDelivery()));// 是否大车直送
		entity.setGoodsName(vo.getGoodsName());// 货物名称

		entity.setGoodsQtyTotal(vo.getGoodsQtyTotal());// 货物总件数
		entity.setGoodsWeightTotal(vo.getGoodsWeightTotal());// 货物总重量
		entity.setGoodsVolumeTotal(vo.getGoodsVolumeTotal());// 货物总体积
		entity.setGoodsSize(vo.getGoodsSize());// 货物尺寸
		if (ProductEntityConstants.PRICING_PRODUCT_AIR_FREIGHT.equals(vo.getProductCode().getCode())) {
			entity.setGoodsTypeCode(vo.getAirGoodsType().getValueCode());// 货物类型
		} else {
			entity.setGoodsTypeCode(vo.getGoodsType());// 货物类型
		}

		entity.setPreciousGoods(BooleanConvertYesOrNo.booleanToString(vo.getPreciousGoods()));// 是否贵重物品
		entity.setSpecialShapedGoods(BooleanConvertYesOrNo.booleanToString(vo.getSpecialShapedGoods()));// 是否异形物品
		// 对外备注
		if (vo.getOuterNotes() != null) {
			entity.setOuterNotes(vo.getOuterNotes().getValueCode());// 对外备注
		}

		entity.setInnerNotes(vo.getInnerNotes());// 对内备注
		entity.setTransportationRemark(vo.getTransportationRemark());// 储运事项
		
		if(vo.getGoodsPackage()!=null){
			entity.setGoodsPackage(
				StringUtils.replace(vo.getGoodsPackage(),"NULL", ""));// 货物包装
		}
		// 纸
		entity.setPaperNum(Integer.valueOf(vo.getPaper()));
		// 木
		entity.setWoodNum(Integer.valueOf(vo.getWood()));
		// 纤
		entity.setFibreNum(Integer.valueOf(vo.getFibre()));
		// 托
		entity.setSalverNum(Integer.valueOf(vo.getSalver()));
		// 膜
		entity.setMembraneNum(vo.getMembrane());
		// 其他
		entity.setOtherPackage(vo.getOtherPackage());

		entity.setInsuranceAmount(vo.getInsuranceAmount());// 保价声明价值
		BigDecimal insuranceRate = vo.getInsuranceRate();
		// 将费率转换成千分率的数据
		insuranceRate = insuranceRate.divide(new BigDecimal(WaybillConstants.PERMILLAGE));
		entity.setInsuranceRate(insuranceRate);// 保价费率

		entity.setInsuranceFee(vo.getInsuranceFee());// 保价费
		entity.setCodAmount(vo.getCodAmount());// 代收货款
		BigDecimal codReate = vo.getCodRate();
		// 将费率转换成千分率的数据
		codReate = codReate.divide(new BigDecimal(WaybillConstants.PERMILLAGE));
		entity.setCodRate(codReate);// 代收费率

		entity.setCodFee(vo.getCodFee());// 代收货款手续费
		if (vo.getRefundType() != null) {
			entity.setRefundType(vo.getRefundType().getValueCode());// 退款类型
		}

		entity.setReturnBillType(vo.getReturnBillType().getValueCode());// 返单类别
		entity.setSecretPrepaid(BooleanConvertYesOrNo.booleanToString(vo.getSecretPrepaid()));// 预付费保密
		entity.setToPayAmount(vo.getToPayAmount());// 到付金额
		entity.setPrePayAmount(vo.getPrePayAmount());// 预付金额
		entity.setDeliveryGoodsFee(vo.getDeliveryGoodsFee());// 送货费
		entity.setOtherFee(vo.getOtherFee());// 其他费用
		entity.setPackageFee(vo.getPackageFee());// 包装手续费
		entity.setPromotionsFee(vo.getPromotionsFee());// 优惠费用
		// 运费计费类型
		String billTypeCode = vo.getBillingType().getValueCode();
		// 判断计费类型是否为空
		if (StringUtil.isEmpty(billTypeCode)) {
		    // 为空则默认为重量计费
		    entity.setBillingType(WaybillConstants.BILLINGWAY_WEIGHT);
		} else {
		    // 不为空则从VO中取值
		    entity.setBillingType(vo.getBillingType().getValueCode());
		}
		entity.setUnitPrice(vo.getUnitPrice());// 运费计费费率
		entity.setTransportFee(vo.getTransportFee());// 公布价运费
		entity.setValueAddFee(vo.getValueAddFee());// 增值费用
		if (vo.getPaidMethod() != null) {
			entity.setPaidMethod(vo.getPaidMethod().getValueCode());// 开单付款方式
		}
		entity.setArriveType(vo.getArriveType());// 到达类型
		entity.setActive(FossConstants.YES);// 运单状态
		entity.setForbiddenLine(FossConstants.YES);// 禁行
		if (vo.getFreightMethod() != null) {
			entity.setFreightMethod(vo.getFreightMethod().getValueCode());// 合票方式
		}
		entity.setFlightShift(vo.getFlightShift());// 航班时间
		if (vo.getFlightNumberType() != null) {
			entity.setFlightNumberType(vo.getFlightNumberType().getValueCode());// 航班类型
		}
		entity.setTotalFee(vo.getTotalFee());// 总费用
		entity.setPromotionsCode(vo.getPromotionsCode());// 优惠编码
		entity.setCreateTime(new Date());// 创建时间
		entity.setModifyTime(new Date());// 更新时间
		// 开单时间
		if (WaybillConstants.WAYBILL_STATUS_PDA_PENDING.equals(vo.getWaybillstatus())) {
			WaybillPendingEntity pend =waybillService.queryPendingByNo(vo.getWaybillNo());
			if(pend!=null){
				entity.setBillTime(vo.getBillTime());
			}else{
				entity.setBillTime(new Date());
			}
		} else {
			entity.setBillTime(new Date());
		}
		// 运单处理状态
		if ("".equals(StringUtil.defaultIfNull(vo.getWaybillstatus()))) {
			if (WaybillConstants.ONLINE_LOGIN.equals(SessionContext.get("user_loginType").toString())) {
				//DEFECT-9031 图片开单综合查询货物轨迹错误（图片开单直接开单时状态应变更）
				if(StringUtil.isNotEmpty(vo.getPictureWaybillNo())){
				   entity.setPendingType(WaybillConstants.WAYBILL_STATUS_PDA_PENDING);//图片开单
				}else{
				   entity.setPendingType(WaybillConstants.WAYBILL_STATUS_PC_PENDING);// 运单暂存
				}
			} else {
				entity.setPendingType(WaybillConstants.WAYBILL_STATUS_OFFLINE_PENDING);// 运单离线暂存
			}
		} else {
			entity.setPendingType(vo.getWaybillstatus());
		}
		entity.setCreateUserCode(vo.getCreateUserCode());// 开单人
		entity.setModifyUserCode(vo.getCreateUserCode());// 更新人
		entity.setCreateOrgCode(vo.getCreateOrgCode());// 开单组织
		entity.setModifyOrgCode(vo.getCreateOrgCode());// 更新组织
		entity.setCurrencyCode(FossConstants.CURRENCY_CODE_RMB);// 币种
		entity.setIsWholeVehicle(BooleanConvertYesOrNo.booleanToString(vo.getIsWholeVehicle()));// 是否整车运单
		entity.setIsPassOwnDepartment(BooleanConvertYesOrNo.booleanToString(vo.getIsPassDept()));// 是否经过营业部
		entity.setWholeVehicleActualfee(vo.getWholeVehicleActualfee());// 整车开单报价
		entity.setWholeVehicleAppfee(vo.getWholeVehicleAppfee());// 整车约车报价
		entity.setAccountName(vo.getAccountName());// 返款帐户开户名称
		entity.setAccountCode(vo.getAccountCode());// 返款帐户开户账户
		entity.setAccountBank(vo.getAccountBank());// 返款帐户开户银行
		entity.setBillWeight(vo.getBillWeight());// 计费重量
		entity.setPickupFee(vo.getPickupFee());// 接货费

		entity.setServiceFee(vo.getServiceFee());// 装卸费
		entity.setPreArriveTime(vo.getPreCustomerPickupTime());// 预计到达时间
		entity.setTransportType(vo.getTransportType());// 运输类型
		entity.setPrintTimes(0);// 打印次数
		entity.setAddTime(new Date());// 新增时间
		
		// 运单冗字段数据填充
		
		//判断是否是PDA补录
		if(WaybillConstants.WAYBILL_STATUS_PDA_PENDING.equals(vo.getWaybillstatus())){
			//获得当前用户信息
			UserEntity user = (UserEntity) SessionContext.getCurrentUser();
			String empCode = "";
			String empDeptCode = "";
			String empDeptName = "";
			if(user != null){
				EmployeeEntity employee = user.getEmployee();
				if(null != employee){
					empCode = employee.getEmpCode();
					empDeptCode = employee.getOrgCode();
					OrgAdministrativeInfoEntity org = employee.getDepartment();
					if(org != null){
						empDeptName = org.getName();
					}else{
						empDeptName = CommonUtils.getDeptNameByCode(empDeptCode);
					}
				}
			}
			// 运单提交人姓名
			entity.setCreateUserName(Common.getEmployeeNameByCode(empCode));
			// 运单提交人所在部门名称
			entity.setCreateUserDeptName(empDeptName);
		}else{
			// 运单提交人姓名
			entity.setCreateUserName(Common.getEmployeeNameByCode(vo.getCreateUserCode()));
			// 运单提交人所在部门名称
			entity.setCreateUserDeptName(CommonUtils.getDeptNameByCode(vo.getCreateOrgCode()));
		}

		// 收货部门名称
		entity.setReceiveOrgName(CommonUtils.getDeptNameByCode(vo.getReceiveOrgCode()));
		// 提货网点名称
		entity.setCustomerPickupOrgName(CommonUtils.getDeptNameByCode(vo.getCustomerPickupOrgCode().getCode()));
		// 配载部门名称
		entity.setLoadOrgName(CommonUtils.getDeptNameByCode(vo.getLoadOrgCode()));
		// 最终配置部门名称
		entity.setLastLoadOrgName(CommonUtils.getDeptNameByCode(vo.getLastLoadOrgCode()));
		// 公里数
		entity.setKilometer(vo.getKilometer());
		// 是否经济自提件
		entity.setIsEconomyGoods(BooleanConvertYesOrNo.booleanToString(vo.getIsEconomyGoods()));
		// 经济自提件类型
		if(vo.getEconomyGoodsType()!=null){
			entity.setEconomyGoodsType(vo.getEconomyGoodsType().getValueCode());	
		}else{
			entity.setEconomyGoodsType(null);
		}	
		WaybillPictureEntity pictureEntity = new WaybillPictureEntity();
		pictureEntity.setWaybillNo(vo.getWaybillNo());
		pictureEntity.setActive(FossConstants.ACTIVE);
		WaybillPictureEntity picentity = waybillService.queryWaybillPictureByEntity(pictureEntity);
		if(picentity!=null){
			//车牌号
			entity.setLicensePlateNum(picentity.getTruckCode());
			entity.setPendingTypeByDb(picentity.getPendgingType());
		}
		return entity;
	}


	

	

	/**
	 * 
	 * 获取折扣明细
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-11-15 下午07:28:33
	 */
	private List<WaybillDisDtlEntity> getWaybillDisDtlEntity(WaybillDiscountCanvas model, WaybillPanelVo vo) {
		List<WaybillDisDtlEntity> disDtlEntityList = new ArrayList<WaybillDisDtlEntity>();
		List<WaybillDiscountVo> data = model.getData();
		if(data!=null&&!data.isEmpty()){
			for(WaybillDiscountVo entity:data){
        		WaybillDisDtlEntity disDtlEntity = new WaybillDisDtlEntity();
        		//优惠项目名称
        		disDtlEntity.setPricingEntryName(entity.getFavorableItemName());
        		//优惠项目CODE
        		disDtlEntity.setPricingEntryCode(entity.getFavorableItemCode());
        		//优惠类型名称
        		disDtlEntity.setTypeName(entity.getFavorableTypeName());
        		//优惠类型CODE
    			disDtlEntity.setType(entity.getFavorableTypeCode());
        		//优惠子类型名称
        		disDtlEntity.setSubTypeName(entity.getFavorableSubTypeName());
        		//优惠子类型CODE
    			disDtlEntity.setSubType(entity.getFavorableSubTypeCode());
    			//折扣费率
        		disDtlEntity.setRate(new BigDecimal(entity.getFavorableDiscount()));
        		//折扣金额
        		disDtlEntity.setAmount(new BigDecimal(entity.getFavorableAmount()));
        		//运单号
        		disDtlEntity.setWaybillNo(vo.getWaybillNo());
        		if(entity.getDiscountId()!=null){
        			disDtlEntity.setDicountId(entity.getDiscountId());
        		}else{
        			disDtlEntity.setDicountId(UUIDUtils.getUUID());
        		}
        		if(entity.getChargeDetailId()!=null){
        			disDtlEntity.setWaybillChargeDetailId(entity.getChargeDetailId());
        		}else{
        			disDtlEntity.setWaybillChargeDetailId(UUIDUtils.getUUID());
        		}
        		disDtlEntity.setCreateTime(new Date());
        		disDtlEntity.setModifyTime(new Date());
        		disDtlEntity.setActive(FossConstants.ACTIVE);
        		disDtlEntity.setBillTime(new Date());
        		disDtlEntity.setCurrencyCode(FossConstants.CURRENCY_CODE_RMB);
        		//营销活动编码
        		disDtlEntity.setActiveCode(entity.getActiveCode());
        		//营销活动名称
        		disDtlEntity.setActiveName(entity.getActiveName());
        		//营销活动开始时间
        		disDtlEntity.setActiveStartTime(entity.getActiveStartTime());
        		//营销活动结束时间
        		disDtlEntity.setActiveEndTime(entity.getActiveEndTime());
        		//营销活动折扣相应的CRM_ID
        		disDtlEntity.setOptionsCrmId(entity.getOptionsCrmId());
        		disDtlEntityList.add(disDtlEntity);
			}
		}
		return disDtlEntityList;
	}

	/**
	 * 
	 * 获取打木架信息
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-11-15 下午07:31:07
	 */
	private WoodenRequirementsEntity getWoodenRequirementsEntity(WaybillPanelVo vo) {
		if (CommonUtils.defaultIfNull(vo.getStandGoodsNum()).intValue() == 0 && CommonUtils.defaultIfNull(vo.getBoxGoodsNum()).intValue() == 0 
				&& CommonUtils.defaultIfNull(vo.getSalverGoodsNum()).intValue() == 0 //zxy 20131118 ISSUE-4391 修改:增加对木托数量的判断
				&&  (vo.getPackingTotle()==null||vo.getPackingTotle().compareTo(BigDecimal.ZERO )==0) //218371-foss-zhaoyanjun 增加对打包装的判断
				&& (vo.getNonWoodPackingAmount() == null || vo.getNonWoodPackingAmount().compareTo(BigDecimal.ZERO )==0 ) //非木也也为空时，才返回null--lianhe--2017年3月10日10:58:38
				) {
			return null;
		} else {
			WoodenRequirementsEntity woodenRequirementsEntity = new WoodenRequirementsEntity();
			woodenRequirementsEntity.setWaybillNo(vo.getWaybillNo());
			woodenRequirementsEntity.setPackageOrgCode(vo.getPackageOrgCode());
			// ===========LianHe/新增非木包装费/2017年2月7日/start TODO =======
			woodenRequirementsEntity.setNonWoodPackingAmount(vo.getNonWoodPackingAmount());
			// ===========LianHe/新增非木包装费/2017年2月7日/end=======
			woodenRequirementsEntity.setStandGoodsNum(vo.getStandGoodsNum());
			woodenRequirementsEntity.setStandRequirement(vo.getStandRequirement());
			woodenRequirementsEntity.setStandGoodsSize(vo.getStandGoodsSize());
			woodenRequirementsEntity.setStandGoodsVolume(vo.getStandGoodsVolume());
			woodenRequirementsEntity.setBoxGoodsNum(vo.getBoxGoodsNum());
			woodenRequirementsEntity.setBoxRequirement(vo.getBoxRequirement());
			woodenRequirementsEntity.setBoxGoodsSize(vo.getBoxGoodsSize());
			woodenRequirementsEntity.setBoxGoodsVolume(vo.getBoxGoodsVolume());
			//zxy 20131118 ISSUE-4391 start 新增：设置打木托信息
			woodenRequirementsEntity.setSalverGoodsNum(vo.getSalverGoodsNum());
			woodenRequirementsEntity.setSalverRequirement(vo.getSalverRequirement());
			woodenRequirementsEntity.setSalverGoodsAmount(vo.getSalverGoodsCharge());
			//zxy 20131118 ISSUE-4391 end 新增：设置打木托信息
			woodenRequirementsEntity.setActive(FossConstants.ACTIVE);
			woodenRequirementsEntity.setCreateTime(new Date());
			woodenRequirementsEntity.setModifyTime(new Date());
			/**
			 * 将纸纤包装每种材料用量存入数据库中，一共14个字段
			 * @author:218371-foss-zhaoyanjun
			 * @date:2014-12-5下午19:04
			 */
			woodenRequirementsEntity.setPaperBoxOne(vo.getPaperBoxOne());
			woodenRequirementsEntity.setPaperBoxTwo(vo.getPaperBoxTwo());
			woodenRequirementsEntity.setPaperBoxThree(vo.getPaperBoxThree());
			woodenRequirementsEntity.setPaperBoxFour(vo.getPaperBoxFour());
			woodenRequirementsEntity.setFibelBagBlueOne(vo.getFibelBagBlueOne());
			woodenRequirementsEntity.setFibelBagBlueTwo(vo.getFibelBagBlueTwo());
			woodenRequirementsEntity.setFibelBagBlueThree(vo.getFibelBagBlueThree());
			woodenRequirementsEntity.setFibelBagBlueFour(vo.getFibelBagBlueFour());
			woodenRequirementsEntity.setFibelBagWhiteOne(vo.getFibelBagWhiteOne());
			woodenRequirementsEntity.setFibelBagWhiteTwo(vo.getFibelBagWhiteTwo());
			woodenRequirementsEntity.setFibelBagWhiteThree(vo.getFibelBagWhiteThree());
			woodenRequirementsEntity.setFibelBagWhiteFour(vo.getFibelBagWhiteFour());
			woodenRequirementsEntity.setFibelBagWhiteClothFive(vo.getFibelBagWhiteClothFive());
			woodenRequirementsEntity.setFibelBagWhiteClothSix(vo.getFibelBagWhiteClothSix());
			return woodenRequirementsEntity;
		}
	}

	/**
	 * 
	 * 客户付款明细收集
	 * @author 025000-FOSS-helong
	 * @date 2012-11-15 下午07:32:36
	 */
	private List<WaybillPaymentEntity> getWaybillPaymentEntity(WaybillPanelVo vo) {
		
		List<WaybillPaymentEntity> waybillPaymentEntityList = new ArrayList<WaybillPaymentEntity>();
		//判断是否为PAD导入开单
		if (WaybillConstants.WAYBILL_STATUS_PDA_PENDING.equals(vo
				.getWaybillstatus())) {
			// 判断PDA总金额是否为空
			if (vo.getTotalCountPDA() != null
					&& vo.getTotalCountPDA().compareTo(BigDecimal.ZERO) != 0) {
				WaybillPaymentEntity totalFeePDA = getTotalFeePDA(vo);
				waybillPaymentEntityList.add(totalFeePDA);
			}
		}
		//判断预付金额是否为空
		if(vo.getPrePayAmount()!= null&&vo.getPrePayAmount().compareTo(BigDecimal.ZERO)!= 0)
		{
			WaybillPaymentEntity prePayAmount =getPrePayAmount(vo);
			waybillPaymentEntityList.add(prePayAmount);//预付金额
		}
		//判断到付金额是否为空
		if(vo.getToPayAmount()!=null&&vo.getToPayAmount().compareTo(BigDecimal.ZERO)!=0)
		{
			WaybillPaymentEntity toPayAmount =getToPayAmount(vo);
			waybillPaymentEntityList.add(toPayAmount);//到付金额
		}
		//判断手写现付金额是否为空
		if (vo.getHandWriteMoney() != null
				&& vo.getHandWriteMoney().compareTo(BigDecimal.ZERO) != 0) {
			WaybillPaymentEntity handWriteMoney = getHandWriteMoney(vo);
			waybillPaymentEntityList.add(handWriteMoney);//手写现付金额
		}
		return waybillPaymentEntityList;
	}
	/**
	 * 获取DPA总金额
	 * @author 026113-FOSS-linwensheng
	 * @return WaybillPaymentEntity
	 */
	private WaybillPaymentEntity getTotalFeePDA(WaybillPanelVo vo) {
		WaybillPaymentEntity totalFeePDA = new WaybillPaymentEntity();
		totalFeePDA.setWaybillNo(vo.getWaybillNo());
		totalFeePDA.setType(WaybillConstants.PAYMENT_PDA_TOTAL_PAY);//pda总运费类型
		totalFeePDA.setAmount(vo.getTotalCountPDA());
		totalFeePDA.setActive(FossConstants.ACTIVE);
		totalFeePDA.setCurrencyCode(FossConstants.CURRENCY_CODE_RMB);//RMB
		totalFeePDA.setPaymentTime(new Date());
		return totalFeePDA;
	}
	/**
	 * 获取预付金额
	 * @author 026113-FOSS-linwensheng
	 * @return WaybillPaymentEntity
	 */
	private WaybillPaymentEntity  getPrePayAmount(WaybillPanelVo vo)
	{
		WaybillPaymentEntity prePayAmount = new WaybillPaymentEntity();
		prePayAmount.setWaybillNo(vo.getWaybillNo());
		prePayAmount.setType(WaybillConstants.PAYMENT_PRE_PAY);//预付金额类型
		prePayAmount.setAmount(vo.getPrePayAmount());//预付金额
		prePayAmount.setActive(FossConstants.ACTIVE);
		prePayAmount.setCurrencyCode(FossConstants.CURRENCY_CODE_RMB);//RMB
		prePayAmount.setPaymentTime(new Date());
		return prePayAmount;
		
	}
	/**
	 * 到付金额
	 * @author 026113-FOSS-linwensheng
	 * @return WaybillPaymentEntity
	 */
	private WaybillPaymentEntity getToPayAmount(WaybillPanelVo vo) {

		WaybillPaymentEntity toPayAmount = new WaybillPaymentEntity();
		toPayAmount.setWaybillNo(vo.getWaybillNo());
		toPayAmount.setType(WaybillConstants.PAYMENT_TO_PAY);// 到付金额类型
		toPayAmount.setAmount(vo.getToPayAmount());// 到付金额
		toPayAmount.setActive(FossConstants.ACTIVE);
		toPayAmount.setCurrencyCode(FossConstants.CURRENCY_CODE_RMB);// RMB
		toPayAmount.setPaymentTime(new Date());
		return toPayAmount;
	}

	/**
	 * 手写先付金额
	 * @author 026113-FOSS-linwensheng
	 * @return WaybillPaymentEntity
	 */
	private  WaybillPaymentEntity getHandWriteMoney(WaybillPanelVo vo) {
		WaybillPaymentEntity toPayAmount = new WaybillPaymentEntity();
		toPayAmount.setWaybillNo(vo.getWaybillNo());
		toPayAmount.setType(WaybillConstants.PAYMENT_REAL_PAY);// 手写先付金额类型
		toPayAmount.setAmount(vo.getHandWriteMoney());// 手写先付金额
		toPayAmount.setActive(FossConstants.ACTIVE);
		toPayAmount.setCurrencyCode(FossConstants.CURRENCY_CODE_RMB);// RMB
		toPayAmount.setPaymentTime(new Date());
		return toPayAmount;
	}
	/**
	 * setIInjectUI
	 */
	@Override
	public void setIInjectUI(JDialog confirmDialog) {

		this.confirmDialog = confirmDialog;

	}
	
	/**
	 * 
	 * 插入一条打印数据
	 * @author 025000-FOSS-helong
	 * @date 2012-11-15 下午07:32:36
	*/
	public void printInfoInsert(WaybillPanelVo bean){
		WaybillEntity waybillEntity = waybillService.queryWaybillByNumber(bean.getWaybillNo());
		if(waybillEntity !=null ){
			PrintInfoEntity record = new PrintInfoEntity();
			record.setPrintType(WaybillConstants.PRINT_INFO_WAYBILL);
			record.setWaybillNo(bean.getWaybillNo());
			record.setWaybillId(waybillEntity.getId());
			// record.setPrintTimes(); 
			UserEntity user = (UserEntity) SessionContext.getCurrentUser();
			record.setPrintUserCode(user.getEmployee().getEmpCode());
			record.setPrintUser(user.getEmployee().getEmpName());
			record.setPrintOrgCode(user.getEmployee().getDepartment()
					.getCode());
			record.setPrintOrg(user.getEmployee().getDepartment().getName());
			record.setPrintTime(new Date());
			record.setId(UUIDUtils.getUUID());
			WaybillServiceFactory.getWaybillService().insertSelective(
					record);
			//WaybillServiceFactory.getWaybillService().updateWaybillPrintTimesOnLine(resourceBean.getWaybillNo());
		}    
	}
	
	private void addWaybillPictureSendMessage(WaybillPanelVo bean){
		String smsMessage = "标签信息已更改:" + bean.getWaybillNo() + " 时间:" + new SimpleDateFormat("yyyy-MM-dd hh:mm:ss").format(new Date());
		UserEntity user = (UserEntity) SessionContext.getCurrentUser();
		
		WaybillPictureEntity picture =new WaybillPictureEntity();
		picture.setWaybillNo(bean.getWaybillNo());
		picture.setActive(WaybillConstants.YES);
		picture = waybillService.queryWaybillPictureByEntity(picture);
		WaybillPictureSendSmsEntity smsEntity = new WaybillPictureSendSmsEntity();
		smsEntity.setId(UUIDUtils.getUUID());
		smsEntity.setJobId(UNKNOWN);
		smsEntity.setPhone(picture.getMobilephone());
		smsEntity.setCreateTime(new Date());
		smsEntity.setWaybillNo(bean.getWaybillNo());
		smsEntity.setCreateOrgCode(user.getEmployee().getDepartment().getUnifiedCode());
		smsEntity.setCreateOrgName(user.getEmployee().getDepartment().getOrgSimpleName());
		smsEntity.setCreateUserCode(user.getEmployee().getEmpCode());
		smsEntity.setCreateUserName(user.getEmployee().getEmpName());
		smsEntity.setSmsMessage(smsMessage);
		waybillService.addWaybillPictureSendMessage(smsEntity);
	}
}