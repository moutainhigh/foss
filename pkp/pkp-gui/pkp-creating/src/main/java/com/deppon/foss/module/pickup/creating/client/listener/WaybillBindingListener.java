/**
 *  initial comments.
 */
/*******************************************************************************
 * Copyright 2013 PKP
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *    http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * PROJECT NAME	: pkp-creating
 * 
 * FILE PATH        	: src/main/java/com/deppon/foss/module/pickup/creating/client/listener/WaybillBindingListener.java
 * 
 * FILE NAME        	: WaybillBindingListener.java
 * 
 * AUTHOR			: FOSS接送货系统开发组
 * 
 * HOME PAGE		: http://www.deppon.com
 * 
 * COPYRIGHT		: Copyright (c) 2012  Deppon All Rights Reserved.
 *
 ******************************************************************************/
package com.deppon.foss.module.pickup.creating.client.listener;

import java.awt.Color;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.jdesktop.swingx.JXTable;

import com.deppon.foss.base.util.define.NumberConstants;
import com.deppon.foss.framework.client.commons.i18n.I18nManager;
import com.deppon.foss.framework.client.commons.i18n.II18n;
import com.deppon.foss.framework.client.commons.util.WindowUtil;
import com.deppon.foss.framework.client.component.dataaccess.GuiceContextFactroy;
import com.deppon.foss.framework.client.core.binding.BindingEvent;
import com.deppon.foss.framework.client.core.binding.IBinder;
import com.deppon.foss.framework.client.core.binding.IBindingListener;
import com.deppon.foss.framework.client.core.context.SessionContext;
import com.deppon.foss.framework.client.widget.msgbox.MsgBox;
import com.deppon.foss.framework.client.widget.validatewidget.JTextFieldValidate;
import com.deppon.foss.framework.exception.BusinessException;
import com.deppon.foss.framework.shared.util.string.StringUtil;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.AdministrativeRegionsEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.CusBargainEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.FlightEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.FreightRouteEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.LimitedWarrantyItemsEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.OrgAdministrativeInfoEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.SaleDepartmentEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.UserEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.dto.CustomerCircleNewDto;
import com.deppon.foss.module.base.baseinfo.api.shared.dto.CustomerQueryConditionDto;
import com.deppon.foss.module.base.baseinfo.api.shared.dto.FlightDto;
import com.deppon.foss.module.base.baseinfo.api.shared.dto.PaginationDto;
import com.deppon.foss.module.base.baseinfo.api.shared.vo.CusBargainVo;
import com.deppon.foss.module.base.dict.api.shared.define.ConfigurationParamsConstants;
import com.deppon.foss.module.base.dict.api.shared.define.DictionaryConstants;
import com.deppon.foss.module.base.dict.api.shared.define.DictionaryValueConstants;
import com.deppon.foss.module.base.dict.api.shared.domain.ConfigurationParamsEntity;
import com.deppon.foss.module.base.dict.api.shared.domain.DataDictionaryValueEntity;
import com.deppon.foss.module.pickup.common.client.dto.OrgInfoDto;
import com.deppon.foss.module.pickup.common.client.dto.QueryPickupPointDto;
import com.deppon.foss.module.pickup.common.client.service.BaseDataServiceFactory;
import com.deppon.foss.module.pickup.common.client.service.DownLoadDataServiceFactory;
import com.deppon.foss.module.pickup.common.client.service.IBaseDataService;
import com.deppon.foss.module.pickup.common.client.service.VehicleAgencyDeptServiceFactory;
import com.deppon.foss.module.pickup.common.client.service.impl.BaseDataService;
import com.deppon.foss.module.pickup.common.client.ui.combocheckbox.JComboCheckBox;
import com.deppon.foss.module.pickup.common.client.ui.commonUI.QueryPickupStationDialog;
import com.deppon.foss.module.pickup.common.client.ui.customer.QueryConsigneeDialog;
import com.deppon.foss.module.pickup.common.client.ui.customer.QueryConsigneeInfoDialog;
import com.deppon.foss.module.pickup.common.client.ui.customer.QueryConsignerDialog;
import com.deppon.foss.module.pickup.common.client.ui.dialog.FlightInfoDialog;
import com.deppon.foss.module.pickup.common.client.utils.BZPartnersJudge;
import com.deppon.foss.module.pickup.common.client.utils.BooleanConvertYesOrNo;
import com.deppon.foss.module.pickup.common.client.utils.BusinessUtils;
import com.deppon.foss.module.pickup.common.client.utils.CalculateFeeTotalUtils;
import com.deppon.foss.module.pickup.common.client.utils.CommoForFeeUtils;
import com.deppon.foss.module.pickup.common.client.utils.CommonUtils;
import com.deppon.foss.module.pickup.common.client.utils.NumberValidate;
import com.deppon.foss.module.pickup.common.client.utils.StrUtils;
import com.deppon.foss.module.pickup.common.client.vo.BranchVo;
import com.deppon.foss.module.pickup.common.client.vo.DataDictionaryValueVo;
import com.deppon.foss.module.pickup.common.client.vo.DeliverChargeEntity;
import com.deppon.foss.module.pickup.common.client.vo.EconomyVo;
import com.deppon.foss.module.pickup.common.client.vo.IdentityEffectivePlanVo;
import com.deppon.foss.module.pickup.common.client.vo.OtherChargeVo;
import com.deppon.foss.module.pickup.common.client.vo.ProductEntityVo;
import com.deppon.foss.module.pickup.common.client.vo.QueryMemberDialogVo;
import com.deppon.foss.module.pickup.common.client.vo.WaybillPanelVo;
import com.deppon.foss.module.pickup.creating.client.action.ShowPickupStationDialogAction;
import com.deppon.foss.module.pickup.creating.client.action.io.WaybillExporter;
import com.deppon.foss.module.pickup.creating.client.common.Common;
import com.deppon.foss.module.pickup.creating.client.service.IWaybillService;
import com.deppon.foss.module.pickup.creating.client.service.WaybillServiceFactory;
import com.deppon.foss.module.pickup.creating.client.ui.WaybillEditUI;
import com.deppon.foss.module.pickup.creating.client.ui.editui.IncrementPanel.WaybillOtherCharge;
import com.deppon.foss.module.pickup.creating.client.ui.popupdialog.SalesDepartmentDialog;
import com.deppon.foss.module.pickup.pricing.api.shared.define.PricingConstants;
import com.deppon.foss.module.pickup.pricing.api.shared.define.PricingConstants.PriceEntityConstants;
import com.deppon.foss.module.pickup.pricing.api.shared.define.PricingConstants.ProductEntityConstants;
import com.deppon.foss.module.pickup.pricing.api.shared.domain.MinFeePlanEntity;
import com.deppon.foss.module.pickup.pricing.api.shared.dto.CarloadPricePlanDto;
import com.deppon.foss.module.pickup.pricing.api.shared.dto.GuiResultBillCalculateDto;
import com.deppon.foss.module.pickup.pricing.api.shared.dto.ValueAddDto;
import com.deppon.foss.module.pickup.waybill.shared.define.GisConstants;
import com.deppon.foss.module.pickup.waybill.shared.define.WaybillConstants;
import com.deppon.foss.module.pickup.waybill.shared.domain.SynPartenerCodAmountUpperLimitResponse;
import com.deppon.foss.module.pickup.waybill.shared.domain.WaybillPictureEntity;
import com.deppon.foss.module.pickup.waybill.shared.dto.AddressFieldDto;
import com.deppon.foss.module.pickup.waybill.shared.dto.CustomerAddressDto;
import com.deppon.foss.module.pickup.waybill.shared.dto.EffectiveDto;
import com.deppon.foss.module.pickup.waybill.shared.dto.GisDepartmentDto;
import com.deppon.foss.module.pickup.waybill.shared.dto.GisPickupOrgDto;
import com.deppon.foss.module.pickup.waybill.shared.dto.PartenerCodAmountUpperLimitDto;
import com.deppon.foss.module.pickup.waybill.shared.dto.WaybillPendingDto;
import com.deppon.foss.module.pickup.waybill.shared.exception.BaseInfoInvokeException;
import com.deppon.foss.module.pickup.waybill.shared.exception.WaybillGisPickupOrgException;
import com.deppon.foss.module.pickup.waybill.shared.exception.WaybillSubmitException;
import com.deppon.foss.module.pickup.waybill.shared.exception.WaybillValidateException;
import com.deppon.foss.module.pickup.waybill.shared.request.HisSegMatchRequest;
import com.deppon.foss.module.pickup.waybill.shared.response.HisSegMatchResponse;
import com.deppon.foss.util.define.FossConstants;

/**
 * 
 * (联动监听)
 * <p style="display:none">
 * modifyRecord
 * </p>
 * <p style="display:none">
 * version:V1.0,author:Administrator,date:2012-10-17 下午03:01:15,content:
 * </p>
 * 
 * @author 025000-FOSS-helong
 * @date 2012-10-17 下午03:01:15
 * @since
 * @version * 录入货物信息SUC业务规则 1. 若货物为违禁品， 则系统自动提示“货物为违禁品， 不可开单！”； 2. 若货物为贵重物品，
 *          则系统自动勾选“贵重物品”， 且不可修改； 3. 若货物为限保物品， 则系统自动限定保价金额， 且不可修改， 并提示“货物为限保物品”；
 *          4. 违禁品、 拒收品、 贵重物品、 限保物品（含保价金额上限）具体类型可在系统中进行配置； 1. 货物重量单位为千克； 2.
 *          运单开单时， 货物的件数、重量及体积文本框是必填项，默认值为空； 3. 件数只能是大于等于1的整数， 重量及体积只能大于0。 4.
 *          体积、重量这种过程数据保留两位小数 1. 尺寸录入文本框，支持'长*宽*高*件数+长*宽*高*（即多个尺寸相加）的计算； 2.
 *          如果件数是1，则不强制在录入时要“*1”； 3. 货物尺寸为计算器输入， 输入的尺寸可以进行加减，
 *          例如：1*1*1*5+2*2*2*3-0.5*0.5*0.5， 显示为输入文本； 4. 尺寸计算单位为厘米，
 *          尺寸计算出数据后转换单位为立方米后， 在货物体积中显示数据； 例如：尺寸录入为：50*50*20（其中20为件数），
 *          则体积显示数据为：0.05； 5. 体积为空时，录入尺寸后，填充体积。当尺寸修改时， 体积随之变处。当修改体积时，尺寸不变化。 6.
 *          体积初始值为“0”，仍保持必填， 操作员根据实际情况改， 选择木架或木箱或两者都选择后则该值不能为0 1. 货物体积单位为立方米； 2.
 *          营业员可以修改通过尺寸计算器计算得出的体积数据； 3. 系统设置货物重量体积比区间值（该值由基础资料配置），
 *          在运单提交时，系统自动对重量体积比进行校验： 即重量体积比X=重量/体积； 3.1 当X不在设置的区间中，
 *          弹出提示“请确认录入的重量体积是否准确！”； （该弹窗有两个按钮：确定、取消）点击确定时， 弹出确认运单信息界面；点击取消，
 *          点返回运单录入界面； 3.2 当X在区间中，无提示；直接进入确认运单信息界面； 4.
 *          录入重量体积后，系统校验单票的重量体积及单件（平均单件）的重量体积是否
 *          满足“修改-查询行政组织业务属性”基础资料中的单票和单件重量体积限制； 只要该四项中有 一项不满足，则提示“XX超出提货网点限制，
 *          请重新选择提货网点！”； 1. 货物包装总件数小于等于货物总件数， 如果大于总件数，提示：“包装件数不能大于总件数”； 1.
 *          当木包装件数大于等于1时，系统校验出发城市和对应目的站的走货路由中是否有有打木架功 能的部门，若有，则提醒营业员“是否收入代打木架？”，
 *          是，则进入场代打木架信息录入界面”， 并显示第一个有打木架功能的部门名称； 若走货路由中无有打木架功能的部门，
 *          则不提示“是否收入代打木架？”； 2. 当走货路由中有有打木架功能的部门为多个时， 只显示系统路由中第一有有打木架功能的部门，
 *          且不可修改； 1. 运输类型为汽运时，货物类型为唯一选择项； 即，非A即B；默认不可勾选，只有当走货路由经过
 *          特定的城市时需要录入货物类型,特定城市可在系统中进行配置； 2. 运输类型为空运时，货物类型为下拉选择框， 默认显示为普货，
 *          目前只有这一个分类， 该类型可做配置； 1. 贵重物品判断规则： a. 单票单件货物，体积≤0.05立方且保价声明价值≥1万元； b.
 *          单票多件货物，平均单件体积≤0.2立方且平均单件保价声明价值≥1万元； （注：平均单件体积=开单总体积÷开单件数，
 *          平均单件保价=开单保价声明价值÷开单件数） c. 高保价货物，单票货物保价≥10万元；
 *          满足以上任意一个条件时，系统将判定该票货物为贵重物品并自动勾选"贵重物品"复选框，且为灰色，
 *          不可编辑；不满足以上条件时，该复选框为可编辑状态，用户可根据实际情况自行选择是否勾选； 2.
 *          若"贵重物品"复选框被勾选，则在【储运注意事项】中自动加入提示记录"贵重物品"字段，
 *          若该货物为贵重物品时，"储运注意事项"中信息显示优先级为：贵重物品＞其他； 1.
 *          录入的打木架货物件数和打木箱件数之和必须大于等于录入的木包装件数； 2.
 *          系统默认标签流水号前X的货物为需要代打木架货物，X等于录入的“打木架货物件数”和“打木箱货物件数”之和； 3.
 *          营业员在打印标签时，按流水号先贴要打木架或打木箱的货物； 1.
 *          录入的打木架货物体积和打木箱货物体积之和乘以1.4必须小于等于货物总体积； 该1.4为打木架体积计算系统， 可配置； 2.
 *          营业部开单时按打完木架后的包装开， 即包装中含“木架/木箱”， 开单件数为货物打木架/木箱前的实际件数
 *          （防止丢货），尺寸和重量按照以下公式计算： 1.1 整票货物代打时：开单体积=代打货物体积*1.4；
 *          开单重量=所有货物重量+代打货物体积*42； 1.2 部分货物代打时，开单体积=代打货物体积*1.4+未打木架货物体积；
 *          开单重量=所有货物重量+代打货物体积*42。 即：营业部按照代打货物未打木架之前体积的1.4倍来开单收费，重量另加，
 *          单票中未打木架的货物的体积和重量不变； 1.3 例如：一票货物需全部代打， 货物体积为1个方，重量为100KG，
 *          则开单体积为1.4个方， 开单重量为100+1*42=142KG，收取客户包装费为150*1.4=210元； 1.4
 *          需要加托时，仍按照50元/个另外收取费用， 托的重量和体积不再另加；营业部不需要再更改由于打 木架引起重量和体积的变化； 3.
 *          打木架要在“对内备注”中备注“代打木架/木箱”， 特殊要求（特别是合打情况）必须在对内备注
 *          和A4纸上都注明，例如：货物1、2、3合打成一件等； 4. 开单件数为代打木架前货物实际件数， 包装为打木架后的包装，
 *          打木架后件数发生变化后， 需及时更改件数； 录入运输信息SUC业务 规则 1. 收货部门默认为操作者所在的部门， 不可修改； 2.
 *          若操作者部门为集中开单部门时， 则收货部门可修改， 其选择部门只能为开单组服务的集中接货区域营业部； 且其进进入运单开单界面时，
 *          系统自动默认收货部门为上一次开单的收货部门； 1. 默认显示精准； 1.
 *          根据部门的性质或所在城市确定部门所作业务的性质，如有些部门可做所有运输性质的业务， 部分部门无法做精准业务，
 *          所有规则根据营业部业务管制确定（根据出发城市、到达城市确定部门可做的业务性质， 所有数据读取自营业部业务管制基础资料）； 1.
 *          当运输性质为空运时， 提货方式有：自提（不含机场提货费）、 免费自提、机场自提、免费送货、 送货进仓、送货上楼、送货（不含上楼)；
 *          默认为自提（不含机场提货费）； 2. 如果客户是CRM中的合同客户， 在开单时提货方式选项中增加"免费送货"选项，
 *          免费送货送货费为0（不可修改）； 3. 当运输性质为精准、普货、偏线时， 提货方式有：自提、免费送货、送货进仓、送货上楼、
 *          送货（不含上楼)、内部带货自提；默认为自提； 1. 当运输性质为空运时， 开单提货网点显示空运代理网点及公司可做空运的自有网点； 2.
 *          当运输性质为偏线时， 提货网点只显示偏线代理网点； 3. 当运输性质为精准、普货时， 提货网点显示我司所有可所到达的网点； 1.
 *          当运输性质为空运，且提货方式为机场自提时， 增值服务的其它费用中可添加对就有规则的费用 （暂定方案：对于单独开单的可做增值服务费用添加。
 *          若以后在产品定义中区分了单独开单和合大票，则另考虑）； 1. 提货方式为机场自提时，代收货款设置为0且不可编辑，
 *          不能开单含到付款，，付款方式不能开到付； 否则，提示：“提货方式为【机场自提】时，到付金额必须为0， 付款方式不能为到付”； 2.
 *          提货方式为内部带货自提时，只能填写发货人收货人信息和货物信息， 所有涉及金额的控件均为0， 收货人和发货人只能为OA系统中部门； 1.
 *          提货方式为自提（不含机场提货费）、免费自提、内部带货自提时， 只显示可做自提业务的网点； 2.
 *          提货方式为送货时，只显示可做送货业务的网点； 1. 目的站可由收货客户地址的城市（即收货客户地址中的“市”）生成，也可手工录入； 2.
 *          系统自动过滤只显示目的站城市符合条件的网点信息； 3. 选择确定提货网点信息后，系统自动生成对应网点的目的站名称于目的站框内；
 *          网点目的站读取对应的网点目的站基础资料； 4. 在网点目的站基础资料中有‘取消到达日期’， 如果当前日期在‘取消到达日期’之前，
 *          那么提示“xx营业部将于xx年xx月xx日临时取消到达， 届时货物将转至xx营业部，请做好客户解释工作！”
 *          （其中第一个xx营业部，为当前营业部、 第二个xx营业部为网点目的站基础资料中的‘转货部门‘， xx年xx月xx日为‘取消到达日期’）
 *          5. 录入重量体积后，系统校验单票的重量体积及单件（平均单件）的重量体积是否满足
 *          “修改-查询行政组织业务属性”基础资料中的单票和单件重量体积限制； 只要该四项中有一项不满足，
 *          则提示“XX超出提货网点限制，请重新选择提货网点！”； 1.
 *          当通过运输性质、提货方式和目的站过滤的提货网点唯一时，直接显示提货网点名称； 1. 当勾选上门接货时，自动显示文本框，录入接货司机工号，
 *          接货费数字框可录入，手写现付金额，可编辑 2. 当不勾选上门接货时，接货费清0变灰且不可录入， 手写现付金额变灰，不可编辑 1.
 *          当录单部门为集中开单部门时，自动勾选上门接货， 且不可修改； 2. 上门接货默认不勾选，可修改；3. 1.
 *          对外备注可多选，选择的项目信息依次显示在储运注意事项中；默认为空； 2. 当选择空时，则其它所有选项自动不勾选； 3.
 *          对外备注已选择录入后，若再选择空， 则清空已选择的所有对内备注； 1. 储运注意事项=对外备注&对内备注&大车直送（若勾选大车直送），
 *          各字段以“；”分开； 2. 对外备注永远在储运注意事项的最前面； 1. 当运输性质为精准、普货、偏线时，显示配载线路；
 *          系统自动根据营业部所在城市和到达目的站 匹配走货线路基础资料，生成预配线路，且不可修改； 2. 当运输性质为空运时，显示配载航班，
 *          包括：早班、中班、晚班、中转航班；默认为空； 1. 系统自动匹配始发配载部门基础资料， 通过配载类型来判断配载部门； 1.
 *          如果提货网点为自有网点时，最终配载部门为提货网点名称； 如果提货网点不是自有网点， 则最终配载部门为外发代理网点的管理部门；
 *          （参考基础资料：外发代理、部门基础信息基础资料）； 2. 当运输类型为空运时，最终配载部门可编辑，
 *          且列举对应收货部门可走空运货的空运总调， 默认显示为空；若对应收货部门可走空运货的总运总调唯一时，则直接显示； 1.
 *          预计出发时间在运单提交时进行判断填充； 2. 预计出发时间适用于运输类型为“精准”； 3.
 *          预计出发时间=预计出发日期,准点出发时间。【格式如：2011-6-28 ,12:00:00】 （部门对应的“准点出发时间”，
 *          数据取自基础资料：经营-运作基础资料）； 4. 如果开单当前时间在准点出发时间前，
 *          则预计出发日期=开单日期；否则，预计出发日期=开单日期+1； 5. 当运输性质为普货、偏线时，则预计出发日期=开单日期+1； 1.
 *          预计提货/派送时间适用于运输类型为“精准”； 2. 提货方式为“自提”时，若部门对应的“是否当天出发”为“是”，
 *          则预计提货/派送时间=预计出发日期+到达营业部承诺天数：到达营业部承诺时点；
 *          否则，预计提货/派送时间=预计出发日期+到达营业部承诺天数-1：到达营业部承诺时点；
 *          （部门对应的“是否当天出发”，数据取自基础资料：经营-运作发车标准； “到达营业部承诺天数”和“到达营业部承诺时点”
 *          ，数据取自基础资料：专线-城市承诺时间标准；） 3. 提货方式包含为“送货 ”时，若部门对应的“是否当天出发”为“是”，
 *          则预计提货/派送时间=预计出发日期+到达营业部承诺天数+派送承诺需加天数：
 *          派送承诺时点；否则，预计提货/派送时间=预计出发日期+派送承诺需加天数-1：
 *          派送承诺时点；（部门对应的“是否当天出发”，数据取自基础资料：经营-运作发车标准；
 *          “到达营业部承诺天数”、“到达营业部承诺时点”、“派送承诺时点”、“派送承诺需加天数”， 数据取自基础资料：专线-城市承诺时间标准；）
 *          1. 大车直送默认不勾选，且不可修改； 2. 当单票货物重量超过8吨或体积大于25方时，系统提醒“是否需要大车直送？”；
 *          营业员确定后，自动勾选大车直送，且大车直送变为可修改状态； 3. 勾选大车直送时，在储运注意事项中增加大车直送显示；不勾选时，不显示；
 *          1、检验单号是否唯一（有效状态的运单唯一，中止/逻辑删除等的运单不参与检查），
 *          如果唯一系统不做操作，如果不唯一，系统提示“XX单号已经使用，请重新输入单号”
 *          2、新增一条业务规则：在提交运单之前，若相邻两次输入的单号（两次单号分别为A与B且单号输入合法）
 *          差别较大时，系统给予用户友好提示避免录错单号，但不限制单号的输入。具体规则为：
 *          1）若前后两次输入的单号位数相同，当|A-B|≥100时系统给予提示； 2）若前后两次输入的单号位数不同，系统给予提示；
 *          3）提示信息为：前后两票单号相差过大，请检查所输单号是否是本部门所属单号！
 * 
 **          增值服务SUC规则如下 1.1 相关业务用例 BUC_FOSS_5.20.30_510 确认承运信息 1.2 用例描述
 *          营业员通过本用例录入增值服务信息。 1.3 用例条件 条件类型 描述 引用系统用例 前置条件 后置条件 1.4 操作用户角色 操作用户
 *          描述 营业员 可查询、录入、修改增值服务信息 1.5 界面要求 1.5.1 表现方式 Web方式 1.5.2 界面原型 1.5.2.1
 *          录入增值服务信息 1.5.2.2 查询发货客户代收货款退款联系人 1.5.2.3 查询其它费用 1.5.3 界面描述
 *          营业员点击运单开单，进入运单开单界面。 本界面为录入增值服务信息。 界面主要分为二个部分：录入增值服务、查询其它费用。 1.
 *          录入增值服务 录入增值服务分为三个部分：录入增值服务信息界面、 录入其它费用列表、查询发货客户代收货款退款联系人； 1.1
 *          录入增值服务信息界面 录入增值服务信息界面包括： 1.1.1 保价声明价值； 1.1.2
 *          保价费率：保价费率可由基础资料配置，可按出发城市区域，出发营业部等； 1.1.3 保价费； 1.1.4 代收货款； 1.1.5
 *          代收费率； 1.1.6 代收手续费； 1.1.7 退款类型：包括三日退、退日退、审核退，默认三日退为空； 1.1.8 收款人姓名；
 *          1.1.9 收款人帐号； 1.1.10 包装费； 1.1.11 装卸费； 1.1.12 送货费； 1.1.13 其它费用合计；
 *          1.1.14 接货费； 1.1.15 返单类别：包含“无需返单”、 “客户签收单原件返回”、“客户签收单传真返回”、
 *          “运单到达联传真返回”包括无需返单、原件签收单返回、 传真件签收单返回、扫描件返回，默认无需返单； 1.1.16 预付费保密； 1.2
 *          录入其它费用列表 录入其它费用列表包括： 1.2.1 费用名称； 1.2.2 费用金额； 1.2.3 新增其它费用：功能按钮；
 *          1.2.4 删除其它费用：功能按钮； 1.3 查询发货客户代收货款退款联系人 1.3.1 操作列； 1.3.2 开户银行； 1.3.3
 *          收款人姓名； 1.3.4 银行帐号； 1.3.5 备注信息； 1.4 录入包装费 2. 查询其它费用
 *          查询其它费用分为四个部分：其它费用列表 、功能按钮； 2.1 其它费用列表： 其它费用列表包括： 2.1.1 名称； 2.1.2
 *          归集类别； 2.1.3 描述； 2.1.4 金额； 2.1.5 金额上限； 2.1.6 金额下限； 2.1.7 是否可修改； 2.1.8
 *          其它费用可基础资料配置，并支持是否启用和是否可见的维护； 2.2 功能按钮： 2.2.1 查询：包括查询条件：名称； 2.2.2 确定；
 *          2.2.3 取消； 1. 限保物品（例如：“陶瓷”、“门窗”等）默认保价1000不可修改,
 *          且保价费率可手动调整；（限保物品从限运物品基础资料中获取）； 非限保物品的保价费率不可修改； 2.
 *          实际保险费小于最低保费的按最低保费收取； 3. 保价费 = 保价申明价值*保价费率，不可修改； 4.
 *          保价申明价值默认为3000，可以修改；保价声明价值不封顶； 5. 精准（长途）、普货（长途）、偏线，最低一票8元；普货（短途）、
 *          精准（短途）最低一票6元；空运最低一票10元；所有运输方式保价超过最低均按0.4%收取
 *          （数据读取自保价设置基础资料）；长短途数据读取计价基础资料； 6. 实际保价费小于最低保费的按最低保费收取； 7.
 *          保价费率首先是配置的标准费率。当有区域保价费率时，以区域保价费率为准。
 *          当客户为合同客户时，则以合同签订为准。所有的保价费率以读取的为准，不可修改。 限保物品的保价费率同样不可修改
 *          行政组织业务属性-营业部信息中增加增值服务（返回签单、货到付款、代收货款）选项，
 *          开单是否可以进行返回签单、货到付款、代收货款需要根据到达部门属性 是否可以（返回签单、货到付款、代收货款）来决定 1.
 *          如果不是CRM客户或者派送网点基础资料中代收货款属性为”否”， 代收货款设置为0且不可编辑； 2.
 *          如果是CRM客户、对应派送网点基础资料中代收货款属性为”是”且CRM中有账户信息，
 *          代收货款可编辑，且可以选择所有的退款类型，若CRM中若无账户信息， 则退款类型只能选择审核退 3. 开单时系统默认代收货款为空； 4.
 *          代收货款栏默认为空，如果没有代收货款，则要求输入0；否则， 进行提示：“请确认该单没有代收货款，
 *          如无，请输入数字0”；当代收货款大于0时，输入后，对于选择的退款类型， 有如下限制： 3.1
 *          三日退：在收到客户代收货款后第三天给客户打款。 3.1.1 默认退款类型为三日退； 3.1.2 代收10000元以下费率0.5%，
 *          10000元以上费率0.4%；最低10元/票，最高100元/票；
 *          有部分城市三日退费率为0.（通过基础资料“代收货款费率”及“特殊城市与部门代收货款费率”实现）。 3.2
 *          审核退：收到客户代收货款，出发部门审核后，给客户打款。 3.2.1
 *          代收10000元以下费率0.5%，10000元以上费率0.4%；最低10元/票， 最高100元/票（
 *          通过基础资料“代收货款费率”及“特殊城市与部门代收货款费率”实现）。 3.2.2 选择审核退时，客户收款信息体现在开单界面，
 *          若无账号时可以提交运单后再走账号修改流程进行补充。 3.3 即日退：在收到客户代收货款后24小时到账。 3.3.1
 *          代收手续费率1%，最低20元/票，最高200元/票； 有部分城市特殊（通过基础资料“代收货款费率”及“特殊城市
 *          与部门代收货款费率”实现）。 3.3.2 必须先录入客户收款银行信息，提交时，银行信息不能为空； 3.3.3
 *          只支持4个银行：农行、工行、建行、招行；否则，给予提示信息； 5. 限制代收货款金额不能小于10元，可以等于10元；
 *          但可以为0；该数字“10”可由基础资料配置； 6. 网上订单导入开单时，代收货款金额读取网上订单的代收货款金额，
 *          有数据时不可对代收货款进行修改， 只可起草出发更改进行修改；若网上代收货款为0 ， 系统可支持修改代收货款金额； 7.
 *          默认的代收费率由基础资料配置； 1. 保价费和代收货款费用无法编辑更改， 只能更改保险声明价值和代收货款金额； 1.
 *          代收退款收款人姓名只能为发货客户绑定的收款人姓名和帐号，且只能选择，不能修改； 当退款人姓名和帐号唯一时，
 *          直接显示；（数据读取CRM客户信息资料（退款帐户信息）） 2. CRM客户信息资料的要先在CRM中录入客户退款帐户信息，
 *          且第一次在我司办理代收货款业务时， 退款类型只能为审核退； 3.
 *          同一客户多个银行信息的显示问题：当有两个或以上账号时，弹出账号信息（包括开户银行、收款人、 账号、备注），选中其中的一条银行信息记录后，
 *          账号和收款人信息显示在开单界面对应的位置； 1. 包装费默认为0，可手工修改； 2.
 *          当录入有打木加信息时，默认显示包装费=max（150*打木架货物体积，30）+max（300*打木箱货物体积，40），
 *          且可修改，修改的金额只能大于等于默认显示金额；其中150、30、300、40为打木架单价（元/方）、打木架最低一票、
 *          打木箱单价（元/方）、打木箱最低一票，可由基础资料配置； 1. 装卸费金额需满足不能超过纯运费的15%（特殊部门为35%）。
 *          即：装卸费（M）<=纯运费（C0）*15%（特殊部门为35%）=【重量/体积】（Z）*原费率（Q0）*15%（特殊部门为35%），
 *          （其中，原费率Q0为：公布价）。 当装卸费大于零时，开单显示费率（Q）=（M+CO*优惠折扣）/（优惠折扣*Z） ，
 *          开单显示运费（C）=Q*Z=C0+M 。且此显示费率不可更改；（对于专线的散客而言） 2.
 *          如果该客户为月结客户、整车、中转下线或偏线，则原费率（Q0）为装卸费前的费率，为系统默认的公布价。
 *          开单最终显示费率（Q）=（M+CO*优惠折扣）/（优惠折扣*Z） ，开单显示运费（C）=Q*Z=C0+M ； 3.
 *          当修改除装卸费影响外有影响费率的地方时（如目的站更改、重量和体积变化影响到费率），
 *          需先清空装卸费为零，然后再修改数据。如：月结客户与非月结客户、整车与非整车、目的站、重量、体积； 4.
 *          当装卸费由M1修改为M2时：先判断M2是否满足公式：M2<=(Q1-M1/Z）*Z*15%（特殊部门为35%）。
 *          如果公式成立，则最终显示费率Q2=Q1-M1/Z+M2/Z，最终显示运费（C2）= Q2*Z。否则，清空装卸费为零，
 *          最终显示费率Q2=Q1-M1/Z，最终显示运费（C2）= Q2*Z。（其中Q1是装卸费M1时的费率,Z为重量/体积）； 5.
 *          系统如果是运费最低一票，要求装卸费=0，即装卸费不允许修改。（只限制配载类型为专线的，包括月结）； 6.
 *          对于显示费率不等于显示费率乘以重量的问题，要求如下： 6.1. 若该单含装卸费且折算后的费率（A）的有效小数位为小于或等于两位小数，
 *          则显示费率（Q）=费率（A）。 且显示运费等于该显示费率*重量； 6.2.
 *          若该单含装卸费且折算后的费率（A）的有效小数位大于两位小数，令费率（B）=费率（A）
 *          的取前2个小数位的值（注：直接截取A的值，不四舍五入）。则显示费率（Q）=费率（B）+0.01。 显示运费等于该显示费率*重量； 7.
 *          只要含与不含装卸费两者有交叉的，均以不含为准； 8. 装卸费特殊部门表： （建议：做为可配置的基础数据表） 9.
 *          2012年12月1日开业的部门不能开装卸费 10. 如果订单渠道为阿里巴巴或者是月发越送属性客户不可开装卸费 11.
 *          是否可以开装卸费的依据取决于部门的业务属性（即部门属性基础资料中增加是否可开装卸费的字段）。 12.
 *          装卸费上限由增值服务配置基础资料实现（在产品API中体现）。 1. 送货费默认不可改小，但可改大。除了月结客户外，
 *          只能对系统计算出的送货费取值进行上调， 不能下调。当送货费取值大于最高送货费（基础资料配置）时， 送货费自动跳改为最高送货费值，
 *          但用户可以上调送货费； 2. 通过送货费基础资料来实现： 2.1. 若提货方式为送货进仓，
 *          开单送货费直接读取送货进仓送货费基础资料，取值终止； 2.2. 若提货方式为送货上门，
 *          则开单的送货费取值顺序：特殊区域送货费优于全国标准送货费； （即：先到特殊区域送货费基础资料中取值，若取到值，
 *          取值终止；否则，再到全国标准送货费基础资料取值， 取值终止。） 2.3. 特殊区域和全国标准送货费取值规则：送货费=货物重量*送货费率；
 *          2.3.1 先判断开单体积在哪个体积区间，筛选出符合条件的所有记录，再判断开单重量在已被体积筛选
 *          出来的记录中的哪个重量区间，来确定是哪一条记录。 然后再根据费率计算，计算出来的值与该条的最低
 *          送货费进行比较，若小于最低送货费时，就取最低送货费， 取值终止；若大于最低送货费且小于最高送货费时，
 *          就取计算出来的值，取值终止；若大于最高送货费时， 就取最高送货费，取值终止。 2.3.2 标淮派送范围收取送货费标准： 货物重量 标准
 *          0-300KG 55元/票 301-500KG 0.2元/KG 501KG或2.5立方米以上 100元/票，不封顶 2.3.3
 *          当送货费取值小于最高送货费时，开单送货费不可以更改； 当送货费取值高于最高送货费时，
 *          开单送货费可手动更改，如果手动更改的值小于最高送货费时， 系统弹出提示框：“该票送货费不得低于 【最高送货费】” 2.3.4
 *          仅使用于汽运专线，对“空运”、“偏线”以及“中转下线” 的不受以上收费的限制。 2.3.5
 *          “月结”客户的送货费收费按以上计算出默认值，但可以修改。 （送货费不受限制。可向上修改也 可以向下修改，最小为0） 2.3.6
 *          除月结客户的属性外其它所有情况的送货费不可向下修改， 只能向上修改 2.3.7 最高送货费做基础资料配置； 3.
 *          非标准派送范围加收操作费标准： 3.1 超远加收送货费标准： 距离（公里） 30-50 50-100 100-150 加收金额（元）
 *          50 100 150 3.1.1 距离为客户所在区域与公司最近网点的距离（距离以ERP谷歌地图测量的导航距离为准）； 3.1.2
 *          客户所在地30公里范围内如果有公司的营业网点， 无论是否做派送，该区域均不能收取超远加收送货费； 3.1.3 非标准派送的费用添加无上限
 *          3.2 特殊区域（进仓）： 3.2.1 特殊区域类型：大型超市和商场、大型工厂（需提供进仓编号）； 3.2.2
 *          收费标准：进仓费实报实销，并加收150元操作费； 4. 区域送货费限制： 4.1 当开单提货网点的所在城市或区域为“XX”、
 *          提货方式为：送货”XX”(XX待定，但前提是：提货方式必须为送货)时， 送货费固定为XX元，且不可修改；财务成本提取为XX元。
 *          （该类型城市或区域、送货费固定标准、成本提取标准可配置） 4.2 当开单提货网点为XX营业部时，开单送货费为XX元，
 *          内部成本提取为XX元（目前该方案营业部：深圳华强苏发大厦 营业部、深圳华强钟表市场营业部）。
 *          （该类营业部类型、送货费固定标准、成本提取标准可配置） 4.3 内部带货、空运、偏线及中转下线不受上述需求的限制。 5.
 *          限制大件大票货到达“XX部门”或“XX区域”或其它限制类型区域： 5.1 当开单提货网点为“XX部门”或“XX区域”或其它限制类型区域，
 *          判断单件重量是否超过XXKG， 或体积是否超过X立方，是的话提示：“单件超过XKG或单票超过X立方， 请开到XX派送部或其它内容”。
 *          （单件重量＝重量/件数）。【即开单限制：可通过到达部门限制基础资料实现】 5.2
 *          当开单提货网点为“XX部门”或“XX区域”或其它限制类型区域时， 其他费用中的“送货上楼费”屏蔽或显示但不可选择； 5.3
 *          若“XX区域”或其它限制类型区域再开派送部，适用以上需求； 5.4 空运、偏线及中转下线不受上述需求的限制； 5.5
 *          内部带货受上述需求的限制； 5.6 “XX部门”或“XX区域”或其它限制类型区域及判断规则由基础资料配置； 1.
 *          开单时系统默认其他费用为综合服务费和燃油附加费且不可移除,其他费用由手动添加， 费用根据基础资料中的内容进行读取，根据开单内容自动添加；
 *          （可基础资料配置） 2. 运输类型为“精准（长途）、普货（长途）、偏线、空运”时， 燃油附加费默认为4元；
 *          运输类型为“普货（短途）、精准（短途）”时，燃油附加费默认为2元； 均不可修改；（可基础资料配置） 3.
 *          综合服务费：（费用金额由基础资料配置） 3.1 综合服务费默认为2元不可修改、剔除； 3.2 月结客户可以删除2元的综合服务费； 3.3
 *          淘宝、阿里巴巴订单导入开单时，系统自动不收取2元的综合服务费； 4. 燃油附加费：（费用金额由基础资料配置）
 *          运输类型为“精准（长途）、普货（长途）、偏线、空运”时，燃油附加费默认为4元；
 *          运输类型为“普货（短途）、精准（短途）”时，燃油附加费默认为2元；均不可修改； 5.
 *          其他费用中“是否可修改”打勾时，对应费用类型的金额可以金额上限和金额下限之间修改； 6.
 *          其他费用合计等于其他费用列表中各项费用数据之和； 1.
 *          原件签收单返回类：系统默认收取客户15元/票，可更改收取客户20元/票。偏线不允许做签收单； 2.
 *          空运、偏线和中转下线的“返单类型”不可选择； 3.
 *          若有选择，则返单费用信息自动显示在其他费用信息列表中，可以其它费用列表中修改签收费用； 4.
 *          如果选择有返单类型，系统会自动生成一条签收单记录，记录信息包含：运单号、运单ID、库存状态、
 *          当前操作部门（运单开单时，是填开部门）、是否签收、是否作废、出发部门(运单开单出发部门)、 签收单类型、签收状态； 5.
 *          月结客户允许修改对应返单类别的返单金额（区间为对应返单类别的上限值和下限值），
 *          非月结客户只能选择对应的返单类别的默认金额，不能修改；返单费用项目不能删除 1.
 *          运单新增时，运输性质选择空运、提货网点非我司自有网点时，不能选择预付运费保密； 2.
 *          已开启预付运费保密运单提交后，始发更改中预付运费保密可以取消。未开启预付运费保密运单提交后，
 *          若货物未有非本部门入库操作，则始发更改中预付运费保密可选择；若货物有非本部门入库操作，
 *          则始发更改中预付运费保密否可选择，若要更改，则必须返货后，作废重新开单； 3.
 *          运单保存未提交时，可以在调出运单的时候，预付运费保密自由选择； 4.
 *          已开启预付运费保密的运单，始发更改中预付更改到付或到付更改预付，涉及预付运费有变动时， 不影响预付费保密功能； 5.
 *          开启预付运费保密，预付运费不能为0，否则不能保存、提交； 6. 开单付款方式为临时欠款时，预付运费保密选项不可选择，其他付款方式都行；
 *          7. 开启预付运费保密，运单出库后，始发更改中运输性质由汽运专线更改为偏线、空运时， 必须取消预付运费保密后才能提交； 8.
 *          预付运费保密开启时，非出发部门用户综合查询预付运费不显示，即“预付金额”不显示； 9.
 *          预付运费保密开启后，到达联打印时，费率、运费、其他服务费用明细、费用合计中的现付总计均不显示； 1. ； 2.
 *          1）开单总费用、预付金额、到付金额，取整，四舍五入；
 *          2）开单所有录入的金额数值，最多可录入到小数点后两位小数，无效的0省略不显示，如100.00显示100, 100.10显示100.1；
 *          3）开单总费用、预付金额、到付金额之外的，即中间环节的金额保留两位小数，依据四舍五入规则。
 *          4）费率最多可保留两位小数，小数点多于两位时，全进1。比如，系统折算生成的费率为1.201时，显示为1.21。 1. 接货费只能录入数字
 *          1）限保物品不限制保价金额，限制保价费率，增值服务部门可以配置对应限保物品的保价费率； 2）限保物品的保价费率通过基础资料进行配置；
 *          3）取消偏线、空运最高保价5000元的限制； 2、装卸费开单运费占比及特殊部门装卸费需做成基础资料配置
 *          3、"其它费用"中的费用名称对应的归集类别的费用划分到增值服务对应的费用中，同时需增加归集类别的配置资料。
 *          4、超远派送送货标准的基础资料是需要配置的；超远派送费用无上限限制
 * 
 * 
 *          * 运单收银SUC业务规则 1. 计费类型分为重量计费、体积计费，由系统自动生成，不可修改；默认重量计费； 2.
 *          对于一票货物系统分别按重量和体积分别计费并取大优先的原则计费； 若按重量计费运费较按体积计费运费较高，则计费类型为重量计费；
 *          若按体积计费运费较按重量计费运费较高，则计费类型为体积计费； 3. 运输类型为汽运时,计费重量为空，不可修改；
 *          4.运输类型为空运时计费重量应为重量和体积*1000000/6000进行对比，取大； 1.
 *          费率为对应计费类型、目的站、提货网点及运输类型的走货单价； 2. 目的站、提货网点及运输类型确认后，即可自动显示对应计费类型的费率；
 *          （来自价格基础资料） 3. 费率可以保留到小数点后2位；运费、预付金额、到付金额为整数， 按照四舍五入的原则； 1.
 *          公布价运费、增值服务费用、优惠合计需通过点击计算费用获取； 2. 当提货网点信息未录入，不可计费运费；当录了提货网点，
 *          货物的重量和体积以及其他服务费用录入不完整时， 点击计算费用，得到当前填写的信息费用信息； 3.
 *          公布价运费（即重量、体积计费的运费）=每公斤单价/每方价格与货物实际重量/体积的乘积，
 *          对于一票货物系统分别按重量和体积分别计费并取大优先的原则计费；（来自价格基础资料） 4.
 *          增值服务费=送货费+包装费+保价费+代收手续费+接货费+其他费用合计； 5. 优惠合计=优惠总合计； 6.
 *          总运费=公布价运费+增值服务费-优惠合计=预付金额+到付金额； 7.
 *          在提交运单时，系统记录该次计算费用时所用的所有价格费用的规则版本号； 8. 采用费用明细取整、总费用取整的原则 9.
 *          任何客户包含月结客户不可减免综合服务费。 10. 开单界面选择付款方式为"现金"时，默认预付金额为开单总金额并允许修改，且修改的同时到付
 *          金额随预付金额变化而变化，变化规则为：到付金额=总金额-预付金额，到付金额不能修改。
 *          例如，开单界面选择付款方式为"现金"时，当一票货的总金额为300元时，默认预付金额为300元，到付
 *          金额为0，将预付金额改为100元之后，到付金额变为200元 1.
 *          必须输入提货网点、货物的重量和体积以及其他服务费用，计算出总费用后再输入验证编码进行验证；
 *          （优惠券编码开单时，对运单有上下限金额的限制，该上下限可配置） 2.
 *          输入优惠券编码后，焦点转移时，系统调用CRM接口，校验该编码是否存在，如果存在，则将优惠信息
 *          显示在优惠信息列表中，费用为对应的优惠券的金额；如果不存在提示为：你输入的优惠券编码不存在，请重新输入； 3.
 *          当修改优惠编码时，则焦点转移时，系统自动调用CRM接口，校验该编码，同时修改对应的优惠减免 记录和优惠信息； 4.
 *          优惠金额必须小于等于开单总金额； 5. 当付款金额为单一的现付或到付时，优惠券可以单独减免，当付款金额既有现付又有到付时，优先选
 *          择减免现付金额，如存在优惠金额此时减免现付有余时，可再充抵到付费用，但优惠金额必须小于等于开单总金额； 6.
 *          暂存时，只显示减免金额，运单实收或应收金额上不显示，即暂存时，不生成实收或应收单据； 7. 当费用变化时，优惠编码必须重新输入；8.
 *          1. 当发货客户有月结客户属性时，才可选择月结；并默认显示付款方式为月结； 2.
 *          当发货客户有信用额度的属性时，才可选择临时欠款的付款方式； 3. 支持发货客户的多种付款方式叠加，但月结和临时欠款不可同时出现； 4.
 *          当开单为订单导入开单，且为网上订单，并选择了网上支付时，导入开单后的付款方式显示网上支付；
 *          同时付款方式可修改，付款方式中增加网上支付选项； 5. 开单为空运、偏线、中转下线时不能选择“网上支付”； 1.
 *          当付款方式为现付时，预付金额必须大于0；否则，提示信息“付款方式非到付，预付金额不能小于等于0”； 2.
 *          当付款方式为到付时，预付金额不能大于0；否则，提示信息“付款方式为【到付】，预付金额不能大于0”； 3.
 *          月结客户的信用金额直接限制该客户的当月发货金额，当月发货金额超过信用额度，当月将无法再开单月结，
 *          提示“该客户的剩余可用信息额度不足，不能开月结”； 4.
 *          临时欠款时，需要客户中的信用额度超过运费，否则，提示“该客户的剩余可用信息额度不足， 不能开临时欠款”；
 * 
 *          确认会员资质SUC规则 1. 签约合同客户： 1.1 营业部合同客户只享受合同优惠；当有促销的优惠时，合同客户可享受最大优惠折扣，
 *          但不叠加；（促销优惠为基础资料配置属性） 备注：当运单为网络订单（官网订单、阿里巴巴订单、淘宝订单、呼叫中心订单），
 *          且客户为合同客户时，为了保证不重复享受折扣， 除运单是阿里巴巴订单且月结客户优惠类型为“普通货物打折方案”以阿里巴巴费率计算外，
 *          其他情况都按照合同优惠来进行计算； 1.2 客户为非本部门的合同客户时，不在本部门享受合同优惠；；
 *          合同客户有绑定其他营业部时，可在所绑定的其他营业部享受合同归属部门同等优惠； 1.3 所有合同客户可以减免综合服务费； 1.4
 *          所有合同客户享受合同签订的保价费率和代收货款费率； 1.5 合同客户通过月结审核的，可选择付款方式为：“月结”；
 *          其他客户不能选择为“月结”； 1.6 合同客户为“价格折扣”优惠时，客户发货除最低每票的运费不受影响外，
 *          其他运费超过最低每票标准的，总运费按照其折扣比例打折优惠（折后总运费不低于最低每票标准运费）； 1.7
 *          合同客户为“月发月送”优惠时，客户发货价格按照月发月送标准； 1.7.1. 开单不能含装卸费； 1.7.2.
 *          当月发越送与空运同时存在时，以空运规则为准，可开装卸费； 1.8 合同客户有免费送货属性的，在优惠信息列表中自动优惠标准派送的送货费用，
 *          对于月结属性的客户可以向下修改送货费，最小为0；其它所有情况的送货费不可向下修改，只能向上修改； 1.9
 *          合同用户仅在合同有效期内享受合同优惠。 1. 非公司签约客户： 1.1
 *          发货客户只能选择本部门的客户，但通过会员卡号可查询其他部门客户信息； 若客户为其它部门合同客户时，客户不享受合同优惠； 1.2
 *          客户优惠信息由基础资料配置，优惠信息包括：我司享受优惠区域部门、 优惠类型（如线路优惠、货物类型优惠等，可配置）、
 *          优惠名称，对应的的优惠的具体信息； 1.3 优惠类型有优先级，其优先级由基础资料配置；
 *          （当普通优惠与促销优惠同时同在时，促销优惠优于普通优惠；） 1.4 系统自动根据承运信息，给出对应运单可享的优先级最高的优惠，
 *          、当最高优先级并列出现时，默认勾选最大优惠的优惠方案； 对于同一优惠类型的优惠，存在互拆；
 *          例：当线路优惠和区域优惠同时存在时，系统只给出线路优惠； （点面原则（异常优先）：即点面同时存在时，以点为准。
 *          如：优惠1：上海出发货8折优惠；优惠2：上海到广州9优惠， 由于优惠2包含于优惠1中，为优惠1的一个异常，
 *          则在生成优惠信息时，只显示优惠2的优惠方案）； 1.5 阿里巴巴客户： 1.5.1 阿里巴巴订单导入开单时，对于诚信通会员，
 *          系统按如下方式进行折扣： 运输类型 限制要求 普货 精准（长/短途） 起步价格 30元 40元/20元 小于1000公斤或5立方
 *          大于等于1000公斤或5立方 （该折扣表内容由基础资料配置） 备注：对于阿里的普通会员，系统只减免2元的综合服务费。 1.5.2
 *          阿里巴巴订单导入开单时，在“优惠方案中”自动新增“阿里巴巴优惠费”项， 且系统自动计算优惠金额。公布价仍显示为公司散客开单标准的公布价。
 *          （阿里巴巴优惠费=公司标准公布价总运费—阿里巴巴折扣的总运费）； 也为公布价优惠的一种； 1.5.3
 *          阿里诚信通会员客户下单后，阿里订单导入开单， 且“该客户同时为部门的月结客户，其月结优惠类型为‘普通货物打折方案’时”，
 *          则开单时阿里价格优于月结客户价格，以“阿里诚信通会员价格方案”计算运费；
 *          其他的月结优惠类型(公布价、价格折扣、月发月送)开单时月结客户价格优于阿里价格规则； 1.5.4
 *          当阿里巴巴订单开空运和偏线不享受对应的阿里巴巴优惠， 但可享受正常开单的优惠； 1. 客户享受的优惠类型自动显示在优惠信息显示列表中；
 *          2. 合同优惠包括公布价折扣优惠和增值服务优惠； 3. 对于公布价优惠：只显示客户可以享受的公布价优惠信息，
 *          且默认勾选“合同规定的优惠方案”或“与合同优惠有冲突时， 系统规则使用的优惠方案”的公布价折扣优惠； 4.
 *          当客户为合同客户时，不仅显示合同公布价优惠， 还显示对应线路或货物类型或货物种类等其它配置的所有与本次承运相关的公布价优
 *          惠方案中系统规则使用的较合同优惠更优的优惠方案； 5. 当客户为合同客户时，若勾选非合同公布价优惠时且为非促销优惠时，
 *          则不再享受对应客户的所有合同优惠（包括公布价优惠、增值服务优惠及月发月送、月结等优惠）； 6.
 *          当客户为非合同客户时，自动默认勾选系统规则可使用的折扣最低的公布价优惠方案； 7. 公布价优惠方案只可勾选一种，不可多选； 8.
 *          合同客户的增值服务优惠项不可修改（即不可以取消或增加勾选）， 非合同客户的增值服务优惠项可修改（即可以取消或增加勾选） 9.
 *          任何客户包含月结客户不可减免综合服务费 1. 公布价优惠金额=本次承运的公布价总价*（1-优惠折扣）； 2. 增值服务优惠金额： 2.1
 *          保价费和代收手续款的优惠金额=声明价值/代收货款*（ 公司标准的保价费率/代收费率-签约合同的保价费率/代收费率）； 2.2
 *          其它优惠或费用减免由优惠规则配置生成； 1. 只有月结属性的客户才可以享受月结的付款方式；且当客户为月结客户时，
 *          付款方式自动默认为月结； 2. 只有信用额度的客户才可以享受临时欠款的付款方式；且对应客户的信用额度全国统配，
 *          不绑定部门，例：客户A在我司可享信用额度为5000，且其合同主体为部门a，
 *          A已用额度为2000，且无论客户A在a部门发货，或是在其它任务我司的部门发货， 其可用额度均为3000； 3.
 *          系统自动过滤客户不能享受的付款方式；
 * 
 * 
 * 
 *          录入发货客户信息SUC业务规则 营业员点击运单开单，进入运单开单界面。 本用例分为两个界面：录入发货客户信息、选择发货客户； 1.
 *          录入发货客户信息： 界面为信息录入界面：包括：手机、电话、客户名称、 客户编码、发货联系人（发货部门）、发货人地址； 1.1
 *          手机：发货人手机号码； 1.2 电话：发货人电话号码； 1.3 客户名称：发货客户公司或单位名称，可支持搜索查询； 1.4
 *          客户编码：我司给客户的客户号； 1.5 发货联系人（发货部门，支持模糊搜索）： 发货客户的客户姓名，
 *          当“运单开单”中的“开单提货方式”为“内部带货自提”时， “发货联系人”字段更改为“发货部门”； 1.6
 *          发货人地址：发货客户的详细联系地址， 支持国家行政区域自动过滤； 2. 选择发货客户界面： 界面为选择客户信息界面：包括两部分：
 *          客户信息列表区域、功能按钮区域； 2.1. 客户信息列表区域： 包括：客户编码、客户名称、联系人、手机、
 *          电话、地址(规范化地址和详细地址)； 2.2. 功能按钮区域： 包括：确定、取消； 3. 选择热门城市界面 界面信息包含人热门城市 4.
 *          选择省份界面 界面信息包含省份 5. 选择城市界面 界面信息保护城市 6. 选择区县界面 界面信息保护区县 1.6 操作步骤 1.6.1
 *          录入 序号 基本步骤 相关数据 补充步骤 1 录入手机号码 1. 系统自动查询CRM系统中对应手机号码绑定的客户信息，
 *          如果有弹窗，弹窗操作见扩展1a，如果没有， 弹出FOSS历史开单记录中对应手机号码绑定的客户信息，并弹窗，弹窗操作见扩展1b； 2.
 *          规则-请参见系统规则SR1；
 * 
 *          2 录入电话号码 1. 如果手机号码没有填写， 系统自动查询CRM系统中对应电话号码绑定的客户信息，
 *          如果有弹窗，弹窗操作见扩展2a，如果没 ，弹出FOSS历史开单记录中对应手机号码绑定的客户信息， 并弹窗，弹窗操作见扩展2b； 2.
 *          规则-请参见系统规则SR1；
 * 
 *          3 录入客户名称和客户编码 1. 规则-请参见系统规则SR2、SR3； 4 录入发货联系人（发货部门） 1.
 *          规则-请参见系统规则SR4、SR5、SR8； 5 录入发货人地址 1. 提供下拉框选择输入，系统自动过滤输入的行政区下一级行政级的字段；
 *          2. 规则-请参见系统规则SR6； 1.6.2 扩展 序号 扩展事件 相关数据 备注 1a
 *          当录入的手机号码在CRM系统中有手机号码绑定的客户信息， 则自动弹窗并显示手机号码为录入的手机号的所有客户信息，
 *          营业员选择录入一条记录，并确定；选择的客户信息自动带入发货客户信息中； 客户信息 1.
 *          规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则； 2. 规则-请参见系统规则SR5 、SR6、SR7；
 * 
 *          1b 当录入的手机号码在CRM系统中没有手机号码绑定的客户信息时， 如果该客户在这3个月有发过货，则弹出历史发货记录，
 *          营业员选择录入一条记录，并确定；选择的客户信息自动带入发货客户信息中； 客户信息 3.
 *          规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则； 4. 规则-请参见系统规则SR5 、SR6、SR7；
 * 
 *          2a 当录入的电话号码在CRM系统中有电话号码绑定的客户信息， 则自动弹窗并显示电话号码为录入的电话号码的所有客户信息，
 *          营业员选择录入一条记录，并确定；选择的客户信息自动带入发货客户信息中； 客户信息 1.
 *          规则-请参见系统用例SUC-492中的“1.6.2扩展2a”的规则； 2. 规则-请参见系统规则SR5、SR6、SR7；
 * 
 * 
 *          2b 当录入的电话号码在CRM系统中没有电话号码绑定的客户信息时， 如果该客户在这3个月有发过货，则弹出历史发货记录，
 *          营业员选择录入一条记录，并确定；选择的客户信息自动带入发货客户信息中； 客户信息 1.
 *          规则-请参见系统用例SUC-492中的“1.6.2扩展2a”的规则； 2. 规则-请参见系统规则SR5、SR6、SR7；
 * 
 *          1.7 业务规则 序号 描述 SR1 1. 发货客户手机号码及固定电话至少提供一个，手机号码只能为数字并且为11位； 2.
 *          固定电话号码只能为数字，且可添加多个；添加多个时， 必须用“，”或“、”或“/”分开；固定电话号码字段也可以录入手机号； 3.
 *          手机、电话为精确查询全公司客户信息 4. 手机、电话带出的客户信息会覆盖原来已带出的客户信息。
 *          若未带出客户信息则当客户ID不为空时清空除手机外的其它已带出的客户信息（即），否则不清空 SR2 1.
 *          若发货客户为公司会员客户，则录入发货客户信息后系统界面显示该发货客户联系人编码； 2.
 *          客户名称精确查询全公司客户信息。当客户名称为带出的客户时（以隐藏的客户ID是否为空做为判断条件），
 *          清空客户时则清空手机、电话、联系人、地址、行政区域、客户编码，否则只清空客户名称、客户编码、客户ID（隐藏）； SR3 1.
 *          若发货客户为会员客户，则录入发货客户信息后系统给予提示； 2. 提未信息为在运单开单界面下方加色放大显示； 3.
 *          通过选择录入的客户名称和客户编码不可修改，但可删除录入； SR4 1. 当“运单开单”中的“开单提货方式”为“内部带货自提”时，
 *          “发货联系人”字段更改为“发货部门”； 2. 联系人不用带出客户信息 SR5 1. 若为公司内部带货，输入发货部门关键字支持模糊搜索
 *          SR6 1. 客户详细地址必填至乡/镇，且乡镇下一级内容不能为空； 2. 当鼠标点击规范化地址文本框时，显示如下图片，
 *          包含热门城市、省份、城市、县区，选择热门城市， 会直接跳到区县，现在省份后自动跳到城市，
 *          选择城市后自动跳到区县（必须选择完上一级行政区域后，才能选择下一行政区域），
 *          选择完区县后，会把规范化地址显示在规范化文本框内，例如：江苏省-苏州市-相城区 3.
 *          地址可以进行拼音和首写字母进行匹配，例如输入“GZ”会在规范化地址文本框下面显示 ；
 *          匹配时可带出城市、区、县等符合的信息，该设计来自官网，具体可以参考官网 4.
 *          当增值服务中有返单业务时，则发货人地址为必填项；其他情况非必填。 SR7 1.
 *          使用电话号码和手机进行匹配，弹出CRM发货客户选择框进行选择，如果匹配不到，
 *          再使用运单发货历史客户进行匹配，弹窗选择，选择后填充客户编码、客户名称、联系人、地址； 2.
 *          但是对于电话号码匹配，只有当发货人手机、客户名称为空时，才会用电话号码检索并弹窗显示； 3.
 *          使用手机号码、电话号码、客户名称弹出选择框选择记录后覆盖原先记录 4. 修改联系人时，需要清空客户名称 5.
 *          使用手机号码弹出选择框选择记录后覆盖原先记录，查询不到时，清空客户名称 6.
 *          导入发货客户信息后，联系人名称不可修改，为灰色；当营业员进行清空发货客户的客户名称操作时， 联系人名称可修改，为可编辑状态； 7.
 *          点击客户名称查询控件，弹出查询信息:窗口SUC-424-查找会员 8. 如果查询出来的记录只有一条，也需要进行选择 9.
 *          发货客户名称精确查询且查询全公司 SR8 1. 发货人省市区默认为始发营业部的省市区
 * 
 * 
 *          录入收货客户SUC业务规则 营业员点击运单开单，进入运单开单界面。 本界面分为两个界面：录入收货客户信息、选择收货客户。 1.
 *          录入收货客户信息： 界面为信息录入界面：包括：手机、电话、发货收货联系人（发货收货部门）、发货收货人地址； 1.1
 *          手机：发货收货人手机号码； 1.2 电话：发货收货人电话号码； 1.3
 *          收货联系人（收货部门）：收货客户的客户姓名，当“运单开单”中的“开单提货方式
 *          ”为“内部带货自提”时，“收货联系人”字段更改为“收货部门”； 1.4 收货人地址：收货客户的详细联系地址，支持国家行政区域自动过滤；
 *          1.5 客户名称 1.6 客户编码 2. 选择收货客户界面： 界面为选择客户信息界面：包括两部分：客户信息列表区域、功能按钮区域；
 *          2.1. 客户信息列表区域： 包括：联系人、手机、电话、地址（规范化地址和详细地址）； 2.2. 功能按钮区域： 包括：确定、取消；
 *          3. 选择热门城市界面 界面信息包含人热门城市 4. 选择省份界面 界面信息包含省份 5. 选择城市界面 界面信息保护城市 6.
 *          选择区县界面 界面信息保护区县
 * 
 *          1.6 操作步骤 1.6.1 录入 序号 基本步骤 相关数据 补充步骤 1 录入手机号码 1.
 *          系统自动查询CRM系统中对应手机号码绑定的客户信息， 如果有弹窗，弹窗操作见扩展1a，和如果没有，
 *          弹出FOSS历史开单记录中对应手机号码绑定的客户信息， 并弹窗，弹窗操作见扩展1b； 2. 规则-请参见系统规则SR1、SR5、SR6；
 *          2 录入电话号码 1. 如果手机号码没有填写， 系统自动查询CRM系统中对应电话号码绑定的客户信息，
 *          如果有弹窗，弹窗操作见扩展2a，如果没有， 弹出FOSS历史开单记录中对应手机号码绑定的客户信息， 并弹窗，弹窗操作见扩展2b； 1.
 *          1、系统自动查询CRM系统中对应电话号码绑定的客户信息 和FOSS历史开单记录中对应手机号码绑定的客户信息，并弹窗，
 *          弹窗操作参见扩展2a； 2. 规则-请参见系统规则SR1、SR5 、SR6； 3 录入收货联系人（收货部门） 1.
 *          规则-请参见系统规则SR2、SR3； 4 录入收货人地址 1. 提供下拉框选择输入，系统自动过滤输入的行政区下一级行政级的字段； 2.
 *          地址在系统后台通过GIS系统进行匹配， 如果是禁行区域，地址颜色为红色，如果是进仓区域，地址颜色为黄色 3.
 *          规则-请参见系统规则SR4； 1.6.2 扩展 序号 扩展事件 相关数据 备注 1a
 *          当录入的手机号码在CRM系统中有手机号码绑定的客户信息， 则自动弹窗并显示手机号码为录入的手机号的所有客户信息，
 *          营业员选择录入一条记录，并确定；选择的客户信息自动带入收货客户信息中；
 *          当光标焦点移至录入手机号码时，系统自动调用CRM系统对应发货客户的历史发货记录，
 *          并自动弹窗显示所有该发货客户的历史发货记录；营业员选择一条记录，并确定， 选择的客户信息自动带信收货客户信息中； 客户信息 1.
 *          规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则； 2. 规则-请参见系统规则SR5 、SR6； 1.
 *          规则-请参见系统规则SR5； 1b 当录入的手机号码在CRM系统中没有手机号码绑定的客户信息时，
 *          则如果该客户在这3个月有发过货，则弹出历史收货记录自动弹窗并显示手机号码为录入的手机号的所有客户信息，
 *          营业员选择录入一条记录，并确定；选择的客户信息自动带入收货客户信息中； 客户信息 1.
 *          规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则； 2. 规则-请参见系统规则SR5 、SR6； 2a2a
 *          当录入的电话号码在CRM系统中有电话号码绑定的客户信息， 则自动弹窗并显示电话号码为录入的电话号码的所有客户信息，
 *          营业员选择录入一条记录，并确定；选择的客户信息自动带入收货客户信息中； 当录入的电话号码在CRM系统中有电话号码绑定的客户信息，
 *          则自动弹窗并显示电话号码为录入的电话号码的所有客户信息， 营业员选择录入一条记录，并确定；选择的客户信息自动带入收货客户信息中；
 *          客户信息客户信息 1. 规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则； 2. 规则-请参见系统规则SR5
 *          、SR6； 1. 规则-请参见系统用例SUC-492中的“1.6.2扩展2a”的规则； 2. 规则-请参见系统规则SR6；
 * 
 *          2b 当录入的电话号码在CRM系统中没有电话号码绑定的客户信息时， 如果该客户在这3个月有发过货，则弹出历史收货记录，
 *          营业员选择录入一条记录，并确定；选择的客户信息自动带入收货客户信息中； 客户信息 1.
 *          规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则； 2. 规则-请参见系统规则SR5 、SR6；
 * 
 *          1.7 业务规则 序号 描述 SR1 1. 收货客户手机号码及固定电话至少提供一个，手机号码只能为数字并且为11位，
 *          固定电话号码只能为数字，且可添加多个； SR2 1. 当“运单开单”中的“开单提货方式”为“内部带货自提”时，
 *          “收货联系人”字段更改为“收货部门”； SR3 1.
 *          若为公司内部带货，则收货客户信息中的收货部门名称必须与OA系统中组织架构名称保持一致； SR4 1.
 *          客户详细地址必填至乡/镇，且乡镇下一级内容不能为空；
 * 
 *          2. 当鼠标点击规范化地址文本框时，显示如下图片， 包含热门城市、省份、城市、县区，选择热门城市，会直接跳到区县，
 *          现在省份后自动跳到城市， 选择城市后自动跳到区县（必须选择完上一级行政区域后，才能选择下一行政区域），
 *          选择完区县后，会把规范化地址显示在规范化文本框内，例如：江苏省-苏州市-相城区 3.
 *          地址可以进行拼音和首写字母进行匹配，例如输入“GZ”会在规范化地址文本框下面显示 ；
 *          匹配时可带出城市、区、县等符合的信息，该设计来自官网，具体可以参考官网 4. 当提货方式含“自提”时，收货人地址为非必填项； SR5
 *          1. 使用电话号码和手机进行匹配，如果是唯一匹配一条CRM客户信息时，
 *          填充客户编码、客户名称、联系人、地址，如果有多条需弹出选择框进行选择，
 *          如果查询不到CRM客户信息时，使用FOSS三个月运单历史记录中的收货信息查询，
 *          唯一匹配一条进行填充收货客户信息，多条进行弹窗选择，如果都查询不到，不做其他操作 2.
 *          但是对于电话号码匹配，只有当发货人手机、客户名称为空时，才会用电话号码检索并弹窗显示 3.
 *          使用手机号码、电话号码、客户名称弹出选择框选择记录后覆盖原先记录 4.
 *          修改联系人时，需要清空客户名称，当清空客户名称时，会同时删除客户编码 5. 使用手机号码、电话号码弹出选择框选择记录后覆盖原先记录 6.
 *          点击客户名称查询控件，弹出查询信息:窗口SUC-424-查找会员 7. 身份证号、客户编码、客户名称、联系人编码可以查询到全公司的客户
 *          1. 只有当收货人手机为空，且发货客户信息已录入时，才会检索并弹窗显示； 2. 若未查询到历史记录，则无法提示； 3.
 *          通过选择录入的收货人信息均可修改； 4.
 *          使用号码进行匹配，如果是唯一匹配一条CRM客户信息时，填充客户编码和客户名称，如果有多条不做操作 SR6 1.
 *          通过选择录入收货发货信息，同时带出对应的目的站和提货网点信息； 2. 带出目的站仍然使用GIS进行查询，并以GIS返回为准； 3.
 *          若GIS未查询得出，则以历史开单的目的站和提货网点信息为准；
 * 
 * 
 *          查找会员SUC业务规则 营业员点击运单开单界面中的查询客户，进入查询客户信息界面。 本界面为查询客户信息。
 *          界面主要分为三个部分：查询条件区域、查询结果区域、功能按钮。 1. 查询条件区域： 1.1
 *          会员卡号：支持会员卡号的模糊搜索，并可查询部门全部会员信息； 1.2 发货联系人 1.3 电话 1.4 客户编码 1.5 客户名称
 *          1.6 手机 1.7 发货人地址 1.8 复选框"查询全公司" 2. 查询结果区域： 2.1 客户编码 2.2 客户名称 2.3
 *          联系人编码 2.4 月结审核 2.5 联系人 2.6 手机 2.7 电话 2.8 身份证 2.9 信用额度 2.10 地址 2.11
 *          越发越送审核编号 2.12 生效时间 2.13 失效时间 3. 功能按钮： 3.1 重置： 3.2 查询； 3.3 查询部门会员 1.6
 *          操作步骤 1.6.1 录入 序号 基本步骤 相关数据 补充步骤 1 录入查询条件，查询符合条件的客户信息 查询条件信息 1.
 *          系统查询CRM系统中本部门符合条件的客户信息； 2. 规则-请参见系统规则SR1； 2 查询本部门所有的会员客户信息 1.
 *          规则-请参见系统规则SR2； 3 导入选择的客户信息至发/收货客户信息中：双击选中的客户信息， 对应客户信息进入发/收货客户信息中 1.
 *          规则-请参见系统规则SR3； 1.6.2 扩展 序号 扩展事件 相关数据 备注 1a
 *          步骤1中，若未查询到符合条件的客户信息，系统给予提示 1. 提示信息为“未查询到符合条件的客户信息！”； 2b
 *          步骤2号，若本部门无会员，系统给予提示 1. 提示信息为“部门无会员信息！”； 1.7 业务规则 序号 描述 SR1 1.
 *          支持单一和组合查询条件查询； 2. 只有勾选复选框时，按照身份证号、客户编码、
 *          客户名称、联系人编码精确查全公司客户信息且查询条件中包含有身份证号、 客户编码、客户名称、联系人编码其中任意一项时，忽略其它查询条件，
 *          否则为模糊查询本部门客户信息； 3. 当查询到的记录为某客户编码中的其中一条信息时， 显示该编码对应的所有的客户信息； 4.
 *          当客户为越发越送客户时，则显示该客户对应的越发越送审核编号、 生效时间、失效时间；当越发越送审核编号有多个时，则只显示最后一次审核信息；
 *          SR2 1. 当条件都为空时，点击查询按钮，查询出本部门会员； SR3 1. 通过查询条件带出的客户信息被填充到相关控件中时，
 *          发货客户联系人为不可修改状态， 若要修改则需要清空全部带出的客户信息；
 * 
 * 
 *          确认公布总价SUC业务规则 1 打开“运单开单”界面。 2 录入发货人信息 参考SUC-492 3 录入收货客户信息 参考SUC-493
 *          4 录入货物信息 参考SUC-494 5 录入运输信息 参考SUC-496 进行前面5操作之后，若是空运，
 *          系统读取空运公布价价格方案（基础资料参考SUC-581） 计算出公布总价，显示在运单开单界面。
 *          若是汽运，系统读取汽运公布价价格方案（基础资料参考SUC-581） 计算出公布总价， 显示在运单开单界面。
 *          参考规则SR1，SR2，SR3 扩展事件写非典型或异常操作过程 序号 扩展事件 相关数据 备注 5a 5b 1.7 业务规则 序号 描述
 *          SR1 1）汽运：上门发货汽运运费最低X元一票； （同城、卡航；可配置）； 上门接货汽运运费最低X元一票；（同城、卡航；可配置）；
 *          2）空运：空运运费最低X元一票；（可配置）； SR2 1）汽运：当货物为“接货”时， 系统自动匹配生成公布价“接货价格方案”；
 *          当货物为“非接货”时， 系统自动匹配生成公布价“非接货的价格方案”； 2）空运：系统自动匹配公布价 “空运价格方案”；
 *          空运价格只有上门发货一套价格方案， 如有接货费在其他费用里添加一项接货费。 SR3 1）计费方式分为重量计费、体积计费；
 *          重量、体积计费的运费=每公斤单价与货物实际重量的乘积 或 每方单价与货物实际体积的乘积，
 *          对于一票货物，系统按重量和体积分别计算并取大优先的原则计费给出公布价总运费, 计费方式即为取大的一方；
 * 
 *          运单提交SUC业务规则 客户上门发货确认承运信息后，营业员告知客户运输费用后， 为客户开具运单，打印标签并粘贴至货物的过程。 1.3
 *          用例条件 条件类型 描述 引用系统用例 前置条件 1. 运单已填写完整
 *          DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入发货客户信息-V0.1.doc
 *          DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入货物信息-V0.2.doc
 *          DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入收货客户信息-V0.1.doc
 *          DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入运输信息-V0.1.doc
 *          DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息-V0.1.doc
 *          DP-FOSS-接送货系统用例-客户上门-根据订单确认承运信息-导入订单-V0.1.doc
 *          DP-FOSS-接送货系统用例-客户上门-确认承运信息-查询目的站-V0.1.doc
 *          DP-FOSS-接送货系统用例-客户上门-承运计费报价-确认公布总价-V0.1.doc 后置条件 1.
 *          传送运单号、金额、帐号等结算数据到财务子系统 2. 传送货物名称、件数、重量等货物信息到中转子系统，安排运输计划 3.
 *          传送运单号等信息到官网，客户查询运单状态 4. 给收货人发送出发短信，给上门接货客户发送短信 5.
 *          订单信息反馈给给CRM系统，订单处理结果为：已开单。 6、 当运输性质为精准空运时，
 *          提交成功后会自动生成订舱信息流到最终配载部门（即总调）的舱位信息中 1.4 操作用户角色 操作用户 描述 营业员 1.
 *          确认客户承运信息，开单收货， 收取现付金额，且打印标签及运单出发联让客户签字确认。 1.5 界面要求 1.5.1 表现方式 Web方式
 *          1.5.2 界面原型 1.5.2.1 集中开单界面 1.5.2.2 营业部开单界面 1.5.2.3 运单确认提交界面 1.5.3
 *          界面描述 1.5.3.1 营业部、集中开单界面 界面共包括7个部分：1、发货客户信息； 2、收货客户信息；3、货物信息；
 *          4、运输信息；5、增值服务信息； 6、计费付款；7、功能按钮。
 *          具体描述参考DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入发货客户信息-V0.1.doc
 *          DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入货物信息-V0.2.doc
 *          DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入收货客户信息-V0.1.doc
 *          DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入运输信息-V0.1.doc
 *          DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息-V0.1.doc 1.5.3.2 运单确认提交界面
 *          界面共包括3个部分：1、运单基本信息； 2、功能复选框；3、功能按钮 1、运单基本信息：单号、到付总运费、预付总运费、
 *          代收货款、保险价值、收货人名称、付款方式、提货网点、 提货方式、收货人地址、收货人电话、货物名称、
 *          重量/体积/件数、包装、重量/体积/件数（代打木架）。 2、功能选项：打印运单下拉框有各种版本（可以配置，且可以配置默认模板）
 *          （选择之后，点击确定系统自动打印运单，只能选其一，参考规则SR8）、 打印标签（选择之后，点击确定系统自动打印标签）、
 *          提交后新增（选择之后，点击确定系统打开一个新的开单界面）。 3、功能按钮：确定、取消 。 1.6 操作步骤 序号 基本步骤 相关数据
 *          补充步骤 1 营业员“填写”完整的运单信息。 2 点击暂存 1、客户上门提供的货物承运信息。 2、来此crm系统订单的数据。
 *          3、上门接货客户提供的承运信息。 1、用户暂存的运单数据时允许修改 23 点击“提交”按钮提交运单。 1、客户上门提供的货物承运信息。
 *          2、来此crm系统订单的数据。 3、上门接货客户提供的承运信息。 1、点击运单“提交”按钮，弹出“运单确认提交页面”，
 *          页面默认选择上“打印运单（全打）”、“打印标签”、 “确定后新增运单”复选框。
 *          2、提交后，同步数据到中转子系统，、CRM系统、官网系统， 财务子系统。(将单独出来写接口用例，此处将参考这些接口系统用例)
 *          3、系统自动根据出发部门、运输性质、到达部门生成默认唯一走货路径(基础资料)； 参考综合系统基础资料用例。
 *          4、当运输性质为精准空运时，提交成功后会自动生成订舱信息 （包括：预计出发时间、航班时间（早中晚）、重量）
 *          流到最终配载部门（即总调）的舱位信息中。 5、保存使用的价格版本号 56、参考规则SR1、SR12 34
 *          点击运单确认提交页面的“确定”按钮。 1、点击确定后，打开一个新的运单开单界面。 2、系统自动打印运单,选择系统默认的打印模板，
 *          参考DP-FOSS-接送货系统用例-客户上门-确认承运信息-打印运单-V0.1.doc
 *          3、系统自动打印标签，参考DP-FOSS-接送货系统用例-客户上门-确认承运信息-打印标签V0.1.doc 4、调用中转入库接口
 *          参考规则SR13 45 若有签收单返单时，需要打印签收单标签， 打印内容包括：单号、始发部门、到达部门、目的站。
 *          参考SUC-504打印签收单标签(整车) 扩展事件写非典型或异常操作过程 序号 扩展事件 相关数据 备注 2a
 *          营业员在弹出代打木架对话框“录入第X件”需要打木架。 若货物需要代打木架，系统自动弹出代打木架对话框。代打木架精确到第几件。
 *          参考规则SR3 2b2a 如运单必填信息未填写完整或填写内容不符合要求 （参考数据元素输入限制、长度、是否必填、运单号重复等），
 *          提交时给予提示。 提示为：“×××未填写整或输入内容不符合要求，请重新输入！”， 且将此文本输入框标记为红色，光标置于此文本框中。
 *          重新填写正确完整后，跳转步骤1。 参考规则SR7 2c2b 若为月结或临时欠款，
 *          如果客户既有应收账款金额加上本次应收金额超过客户最大信用额度， 不能提交开单。
 *          弹出提示：客户既有应收账款金额加上本次应收金额超过客户最大信用额度， 不能提交开单。参考SR9 *2d2c
 *          若为月结或临时欠款，如果客户已有应收账款超过最大账期，不能提交开单。 弹出提示：客户已有应收账款超过最大账期，不能提交开单。参考SR9
 *          2e2d 提交时，当重量体积比不在设置的区间（重量体积比基础资料）中， 弹出提示“请确认录入的重量体积是否准确！”；
 *          （该弹窗有两个按钮：确定、取消）点击确定时，弹出确认运单信息界面； 点击取消，点返回运单录入界面；当X在区间中，无提示；
 *          直接进入确认运单信息界面； 参考规则SR10 3a 步骤3中，可点击“取消”按钮，取消提交运单。
 *          取消提交运单，返回到系统运单开单界面，界面信息可编辑， 修改信息后，可再次进行提交，跳到步骤2。 3b
 *          步骤3中，也可取消选择默认选择的复选框。 1、如取消选择“打印运单”，确定之后，系统不进行自动打印运单，
 *          需点击开单界面上的“打印运单”按钮，打印运单出发联。 2、如取消选择“确定后新增运单”，确定之后，
 *          系统返回到填写完整的运单开单界面，但是运单界面成灰色不可编辑， 需点击开单界面上的“新增”按钮，新增运单。
 *          3、如取消选择“打印标签”，确定之后， 系统不进行自动打印标签，需点击开单界面上的“打印标签”按钮，打印运单标签。 1.7 业务规则
 *          序号 描述 SR1 1、若为上门接货，开单提交生成后， 系统短信通知发货人及收货人。 短信模板可在系统中进行设置。
 *          给发货人或收货人发送短信时， 若无手机号码则不发送。 发送短信内容中包含“货物的件数”。 注：“货物的件数”为货物包装之前的件数。
 *          系统自动给发货人、收货人发送货物出发短信（短信模板内容可配置）； 否则只需要给收货人发短信；若收发货人无手机号码则不发送。
 *          给收货人的短信内容：您好！这里是德邦物流， （发货人姓名***）从（出发城市***）给您发来货物，
 *          单号为（****）的（***货物的件数）件货，即日出发。
 *          目的地（*****客户的收获地址）。附：德邦物流营业部的电话、地址、营业部名称。 给发货人的短信内容：您好！这里是德邦物流，
 *          您从（出发城市***）给（收货人姓名***）托运的货物， 单号为（****）的（***货物的件数）件货，即日出发。
 *          目的地（*****客户的收获地址）。附：德邦物流营业部的电话、地址、营业部名称。 SR2
 *          运单现付金额不为0，则在出发部门生成现金收款单； 若到付金额不为0，则在到达部门生成应收单若付款方式为“现付”，
 *          “银行卡”，则在出发部门生成现金收款单； 若付款方式为“到付”在到达部门生成应收单。 若付款方式为“临时欠款”，“网上支付”，
 *          “月结”在出发部门生成应收单；若运单包含“代收货款”， 则在出发部门生成应付单，到达部门生成应收单；
 *          若运单包含“装卸费”，则在出发部门生成应付单。 SR3 开单代打木架外场默认为第一外场，
 *          如果第一外场不支持打木架，则营业员自己判定选择的代打木架外场。 开单代打木架外场默认为开单走货路径中第一个可代打木架的外场，不可修改。
 *          1）若货物包装中含有“木”字样，且走货路径上有代打木架外场， 系统提示：是否需要代打木架？；
 *          2）选择代打木架后，若默认的代打木架外场非走货路径上第一外场时， 系统给予提醒，便于营业员与客户衡量是否继续代打木架；
 *          3）若货物包装中含有“木”字样，但走货路径上没有可代打木架的外场，
 *          则不能开代打木架，系统提示：走货路径上没有可代打木架的外场，不能代打木架。 SR4 当运输性质为 “精准卡航”及“精准城运”时，
 *          系统自动计算预计出发时间与预计提货/派送时间。 ①预计出发时间： 由预计出发日期和准点出发时点（取自基础资料）组成，
 *          形如【2012-04-09 12:00:00】。 若开单当前时点在准点出发时点前，
 *          则预计出发日期=开单日期；否则，预计出发日期=开单日期+1； ② 预计提货时间（开单提货方式为自提）：
 *          由预计提货日期和到达营业部承诺时点（取自基础资料）组成， 形如【2012-04-09 12:00:00】。若为当天出发，
 *          则预计提货日期=预计出发日期+到达营业部承诺天数； 否则预计提货时间=预计出发日期+到达营业部承诺天数-1。 ③
 *          预计派送时间（开单提货方式为送货）： 由预计派送日期和派送承诺时点（取自基础资料）组成， 形如【2012-04-09
 *          12:00:00】。若为当天出发， 预计派送时间=预计出发日期+到达营业部承诺天数+派送承诺需加天数；
 *          否则预计派送时间=预计出发日期+派送承诺需加天数-1。 SR5 如果开单信息来自集中或非集中上门接货： 1、司机有PDA
 *          PDA开单后：则点击“PDA补录”走PDA补录流程引用系统用例SUC-491-补录运单。 2、司机无PDA
 *          则新增运单，进入开单界面走提交运单流程。 SR6 “运单确认提交界面”上的复选框可以单选，可以多选。 SR7
 *          提交时系统校验规则参考如下用例规则： SUC-492录入发货客户信息 SUC-493录入收货客户信息 SUC-494录入货物信息
 *          SUC-495录入增值服务信息 SUC-496录入运输信息 SUC-311导入订单 SUC-397 确认公布总价 SUC-126
 *          查询目的站 SR8 运单确认提交页面，打印运运单下拉框只能选其一， 默认为运单模板配置基础资料中配置默认的模板，
 *          如果不需要打印，不勾选即可。 SR9 若为月结或临时欠款，则系统需要对客户应收账款日期及信用额度进行判断： 1）欠款天数
 *          以客户为基本单位，开单/派送时付款方式为“临时欠款”， 最长一笔欠款时间超过30天，该客户将不能继续开单为“临时欠款”，
 *          假如客户的临时欠款未还款金额超过客户自己的信用额度， 也不能继续开单；开单付款方式为“月结”，最长一笔欠款时间超过70天，
 *          该客户将不能继续开单为“月结”；（始发应收账款从开单之日起计算，
 *          到付应收账款从第一次派送出库之日起计算，以更改方式更改为“临时欠款”或“月结”的， 从开单之日开始计算） 2）欠款额度
 *          临时欠款：以部门为单位，根据收入等级（前三个月最高收入金额） 设置该部门每月临时欠款最高额度（余额），详见下表；
 *          当部门临时欠款未还款金额大于该金额时， 将无法继续开单未“临时欠款”； 收入区间 项目 10万以下 3万 10-15万 5万
 *          15-20万 7万 20-30万 10万 30-50万 15万 50-100万 20万 100万以上 40万
 *          月结：以客户为单位，连续2个月发货金额在3000元以上可申请月结， 月结额度不得高于近期最高走货金额的2倍，
 *          若客户连续两月发货量低于2000元，取消月结权限。 SR10 1. 系统设置货物重量体积比区间值（该值由基础资料配置），
 *          在运单提交时，系统自动对重量体积比进行校验：即重量体积比X=重量/体积；
 *          当X不在设置的区间中，弹出提示“请确认录入的重量体积是否准确！”； （该弹窗有两个按钮：确定、取消）点击确定时，弹出确认运单信息界面；
 *          点击取消，点返回运单录入界面；当X在区间中，无提示； 直接进入确认运单信息界面； SR11 1）用户可以随时录入运单信息随时暂存运单，
 *          但必须录入打印标签所需的关键字段才可暂存运单。 目前暂存运单打印标签所需运单信息包含收货部门、
 *          运单号、目的站、提货网点、运输性质、提货方式、包装、件数。 （注：当走货路由经过特定的城市时还需要录入货物类型）
 *          2）系统对录入的运单信息合法性进行校验； 3）运单暂存后不生成正式运单信息、库存信息及财务单据；
 *          4）用户可对已暂存的运单进行修改、暂存、提交（生成正式运单）； 5）若暂存运单，系统锁定运单号及订单信息；
 *          6）暂存的运单不可打印运单出发联； SR12 若PDA开单已打印标签， 在提交运单后弹出的确认界面中打印标签默认不勾选，
 *          若需打印标签则手动勾选"打印标签"复选框。 SR13 1）、如果开单组织是营业部门， 那么开单提交时，
 *          检验是否是驻地部门，如果是驻地部门， 入库对应驻地部门外场， 如果是营业部，入库对应营业部 2）、如果开单组织是开单组，那么开单提交时，
 *          校验是否已经打印标签，如果没有，入库配载部门；
 * 
 * 
 *          录入运输信息（整车）SUC业务规则 营业员点击整车运单开单，进入整车运单开单界面。 本界面为录入整车运输信息。
 *          界面信息包括：收货部门、单号、目的站、提货网点、 对外备注、对内备注、储运注意事项、配载部门、 最终配载部门、到达类型 1.
 *          收货部门：揽货部门； 2. 单号：运单单号； 3. 提货网点：收货客户可以领取货物的部门； 4.
 *          对外备注：客户可以看到的备注信息，包括：空、 保丢不保损、“不承保发霉、变质、虫蛀虫咬之损失”、 “
 *          不承保刮花、变形、撞凹之损失”、不可重压、易潮、 不可倒置、客户指定提货网点； 5. 对内备注：仅限公司内部人员看到的备注信息； 6.
 *          到达类型：到达客户处还是到达营业部 7. 储运注意事项：对外备注和对内备注信息的叠加； 8. 配载部门:开单收货部门出发货配载专线；
 *          1.6 操作步骤 序号 基本步骤 相关数据 补充步骤 1 录入收货部门 1. 规则-请参见系统规则SR1； 2 录入单号
 *          系统校验单号的合法性 1. 规则-请参见系统规则SR2； 3 录入提货网点 1. 规则-请参见系统规则SR3； 4 录入对外备注 1.
 *          规则-请参见系统规则SR4； 5 录入对内备注 6 到达类型 1. 规则-请参见系统规则SR5； 6 生成储运注意事项 1.
 *          规则-请参见系统规则SR6； 7 生成配载部门 1. 规则-请参见系统规则SR7； 8 生成最终配载部门 1.
 *          规则-请参见系统规则SR8； 1.7 业务规则 序号 描述 SR1 1. 收货部门默认为操作者所在的部门，不可修改； SR2 1.
 *          单号最大长度为8位，如果超过提示“单号大于8位” 2. 单号不能少于8位，“如果少于8位“单号长度少于7位” 3.
 *          单号与最近开单单号前六位如果不等，那么提示“前后两票单号相差过大， 请检查所输单号是否为本部门所属单号！” SR3 1.
 *          提货网点可由收货客户地址的城市生成，也可手工选择； 2. 系统自动过滤只显示符合录入文本条件的网点信息； SR4 参考SUC-496
 *          录入运输信息 对对外备注的处理 SR5 1. 如果在 “是否经过营业部”打勾，付款方式可以选择到付项， 代收货款框可以修改； 2.
 *          如果在“是否经过营业部”不打勾，付款方式中的到付项自动移除， 代收货款清0且不可修改； SR6 1.
 *          储运注意事项=对外备注&对内备注，各字段以“；”分开； 2. 对外备注永远在储运注意事项的最前面； SR7 1.
 *          通过出发部门和提货网点系统自动匹配始发配载部门基础资料；
 * 
 * 
 *          录入收货客户信息（整车）SUC业务规则 营业员点击运单开单，进入运单开单界面。 本界面分为两个界面：录入收货客户信息、选择收货客户。
 *          1. 录入收货客户信息： 界面为信息录入界面：包括：手机、电话、发货收货联系人（发货收货部门）、 发货收货人地址； 1.1
 *          手机：发货收货人手机号码； 1.2 电话：发货收货人电话号码； 1.3 收货联系人（收货部门）：收货客户的客户姓名，
 *          当“运单开单”中的“开单提货方式”为“内部带货自提”时， “收货联系人”字段更改为“收货部门”； 1.4
 *          收货人地址：收货客户的详细联系地址， 支持国家行政区域自动过滤； 1.5 客户名称 1.6 客户编码 2. 选择收货客户界面：
 *          界面为选择客户信息界面：包括两部分： 客户信息列表区域、功能按钮区域； 2.1. 客户信息列表区域：
 *          包括：联系人、手机、电话、地址（规范化地址和详细地址）； 2.2. 功能按钮区域： 包括：确定、取消； 3. 选择热门城市界面
 *          界面信息包含人热门城市 4. 选择省份界面 界面信息包含省份 5. 选择城市界面 界面信息保护城市 6. 选择区县界面 界面信息保护区县
 *          1.6 操作步骤 1.6.1 录入 序号 基本步骤 相关数据 补充步骤 1 录入手机号码 1.
 *          系统自动查询CRM系统中对应手机号码绑定的客户信息， 如果有弹窗，弹窗操作见扩展1a，
 *          如果没有，弹出FOSS历史开单记录中对应手机号码绑定的客户信息， 并弹窗，弹窗操作见扩展1b； 2.
 *          规则-请参见SUC-493-录入收货客户信息SR1、SR5、SR6； 2 录入电话号码 1. 如果手机号码没有填写，
 *          系统自动查询CRM系统中对应电话号码绑定的客户信息， 如果有弹窗，弹窗操作见扩展2a，
 *          如果没有，弹出FOSS历史开单记录中对应手机号码绑定的客户信息， 并弹窗，弹窗操作见扩展2b； 2.
 *          1、规则-请参见SUC-493-录入收货客户信息SR1、SR5 、SR6； 3 录入收货联系人 1. 4 录入收货人地址 1.
 *          提供下拉框选择输入， 系统自动过滤输入的行政区下一级行政级的字段； 2. 地址在系统后台通过GIS系统进行匹配，
 *          如果是禁行区域，地址颜色为红色，如果是进仓区域，地址颜色为黄色 3. 规则-请参见系统规则SR4； 1.6.2 扩展 序号 扩展事件
 *          相关数据 备注 1a 当录入的手机号码在CRM系统中有手机号码绑定的客户信息， 则自动弹窗并显示手机号码为录入的手机号的所有客户信息，
 *          营业员选择录入一条记录，并确定；选择的客户信息自动带入收货客户信息中； 客户信息 1.
 *          规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则； 2. 规则-请参见SUC-493-录入收货客户信息SR5
 *          、SR6； 1b 当录入的手机号码在CRM系统中没有手机号码绑定的客户信息时， 如果该客户在这3个月有发过货，则弹出历史收货记录，
 *          营业员选择录入一条记录，并确定；选择的客户信息自动带入收货客户信息中； 客户信息 1.
 *          规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则； 2. 规则-请参见SUC-493-录入收货客户信息SR5
 *          、SR6；
 * 
 *          2a 当录入的电话号码在CRM系统中有电话号码绑定的客户信息， 则自动弹窗并显示电话号码为录入的电话号码的所有客户信息，
 *          营业员选择录入一条记录，并确定；选择的客户信息自动带入收货客户信息中； 客户信息 1.
 *          规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则； 2. 规则-请参见SUC-493-录入收货客户信息SR5
 *          、SR6； 3. 2b 当录入的电话号码在CRM系统中没有电话号码绑定的客户信息时， 如果该客户在这3个月有发过货，则弹出历史收货记录，
 *          营业员选择录入一条记录，并确定；选择的客户信息自动带入收货客户信息中； 客户信息 1.
 *          规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则； 2. 规则-请参见SUC-493-录入收货客户信息SR5
 *          、SR6； 4. 1.6.1 录入 序号 基本步骤 相关数据 补充步骤 1 录入手机号码 1.
 *          系统自动查询CRM系统中对应手机号码绑定的客户信息和 FOSS历史开单记录中对应手机号码绑定的客户信息，并弹窗， 弹窗操作见扩展1b；
 *          2. 规则-请参见系统规则SR1； 2 录入电话号码 1.
 *          系统自动查询CRM系统中对应电话号码绑定的客户信息和FOSS历史开单记录中对应手机号码绑定的客户信息， 并弹窗，弹窗操作参见扩展2a；
 *          2. 规则-请参见系统规则SR1； 3 录入客户名称 1. 规则-请参见系统规则SR2 4 录入收货联系人 5 录入收货人地址 1.
 *          提供下拉框选择输入， 系统自动过滤输入的行政区下一级行政级的字段； 2. 地址在系统后台通过GIS系统进行匹配，
 *          如果是禁行区域，地址颜色为红色， 如果是进仓区域，地址颜色为黄色; 3. 规则-请参见系统规则SR3； 1.6.2 扩展 序号 扩展事件
 *          相关数据 备注 1a 当光标焦点移至录入手机号码时， 系统自动调用CRM系统对应发货客户的历史发货记录，
 *          并自动弹窗显示所有该发货客户的历史发货记录； 营业员选择一条记录，并确定，选择的客户信息自动带信收货客户信息中； 客户信息 1.
 *          规则-请参见系统规则SR4； 1b 当录入的手机号码在CRM系统中有手机号码绑定的客户信息，
 *          则自动弹窗并显示手机号码为录入的手机号的所有客户信息， 营业员选择录入一条记录，并确定； 选择的客户信息自动带入收货客户信息中；
 *          客户信息 1. 规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则； 2a
 *          当录入的电话号码在CRM系统中有电话号码绑定的客户信息， 则自动弹窗并显示电话号码为录入的电话号码的所有客户信息，
 *          营业员选择录入一条记录，并确定；选择的客户信息自动带入收货客户信息中； 客户信息 1.
 *          规则-请参见系统用例SUC-492中的“1.6.2扩展2a”的规则； 1.7 业务规则 序号 描述 SR1 1.
 *          收货客户手机号码及固定电话至少提供一个， 手机号码只能为数字并且为11位，固定电话号码只能为数字， 且可添加多个； SR2 1.
 *          若收货客户为公司会员客户， 则录入收货客户信息后系统界面显示该收货客户联系人编码； SR3 1. 客户详细地址必填至乡/镇，
 *          且乡镇下一级内容不能为空； SR4 1. 只有当收货人手机为空， 且发货客户信息已录入时，才会检索并弹窗显示； 2.
 *          若未查询到历史记录，则无法提示； 3. 通过选择录入的收货人信息均可修改； 1.
 * 
 *          录入货物信息（整车）SUC业务规则
 * 
 *          营业员点击运单开单，进入运单开单界面。 本界面为录入货物信息。 界面主要分为一个部分：录入货物信息。 1. 录入货物信息：
 *          录入信息包括：货物名称、总件数、总重量、货物尺寸、总体积、货物包装 1.1 货物名称：货物的名称； 1.2 总件数：收货时货物的总件数；
 *          1.3 总重量：收货时货物的总重量； 1.4 总体积：收货时货物的总体积； 1.5 货物包装：货物的包装数； 1.6 操作步骤
 *          1.6.1 录入货物信息 序号 基本步骤 相关数据 补充步骤 1 修改货物名称 1. 系统自动匹配违禁品，生成规则； 2.
 *          规则-请参见系统规则SR1； 1.7 业务规则 序号 描述 SR1 1. 若货物为违禁品，则系统自动提示“货物为违禁品， 不可开单！”；
 *          2. 违禁品、拒收品、具体类型可在系统中进行配置； SR2 新增一条业务规则：在提交运单之前，
 *          若相邻两次输入的单号（两次单号分别为A与B且单号输入合法）差别较大时，
 *          系统给予用户友好提示避免录错单号，但不限制单号的输入。具体规则为：
 *          1）若前后两次输入的单号位数相同，当|A-B|≥100时系统给予提示； 2）若前后两次输入的单号位数不同，系统给予提示；
 *          3）提示信息为：前后两票单号相差过大， 请检查所输单号是否是本部门所属单号！
 * 
 * 
 *          营业员点击运单开单，进入运单开单界面。 本用例分为两个界面：录入发货客户信息、 选择发货客户； 1. 录入发货客户信息：
 *          界面为信息录入界面：包括：手机、电话、客户名称、 客户编码、发货联系人（发货部门）、发货人地址； 1.1 手机：发货人手机号码； 1.2
 *          电话：发货人电话号码； 1.3 客户名称：发货客户公司或单位名称， 可支持搜索查询； 1.4 客户编码：我司给客户的客户号； 1.5
 *          发货联系人（发货部门）：发货客户的客户姓名， 当“运单开单”中的“开单提货方式”为“内部带货自提”时，
 *          “发货联系人”字段更改为“发货部门”； 1.6 发货人地址：发货客户的详细联系地址， 支持国家行政区域自动过滤； 2.
 *          选择发货客户界面： 界面为选择客户信息界面：包括两部分： 客户信息列表区域、功能按钮区域； 2.1. 客户信息列表区域：
 *          包括：客户编码、客户名称、联系人、手机、 电话、地址(规范化地址和详细地址)； 2.2. 功能按钮区域： 包括：确定、取消； 3.
 *          选择热门城市界面 界面信息包含人热门城市 4. 选择省份界面 界面信息包含省份 5. 选择城市界面 界面信息保护城市 6. 选择区县界面
 *          界面信息保护区县 1.6 操作步骤 1.6.1 录入 序号 基本步骤 相关数据 补充步骤 1 录入手机号码 1.
 *          系统自动查询CRM系统中对应手机号码绑定的客户信息， 如果有弹窗，弹窗操作见扩展1a，
 *          如果没有，弹出FOSS历史开单记录中对应手机号码绑定的客户信息， 并弹窗，弹窗操作见扩展1b； 2.
 *          规则-请参见系统规则SUC-492-录入发货客户信息SR1； 2 录入电话号码 2.
 *          如果手机号码没有填写，系统自动查询CRM系统中对应电话号码绑定的客户信息， 如果有弹窗，弹窗操作见扩展2a，
 *          如果没有，弹出FOSS历史开单记录中对应手机号码绑定的客户信息， 并弹窗，弹窗操作见扩展2b； 3.
 *          规则-请参见系统规则SUC-492-录入发货客户信息SR1； 3 录入客户名称和客户编码 1.
 *          规则-请参见系统规则SUC-492-录入发货客户信息SR2、SR3； 4 录入发货联系人 5 录入发货人地址 1. 提供下拉框选择输入，
 *          系统自动过滤输入的行政区下一级行政级的字段； 2. 规则-请参见系统规则SUC-492-录入发货客户信息SR6； 1.6.2 扩展 序号
 *          扩展事件 相关数据 备注 1a 当录入的手机号码在CRM系统中有手机号码绑定的客户信息，
 *          则自动弹窗并显示手机号码为录入的手机号的所有客户信息， 营业员选择录入一条记录，并确定；选择的客户信息自动带入发货客户信息中； 客户信息
 *          1. 规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则； 2.
 *          规则-请参见系统规则SUC-492-录入发货客户信息SR5 、SR6、SR7； 1b
 *          当录入的手机号码在CRM系统中没有手机号码绑定的客户信息时， 如果该客户在这3个月有发过货，则弹出历史发货记录，营业员选择录入一条记录，
 *          并确定；选择的客户信息自动带入发货客户信息中； 客户信息 3. 规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则；
 *          4. 规则-请参见系统规则SUC-492-录入发货客户信息SR5 、SR6、SR7； 2a
 *          当录入的电话号码在CRM系统中有电话号码绑定的客户信息， 则自动弹窗并显示电话号码为录入的电话号码的所有客户信息，
 *          营业员选择录入一条记录，并确定；选择的客户信息自动带入发货客户信息中； 客户信息 1.
 *          规则-请参见系统用例SUC-492中的“1.6.2扩展2a”的规则； 2.
 *          规则-请参见系统规则SUC-492-录入发货客户信息SR5、SR6、SR7； 2b
 *          当录入的电话号码在CRM系统中没有电话号码绑定的客户信息时， 如果该客户在这3个月有发过货，则弹出历史发货记录，营业员选择录入一条记录，
 *          并确定；选择的客户信息自动带入发货客户信息中； 客户信息 1. 规则-请参见系统用例SUC-492中的“1.6.2扩展2a”的规则；
 *          2. 规则-请参见系统规则SUC-492-录入发货客户信息SR5、SR6、SR7； 1 录入手机号码 1.
 *          系统自动查询CRM系统中对应手机号码绑定的客户信息和 FOSS历史开单记录中对应手机号码绑定的客户信息，并弹窗，弹窗操作见扩展1a；
 *          1. 规则-请参见系统规则SR1； 2 录入电话号码 1. 系统自动查询CRM系统中对应电话号码绑定的客户信息
 *          和FOSS历史开单记录中对应手机号码绑定的客户信息，并弹窗，弹窗操作参见扩展2a； 1. 规则-请参见系统规则SR1； 3
 *          录入客户名称和客户编码 1. 规则-请参见系统规则SR2、SR3； 4 录入发货联系人 5 录入发货人地址 1. 提供下拉框选择输入，
 *          系统自动过滤输入的行政区下一级行政级的字段； 2. 规则-请参见系统规则SR4； 1.6.2 扩展 序号 扩展事件 相关数据 备注 1a
 *          当录入的手机号码在CRM系统中有手机号码绑定的客户信息， 则自动弹窗并显示手机号码为录入的手机号的所有客户信息，
 *          营业员选择录入一条记录，并确定；选择的客户信息自动带入发货客户信息中； 客户信息 1. 规则-请参见系统规则SR5； 2a
 *          当录入的电话号码在CRM系统中有电话号码绑定的客户信息， 则自动弹窗并显示电话号码为录入的电话号码的所有客户信息，
 *          营业员选择录入一条记录，并确定；选择的客户信息自动带入发货客户信息中； 客户信息 1. 规则-请参见系统规则SR6； 1.7 业务规则
 *          序号 描述 SR1 1.规则参考SUC-492-录入发货客户信息SR1 SR2 1. 规则参考SUC-492-录入发货客户信息SR2
 *          SR3 1.规则参考SUC-492-录入发货客户信息SR3 SR4 1. 规则参考SUC-492-录入发货客户信息SR6 SR5 1.
 *          规则参考SUC-492-录入发货客户信息SR7 SR6 1. 规则参考SUC-492-录入发货客户信息SR8
 * 
 * 
 *          确认整车总价SUC业务规则
 * 
 *          营业员点击整车开单，进入整车开单界面。 本界面为录入整车收银界面。 1. 约车报价：营业员约整车后，请车员受理的价格； 2.
 *          开单报价：营业员根据请车员的受理价格，给客户的实际运费价格； 3. 增值服务费用 4. 总运费：本次承运的客户应付金额； 5.
 *          开单付款方式：客户的付款方式，包括：现金、银行卡、月结、临时欠款、到付； 6. 预付金额 7. 到付金额； 1.6 操作步骤 序号
 *          基本步骤 相关数据 补充步骤 1 录入开单报价 1. 规则-请参见系统规则SR1； 2 查看约车报价、增值服务费用入总运费 1.
 *          规则-请参见系统规则SR2、SR3； 3 选择开单付款方式 1. 规则-请参见系统规则SR4、SR5； 4 预付金额 1.
 *          规则-请参见系统规则SR4、SR5； 5 到付金额 1. 规则-请参见系统规则SR4、SR5； 1.7 业务规则 序号 描述 SR1
 *          1. 开单报价默认等于约车报价； 2. 修改的开单报价只能为约车报价的某个范围区间中，该范围区间可由公司统一配置； SR2 1.
 *          整车导入约车开单时，约车报价为请车员受理的约车价格，不可修改； SR3 1. 总运费=开单报价+增值服务费； 2.
 *          增值服务费=保价费+代收手续费+预付运费保密服务费+返单费+包装费； SR4 1.
 *          整车的付款方式包含现金、银行卡、月结、临时欠款、到付； 2. 支持发货客户的多种付款方式叠加，但月结和临时欠款不能同时存在； 2.
 *          开单只能选择一种付款方式，不可选择两种或以上； 3. 月结客户可以开月结； 4. 若客户非月结，则自运过滤月结的付款方式； 5.
 *          付款方式为到付或者临时欠款时，不能选择预付运费保密； 6. 若整车开单选择直接到达客户处，则不能办理到付； 7.
 *          有信用额度且额度大于等于总运费的发货客户，才可以选择临时欠款； SR5 1. 预付金额必须大于0才能选择预付运费保密； 2.
 *          当付款方式为现付时，预付金额必须大于0；否则， 提示信息“付款方式非到付，预付金额不能小于等于0”； 3.
 *          当付款方式为到付时，预付金额不能大于0；否则， 提示信息“付款方式为【到付】，预付金额不能大于0”； 4.
 *          月结客户的信用金额直接限制该客户的当月发货金额， 当月发货金额超过信用额度，当月将无法再开单月结，
 *          提示“该客户的剩余可用信息额度不足，不能开月结”； 5. 临时欠款时，需要客户中的信用额度超过运费，
 *          否则，提示“该客户的剩余可用信息额度不足，不能开临时欠款”； 6. 当付款方式为临时欠款等收款放货时， 现付到付均为零，不可修改；
 *          SR6 1. 约车报价、开单报价、增值服务费用、总运费、预付金额、 到付金额均为整数，按照四舍五入原则；
 * 
 * 
 *          导入整车约车编号SUC业务规则
 * 
 *          营业员通过 界面标题： 约车信息 约车编号：受理后的约车编码 1. 录入发货客户信息： 界面为信息录入界面：包括：手机、电话、客户名称、
 *          客户编码、发货联系人、发货人地址； 1.1 手机：发货人手机号码； 1.2 电话：发货人电话号码； 1.3
 *          客户名称：发货客户公司或单位名称，可支持搜索查询； 1.4 客户编码：我司给客户的客户号； 1.5 发货联系人：发货客户的客户姓名；
 *          2. 录入收货客户信息： 界面为信息录入界面：包括：手机、电话、发货联系人、发货人地址； 1.6 手机：发货人手机号码； 1.7
 *          电话：发货人电话号码； 1.8 收货联系人：收货客户的客户姓名 1.9 收货人地址：收货客户的详细联系地址，支持国家行政区域自动过滤；
 *          3. 录入货物信息： 录入信息包括：货物名称、总件数、总重量、货物尺寸、总体积、货物包装 1.1 货物名称：货物的名称； 1.2
 *          总件数：收货时货物的总件数； 1.3 总重量：收货时货物的总重量； 1.4 总体积：收货时货物的总体积； 1.5
 *          货物包装：货物的包装数； 4.界面标题：计费付款 录入信息包括：约车报价、总运费、增值服务费、 开单付款方式、预付金额、到付金额 1.1
 *          约车报价：整车约车费用 1.2 总运费：运费总合 1.3 增值服务费：增值服务费总合 1.4 开单付款方式：开发付款的方式 1.5
 *          预付金额：现付金额 1.6 到付金额：到付金额 1.6 操作步骤 1.6.1 导入整车约车编号 序号 基本步骤 相关数据 补充步骤 1
 *          用户输入约车编号 2 用户点击“确定”按钮 约车信息 系统自动带出相应的约车信息， 约车编号不可编辑，规则参考SR1
 *          扩展事件写非典型或异常操作过程 序号 扩展事件 相关数据 备注 1.7 业务规则 序号 描述 SR1
 *          1、校验是否有此约车编号，如果没有，提示无此约车编号， 如果有，但是没有受理，提示“约车编号未受理”，如果受理拒绝，
 *          提示“约车失败”并提示失败原因，如果单号已经导入过，不能重复导入， 提示“约车编号已经导入过”，如果不是本部门的整车约车编号，
 *          录入后提示“不能导入其他部门整车约车编号” 2、根据约车信息填充界面，请车费用填充进约车报价中。
 * 
 * 
 * 
 *          运单提交（离线）SUC业务规则
 * 
 *          1.1 相关业务用例 BUC_FOSS_5.20.30_550 营业部离线开单 1.2 用例描述 营业员通过本用例录入提交。 1.3
 *          用例条件 条件类型 描述 引用系统用例 前置条件 1. 运单在线登录成功 2. 运单已填写完整 SUC-441录入收货客户信息(离线)
 *          SUC-442录入发货客户信息(离线) SUC-443录入货物信息(离线) SUC-444录入增值服务信息(离线)
 *          SUC-445录入运输信息(离线) SUC-412运单收银(离线) SUC-372暂存存运单(离线) SUC-362在线登录 后置条件
 *          1. 传送运单号、金额、帐号等结算数据到财务子系统 2. 传送货物名称、件数、重量等货物信息到中转子系统，安排运输计划 3.
 *          传送运单号等信息到官网，客户查询运单状态 4. 给收货人发送出发短信，给上门接货客户发送短信 5.
 *          订单信息反馈给CRM系统，订单处理结果为：离线已开单。 6、 当运输性质为精准空运时，
 *          提交成功后会自动生成订舱信息流到最终配载部门（即总调）的舱位信息中 1.4 操作用户角色 操作用户 描述 营业员
 *          通过运单开单界面，提交离线运单信息 1.5 界面要求 1.5.1 表现方式 Web方式 1.5.2 界面原型 1.5.2.1
 *          运单离线开单界面 1.5.2.2 运单确认提交界面 1.5.3 界面描述 1.5.3.1 运单开单界面 界面共包括7个部分：
 *          1、发货客户信息； 2、收货客户信息； 3、货物信息； 4、运输信息； 5、增值服务信息； 6、计费付款； 7、功能按钮。
 *          具体描述参考DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入发货客户信息-V0.1.doc
 *          DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入货物信息-V0.2.doc
 *          DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入收货客户信息-V0.1.doc
 *          DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入运输信息-V0.1.doc
 *          DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息-V0.1.doc 运单确认提交界面 界面共包括3个部分：
 *          1、离线运单基本信息； 2、在线基本信息 3、功能复选框； 4、功能按钮 1、 运单基本信息：单号、到付总运费、预付总运费、
 *          代收货款、保险价值、收货人名称、付款方式、 提货网点、提货方式、收货人地址、收货人电话、 货物名称、重量/体积/件数、包装 。 2、
 *          运单基本信息：单号、到付总运费、 预付总运费、代收货款、保险价值、收货人名称、 付款方式、提货网点、提货方式、收货人地址、
 *          收货人电话、货物名称、重量/体积/件数、包装 3、功能复选框：打印运单（选择之后，点击确定系统自动打印运单）、
 *          打印标签（选择之后，点击确定系统自动打印标签）、 下一条离线运单信息（选择后提交运单成功后填充下一条）。 4、功能按钮：确定、取消 。
 *          1.6 操作步骤 序号 基本步骤 相关数据 补充步骤 1 营业员在运单查询界面，查询出离线开单未提交的运单 2 点击“修改”
 *          收货客户信息、发货客户信息、货物信息、 增值服务信息、计费付款信息、运输信息、代打木架信息 进入开单界面 1、自动填充发货客户信息
 *          参考规则SR1、 SR2 2、自动填充发货收货客户信息 参考规则SR1 、SR2 3、自动填充货物信息 参考规则SR3，SR7
 *          4、自动填充运输信息 参考规则SR4，SR7 5、自动填充增值服务信息 参考规则SR5，SR7 6、自动填充计费付款信息
 *          参考规则SR6，SR7 填充完之后， 如果有代打木架，弹出代打木架信息录入界面 2 点击“提交”按钮提交运单。
 *          1、客户上门提供的货物承运信息。 2、上门接货客户提供的承运信息。 1.提交运单，根据系统规则SUC-439提交运单系统用例进行提交
 *          2. 调用中转接口，生成库存信息 3.系统自动弹出，运单确认提交界面 1.7 业务规则 序号 描述 SR1
 *          1.根据离线录入的发货客户信息， 使用发货联系人手机号码到远程服务器进行匹配客户信息， 如果没有，根据离线填写的发货客户信息，
 *          填充发货联系人手机号、发货联系人、发货人地址、发货人电话号码， 如果有，根据查询出来到客户信息，显示会员编码和客户名称，
 *          并根据离线填写的客户信息，填充发货联系人手机号、发货联系人、 发货人地址、发货人电话号码。填充时不需要进行联动和校验
 *          1.填充发货信息和发货信息时，根据发货客户手机到CRM进行查询， 无论查询出有多少条阻塞式弹出CRM查询框让用户进行选择，
 *          当发货客户手机为空时，根据电话号码到CRM进行查询， 无论查询出有多少条阻塞式弹出CRM查询框让用户进行选择，
 *          当用户选择时进行填充，如果客户选择取消时，不填充 2.如果修改，修改规则参考系统用例SUC-492录入发货客户信息 SR2
 *          11.如果修改，修改规则参考系统用例SUC-492录入发货客户信息和SUC-493录入收货客户信息 .根据离线录入的收货客户信息，
 *          使用收货联系人手机号码到远程服务器进行匹配客户信息， 如果没有，根据离线填写的收货客户信息，
 *          填充发货联系人手机号、发货联系人、发货人地址、发货人电话号码， 如果有，根据查询出来到客户信息，显示会员编码和客户名称，
 *          并根据离线填写的收货客户信息，填充发货联系人手机号、发货联系人、 发货人地址、发货人电话号码。填充时不需要进行联动和校验
 *          2.如果修改，修改规则参考系统用例SUC-493录入收货客户信息 SR3 1、 把货物信息填充到界面中，在填充过程中，
 *          不需要进行联动和校验 2、1、 如果修改、修改规则参考系统用例SUC-494 录入货物信息 SR4
 *          1、把运输信息到界面中，在填充过程中， 不需要进行联动和校验 2、如果修改，修改规则参考系统用例SUC-496录入运输信息 SR5
 *          1、把增值服务信息填充到界面中，在填充过程中，不需要进行联动和校验 21、如果修改，修改规则参考系统用例SUC-494录入增值服务信息
 *          SR6 1.如果发货客户有优惠协议，那么根据SUC-486-运单收银系统用例规则进行重新计价
 *          21.如果修改，修改规则参考系统用例SUC-408 运单收银 SR7 1、在填充过程中涉及到需要用基础资料、产品价格和客户资质的校验、
 *          计算、联动，都用最新信息进行校验、计算、联动， 如果离线保存时已经有计算或联动的值，需要进行覆盖， 需要最新计算和联动的值。
 * 
 *          运单收银（离线）SUC业务规则
 * 
 *          1.1 相关业务用例 BUC_FOSS_5.20.30_550 (营业部离线开单) 1.2 用例描述
 *          当网络故障或服务器原因导致营业部不能正常开单时，客户上门发货为汽运或空运，营业员确认承运信息之后，通过离线系统计算货物总付款金额。
 *          1.3 用例条件 条件类型 描述 引用系统用例 前置条件 1. 确认承运信息已录入完毕； 后置条件 1. 录入收入； 1.4
 *          操作用户角色 操作用户 描述 营业员 可查询、确认发货/收货客户应付款金额，及客户的付款方式 开单员
 *          可查询、确认发货/收货客户应付款金额，及客户的付款方式 1.5 界面要求 1.5.1 表现方式 Web页面 1.5.2 界面原型
 *          1.5.3 界面描述 营业员点击离线运单开单，进入离线运单开单界面。 本界面标题：计费付款。 1.
 *          计费类型：包括重量计费、体积计费，默认显示重量计费； 2. 计费费率， 3. 公布价运费 4. 增值服务费用 5. 总运费 6.
 *          开单付款方式：包括现金、到付； 7. 预付金额； 8. 到付金额； 9. 计费重量。 1.6 操作步骤 1.6.1 运单收银 序号
 *          基本步骤 相关数据 补充步骤 1 查看计费类型和计费费率 1. 规则-请参见系统规则SR1、SR2； 2
 *          查看公布价运费和增值服务费及总运费 1. 规则-请参见系统规则SR3； 3 录入付款方式 1. 规则-请参见系统规则SR4； 4
 *          确认和录入预付金额和到付金额 1. 规则-请参见系统规则SR5； 5 查看计费类型和计费费率 1. 规则-请参见系统规则SR1、SR2；
 *          扩展事件写非典型或异常操作过程 序号 扩展事件 相关数据 备注 5a 5b 1.7 业务规则 序号 描述 SR1 1.
 *          计费类型分为重量计费、体积计费， 由系统自动生成，不可修改； 默认重量计费； 2.
 *          对于一票货物系统分别按重量和体积分别计费并取大优先的原则计费； 若按重量计费运费较按体积计费运费较高，
 *          则计费类型为重量计费；若按体积计费运费较按重量计费运费较高， 则计费类型为体积计费； 3. 运输类型为汽运时,计费重量为空，不可修改；
 *          2.4. 运输类型为空运时计费重量应为重量和体积*1000000/6000进行对比，取大； SR2 1.
 *          费率为对应计费类型、目的站、提货网点及运输类型的走货单价； 2. 目的站、提货网点及运输类型确认后，
 *          即可自动显示对应计费类型的费率；（来自本地价格基础资料） 3. 费率可以保留到小数点后2位；运费、预付金额、到付金额为整数，
 *          按照四舍五入的原则； SR3 1. 公布价运费（即重量、体积计费的运费）=每公斤单价/每方价格与货物实际重量/体积的乘积，
 *          对于一票货物系统分别按重量和体积分别计费并取大优先的原则计费； （来自价格基础资料，下载并且使用当前启用的最新的价格版本，
 *          参考SUC-547下载基础资料PC-SR1） 2. 增值服务费=送货费+包装费+保价费+代收手续费+其他费用和； 3.
 *          总运费费用=公布价运费+增值服务费+装卸费 =预付金额+到付金额； 3.4. 公布价运费=纯运费+装卸费 SR4 1.
 *          付款方式只有：到付，现付 SR5 1. 当付款方式为现付时，预付金额必须大于0；否则， 提示信息“付款方式为现付，预付金额必须大于0”；
 *          2. 当付款方式为到付时，到付金额必须大于0；否则， 提示信息“付款方式为【到付】，到付金额必须大于0”； 3.
 *          发货人和收货人都付款，付款方式为现付; 发货人跟收货人都付款，付款方式选择到付。 4.3. 支持发货人、收货人付款方式的组合，
 *          例如付款方式为到付500：那么预付金额可以未300， 到付金额为200，总和等于500 ，那么预付300，
 *          可以选择现金100元，临时欠款100，银行卡刷卡100元。 SR6 参考suc-403生成运单SR1: 系统自动检测，
 *          如果客户端X天还没有更新，不能打开离线运单界面， 并提示“请在间隔X天内，在线登录系统
 * 
 * 
 *          确认公布总价（离线）SUC业务规则 1.1 相关业务用例 BUC_FOSS_5.20.30_550 (营业部离线开单) 1.2 用例描述
 *          当网络故障或服务器原因导致营业部不能正常开单时， 客户上门发货为汽运或空运，营业员确认承运信息之后，
 *          通过离线系统计算出本地公布价与计费重量或计费体积乘积的运费。 1.3 用例条件 条件类型 描述 引用系统用例 前置条件
 *          离线系统已经更新最新且已启用的价格版本 参考规则SR4 后置条件 离线开单保存 1.4 操作用户角色 操作用户 描述 营业员
 *          营业员录入货物承运信息等。 开单员 开单员录入货物承运信息等。 1.5 界面要求 1.5.1 表现方式 Web页面 1.5.2 界面原型
 *          无 1.5.3 界面描述 无 1.6 操作步骤 1.6.1 计算公布总价 序号 基本步骤 相关数据 补充步骤 1 登陆离线系统 2
 *          打开“离线开单”界面。 3 录入发货人信息 参考SUC-442 4 录入收货客户信息 参考SUC-441 5 录入货物信息
 *          参考SUC-443 6 录入运输信息 参考SUC-445 进行前面5操作之后，若是空运，
 *          系统读取本地下载的空运公布价价格方案计算出公布总价， 显示在运单开单界面。
 *          若是汽运，系统读取本地下载的汽运公布价价格方案（计算出公布总价， 显示在运单开单界面。 参考规则SR1，SR2，SR3
 *          扩展事件写非典型或异常操作过程 序号 扩展事件 相关数据 备注 5a 1.7 业务规则 序号 描述 SR1
 *          1）汽运：上门发货汽运运费最低X元一票；（同城、卡航；可配置）； 上门接货汽运运费最低X元一票；（同城、卡航；可配置）；
 *          2）空运：空运运费最低X元一票；（可配置）； SR2 1）汽运：当货物为“接货”时，系统自动匹配生成公布价“接货价格方案”；
 *          当货物为“非接货”时，系统自动匹配生成公布价“非接货的价格方案”； 2）空运：系统自动匹配公布价 “空运价格方案”；
 *          空运价格只有上门发货一套价格方案， 如有接货费在其他费用里添加一项接货费。
 *          （来自价格基础资料，下载并且使用当前启用的最新的价格版本，参考SUC-547下载基础资料PC-SR1） SR3
 *          1）计费方式分为重量计费、体积计费；重量、 体积计费的运费=每公斤单价与货物实际重量的乘积 或 每方单价与货物实际体积的乘积，
 *          对于一票货物，系统按重量和体积分别计算并取大优先的原则计费给出公布价总运费, 计费方式即为取大的一方； SR4
 *          参考suc-403生成运单SR1: 系统自动检测，如果客户端X天还没有更新， 不能打开离线运单界面，并提示“请在间隔X天内，在线登录系统
 * 
 * 
 *          录入运输信息（离线）SUC业务规则 营业员点击运单开单，进入运单开单界面。 本界面标题：录入运输信息。
 *          界面信息包括：收货部门、单号、运输性质、配载类型、 提货方式、目的站、提货网点、上门接货、集中接货、对外备注、
 *          对内备注、储运注意事项、配载线路（配载航班）、配载部门、 最终配载部门、预计出发时间、预计派送/提货时间。 1. 收货部门：揽货部门；
 *          2. 单号：运单单号； 3. 运输性质：公司产品类型，包括精准空运、精准汽运（长途）、 精准卡航、精准城运、汽运偏线、精准汽运（短途）；
 *          4. 配载类型：公司走货方式，包括专线、偏线（外发）、合大票、单独开单； 5.
 *          提货方式：公司提供的送货方式，包括自提（不含机场提货费）、 免费自提、机场自提、送货上门、免费送货、自提、内部带货自提、送货进仓； 6.
 *          目的站：客户所发货物要到达的目的城市和区域； 7. 提货网点：收货客户可以领取货物的部门； 8.
 *          上门接货：我司提货的一种服务，司机上门接货，确认承运， 有区别于客户上门发货； 9.
 *          集中接货：是否为集中接送货区域，以集中接货的方式揽货， 是对上门接货的一个属性补充； 10.
 *          对外备注：客户可以看到的备注信息，包括：空、保丢不保损、 “不承保发霉、变质、虫蛀虫咬之损失”、“ 不承保刮花、变形、撞凹之损失”、
 *          不可重压、易潮、不可倒置、客户指定提货网点； 11. 对内备注：仅限公司内部人员看到的备注信息； 12.
 *          储运注意事项：对外备注和对内备注信息的叠加； 13. 配载线路（配载航班）:配载类型为偏线（外发）或专线时时，
 *          显示“配载线路”，为从出发部门到达开单目的站，我司走货的线路；
 *          配载类型为合大票或单独开单时，显示“配载航班”，为我司规则的空运走货的航班类型， 包括早班、中班、晚班； 14.
 *          配载部门:开单收货部门出发货配载专线； 15. 最终配载部门:货物到达的最终部门； 16. 预计出发时间:我司走货的预计出发时间，
 *          适用于运输类型为“精准卡航”及“精准城运”； 17. 预计派送/提货时间: 我司承诺客户的可提货或送货的时间，
 *          适用于运输类型为“精准卡航”及“精准城运”； 1.6 操作步骤 序号 基本步骤 相关数据 补充步骤 1 录入收货部门 1.
 *          规则-请参考SUC-496录入运输信息-系统规则SR1； 2 录入单号 1. 系统校验单号的合法性；单号唯一在离线提交时，判断，
 *          除单号唯一性其他参考规则SR1 3 录入运输性质 1. 规则-请参考SUC-496录入运输信息-系统规则SR2、SR3； 4
 *          录入配载类型 1. 规则-请参考SUC-496录入运输信息-系统规则SR3、SR4、SR5、SR6； 5 录入提货方式 1.
 *          规则-请参考SUC-496录入运输信息-系统规则SR4、SR6、SR7、SR8； 6 录入目的站 1.
 *          规则-请参考SUC-496录入运输信息-系统规则SR9； 7 录入提货网点 1.
 *          规则-请参考SUC-496录入运输信息-系统规则SR5、SR8、SR9、SR10； 8 勾选是否上门接货 1.
 *          规则-请参考SUC-496录入运输信息-系统规则SR11； 2. 勾选上门接货，必须输入司机工号，司机工号为6为数字。参考规则SR3 9
 *          勾选是否集中接货 1. 规则-请参考SUC-496录入运输信息-系统规则SR11、SR12； 10 录入对外备注 1.
 *          规则-请参考SUC-496录入运输信息-系统规则SR13、SR14； 11 录入对内备注 1. 参考规则SR2 12 生成储运注意事项
 *          1. 规则-请参考SUC-496录入运输信息-系统规则SR14； 13 录入配载线路（配载航班） 1.
 *          规则-请参考SUC-496录入运输信息-系统规则SR15； 2. 参考SUC-547下载基础资料(PC) 14 录入配载部门 1.
 *          规则-请参考SUC-496录入运输信息-系统规则SR16； 15 录入最终配载部门 1.
 *          规则-请参考SUC-496录入运输信息-系统规则SR17； 16 生成预计出发时间 1.
 *          规则-请参考SUC-496录入运输信息-系统规则SR18； 17 生成预计派送/提货时间 1.
 *          规则-请参考SUC-496录入运输信息-系统规则SR19； 1.7 业务规则 序号 描述 SR1 1、单号为8-9位数字，
 *          不能输入重复单号。 SR2 1、对内备注仅公司内部人员可见， 输入字符长度不得超过500。 SR3 1、当勾选上门接货时，
 *          司机工号必填，且为6位数字。 SR4 参考suc-403生成运单SR1: 系统自动检测，如果客户端X天还没有更新，
 *          不能打开离线运单界面，并提示“请在间隔X天内，在线登录系统
 * 
 * 
 *          录入收货客户信息（离线）SUC业务规则
 * 
 *          1.1 相关业务用例 BUC_FOSS_5.20.30_550 营业部离线开单 1.2 用例描述 营业员通过本用例录入收货客户信息。
 *          1.3 用例条件 条件类型 描述 引用系统用例 前置条件 1. 离线登录成功 后置条件 1.4 操作用户角色 操作用户 描述 营业员
 *          可查询、录入、修改收货客户信息 1.5 界面要求 1.5.1 表现方式 Web方式 1.5.2 界面原型 1.5.3 界面描述
 *          营业员点击运单开单，进入运单开单界面。 本界面为录入收货客户信息。 界面为信息录入界面包括：手机、电话、客户名称、
 *          客户编码、收货联系人（收货部门）、收货人地址； 1. 手机：收货人手机号码； 2. 电话：收货人电话号码，可以添加多个； 3.
 *          收货联系人：收货客户的客户姓名； 4. 收货人地址：收货客户的详细联系地址， 支持国家行政区域自动过滤； 1.6 操作步骤 序号
 *          基本步骤 相关数据 补充步骤 1 录入手机号码 1. 规则-请参见系统规则SR1； 2 录入电话号码 1. 规则-请参见系统规则SR1；
 *          3 录入收货联系人（收货部门） 规则-请参见系统规则SR3、SR4； 4 录入收货人地址 1. 规则-请参见系统规则SR2； 1.7
 *          业务规则 序号 描述 SR1 1. 收货客户手机号码及固定电话至少提供一个， 手机号码只能为数字并且为11位，固定电话号码只能为数字，
 *          且可添加多个；添加多个时，必须用“，”或“、”或“/”分开； 固定电话号码字段也可以录入手机号； SR2 1.
 *          客户详细地址必填至乡/镇， 且乡镇下一级内容不能为空； SR3 1. 当“运单开单”中的“开单提货方式”为“内部带货自提”时，
 *          “收货联系人”字段更改为“收货部门”； SR4 1.
 *          若为公司内部带货，则收货客户信息中的收货部门名称必须与OA系统中组织架构名称保持一致； SR5
 *          前提：收货人信息都已填充完毕，再进行手机号， 电话号码修改： ① 如在三月记录中，是否再次弹出框选择记录后覆盖原来的信息，
 *          不选择只修改手机号or电话号码，发货客户其他信息不置空 ② 如不在三月记录中，是否只修改手机号或电话，
 *          发货客户其他信息不置空------- 1、再次弹出框选择记录后覆盖原来的信息2、
 *          如果带出时是CRM客户，那么要删除客户编码和客户名称后才能够修改联系人信息，
 *          如果带出来不是，那么可以直接修改，那么修改电话号码和手机号，带出的信息都会覆盖
 * 
 * 
 *          录入发货客户信息（离线）SUC业务规则
 * 
 *          1.1 相关业务用例 BUC_FOSS_5.60.05_520 确认承运信息 1.2 用例描述
 *          营业员在网络不通时，通过本用例录入发货客户信息。 1.3 用例条件 条件类型 描述 引用系统用例 前置条件 离线登录成功； 后置条件
 *          1. 运单收银 2. 录入增值服务信息 1.4 操作用户角色 操作用户 描述 营业员 可查询、录入、修改发货客户信息 1.5 界面要求
 *          1.5.1 表现方式 Web方式 1.5.2 界面原型 1.5.3 界面描述 营业员点击运单开单，进入运单开单界面。
 *          本界面为录入发货客户信息。 界面为信息录入界面：包括：手机、电话、 发货联系人（发货部门）、发货人地址； 1. 手机：发货人手机号码；
 *          2. 电话：发货人电话号码，可以添加多个； 3. 发货联系人（发货部门）：发货客户的客户姓名，
 *          当“运单开单”中的“开单提货方式”为“内部带货自提”时， “发货联系人”字段更改为“发货部门”； 4.
 *          发货人地址：发货客户的详细联系地址， 支持国家行政区域自动过滤； 1.6 操作步骤 序号 基本步骤 相关数据 补充步骤 1 录入手机号码
 *          1. 规则-请参见系统规则SR1； 2 录入电话号码 1. 规则-请参见系统规则SR1； 3 录入发货联系人（发货部门） 1.
 *          规则-请参见系统规则SR2、SR3； 4 录入发货人地址 1. 提供下拉框选择输入，系统自动过滤输入的行政区下一级行政级的字段； 2.
 *          规则-请参见系统规则SR4； 1.7 业务规则 序号 描述 SR1 1. 发货客户手机号码及固定电话至少提供一个，
 *          手机号码只能为数字并且为11位，固定电话号码只能为数字， 且可添加多个,
 *          添加多个时，必须用“，”或“、”或“/”分开；固定电话号码字段也可以录入手机号； SR2 1.
 *          当“运单开单”中的“开单提货方式”为“内部带货自提”时， “发货联系人”字段更改为“发货部门”； SR3 1.
 *          若为公司内部带货，则发货客户信息中的发货部门名称必须与OA系统中组织架构名称保持一致； SR4 1.
 *          客户详细地址必填至乡/镇，且乡镇下一级内容不能为空； SR5 1．焦点到联系人文本框后，下个焦点直接跳过地址分段输入框，到下个控件
 * 
 *          管理出发运单SUC业务规则 管理营业部出发运单 1.1 相关业务用例 BUC_FOSS_5.60.05_510 补录运单
 *          BUC_FOSS_5.20.30_550 营业部离线开单 1.2 用例描述 营业员管理查询部门出发运单包括：
 *          PDA运单（待补录、已补录）、暂存、已开单， 对待补录、暂存的运单在FOSS系统进行补录,
 *          以及在营业部离线情况下可以查询本部门离线开单情况。 1.3 用例条件 条件类型 描述 引用系统用例 前置条件 1、PDA已开单
 *          2、FOSS已开单、暂存运单、已补录PDA运单 3、离线系统已保存及已提交运单。
 *          参考系统用例suc-439，SUC-467，suc-491，suc-441离线开单，suc-403生成运单（离线） 后置条件
 *          1、未补录PDA运单，营业员进行补录。 2、暂存的运单，营业重新修改提交。 3、导出离线运单记录。 参考系统用例suc-491补录运单
 *          参考suc-556 1.4 操作用户角色 操作用户 描述 营业员 营业员查询部门出发运单情况。 1.5 界面要求 1.5.1 表现方式
 *          WEB界面 1.5.2 界面原型 1.5.3 界面描述 界面标题：管理营业部出发运单。 界面共分为3个部分： 1、输入元素及查询条件；
 *          2、表格； 3、功能按钮。 4、功能复选框 1、输入元素及查询条件：运单号/订单号、运输性质、
 *          制单时间、FOSS提交时间、出发部门、运单状态、 制单部门、开单人、离线运单待提交。 2、表格：查询结果列表：操作列、运单状态、运单号、
 *          订单编号、制单时间、FOSS提交时间、收货部门、 出发城市、目的城市、运输性质、重量、体积、件数、
 *          付款方式、总运费、制单部门、开单人、货物类型。 3、功能按钮：查询、重置、导出（参考suc-556）、
 *          导入（参考SUC-568）、删除（参考SUC-751）、 提交（参考用例suc-559）、补录（参考suc-491）。
 *          4、复选框：全选、反选。 1.6 操作步骤 序号 基本步骤 相关数据 补充步骤 1 双击“管理营业部出发运单”菜单。
 *          PDA系统开单数据同步到FOSS系统。 进入到管理营业部出发运单界面。 2 输入查询条件 1、PDA系统开单数据。
 *          参考规则SR2-SR4 3 点击“查询” 查询之后，如需补录， 点击记录前“补录”按钮，补录运单参考用例suc-491。
 *          如需提交离线运单，点击记录前的“提交”按钮， 提交离线运单参考用例suc-559。 扩展事件写非典型或异常操作过程 序号 扩展事件
 *          相关数据 备注 3a 如输入的运单号/订单号错误或不存在， 弹出提示：运单号/订单号输入错误，请核实后重新输入。 3b
 *          若查询条件，查询不到结果，弹出提示： 请重新选择或输入查询条件。 1.7 状态图 1.8 业务规则 序号 描述 SR1
 *          打开界面，默认查询制单时间为昨天00:00:00到当天23:59:59，
 *          运输性质为全部，运单状态为“待补录”、“暂存”、“离线运单未提交”、 “已删除离线运单提交失败”的运单记录，按制单时间排序，
 *          制单时间越早的排在越前面，制单部门为当前登陆系统所在部门，不可编辑，呈灰色。 SR2 单号为8-9位的数字。 SR3
 *          制单时间、foss提交时间可以修改为一个星期的时间段。 SR4 运单号/订单号、制单时间、FOSS提交时间可作为单独条件查询；
 *          运单号/订单号优先级最高，具有排他性；其他条件可组合查询， 但是制单时间为必填项； SR5 可以点击表头进行升序或降序的排列。 SR6
 *          俩人或多人同时点击“补录”、 “提交”按钮， 以先导入运单补录或提交的为准，后导入运单补录或提交的进行提示：
 *          此单已导入且正在进行补录或提交，不能再进行导入。 SR7 选中某条记录，双击可以开打运单开单界面，
 *          将此单所有已填信息带入到开单界面，运单状态为“待补录”、 “暂存”的运单，待补录运单已开单信息不可修改，其他信息可以修改；
 *          暂存运单打开运单界面时，所有信息都可修改。运单状态为“已补录”、 “已开单”的运单，此时运单界面不可编辑；运单状态为“离线开单未提交”、
 *          “已删除离线开单提交失败”的运单，运单界面信息可修改。 SR8 重置按钮功能是将查询条件恢复到打开界面默认的状态或填写情况。 SR9
 *          勾选离线运单待提交时，运单状态下拉框为灰色， 可查询出运单状态为“离线开单未提交”、“已删除离线开单提交失败”的运单。 SR10
 *          勾选全选按钮，选中所有记录，勾选反选按钮取消已勾选的所有记录。 SR11 状态为离线开单提交失败的运单记录显示为淡红色。 SR12
 *          营业部只能查询到收货部门为本部门（即当前登陆营业部名称） 的所有出发运单，
 *          开单查询组可以查询到制单部门为本部门（即当前登陆开单查询组名称）的所有出发运单。
 *          开单查询组可以查询到所管辖收货部门为集中PDA开单的运单 SR13 运输性质包括：精准卡航，精准汽运（长），精准汽运（短），
 *          精准空运，汽运偏线，整车，精准城运 SR14 运单状态增加“全部” SR15 当前登录部门是营业部非开单组，那么收货部门，
 *          制单部门默认为当前登录部门不可修改； 当前登录部门是开单组，那么制单部门为当前登录部门不可修改，
 *          收货部门为空，收货部门为公共选择器，筛选为当前开单组所管辖部门
 *          ----------------------------------------------------------FLAG
 * 
 * 
 *          *录入收货客户信息（整车）SUC业务规则 营业员点击运单开单，进入运单开单界面。 本界面分为两个界面：录入收货客户信息、选择收货客户。
 *          1. 录入收货客户信息： 界面为信息录入界面：包括：手机、电话、发货收货联系人（发货收货部门）、 发货收货人地址； 1.1
 *          手机：发货收货人手机号码； 1.2 电话：发货收货人电话号码； 1.3 收货联系人（收货部门）：收货客户的客户姓名，
 *          当“运单开单”中的“开单提货方式”为“内部带货自提”时， “收货联系人”字段更改为“收货部门”； 1.4
 *          收货人地址：收货客户的详细联系地址， 支持国家行政区域自动过滤； 1.5 客户名称 1.6 客户编码 2. 选择收货客户界面：
 *          界面为选择客户信息界面：包括两部分： 客户信息列表区域、功能按钮区域； 2.1. 客户信息列表区域：
 *          包括：联系人、手机、电话、地址（规范化地址和详细地址）； 2.2. 功能按钮区域： 包括：确定、取消； 3. 选择热门城市界面
 *          界面信息包含人热门城市 4. 选择省份界面 界面信息包含省份 5. 选择城市界面 界面信息保护城市 6. 选择区县界面 界面信息保护区县
 *          1.6 操作步骤 1.6.1 录入 序号 基本步骤 相关数据 补充步骤 1 录入手机号码 1.
 *          系统自动查询CRM系统中对应手机号码绑定的客户信息， 如果有弹窗，弹窗操作见扩展1a，
 *          如果没有，弹出FOSS历史开单记录中对应手机号码绑定的客户信息， 并弹窗，弹窗操作见扩展1b； 2.
 *          规则-请参见SUC-493-录入收货客户信息SR1、SR5、SR6； 2 录入电话号码 1. 如果手机号码没有填写，
 *          系统自动查询CRM系统中对应电话号码绑定的客户信息， 如果有弹窗，弹窗操作见扩展2a，
 *          如果没有，弹出FOSS历史开单记录中对应手机号码绑定的客户信息， 并弹窗，弹窗操作见扩展2b； 2.
 *          1、规则-请参见SUC-493-录入收货客户信息SR1、SR5 、SR6； 3 录入收货联系人 1. 4 录入收货人地址 1.
 *          提供下拉框选择输入， 系统自动过滤输入的行政区下一级行政级的字段； 2. 地址在系统后台通过GIS系统进行匹配，
 *          如果是禁行区域，地址颜色为红色，如果是进仓区域，地址颜色为黄色 3. 规则-请参见系统规则SR4； 1.6.2 扩展 序号 扩展事件
 *          相关数据 备注 1a 当录入的手机号码在CRM系统中有手机号码绑定的客户信息， 则自动弹窗并显示手机号码为录入的手机号的所有客户信息，
 *          营业员选择录入一条记录，并确定；选择的客户信息自动带入收货客户信息中； 客户信息 1.
 *          规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则； 2. 规则-请参见SUC-493-录入收货客户信息SR5
 *          、SR6； 1b 当录入的手机号码在CRM系统中没有手机号码绑定的客户信息时， 如果该客户在这3个月有发过货，则弹出历史收货记录，
 *          营业员选择录入一条记录，并确定；选择的客户信息自动带入收货客户信息中； 客户信息 1.
 *          规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则； 2. 规则-请参见SUC-493-录入收货客户信息SR5
 *          、SR6；
 * 
 *          2a 当录入的电话号码在CRM系统中有电话号码绑定的客户信息， 则自动弹窗并显示电话号码为录入的电话号码的所有客户信息，
 *          营业员选择录入一条记录，并确定；选择的客户信息自动带入收货客户信息中； 客户信息 1.
 *          规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则； 2. 规则-请参见SUC-493-录入收货客户信息SR5
 *          、SR6； 3. 2b 当录入的电话号码在CRM系统中没有电话号码绑定的客户信息时， 如果该客户在这3个月有发过货，则弹出历史收货记录，
 *          营业员选择录入一条记录，并确定；选择的客户信息自动带入收货客户信息中； 客户信息 1.
 *          规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则； 2. 规则-请参见SUC-493-录入收货客户信息SR5
 *          、SR6； 4. 1.6.1 录入 序号 基本步骤 相关数据 补充步骤 1 录入手机号码 1.
 *          系统自动查询CRM系统中对应手机号码绑定的客户信息和 FOSS历史开单记录中对应手机号码绑定的客户信息，并弹窗， 弹窗操作见扩展1b；
 *          2. 规则-请参见系统规则SR1； 2 录入电话号码 1.
 *          系统自动查询CRM系统中对应电话号码绑定的客户信息和FOSS历史开单记录中对应手机号码绑定的客户信息， 并弹窗，弹窗操作参见扩展2a；
 *          2. 规则-请参见系统规则SR1； 3 录入客户名称 1. 规则-请参见系统规则SR2 4 录入收货联系人 5 录入收货人地址 1.
 *          提供下拉框选择输入， 系统自动过滤输入的行政区下一级行政级的字段； 2. 地址在系统后台通过GIS系统进行匹配，
 *          如果是禁行区域，地址颜色为红色， 如果是进仓区域，地址颜色为黄色; 3. 规则-请参见系统规则SR3； 1.6.2 扩展 序号 扩展事件
 *          相关数据 备注 1a 当光标焦点移至录入手机号码时， 系统自动调用CRM系统对应发货客户的历史发货记录，
 *          并自动弹窗显示所有该发货客户的历史发货记录； 营业员选择一条记录，并确定，选择的客户信息自动带信收货客户信息中； 客户信息 1.
 *          规则-请参见系统规则SR4； 1b 当录入的手机号码在CRM系统中有手机号码绑定的客户信息，
 *          则自动弹窗并显示手机号码为录入的手机号的所有客户信息， 营业员选择录入一条记录，并确定； 选择的客户信息自动带入收货客户信息中；
 *          客户信息 1. 规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则； 2a
 *          当录入的电话号码在CRM系统中有电话号码绑定的客户信息， 则自动弹窗并显示电话号码为录入的电话号码的所有客户信息，
 *          营业员选择录入一条记录，并确定；选择的客户信息自动带入收货客户信息中； 客户信息 1.
 *          规则-请参见系统用例SUC-492中的“1.6.2扩展2a”的规则； 1.7 业务规则 序号 描述 SR1 1.
 *          收货客户手机号码及固定电话至少提供一个， 手机号码只能为数字并且为11位，固定电话号码只能为数字， 且可添加多个； SR2 1.
 *          若收货客户为公司会员客户， 则录入收货客户信息后系统界面显示该收货客户联系人编码； SR3 1. 客户详细地址必填至乡/镇，
 *          且乡镇下一级内容不能为空； SR4 1. 只有当收货人手机为空， 且发货客户信息已录入时，才会检索并弹窗显示； 2.
 *          若未查询到历史记录，则无法提示； 3. 通过选择录入的收货人信息均可修改； 1.
 * 
 *          录入货物信息（整车）SUC业务规则
 * 
 *          营业员点击运单开单，进入运单开单界面。 本界面为录入货物信息。 界面主要分为一个部分：录入货物信息。 1. 录入货物信息：
 *          录入信息包括：货物名称、总件数、总重量、货物尺寸、总体积、货物包装 1.1 货物名称：货物的名称； 1.2 总件数：收货时货物的总件数；
 *          1.3 总重量：收货时货物的总重量； 1.4 总体积：收货时货物的总体积； 1.5 货物包装：货物的包装数； 1.6 操作步骤
 *          1.6.1 录入货物信息 序号 基本步骤 相关数据 补充步骤 1 修改货物名称 1. 系统自动匹配违禁品，生成规则； 2.
 *          规则-请参见系统规则SR1； 1.7 业务规则 序号 描述 SR1 1. 若货物为违禁品，则系统自动提示“货物为违禁品， 不可开单！”；
 *          2. 违禁品、拒收品、具体类型可在系统中进行配置； SR2 新增一条业务规则：在提交运单之前，
 *          若相邻两次输入的单号（两次单号分别为A与B且单号输入合法）差别较大时，
 *          系统给予用户友好提示避免录错单号，但不限制单号的输入。具体规则为：
 *          1）若前后两次输入的单号位数相同，当|A-B|≥100时系统给予提示； 2）若前后两次输入的单号位数不同，系统给予提示；
 *          3）提示信息为：前后两票单号相差过大， 请检查所输单号是否是本部门所属单号！
 * 
 * 
 *          营业员点击运单开单，进入运单开单界面。 本用例分为两个界面：录入发货客户信息、 选择发货客户； 1. 录入发货客户信息：
 *          界面为信息录入界面：包括：手机、电话、客户名称、 客户编码、发货联系人（发货部门）、发货人地址； 1.1 手机：发货人手机号码； 1.2
 *          电话：发货人电话号码； 1.3 客户名称：发货客户公司或单位名称， 可支持搜索查询； 1.4 客户编码：我司给客户的客户号； 1.5
 *          发货联系人（发货部门）：发货客户的客户姓名， 当“运单开单”中的“开单提货方式”为“内部带货自提”时，
 *          “发货联系人”字段更改为“发货部门”； 1.6 发货人地址：发货客户的详细联系地址， 支持国家行政区域自动过滤； 2.
 *          选择发货客户界面： 界面为选择客户信息界面：包括两部分： 客户信息列表区域、功能按钮区域； 2.1. 客户信息列表区域：
 *          包括：客户编码、客户名称、联系人、手机、 电话、地址(规范化地址和详细地址)； 2.2. 功能按钮区域： 包括：确定、取消； 3.
 *          选择热门城市界面 界面信息包含人热门城市 4. 选择省份界面 界面信息包含省份 5. 选择城市界面 界面信息保护城市 6. 选择区县界面
 *          界面信息保护区县 1.6 操作步骤 1.6.1 录入 序号 基本步骤 相关数据 补充步骤 1 录入手机号码 1.
 *          系统自动查询CRM系统中对应手机号码绑定的客户信息， 如果有弹窗，弹窗操作见扩展1a，
 *          如果没有，弹出FOSS历史开单记录中对应手机号码绑定的客户信息， 并弹窗，弹窗操作见扩展1b； 2.
 *          规则-请参见系统规则SUC-492-录入发货客户信息SR1； 2 录入电话号码 2.
 *          如果手机号码没有填写，系统自动查询CRM系统中对应电话号码绑定的客户信息， 如果有弹窗，弹窗操作见扩展2a，
 *          如果没有，弹出FOSS历史开单记录中对应手机号码绑定的客户信息， 并弹窗，弹窗操作见扩展2b； 3.
 *          规则-请参见系统规则SUC-492-录入发货客户信息SR1； 3 录入客户名称和客户编码 1.
 *          规则-请参见系统规则SUC-492-录入发货客户信息SR2、SR3； 4 录入发货联系人 5 录入发货人地址 1. 提供下拉框选择输入，
 *          系统自动过滤输入的行政区下一级行政级的字段； 2. 规则-请参见系统规则SUC-492-录入发货客户信息SR6； 1.6.2 扩展 序号
 *          扩展事件 相关数据 备注 1a 当录入的手机号码在CRM系统中有手机号码绑定的客户信息，
 *          则自动弹窗并显示手机号码为录入的手机号的所有客户信息， 营业员选择录入一条记录，并确定；选择的客户信息自动带入发货客户信息中； 客户信息
 *          1. 规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则； 2.
 *          规则-请参见系统规则SUC-492-录入发货客户信息SR5 、SR6、SR7； 1b
 *          当录入的手机号码在CRM系统中没有手机号码绑定的客户信息时， 如果该客户在这3个月有发过货，则弹出历史发货记录，营业员选择录入一条记录，
 *          并确定；选择的客户信息自动带入发货客户信息中； 客户信息 3. 规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则；
 *          4. 规则-请参见系统规则SUC-492-录入发货客户信息SR5 、SR6、SR7； 2a
 *          当录入的电话号码在CRM系统中有电话号码绑定的客户信息， 则自动弹窗并显示电话号码为录入的电话号码的所有客户信息，
 *          营业员选择录入一条记录，并确定；选择的客户信息自动带入发货客户信息中； 客户信息 1.
 *          规则-请参见系统用例SUC-492中的“1.6.2扩展2a”的规则； 2.
 *          规则-请参见系统规则SUC-492-录入发货客户信息SR5、SR6、SR7； 2b
 *          当录入的电话号码在CRM系统中没有电话号码绑定的客户信息时， 如果该客户在这3个月有发过货，则弹出历史发货记录，营业员选择录入一条记录，
 *          并确定；选择的客户信息自动带入发货客户信息中； 客户信息 1. 规则-请参见系统用例SUC-492中的“1.6.2扩展2a”的规则；
 *          2. 规则-请参见系统规则SUC-492-录入发货客户信息SR5、SR6、SR7； 1 录入手机号码 1.
 *          系统自动查询CRM系统中对应手机号码绑定的客户信息和 FOSS历史开单记录中对应手机号码绑定的客户信息，并弹窗，弹窗操作见扩展1a；
 *          1. 规则-请参见系统规则SR1； 2 录入电话号码 1. 系统自动查询CRM系统中对应电话号码绑定的客户信息
 *          和FOSS历史开单记录中对应手机号码绑定的客户信息，并弹窗，弹窗操作参见扩展2a； 1. 规则-请参见系统规则SR1； 3
 *          录入客户名称和客户编码 1. 规则-请参见系统规则SR2、SR3； 4 录入发货联系人 5 录入发货人地址 1. 提供下拉框选择输入，
 *          系统自动过滤输入的行政区下一级行政级的字段； 2. 规则-请参见系统规则SR4； 1.6.2 扩展 序号 扩展事件 相关数据 备注 1a
 *          当录入的手机号码在CRM系统中有手机号码绑定的客户信息， 则自动弹窗并显示手机号码为录入的手机号的所有客户信息，
 *          营业员选择录入一条记录，并确定；选择的客户信息自动带入发货客户信息中； 客户信息 1. 规则-请参见系统规则SR5； 2a
 *          当录入的电话号码在CRM系统中有电话号码绑定的客户信息， 则自动弹窗并显示电话号码为录入的电话号码的所有客户信息，
 *          营业员选择录入一条记录，并确定；选择的客户信息自动带入发货客户信息中； 客户信息 1. 规则-请参见系统规则SR6； 1.7 业务规则
 *          序号 描述 SR1 1.规则参考SUC-492-录入发货客户信息SR1 SR2 1. 规则参考SUC-492-录入发货客户信息SR2
 *          SR3 1.规则参考SUC-492-录入发货客户信息SR3 SR4 1. 规则参考SUC-492-录入发货客户信息SR6 SR5 1.
 *          规则参考SUC-492-录入发货客户信息SR7 SR6 1. 规则参考SUC-492-录入发货客户信息SR8
 * 
 * 
 *          确认整车总价SUC业务规则
 * 
 *          营业员点击整车开单，进入整车开单界面。 本界面为录入整车收银界面。 1. 约车报价：营业员约整车后，请车员受理的价格； 2.
 *          开单报价：营业员根据请车员的受理价格，给客户的实际运费价格； 3. 增值服务费用 4. 总运费：本次承运的客户应付金额； 5.
 *          开单付款方式：客户的付款方式，包括：现金、银行卡、月结、临时欠款、到付； 6. 预付金额 7. 到付金额； 1.6 操作步骤 序号
 *          基本步骤 相关数据 补充步骤 1 录入开单报价 1. 规则-请参见系统规则SR1； 2 查看约车报价、增值服务费用入总运费 1.
 *          规则-请参见系统规则SR2、SR3； 3 选择开单付款方式 1. 规则-请参见系统规则SR4、SR5； 4 预付金额 1.
 *          规则-请参见系统规则SR4、SR5； 5 到付金额 1. 规则-请参见系统规则SR4、SR5； 1.7 业务规则 序号 描述 SR1
 *          1. 开单报价默认等于约车报价； 2. 修改的开单报价只能为约车报价的某个范围区间中，该范围区间可由公司统一配置； SR2 1.
 *          整车导入约车开单时，约车报价为请车员受理的约车价格，不可修改； SR3 1. 总运费=开单报价+增值服务费； 2.
 *          增值服务费=保价费+代收手续费+预付运费保密服务费+返单费+包装费； SR4 1.
 *          整车的付款方式包含现金、银行卡、月结、临时欠款、到付； 2. 支持发货客户的多种付款方式叠加，但月结和临时欠款不能同时存在； 2.
 *          开单只能选择一种付款方式，不可选择两种或以上； 3. 月结客户可以开月结； 4. 若客户非月结，则自运过滤月结的付款方式； 5.
 *          付款方式为到付或者临时欠款时，不能选择预付运费保密； 6. 若整车开单选择直接到达客户处，则不能办理到付； 7.
 *          有信用额度且额度大于等于总运费的发货客户，才可以选择临时欠款； SR5 1. 预付金额必须大于0才能选择预付运费保密； 2.
 *          当付款方式为现付时，预付金额必须大于0；否则， 提示信息“付款方式非到付，预付金额不能小于等于0”； 3.
 *          当付款方式为到付时，预付金额不能大于0；否则， 提示信息“付款方式为【到付】，预付金额不能大于0”； 4.
 *          月结客户的信用金额直接限制该客户的当月发货金额， 当月发货金额超过信用额度，当月将无法再开单月结，
 *          提示“该客户的剩余可用信息额度不足，不能开月结”； 5. 临时欠款时，需要客户中的信用额度超过运费，
 *          否则，提示“该客户的剩余可用信息额度不足，不能开临时欠款”； 6. 当付款方式为临时欠款等收款放货时， 现付到付均为零，不可修改；
 *          SR6 1. 约车报价、开单报价、增值服务费用、总运费、预付金额、 到付金额均为整数，按照四舍五入原则；
 * 
 * 
 *          导入整车约车编号SUC业务规则
 * 
 *          营业员通过 界面标题： 约车信息 约车编号：受理后的约车编码 1. 录入发货客户信息： 界面为信息录入界面：包括：手机、电话、客户名称、
 *          客户编码、发货联系人、发货人地址； 1.1 手机：发货人手机号码； 1.2 电话：发货人电话号码； 1.3
 *          客户名称：发货客户公司或单位名称，可支持搜索查询； 1.4 客户编码：我司给客户的客户号； 1.5 发货联系人：发货客户的客户姓名；
 *          2. 录入收货客户信息： 界面为信息录入界面：包括：手机、电话、发货联系人、发货人地址； 1.6 手机：发货人手机号码； 1.7
 *          电话：发货人电话号码； 1.8 收货联系人：收货客户的客户姓名 1.9 收货人地址：收货客户的详细联系地址，支持国家行政区域自动过滤；
 *          3. 录入货物信息： 录入信息包括：货物名称、总件数、总重量、货物尺寸、总体积、货物包装 1.1 货物名称：货物的名称； 1.2
 *          总件数：收货时货物的总件数； 1.3 总重量：收货时货物的总重量； 1.4 总体积：收货时货物的总体积； 1.5
 *          货物包装：货物的包装数； 4.界面标题：计费付款 录入信息包括：约车报价、总运费、增值服务费、 开单付款方式、预付金额、到付金额 1.1
 *          约车报价：整车约车费用 1.2 总运费：运费总合 1.3 增值服务费：增值服务费总合 1.4 开单付款方式：开发付款的方式 1.5
 *          预付金额：现付金额 1.6 到付金额：到付金额 1.6 操作步骤 1.6.1 导入整车约车编号 序号 基本步骤 相关数据 补充步骤 1
 *          用户输入约车编号 2 用户点击“确定”按钮 约车信息 系统自动带出相应的约车信息， 约车编号不可编辑，规则参考SR1
 *          扩展事件写非典型或异常操作过程 序号 扩展事件 相关数据 备注 1.7 业务规则 序号 描述 SR1
 *          1、校验是否有此约车编号，如果没有，提示无此约车编号， 如果有，但是没有受理，提示“约车编号未受理”，如果受理拒绝，
 *          提示“约车失败”并提示失败原因，如果单号已经导入过，不能重复导入， 提示“约车编号已经导入过”，如果不是本部门的整车约车编号，
 *          录入后提示“不能导入其他部门整车约车编号” 2、根据约车信息填充界面，请车费用填充进约车报价中。
 * 
 * 
 * 
 *          运单提交（离线）SUC业务规则
 * 
 *          1.1 相关业务用例 BUC_FOSS_5.20.30_550 营业部离线开单 1.2 用例描述 营业员通过本用例录入提交。 1.3
 *          用例条件 条件类型 描述 引用系统用例 前置条件 1. 运单在线登录成功 2. 运单已填写完整 SUC-441录入收货客户信息(离线)
 *          SUC-442录入发货客户信息(离线) SUC-443录入货物信息(离线) SUC-444录入增值服务信息(离线)
 *          SUC-445录入运输信息(离线) SUC-412运单收银(离线) SUC-372暂存存运单(离线) SUC-362在线登录 后置条件
 *          1. 传送运单号、金额、帐号等结算数据到财务子系统 2. 传送货物名称、件数、重量等货物信息到中转子系统，安排运输计划 3.
 *          传送运单号等信息到官网，客户查询运单状态 4. 给收货人发送出发短信，给上门接货客户发送短信 5.
 *          订单信息反馈给CRM系统，订单处理结果为：离线已开单。 6、 当运输性质为精准空运时，
 *          提交成功后会自动生成订舱信息流到最终配载部门（即总调）的舱位信息中 1.4 操作用户角色 操作用户 描述 营业员
 *          通过运单开单界面，提交离线运单信息 1.5 界面要求 1.5.1 表现方式 Web方式 1.5.2 界面原型 1.5.2.1
 *          运单离线开单界面 1.5.2.2 运单确认提交界面 1.5.3 界面描述 1.5.3.1 运单开单界面 界面共包括7个部分：
 *          1、发货客户信息； 2、收货客户信息； 3、货物信息； 4、运输信息； 5、增值服务信息； 6、计费付款； 7、功能按钮。
 *          具体描述参考DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入发货客户信息-V0.1.doc
 *          DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入货物信息-V0.2.doc
 *          DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入收货客户信息-V0.1.doc
 *          DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入运输信息-V0.1.doc
 *          DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息-V0.1.doc 运单确认提交界面 界面共包括3个部分：
 *          1、离线运单基本信息； 2、在线基本信息 3、功能复选框； 4、功能按钮 1、 运单基本信息：单号、到付总运费、预付总运费、
 *          代收货款、保险价值、收货人名称、付款方式、 提货网点、提货方式、收货人地址、收货人电话、 货物名称、重量/体积/件数、包装 。 2、
 *          运单基本信息：单号、到付总运费、 预付总运费、代收货款、保险价值、收货人名称、 付款方式、提货网点、提货方式、收货人地址、
 *          收货人电话、货物名称、重量/体积/件数、包装 3、功能复选框：打印运单（选择之后，点击确定系统自动打印运单）、
 *          打印标签（选择之后，点击确定系统自动打印标签）、 下一条离线运单信息（选择后提交运单成功后填充下一条）。 4、功能按钮：确定、取消 。
 *          1.6 操作步骤 序号 基本步骤 相关数据 补充步骤 1 营业员在运单查询界面，查询出离线开单未提交的运单 2 点击“修改”
 *          收货客户信息、发货客户信息、货物信息、 增值服务信息、计费付款信息、运输信息、代打木架信息 进入开单界面 1、自动填充发货客户信息
 *          参考规则SR1、 SR2 2、自动填充发货收货客户信息 参考规则SR1 、SR2 3、自动填充货物信息 参考规则SR3，SR7
 *          4、自动填充运输信息 参考规则SR4，SR7 5、自动填充增值服务信息 参考规则SR5，SR7 6、自动填充计费付款信息
 *          参考规则SR6，SR7 填充完之后， 如果有代打木架，弹出代打木架信息录入界面 2 点击“提交”按钮提交运单。
 *          1、客户上门提供的货物承运信息。 2、上门接货客户提供的承运信息。 1.提交运单，根据系统规则SUC-439提交运单系统用例进行提交
 *          2. 调用中转接口，生成库存信息 3.系统自动弹出，运单确认提交界面 1.7 业务规则 序号 描述 SR1
 *          1.根据离线录入的发货客户信息， 使用发货联系人手机号码到远程服务器进行匹配客户信息， 如果没有，根据离线填写的发货客户信息，
 *          填充发货联系人手机号、发货联系人、发货人地址、发货人电话号码， 如果有，根据查询出来到客户信息，显示会员编码和客户名称，
 *          并根据离线填写的客户信息，填充发货联系人手机号、发货联系人、 发货人地址、发货人电话号码。填充时不需要进行联动和校验
 *          1.填充发货信息和发货信息时，根据发货客户手机到CRM进行查询， 无论查询出有多少条阻塞式弹出CRM查询框让用户进行选择，
 *          当发货客户手机为空时，根据电话号码到CRM进行查询， 无论查询出有多少条阻塞式弹出CRM查询框让用户进行选择，
 *          当用户选择时进行填充，如果客户选择取消时，不填充 2.如果修改，修改规则参考系统用例SUC-492录入发货客户信息 SR2
 *          11.如果修改，修改规则参考系统用例SUC-492录入发货客户信息和SUC-493录入收货客户信息 .根据离线录入的收货客户信息，
 *          使用收货联系人手机号码到远程服务器进行匹配客户信息， 如果没有，根据离线填写的收货客户信息，
 *          填充发货联系人手机号、发货联系人、发货人地址、发货人电话号码， 如果有，根据查询出来到客户信息，显示会员编码和客户名称，
 *          并根据离线填写的收货客户信息，填充发货联系人手机号、发货联系人、 发货人地址、发货人电话号码。填充时不需要进行联动和校验
 *          2.如果修改，修改规则参考系统用例SUC-493录入收货客户信息 SR3 1、 把货物信息填充到界面中，在填充过程中，
 *          不需要进行联动和校验 2、1、 如果修改、修改规则参考系统用例SUC-494 录入货物信息 SR4
 *          1、把运输信息到界面中，在填充过程中， 不需要进行联动和校验 2、如果修改，修改规则参考系统用例SUC-496录入运输信息 SR5
 *          1、把增值服务信息填充到界面中，在填充过程中，不需要进行联动和校验 21、如果修改，修改规则参考系统用例SUC-494录入增值服务信息
 *          SR6 1.如果发货客户有优惠协议，那么根据SUC-486-运单收银系统用例规则进行重新计价
 *          21.如果修改，修改规则参考系统用例SUC-408 运单收银 SR7 1、在填充过程中涉及到需要用基础资料、产品价格和客户资质的校验、
 *          计算、联动，都用最新信息进行校验、计算、联动， 如果离线保存时已经有计算或联动的值，需要进行覆盖， 需要最新计算和联动的值。
 * 
 *          运单收银（离线）SUC业务规则
 * 
 *          1.1 相关业务用例 BUC_FOSS_5.20.30_550 (营业部离线开单) 1.2 用例描述
 *          当网络故障或服务器原因导致营业部不能正常开单时，客户上门发货为汽运或空运，营业员确认承运信息之后，通过离线系统计算货物总付款金额。
 *          1.3 用例条件 条件类型 描述 引用系统用例 前置条件 1. 确认承运信息已录入完毕； 后置条件 1. 录入收入； 1.4
 *          操作用户角色 操作用户 描述 营业员 可查询、确认发货/收货客户应付款金额，及客户的付款方式 开单员
 *          可查询、确认发货/收货客户应付款金额，及客户的付款方式 1.5 界面要求 1.5.1 表现方式 Web页面 1.5.2 界面原型
 *          1.5.3 界面描述 营业员点击离线运单开单，进入离线运单开单界面。 本界面标题：计费付款。 1.
 *          计费类型：包括重量计费、体积计费，默认显示重量计费； 2. 计费费率， 3. 公布价运费 4. 增值服务费用 5. 总运费 6.
 *          开单付款方式：包括现金、到付； 7. 预付金额； 8. 到付金额； 9. 计费重量。 1.6 操作步骤 1.6.1 运单收银 序号
 *          基本步骤 相关数据 补充步骤 1 查看计费类型和计费费率 1. 规则-请参见系统规则SR1、SR2； 2
 *          查看公布价运费和增值服务费及总运费 1. 规则-请参见系统规则SR3； 3 录入付款方式 1. 规则-请参见系统规则SR4； 4
 *          确认和录入预付金额和到付金额 1. 规则-请参见系统规则SR5； 5 查看计费类型和计费费率 1. 规则-请参见系统规则SR1、SR2；
 *          扩展事件写非典型或异常操作过程 序号 扩展事件 相关数据 备注 5a 5b 1.7 业务规则 序号 描述 SR1 1.
 *          计费类型分为重量计费、体积计费， 由系统自动生成，不可修改； 默认重量计费； 2.
 *          对于一票货物系统分别按重量和体积分别计费并取大优先的原则计费； 若按重量计费运费较按体积计费运费较高，
 *          则计费类型为重量计费；若按体积计费运费较按重量计费运费较高， 则计费类型为体积计费； 3. 运输类型为汽运时,计费重量为空，不可修改；
 *          2.4. 运输类型为空运时计费重量应为重量和体积*1000000/6000进行对比，取大； SR2 1.
 *          费率为对应计费类型、目的站、提货网点及运输类型的走货单价； 2. 目的站、提货网点及运输类型确认后，
 *          即可自动显示对应计费类型的费率；（来自本地价格基础资料） 3. 费率可以保留到小数点后2位；运费、预付金额、到付金额为整数，
 *          按照四舍五入的原则； SR3 1. 公布价运费（即重量、体积计费的运费）=每公斤单价/每方价格与货物实际重量/体积的乘积，
 *          对于一票货物系统分别按重量和体积分别计费并取大优先的原则计费； （来自价格基础资料，下载并且使用当前启用的最新的价格版本，
 *          参考SUC-547下载基础资料PC-SR1） 2. 增值服务费=送货费+包装费+保价费+代收手续费+其他费用和； 3.
 *          总运费费用=公布价运费+增值服务费+装卸费 =预付金额+到付金额； 3.4. 公布价运费=纯运费+装卸费 SR4 1.
 *          付款方式只有：到付，现付 SR5 1. 当付款方式为现付时，预付金额必须大于0；否则， 提示信息“付款方式为现付，预付金额必须大于0”；
 *          2. 当付款方式为到付时，到付金额必须大于0；否则， 提示信息“付款方式为【到付】，到付金额必须大于0”； 3.
 *          发货人和收货人都付款，付款方式为现付; 发货人跟收货人都付款，付款方式选择到付。 4.3. 支持发货人、收货人付款方式的组合，
 *          例如付款方式为到付500：那么预付金额可以未300， 到付金额为200，总和等于500 ，那么预付300，
 *          可以选择现金100元，临时欠款100，银行卡刷卡100元。 SR6 参考suc-403生成运单SR1: 系统自动检测，
 *          如果客户端X天还没有更新，不能打开离线运单界面， 并提示“请在间隔X天内，在线登录系统
 * 
 * 
 *          确认公布总价（离线）SUC业务规则 1.1 相关业务用例 BUC_FOSS_5.20.30_550 (营业部离线开单) 1.2 用例描述
 *          当网络故障或服务器原因导致营业部不能正常开单时， 客户上门发货为汽运或空运，营业员确认承运信息之后，
 *          通过离线系统计算出本地公布价与计费重量或计费体积乘积的运费。 1.3 用例条件 条件类型 描述 引用系统用例 前置条件
 *          离线系统已经更新最新且已启用的价格版本 参考规则SR4 后置条件 离线开单保存 1.4 操作用户角色 操作用户 描述 营业员
 *          营业员录入货物承运信息等。 开单员 开单员录入货物承运信息等。 1.5 界面要求 1.5.1 表现方式 Web页面 1.5.2 界面原型
 *          无 1.5.3 界面描述 无 1.6 操作步骤 1.6.1 计算公布总价 序号 基本步骤 相关数据 补充步骤 1 登陆离线系统 2
 *          打开“离线开单”界面。 3 录入发货人信息 参考SUC-442 4 录入收货客户信息 参考SUC-441 5 录入货物信息
 *          参考SUC-443 6 录入运输信息 参考SUC-445 进行前面5操作之后，若是空运，
 *          系统读取本地下载的空运公布价价格方案计算出公布总价， 显示在运单开单界面。
 *          若是汽运，系统读取本地下载的汽运公布价价格方案（计算出公布总价， 显示在运单开单界面。 参考规则SR1，SR2，SR3
 *          扩展事件写非典型或异常操作过程 序号 扩展事件 相关数据 备注 5a 1.7 业务规则 序号 描述 SR1
 *          1）汽运：上门发货汽运运费最低X元一票；（同城、卡航；可配置）； 上门接货汽运运费最低X元一票；（同城、卡航；可配置）；
 *          2）空运：空运运费最低X元一票；（可配置）； SR2 1）汽运：当货物为“接货”时，系统自动匹配生成公布价“接货价格方案”；
 *          当货物为“非接货”时，系统自动匹配生成公布价“非接货的价格方案”； 2）空运：系统自动匹配公布价 “空运价格方案”；
 *          空运价格只有上门发货一套价格方案， 如有接货费在其他费用里添加一项接货费。
 *          （来自价格基础资料，下载并且使用当前启用的最新的价格版本，参考SUC-547下载基础资料PC-SR1） SR3
 *          1）计费方式分为重量计费、体积计费；重量、 体积计费的运费=每公斤单价与货物实际重量的乘积 或 每方单价与货物实际体积的乘积，
 *          对于一票货物，系统按重量和体积分别计算并取大优先的原则计费给出公布价总运费, 计费方式即为取大的一方； SR4
 *          参考suc-403生成运单SR1: 系统自动检测，如果客户端X天还没有更新， 不能打开离线运单界面，并提示“请在间隔X天内，在线登录系统
 * 
 * 
 *          录入运输信息（离线）SUC业务规则 营业员点击运单开单，进入运单开单界面。 本界面标题：录入运输信息。
 *          界面信息包括：收货部门、单号、运输性质、配载类型、 提货方式、目的站、提货网点、上门接货、集中接货、对外备注、
 *          对内备注、储运注意事项、配载线路（配载航班）、配载部门、 最终配载部门、预计出发时间、预计派送/提货时间。 1. 收货部门：揽货部门；
 *          2. 单号：运单单号； 3. 运输性质：公司产品类型，包括精准空运、精准汽运（长途）、 精准卡航、精准城运、汽运偏线、精准汽运（短途）；
 *          4. 配载类型：公司走货方式，包括专线、偏线（外发）、合大票、单独开单； 5.
 *          提货方式：公司提供的送货方式，包括自提（不含机场提货费）、 免费自提、机场自提、送货上门、免费送货、自提、内部带货自提、送货进仓； 6.
 *          目的站：客户所发货物要到达的目的城市和区域； 7. 提货网点：收货客户可以领取货物的部门； 8.
 *          上门接货：我司提货的一种服务，司机上门接货，确认承运， 有区别于客户上门发货； 9.
 *          集中接货：是否为集中接送货区域，以集中接货的方式揽货， 是对上门接货的一个属性补充； 10.
 *          对外备注：客户可以看到的备注信息，包括：空、保丢不保损、 “不承保发霉、变质、虫蛀虫咬之损失”、“ 不承保刮花、变形、撞凹之损失”、
 *          不可重压、易潮、不可倒置、客户指定提货网点； 11. 对内备注：仅限公司内部人员看到的备注信息； 12.
 *          储运注意事项：对外备注和对内备注信息的叠加； 13. 配载线路（配载航班）:配载类型为偏线（外发）或专线时时，
 *          显示“配载线路”，为从出发部门到达开单目的站，我司走货的线路；
 *          配载类型为合大票或单独开单时，显示“配载航班”，为我司规则的空运走货的航班类型， 包括早班、中班、晚班； 14.
 *          配载部门:开单收货部门出发货配载专线； 15. 最终配载部门:货物到达的最终部门； 16. 预计出发时间:我司走货的预计出发时间，
 *          适用于运输类型为“精准卡航”及“精准城运”； 17. 预计派送/提货时间: 我司承诺客户的可提货或送货的时间，
 *          适用于运输类型为“精准卡航”及“精准城运”； 1.6 操作步骤 序号 基本步骤 相关数据 补充步骤 1 录入收货部门 1.
 *          规则-请参考SUC-496录入运输信息-系统规则SR1； 2 录入单号 1. 系统校验单号的合法性；单号唯一在离线提交时，判断，
 *          除单号唯一性其他参考规则SR1 3 录入运输性质 1. 规则-请参考SUC-496录入运输信息-系统规则SR2、SR3； 4
 *          录入配载类型 1. 规则-请参考SUC-496录入运输信息-系统规则SR3、SR4、SR5、SR6； 5 录入提货方式 1.
 *          规则-请参考SUC-496录入运输信息-系统规则SR4、SR6、SR7、SR8； 6 录入目的站 1.
 *          规则-请参考SUC-496录入运输信息-系统规则SR9； 7 录入提货网点 1.
 *          规则-请参考SUC-496录入运输信息-系统规则SR5、SR8、SR9、SR10； 8 勾选是否上门接货 1.
 *          规则-请参考SUC-496录入运输信息-系统规则SR11； 2. 勾选上门接货，必须输入司机工号，司机工号为6为数字。参考规则SR3 9
 *          勾选是否集中接货 1. 规则-请参考SUC-496录入运输信息-系统规则SR11、SR12； 10 录入对外备注 1.
 *          规则-请参考SUC-496录入运输信息-系统规则SR13、SR14； 11 录入对内备注 1. 参考规则SR2 12 生成储运注意事项
 *          1. 规则-请参考SUC-496录入运输信息-系统规则SR14； 13 录入配载线路（配载航班） 1.
 *          规则-请参考SUC-496录入运输信息-系统规则SR15； 2. 参考SUC-547下载基础资料(PC) 14 录入配载部门 1.
 *          规则-请参考SUC-496录入运输信息-系统规则SR16； 15 录入最终配载部门 1.
 *          规则-请参考SUC-496录入运输信息-系统规则SR17； 16 生成预计出发时间 1.
 *          规则-请参考SUC-496录入运输信息-系统规则SR18； 17 生成预计派送/提货时间 1.
 *          规则-请参考SUC-496录入运输信息-系统规则SR19； 1.7 业务规则 序号 描述 SR1 1、单号为8-9位数字，
 *          不能输入重复单号。 SR2 1、对内备注仅公司内部人员可见， 输入字符长度不得超过500。 SR3 1、当勾选上门接货时，
 *          司机工号必填，且为6位数字。 SR4 参考suc-403生成运单SR1: 系统自动检测，如果客户端X天还没有更新，
 *          不能打开离线运单界面，并提示“请在间隔X天内，在线登录系统
 * 
 * 
 *          录入收货客户信息（离线）SUC业务规则
 * 
 *          1.1 相关业务用例 BUC_FOSS_5.20.30_550 营业部离线开单 1.2 用例描述 营业员通过本用例录入收货客户信息。
 *          1.3 用例条件 条件类型 描述 引用系统用例 前置条件 1. 离线登录成功 后置条件 1.4 操作用户角色 操作用户 描述 营业员
 *          可查询、录入、修改收货客户信息 1.5 界面要求 1.5.1 表现方式 Web方式 1.5.2 界面原型 1.5.3 界面描述
 *          营业员点击运单开单，进入运单开单界面。 本界面为录入收货客户信息。 界面为信息录入界面包括：手机、电话、客户名称、
 *          客户编码、收货联系人（收货部门）、收货人地址； 1. 手机：收货人手机号码； 2. 电话：收货人电话号码，可以添加多个； 3.
 *          收货联系人：收货客户的客户姓名； 4. 收货人地址：收货客户的详细联系地址， 支持国家行政区域自动过滤； 1.6 操作步骤 序号
 *          基本步骤 相关数据 补充步骤 1 录入手机号码 1. 规则-请参见系统规则SR1； 2 录入电话号码 1. 规则-请参见系统规则SR1；
 *          3 录入收货联系人（收货部门） 规则-请参见系统规则SR3、SR4； 4 录入收货人地址 1. 规则-请参见系统规则SR2； 1.7
 *          业务规则 序号 描述 SR1 1. 收货客户手机号码及固定电话至少提供一个， 手机号码只能为数字并且为11位，固定电话号码只能为数字，
 *          且可添加多个；添加多个时，必须用“，”或“、”或“/”分开； 固定电话号码字段也可以录入手机号； SR2 1.
 *          客户详细地址必填至乡/镇， 且乡镇下一级内容不能为空； SR3 1. 当“运单开单”中的“开单提货方式”为“内部带货自提”时，
 *          “收货联系人”字段更改为“收货部门”； SR4 1.
 *          若为公司内部带货，则收货客户信息中的收货部门名称必须与OA系统中组织架构名称保持一致； SR5
 *          前提：收货人信息都已填充完毕，再进行手机号， 电话号码修改： ① 如在三月记录中，是否再次弹出框选择记录后覆盖原来的信息，
 *          不选择只修改手机号or电话号码，发货客户其他信息不置空 ② 如不在三月记录中，是否只修改手机号或电话，
 *          发货客户其他信息不置空------- 1、再次弹出框选择记录后覆盖原来的信息2、
 *          如果带出时是CRM客户，那么要删除客户编码和客户名称后才能够修改联系人信息，
 *          如果带出来不是，那么可以直接修改，那么修改电话号码和手机号，带出的信息都会覆盖
 * 
 * 
 *          录入发货客户信息（离线）SUC业务规则
 * 
 *          1.1 相关业务用例 BUC_FOSS_5.60.05_520 确认承运信息 1.2 用例描述
 *          营业员在网络不通时，通过本用例录入发货客户信息。 1.3 用例条件 条件类型 描述 引用系统用例 前置条件 离线登录成功； 后置条件
 *          1. 运单收银 2. 录入增值服务信息 1.4 操作用户角色 操作用户 描述 营业员 可查询、录入、修改发货客户信息 1.5 界面要求
 *          1.5.1 表现方式 Web方式 1.5.2 界面原型 1.5.3 界面描述 营业员点击运单开单，进入运单开单界面。
 *          本界面为录入发货客户信息。 界面为信息录入界面：包括：手机、电话、 发货联系人（发货部门）、发货人地址； 1. 手机：发货人手机号码；
 *          2. 电话：发货人电话号码，可以添加多个； 3. 发货联系人（发货部门）：发货客户的客户姓名，
 *          当“运单开单”中的“开单提货方式”为“内部带货自提”时， “发货联系人”字段更改为“发货部门”； 4.
 *          发货人地址：发货客户的详细联系地址， 支持国家行政区域自动过滤； 1.6 操作步骤 序号 基本步骤 相关数据 补充步骤 1 录入手机号码
 *          1. 规则-请参见系统规则SR1； 2 录入电话号码 1. 规则-请参见系统规则SR1； 3 录入发货联系人（发货部门） 1.
 *          规则-请参见系统规则SR2、SR3； 4 录入发货人地址 1. 提供下拉框选择输入，系统自动过滤输入的行政区下一级行政级的字段； 2.
 *          规则-请参见系统规则SR4； 1.7 业务规则 序号 描述 SR1 1. 发货客户手机号码及固定电话至少提供一个，
 *          手机号码只能为数字并且为11位，固定电话号码只能为数字， 且可添加多个,
 *          添加多个时，必须用“，”或“、”或“/”分开；固定电话号码字段也可以录入手机号； SR2 1.
 *          当“运单开单”中的“开单提货方式”为“内部带货自提”时， “发货联系人”字段更改为“发货部门”； SR3 1.
 *          若为公司内部带货，则发货客户信息中的发货部门名称必须与OA系统中组织架构名称保持一致； SR4 1.
 *          客户详细地址必填至乡/镇，且乡镇下一级内容不能为空； SR5 1．焦点到联系人文本框后，下个焦点直接跳过地址分段输入框，到下个控件
 * 
 *          管理出发运单SUC业务规则 管理营业部出发运单 1.1 相关业务用例 BUC_FOSS_5.60.05_510 补录运单
 *          BUC_FOSS_5.20.30_550 营业部离线开单 1.2 用例描述 营业员管理查询部门出发运单包括：
 *          PDA运单（待补录、已补录）、暂存、已开单， 对待补录、暂存的运单在FOSS系统进行补录,
 *          以及在营业部离线情况下可以查询本部门离线开单情况。 1.3 用例条件 条件类型 描述 引用系统用例 前置条件 1、PDA已开单
 *          2、FOSS已开单、暂存运单、已补录PDA运单 3、离线系统已保存及已提交运单。
 *          参考系统用例suc-439，SUC-467，suc-491，suc-441离线开单，suc-403生成运单（离线） 后置条件
 *          1、未补录PDA运单，营业员进行补录。 2、暂存的运单，营业重新修改提交。 3、导出离线运单记录。 参考系统用例suc-491补录运单
 *          参考suc-556 1.4 操作用户角色 操作用户 描述 营业员 营业员查询部门出发运单情况。 1.5 界面要求 1.5.1 表现方式
 *          WEB界面 1.5.2 界面原型 1.5.3 界面描述 界面标题：管理营业部出发运单。 界面共分为3个部分： 1、输入元素及查询条件；
 *          2、表格； 3、功能按钮。 4、功能复选框 1、输入元素及查询条件：运单号/订单号、运输性质、
 *          制单时间、FOSS提交时间、出发部门、运单状态、 制单部门、开单人、离线运单待提交。 2、表格：查询结果列表：操作列、运单状态、运单号、
 *          订单编号、制单时间、FOSS提交时间、收货部门、 出发城市、目的城市、运输性质、重量、体积、件数、
 *          付款方式、总运费、制单部门、开单人、货物类型。 3、功能按钮：查询、重置、导出（参考suc-556）、
 *          导入（参考SUC-568）、删除（参考SUC-751）、 提交（参考用例suc-559）、补录（参考suc-491）。
 *          4、复选框：全选、反选。 1.6 操作步骤 序号 基本步骤 相关数据 补充步骤 1 双击“管理营业部出发运单”菜单。
 *          PDA系统开单数据同步到FOSS系统。 进入到管理营业部出发运单界面。 2 输入查询条件 1、PDA系统开单数据。
 *          参考规则SR2-SR4 3 点击“查询” 查询之后，如需补录， 点击记录前“补录”按钮，补录运单参考用例suc-491。
 *          如需提交离线运单，点击记录前的“提交”按钮， 提交离线运单参考用例suc-559。 扩展事件写非典型或异常操作过程 序号 扩展事件
 *          相关数据 备注 3a 如输入的运单号/订单号错误或不存在， 弹出提示：运单号/订单号输入错误，请核实后重新输入。 3b
 *          若查询条件，查询不到结果，弹出提示： 请重新选择或输入查询条件。 1.7 状态图 1.8 业务规则 序号 描述 SR1
 *          打开界面，默认查询制单时间为昨天00:00:00到当天23:59:59，
 *          运输性质为全部，运单状态为“待补录”、“暂存”、“离线运单未提交”、 “已删除离线运单提交失败”的运单记录，按制单时间排序，
 *          制单时间越早的排在越前面，制单部门为当前登陆系统所在部门，不可编辑，呈灰色。 SR2 单号为8-9位的数字。 SR3
 *          制单时间、foss提交时间可以修改为一个星期的时间段。 SR4 运单号/订单号、制单时间、FOSS提交时间可作为单独条件查询；
 *          运单号/订单号优先级最高，具有排他性；其他条件可组合查询， 但是制单时间为必填项； SR5 可以点击表头进行升序或降序的排列。 SR6
 *          俩人或多人同时点击“补录”、 “提交”按钮， 以先导入运单补录或提交的为准，后导入运单补录或提交的进行提示：
 *          此单已导入且正在进行补录或提交，不能再进行导入。 SR7 选中某条记录，双击可以开打运单开单界面，
 *          将此单所有已填信息带入到开单界面，运单状态为“待补录”、 “暂存”的运单，待补录运单已开单信息不可修改，其他信息可以修改；
 *          暂存运单打开运单界面时，所有信息都可修改。运单状态为“已补录”、 “已开单”的运单，此时运单界面不可编辑；运单状态为“离线开单未提交”、
 *          “已删除离线开单提交失败”的运单，运单界面信息可修改。 SR8 重置按钮功能是将查询条件恢复到打开界面默认的状态或填写情况。 SR9
 *          勾选离线运单待提交时，运单状态下拉框为灰色， 可查询出运单状态为“离线开单未提交”、“已删除离线开单提交失败”的运单。 SR10
 *          勾选全选按钮，选中所有记录，勾选反选按钮取消已勾选的所有记录。 SR11 状态为离线开单提交失败的运单记录显示为淡红色。 SR12
 *          营业部只能查询到收货部门为本部门（即当前登陆营业部名称） 的所有出发运单，
 *          开单查询组可以查询到制单部门为本部门（即当前登陆开单查询组名称）的所有出发运单。
 *          开单查询组可以查询到所管辖收货部门为集中PDA开单的运单 SR13 运输性质包括：精准卡航，精准汽运（长），精准汽运（短），
 *          精准空运，汽运偏线，整车，精准城运 SR14 运单状态增加“全部” SR15 当前登录部门是营业部非开单组，那么收货部门，
 *          制单部门默认为当前登录部门不可修改； 当前登录部门是开单组，那么制单部门为当前登录部门不可修改，
 *          收货部门为空，收货部门为公共选择器，筛选为当前开单组所管辖部门
 */
public class WaybillBindingListener implements IBindingListener {
	// 0
	private static final String ZERO = "0";
	
	private static final double ZEROPOINTFIVE = 0.5;

	private static final double ZEROPOINTTHREEFIVE = 0.35;

	private static final double ZEROPOINTONE = 0.1;
	

    private static final int NUMBER_ZERO = 0;

	// log object
	private static final Log log = LogFactory.getLog(WaybillExporter.class);

	/**
	 * 国际化对象
	 */
	private static final II18n i18n = I18nManager
			.getI18n(WaybillBindingListener.class);

	private static final int NUM_310000001 = 310000001;

	private static final int NUM_313000000 = 313000000;

	private static final int NUM_10000 = 10000;

	private static final int NUM_1000000 = 1000000;

	private static final int NUM_50000 = 50000;

	// 运单UI
	WaybillEditUI ui;

	// 绑定对象
	IBinder<WaybillPanelVo> waybillBinder;

	// 运单业务对象通过工场生成离线业务对象和在线业务对象
	IWaybillService waybillService = WaybillServiceFactory.getWaybillService();
	IBaseDataService baseDataService = GuiceContextFactroy.getInjector()
			.getInstance(BaseDataService.class);

	// 工具类获取branchVo对象
	BusinessUtils bu = new BusinessUtils();

	public WaybillBindingListener(WaybillEditUI ui) {
		this.ui = ui;

	}

	/**
	 * 
	 * 绑定对象时间触发器
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2013-3-19 下午08:11:33
	 * @param be
	 */
	@Override
	public void bindingTriggered(List<BindingEvent> be) {
		HashMap<String, IBinder<WaybillPanelVo>> map = ui.getBindersMap();
		waybillBinder = map.get("waybillBinder");
		WaybillPanelVo bean = waybillBinder.getBean();
		//存贮原发货客户编码
		String oldDeliveryCustomerCode=bean.getDeliveryCustomerCode();
		try {
			for (BindingEvent bindingEvent : be) {
				if ("waybillNo".equals(bindingEvent.getPropertyName())) {// 运单号
					waybillNoListener(bean);
				} else if ("paidMethod".equals(bindingEvent.getPropertyName())) {
					// 开单付款方式
					paidMethodListener(bean);
				} else if ("deliveryCustomerMobilephone".equals(bindingEvent
						.getPropertyName())) {// 发货人手机号码
					deliveryCustomerMobilephoneListener(bean);
				} else if ("deliveryCustomerPhone".equals(bindingEvent
						.getPropertyName())) {// 发货人电话
					deliveryCustomerPhoneListener(bean);
				}
				// 发货客户名称
				else if ("deliveryCustomerName".equals(bindingEvent
						.getPropertyName())) {
					deliveryCustomerNameListener(bean);
				} else if ("goodsName".equals(bindingEvent.getPropertyName())) {// 货物名称
					gooodsNameListener(bean);
				} else if ("pickupToDoor"
						.equals(bindingEvent.getPropertyName())) {// 上门接货
					pickupToDoorListener(bean);
				}else if ("freePickupGoods"
						.equals(bindingEvent.getPropertyName())) {//免费接货
					freePickupGoodsListener(bean);
				}
				// 发货联系人
				else if ("deliveryCustomerContact".equals(bindingEvent
						.getPropertyName())) {
					deliveryCustomerContactListener(bean);
				}
				// 发货省市区县
				else if ("deliveryCustomerArea".equals(bindingEvent
						.getPropertyName())) {
					deliveryCustomerAreaListener(bean);
				} else if ("receiveCustomerMobilephone".equals(bindingEvent
						.getPropertyName())) {// 收货人手机号码
					receiveCustomerMobilephoneListener(bean);
				} else if ("receiveCustomerPhone".equals(bindingEvent
						.getPropertyName())) {// 收货人电话
					receiveCustomerPhoneListener(bean);
				}
				// 开单提货方式
				else if ("receiveMethod".equals(bindingEvent.getPropertyName())) {// 提货方式
					receiveMethodListener(bean);
				}
				// 收货客户名称
				else if ("receiveCustomerName".equals(bindingEvent
						.getPropertyName())) {
					receiveCustomerNameListener(bean);
				}
				// 收货区域
				else if ("receiveCustomerArea".equals(bindingEvent
						.getPropertyName())) {
					receiveCustomerAreaListener(bean);
				}
				// 收货联系人
				else if ("receiveCustomerContact".equals(bindingEvent
						.getPropertyName())) {
					receiveCustomerContactListener(bean);
				}else if ("specialValueAddedServiceType".equals(bindingEvent
						.getPropertyName())) {
					specialValueAddedServiceTypeListener(bean);
				}
				// 运输性质
				else if ("productCode".equals(bindingEvent.getPropertyName())) {// 运输性质
					productCodeListener(bean);
				} else if ("goodsWeightTotal".equals(bindingEvent
						.getPropertyName())) {// 重量
					goodsWeightTotalListener(bean);
				} else if ("goodsVolumeTotal".equals(bindingEvent
						.getPropertyName())) {// 体积
					goodsVolumeTotalListener(bean);
				} else if ("goodsQtyTotal".equals(bindingEvent
						.getPropertyName())) {// 件数
					goodsQtyTotalListener(bean);
				}
				// 保险申明价值
				else if ("insuranceAmount".equals(bindingEvent
						.getPropertyName())) {// 保险价值
					insuranceAmountListener(bean);
				} else if ("insuranceRate".equals(bindingEvent
						.getPropertyName())) {
					// 报价费率
					insuranceRateListener(bean);
				} else if ("goodsSize".equals(bindingEvent.getPropertyName())) {// 尺寸
					goodsSizeListener(bean);
				} else if ("wood".equals(bindingEvent.getPropertyName())) {// 包装-木
					woodListener(bean);
				} else if ("fibre".equals(bindingEvent.getPropertyName())) {// 包装-纤
					fibreListener(bean);
				} else if ("salver".equals(bindingEvent.getPropertyName())) {// 包装-托
					salverListener(bean);
				} else if ("membrane".equals(bindingEvent.getPropertyName())) {// 包装-膜
					membraneListener(bean);
				} else if ("refundType".equals(bindingEvent.getPropertyName())) {// 退款类型
					refundTypeListener(bean);
				} else if ("returnBillType".equals(bindingEvent
						.getPropertyName())) {// 返单类型
					returnBillTypeListener(ui, bean);
				} else if ("isWholeVehicle".equals(bindingEvent
						.getPropertyName())) {// 是否整车
					isWholeVehicleListener(bean);
				} else if ("isPassDept".equals(bindingEvent.getPropertyName())) {// 是否经过营业部
					isPassDeptListener(bean);
				} else if ("pickupFee".equals(bindingEvent.getPropertyName())) {// 接货费
					pickupFeeListener(bean);
				} else if ("packageFee".equals(bindingEvent.getPropertyName())) {// 包装费
					packageFeeListener(bean);
				} else if ("codAmount".equals(bindingEvent.getPropertyName())) {// 代收货款
					codAmountListener(bean);
				} else if ("serviceFee".equals(bindingEvent.getPropertyName())) {// 装卸费
					serviceFeeListener(bean);
				} else if ("deliveryGoodsFee".equals(bindingEvent
						.getPropertyName())) {// 送货费
					deliveryGoodsFeeListener(bean);
				}else if("supportFee".equalsIgnoreCase(bindingEvent.getPropertyName())){//保价费
					supportFeeListener(bean);
				}else if("collectingFee".equalsIgnoreCase(bindingEvent.getPropertyName())){//代收货款手续费
					codFeeListener(bean);
				} else if ("carDirectDelivery".equals(bindingEvent
						.getPropertyName())) {// 大车直送
					carDirectDeliveryListener(bean);
				} else if ("preciousGoods".equals(bindingEvent
						.getPropertyName())) {// 贵重物品
					preciousGoodsListener(bean);
				} else if ("flightNumberType".equals(bindingEvent
						.getPropertyName())) {// 航班类型
					flightNumberTypeListener(bean);
				} else if ("freightMethod".equals(bindingEvent
						.getPropertyName())) {// 合票类型
					freightMethodListener(bean);
				} else if ("receiveCustomerAddress"
						.equalsIgnoreCase(bindingEvent.getPropertyName())) {
					receiveCustomerAddressListener(bean);// 收货人地址
				} else if ("prePayAmount".equalsIgnoreCase(bindingEvent
						.getPropertyName())) {// 预付金额
					prePayAmountListener(bean);
				} else if ("toPayAmount".equalsIgnoreCase(bindingEvent
						.getPropertyName())) {// 到付金额
					toPayAmountListener(bean);
				} else if ("promotionsCode".equalsIgnoreCase(bindingEvent
						.getPropertyName())) {// 优惠编码
					promotionsCodeListener(bean);
				} else if ("innerNotes".equalsIgnoreCase(bindingEvent
						.getPropertyName())) {// 对内备注
					innerNotesListener(bean);// 对内备注
				} else if ("transportFee".equalsIgnoreCase(bindingEvent
						.getPropertyName())) {// 开单报价
					transportFeeListener(bean);// 开单报价
				} else if ("receiveOrgName".equalsIgnoreCase(bindingEvent
						.getPropertyName()))// 收货部门
				{
					receiveOrgName(bean);
				} else if ("kilometer".equalsIgnoreCase(bindingEvent
						.getPropertyName()))// 公里数
				{
					kilometerListener(bean);
				} else if ("isEconomyGoods".equalsIgnoreCase(bindingEvent
						.getPropertyName()))// 是否自提件
				{
					isEconomyGoodsListener(bean);
				} else if ("activeInfo".equalsIgnoreCase(bindingEvent
						.getPropertyName())) {
					// 市场推广活动名称
					activeInfoListener(bean);
				} else if ("invoiceMode".equalsIgnoreCase(bindingEvent
						.getPropertyName()))// 发票标记
				{
					invoiceMethodListener(bean);
				} else if ("isBigGoods".equalsIgnoreCase(bindingEvent
						.getPropertyName())&&!BZPartnersJudge.IS_PARTENER) {// 是否精准大票
					isBigGoodsListener((Boolean) bindingEvent.getNewValue(),
							bean);
				} else if ("businessZone".equalsIgnoreCase(bindingEvent
						.getPropertyName())) {
					businessZoneListener((Boolean) bindingEvent.getNewValue(),
							bean);
				} else if ("residentialDistrict".equalsIgnoreCase(bindingEvent
						.getPropertyName())) {
					residentialDistrictListener(
							(Boolean) bindingEvent.getNewValue(), bean);
				} else if ("deliveryCustomerAddressNote".equals(bindingEvent
						.getPropertyName())) {
					// 发货人地址备注
					if (StringUtils.isNotBlank((String) bindingEvent
							.getNewValue())) {
						bean.setDeliveryCustomerAddressNote((String) bindingEvent
								.getNewValue());
					}
				} else if ("receiveCustomerAddressNote".equals(bindingEvent
						.getPropertyName())) {
					// 收货人地址备注
					if (StringUtils.isNotBlank((String) bindingEvent
							.getNewValue())) {
						bean.setReceiveCustomerAddressNote((String) bindingEvent
								.getNewValue());
					}
				} else if ("isExhibitCargo".equalsIgnoreCase(bindingEvent
						.getPropertyName())) {
					// 是否展货
					bean.setIsExhibitCargo((Boolean) bindingEvent.getNewValue());
				} else if ("airGoodsType"
						.equals(bindingEvent.getPropertyName())) {
					// 空运重新选择货物类型需要重新计算总运费
					isChangeAirGoodsTypes(bean);
				}
				//liding comment for NCI
				/**
				 * 对交易流水号进行监控
				 * 
				 * @author:218371-foss-zhaoyanjun
				 * @date:2015-01-23
				 */
//				else if ("transactionSerialNumber".equals(bindingEvent
//						.getPropertyName())) {
//					verificate(bean.getTransactionSerialNumber());
//				} 
				else if ("internalDeliveryType".equals(bindingEvent
						.getPropertyName())) {
					internalDeliveryListener(bean);

				}else if("employeeNo".equalsIgnoreCase(bindingEvent.getPropertyName())){//工号
					employeeNoListener();
					
				}else if("partnerBilling".equals(bindingEvent.getPropertyName())){
					partnerBillingListener(bean);
				}
				
				if (!"prePayAmount".equalsIgnoreCase(bindingEvent.getPropertyName()) &&
						!"paidMethod".equals(bindingEvent.getPropertyName())){
					if(StringUtils.isNotBlank(ui.getPictureWaybillType()) && 
							WaybillConstants.WAYBILL_PICTURE.equals(ui.getPictureWaybillType()) && 
							(bean.getGoodsWeightTotal()==null || bean.getGoodsWeightTotal().compareTo(new BigDecimal(0))==0) &&
							(bean.getGoodsVolumeTotal()==null || bean.getGoodsVolumeTotal().compareTo(new BigDecimal(0))==0)){
							
							bean.setPrePayAmount(BigDecimal.ZERO);
							ui.billingPayPanel.getTxtAdvancesMoney().setEnabled(true);			
			}
					
					if(bean.getPaidMethod()!=null){
						if((WaybillConstants.WAYBILL_PICTURE.equals(ui.getPictureWaybillType()))&& 
								(bean.getGoodsWeightTotal()==null || bean.getGoodsWeightTotal().compareTo(new BigDecimal(0))==0) &&
								(bean.getGoodsVolumeTotal()==null || bean.getGoodsVolumeTotal().compareTo(new BigDecimal(0))==0)){
								if(WaybillConstants.ARRIVE_PAYMENT.equals(bean.getPaidMethod().getValueCode())){
									ui.billingPayPanel.getTxtAdvancesMoney().setEnabled(true);
								}else{
									bean.setPrePayAmount(BigDecimal.ZERO);
									ui.billingPayPanel.getTxtAdvancesMoney().setEnabled(false);
								}		
						}
					}
				}
			}
		} catch (BusinessException w) {
			//将客户编码设置回去
			bean.setDeliveryCustomerCode(oldDeliveryCustomerCode);
			log.error("WaybillValidateException", w);
			if (!"".equals(w.getMessage())) {
				if (i18n.get(
						"foss.gui.creating.showPickupStationDialogAction.MsgBox.failQueryFreightRoute")
						.equals(w.getMessage())) {
					MsgBox.showITServiceInfo(w.getMessage());
				} else {
					MsgBox.showInfo(w.getMessage());
				}
			}
		}
	}

	/**
	 * LianHe--2017年1月11日20:18:23
	 * 工号变更监听
	 */
	private void employeeNoListener() {
		//设置提交按钮置灰
		ui.billingPayPanel.getBtnSubmit().setEnabled(Boolean.FALSE);
		//设置"提交并进行下一单"按钮置灰
		if (ui.billingPayPanel.getBtnSubmitAndNextSingle() != null) {
			ui.billingPayPanel.getBtnSubmitAndNextSingle().setEnabled(Boolean.FALSE);
		}
	}

	/**
	 * 免费接货事件监听
	 * @author 306486 wangshuai
	 * @date 2016年3月17日
	 * @param bean
	 */
	private void freePickupGoodsListener(WaybillPanelVo bean) {
		//免费接货
//		boolean bool = ui.basicPanel.getCboFreePickupGoods().isSelected();
//		if (bool) {
//			
//
//			// 接货费
//			bean.setPickupFee(BigDecimal.ZERO);
//			// 手写输入金额
//			bean.setHandWriteMoney(BigDecimal.ZERO);
//			// 画布-接货费
//			bean.setPickUpFeeCanvas(bean.getPickupFee().toString());
//			// 司机工号输入框(现在司机工号不受是否接货的限制，根据ISSUE-3164修改)
//			ui.basicPanel.getTxtDriverNumber().setEditable(true);
//			// 接货费输入框
//			ui.billingPayPanel.getTxtPickUpCharge().setEditable(false);
//			// 手写输入金额输入框
//			ui.billingPayPanel.getTxtHandWriteMoney().setEditable(false);
//
//			// 重新计算运费
//			CalculateFeeTotalUtils.resetCalculateFee(bean);
//			
//			
//			
//			
//		} else {
//			
//			if (ui.basicPanel.getCboReceiveModel().isSelected()) {
//				if (StringUtils.isNotBlank(ui.getPictureWaybillType())
//						&& WaybillConstants.WAYBILL_PICTURE.equals(ui
//								.getPictureWaybillType())) {
//					// 司机工号输入框
//					ui.basicPanel.getTxtDriverNumber().setEditable(false);
//					// 接货费输入框
//					// ui.billingPayPanel.getTxtPickUpCharge().setEditable(false);
//				} else {
//					// 司机工号输入框
//					ui.basicPanel.getTxtDriverNumber().setEditable(true);
//					// 接货费输入框
//					ui.billingPayPanel.getTxtPickUpCharge().setEditable(false);
//				}
//			}else{
//				// 接货费
//				bean.setPickupFee(BigDecimal.ZERO);
//				// 手写输入金额
//				bean.setHandWriteMoney(BigDecimal.ZERO);
//				// 画布-接货费
//				bean.setPickUpFeeCanvas(bean.getPickupFee().toString());
//				// 司机工号输入框(现在司机工号不受是否接货的限制，根据ISSUE-3164修改)
//				ui.basicPanel.getTxtDriverNumber().setEditable(true);
//				// 接货费输入框
//				ui.billingPayPanel.getTxtPickUpCharge().setEditable(false);
//				// 手写输入金额输入框
//				ui.billingPayPanel.getTxtHandWriteMoney().setEditable(false);
//
//				// 重新计算运费
//				CalculateFeeTotalUtils.resetCalculateFee(bean);
//			}
//			// 手写输入金额输入框
//			ui.billingPayPanel.getTxtHandWriteMoney().setEditable(true);
//
//		}
		// 修改完是否免费接货不能立即提交需要再次计算运费
		if (ui.getPictureWaybillType() != null
				&& WaybillConstants.WAYBILL_PICTURE.equals(ui
						.getPictureWaybillType().trim())) {
			String weight = ui.pictureCargoInfoPanel.getTxtWeight().getText();
			String volume = ui.pictureCargoInfoPanel.getTxtVolume().getText();
				if (StringUtils.isNotBlank(weight)
					&& new BigDecimal(weight).compareTo(new BigDecimal(0)) > 0
					&& StringUtils.isNotBlank(volume)
					&& new BigDecimal(volume).compareTo(new BigDecimal(0)) > 0) {				ui.incrementPanel.getBtnCalculate().setEnabled(true);
				ui.billingPayPanel.getBtnSubmit().setEnabled(false);// 提交为不可编辑
				ui.billingPayPanel.getBtnSubmitAndNextSingle()
						.setEnabled(false);
				ui.incrementPanel.getJlable().setVisible(false);
				ui.incrementPanel.getCombServiceRate().setVisible(false);
			} else {
				ui.incrementPanel.getBtnCalculate().setEnabled(false);
				ui.billingPayPanel.getBtnSubmit().setEnabled(true);// 提交为不可编辑
				ui.billingPayPanel.getBtnSubmitAndNextSingle().setEnabled(true);
				ui.incrementPanel.getJlable().setVisible(true);
				ui.incrementPanel.getCombServiceRate().setVisible(true);
			}

		} else {
			ui.billingPayPanel.getBtnSubmit().setEnabled(false);// 提交为不可编辑
			ui.buttonPanel.getBtnSubmit().setEnabled(false);// 提交为不可编辑
		}
	
		
	}

	/**
	 * 代收货款手续费
	 * @param bean
	 * @author 272311-sangwenhao
	 * @date 2016-1-13
	 */
	private void codFeeListener(WaybillPanelVo bean) {
		try {
			//合伙人项目
			if(BZPartnersJudge.IS_PARTENER){
				BigDecimal codFee = bean.getCollectingFee() != null ? bean.getCollectingFee() : BigDecimal.ZERO;//修改后
				// 获取 代收手续费 提成
				ConfigurationParamsEntity configuration = BaseDataServiceFactory
						.getBaseDataService()
						.queryConfigurationParamsByEntity(
								DictionaryConstants.SYSTEM_CONFIG_PARM__PKP,
								ConfigurationParamsConstants.PKP_FOSS_COD_FEE_DISCOUNT,
								FossConstants.ROOT_ORG_CODE);
				if (null != configuration
						&& StringUtils.isNotBlank(configuration.getConfValue())) {
					double temp = Double.parseDouble(configuration
							.getConfValue());
					BigDecimal discount = BigDecimal.valueOf(temp);
					BigDecimal discountedValue = bean.getPtpWaybillOrgVo().getCodFee().multiply(discount).setScale(2, BigDecimal.ROUND_HALF_UP);
					//画布
					bean.setCodFee(codFee);
					CalculateFeeTotalUtils.resetCalculateFee(bean);
					if (discountedValue.compareTo(codFee) > 0) {
						// 低于德邦成本
						MsgBox.showInfo(i18n.get("foss.gui.creating.listener.Waybill.codeFeeListener.one",discountedValue));
					}
				}// if end
			}// if end
		} catch (Exception e) {
			log.error("代收手续费联动异常："+e.getMessage());
			throw new WaybillValidateException("代收手续费联动异常："+e.getMessage());
		}
	}

	//保价费
	private void supportFeeListener(WaybillPanelVo bean) {
		try {
			// 合伙人项目
			if (BZPartnersJudge.IS_PARTENER) {
				BigDecimal insuranceFee = bean.getSupportFee() != null ? bean.getSupportFee() : BigDecimal.ZERO;
				// 获取 保价费 提成
				ConfigurationParamsEntity configuration = BaseDataServiceFactory
						.getBaseDataService()
						.queryConfigurationParamsByEntity(
								DictionaryConstants.SYSTEM_CONFIG_PARM__PKP,
								ConfigurationParamsConstants.PKP_FOSS_INSURANCE_FEE_DISCOUNT,
								FossConstants.ROOT_ORG_CODE);
				if (null != configuration&& StringUtils.isNotBlank(configuration.getConfValue())) {
					double temp = Double.parseDouble(configuration.getConfValue());
					BigDecimal discount = BigDecimal.valueOf(temp);
					BigDecimal discountedValue =  bean.getPtpWaybillOrgVo().getInsuranceFee().multiply(discount).setScale(2, BigDecimal.ROUND_HALF_UP);
					//画布
					bean.setInsuranceFee(insuranceFee);
					CalculateFeeTotalUtils.resetCalculateFee(bean);
					if (discountedValue.compareTo(insuranceFee) > 0) {
						// 低于德邦成本
						MsgBox.showInfo(i18n.get("foss.gui.creating.listener.Waybill.supportFeeListener.one",discountedValue));
					}	
				}// if end
				
			}// if end

		} catch (Exception e) {
			log.error("保价费联动异常：" + e.getMessage());
			throw new WaybillValidateException("保价费联动异常："+e.getMessage());
		}
	}

	/**
	 * 空运重新选择货物类型将【提交】按钮设置为不可编辑
	 * 
	 * @param bean
	 */
	public void isChangeAirGoodsTypes(WaybillPanelVo bean) {
		Common.setSaveAndSubmitFalse(ui);
	}

	// 住宅区监听
	public void residentialDistrictListener(Boolean falg, WaybillPanelVo bean) {
		if (falg) {
			bean.setBusinessZone(false);
		}
	}

	// 商业区监听
	public void businessZoneListener(Boolean falg, WaybillPanelVo bean) {
		if (falg) {
			bean.setResidentialDistrict(false);
		}
	}

	/**
	 * 市场推广活动名称监听事件
	 * 
	 * @创建时间 2014-5-20 上午10:46:58
	 * @创建人： WangQianJin
	 */
	private void activeInfoListener(WaybillPanelVo bean) {
		// 提交为不可编辑
		if (ui.getPictureWaybillType() != null
				&& WaybillConstants.WAYBILL_PICTURE.equals(ui
						.getPictureWaybillType().trim())) {
			String weight = ui.pictureCargoInfoPanel.getTxtWeight().getText();
			String volume = ui.pictureCargoInfoPanel.getTxtVolume().getText();
			if (StringUtils.isNotBlank(weight)
					&& new BigDecimal(weight).compareTo(new BigDecimal(0)) > 0
					&& StringUtils.isNotBlank(volume)
					&& new BigDecimal(volume).compareTo(new BigDecimal(0)) > 0) {				ui.incrementPanel.getBtnCalculate().setEnabled(true);
		ui.billingPayPanel.getBtnSubmit().setEnabled(false);
				ui.billingPayPanel.getBtnSubmitAndNextSingle()
						.setEnabled(false);
				ui.incrementPanel.getJlable().setVisible(false);
				ui.incrementPanel.getCombServiceRate().setVisible(false);
			} else {
				ui.incrementPanel.getBtnCalculate().setEnabled(false);
				ui.billingPayPanel.getBtnSubmit().setEnabled(true);// 提交为不可编辑
				ui.billingPayPanel.getBtnSubmitAndNextSingle().setEnabled(true);
				ui.incrementPanel.getJlable().setVisible(true);
				ui.incrementPanel.getCombServiceRate().setVisible(true);
			}
		} else {
			ui.billingPayPanel.getBtnSubmit().setEnabled(false);// 提交为不可编辑
		ui.buttonPanel.getBtnSubmit().setEnabled(false);
		}
	}

	// 整车发票标记
	private void invoiceMethodListener(WaybillPanelVo bean) {
		DataDictionaryValueVo vo = bean.getInvoiceMode();
		if (null != vo) {
			bean.setInvoice(vo.getValueCode());
			if (bean.getIsWholeVehicle()) {
				//发票标记 与 统一结算 无关联 --sangwenhao-272311
				// 弹出框提示是否选择
				/*if (bean.getInvoice() != null
						&& "INVOICE_TYPE_01".equals(bean.getInvoice())) {
					if (JOptionPane.YES_OPTION != JOptionPane
							.showConfirmDialog(
							ui,
							i18n.get("foss.gui.creating.calculateVehicleDialog.isFirstinvoiceMark"),
							i18n.get("foss.gui.creating.calculateAction.msgBox.Prompt"),
							JOptionPane.YES_NO_OPTION)) {
						// 如果选择否，则清空发票标记
						ui.consignerPanel.getCombInvoiceMode().setSelectedItem(
								null);
						bean.setInvoice(null);
						bean.setInvoiceTab(null);
						return;
					}
				}*/
				//发票标记 与 统一结算 无关联 --sangwenhao-272311
				// 弹出框提示是否选择
				/*if (bean.getInvoice() != null
						&& "INVOICE_TYPE_02".equals(bean.getInvoice())) {
					if (JOptionPane.YES_OPTION != JOptionPane
							.showConfirmDialog(
							ui,
							i18n.get("foss.gui.creating.calculateVehicleDialog.isSecondinvoiceMarkOrNull"),
							i18n.get("foss.gui.creating.calculateAction.msgBox.Prompt"),
							JOptionPane.YES_NO_OPTION)) {
						// 如果选择否，则清空发票标记
						ui.consignerPanel.getCombInvoiceMode().setSelectedItem(
								null);
						bean.setInvoice(null);
						bean.setInvoiceTab(null);
						return;
					}
				}*/
				UserEntity user = (UserEntity) SessionContext.getCurrentUser();
				// 调用接口查询整车价格参数波动方案
				setSettleInvoice(bean, vo.getValueCode());
				CarloadPricePlanDto carloadDto = baseDataService
						.queryByConfCode(new Date(), vo.getValueCode(), user
								.getEmployee().getDepartment().getCode());
				if (null != carloadDto) {
					// 整车约车报价波动范围上限
					bean.setWholeVehicleActualfeeFlowRangeUp(carloadDto
							.getFloatUp());
					// 整车约车报价波动范围下限
					bean.setWholeVehicleActualfeeFlowRangeLow(carloadDto
							.getFloatDown());
					/**
					 * DMANA-3563 整车开单判断是否盈利 新增参数
					 */
					// 重量参数
					bean.setWholeVehicleWeightParameter(carloadDto
							.getWeightParameter());
					// 包装费参数
					bean.setWholeVehiclePackageFeeParameter(carloadDto
							.getPackageFeeParameter());
					// 其他成本参数
					bean.setWholeVehicleOtherCostParameter(carloadDto
							.getOtherCostParameter());
					// 人力成本参数
					bean.setWholeVehicleHumanCostParameter(carloadDto
							.getHumanCostParameter());
					// 车价参数
					bean.setWholeVehicleCarCostParameter(carloadDto
							.getCarCostParameter());
				} else {
					throw new WaybillValidateException("没有查询到相应的整车价格参数波动方案");
				}
			}

		}
	}

	/**
	 * 对于整车而言 ： 发票标记的处理
	 * 
	 * @param bean
	 * @param invoice
	 */
	private void setSettleInvoice(WaybillPanelVo bean, String invoice) {
		//统一结算 发票标记 -- sangwenhao-272311
		if(StringUtils.isBlank(bean.getStartCentralizedSettlement())){
			CustomerQueryConditionDto cDto = new CustomerQueryConditionDto();
			if (null != bean.getDeliveryCustomerCode()) {
				cDto.setCustCode(bean.getDeliveryCustomerCode());
			}
			CusBargainEntity cusB = CommonUtils
					.queryCusBargainByCustCode(cDto);
			if (null == cusB) {
				bean.setStartCentralizedSettlement(WaybillConstants.IS_NULL_FOR_AI);
				bean.setStartContractOrgCode(null);
				bean.setStartContractOrgName(null);
			} else {
				if (FossConstants.YES.equals(cusB.getAsyntakegoodsCode())) {
					bean.setStartCentralizedSettlement(WaybillConstants.IS_NOT_NULL_FOR_AI);
					bean.setStartContractOrgCode(cusB.getUnifiedCode());
					bean.setStartContractOrgName(CommonUtils
							.queryContractOrgName(cusB.getUnifiedCode()));
				} else {
					bean.setStartCentralizedSettlement(WaybillConstants.IS_NULL_FOR_AI);
					bean.setStartContractOrgCode(null);
					bean.setStartContractOrgName(null);
				}
			}
		}
		/*if (WaybillConstants.IS_NOT_NULL_FOR_AI.equals(bean
				.getStartCentralizedSettlement())) {
			if (WaybillConstants.INVOICE_01.equals(invoice)) {
				bean.setStartCentralizedSettlement(WaybillConstants.IS_NULL_FOR_AI);
				bean.setStartContractOrgCode(null);
				bean.setStartContractOrgName(null);
			}
		} else {
			if (WaybillConstants.INVOICE_01.equals(invoice)) {
				bean.setStartCentralizedSettlement(WaybillConstants.IS_NULL_FOR_AI);
				bean.setStartContractOrgCode(null);
				bean.setStartContractOrgName(null);
			} else {
				CustomerQueryConditionDto cDto = new CustomerQueryConditionDto();
				if (null != bean.getDeliveryCustomerCode()) {
					cDto.setCustCode(bean.getDeliveryCustomerCode());
				}
				CusBargainEntity cusB = CommonUtils
						.queryCusBargainByCustCode(cDto);
				if (null == cusB) {
					bean.setStartCentralizedSettlement(WaybillConstants.IS_NULL_FOR_AI);
					bean.setStartContractOrgCode(null);
					bean.setStartContractOrgName(null);
				} else {
					if (FossConstants.YES.equals(cusB.getAsyntakegoodsCode())) {
						bean.setStartCentralizedSettlement(WaybillConstants.IS_NOT_NULL_FOR_AI);
						bean.setStartContractOrgCode(cusB.getUnifiedCode());
						bean.setStartContractOrgName(CommonUtils
								.queryContractOrgName(cusB.getUnifiedCode()));
					} else {
						bean.setStartCentralizedSettlement(WaybillConstants.IS_NULL_FOR_AI);
						bean.setStartContractOrgCode(null);
						bean.setStartContractOrgName(null);
					}
				}
			}
		}*/

	}

	/**
	 * 
	 * 是否自提件监控
	 * 
	 * @author WangQianJin
	 * @date 2013-08-16
	 */
	private void isEconomyGoodsListener(WaybillPanelVo bean) {
		// 判断是否是自提件
		if (bean.getIsEconomyGoods() != null && bean.getIsEconomyGoods()) {
			validateEconomyGoodsType(bean);
			// 经济自提件上门接货不能编辑
			ui.getBasicPanel().getCboReceiveModel().setEnabled(false);
			// 自提件类型
			DataDictionaryValueVo initVo = getEconomyGoodsTypeByChannel(bean);
			bean.setEconomyGoodsType(initVo);
			// 设置自提件运输性质
			Common.economyGoodsTypeListener(bean, ui);
			// 设置自提件提货方式
			Common.setEconomyReceiveMethod(bean);
			if (StringUtils.isNotBlank(ui.getPictureWaybillType())
					&& WaybillConstants.WAYBILL_PICTURE.equals(ui
							.getPictureWaybillType())) {
				ui.pictureTransferInfoPanel.getCombPickMode().setEnabled(false);
			} else {
				ui.transferInfoPanel.getCombPickMode().setEnabled(false);
			}
			// 设置储运事项
			Common.economySetTransportationRemark(bean);
		} else {
			// 自提件类型
			DataDictionaryValueVo initVo = new DataDictionaryValueVo();
			bean.setEconomyGoodsType(initVo);
			// 设置上门接货可编辑
			ui.getBasicPanel().getCboReceiveModel().setEnabled(true);
			// 设置非自提件的运输性质
			Common.initCombProductType(bean, ui);
			// 设置非自提件的提货方式
			Common.initCombPickMode(ui);
			if (StringUtils.isNotBlank(ui.getPictureWaybillType())
					&& WaybillConstants.WAYBILL_PICTURE.equals(ui
							.getPictureWaybillType())) {
				ui.pictureTransferInfoPanel.getCombPickMode().setEnabled(true);
			} else {
				ui.transferInfoPanel.getCombPickMode().setEnabled(true);
			}
			// 设置储运事项
			Common.economySetTransportationRemark(bean);
		}
	}

	/**
	 * 是否是精准大票
	 * 
	 * @date 2014-06-30
	 */
	private void isBigGoodsListener(Boolean falg, WaybillPanelVo bean) {
		// 营业部开单
		DefaultComboBoxModel productTypeModel = ui.getProductTypeModel();
		DefaultComboBoxModel pickModel = ui.getPikcModeModel();
		productTypeModel.removeAllElements();
		pickModel.removeAllElements();
		if (WaybillConstants.WAYBILL_SALE_DEPARTMENT
				.equals(ui.getWaybillType())) {
			// 获取当前登陆用户
			UserEntity user = (UserEntity) SessionContext.getCurrentUser();
			// 当前登陆用户所在的部门
			OrgAdministrativeInfoEntity dept = user.getEmployee()
					.getDepartment();
			// 设置产品到数据模型
			Common.modifyProductTypeModel(productTypeModel, dept.getCode(),
					falg);
			Common.modifyProductCode(bean, falg, productTypeModel);
			// 设置提货方式
			Common.modifyPickModel(ui,pickModel, falg);
			// 设置提货方式的默认值
			Common.modifyReceiveMethod(bean, pickModel);
			//
			// productCodeListener(bean);
			/*
			 * bean.setTargetOrgCode(null); bean.setCustomerPickupOrgCode(null);
			 * bean.setCustomerPickupOrgName(null);
			 */
			cleanTargetEmpty(bean);
		} else if (WaybillConstants.WAYBILL_FOCUS.equals(ui.getWaybillType())) {
			String receiveOrgCode = bean.getReceiveOrgCode();
			Common.modifyProductTypeModel(productTypeModel, receiveOrgCode,
					falg);
			Common.modifyProductCode(bean, falg, productTypeModel);
			// 设置提货方式
			Common.modifyPickModel(ui,pickModel, falg);
			// 设置提货方式的默认值
			Common.modifyReceiveMethod(bean, pickModel);
			cleanTargetEmpty(bean);

		}

		if (bean.getIsBigGoods()) {
			ui.incrementPanel.getCombActiveInfo().setSelectedItem(null);
			ui.incrementPanel.getCombActiveInfo().setEnabled(false);
		} else {
			ui.incrementPanel.getCombActiveInfo().setEnabled(true);
			// 防止：如果运输性质为【门到门】的时候，上门接货的选择框是选上；然后取消精准大票后，上门接货选择框依旧被选中
			// DEFECT-5206集中开单组开案，取消勾选精准大票，上门接货跟着取消勾选问题
			if (Boolean.FALSE.equals(bean.getPickupCentralized())) {
				ui.basicPanel.getCboReceiveModel().setSelected(false);
				ui.basicPanel.getCboReceiveModel().setEnabled(true);
		}
	}
	}

	/**
	 * 校验是否自提件
	 * 
	 * @author WangQianJin
	 * @date 2013-08-21
	 */
	private void validateEconomyGoodsType(WaybillPanelVo bean) {
		boolean flag = false;
		EconomyVo ecoVo = null;
		// 根据开单日期获取自提件类型列表
		List<MinFeePlanEntity> minFeeList = waybillService
				.getMinFeePlanEntityByDate(bean.getBillTime());
		if (minFeeList != null && minFeeList.size() > 0) {
			// 循环遍历筛选
			for (MinFeePlanEntity entity : minFeeList) {
				// 判断是否能做自提件
				ecoVo = Common.getIsDefaultSelected(bean, entity);
				// 如果导入的订单符合经济自提件并且是非上门接货，则默认选中
				if (ecoVo.isResult()) {
					flag = true;
					break;
				}
			}
			// 不符合条件，给予提示
			if (!flag && ecoVo != null) {
				// 没有符合条件的渠道信息，请检查最低一票方案是否配置以及运输性质、提货方式、上门接货是否符合自提件要求！
				if (!ecoVo.isResult()) {
					throw new WaybillValidateException(
							i18n.get("foss.gui.creating.winbillbindinglistenter.iserror.isresult"));
			}
	}
		} else {
			// 没有符合条件的渠道信息，请检查最低一票方案是否配置！
			throw new WaybillValidateException(
					i18n.get("foss.gui.creating.winbillbindinglistenter.iserror.minfeelist"));
		}
	}

	/**
     * 设置能否开经济自提件
	 * 
     * @param panelVo
     */
	private DataDictionaryValueVo getEconomyGoodsTypeByChannel(
			WaybillPanelVo panelVo) {
		DataDictionaryValueVo economyVo = new DataDictionaryValueVo();
		if (panelVo.getOrderChannel() != null) {
			// 根据开单日期获取自提件类型列表
			List<MinFeePlanEntity> minFeeList = waybillService
					.getMinFeePlanEntityByDate(panelVo.getBillTime());
			if (minFeeList != null && minFeeList.size() > 0) {
				// 循环遍历筛选
				for (MinFeePlanEntity entity : minFeeList) {
					if (entity != null) {
						// 判断是否能做自提件
						EconomyVo ecoVo = Common.getIsDefaultSelected(panelVo,
								entity);
						// 如果符合条件，则获取自提件信息
						if (ecoVo.isResult()) {
							economyVo.setId(entity.getId());
							economyVo.setValueCode(entity.getChannelCode());
							economyVo.setValueName(entity.getPlanName());
							break;
						}
					}
			}
    	}
		}
    	return economyVo;
    }

	/**
	 * 
	 * 公里数事件监听
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2013-4-24
	 */
	private void kilometerListener(WaybillPanelVo bean) {
		Common.setSaveAndSubmitFalse(ui);
		bean.setHandDeliveryFee(null);
	}

	/**
	 * 设置收货部门
	 * 
	 * @param bean
	 * @author 026113-foss-linwensheng
	 * @date 2013-4-15 下午7:25:09
	 */
	private void receiveOrgName(WaybillPanelVo bean) {
		if (StringUtil.isNotEmpty(bean.getReceiveOrgName())) {

			// 获取当前用户
			UserEntity user = (UserEntity) SessionContext.getCurrentUser();
			// 当前用户所在部门
			OrgAdministrativeInfoEntity dept = user.getEmployee()
					.getDepartment();
			List<SaleDepartmentEntity> saleDepartmentEntitys = waybillService
					.querySaleDepartmentByNameForCentralized(
							bean.getReceiveOrgName(), dept.getCode());

			if (saleDepartmentEntitys != null
					&& saleDepartmentEntitys.size() > 0) {

				if (saleDepartmentEntitys.size() == 1) {
					// 设置收获部门信息
					Common.setSalesDepartmentForCentrial(
							saleDepartmentEntitys.get(0), bean, ui);
				} else {

					showDept(bean.getReceiveOrgName(), saleDepartmentEntitys,
							bean);

				}
			} else {
				showDept(bean.getReceiveOrgName(), saleDepartmentEntitys, bean);
			}
		}
	}

	private void showDept(String orgName,
			List<SaleDepartmentEntity> saleDepartmentEntitys,
			WaybillPanelVo bean) {
		try {
			// 弹出查询收货部门对话框
			SalesDepartmentDialog dialog = new SalesDepartmentDialog(
					bean.getReceiveOrgName(), saleDepartmentEntitys);
			// 剧中显示弹出窗口
			WindowUtil.centerAndShow(dialog);
			// 获得收获部门信息
			SaleDepartmentEntity entity = dialog.getSaleDepartmentEntity();
			// 设置收获部门信息
			Common.setSalesDepartmentForCentrial(entity, bean, ui);
			/**
			 * 当导入的PDA运单没有收货部门时，需要手工设置收货部门 当手动设置收货部门时，系统初始化产品类型，
			 * 设置产品类型时，同时需要自动设置提货方式
			 */
			// 根据运输性质的改变，改变提货方式
			Common.changePickUpMode(bean, ui);

		} catch (WaybillValidateException w) {
			MsgBox.showInfo(w.getMessage());
		}
	}

	/**
	 * 开单报价
	 * 
	 * @param bean
	 */
	private void transportFeeListener(WaybillPanelVo bean) {
		ConfigurationParamsEntity configuration = BaseDataServiceFactory
				.getBaseDataService()
				.queryConfigurationParamsByEntity(
						DictionaryConstants.SYSTEM_CONFIG_PARM__PKP,
						ConfigurationParamsConstants.CREATING_PARTNER_ORDER_DISCOUNT,
						FossConstants.ROOT_ORG_CODE);
		if (null != configuration
				&& StringUtils.isNotBlank(configuration.getConfValue())) {
			if(BZPartnersJudge.IS_PARTENER){//合伙人需求
				double temp = Double.parseDouble(configuration.getConfValue());
				int intValue2 = bean.getTransportFee().intValue();
				if (intValue2 != 0 && bean.getTempTransportFee() != null) {
					int transportFee = bean.getTempTransportFee().intValue();
					int intValue = (int) (transportFee * temp );
					bean.setTransportFeeCanvas(intValue2+"");
					CalculateFeeTotalUtils.resetCalculateFee(bean);
					if (intValue2 < intValue) {
						MsgBox.showInfo(i18n.get("foss.gui.creating.listener.Waybill.transportFeeBZPMsgBox",intValue));
					}
				}
			}else{
				double temp = Double.parseDouble(configuration.getConfValue());
				int intValue2 = bean.getTransportFee().intValue();
				if (intValue2 != 0 && bean.getTempTransportFee() != null) {
					int transportFee = bean.getTempTransportFee().intValue();
					int intValue = (int) (transportFee * temp + ZEROPOINTFIVE);
					if (intValue2 >= intValue) {
						Common.getYokeCharge(bean, ui);
						CalculateFeeTotalUtils.calculateFee(bean);
						ui.billingPayPanel.getBtnSubmit().setEnabled(true);
						ui.buttonPanel.getBtnSubmit().setEnabled(true);
					} else {
						MsgBox.showInfo(i18n
								.get("foss.gui.creating.listener.Waybill.transportFeeMsgBox"+" ")
								+ intValue);
						ui.billingPayPanel.getBtnSubmit().setEnabled(false);
						ui.buttonPanel.getBtnSubmit().setEnabled(false);
					}
				}//if end
			}//if end
		} else {
			int intValue2 = bean.getTransportFee().intValue();
			if (intValue2 != 0 && bean.getTempTransportFee() != null) {
				int transportFee = bean.getTempTransportFee().intValue();
				int intValue = (int) (transportFee * ZEROPOINTTHREEFIVE + ZEROPOINTFIVE);
				if (intValue2 >= intValue) {
					Common.getYokeCharge(bean, ui);
					CalculateFeeTotalUtils.calculateFee(bean);
					ui.billingPayPanel.getBtnSubmit().setEnabled(true);
					ui.buttonPanel.getBtnSubmit().setEnabled(true);
				} else {
					MsgBox.showInfo(i18n
							.get("foss.gui.creating.listener.Waybill.transportFeeMsgBox")
							+ intValue);
					ui.billingPayPanel.getBtnSubmit().setEnabled(false);
					ui.buttonPanel.getBtnSubmit().setEnabled(false);
				}
			}
		}
		if (!bean.getIsWholeVehicle()) {
			return;
		}

		if (bean.getTransportFee() == null) {
			return;
		}
		BigDecimal rateUp = bean.getWholeVehicleActualfeeFlowRangeUp();

		BigDecimal rateLow = bean.getWholeVehicleActualfeeFlowRangeLow();
		if (rateLow == null) {
			MsgBox.showInfo(i18n
					.get("foss.gui.creating.listener.Waybill.transportFee.one"));
			rateLow = BigDecimal.valueOf(ZEROPOINTONE);
		}

		BigDecimal upLevel = null;
		if (rateUp != null) {
			BigDecimal uprate = BigDecimal.ONE.add(rateUp);
			upLevel = bean.getWholeVehicleAppfee().multiply(uprate);
		}
		BigDecimal lowrate = BigDecimal.ONE.add(rateLow);
		BigDecimal lowLevel = bean.getWholeVehicleAppfee().multiply(lowrate);

		if (upLevel != null && upLevel.doubleValue() > 0) {
			if (bean.getTransportFee().doubleValue() < lowLevel.doubleValue()
					|| bean.getTransportFee().doubleValue() > upLevel
							.doubleValue()) {
    			bean.setTransportFee(bean.getWholeVehicleAppfee());
				bean.setTransportFeeCanvas(bean.getWholeVehicleAppfee()
						.toString());
				MsgBox.showInfo(i18n
						.get("foss.gui.creating.listener.Waybill.transportFee.two")
						+ lowLevel.doubleValue() + "~" + upLevel.doubleValue());
    		} else {
    			bean.setWholeVehicleActualfee(bean.getTransportFee());
    		}
		} else {
			if (bean.getTransportFee().doubleValue() < lowLevel.doubleValue()) {
    			bean.setTransportFee(bean.getWholeVehicleAppfee());
				bean.setTransportFeeCanvas(bean.getWholeVehicleAppfee()
						.toString());
				MsgBox.showInfo(i18n
						.get("foss.gui.creating.listener.Waybill.transportFee.three")
						+ lowLevel.doubleValue());
    		} else {
    			bean.setWholeVehicleActualfee(bean.getTransportFee());
    		}
		}

		Common.setSaveAndSubmitFalse(ui);
	}

	/**
	 * 
	 * 运单号事件监听
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-11-3 下午02:54:46
	 */
	private void waybillNoListener(WaybillPanelVo bean) {
		String waybill = bean.getWaybillNo();
		if (StringUtils.isNotBlank(waybill) && !ui.isBatchWaybill()) {
			int waybillNo = Integer.parseInt(waybill.trim());
			if (rangeInDefined(waybillNo, NUM_310000001, NUM_313000000)) {
				MsgBox.showInfo(i18n
						.get("foss.gui.creating.waybillDescriptor.waybillNo.isNotBatchWaybill"));
	        	bean.setWaybillNo(null);
	        }
		}
		ui.numberPanel.getLblNumber().setText(bean.getWaybillNo());
		/**
		 * 如果不是集中开单验证连续开单的号是否相差太大(大于100)
		 */
		if (!bean.getPickupCentralized()) {
			boolean bool = waybillService.checkWaybillNoInterval(bean
					.getWaybillNo());
			if (bool) {
				log.info(i18n
						.get("foss.gui.creating.waybillDescriptor.waybillNo.speace"));
				MsgBox.showInfo(i18n
						.get("foss.gui.creating.waybillDescriptor.waybillNo.speace"));
			}
		}
		/**
		 * 如果是DPA待补录验证
		 */
		WaybillPendingDto waybillPendingDto = waybillService
				.queryPendingWaybill(bean.getWaybillNo());
		if (waybillPendingDto != null
				&& waybillPendingDto.getWaybillPending() != null) {
			if (WaybillConstants.WAYBILL_STATUS_PDA_PENDING
					.equals(waybillPendingDto.getWaybillPending()
							.getPendingType())) {
				MsgBox.showInfo(i18n
						.get("foss.gui.creating.waybillDescriptor.waybillNo.isPDApending"));
				// zxy 20131014 BUG-55269 start
				// 修改：不能给bean赋值，否则下次触发调用会失效；下面的修改只是变通方式
				// bean.setWaybillNo("");
				ui.basicPanel.getTxtWaybillNO().setText("");
				ui.numberPanel.getLblNumber().setText("");
				// zxy 20131014 BUG-55269 end
				// 修改：不能给bean赋值，否则下次触发调用会失效；下面的修改只是变通方式
			}
		}
	}

	/**
	 * 
	 * <p>
	 * (货物品名事件监听)
	 * </p>
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-10-19 下午03:09:04
	 * @see
	 */
	private void gooodsNameListener(WaybillPanelVo bean) {
		if (ui.getPictureWaybillType() != null
				&& WaybillConstants.WAYBILL_PICTURE.equals(ui
						.getPictureWaybillType().trim())) {
			String weight = ui.pictureCargoInfoPanel.getTxtWeight().getText();
			String volume = ui.pictureCargoInfoPanel.getTxtVolume().getText();
				if (StringUtils.isNotBlank(weight)
					&& new BigDecimal(weight).compareTo(new BigDecimal(0)) > 0
					&& StringUtils.isNotBlank(volume)
					&& new BigDecimal(volume).compareTo(new BigDecimal(0)) > 0) {				ui.incrementPanel.getBtnCalculate().setEnabled(true);
				ui.billingPayPanel.getBtnSubmit().setEnabled(false);// 提交为不可编辑
				ui.billingPayPanel.getBtnSubmitAndNextSingle()
						.setEnabled(false);
				ui.incrementPanel.getJlable().setVisible(false);
				ui.incrementPanel.getCombServiceRate().setVisible(false);
			} else {
				ui.incrementPanel.getBtnCalculate().setEnabled(false);
				ui.billingPayPanel.getBtnSubmit().setEnabled(true);// 提交为不可编辑
				ui.billingPayPanel.getBtnSubmitAndNextSingle().setEnabled(true);
				ui.incrementPanel.getJlable().setVisible(true);
				ui.incrementPanel.getCombServiceRate().setVisible(true);
			}

		} else {
			ui.billingPayPanel.getBtnSubmit().setEnabled(false);// 提交为不可编辑
			ui.buttonPanel.getBtnSubmit().setEnabled(false);// 提交为不可编辑
		}
		if (bean != null && !bean.getIsWholeVehicle()) {
			// 是否限保物品
			isInsurGoods(bean);
			// 是否贵重物品
			isValuablesGoods(bean);
		}
		//重新设置一下货源品
		if(bean != null){
			Common.fillIndustrySourceCategoryData(bean, ui);
		}
	}

	/**
	 * 
	 * 是否限保物品
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-11-12 下午02:49:13
	 */
	private void isInsurGoods(WaybillPanelVo bean) {
		/**
		 * 判断是否限保物品 1. SUC-494-录入货物信息 规则： SR1： 3.
		 * 若货物为限保物品，则系统自动限定保价金额，且不可修改，并提示“货物为限保物品”；
		 */
		LimitedWarrantyItemsEntity entity = waybillService.isInsurGoods(bean
				.getGoodsName());
		if (entity != null) {
			MsgBox.showInfo(i18n
					.get("foss.gui.creating.listener.Waybill.insurGoods.one"));
			bean.setVirtualCode(entity.getVirtualCode());
			bean.setLimitedAmount(entity.getLimitedAmount());// 限制报价金额
			ui.incrementPanel.getTxtInsuranceValue().setEnabled(false);// 设置为不可编辑
			/**
			 * 如果限保物品保价金额为空时：设置为0，不可编辑
			 */
			if (entity.getLimitedAmount() != null) {
				bean.setInsuranceAmount(entity.getLimitedAmount());
				bean.setInsuranceAmountCanvas(entity.getLimitedAmount()
						.toString());
			} else {
				bean.setInsuranceAmount(BigDecimal.ZERO);
				bean.setInsuranceAmountCanvas(ZERO);
			}
		} else {
			ui.incrementPanel.getTxtInsuranceValue().setEnabled(true);// 设置可编辑
			bean.setVirtualCode("");
		}
	}

	/**
	 * 
	 * 根据名称判断是否贵重物品
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-12-22 下午03:46:17
	 * @param WaybillBindingListener
	 */
	private void isValuablesGoods(WaybillPanelVo bean) {
		isValueGoods(bean);
	}

	/**
	 * 
	 * <p>
	 * (是否上门接货事件监听)
	 * </p>
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-10-20 上午09:04:07
	 * @see
	 */
	private void pickupToDoorListener(WaybillPanelVo bean) {
		boolean bool = ui.basicPanel.getCboReceiveModel().isSelected();
		ProductEntityVo vo = bean.getProductCode();
		if (bool) {
			if (StringUtils.isNotBlank(ui.getPictureWaybillType())
					&& WaybillConstants.WAYBILL_PICTURE.equals(ui
							.getPictureWaybillType())) {
				// 司机工号输入框
				ui.basicPanel.getTxtDriverNumber().setEditable(false);
				// 接货费输入框
				// ui.billingPayPanel.getTxtPickUpCharge().setEditable(false);
			} else {				
				// 接货费输入框
				//2016年1月14日 07:55:56 葛亮亮 合伙人如果前面一次操作时有接货费则可以修改
				if(BZPartnersJudge.IS_PARTENER){
					//接货费
					BigDecimal pickupFee = bean.getPickupFee();					
					if (pickupFee == null)
					{
						pickupFee = BigDecimal.ZERO;
					}
					if(pickupFee.compareTo(BigDecimal.ZERO) > 0){
						//设置接货费最大值
						bean.setMaxPickupFee(new BigDecimal(NUM_10000));
						//设置接货费最小值
						bean.setMinPickupFee(new BigDecimal(0));
						ui.billingPayPanel.getTxtPickUpCharge().setEditable(true);
						ui.billingPayPanel.getTxtPickUpCharge().setEnabled(true);
					}
				}else{
				  // 司机工号输入框
				  ui.basicPanel.getTxtDriverNumber().setEnabled(true);
				  ui.basicPanel.getTxtDriverNumber().setEditable(true);
				  ui.billingPayPanel.getTxtPickUpCharge().setEditable(false);
				}
			}
			// 手写输入金额输入框
			ui.billingPayPanel.getTxtHandWriteMoney().setEditable(true);
			// 营业部开单时 WAYBILL_SALE_DEPARTMENT data：2016年2月20日16:31:16 author：wangshuai
			if (StringUtils.isNotBlank(ui.getWaybillType())&& WaybillConstants.WAYBILL_SALE_DEPARTMENT.equals(ui.getWaybillType())) {
							// 获取界面客户分群内容，客户分群为VIP或者全网活跃群
							
				if (ui.consignerPanel.getCombFlabelleavemonth().getSelectedItem()!=null&&
						("VIP群".equals(ui.consignerPanel.getCombFlabelleavemonth().getSelectedItem().toString())
								|| "全网活跃群".equals(ui.consignerPanel.getCombFlabelleavemonth().getSelectedItem().toString()))) {
								if(vo==null||!ProductEntityConstants.PRICING_PRODUCT_PCP.equals(vo.getCode())){
									// 设置免费接货（可勾选）。
									ui.basicPanel.getCboFreePickupGoods().setEnabled(true);
								}
							}
						}

		} else {// 营业部开单-上门接货未选中 data：2016年2月20日16:45:58 author ：wangshuai
				if (StringUtils.isNotBlank(ui.getWaybillType())
								&& WaybillConstants.WAYBILL_SALE_DEPARTMENT.equals(ui
										.getWaybillType())) {
				// 取消免费接货选中状态
				ui.basicPanel.getCboFreePickupGoods().setSelected(false);
				// 未勾选上门接货，不可勾选免费接货。
				ui.basicPanel.getCboFreePickupGoods().setEnabled(false);
				}

			if (!(StringUtils.isNotBlank(ui.getPictureWaybillType())
					&& WaybillConstants.WAYBILL_PICTURE.equals(ui
							.getPictureWaybillType()))) {
				// 司机工号
				bean.setDriverCode("");
				// 接货费输入框
				ui.billingPayPanel.getTxtPickUpCharge().setEditable(false);
			}

			// 接货费
			bean.setPickupFee(BigDecimal.ZERO);
			// 手写输入金额
			bean.setHandWriteMoney(BigDecimal.ZERO);
			// 画布-接货费
			bean.setPickUpFeeCanvas(bean.getPickupFee().toString());
			// 司机工号输入框(现在司机工号不受是否接货的限制，根据ISSUE-3164修改)
			ui.basicPanel.getTxtDriverNumber().setEditable(true);
			// 接货费输入框
			ui.billingPayPanel.getTxtPickUpCharge().setEditable(false);
			// 手写输入金额输入框
			ui.billingPayPanel.getTxtHandWriteMoney().setEditable(false);

			// 重新计算运费
			CalculateFeeTotalUtils.resetCalculateFee(bean);
		}
		// 修改完是否上门接货不能立即提交需要再次计算运费
		if (ui.getPictureWaybillType() != null
				&& WaybillConstants.WAYBILL_PICTURE.equals(ui
						.getPictureWaybillType().trim())) {
			String weight = ui.pictureCargoInfoPanel.getTxtWeight().getText();
			String volume = ui.pictureCargoInfoPanel.getTxtVolume().getText();
				if (StringUtils.isNotBlank(weight)
					&& new BigDecimal(weight).compareTo(new BigDecimal(0)) > 0
					&& StringUtils.isNotBlank(volume)
					&& new BigDecimal(volume).compareTo(new BigDecimal(0)) > 0) {				ui.incrementPanel.getBtnCalculate().setEnabled(true);
				ui.billingPayPanel.getBtnSubmit().setEnabled(false);// 提交为不可编辑
				ui.billingPayPanel.getBtnSubmitAndNextSingle()
						.setEnabled(false);
				ui.incrementPanel.getJlable().setVisible(false);
				ui.incrementPanel.getCombServiceRate().setVisible(false);
			} else {
				ui.incrementPanel.getBtnCalculate().setEnabled(false);
				ui.billingPayPanel.getBtnSubmit().setEnabled(true);// 提交为不可编辑
				ui.billingPayPanel.getBtnSubmitAndNextSingle().setEnabled(true);
				ui.incrementPanel.getJlable().setVisible(true);
				ui.incrementPanel.getCombServiceRate().setVisible(true);
			}

		} else {
			ui.billingPayPanel.getBtnSubmit().setEnabled(false);// 提交为不可编辑
			ui.buttonPanel.getBtnSubmit().setEnabled(false);// 提交为不可编辑
		}
	}

	/**
	 * 根据查询条件查询客户信息
	 * 
	 * @author 026123-foss-lifengteng
	 * @date 2012-11-22 下午7:25:50
	 */
	public List<CustomerQueryConditionDto> queryDeliveryCustomer(
			WaybillPanelVo bean) {
		// 查询条件
		List<CustomerQueryConditionDto> dtoList = new ArrayList<CustomerQueryConditionDto>();
		// 手机
		String mobilePhone = StringUtil.defaultIfNull(bean
				.getDeliveryCustomerMobilephone());
		// 电话
		String telePhone = StringUtil.defaultIfNull(bean
				.getDeliveryCustomerPhone());
		// 客户名称
		String custName = StringUtil.defaultIfNull(bean
				.getDeliveryCustomerName());

		// 解析多个电话号码的查询
		Map<String, List<String>> map = null;
		// 将电话号码中的手机号码解析出来
		List<String> mobiles = null;
		// 电话集合
		List<String> phones = null;

		// 判断名称是否为空
		if (StringUtils.isNotEmpty(custName)) {
			CustomerQueryConditionDto dto = new CustomerQueryConditionDto();
			dto.setCustName(custName);
			dto.setExactQuery(true);
			// 发票标记时间
			dto.setInvoiceDate(new Date());
			dtoList.add(dto);
		}
		// 判断手机是否为空
		else if (StringUtils.isNotEmpty(mobilePhone)) {
			mobiles = new ArrayList<String>();
			mobiles.add(mobilePhone);

			CustomerQueryConditionDto dto = new CustomerQueryConditionDto();
			dto.setMobilePhone(mobilePhone);
			dto.setExactQuery(true);
			// 发票标记时间
			dto.setInvoiceDate(new Date());
			dtoList.add(dto);
		}
		// 判断电话是否为空
		else if (StringUtils.isNotEmpty(telePhone)) {
			map = resolveMobileAndPhone(telePhone);
			mobiles = map.get("mobiles");
			phones = map.get("phones");

			CustomerQueryConditionDto dto = null;
			// 手机不为空时
			if (CollectionUtils.isNotEmpty(mobiles)) {
				for (String mobile : mobiles) {
					if (StringUtils.isEmpty(mobile)) {
						continue;
					}
					dto = new CustomerQueryConditionDto();
					dto.setMobilePhone(mobile);
					dto.setExactQuery(true);
					// 发票标记时间
					dto.setInvoiceDate(new Date());
					dtoList.add(dto);
				}
			}
			// 电话不为空时
			if (CollectionUtils.isNotEmpty(phones)) {
				for (String phone : phones) {
					if (StringUtils.isEmpty(phone)) {
						continue;
					}
					dto = new CustomerQueryConditionDto();
					dto.setContactPhone(phone);
					dto.setExactQuery(true);
					// 发票标记时间
					dto.setInvoiceDate(new Date());
					dtoList.add(dto);
				}
			}
		}

		// 根据条件查询客户信息
		List<CustomerQueryConditionDto> contactList = waybillService
				.queryCustomerByConditionList(dtoList);

		// 若CRM中查询无果，则从历史客户中查询
		if (CollectionUtils.isEmpty(contactList)) {
			if (CollectionUtils.isNotEmpty(mobiles)) {
				// 将手机中的号码加入集合进行查询
				mobiles.add(mobilePhone);
				List<CustomerQueryConditionDto> custMobile = waybillService
						.queryHisDeliveryCusByMobileList(mobiles);
				if (CollectionUtils.isNotEmpty(custMobile)) {
					if (CollectionUtils.isEmpty(contactList)) {
						contactList = custMobile;
					} else {
						contactList.addAll(custMobile);
					}
				}
			}
			// 电话号码不为空时
			if (CollectionUtils.isNotEmpty(phones)) {
				List<CustomerQueryConditionDto> custPhone = waybillService
						.queryHisDeliveryCusByPhoneList(phones);
				if (CollectionUtils.isNotEmpty(custPhone)) {
					if (CollectionUtils.isEmpty(contactList)) {
						contactList = custPhone;
					} else {
						contactList.addAll(custPhone);
					}
				}
			}
		}
		return contactList;
	}

	/**
	 * 解析字符中的电话号码和手机号码
	 * 
	 * @author 026123-foss-lifengteng
	 * @date 2013-1-7 下午5:20:32
	 */
	private Map<String, List<String>> resolveMobileAndPhone(String phone) {
		// 存放解析后的手机和电话号码
		Map<String, List<String>> map = new HashMap<String, List<String>>();
		// 分隔字符串
		List<String> strList = StrUtils.resolvePhone(phone);
		// 电话号码
		List<String> phoneList = new ArrayList<String>();
		// 手机号码
		List<String> mobileList = new ArrayList<String>();

		if (CollectionUtils.isNotEmpty(strList)) {
			// 将解析出的字符串进行分类
			for (String str : strList) {
				if (StringUtils.isEmpty(str)) {
					continue;
				}
				if (StrUtils.isMobileNO(str)) {
					mobileList.add(str);
				} else {
					phoneList.add(str);
				}
			}
		}

		map.put("mobiles", mobileList);
		map.put("phones", phoneList);
		return map;

	}

	/**
	 * 填充发货客户数据
	 * 
	 * @author 026123-foss-lifengteng
	 * @date 2012-11-17 下午3:16:36
	 */
	public void fillDeliveryCustomerData(WaybillPanelVo bean, String mobile,
			String phone) {
		// 根据条件查询客户信息
		List<CustomerQueryConditionDto> contactList = queryDeliveryCustomer(bean);
		if (CollectionUtils.isNotEmpty(contactList)) {
			// 创建弹出窗口
			QueryConsignerDialog dialog = new QueryConsignerDialog(contactList);
			// 剧中显示弹出窗口
			WindowUtil.centerAndShow(dialog);
			// 获得弹出窗口选择的值
			QueryMemberDialogVo memberVo = dialog.getCustomerVo();
			// 这里判空是为了防止选择一行记录未确定后直接关闭时出现的空对象
			if (memberVo == null) {
				/**
				 * 手机、电话修改后失去焦点，取消弹出对话框 由于手机、电话无法变回原值，为保证不出现张冠李戴的情况
				 * 需要将客户信息全部清空掉，所免造成客户误解
				 */
				// 清空发货客户信息
				Common.cleanDeliveryCustomerInfo(ui, bean, "", "");

				return;
			}
			//存贮原发货客户编码
			String oldDeliveryCustomerCode=memberVo.getCustomerCode();
			getCustomerCode(bean, memberVo);
			/**
			 * Dmana-10888根据客户编码查询发票标记
			 * 
			 * @author:218371-foss-zhaoyanjun
			 * @date:2015-01-06下午13:45
			 */
			/*memberVo.setInvoice(CommonUtils.setInvoice(memberVo
					.getCustomerCode()));*/
			selectIsCustCircle(bean, memberVo);
			/*if(bean.getCustomerPickupOrgCode() != null && bean.getGoodsWeightTotal() != null && bean.getGoodsVolumeTotal() != null){
				Common.getInsuranceCharge(bean, ui);
			}*/
			//将客户编码设置回去
			memberVo.setCustomerCode(oldDeliveryCustomerCode);
			// 填充数据
			Common.fillDeliveryCustomerInfo(ui, memberVo, bean);
			//精准包裹提示
			Common.validateProductCode(bean);
			//设置提交按钮置灰
			ui.billingPayPanel.getBtnSubmit().setEnabled(false);
		} else {//guiTitleName
			/**
			 * @author 306486 -foss-wangshuai
			 * @date:2016年4月8日16:55:14
			 * 图片开单发货联系人输入优化
			 *  为避免图片开单提交并进行下一单发货客户为新客户发货联系人无法修改,
			 *  需要将发货联系人设置为可用状态
			 */
			ui.getConsignerPanel().getTxtConsignerLinkMan().setEnabled(true);
			// 若为删除原客户信息，则清空全部
			if (!"".equals(StringUtils.defaultString(bean
					.getDeliveryCustomerId()))) {
				// 清空发货客户信息
				Common.cleanDeliveryCustomerInfo(ui, bean, mobile, phone);
			}
			Common.setServiceChargeEnabled("", false, ui);
		}
		
	}

	private void selectIsCustCircle(WaybillPanelVo bean,
			QueryMemberDialogVo memberVo) {
		if("Y".equals(bean.getIsCustCircle())){
			//发票标记
			memberVo.setInvoice(CommonUtils.setInvoice(bean.getDeliveryCustomerCode()));
			//大客户标记
			memberVo.setIsBigCustomer(bean.getCustomerNewEntity().getIsLargeCustomers() !=null ? bean.getCustomerNewEntity().getIsLargeCustomers() :"");
			//合同编码
			memberVo.setAuditNo(bean.getCusBargainNewEntity().getBargainCode() !=null ? bean.getCusBargainNewEntity().getBargainCode() :"");
			//客户分群
			memberVo.setFlabelleavemonth(bean.getCustomerNewEntity().getFlabelleavemonth() !=null ? bean.getCustomerNewEntity().getFlabelleavemonth():"");
			//精准包裹权限
			memberVo.setIsAccuratePackage(bean.getIsAccuratePackage() !=null ? bean.getIsAccuratePackage() :"");
			//优惠类型
			memberVo.setPreferentialType(bean.getCusBargainNewEntity().getPreferentialType() !=null ? bean.getCusBargainNewEntity().getPreferentialType() :"");
			//付款方式
			if(StringUtils.isNotBlank(bean.getCusBargainNewEntity().getChargeType()) && "MONTH_END".equals(bean.getCusBargainNewEntity().getChargeType())){
				memberVo.setChargeMode(true);
			}else{
				memberVo.setChargeMode(false);
			}
			//是否统一结算
			memberVo.setCentralizedSettlement(bean.getStartCentralizedSettlement() !=null ? bean.getStartCentralizedSettlement() :"");
			//合同部门的标杆编码
			memberVo.setContractOrgCode(bean.getCusBargainNewEntity().getUnifiedCode() !=null ? bean.getCusBargainNewEntity().getUnifiedCode():"");
			//催款部门的标杆编码
			memberVo.setReminderOrgCode(bean.getCusBargainNewEntity().getHastenfunddeptCode() !=null ? bean.getCusBargainNewEntity().getHastenfunddeptCode():"");
			//合同部门的标杆名称
			memberVo.setContractOrgName(bean.getCusBargainNewEntity().getApplicateOrgName() !=null ? bean.getCusBargainNewEntity().getApplicateOrgName():"");
		}else{
			memberVo.setInvoice(CommonUtils.setInvoice(memberVo
					.getCustomerCode()));
		}
	}

	private void getCustomerCode(WaybillPanelVo bean,
			QueryMemberDialogVo memberVo) {
		if(StringUtils.isNotBlank(memberVo.getCustomerCode())){
			//判断发货客户是否在客户圈内，如果在就使用主客户的客户编码进行计价
			CustomerCircleNewDto customerCircleDto = waybillService.queryCustomerByCusCode(memberVo.getCustomerCode(), new Date(), "Y");
			//如果发货客户在客户圈就使用主客户的客户编码进行相关计费
			if(customerCircleDto !=null && "Y".equals(customerCircleDto.getIsCustCircle())
					&& customerCircleDto.getCustomerNewEntity() !=null && customerCircleDto.getCusBargainNewEntity() !=null && customerCircleDto.getCustomerCircleEntity() !=null){
				//主客户编码
				bean.setDeliveryCustomerCode(customerCircleDto.getCusBargainNewEntity().getCusCode());
				//将查询出来的合同实体插入bean
				bean.setCusBargainNewEntity(customerCircleDto.getCusBargainNewEntity());
				//将查询出来的客户实体加入bean
				bean.setCustomerNewEntity(customerCircleDto.getCustomerNewEntity());
				//将查询出来的客户圈实体加入bean
				bean.setCustomerCircleEntity(customerCircleDto.getCustomerCircleEntity());
				//传入是否在客户圈内
				bean.setIsCustCircle(customerCircleDto.getIsCustCircle() !=null ? customerCircleDto.getIsCustCircle() :"");
				//是否统一结算
				bean.setStartCentralizedSettlement(customerCircleDto.getCustomerCircleEntity().getIsFocusPay() !=null ? customerCircleDto.getCustomerCircleEntity().getIsFocusPay() :"");
				//是否精准包裹
				bean.setIsAccuratePackage(customerCircleDto.getCusBargainNewEntity().getIsAccuratePackage());
				if(bean.getCustomerPickupOrgCode() != null && bean.getGoodsWeightTotal() != null && bean.getGoodsVolumeTotal() != null){
					Common.getInsuranceCharge(bean, ui);
				}
			}else{
				if(bean.getCustomerPickupOrgCode() != null && bean.getGoodsWeightTotal() != null && bean.getGoodsVolumeTotal() != null){
					Common.getInsuranceCharge(bean, ui);
				}
				bean.setIsCustCircle("N");
			}
		}
	}

	/**
	 * s
	 * 
	 * 查询收货客户
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-12-10 下午05:08:02
	 */
	public List<CustomerQueryConditionDto> queryReceiveCustomerAddress(
			WaybillPanelVo bean) {
		List<CustomerQueryConditionDto> listQuery=new ArrayList<CustomerQueryConditionDto>();
		/*
		 * 调用ECS接口，查询客户收货信息
		 */
		List<CustomerAddressDto> listEntity=waybillService.queryConsignee(bean.getReceiveCustomerMobilephone());
		if(CollectionUtils.isNotEmpty(listEntity)){
			for(CustomerAddressDto entity:listEntity){
				CustomerQueryConditionDto queryDto=new CustomerQueryConditionDto();
				/*
				 *查询数据库中其它客户信息 
				 */
				if(CollectionUtils.isNotEmpty(queryReceiveCustomer(bean))){
					queryDto=queryReceiveCustomer(bean).get(0);
				}
				queryDto.setMobilePhone(bean.getReceiveCustomerMobilephone());
				queryDto.setAddress(entity.getContactAddress());
				queryDto.setAddressInfo(entity.getProvince()+entity.getCity()+entity.getDistrict()+entity.getContactAddress());
				queryDto.setProvinceCode(entity.getProvinceCode());
				queryDto.setCityCode(entity.getCityCode());
				queryDto.setCountyCode(entity.getDistrictCode());
				listQuery.add(queryDto);
			}
		}else{
			/*
			 * 调用远程接口没有查到客户信息时，依然通过查数据库带出一条客户信息
			 */
			CustomerQueryConditionDto queryDto=new CustomerQueryConditionDto();
			if(CollectionUtils.isNotEmpty(queryReceiveCustomer(bean))){
				queryDto=queryReceiveCustomer(bean).get(0);
				listQuery.add(queryDto);
			}
		}
		return listQuery;
	}
	
	/**
	 * s
	 * 
	 * 查询收货客户
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-12-10 下午05:08:02
	 */
	public List<CustomerQueryConditionDto> queryReceiveCustomer(
			WaybillPanelVo bean) {
		// 查询条件
		List<CustomerQueryConditionDto> dtoList = new ArrayList<CustomerQueryConditionDto>();
		// 手机
		String mobilePhone = StringUtil.defaultIfNull(bean
				.getReceiveCustomerMobilephone());
		// 电话
		String telePhone = StringUtil.defaultIfNull(bean
				.getReceiveCustomerPhone());
		// 客户名称
		String custName = StringUtil.defaultIfNull(bean
				.getReceiveCustomerName());

		// 解析多个电话号码的查询
		Map<String, List<String>> map = null;
		// 将电话号码中的手机号码解析出来
		List<String> mobiles = null;
		// 电话集合
		List<String> phones = null;

		// 判断名称是否为空
		if (StringUtils.isNotEmpty(custName)) {
			CustomerQueryConditionDto dto = new CustomerQueryConditionDto();
			dto.setCustName(custName);
			dto.setExactQuery(true);
			dtoList.add(dto);
		}
		// 判断手机是否为空
		else if (StringUtils.isNotEmpty(mobilePhone)) {
			mobiles = new ArrayList<String>();
			mobiles.add(mobilePhone);

			CustomerQueryConditionDto dto = new CustomerQueryConditionDto();
			dto.setMobilePhone(mobilePhone);
			dto.setExactQuery(true);
			dtoList.add(dto);
		}
		// 判断电话是否为空
		else if (StringUtils.isNotEmpty(telePhone)) {
			map = resolveMobileAndPhone(telePhone);
			mobiles = map.get("mobiles");
			phones = map.get("phones");

			CustomerQueryConditionDto dto = null;
			// 手机不为空时
			if (CollectionUtils.isNotEmpty(mobiles)) {
				for (String mobile : mobiles) {
					if (StringUtils.isEmpty(mobile)) {
						continue;
					}
					dto = new CustomerQueryConditionDto();
					dto.setMobilePhone(mobile);
					dto.setExactQuery(true);
					dtoList.add(dto);
				}
			}
			// 电话不为空时
			if (CollectionUtils.isNotEmpty(phones)) {
				for (String phone : phones) {
					if (StringUtils.isEmpty(phone)) {
						continue;
					}
					dto = new CustomerQueryConditionDto();
					dto.setContactPhone(phone);
					dto.setExactQuery(true);
					dtoList.add(dto);
				}
			}
		}

		// 根据条件查询客户信息
		List<CustomerQueryConditionDto> contactList = waybillService
				.queryCustomerByConditionList(dtoList);

		// 若CRM中查询无果，则从历史客户中查询
		if (CollectionUtils.isEmpty(contactList)) {
			if (CollectionUtils.isNotEmpty(mobiles)) {
				// 将手机中的号码加入集合进行查询
				mobiles.add(mobilePhone);
				List<CustomerQueryConditionDto> custMobile = waybillService
						.queryHisReceiveCusByMobileList(mobiles);
				if (CollectionUtils.isNotEmpty(custMobile)) {
					if (CollectionUtils.isEmpty(contactList)) {
						contactList = custMobile;
					} else {
						contactList.addAll(custMobile);
					}
				}
			}
			// 电话号码不为空时
			if (CollectionUtils.isNotEmpty(phones)) {
				List<CustomerQueryConditionDto> custPhone = waybillService
						.queryHisReceiveCusByPhoneList(phones);
				if (CollectionUtils.isNotEmpty(custPhone)) {
					if (CollectionUtils.isEmpty(contactList)) {
						contactList = custPhone;
					} else {
						contactList.addAll(custPhone);
					}
				}
			}
		}
		return contactList;
	}
	
	/**
	 * 填充目的站数据
	 * 
	 * @date 2017-03-16 下午3:16:36
	 */
	public void fillPickUpSiteData(WaybillPanelVo bean, String mobile,
			String phone) {
		if(bean!=null){
			// 根据条件查询客户信息
			List<CustomerQueryConditionDto> contactList = queryReceiveCustomer(bean);
			if (CollectionUtils.isEmpty(contactList)) {
				// 若为删除原客户信息，则清空全部
				if (!"".equals(StringUtils.defaultString(bean
						.getReceiveCustomerId()))) {
					// 清空收货客户信息
					Common.cleanReceiveCustomerInfo(ui, bean, mobile, phone);
				}
			} else {
				// 定义VO对象
				QueryMemberDialogVo memberVo = null;
				
				// 若只能一条记录时，则自动填充
				if (contactList.size() == 1) {
					memberVo = CommonUtils.convertToMemberVo(contactList, WaybillConstants.YES).get(0);
				} else {
					// 创建弹出窗口
					QueryConsigneeDialog dialog = new QueryConsigneeDialog(
							contactList);
					// 剧中显示弹出窗口
					WindowUtil.centerAndShow(dialog);
					// 获得弹出窗口选择的值
					memberVo = dialog.getCustomerVo();
				}
				// 数据非空判断
				if (memberVo == null) {
					/**
					 * 手机、电话修改后失去焦点，取消弹出对话框 由于手机、电话无法变回原值，为保证不出现张冠李戴的情况
					 * 需要将客户信息全部清空掉，所免造成客户误解
					 */
					// 清空发货客户信息
					Common.cleanReceiveCustomerInfo(ui, bean, "", "");
					return;
				}
				
				// 填充数据
				Common.fillReceiveCustomerInfo(ui, memberVo, bean);
			}
		}
	}

	/**
	 * 填充收货客户数据
	 * 
	 * @author 026123-foss-lifengteng
	 * @date 2012-11-17 下午3:16:36
	 */
	public void fillReceiveCustomerData(WaybillPanelVo bean, String mobile,
			String phone) {
		// 根据条件查询客户信息
		List<CustomerQueryConditionDto> contactList = queryReceiveCustomerAddress(bean);
		
		if (CollectionUtils.isEmpty(contactList)) {
			// 若为删除原客户信息，则清空全部
			if (!"".equals(StringUtils.defaultString(bean
					.getReceiveCustomerId()))) {
				// 清空收货客户信息
				Common.cleanReceiveCustomerInfo(ui, bean, mobile, phone);
			}
		} else {
			// 定义VO对象
			QueryMemberDialogVo memberVo = null;

			// 若只能一条记录时，则自动填充
			if (contactList.size() == 1) {
				memberVo = CommonUtils.convertToMemberVo(contactList, WaybillConstants.YES).get(0);
			} else {
				// 创建弹出窗口
				QueryConsigneeInfoDialog dialog = new QueryConsigneeInfoDialog(
						contactList);
				// 剧中显示弹出窗口
				WindowUtil.centerAndShow(dialog);
				// 获得弹出窗口选择的值
				memberVo = dialog.getCustomerVo();
			}
			// 数据非空判断
			if (memberVo == null) {
				/**
				 * 手机、电话修改后失去焦点，取消弹出对话框 由于手机、电话无法变回原值，为保证不出现张冠李戴的情况
				 * 需要将客户信息全部清空掉，所免造成客户误解
				 */
				// 清空发货客户信息
				Common.cleanReceiveCustomerInfo(ui, bean, "", "");
				return;
			}

			// 填充数据
			Common.fillReceiveCustomerInfo(ui, memberVo, bean);
		}
	}

	/**
	 * 
	 * （发货人手机号码监听）
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-10-20 上午10:52:04
	 */
	public void deliveryCustomerMobilephoneListener(WaybillPanelVo bean) {
		// 判断操作
		if (null == bean.getReceiveMethod()) {
			// 增加日志
			log.error("开单提货方式不能为空！");
			// 抛出异常信息
			throw new WaybillSubmitException(
					i18n.get("foss.gui.creating.listener.Waybill.exception.ReceiveMethodNotNull"));
		}
		btnSubmitEnabled();

		// 是否内部带货
		if (WaybillConstants.INNER_PICKUP.equals(bean.getReceiveMethod()
				.getValueCode())) {
			return;
		}

		// 手机号码
		String mobile = StringUtil.defaultIfNull(bean
				.getDeliveryCustomerMobilephone());
		// 手机号是否为空
		boolean mobilePhone = StringUtil.isEmpty(mobile);
		// 手机非空时,则只以手机为查询条件，其它查询条件置空（防止其它查询条件引影响手机号码查询）
		if (!mobilePhone) {
			// zxy 20131018 BUG-57580 start 新增：当客户发生改变时，设置重新计算送货费标志
			// 标识为非手动修改过，这样计算总运费的值才会生效
			bean.setHandDeliveryFee(BigDecimal.valueOf(0));
			// zxy 20131018 BUG-57580 end 新增：当客户发生改变时，设置重新计算送货费标志
			// 电话置空
			bean.setDeliveryCustomerPhone("");
			// 客户名称
			bean.setDeliveryCustomerName("");
			// 当未查询出数据时手机会被清空，此时需要重新设置回来
			fillDeliveryCustomerData(bean, mobile, "");
		} else {
			// 手机号为空，则清空客户信息
			Common.noDeliveryCustomerInfo(ui, bean);
			bean.setDeliveryCustomerContact("");
			bean.setDeliveryCustomerContactId("");
		}

		Common.resetDeliverGoodsFee(bean, ui);
		//（FOSS20150818）RFOSS2015052602 保价阶梯费率 -- 206860
		if(bean.getGoodsVolumeTotal() == null){
			bean.setGoodsVolumeTotal(BigDecimal.ZERO);
		 }
		 if(bean.getGoodsWeightTotal() == null){
			 	bean.setGoodsWeightTotal(BigDecimal.ZERO);
		 }
		if(bean.getGoodsWeightTotal() != null && bean.getGoodsVolumeTotal() != null  && bean.getCustomerPickupOrgCode() != null){
			Common.getInsuranceCharge(bean, ui);
		}
		// Common.resetPackageFee(bean, ui);
		 }

	/**
	 * 
	 * （收货人手机号码事件监听）
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-10-20 下午04:55:34
	 */
	public void receiveCustomerMobilephoneListener(WaybillPanelVo bean) {
		// 判断对像是否为空
		if (null == bean.getReceiveMethod()) {
			// 增加日志
			log.error("开单提货方式不能为空！");
			// 抛出异常信息
			throw new WaybillSubmitException(
					i18n.get("foss.gui.creating.listener.Waybill.exception.ReceiveMethodNotNull"));
		}
		// 判断是否为内部带货
		if (WaybillConstants.INNER_PICKUP.equals(bean.getReceiveMethod()
				.getValueCode())) {
			return;
		}

		// 手机号码
		String mobile = StringUtil.defaultIfNull(bean
				.getReceiveCustomerMobilephone());
		// 是否为空
		boolean mobilePhone = StringUtil.isEmpty(mobile);
		// 手机非空时,则只以手机为查询条件，其它查询条件置空（防止其它查询条件引影响手机号码查询）
		if (!mobilePhone) {
			// 电话置空
			bean.setReceiveCustomerPhone("");
			// 客户名称
			bean.setReceiveCustomerName("");

			// 若未查询出数据，电话号码会被清空，此时需要将其重新设置回来
			fillReceiveCustomerData(bean, mobile, "");
		} else {
			// 清空收货客户信息
			Common.noReceiveCustomerInfo(ui, bean);
			bean.setReceiveCustomerContact("");
			bean.setReceiveCustomerContactId("");
		}

		// 若为PDA补录，则更改收货客户信息后颜色变化以示提醒
		if (WaybillConstants.WAYBILL_STATUS_PDA_PENDING.equals(bean
				.getWaybillstatus())) {
			Common.setForegroundColor(ui, bean);
		}

	}

	/**
	 * （发货客户电话号码监听）
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-10-20 下午03:54:13
	 */
	public void deliveryCustomerPhoneListener(WaybillPanelVo bean) {
		// 判断是否为内部带货自提
		if (bean.getReceiveMethod() != null
				&& WaybillConstants.INNER_PICKUP.equals(bean.getReceiveMethod()
						.getValueCode())) {
			return;
		}

		// 发货客户手机是否为空：true为空
		boolean mobilePhone = StringUtil.isEmpty(StringUtil.defaultIfNull(bean
				.getDeliveryCustomerMobilephone()));
		// 发货客户电话号码
		String phone = StringUtil
				.defaultIfNull(bean.getDeliveryCustomerPhone());
		// 发货客户电话是否为空：true为空
		boolean telePhone = StringUtil.isEmpty(phone);
		// 发货客户名称
		boolean custName = StringUtil.isEmpty(StringUtil.defaultIfNull(bean
				.getDeliveryCustomerName()));
		// 手机、客户名称为空时
		if (mobilePhone && !telePhone && custName) {
			// zxy 20131018 BUG-57580 start 新增：当客户发生改变时，设置重新计算送货费标志
			// 标识为非手动修改过，这样计算总运费的值才会生效
			bean.setHandDeliveryFee(BigDecimal.valueOf(0));
			// 设置提交为灰，使客户重新计算总运费
			Common.setSaveAndSubmitFalse(ui);
			// zxy 20131018 BUG-57580 end 新增：当客户发生改变时，设置重新计算送货费标志
			// 若未查询出数据，电话号码会被清空，此时需要将其重新设置回来
			fillDeliveryCustomerData(bean, "", phone);
		}

		Common.resetDeliverGoodsFee(bean, ui);
		//（FOSS20150818）RFOSS2015052602 保价阶梯费率 -- 206860
		if(bean.getGoodsVolumeTotal() == null){
			bean.setGoodsVolumeTotal(BigDecimal.ZERO);
		 }
		 if(bean.getGoodsWeightTotal() == null){
			 	bean.setGoodsWeightTotal(BigDecimal.ZERO);
		 }
		if(bean.getGoodsWeightTotal() != null && bean.getGoodsVolumeTotal() != null  && bean.getCustomerPickupOrgCode() != null){
			Common.getInsuranceCharge(bean, ui);
		}
		// Common.resetPackageFee(bean, ui);
		 }

	/**
	 * 发货客户焦点失去监听事件
	 * 
	 * @author 026123-foss-lifengteng
	 * @date 2013-1-6 下午2:34:31
	 */
	private void deliveryCustomerNameListener(WaybillPanelVo bean) {
		btnSubmitEnabled();
		// zxy 20131018 BUG-57580 start 新增：当客户发生改变时，设置重新计算送货费标志
		// 标识为非手动修改过，这样计算总运费的值才会生效
		bean.setHandDeliveryFee(BigDecimal.valueOf(0));
		// zxy 20131018 BUG-57580 end 新增：当客户发生改变时，设置重新计算送货费标志

		// 客户名称
		String custName = StringUtil.defaultIfNull(bean
				.getDeliveryCustomerName());
		// 客户名称为空则清空客户编码，设置发货联系人为可修改状态
		if ("".equals(custName)) {
			Common.noDeliveryCustomerInfo(ui, bean);
		} else {
			// 封装查询条件
			CustomerQueryConditionDto dto = new CustomerQueryConditionDto();
			// 收货客户名称
			dto.setCustName(bean.getDeliveryCustomerName());
			// 精确查询
			dto.setExactQuery(true);
			// 查询客户信息
			dto.setInvoiceDate(new Date());
			List<CustomerQueryConditionDto> contacts = waybillService
					.queryCustomerByCondition(dto);
			if (CollectionUtils.isNotEmpty(contacts)) {
				// 创建弹出窗口
				QueryConsignerDialog dialog = new QueryConsignerDialog(contacts);
				// 剧中显示弹出窗口
				WindowUtil.centerAndShow(dialog);
				// 获得弹出窗口选择的值
				QueryMemberDialogVo memberVo = dialog.getCustomerVo();
				// 这里判空是为了防止选择一行记录未确定后直接关闭时出现的空对象
				if (memberVo == null) {
					return;
				}
				//存贮原发货客户编码
				String oldDeliveryCustomerCode=memberVo.getCustomerCode();
				getCustomerCode(bean, memberVo);
				selectIsCustCircle(bean, memberVo);
				if(bean.getCustomerPickupOrgCode() != null && bean.getGoodsWeightTotal() != null && bean.getGoodsVolumeTotal() != null){
					Common.getInsuranceCharge(bean, ui);
				}
				//将客户编码设置回去
				memberVo.setCustomerCode(oldDeliveryCustomerCode);
				Common.fillDeliveryCustomerInfo(ui, memberVo, bean);
				//精准包裹提示
				Common.validateProductCode(bean);
				//设置提交按钮置灰
				ui.billingPayPanel.getBtnSubmit().setEnabled(false);
			} else {
				Common.noDeliveryCustomerInfo(ui, bean);
			}
		}

		Common.resetDeliverGoodsFee(bean, ui);
		// Common.resetPackageFee(bean, ui);
	}

	/**
	 * 监听发货联系人事件
	 * 
	 * @author 026123-foss-lifengteng
	 * @date 2013-1-8 下午7:23:37
	 */
	private void deliveryCustomerContactListener(WaybillPanelVo bean) {
		btnSubmitEnabled();
		// 是否月结
		// bean.setChargeMode(false);
		// 优惠类型
		bean.setPreferentialType("");
		// Common.resetPackageFee(bean, ui);
	}

	public void btnSubmitEnabled() {
		if (ui.getPictureWaybillType() != null
				&& WaybillConstants.WAYBILL_PICTURE.equals(ui
						.getPictureWaybillType().trim())) {
			String weight = ui.pictureCargoInfoPanel.getTxtWeight().getText();
			String volume = ui.pictureCargoInfoPanel.getTxtVolume().getText();
			if (StringUtils.isNotBlank(weight)
					&& new BigDecimal(weight).compareTo(new BigDecimal(0)) > 0
					&& StringUtils.isNotBlank(volume)
					&& new BigDecimal(volume).compareTo(new BigDecimal(0)) > 0) {				ui.incrementPanel.getBtnCalculate().setEnabled(true);
				ui.billingPayPanel.getBtnSubmit().setEnabled(false);// 提交为不可编辑
				ui.billingPayPanel.getBtnSubmitAndNextSingle()
						.setEnabled(false);
				ui.incrementPanel.getJlable().setVisible(false);
				ui.incrementPanel.getCombServiceRate().setVisible(false);
			} else {
				ui.incrementPanel.getBtnCalculate().setEnabled(false);
				ui.billingPayPanel.getBtnSubmit().setEnabled(true);// 提交为不可编辑
				ui.billingPayPanel.getBtnSubmitAndNextSingle().setEnabled(true);
				ui.incrementPanel.getJlable().setVisible(true);
				ui.incrementPanel.getCombServiceRate().setVisible(true);
			}

		} else {
			ui.billingPayPanel.getBtnSubmit().setEnabled(false);// 提交为不可编辑
			ui.buttonPanel.getBtnSubmit().setEnabled(false);// 提交为不可编辑
		}
	}

	/**
	 * 
	 * （收货客户电话号码监听）
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-10-20 下午03:54:13
	 */
	public void receiveCustomerPhoneListener(WaybillPanelVo bean) {
		if (bean.getReceiveMethod() == null) {
			return;
		}
		if (WaybillConstants.INNER_PICKUP.equals(bean.getReceiveMethod()
				.getValueCode())) {
			return;
		}

		// 判断客户手机或电话是否为空或空字符串
		// 手机是否为空：true为空
		boolean mobilePhone = StringUtil.isEmpty(StringUtil.defaultIfNull(bean
				.getReceiveCustomerMobilephone()));
		// 电话号码
		String phone = StringUtil.defaultIfNull(bean.getReceiveCustomerPhone());
		// 电话号码是否为空：true为空
		boolean telePhone = StringUtil.isEmpty(phone);
		// 客户名称是否为空：true为空
		boolean custName = StringUtil.isEmpty(StringUtil.defaultIfNull(bean
				.getReceiveCustomerName()));
		// 手机为空，电话非空，客户为空
		if (mobilePhone && !telePhone && custName) {
			// 若未查询出数据，电话号码会被清空，此时需要将其重新设置回来
			fillReceiveCustomerData(bean, "", phone);
		}

		// 若为PDA补录，则更改收货客户信息后颜色变化以示提醒
		if (WaybillConstants.WAYBILL_STATUS_PDA_PENDING.equals(bean
				.getWaybillstatus())) {
			Common.setForegroundColor(ui, bean);
		}

	}

	/**
	 * 特殊增值服务监听
	 * 
	 * @param bean
	 */
	private void specialValueAddedServiceTypeListener(WaybillPanelVo bean) {
		DataDictionaryValueVo dictionaryValueVo = bean
				.getSpecialValueAddedServiceType();
		if (dictionaryValueVo == null
				|| dictionaryValueVo.getValueCode() == null) {
			Common.changePickUpMode(bean, ui);
			ui.getIncrementPanel().getBtnInstall().setVisible(false);
		}
		if (dictionaryValueVo != null
				&& dictionaryValueVo.getValueCode() != null) {
			// 根据特殊增值服务改变提货方式
			Common.changePickUpModeForSpecial(bean, ui);
			// 发票标记
			// CommonUtils.setInvoiceType(bean, new Date());

			/**
			 * 新需求：放开新产品的限制 Common.setDTDPickUpToSelectedAndFalseEdit(bean,ui);
			 */
			if (bean.getCustomerPickupOrgCode() == null)
				return;
			// 重新计算打木架费用
			Common.getYokeCharge(bean, ui);
			// 清空其他费用列表
			Common.cleanOtherCharge(bean, ui);
			// 清空目的站以及预配线路
			cleanTargetEmpty(bean);		
		}
		Common.setSaveAndSubmitFalse(ui);
	}
	/**
	 * （运输性质事件监听）
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-10-22 下午04:48:08
	 */
	private void productCodeListener(WaybillPanelVo bean) {
		DataDictionaryValueVo dictionaryValueVo = bean
				.getSpecialValueAddedServiceType();
		if (dictionaryValueVo != null) {
			if (dictionaryValueVo.getValueCode() != null) {
				return;
			}
		}
		//DP-Foss 343617 zhaoyiqing 20160824 更改运输性质后，设置为0
		bean.setCalculateDeliveryGoodsFee(BigDecimal.ZERO);
		ProductEntityVo productVo = bean.getProductCode();
		if (productVo != null && productVo.getCode() != null) {
			//精准包裹提示
			Common.validateProductCode(bean);
			// 根据运输性质改变提货方式
			Common.changePickUpMode(bean, ui);

			// 判断是否是自提件
			if (bean.getIsEconomyGoods() != null && bean.getIsEconomyGoods()) {
				Common.setEconomyReceiveMethod(bean);
				if (StringUtils.isNotBlank(ui.getPictureWaybillType())
						&& WaybillConstants.WAYBILL_PICTURE.equals(ui
								.getPictureWaybillType())) {
					// 提货方式不可编辑
					ui.pictureTransferInfoPanel.getCombPickMode().setEnabled(
							false);
				} else {
					// 提货方式不可编辑
					ui.transferInfoPanel.getCombPickMode().setEnabled(false);
				}
			}
			// 发票标记
			CommonUtils.setInvoiceType(bean, new Date());

			/**营业部开单，集中开单
			 * 精准包裹运输性质不能免费接货
			 */
			Common.changeFreePickUpGoods(bean, ui);
			
			/**
			 * 添加运输性质改变的监听事件
			 * 
			 * @author:321993
			 * @date:2017-03-17 上午 09:56
			 */
			addCombPickModeListener(bean);
			
			/**
			 * 新需求：放开新产品的限制 Common.setDTDPickUpToSelectedAndFalseEdit(bean,ui);
			 */
			// zxy 20130912 BUG-54637 start 新增：禁止弹出提货网点为空对话框，直接返回不做后续校验
			if (bean.getCustomerPickupOrgCode() == null)
				return;
			// zxy 20130912 BUG-54637 end 新增：禁止弹出提货网点为空对话框，直接返回不做后续校验

			// 空运、偏线以及中转下线无法选择签收单返单
			Common.setReturnBill(bean, ui);
			// 偏线与空运不能选择预付费保密
			Common.setSecretPrepaid(bean, ui);
			// 偏线不能开代收货款

			// Common.setPartialCod(bean, ui);

			// Common.setPartialCod(bean, ui);

			// 修改重量重新获取报价费率与报价费率范围---206860
			if (bean.getGoodsVolumeTotal() == null) {
				bean.setGoodsVolumeTotal(BigDecimal.ZERO);
			 }
			if (bean.getGoodsWeightTotal() == null) {
				 	bean.setGoodsWeightTotal(BigDecimal.ZERO);
			 }
			if (bean.getGoodsWeightTotal() != null
					&& bean.getGoodsVolumeTotal() != null
					&& bean.getCustomerPickupOrgCode() != null) {
				Common.getInsuranceCharge(bean, ui);
			}

			// 重新计算打木架费用
			Common.getYokeCharge(bean, ui);

			// 清空其他费用列表
			Common.cleanOtherCharge(bean, ui);

			String isNeedClear = isNeedClearTarget(bean);
			// 判断是否需要清空提货网点
			if (FossConstants.YES.equals(isNeedClear)) {
				// 清空目的站以及预配线路
				cleanTargetEmpty(bean);
			} else if (FossConstants.NO.equals(isNeedClear)) {
				// 查询其他费用
				Common.queryOtherChargeData(ui, bean);
				// 计算其他费用合计
				Common.calculateOtherCharge(ui, bean);
				// 改完运输性质以后需要重新加载走货路径
				setLoadLine(bean);
			}

		}
		
		Common.setSaveAndSubmitFalse(ui);
	}

	/**
	 * 重新加载走货路径
	 * 
	 * @author WangQianJin
	 * @date 2013-1-14 上午8:49:17
	 */
	public void setLoadLine(WaybillPanelVo bean) {
		if (bean.getCustomerPickupOrgCode() != null) {
			if (!ProductEntityConstants.PRICING_PRODUCT_PARTIAL_LINE
					.equals(bean.getProductCode().getCode())
					&& !ProductEntityConstants.PRICING_PRODUCT_AIR_FREIGHT
							.equals(bean.getProductCode().getCode())
					&& !ProductEntityConstants.PRICING_PRODUCT_FULL_VEHICLE
							.equals(bean.getProductCode().getCode())) {
				// 先判断时效存不存在(根据ISSUE-3041修改)
				IdentityEffectivePlanVo vo = identityEffectivePlan(bean);
				if (vo.isExist()) {
					// 查询始发配载部门、最终配载部门以及线路
					queryLodeDepartmentInfo(bean);
					Date leaveTime = getLeaveTime(vo.getDepartDeptCode(), bean);
    				if (leaveTime != null) {
						bean.setPreDepartureTime(leaveTime);// 预计出发时间
						bean.setPreCustomerPickupTime(getPickupDeliveryTime(
								vo.getDepartDeptCode(), bean));// 预计派送/自提时间
    				} else {
    					// 清空目的站以及预配线路
    					cleanTargetEmpty(bean);
    					log.debug("未查询到始发线路发车标准，不能获取预计出发时间");
						MsgBox.showITServiceInfo(i18n
								.get("foss.gui.creating.showpickupstationdialogaction.nosettime"));
    				}
				} else {
					// 清空目的站以及预配线路
					cleanTargetEmpty(bean);
					log.debug("未查询到产品时效，出发部门：" + vo.getDepartDeptName()
							+ "，到达部门：" + vo.getArriveDetpName()
							+ "，请确认运输性质是否选择正确！");
					MsgBox.showITServiceInfo(i18n
							.get("foss.gui.creating.showpickupstationdialogaction.noproducttime",
									new Object[] { vo.getDepartDeptName(),
											vo.getArriveDetpName() }));
				}
			} else {
				// 查询始发配载部门、最终配载部门以及线路
				queryLodeDepartmentInfo(bean);
			}
		}
	}

	/**
	 * 
	 * 获得预计派送/提货时间
	 * 
	 * @author WangQianJin
	 * @date 2013-07-19
	 */
	private Date getPickupDeliveryTime(String strOrgCode, WaybillPanelVo bean) {
		EffectiveDto effectiveDto = new EffectiveDto();
		if (isPickup(bean)) {
			effectiveDto = waybillService.searchPreSelfPickupTime(strOrgCode,
					bean.getCustomerPickupOrgCode().getCode(), bean
							.getProductCode().getCode(), bean
							.getPreDepartureTime(), new Date());
			if (effectiveDto != null) {
				bean.setLongOrShort(effectiveDto.getLongOrShort());
				return effectiveDto.getSelfPickupTime();
			} else {
				MsgBox.showInfo(i18n
						.get("foss.gui.creating.showPickupStationDialogAction.MsgBox.failQueryTime"));
				return null;
			}

		} else {
			effectiveDto = waybillService.searchPreDeliveryTime(strOrgCode,
					bean.getCustomerPickupOrgCode().getCode(), bean
							.getProductCode().getCode(), bean
							.getPreDepartureTime(), new Date());
			if (effectiveDto != null) {
				bean.setLongOrShort(effectiveDto.getLongOrShort());
				return effectiveDto.getDeliveryDate();
			} else {
				MsgBox.showInfo(i18n
						.get("foss.gui.creating.showPickupStationDialogAction.MsgBox.failQueryTime"));
				return null;
			}

		}
	}

	/**
	 * 
	 * 判断提货方式是否自提
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-11-21 上午09:46:55
	 */
	private Boolean isPickup(WaybillPanelVo bean) {
		/**
		 * 判断提货方式是否为空
		 */
		if (bean.getReceiveMethod() != null) {
			String code = bean.getReceiveMethod().getValueCode();
			if (WaybillConstants.SELF_PICKUP.equals(code)
					|| WaybillConstants.INNER_PICKUP.equals(code)
					|| WaybillConstants.AIR_SELF_PICKUP.equals(code)
					|| WaybillConstants.AIR_PICKUP_FREE.equals(code)
					|| WaybillConstants.AIRPORT_PICKUP.equals(code)) {
				return true;
			} else {
				return false;
			}
		} else {
			return false;
	}
	}

	/**
	 * 
	 * 获得预计出发时间
	 * 
	 * @author WangQianJin
	 * @date 2013-07-19
	 */
	private Date getLeaveTime(String strOrgCode, WaybillPanelVo bean) {
		Date leaveTime = waybillService.searchPreLeaveTime(strOrgCode,
				bean.getLoadOrgCode(), bean.getProductCode().getCode(),
				new Date());
		return leaveTime;
	}

	/**
	 * 
	 * 查询始发配载部门、最终配载部门以及线路
	 * 
	 * @author WangQianJin
	 * @date 2013-07-19
	 */
	private void queryLodeDepartmentInfo(WaybillPanelVo bean) {
		OrgInfoDto dto = null;
		try {
			// 运输性质非空判断
			if (null == bean.getProductCode()) {
				log.error("运输性质不能为空！");
				throw new WaybillValidateException(
						i18n.get("foss.gui.creating.salesDepartmentDialog.exception.transType"));
			}

			if(bean.getPickupCentralized()!=null&&bean.getPickupCentralized()){
				//判断是否是 异地开单
				String waybillNo =  bean.getWaybillNo();
				String  createOrgCode= bean.getCreateOrgCode();
				if(StringUtil.isNotEmpty(waybillNo)
						&& StringUtil.isNotEmpty(createOrgCode)){
					WaybillPictureEntity entity = new WaybillPictureEntity();
					entity.setWaybillNo(waybillNo);
					entity.setActive(FossConstants.YES);
					entity = waybillService.queryWaybillPictureByEntity(entity);
					if(entity!=null && FossConstants.NO.equals(entity.getLocal())){
						//根据本属开单组去查询
						createOrgCode = entity.getLocalBillGroupCode();
					}
				}
				dto = waybillService.queryLodeDepartmentInfo(bean.getPickupCentralized(), createOrgCode, bean.getCustomerPickupOrgCode().getCode(), bean.getProductCode().getCode());
			}else{
				dto = waybillService.queryLodeDepartmentInfo(bean.getPickupCentralized(), bean.getReceiveOrgCode(), bean.getCustomerPickupOrgCode().getCode(), bean.getProductCode().getCode());
			}
			if (dto == null || dto.getFreightRoute() == null) {
				if (StringUtils.isNotBlank(ui.getPictureWaybillType())
						&& WaybillConstants.WAYBILL_PICTURE.equals(ui
								.getPictureWaybillType())) {
					ui.pictureCargoInfoPanel.getBtnWood().setEnabled(false);
					ui.pictureCargoInfoPanel.getBtnPacking().setEnabled(false);
				} else {
					ui.cargoInfoPanel.getBtnWood().setEnabled(false);
					/**
					 * 将打包装按钮与打木架按钮设置同样
					 * 
					 * @author:218371-foss-zhaoyanjun
					 * @date:2014-12-3下午14:51
					 */
					ui.cargoInfoPanel.getBtnPacking().setEnabled(false);
				}

				throw new WaybillValidateException(
						i18n.get("foss.gui.creating.showPickupStationDialogAction.MsgBox.failQueryFreightRoute"));
			} else {
				FreightRouteEntity freightRoute = dto.getFreightRoute();
				log.info("查询走货路径成功。。。");
				bean.setLoadLineName(dto.getRouteLineName());// 配载线路名称
				log.info("配载线路名称:" + dto.getRouteLineName());
				if (freightRoute != null) {
					bean.setLoadLineCode(freightRoute.getVirtualCode() == null ? "NOTEXISTS"
							: freightRoute.getVirtualCode());// 配载线路编码
					log.info("配载线路编码:" + freightRoute.getVirtualCode());
					bean.setPackageOrgCode(freightRoute
							.getPackingOrganizationCode());// 代打木架部门编码
					log.info("代打木架部门编码:"
							+ freightRoute.getPackingOrganizationCode());
					bean.setPackingOrganizationName(freightRoute
							.getPackingOrganizationName());// 代打木架部门名称
					log.info("代打木架部门名称:"
							+ freightRoute.getPackingOrganizationName());
					bean.setDoPacking(freightRoute.getDoPacking());// 是否可以打木架
					log.info("是否可以打木架:" + freightRoute.getDoPacking());
				} else {
					bean.setLoadLineCode("NOTEXISTS");// 配载线路编码
					log.info("配载线路编码:获取到的走货路径实体为空");
					bean.setPackageOrgCode("");// 代打木架部门编码
					log.info("代打木架部门编码:");
					bean.setPackingOrganizationName("");// 代打木架部门名称
					log.info("代打木架部门名称:");
					bean.setDoPacking("");// 是否可以打木架
					log.info("是否可以打木架:");
				}
				bean.setLoadOrgCode(dto.getFirstLoadOrgCode());// 配载部门编号
				log.info("配载部门编号:" + dto.getFirstLoadOrgCode());
				bean.setLoadOrgName(dto.getFirstLoadOrgName());// 配载部门名称
				log.info("配载部门名称:" + dto.getFirstLoadOrgName());
				bean.setLastLoadOrgCode(dto.getLastLoadOrgCode());// 最终配载部门编号
				log.info("最终配载部门编号:" + dto.getLastLoadOrgCode());
				bean.setLastLoadOrgName(dto.getLastLoadOrgName());// 最终配载部门名称
				log.info("最终配载部门名称:" + dto.getLastLoadOrgName());

				bean.setLastOutLoadOrgCode(dto.getLastOutLoadOrgCode());// 最终配置外场
				log.info("最终配置外场:" + dto.getLastOutLoadOrgCode());
//				bean.setGoodsTypeIsAB(dto.getGoodsTypeIsAB());// 是否AB货
//				log.info("是否可区分AB货:" + dto.getGoodsTypeIsAB());
				// 设置AB货编辑状态
				// setGoodsTypeAB(bean);
				// 如果路径可以打打木架则设置打木架按钮可点击
				if (FossConstants.YES.equals(bean.getDoPacking())) {
					if (StringUtils.isNotBlank(ui.getPictureWaybillType())
							&& WaybillConstants.WAYBILL_PICTURE.equals(ui
									.getPictureWaybillType())) {
						ui.pictureCargoInfoPanel.getBtnWood().setEnabled(true);
						ui.pictureCargoInfoPanel.getBtnPacking().setEnabled(true);
					} else {
						ui.cargoInfoPanel.getBtnWood().setEnabled(true);
						/**
						 * 将打包装按钮与打木架按钮设置同样
						 * 
						 * @author:218371-foss-zhaoyanjun
						 * @date:2014-12-3下午14:51
						 */
						ui.cargoInfoPanel.getBtnPacking().setEnabled(true);
					}

				} else {
					if (StringUtils.isNotBlank(ui.getPictureWaybillType())
							&& WaybillConstants.WAYBILL_PICTURE.equals(ui
									.getPictureWaybillType())) {
						ui.pictureCargoInfoPanel.getBtnWood().setEnabled(false);
						ui.pictureCargoInfoPanel.getBtnPacking().setEnabled(false);
					} else {
						ui.cargoInfoPanel.getBtnWood().setEnabled(false);
						/**
						 * 将打包装按钮与打木架按钮设置同样
						 * 
						 * @author:218371-foss-zhaoyanjun
						 * @date:2014-12-3下午14:51
						 */
						ui.cargoInfoPanel.getBtnPacking().setEnabled(false);
					}
				}
				bean.setPickupCentralizedDeptCode(dto
						.getPickupCentralizedDeptCode());
				log.info("集中接货开单组所在外场的驻地营业部编码:"
						+ dto.getPickupCentralizedDeptCode());
			}
		} catch (BaseInfoInvokeException e) {
			throw new WaybillValidateException(
					i18n.get("foss.gui.creating.showPickupStationDialogAction.MsgBox.failQueryFreightRoute") /**
			 * 
			 * 
			 * 
			 * 
			 * 
			 * e.getMessage())
			 */
			);
		} catch (BusinessException w) {
			bean.setLoadLineName("");// 配载线路名称
			bean.setLoadLineCode("");// 配载线路编码
			bean.setLoadOrgCode("");// 配载部门编号
			bean.setLoadOrgName("");// 配载部门名称
			bean.setLastLoadOrgCode("");// 最终配载部门编号
			bean.setLastLoadOrgName("");// 最终配载部门名称
			bean.setPackageOrgCode("");// 代打木架部门编码
			bean.setPackingOrganizationName("");// 代打木架部门名称
			bean.setDoPacking("");// 是否可以打木架
			bean.setLastOutLoadOrgCode("");// 最终配置外场

			if (StringUtils.isNotBlank(ui.getPictureWaybillType())
					&& WaybillConstants.WAYBILL_PICTURE.equals(ui
							.getPictureWaybillType())) {
				ui.pictureCargoInfoPanel.getBtnWood().setEnabled(false);
				ui.pictureCargoInfoPanel.getBtnPacking().setEnabled(false);
			} else {
				ui.cargoInfoPanel.getBtnWood().setEnabled(false);// 代打木架按钮不可点击
				/**
				 * 将打包装按钮与打木架按钮设置同样
				 * 
				 * @author:218371-foss-zhaoyanjun
				 * @date:2014-12-3下午14:51
				 */
				ui.cargoInfoPanel.getBtnPacking().setEnabled(false);
			}

			throw new WaybillValidateException(
					i18n.get("foss.gui.creating.showPickupStationDialogAction.MsgBox.failQueryFreightRoute") /**
			 * 
			 * 
			 * 
			 * 
			 * 
			 * e.getMessage())
			 */
			);

			// throw w;
		}
	}

	/**
	 * 
	 * 设置AB货是否可以编辑
	 * 
	 * @author WangQianJin
	 * @date 2013-07-19
	 */
	/*
	 * private void setGoodsTypeAB(WaybillPanelVo bean) { if
	 * (bean.getGoodsTypeIsAB()) {
	 * if(StringUtils.isNotBlank(ui.getPictureWaybillType()) &&
	 * WaybillConstants.WAYBILL_PICTURE.equals(ui.getPictureWaybillType())){
	 * ui.pictureCargoInfoPanel.getRbnA().setEnabled(true);
	 * ui.pictureCargoInfoPanel.getRbnB().setEnabled(true); }else{
	 * ui.cargoInfoPanel.getRbnA().setEnabled(true);
	 * ui.cargoInfoPanel.getRbnB().setEnabled(true); } } else {
	 * if(StringUtils.isNotBlank(ui.getPictureWaybillType()) &&
	 * WaybillConstants.WAYBILL_PICTURE.equals(ui.getPictureWaybillType())){
	 * ui.pictureCargoInfoPanel.getRbnA().setEnabled(false);
	 * ui.pictureCargoInfoPanel.getRbnB().setEnabled(false); }else{
	 * ui.cargoInfoPanel.getRbnA().setEnabled(false);
	 * ui.cargoInfoPanel.getRbnB().setEnabled(false); } bean.setGoodsType(null);
	 * } }
	 */

	/**
	 * 获取时效相关信息
	 */
	private IdentityEffectivePlanVo identityEffectivePlan(WaybillPanelVo bean) {
		String departDeptCode = null;
		String departDeptName = null;
		IdentityEffectivePlanVo outVo = new IdentityEffectivePlanVo();
		/**
		 * 判断是否是集中开单
		 */
		if(bean.getPickupCentralized()!=null&&bean.getPickupCentralized()){
			//判断是否是 异地开单
			String waybillNo =  bean.getWaybillNo();
			String  createOrgCode= bean.getCreateOrgCode();
			if(StringUtil.isNotEmpty(waybillNo)
					&& StringUtil.isNotEmpty(createOrgCode)){
				WaybillPictureEntity entity = new WaybillPictureEntity();
				entity.setWaybillNo(waybillNo);
				entity.setActive(FossConstants.YES);
				entity = waybillService.queryWaybillPictureByEntity(entity);
				if(entity!=null && FossConstants.NO.equals(entity.getLocal())){
					//根据本属开单组去查询
					createOrgCode = entity.getLocalBillGroupCode();
				}
			}
			SaleDepartmentEntity saleDepartment = waybillService.queryPickupCentralizedDeptCode(createOrgCode);
			if(saleDepartment!=null){
				departDeptCode = saleDepartment.getCode();
				departDeptName = saleDepartment.getName();
			}
		} else {
			departDeptCode = bean.getReceiveOrgCode();
			departDeptName = bean.getReceiveOrgName();
		}
		outVo.setDepartDeptCode(departDeptCode);
		outVo.setDepartDeptName(departDeptName);
		outVo.setArriveDetpCode(bean.getCustomerPickupOrgCode().getCode());
		outVo.setArriveDetpName(bean.getCustomerPickupOrgCode().getName());
		outVo.setExist(waybillService.identityEffectivePlan(departDeptCode,
				bean.getCustomerPickupOrgCode().getCode(), bean
						.getProductCode().getCode(), new Date()));
		return outVo;
	}

	/**
	 * 判断是否需要清空目的站
	 * 
	 * @author WangQianJin
	 * @date 2013-7-19 下午2:35:03
	 */
	private String isNeedClearTarget(WaybillPanelVo bean) {
		String isNeed = FossConstants.YES;
		if (bean.getCustomerPickupOrgCode() != null
				&& bean.getCustomerPickupOrgCode().getCode() != null) {
			QueryPickupPointDto dto = new QueryPickupPointDto();
			// 网点类型标志
			dto.setDestNetType(bean.getProductCode().getDestNetType());
			// 产品编码
			dto.setTransType(bean.getProductCode().getCode());
			// 设置来源为开单
			dto.setSource(WaybillConstants.WAYBILL);
			// 设置当前时间，当前时间必须大于开业时间
			dto.setCurDate(new Date());
			// 设置营业部的到达属性
			dto.setArrive(FossConstants.YES);
			// 是否有效
			dto.setActive(FossConstants.ACTIVE);
			// 设置提货网点
			dto.setTargetOrgCode(bean.getCustomerPickupOrgCode().getCode());
			/**
			 * 判断是否为空运，且配载类型是否为单独开单，如果是，则提货网点只显示机场
			 */
			if (ProductEntityConstants.PRICING_PRODUCT_AIR_FREIGHT.equals(bean
					.getProductCode().getCode())) {
				// 非空判断（无意中发现的一个空提针bug，顺手就加了一个非校验）
				if (null != bean.getFreightMethod()) {
					/**
					 * 单独开单只能选择机场、合大票只能选择代理
					 */
					if (ProductEntityConstants.PRICING_PRODUCT_FREIGNT_DDKD
							.equals(bean.getFreightMethod().getValueCode())) {
						dto.setIsAirport(FossConstants.YES);
					} else if (ProductEntityConstants.PRICING_PRODUCT_FREIGNT_HDP
							.equals(bean.getFreightMethod().getValueCode())) {
						dto.setIsAirport(FossConstants.NO);
					}
			}
			}
			if (DictionaryValueConstants.OUTERBRANCH_TYPE_PX.equals(dto
					.getDestNetType())
					|| DictionaryValueConstants.OUTERBRANCH_TYPE_KY.equals(dto
							.getDestNetType())) {
				// 网点类型：偏线代理网点
				if (DictionaryValueConstants.OUTERBRANCH_TYPE_PX.equals(dto
						.getDestNetType())) {
					dto.setDestNetType(DictionaryValueConstants.OUTERBRANCH_TYPE_PX);
				}
				// 网点类型：空运代理网点
				else if (DictionaryValueConstants.OUTERBRANCH_TYPE_KY
						.equals(dto.getDestNetType())) {
					dto.setDestNetType(DictionaryValueConstants.OUTERBRANCH_TYPE_KY);
				}
				isNeed = VehicleAgencyDeptServiceFactory
						.getVehicleAgencyDeptService().checkProductAndTarget(
								dto);
			} else if (DictionaryValueConstants.DEPPON_OWN_ORG.equals(dto
					.getDestNetType())) {
				// 自有营业部类型
				dto.setSalesType(DictionaryValueConstants.ORG_ARRIVE);
				isNeed = DownLoadDataServiceFactory.getSalesDepartmentService()
						.checkProductAndTarget(dto);
			}
		} else {
			isNeed = null;
		}
		return isNeed;
	}

	/**
	 * 
	 * 清空目的站以及预配线路
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2013-3-4 下午06:53:27
	 * @param bean
	 */
	private void cleanTargetEmpty(WaybillPanelVo bean) {
		// 清空提货网点
		bean.setCustomerPickupOrgCode(null);
		// 清空提货网点名称
		bean.setCustomerPickupOrgName("");
		// 清空目的站
		bean.setTargetOrgCode("");
		// 清空长短途
		bean.setLongOrShort(null);
		// 清空预配线路
		bean.setLoadLineName("");
	}

	/**
	 * 
	 * 设置付费方式
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-12-19 下午09:16:51
	 */
	private void setPaidMethod(WaybillPanelVo bean) {
		int size = ui.getCombPaymentModeModel().getSize();
		for (int i = 0; i < size; i++) {
			DataDictionaryValueVo vo = (DataDictionaryValueVo) ui
					.getCombPaymentModeModel().getElementAt(i);
			if (vo == null || vo.getValueCode() == null) {
				bean.setPaidMethod(vo);
			}
		}
	}

	/**
	 * 
	 * 设置返单类型
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-12-19 下午09:16:51
	 */
	private void setReturnBillType(WaybillPanelVo bean) {
		int size = ui.getCombReturnBillTypeModel().getSize();
		for (int i = 0; i < size; i++) {
			DataDictionaryValueVo vo = (DataDictionaryValueVo) ui
					.getCombReturnBillTypeModel().getElementAt(i);
			if (WaybillConstants.NOT_RETURN_BILL.equals(vo.getValueCode())) {
				ui.incrementPanel.getCombReturnBillType().setSelectedItem(vo);
				bean.setReturnBillType(vo);
			}
		}
	}

	/**
	 * 
	 * （提货方式变更监听）
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-10-20 下午01:56:55
	 */
	public void receiveMethodListener(WaybillPanelVo bean) {
		if (bean.getReceiveMethod() != null) {
			if(bean.getReceiveMethod().getValueCode().equals(WaybillConstants.SEND_AND_EQUIP)
					||bean.getReceiveMethod().getValueCode().equals(WaybillConstants.SEND_UPSTAIRS_EQUIP)
					||bean.getReceiveMethod().getValueCode().equals(WaybillConstants.SEND_NO_UPSTAIRS)){
				ui.getIncrementPanel().getBtnInstall().setVisible(true);
			}
			else{
				ui.getIncrementPanel().getBtnInstall().setVisible(false);
			}
			if(bean.getSpecialValueAddedServiceType()!=null&&!"".equals(bean.getSpecialValueAddedServiceType()))
			{
			/*	public final static  String SHAZ = "SHAZ"; // 送货安装送货费
	            public final static  String SHSL = "SHSL"; // 送货上楼（家装）送货费
	            public final static  String SHBSL = "SHBSL"; //送货不上楼（家装）送货费
			 * //送货上楼(家装)
				public static final String SEND_UPSTAIRS_EQUIP = "SEND_UPSTAIRS_EQUIP";
				//送货安装
				public static final String SEND_AND_EQUIP="SEND_AND_EQUIP";
				//送货不上楼(家装)
				public static final String SEND_NO_UPSTAIRS="SEND_NO_UPSTAIRS";*/
				JXTable otherTable = ui.incrementPanel.getTblOther();
				WaybillOtherCharge model = (WaybillOtherCharge) otherTable.getModel();
				List<OtherChargeVo> data = model.getData();
				if(data!=null)
				{
				List<OtherChargeVo> dataMessage =new ArrayList<OtherChargeVo>();
				if(bean.getReceiveMethod().getValueCode().equals(WaybillConstants.SEND_AND_EQUIP))
				{
					
					for(int i=0;i<data.size();i++)
					{
						if(WaybillConstants.SHSL.equals(data.get(i).getCode())
								||WaybillConstants.SHBSL.equals(data.get(i).getCode())
								||data.get(i).getCode().startsWith(WaybillConstants.instCode)
								||data.get(i).getCode().startsWith(WaybillConstants.instsCode))
						{
							dataMessage.add(data.get(i));
							//data.remove(data.get(i));
						}
					}
				}
				if(bean.getReceiveMethod().getValueCode().equals(WaybillConstants.SEND_UPSTAIRS_EQUIP))
				{
					
					for(int i=0;i<data.size();i++)
					{
						if((WaybillConstants.SHAZ.equals(data.get(i).getCode()))
								||(WaybillConstants.SHBSL.equals(data.get(i).getCode()))
								||data.get(i).getCode().startsWith(WaybillConstants.instCode)
								||data.get(i).getCode().startsWith(WaybillConstants.instsCode))
						{
							dataMessage.add(data.get(i));
						}
					}
				}
				if(bean.getReceiveMethod().getValueCode().equals(WaybillConstants.SEND_NO_UPSTAIRS))
				{
					for(int i=0;i<data.size();i++)
					{
						if((WaybillConstants.SHSL.equals(data.get(i).getCode()))
								||(WaybillConstants.SHAZ.equals(data.get(i).getCode()))
								||data.get(i).getCode().startsWith(WaybillConstants.instCode)
								||data.get(i).getCode().startsWith(WaybillConstants.instsCode))
						{
							dataMessage.add(data.get(i));
						}
					}
				}
				if(dataMessage!=null)
				{
				for(int j=0;j<dataMessage.size();j++)
				{
					data.remove(dataMessage.get(j));
				}
				
				}
				}
				 ui.incrementPanel.setChangeDetail(data);
			}
			//发票标记
			CommonUtils.setInvoiceType(bean,new Date());
			// 只允许合同客户才可以选择免费送货
			Common.validateDeliverFree(bean, ui);
			/**
			 * 当运输性质为门到门的时候，提货方式不能选自提 【DP-FOSS-新产品名称修改及相关功能优化】
			 * Common.validateDeliverTransportDTD(bean, ui);
			*/
			// 内部带货
			Common.innerPickup(bean, ui);
			// 各种自提
			Common.selfPickup(bean, ui);
			// 设置其他费用
			// calculateOtherCharge(ui, bean);

			// 在已经选择了网点的情况下 修改提货方式 需要检查该网点是否支持该提货方式
			Common.validateCustomerPointBySelfPickup(bean, ui);

			// 送货进仓
			// Common.deliverStorge(bean, ui, waybillService);

			Common.setSaveAndSubmitFalse(ui);

			/**
			 * 如果非送货时，公里数不可录入，且要清空
			 */
			if (WaybillConstants.SELF_PICKUP.equals(bean.getReceiveMethod()
					.getValueCode())
					|| WaybillConstants.INNER_PICKUP.equals(bean
							.getReceiveMethod().getValueCode())
					|| WaybillConstants.AIR_PICKUP_FREE.equals(bean
							.getReceiveMethod().getValueCode())
					|| WaybillConstants.AIR_SELF_PICKUP.equals(bean
							.getReceiveMethod().getValueCode())
					|| WaybillConstants.AIRPORT_PICKUP.equals(bean
							.getReceiveMethod().getValueCode())) {
				bean.setKilometer(null);
				if (StringUtils.isNotBlank(ui.getPictureWaybillType())
						&& WaybillConstants.WAYBILL_PICTURE.equals(ui
								.getPictureWaybillType())) {
					// 公里数不可编辑
					ui.pictureTransferInfoPanel.getTxtKilometer().setEditable(
							false);
				} else {
					// 公里数不可编辑
					ui.transferInfoPanel.getTxtKilometer().setEditable(false);
				}
			} else {
				if (StringUtils.isNotBlank(ui.getPictureWaybillType())
						&& WaybillConstants.WAYBILL_PICTURE.equals(ui
								.getPictureWaybillType())) {
					// 公里数不可编辑
					ui.pictureTransferInfoPanel.getTxtKilometer().setEditable(
							true);
				} else {
					// 公里数可编辑
					ui.transferInfoPanel.getTxtKilometer().setEditable(true);
				}
			}

			if (WaybillConstants.DELIVER_STORAGE.equals(bean.getReceiveMethod()
					.getValueCode())) {
				ui.billingPayPanel.getTxtDeliveryCharge().setEditable(true);
				ui.billingPayPanel.getTxtDeliveryCharge().setEnabled(true);
			}
			/**
			 * 添加提货方式改变的监听事件
			 * 
			 * @author:218371-foss-zhaoyanjun
			 * @date:2014-12-13上午09:56
			 */
			addCombPickModeListener(bean);
			judge(bean);
		}

		// 提货方式改变后，清空送货是否手动修改过标识
		bean.setHandDeliveryFee(null);
	}

	private void judge(WaybillPanelVo bean) {
		if (StringUtils.isNotBlank(ui.getPictureWaybillType())
				&& WaybillConstants.WAYBILL_PICTURE.equals(ui
						.getPictureWaybillType())) {
			BranchVo vo = bean.getCustomerPickupOrgCode();
			if (vo != null) {
				OrgAdministrativeInfoEntity oaif = waybillService
						.queryByCode(vo.getCode());
				DataDictionaryValueVo dvo = bean.getReceiveMethod();
				if (oaif != null) {
					if (i18n.get(
							"foss.gui.creating.showPickupStationDialogAction.hg.name")
							.equals(oaif.getCityName())
							&& i18n.get(
									"foss.gui.creating.showPickupStationDialogAction.hg.code")
									.equals(oaif.getCityCode())
							&& WaybillConstants.DELIVER_UP.equals(dvo
									.getValueCode())) {
						ui.pictureTransferInfoPanel.getJBusinessZone()
								.setVisible(true);
						ui.pictureTransferInfoPanel.getJResidentialDistrict()
								.setVisible(true);
						bean.setBusinessZone(false);
						bean.setResidentialDistrict(false);
					} else {
						ui.pictureTransferInfoPanel.getJBusinessZone()
								.setVisible(false);
						ui.pictureTransferInfoPanel.getJResidentialDistrict()
								.setVisible(false);
						bean.setBusinessZone(false);
						bean.setResidentialDistrict(false);
					}
				}
			} else {
				ui.pictureTransferInfoPanel.getJBusinessZone()
						.setVisible(false);
				ui.pictureTransferInfoPanel.getJResidentialDistrict()
						.setVisible(false);
				bean.setBusinessZone(false);
				bean.setResidentialDistrict(false);
			}

		}
	}

	/**
	 * 
	 * 其他费用合计
	 * 
	 * @author WangQianJin
	 * @date 2013-05-06
	 */
	private void calculateOtherCharge(WaybillEditUI ui, WaybillPanelVo bean) {
		// 判断是否内部带货自提
		if (!WaybillConstants.INNER_PICKUP.equals(bean.getReceiveMethod()
				.getValueCode())) {
			JXTable table = ui.incrementPanel.getTblOther();
			WaybillOtherCharge model = (WaybillOtherCharge) table.getModel();
			List<OtherChargeVo> data = model.getData();

			if (data != null && !data.isEmpty()) {
				BigDecimal otherChargeSum = BigDecimal.ZERO;
				int i = 0;
				int j = 0;
				// 其他费用合计
				for (OtherChargeVo vo : data) {
					if (isPickupSelf(bean, vo)) {
						j = i;
						continue;
					}
					BigDecimal money = new BigDecimal(vo.getMoney());
					otherChargeSum = otherChargeSum.add(money);
					i++;
				}
				if (j != 0) {
					// 删除超远派送费
					data.remove(j);
					// ui.incrementPanel.setChangeDetail(data);
				}
				// 其他费用
				bean.setOtherFee(otherChargeSum);
				// 画布其他费用
				bean.setOtherFeeCanvas(otherChargeSum.toString());

			}
	}
	}

	/**
	 * 不是派送则删除超远派送费
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2013-8-15
	 */
	private Boolean isPickupSelf(WaybillPanelVo bean, OtherChargeVo vo) {
		String code = bean.getReceiveMethod().getValueCode();
		// 判断是否自提
		if (WaybillConstants.SELF_PICKUP.equals(code)
				|| WaybillConstants.AIR_SELF_PICKUP.equals(code)
				|| WaybillConstants.AIR_PICKUP_FREE.equals(code)
				|| WaybillConstants.AIRPORT_PICKUP.equals(code)
				|| WaybillConstants.INNER_PICKUP.equals(code)
				|| WaybillConstants.DELIVER_FREE.equals(code)
				|| WaybillConstants.DELIVER_FREE_AIR.equals(code)) {
			// 判断如果有超远派送费则从其他费用中删除
			if (PriceEntityConstants.PRICING_CODE_CCDDJS.equals(vo.getCode())) {
				return true;
			}
		}
		return false;
	}

	/**
	 * 收货客户名称焦点监听事件
	 * 
	 * @author 026123-foss-lifengteng
	 * @date 2013-1-7 上午8:31:07
	 */
	private void receiveCustomerNameListener(WaybillPanelVo bean) {
		// 客户名称
		String custName = StringUtil.defaultIfNull(bean
				.getReceiveCustomerName());
		// 客户名称为空则清空客户编码，设置发货联系人为可修改状态
		if ("".equals(custName)) {
			Common.noReceiveCustomerInfo(ui, bean);
		} else {
			// 封装查询条件
			CustomerQueryConditionDto dto = new CustomerQueryConditionDto();
			// 收货客户名称
			dto.setCustName(bean.getReceiveCustomerName());
			// 精确查询
			dto.setExactQuery(true);
			// 查询客户信息
			List<CustomerQueryConditionDto> contacts = waybillService
					.queryCustomerByCondition(dto);
			// 判断集合是否为空
			if (CollectionUtils.isNotEmpty(contacts)) {
				// 定义VO对象
				QueryMemberDialogVo memberVo = null;
				// 若只能一条记录时，则自动填充
				if (contacts.size() == 1) {
					memberVo = CommonUtils.convertToMemberVo(contacts).get(0);
				} else {
					// 创建弹出窗口
					QueryConsignerDialog dialog = new QueryConsignerDialog(
							contacts);
					// 剧中显示弹出窗口
					WindowUtil.centerAndShow(dialog);
					// 获得弹出窗口选择的值
					memberVo = dialog.getCustomerVo();
				}

				// 这里判空是为了防止选择一行记录未确定后直接关闭时出现的空对象
				if (memberVo == null) {
					return;
				}

				// 设置收货客户信息
				Common.setQueryReceiveCustomer(ui);
			} else {
				Common.noReceiveCustomerInfo(ui, bean);
			}
		}

		// 若为PDA补录，则更改收货客户信息后颜色变化以示提醒
		if (WaybillConstants.WAYBILL_STATUS_PDA_PENDING.equals(bean
				.getWaybillstatus())) {
			Common.setForegroundColor(ui, bean);
		}
	}

	/**
	 * 
	 * （重量联动监听）
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-10-24 下午05:09:48
	 */
	private void goodsWeightTotalListener(WaybillPanelVo bean) {
		vehicleDirect(bean);
		if (StringUtils.isNotBlank(this.ui.getPictureWaybillType())
				&& WaybillConstants.WAYBILL_PICTURE.equals(this.ui
						.getPictureWaybillType())) {
			BigDecimal  goodsWeightTotal = bean.getGoodsWeightTotal();
			BigDecimal goodsVolumeTotal = bean.getGoodsVolumeTotal();
			if (goodsWeightTotal != null
					&& new BigDecimal(0).compareTo(goodsWeightTotal) < 0
					&& goodsVolumeTotal != null
					&& new BigDecimal(0).compareTo(goodsVolumeTotal) < 0) {				bean.setServiceFee(BigDecimal.ZERO);// 清空装卸费
				bean.setPickupFee(BigDecimal.ZERO);
				// 接货费输入框
				ui.billingPayPanel.getTxtPickUpCharge().setEnabled(false);
			} else {
				// 接货费输入框
				ui.billingPayPanel.getTxtPickUpCharge().setEnabled(true);
			}
			if ((goodsWeightTotal == null || new BigDecimal(0)
					.compareTo(goodsWeightTotal) == 0)
					&& (bean.getServiceFee() == null || new BigDecimal(0)
							.compareTo(bean.getServiceFee()) == 0)) {				bean.setServiceFee(bean.getPictureServiceFee());
			}
			if (goodsWeightTotal == null
					|| new BigDecimal(0).compareTo(goodsWeightTotal) == 0) {
				Common.unsetWaybillPanelVoForWoodenPack(bean, ui);
				Common.unsetStorageMatterForWoodenPack(bean, ui);				
				Common.unsetWoodenPackFee(bean);
			}
			if (goodsWeightTotal == null
					|| new BigDecimal(0).compareTo(goodsWeightTotal) == 0) {				JXTable otherTable = this.ui.incrementPanel.getTblOther();
				WaybillOtherCharge model = (WaybillOtherCharge) otherTable
						.getModel();
				List<OtherChargeVo> data = model.getData();
				if (null != data && data.size() > 0) {
					int num = -1;
					for (int i = 0; i < data.size(); i++) {
						OtherChargeVo vo = data.get(i);
						if ("QS".equals(vo.getCode())) {
							num = i;
							break;
						}
					}
					if (num > -1) {
						data.remove(num);
					}
				}
				ui.incrementPanel.setChangeDetail(data);
				bean.setPickupFee(BigDecimal.ZERO);
				bean.setDeliveryGoodsFee(BigDecimal.ZERO);
				bean.setPrePayAmount(BigDecimal.ZERO);
				bean.setToPayAmount(BigDecimal.ZERO);
				bean.setValueAddFee(BigDecimal.ZERO);
				bean.setPromotionsFee(BigDecimal.ZERO);
				bean.setTotalFee(BigDecimal.ZERO);
				bean.setTransportFee(BigDecimal.ZERO);
			}
		} else {
			bean.setServiceFee(BigDecimal.ZERO);// 清空装卸费
		}
		Common.setSaveAndSubmitFalse(ui);

		String result = CommonUtils.promptGoodsWeightTotal(bean);
		/**
		 * 如果校验不正常，提示
		 */
		if (!WaybillConstants.SUCCESS.equals(result)) {
			MsgBox.showInfo(result);
		}

		// 计算完总运费修改了送货费相关
		if (FossConstants.YES.equals(bean.getFlagCalFee())) {
			// 清空送货是否手动修改过标识
			bean.setHandDeliveryFee(null);
		}
		// TODO 强制设置B货
		// setGoodsTypeB(bean);
		// 超重对内备注
		 setInnerNotes(bean);
		 /**
		  * Dmana-9885根据巨商汇或阿里巴巴传来的重量进行判断
		 * 
		  * @author:218371-foss-zhaoyanjun
		  * @date:2015-02-03
		  */
		if (WaybillConstants.GIANT_SINK.equals(bean.getOrderChannel())
				|| WaybillConstants.ALIBABA.equals(bean.getOrderChannel())) {
			 Common.specialChannelFreightWeight(bean);
		 }
		//修改重量重新获取报价费率与报价费率范围---206860
		 if(bean.getGoodsVolumeTotal() == null){
				bean.setGoodsVolumeTotal(BigDecimal.ZERO);
		 }
		 if(bean.getGoodsWeightTotal() == null){
			 	bean.setGoodsWeightTotal(BigDecimal.ZERO);
		 }
		 if(bean.getGoodsWeightTotal() != null && bean.getGoodsVolumeTotal() != null && bean.getCustomerPickupOrgCode() != null){
			 Common.getInsuranceCharge(bean, ui);
		 }
        // foss 343617 zhaoyiqing 20160913
        // 如果是精准包裹，修改重量体积时将上次计算送货费置为0，避免校验时送货费不能比原来低的问题。
        if (bean.getProductCode()!=null &&
                StringUtil.equals(bean.getProductCode().getCode(), ProductEntityConstants.PRICING_PRODUCT_PCP)){
            bean.setCalculateDeliveryGoodsFee(BigDecimal.ZERO);
        }

		// 修改重量重新获取包装费
		 Common.getYokeCharge(bean, ui);
		 // 重新计算运费
		 CalculateFeeTotalUtils.resetCalculateFee(bean);
	}

	/**
	 * 超重对内备注
	 * 
	 * @param bean
	 */
	private void setInnerNotes(WaybillPanelVo bean) {
		ProductEntityVo pc = bean.getProductCode();
		if (pc != null && !"AF".equals(pc.getCode())) {
			if (bean.getGoodsWeightTotal() == null
					|| bean.getGoodsQtyTotal() == null) {
					return;
				}
			BigDecimal zzl = bean.getGoodsWeightTotal();
			int zjs = bean.getGoodsQtyTotal();
			if (zjs == 0) {
					return;
				}
			// 对内备注
			String innerNs = bean.getInnerNotes();
			// 储运事项
			String cysx = bean.getTransportationRemark();
			BigDecimal cz = zzl.divide(new BigDecimal(zjs), 1,
					BigDecimal.ROUND_HALF_UP);
			String[] strs = null;
			String[] cysxStrs = null;
			if (StringUtil.isNotEmpty(innerNs)) {
				   strs = innerNs.split(";");
				}
			if (StringUtil.isNotEmpty(cysx)) {
					cysxStrs = cysx.split(";");
				}
			if (cz.compareTo(new BigDecimal(NumberConstants.NUMBER_500)) > 0) {
				if (strs != null) {
					StringBuilder newInnerNotes = new StringBuilder();
					for (String str : strs) {
						if (str.equals("超重货")) {
								continue;
							 }
						newInnerNotes.append(str).append(";");
						}
						newInnerNotes.append("超重货").append(";");
					bean.setInnerNotes(newInnerNotes.toString());

				} else {
						bean.setInnerNotes("超重货;");
					}

				if (cysxStrs != null) {
					StringBuilder remark = new StringBuilder();
					for (String str : cysxStrs) {
						if (str.equals("超重货")) {
								continue;
							 }
						remark.append(str).append(";");
						}
						remark.append("超重货").append(";");
					bean.setTransportationRemark(remark.toString());

				} else {
						bean.setTransportationRemark("超重货;");
					}

			} else {
				if (strs != null) {
					StringBuilder innerNs1 = new StringBuilder();
					for (String str : strs) {
						if (str.equals("超重货")) {
								continue;
							}
						innerNs1.append(str).append(";");
						}
					  bean.setInnerNotes(innerNs1.toString());
					}

				if (cysxStrs != null) {
					StringBuilder cysx1 = new StringBuilder();
					for (String str : cysxStrs) {
						if (str.equals("超重货")) {
								continue;
							}
						cysx1.append(str).append(";");
						}
					  bean.setTransportationRemark(cysx1.toString());
					}
				}
		}
	}

	/**
	 * 
	 * （体积联动监听）
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-10-24 下午05:09:44
	 */
	private void goodsVolumeTotalListener(WaybillPanelVo bean) {
		verifySendAndEquip(bean);
		vehicleDirect(bean);// 判断是否需要大车直送
		isValueGoods(bean);// 判断是否贵重物品
		if (StringUtils.isNotBlank(this.ui.getPictureWaybillType())
				&& WaybillConstants.WAYBILL_PICTURE.equals(this.ui
						.getPictureWaybillType())) {
			BigDecimal goodsWeightTotal = bean.getGoodsWeightTotal();
			BigDecimal goodsVolumeTotal = bean.getGoodsVolumeTotal();
			if (goodsWeightTotal != null
					&& new BigDecimal(0).compareTo(goodsWeightTotal) < 0
					&& goodsVolumeTotal != null
					&& new BigDecimal(0).compareTo(goodsVolumeTotal) < 0) {				bean.setServiceFee(BigDecimal.ZERO);// 清空装卸费
				bean.setPickupFee(BigDecimal.ZERO);
				// 接货费输入框
				ui.billingPayPanel.getTxtPickUpCharge().setEnabled(false);
			} else {
				// 接货费输入框
				ui.billingPayPanel.getTxtPickUpCharge().setEnabled(true);
			}
			if ((goodsVolumeTotal == null || new BigDecimal(0)
					.compareTo(goodsVolumeTotal) == 0)
					&& (bean.getServiceFee() == null || new BigDecimal(0)
							.compareTo(bean.getServiceFee()) == 0)) {				bean.setServiceFee(bean.getPictureServiceFee());
			}
if (goodsVolumeTotal == null
					|| new BigDecimal(0).compareTo(goodsVolumeTotal) == 0) {
				Common.unsetWaybillPanelVoForWoodenPack(bean, ui);
				Common.unsetStorageMatterForWoodenPack(bean, ui);				
				Common.unsetWoodenPackFee(bean);
			}
			if (goodsVolumeTotal == null
					|| new BigDecimal(0).compareTo(goodsVolumeTotal) == 0) {				JXTable otherTable = this.ui.incrementPanel.getTblOther();
				WaybillOtherCharge model = (WaybillOtherCharge) otherTable
						.getModel();
				List<OtherChargeVo> data = model.getData();
				int num = -1;
				if (CollectionUtils.isNotEmpty(data)) {
					for (int i = 0; i < data.size(); i++) {
						OtherChargeVo vo = data.get(i);
						if ("QS".equals(vo.getCode())) {
							num = i;
							break;
						}
					}
					if (num > -1) {
						data.remove(num);
					}
				}
				ui.incrementPanel.setChangeDetail(data);
				bean.setPickupFee(BigDecimal.ZERO);
				bean.setDeliveryGoodsFee(BigDecimal.ZERO);
				bean.setPrePayAmount(BigDecimal.ZERO);
				bean.setToPayAmount(BigDecimal.ZERO);
				bean.setValueAddFee(BigDecimal.ZERO);
				bean.setPromotionsFee(BigDecimal.ZERO);
				bean.setTotalFee(BigDecimal.ZERO);
				bean.setTransportFee(BigDecimal.ZERO);
			}
		} else {
			bean.setServiceFee(BigDecimal.ZERO);// 清空装卸费
		}
		Common.setSaveAndSubmitFalse(ui);
		String result = CommonUtils.promptGoodsVolumeTotal(bean);
		/**
		 * 如果校验不正常，提示
		 */
		if (!WaybillConstants.SUCCESS.equals(result)) {
			MsgBox.showInfo(result);
		}

		// 计算完总运费修改了送货费相关
		if (FossConstants.YES.equals(bean.getFlagCalFee())) {
			// 清空送货是否手动修改过标识
			bean.setHandDeliveryFee(null);
		}
		/**
		  * Dmana-9885根据巨商汇传来的体积进行判断
		 * 
		  * @author:218371-foss-zhaoyanjun
		  * @date:2015-02-03
		  */
		if (WaybillConstants.GIANT_SINK.equals(bean.getOrderChannel())
				|| WaybillConstants.ALIBABA.equals(bean.getOrderChannel())) {
			 Common.specialChannelFreightVolume(bean);
		 }
		//修改重量重新获取报价费率与报价费率范围---206860
		 if(bean.getGoodsVolumeTotal() == null){
				bean.setGoodsVolumeTotal(BigDecimal.ZERO);
		 }
		 if(bean.getGoodsWeightTotal() == null){
			 	bean.setGoodsWeightTotal(BigDecimal.ZERO);
		 }
		 if(bean.getGoodsWeightTotal() != null && bean.getGoodsVolumeTotal() != null  && bean.getCustomerPickupOrgCode() != null){
			 Common.getInsuranceCharge(bean, ui);
		 }
        // foss 343617 zhaoyiqing 20160913
        // 如果是精准包裹，修改重量体积时将上次计算送货费置为0，避免校验时送货费不能比原来低的问题。
        if (bean.getProductCode()!=null &&
                StringUtil.equals(bean.getProductCode().getCode(), ProductEntityConstants.PRICING_PRODUCT_PCP)){
            bean.setCalculateDeliveryGoodsFee(BigDecimal.ZERO);
        }

		// 修复pop-189 start
		// 修改体积重新获取包装费
		 Common.getYokeCharge(bean, ui);
		 // 重新计算运费
		 CalculateFeeTotalUtils.resetCalculateFee(bean);
		// 修复pop-189 end
	}
    /**
     * 特殊运单体积改变，则从表格中自动剔除送货费
     * foss-254615-mabinliang
     * 2015-10-23
     */
	private void verifySendAndEquip(WaybillPanelVo bean) {
		if (bean.getReceiveMethod() != null) {
			if (bean.getReceiveMethod().getValueCode().equals(WaybillConstants.SEND_AND_EQUIP)
					|| bean.getReceiveMethod().getValueCode().equals(WaybillConstants.SEND_UPSTAIRS_EQUIP)
					|| bean.getReceiveMethod().getValueCode().equals(WaybillConstants.SEND_NO_UPSTAIRS)) {
				ui.getIncrementPanel().getBtnInstall().setVisible(true);
			} else {
				ui.getIncrementPanel().getBtnInstall().setVisible(false);
			}
			if (bean.getSpecialValueAddedServiceType() != null&& !"".equals(bean.getSpecialValueAddedServiceType())) {
				JXTable otherTable = ui.incrementPanel.getTblOther();
				WaybillOtherCharge model = (WaybillOtherCharge) otherTable.getModel();
				List<OtherChargeVo> data = model.getData();
				if (data != null) {
					List<OtherChargeVo> dataMessage = new ArrayList<OtherChargeVo>();
					if (bean.getReceiveMethod().getValueCode().equals(WaybillConstants.SEND_AND_EQUIP)) {
						for (int i = 0; i < data.size(); i++) {
							if (WaybillConstants.SHAZ.equals(data.get(i).getCode())) {
								dataMessage.add(data.get(i));
							}
						}
					}
					if (bean.getReceiveMethod().getValueCode().equals(WaybillConstants.SEND_UPSTAIRS_EQUIP)) {
						for (int i = 0; i < data.size(); i++) {
							if (WaybillConstants.SHSL.equals(data.get(i).getCode())) {
								dataMessage.add(data.get(i));
							}
						}
					}
					if (bean.getReceiveMethod().getValueCode().equals(WaybillConstants.SEND_NO_UPSTAIRS)) {
						for (int i = 0; i < data.size(); i++) {
							if (WaybillConstants.SHBSL.equals(data.get(i).getCode())) {
								dataMessage.add(data.get(i));
							}
						}
					}
					if (dataMessage != null) {
						for (int j = 0; j < dataMessage.size(); j++) {
							data.remove(dataMessage.get(j));
						}

					}
				}
				ui.incrementPanel.setChangeDetail(data);
			}
		}
	}

	/**
	 * 
	 * 校验重量体积是否为空
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2013-2-20 上午09:09:00
	 */
	private Boolean validateVolumeWeight(WaybillPanelVo bean) {
		if (bean.getGoodsQtyTotal() == null
				|| bean.getGoodsWeightTotal() == null
				|| bean.getGoodsVolumeTotal() == null
				|| bean.getInsuranceAmount() == null) {
			return false;
		}

		return true;
	}

	/**
	 * 
	 * （大车直送）
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-10-24 下午06:17:25
	 */
	private void vehicleDirect(WaybillPanelVo bean) {
		if (validateVolumeWeight(bean)) {
			Boolean bool = false;
			if ("ONLINE_LOGIN".equals(SessionContext.get("user_loginType")
					.toString())) {
				IWaybillService waybillService = WaybillServiceFactory
						.getWaybillService();
				bool = waybillService.isVehicleDirect(bean
						.getGoodsWeightTotal().toString(), bean
						.getGoodsVolumeTotal().toString());
			} else {
				bool = waybillService.isVehicleDirect(bean
						.getGoodsWeightTotal().toString(), bean
						.getGoodsVolumeTotal().toString());
			}
			if (bool) {
				if (!bean.getCarDirectDelivery()) {
					if (JOptionPane.YES_OPTION == JOptionPane
							.showConfirmDialog(
									ui,
									i18n.get("foss.gui.creating.listener.Waybill.vehicleDirect.one"),
									i18n.get("foss.gui.creating.waybillEditUI.common.prompt"),
									JOptionPane.YES_NO_OPTION)) {
						if (StringUtils.isNotBlank(ui.getPictureWaybillType())
								&& WaybillConstants.WAYBILL_PICTURE.equals(ui
										.getPictureWaybillType())) {
							// 大车直送
							ui.pictureCargoInfoPanel.getChbCarThrough()
									.setSelected(true);
							ui.pictureCargoInfoPanel.getChbCarThrough()
									.setEnabled(true);
						} else {
							// 大车直送
							ui.cargoInfoPanel.getChbCarThrough().setSelected(
									true);
							ui.cargoInfoPanel.getChbCarThrough().setEnabled(
									true);
						}
					} else {
						if (StringUtils.isNotBlank(ui.getPictureWaybillType())
								&& WaybillConstants.WAYBILL_PICTURE.equals(ui
										.getPictureWaybillType())) {
							// 大车直送
							ui.pictureCargoInfoPanel.getChbCarThrough()
									.setSelected(false);
							ui.pictureCargoInfoPanel.getChbCarThrough()
									.setEnabled(false);
						} else {
							// 大车直送
							ui.cargoInfoPanel.getChbCarThrough().setSelected(
									false);
							ui.cargoInfoPanel.getChbCarThrough().setEnabled(
									false);
						}
					}
				}
			} else {
				if (StringUtils.isNotBlank(ui.getPictureWaybillType())
						&& WaybillConstants.WAYBILL_PICTURE.equals(ui
								.getPictureWaybillType())) {
					// 大车直送
					ui.pictureCargoInfoPanel.getChbCarThrough().setSelected(
							false);
					ui.pictureCargoInfoPanel.getChbCarThrough().setEnabled(
							false);
				} else {
					// 大车直送
					ui.cargoInfoPanel.getChbCarThrough().setSelected(false);
					ui.cargoInfoPanel.getChbCarThrough().setEnabled(false);
				}
			}
		}
	}

	/**
	 * 
	 * （件数事件监听）
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-10-25 上午10:14:42
	 */
	private void goodsQtyTotalListener(WaybillPanelVo bean) {
		if (bean.getGoodsQtyTotal() == null) {
			return;
		}
		// ===========lianhe/为零时置空非木包装费/2017-2-17/start=======
		if (bean.getGoodsQtyTotal() == null ||bean.getGoodsQtyTotal() == 0) {
			Common.setNonWoodPackingAmountNull(bean,ui);
		}
		// ===========lianhe/为零时置空非木包装费/2017-2-17/end=======
		isValueGoods(bean);// 是否贵重物品
		packPieces(bean);// 设置包装纸默认值
		Common.refreshLabeledGood(bean, ui); // 刷新标签流水号列表 zxy 20131118
												// ISSUE-4391
		Common.setSaveAndSubmitFalse(ui);

		// 计算完总运费修改了送货费相关
		if (FossConstants.YES.equals(bean.getFlagCalFee())) {
			// 清空送货是否手动修改过标识
			bean.setHandDeliveryFee(null);
		}
		// TODO 强制设置B货
		// setGoodsTypeB(bean);
		// 超重对内备注
		setInnerNotes(bean);
	}

	/**
	 * 
	 * （默认货物多少件就有多少纸包装）
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-10-29 上午11:08:59
	 */
	private void packPieces(WaybillPanelVo bean) {
		bean.setPaper(bean.getGoodsQtyTotal());
		bean.setWood(Integer.valueOf(0));// 木
		bean.setFibre(Integer.valueOf(0));// 纤
		bean.setSalver(Integer.valueOf(0));// 托
		bean.setMembrane(Integer.valueOf(0));// 膜

		// 任何时候只要setWood 为0 都必须调用下面三个方法
		Common.unsetWaybillPanelVoForWoodenPack(bean, ui);
		Common.unsetStorageMatterForWoodenPack(bean, ui);
		Common.unsetWoodenPackFee(bean);
	}

	/**
	 * 
	 * （保险声明价值监听）
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-10-25 上午11:12:48
	 */
	private void insuranceAmountListener(WaybillPanelVo bean) {
		Common.setSaveAndSubmitFalse(ui);
		// zxy 20140101 MANA-409 start 新增:限制非月结客户开单0保价
		// 1非月结客户无订单发货,2非月结客户通过内部渠道（400、营业部下单） 保价声明价值等于0则抛出异常
		// 判断操作
		if (null == bean.getReceiveMethod()) {
			// 增加日志
			log.error("开单提货方式不能为空！");
			// 抛出异常信息
			throw new WaybillSubmitException(
					i18n.get("foss.gui.creating.listener.Waybill.exception.ReceiveMethodNotNull"));
		}
		//报价声明价值
		BigDecimal insuranceAmount =bean.getInsuranceAmount();
		//保险生命价值大于等于1000000给出提示
		if(insuranceAmount != null && insuranceAmount.intValue()>= NUM_1000000){
			MsgBox.showInfo(i18n.get("foss.gui.creating.listener.Waybill.exception.noMonthEndInsuranceOnemillion"));
		}
		/**
		 * 280747
		 * zhuxue
		 */
		// 如果内部带货则不用判断保价声明价值
		if (!WaybillConstants.INNER_PICKUP.equals(bean.getReceiveMethod().getValueCode())) {
			//保价声明价值小于等于0
			if(insuranceAmount == null || insuranceAmount.compareTo(BigDecimal.ZERO) <= 0){
				//非月结客户
				if(bean.getChargeMode() == null || !bean.getChargeMode()){
					//订单号为空
					MsgBox.showInfo(i18n.get("foss.gui.creating.listener.Waybill.exception.noMonthEndInsuranceZero2"));
				}else{
					MsgBox.showInfo(i18n.get("foss.gui.creating.listener.Waybill.exception.noMonthEndInsuranceZero3"));
				}
			}
		}

		// zxy 20140101 MANA-409 end 新增:限制非月结客户开单0保价
		isValueGoods(bean);// 是否贵重物品

		bean.setInsuranceAmountCanvas(bean.getInsuranceAmount().toString());

		// 若为PDA补录，则更改保价后颜色变化以示提醒
		if (WaybillConstants.WAYBILL_STATUS_PDA_PENDING.equals(bean
				.getWaybillstatus())) {
			ui.incrementPanel.getTxtInsuranceValue().setForeground(Color.RED);
		}

		//获取整车费率范围
		if(bean.getGoodsVolumeTotal() == null){
			bean.setGoodsVolumeTotal(BigDecimal.ZERO);
		}
		if(bean.getGoodsWeightTotal() == null){
			bean.setGoodsWeightTotal(BigDecimal.ZERO);
		}
		if(bean.getGoodsWeightTotal() != null && bean.getGoodsVolumeTotal() != null  && bean.getCustomerPickupOrgCode() != null){
			Common.getInsuranceCharge(bean, ui);
		}

		/**
		 * 根据“至尊宝”判断，若修改保费小于50000时，删除“至尊宝冲减”
		 * 
		 * @author:218371-foss-zhaoyanjun
		 * @date:2015-04-15上午09:39
		 */
		judgeZhiZunBao(bean);

		// 重新计算运费
		CalculateFeeTotalUtils.resetCalculateFee(bean);

			}

	private void setRate(GuiResultBillCalculateDto gDto, WaybillPanelVo bean) {
		ui.incrementPanel.getTxtInsuranceRate().setEnabled(false);
		if (gDto != null) {
			// 保价费率是否可修改
			bean.setCanmodify(gDto.getCanmodify());
			// 最低保价费率
			bean.setMinFeeRate(gDto.getMinFeeRate());
			// 最高保价费率
			bean.setMaxFeeRate(gDto.getMaxFeeRate());
			// 默认保价费率
			if (gDto.getFeeRate() != null) {
				bean.setInsuranceRate(gDto.getFeeRate().multiply(
						new BigDecimal(NumberConstants.NUMBER_1000)));
			}
			if (FossConstants.YES.equals(gDto.getCanmodify())) {
				ui.incrementPanel.getTxtInsuranceRate().setEnabled(true);
			}
		}
	}

	 /**
     * 调整保价费率范围
	 * 
     * @param bean
     */

	// private void setRate(GuiResultBillCalculateDto gDto,WaybillPanelVo bean){
	// ui.incrementPanel.getTxtInsuranceRate().setEnabled(false);
	// if(gDto !=null){
	// //保价费率是否可修改
	// bean.setCanmodify(gDto.getCanmodify());
	// //最低保价费率
	// bean.setMinFeeRate(gDto.getMinFeeRate());
	// //最高保价费率
	// bean.setMaxFeeRate(gDto.getMaxFeeRate());
	// /**
	// * （FOSS20150818）RFOSS2015052602 保价阶梯费率
	// * @author foss-206860
	// *
	// * */
	// //默认保价费率
	// BigDecimal feeRate =
	// Common.nullBigDecimalToZero(gDto.getActualFeeRate());
	// //当折扣保价费率不等于0且折扣保价费率与默认保价费率不相等时，做默认保价费率处理和费率区间处理
	// if(PriceEntityConstants.PRICING_CODE_BF.equals(gDto.getPriceEntryCode())
	// && CollectionUtils.isNotEmpty(gDto.getDiscountPrograms())){
	// //合同客户：折后高于该段保价费率最低值则显示【该段保价费率最低值，折后保价费率】；折后低于或等于该段保价费率最低值则直接显示折后保价费率。
	// if(feeRate.compareTo(bean.getMinFeeRate()) > 0){
	// bean.setMaxFeeRate(Common.nullBigDecimalToZero(feeRate));
	// }else{
	// bean.setMaxFeeRate(Common.nullBigDecimalToZero(feeRate));
	// bean.setMinFeeRate(Common.nullBigDecimalToZero(feeRate));
	// }
	// }
	// String insuranceRateRange =
	// "["+bean.getMinFeeRate()+","+bean.getMaxFeeRate()+"]";
	// bean.setInsuranceRateRange(insuranceRateRange);
	// bean.setInsuranceRateRangeCanvas(insuranceRateRange);
	// bean.setInsuranceFee(gDto.getCaculateFee());
	// //实际保价费率
	// if(bean.getInsuranceRate() != null &&
	// bean.getInsuranceRate().compareTo(bean.getMinFeeRate().multiply(new
	// BigDecimal(1000))) >= 0
	// && bean.getInsuranceRate().compareTo(bean.getMaxFeeRate().multiply(new
	// BigDecimal(1000))) <= 0){
	// bean.setInsuranceRate(bean.getInsuranceRate());
	// }else{
	// bean.setInsuranceRate(gDto.getActualFeeRate().multiply(new
	// BigDecimal(1000)));
	// }
	// if(FossConstants.YES.equals(gDto.getCanmodify())){
	// ui.incrementPanel.getTxtInsuranceRate().setEnabled(true);
	// }
	// }else{
	// throw new
	// WaybillValidateException(i18n.get("foss.pkp.creating.itserivce.notconfig.default.insurance"));
	// }
	// }

	/**
	 * 调整保价费率范围
	 * 
	 * @param bean
	 */

	private void insuranceRateListener(WaybillPanelVo bean) {
		// 最低保价费率
		BigDecimal minFeeRate = bean.getMinFeeRate();
		// 最高保价费率
		BigDecimal maxFeeRate = bean.getMaxFeeRate();
		// 调整保价费率
		BigDecimal insuranceRate = bean.getInsuranceRate().divide(
				new BigDecimal(NumberConstants.NUMBER_1000));
		// 报价声明价值
		BigDecimal insuranceAmount = bean.getInsuranceAmount();
		if (minFeeRate != null && maxFeeRate != null) {
			if (insuranceRate.compareTo(minFeeRate) < 0
					|| insuranceRate.compareTo(maxFeeRate) > 0) {
				minFeeRate = minFeeRate.multiply(new BigDecimal(NumberConstants.NUMBER_1000));
				maxFeeRate = maxFeeRate.multiply(new BigDecimal(NumberConstants.NUMBER_1000));
				throw new WaybillValidateException(
						i18n.get(
								"foss.gui.creating.listener.Waybill.exception.Outrange",
								new Object[] { insuranceAmount,
										minFeeRate + "‰", maxFeeRate + "‰" }));
			}
		}

		// （FOSS20150818）RFOSS2015052602 保价阶梯费率 -- 206860
		if (bean.getGoodsVolumeTotal() == null) {
			bean.setGoodsVolumeTotal(BigDecimal.ZERO);
	}
		if (bean.getGoodsWeightTotal() == null) {
			bean.setGoodsWeightTotal(BigDecimal.ZERO);
		}
		if (bean.getGoodsWeightTotal() != null
				&& bean.getGoodsVolumeTotal() != null
				&& bean.getCustomerPickupOrgCode() != null) {
			Common.getInsuranceRateListener(bean);
		}

	}

	/**
	 * 
	 * （根据重量、件数、保价判断是否贵重物品）
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-10-25 上午11:07:50
	 */
	private void isValueGoods(WaybillPanelVo bean) {
		/**
		 * 判断运输性质是否为整车，整车无贵重物品。
		 */
		if (bean != null && bean.getProductCode() != null) {

			if (StringUtils.isNotBlank(ui.getPictureWaybillType())
					&& WaybillConstants.WAYBILL_PICTURE.equals(ui
							.getPictureWaybillType())) {
				if (ProductEntityConstants.PRICING_PRODUCT_FULL_VEHICLE
						.equals(bean.getProductCode().getCode())) {
					ui.pictureCargoInfoPanel.getChbValuable()
							.setSelected(false);
					ui.pictureCargoInfoPanel.getChbValuable().setEnabled(false);
				} else {
					if (validateVolumeWeight(bean)) {
						Boolean bool = false;
						bool = waybillService.isValueGoods(bean.getGoodsName(),
								bean.getGoodsQtyTotal().intValue(), bean
										.getGoodsVolumeTotal().toString(), bean
										.getInsuranceAmount().toString());
						if (bool) {
							ui.pictureCargoInfoPanel.getChbValuable()
									.setSelected(true);
							ui.pictureCargoInfoPanel.getChbValuable()
									.setEnabled(false);
						} else {
							ui.pictureCargoInfoPanel.getChbValuable()
									.setSelected(false);
							ui.pictureCargoInfoPanel.getChbValuable()
									.setEnabled(true);
						}
					}
				}
			} else {
				if (ProductEntityConstants.PRICING_PRODUCT_FULL_VEHICLE
						.equals(bean.getProductCode().getCode())) {
				ui.cargoInfoPanel.getChbValuable().setSelected(false);
				ui.cargoInfoPanel.getChbValuable().setEnabled(false);
			} else {
				if (validateVolumeWeight(bean)) {
					Boolean bool = false;
						bool = waybillService.isValueGoods(bean.getGoodsName(),
								bean.getGoodsQtyTotal().intValue(), bean
										.getGoodsVolumeTotal().toString(), bean
										.getInsuranceAmount().toString());
					if (bool) {
							ui.cargoInfoPanel.getChbValuable()
									.setSelected(true);
							ui.cargoInfoPanel.getChbValuable()
									.setEnabled(false);
					} else {
							ui.cargoInfoPanel.getChbValuable().setSelected(
									false);
						ui.cargoInfoPanel.getChbValuable().setEnabled(true);
						}
					}
				}
			}
		}

	}

	/**
	 * 
	 * 贵重物品事件监听
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-12-13 上午11:46:48
	 */
	private void preciousGoodsListener(WaybillPanelVo bean) {
		Boolean bool = bean.getPreciousGoods();
		if (bool) {
			String remark = bean.getTransportationRemark();
			if (remark != null) {
				bean.setTransportationRemark(WaybillConstants.VALUE_GOODS_NAME
						+ remark);
			} else {
				bean.setTransportationRemark(WaybillConstants.VALUE_GOODS_NAME);
			}
			if (StringUtils.isNotBlank(ui.getPictureWaybillType())
					&& WaybillConstants.WAYBILL_PICTURE.equals(ui
							.getPictureWaybillType())) {
				ui.pictureCargoInfoPanel.getChbValuable().setSelected(true);
			} else {
				ui.cargoInfoPanel.getChbValuable().setSelected(true);
			}

		} else {
			String remark = bean.getTransportationRemark();
			remark = remark.replace(WaybillConstants.VALUE_GOODS_NAME, "");
			bean.setTransportationRemark(remark);
			if (StringUtils.isNotBlank(ui.getPictureWaybillType())
					&& WaybillConstants.WAYBILL_PICTURE.equals(ui
							.getPictureWaybillType())) {
				ui.pictureCargoInfoPanel.getChbValuable().setSelected(false);
			} else {
				ui.cargoInfoPanel.getChbValuable().setSelected(false);
			}
		}
	}

	/**
	 * 
	 * 大车直送事件监听
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2013-1-9 下午05:55:20
	 */
	private void carDirectDeliveryListener(WaybillPanelVo bean) {

		StringBuffer sb = new StringBuffer("");

		String woodTxt = "";
		String sandTxt = "";
		String innerWaybillText = "";

		String originalTxt = bean.getTransportationRemark();
		if (originalTxt == null) {
			originalTxt = "";
		}

		String[] remark = originalTxt.split(";");
		for (int i = 0; i < remark.length; i++) {
			String oldData = remark[i];
			if (oldData.indexOf(StringUtil.defaultIfNull(i18n
					.get("foss.gui.creating.woodYokeEnterAction.standGoods"))) != -1) {
				woodTxt = oldData;
			}

			if (oldData.indexOf(StringUtil.defaultIfNull(i18n
					.get("foss.gui.creating.woodYokeEnterAction.boxGoods"))) != -1) {
				sandTxt = oldData;
			}
			// 弃货导入内部开单
			if (oldData
					.contains(StringUtil.defaultIfNull(i18n
							.get("foss.gui.creating.woodYokeEnterAction.innerWaybillText")))) {
				innerWaybillText = oldData;
			}
		}

		if (StringUtils.isNotEmpty(woodTxt)) {
			sb.append(woodTxt).append("; ");
		}

		if (StringUtils.isNotEmpty(sandTxt)) {
			sb.append(sandTxt).append("; ");
		}
		// 加上弃货导入内部开单备注
		if (StringUtils.isNotEmpty(innerWaybillText)) {
			sb.append(innerWaybillText).append("; ");
		}

		/**
		 * 对外备注
		 */
		JComboCheckBox checkbox;
		if (StringUtils.isNotBlank(ui.getPictureWaybillType())
				&& WaybillConstants.WAYBILL_PICTURE.equals(ui
						.getPictureWaybillType())) {
			checkbox = (JComboCheckBox) ui.pictureCargoInfoPanel
					.getCombOutSideRemark();
		} else {
			checkbox = (JComboCheckBox) ui.cargoInfoPanel
					.getCombOutSideRemark();
		}

		for (String string : checkbox.getCheckedValues()) {
			sb.append(string).append("; ");
		}

		// zxy 20130927 BUG-56130 start 新增：添加贵重物品
		/**
    	 * 贵重物品
		 */
    	Boolean bool = bean.getPreciousGoods();
		if (bool != null && bool) {
			sb.append(WaybillConstants.VALUE_GOODS_NAME);
		}
		// zxy 20130927 BUG-56130 end 新增：添加贵重物品

		/**
		 * 对内备注
		 */
		String innerSiderRemark;
		if (StringUtils.isNotBlank(ui.getPictureWaybillType())
				&& WaybillConstants.WAYBILL_PICTURE.equals(ui
						.getPictureWaybillType())) {
			innerSiderRemark = ui.pictureCargoInfoPanel.getTxtInsideRemark()
					.getText();
		} else {
			innerSiderRemark = ui.cargoInfoPanel.getTxtInsideRemark().getText();
		}
		if (innerSiderRemark != null && !"".equals(innerSiderRemark)) {
			sb.append(innerSiderRemark).append("; ");
		}

		if (StringUtils.isNotBlank(ui.getPictureWaybillType())
				&& WaybillConstants.WAYBILL_PICTURE.equals(ui
						.getPictureWaybillType())) {
			/**
			 * 大车直送
			 */
			if (ui.pictureCargoInfoPanel.getChbCarThrough().isSelected()) {
				sb.append(
						i18n.get("foss.gui.creating.waybillEditUI.carThrough.name"))
						.append("; ");
			}
		} else {
			/**
			 * 大车直送
			 */
		if (ui.cargoInfoPanel.getChbCarThrough().isSelected()) {
				sb.append(
						i18n.get("foss.gui.creating.waybillEditUI.carThrough.name"))
						.append("; ");
			}
		}
		// zxy 20130927 BUG-56130 start 修改：
		bean.setTransportationRemark(sb.toString());
		// ui.cargoInfoPanel.getTxtTransportationRemark().setText(sb.toString());
		// zxy 20130927 BUG-56130 end修改：

	}

	/**
	 * 
	 * 对内备注事件监听
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2013-1-9 下午05:55:20
	 */
	private void innerNotesListener(WaybillPanelVo bean) {

		if (StringUtils.isNotEmpty(bean.getInnerNotesBack())) {
			// 清除上一次输入的对内备注
			Common.cleanRemark(bean, bean.getInnerNotesBack());
		}

		if (StringUtils.isNotEmpty(bean.getInnerNotes())) {
			// 变更明细表的字段长度为varchar2（1000），最多只能储存333汉字
			// if(bean.getInnerNotes() != null && bean.getInnerNotes().length()
			// > 300){
			// MsgBox.showInfo("对内备注长度不能超过300字符");
			// return;
			// }
			String transportationRemark = bean.getTransportationRemark();
			if (transportationRemark == null) {
				transportationRemark = "";
			}
			transportationRemark = transportationRemark + bean.getInnerNotes()
					+ ";";
			bean.setTransportationRemark(transportationRemark);
			bean.setInnerNotesBack(bean.getInnerNotes());
		}

	}

	/**
	 * 
	 * （尺寸事件监听）
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-10-29 上午08:53:50
	 */
	private void goodsSizeListener(WaybillPanelVo bean) {

		if (bean.getGoodsSize() != null && !"".equals(bean.getGoodsSize())) {
			if (NumberValidate.checkIsGoodsSize(bean.getGoodsSize())) {
				calculateVolume(bean);
				/**
				  * Dmana-9885根据巨商汇传来的体积进行判断
				 * 
				  * @author:218371-foss-zhaoyanjun
				  * @date:2015-02-03
				  */
				if (WaybillConstants.GIANT_SINK.equals(bean.getOrderChannel())
						|| WaybillConstants.ALIBABA.equals(bean
								.getOrderChannel())) {
					 Common.specialChannelFreightVolume(bean);
				 }
			} else {
				StringBuffer str = new StringBuffer(
						i18n.get("foss.gui.creating.waybillDescriptor.size.rule"));
				str.append("(\n")
						.append(i18n
								.get("foss.gui.creating.waybillDescriptor.example"));
				str.append("：0.5*0.5*0.5*2")
						.append(i18n
								.get("foss.gui.creating.waybillDescriptor.or"))
						.append("\n");
				str.append("0.5*0.5*0.5*2+1*1*1*5")
						.append(i18n
								.get("foss.gui.creating.waybillDescriptor.or"))
						.append("\n");
				str.append("0.5*0.5*0.5*2+1*1*1*5-0.3*0.3*0.6*1)");
				MsgBox.showInfo(str.toString());
			}
		}
	}

	/**
	 * 
	 * 根据传入的尺寸参数计算体积
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-11-12 下午03:53:39
	 */
	private void calculateVolume(WaybillPanelVo bean) {
		ScriptEngineManager manager = new ScriptEngineManager();
		ScriptEngine engine = manager.getEngineByName("JavaScript");
		try {
			Object result = engine.eval(bean.getGoodsSize());
			BigDecimal bigDecimal = new BigDecimal(result.toString());
			bigDecimal = bigDecimal.setScale(NumberConstants.NUMBER_3, BigDecimal.ROUND_HALF_UP);
			BigDecimal m = new BigDecimal(WaybillConstants.VOLUME_M);// 将厘米转换成米
			bigDecimal = bigDecimal.divide(m);
			bigDecimal = bigDecimal.setScale(2, BigDecimal.ROUND_HALF_UP);// 四舍五入
			// 四舍五入后如果变为0.00，那么需要给成默认的0.01，以免丢失体积
			if (bigDecimal.compareTo(BigDecimal.ZERO)== 0) {
				bigDecimal = new BigDecimal("0.01");
			}
			BigDecimal upLimit = new BigDecimal(WaybillConstants.VOLUME_UPLIMIT);
			if (bigDecimal.compareTo(upLimit) > 0) {
				MsgBox.showInfo(i18n
						.get("foss.gui.creating.listener.Waybill.calculateVolume.one")
						+ WaybillConstants.VOLUME_UPLIMIT);
				bean.setGoodsSize("");
			} else if (BigDecimal.ZERO.compareTo(bigDecimal) > 0) {
				MsgBox.showInfo(i18n
						.get("foss.gui.creating.listener.Waybill.calculateVolume.two"));
				bean.setGoodsSize("");
			} else {
				bean.setGoodsVolumeTotal(bigDecimal);
				goodsVolumeTotalListener(bean);//修改体积后，应有提示是否大车直运，保价费率是否改变
			}
			if(bean.getSpecialValueAddedServiceType()!=null&&bean.getSpecialValueAddedServiceType().getValueCode()!=null){
			// 判断长度不能为2米超过提示
			String goodsSize = bean.getGoodsSize();
			String goodsSizeNew = goodsSize.replace("+", "*").replace("-", "*");
			String str[] = goodsSizeNew.split("\\*");
			int j = 1;
				for (String string : str) {
					if (j == 1) {
						if (Double.valueOf(string) > NumberConstants.NUMBER_200) {
							j++;
							JOptionPane
									.showConfirmDialog(
											ui,
											i18n.get("foss.gui.creating.listener.Waybill.calculateVolume.length"),
											i18n.get("foss.gui.creating.calculateAction.msgBox.Prompt"),
											JOptionPane.YES_NO_OPTION);
						}

					}
				}
			Common.setSaveAndSubmitFalse(ui);
		  }
		} catch (ScriptException e) {
			log.error("ScriptException", e);
			throw new WaybillValidateException(
					i18n.get("foss.gui.creating.listener.Waybill.exception.one"),
					e);
		}
	}

	/**
	 * 
	 * （包装-木事件监听）
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-10-29 上午11:48:26
	 */
	private void woodListener(WaybillPanelVo bean) {

		if (bean.getWood() != null) {
			int wood = bean.getWood();
			if (wood > 0) {
				if (FossConstants.YES.equals(bean.getDoPacking())) {
					if (ui.getPictureWaybillType() != null
							&& WaybillConstants.WAYBILL_PICTURE.equals(ui
									.getPictureWaybillType().trim())) {
						if (bean.getGoodsName() == null
								|| "".equals(bean.getGoodsName())) {
							MsgBox.showInfo(i18n
									.get("foss.gui.creating.listener.Waybill.woodListener.three"));
							bean.setWood(0);
							// 任何时候只要setWood 为0 都必须调用下面三个方法
							Common.unsetWaybillPanelVoForWoodenPack(bean, ui);
							Common.unsetStorageMatterForWoodenPack(bean, ui);
							Common.unsetWoodenPackFee(bean);
						} else if (bean.getGoodsQtyTotal() == null) {
							MsgBox.showInfo(i18n
									.get("foss.gui.creating.listener.Waybill.woodListener.four"));
							bean.setWood(0);
							// 任何时候只要setWood 为0 都必须调用下面三个方法
							Common.unsetWaybillPanelVoForWoodenPack(bean, ui);
							Common.unsetStorageMatterForWoodenPack(bean, ui);
							Common.unsetWoodenPackFee(bean);
						} else {
							if (JOptionPane.YES_OPTION == JOptionPane
									.showConfirmDialog(
											ui,
											i18n.get("foss.gui.creating.listener.Waybill.woodListener.one"),
											i18n.get("foss.gui.creating.waybillEditUI.common.prompt"),
											JOptionPane.YES_NO_OPTION)) {
								ui.showWoodYokeDialog();
								Common.setSaveAndSubmitFalse(ui);
							}
						}
					} else {
						if (bean.getGoodsName() == null
								|| "".equals(bean.getGoodsName())) {
							MsgBox.showInfo(i18n
									.get("foss.gui.creating.listener.Waybill.woodListener.three"));
							bean.setWood(0);
							// 任何时候只要setWood 为0 都必须调用下面三个方法
							Common.unsetWaybillPanelVoForWoodenPack(bean, ui);
							Common.unsetStorageMatterForWoodenPack(bean, ui);
							Common.unsetWoodenPackFee(bean);
						} else if (bean.getGoodsQtyTotal() == null) {
							MsgBox.showInfo(i18n
									.get("foss.gui.creating.listener.Waybill.woodListener.four"));
							bean.setWood(0);
							// 任何时候只要setWood 为0 都必须调用下面三个方法
							Common.unsetWaybillPanelVoForWoodenPack(bean, ui);
							Common.unsetStorageMatterForWoodenPack(bean, ui);
							Common.unsetWoodenPackFee(bean);
						} else if (bean.getGoodsWeightTotal() == null) {
							MsgBox.showInfo(i18n
									.get("foss.gui.creating.listener.Waybill.woodListener.five"));
							bean.setWood(0);
							// 任何时候只要setWood 为0 都必须调用下面三个方法
							Common.unsetWaybillPanelVoForWoodenPack(bean, ui);
							Common.unsetStorageMatterForWoodenPack(bean, ui);
							Common.unsetWoodenPackFee(bean);
						} else if (bean.getGoodsVolumeTotal() == null) {
							MsgBox.showInfo(i18n
									.get("foss.gui.creating.listener.Waybill.woodListener.six"));
							bean.setWood(0);
							// 任何时候只要setWood 为0 都必须调用下面三个方法
							Common.unsetWaybillPanelVoForWoodenPack(bean, ui);
							Common.unsetStorageMatterForWoodenPack(bean, ui);
							Common.unsetWoodenPackFee(bean);
						} else {
							if (JOptionPane.YES_OPTION == JOptionPane
									.showConfirmDialog(
											ui,
											i18n.get("foss.gui.creating.listener.Waybill.woodListener.one"),
											i18n.get("foss.gui.creating.waybillEditUI.common.prompt"),
											JOptionPane.YES_NO_OPTION)) {
								ui.showWoodYokeDialog();
								Common.setSaveAndSubmitFalse(ui);
							}
						}
					}
				} else {
					MsgBox.showInfo(i18n
							.get("foss.gui.creating.listener.Waybill.woodListener.two"));
				}
			} else {
				if (bean.getWood() == 0 && bean.getSalver() == 0) {
					Common.unsetWaybillPanelVoForWoodenPack(bean, ui);
					Common.unsetStorageMatterForWoodenPack(bean, ui);
				}
				Common.unsetWoodenPackFee(bean);
			}
			// TODO 强制设置B货
			// setGoodsTypeB(bean);
		} else {
			bean.setWood(Integer.valueOf(0));
		}

	}

	/**
	 * 
	 * 包装-纤事件监听
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2013-1-9 下午02:33:41
	 * @param bean
	 */
	private void fibreListener(WaybillPanelVo bean) {
		// 如果数据为空，则置为0
		if (bean.getFibre() == null) {
			bean.setFibre(Integer.valueOf(0));
		}
	}

	/**
	 * 
	 * 包装-托事件监听
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2013-1-9 下午02:33:41
	 * @param bean
	 */
	private void salverListener(WaybillPanelVo bean) {
		// 如果数据为空，则置为0
		// zxy 20131118 ISSUE-4391 start 修改：托也能弹出打木架的对话框
		if (bean.getSalver() != null) {
			int salver = bean.getSalver();
			if (salver > 0) {
				if (FossConstants.YES.equals(bean.getDoPacking())) {
					if (ui.getPictureWaybillType() != null
							&& WaybillConstants.WAYBILL_PICTURE.equals(ui
									.getPictureWaybillType().trim())) {
						if (bean.getGoodsName() == null
								|| "".equals(bean.getGoodsName())) {
							MsgBox.showInfo(i18n
									.get("foss.gui.creating.listener.Waybill.woodListener.three"));
							bean.setWood(0);
							bean.setSalver(0);
							// 任何时候只要setWood 为0 都必须调用下面三个方法
							Common.unsetWaybillPanelVoForWoodenPack(bean, ui);
							Common.unsetStorageMatterForWoodenPack(bean, ui);
							Common.unsetWoodenPackFee(bean);
						} else if (bean.getGoodsQtyTotal() == null) {
							MsgBox.showInfo(i18n
									.get("foss.gui.creating.listener.Waybill.woodListener.four"));
							bean.setWood(0);
							bean.setSalver(0);
							// 任何时候只要setWood 为0 都必须调用下面三个方法
							Common.unsetWaybillPanelVoForWoodenPack(bean, ui);
							Common.unsetStorageMatterForWoodenPack(bean, ui);
							Common.unsetWoodenPackFee(bean);
						} else {
							if (JOptionPane.YES_OPTION == JOptionPane
									.showConfirmDialog(
											ui,
											i18n.get("foss.gui.creating.listener.Waybill.woodListener.one"),
											i18n.get("foss.gui.creating.waybillEditUI.common.prompt"),
											JOptionPane.YES_NO_OPTION)) {
								ui.showWoodYokeDialog();
								Common.setSaveAndSubmitFalse(ui);
							}
						}
					} else {
						if (bean.getGoodsName() == null
								|| "".equals(bean.getGoodsName())) {
							MsgBox.showInfo(i18n
									.get("foss.gui.creating.listener.Waybill.woodListener.three"));
							bean.setWood(0);
							bean.setSalver(0);
							// 任何时候只要setWood 为0 都必须调用下面三个方法
							Common.unsetWaybillPanelVoForWoodenPack(bean, ui);
							Common.unsetStorageMatterForWoodenPack(bean, ui);
							Common.unsetWoodenPackFee(bean);
						} else if (bean.getGoodsQtyTotal() == null) {
							MsgBox.showInfo(i18n
									.get("foss.gui.creating.listener.Waybill.woodListener.four"));
							bean.setWood(0);
							bean.setSalver(0);
							// 任何时候只要setWood 为0 都必须调用下面三个方法
							Common.unsetWaybillPanelVoForWoodenPack(bean, ui);
							Common.unsetStorageMatterForWoodenPack(bean, ui);
							Common.unsetWoodenPackFee(bean);
						} else if (bean.getGoodsWeightTotal() == null) {
							MsgBox.showInfo(i18n
									.get("foss.gui.creating.listener.Waybill.woodListener.five"));
							bean.setWood(0);
							bean.setSalver(0);
							// 任何时候只要setWood 为0 都必须调用下面三个方法
							Common.unsetWaybillPanelVoForWoodenPack(bean, ui);
							Common.unsetStorageMatterForWoodenPack(bean, ui);
							Common.unsetWoodenPackFee(bean);
						} else if (bean.getGoodsVolumeTotal() == null) {
							MsgBox.showInfo(i18n
									.get("foss.gui.creating.listener.Waybill.woodListener.six"));
							bean.setWood(0);
							bean.setSalver(0);
							// 任何时候只要setWood 为0 都必须调用下面三个方法
							Common.unsetWaybillPanelVoForWoodenPack(bean, ui);
							Common.unsetStorageMatterForWoodenPack(bean, ui);
							Common.unsetWoodenPackFee(bean);
						} else {
							if (JOptionPane.YES_OPTION == JOptionPane
									.showConfirmDialog(
											ui,
											i18n.get("foss.gui.creating.listener.Waybill.woodListener.one"),
											i18n.get("foss.gui.creating.waybillEditUI.common.prompt"),
											JOptionPane.YES_NO_OPTION)) {
								ui.showWoodYokeDialog();
								Common.setSaveAndSubmitFalse(ui);
							}
						}
					}
				} else {
					MsgBox.showInfo(i18n
							.get("foss.gui.creating.listener.Waybill.woodListener.two"));
				}
			} else {
				if (bean.getWood() == 0 && bean.getSalver() == 0) {
					Common.unsetWaybillPanelVoForWoodenPack(bean, ui);
					Common.unsetStorageMatterForWoodenPack(bean, ui);
				}
				Common.unsetWoodenPackFee(bean);
			}
			// TODO 强制设置B货
			// setGoodsTypeB(bean);
		} else if (bean.getSalver() == null) {
			bean.setSalver(Integer.valueOf(0));
		}
		// zxy 20131118 ISSUE-4391 end 修改：托也能弹出打木架的对话框
	}

	/**
	 * 
	 * 包装-膜事件监听
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2013-1-9 下午02:33:41
	 * @param bean
	 */
	private void membraneListener(WaybillPanelVo bean) {
		// 如果数据为空，则置为0
		if (bean.getMembrane() == null) {
			bean.setMembrane(Integer.valueOf(0));
		}
	}

	/**
	 * 重载showPickupStationDialog方法，传入提货网点对象集合
	 * 
	 * @author 026123-foss-lifengteng
	 * @date 2012-12-31 上午9:45:56
	 */

	private void showPickupStationDialog(WaybillPanelVo bean,
			List<BranchVo> depts) {
		if (CollectionUtils.isNotEmpty(depts)) {
			// 若匹配的值超过1个则弹出选择框
			if (depts.size() > 1) {
				// 创建弹出窗口
				QueryPickupStationDialog dialog = new QueryPickupStationDialog(
						depts, bean);
				// 剧中显示弹出窗口
				WindowUtil.centerAndShow(dialog);
				BranchVo branchVO = dialog.getBranchVO();

				ShowPickupStationDialogAction action = new ShowPickupStationDialogAction();
				action.setInjectUI(ui);
				action.setDialogData(branchVO, bean);

				// 若惟一匹配则直接将数据填充到运单开单的提货网点中
			} else {
				// gis查询出的部门编码对象（只传过来编码与是否外发）
				BranchVo vo = depts.get(0);
				// 设置提货网点
				bean.setCustomerPickupOrgCode(vo);
				bean.setCustomerPickupOrgName(StringUtil.defaultIfNull(vo
						.getName()));

				// 反写目的站:部门简称
				bean.setTargetOrgCode(vo.getTargetOrgName());

				ShowPickupStationDialogAction action = new ShowPickupStationDialogAction();
				action.setInjectUI(ui);
				action.setDialogData(vo, bean);
			}
			Common.setSaveAndSubmitFalse(ui);
		} else {
			// 不做业务处理
		}
	}

	/**
	 * 
	 * 退款类型事件监听
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-11-6 下午05:19:11
	 */
	private void refundTypeListener(WaybillPanelVo bean) {
		DataDictionaryValueVo vo = bean.getRefundType();
		if (bean.getDeliveryCustomerCode() == null
				|| "".equals(bean.getDeliveryCustomerCode())) {
			if (vo != null && vo.getValueCode() != null) {
				// Common.cleanCodInfo(ui, bean);
				throw new WaybillValidateException(
						i18n.get("foss.gui.creating.common.exception.refundType"));
			}
		}

		if (vo == null || vo.getValueCode() == null) {
			// Common.cleanCodInfo(ui, bean);
		} else {
 			Common.setBankInfo(bean, ui, waybillService);
            //DP-FOSS zhaoyiqing 20161026 开单配合CUBC校验银行信息
            Common.validateBankInfoCUBC(bean);
		}
		if (vo != null && vo.getValueCode() != null) {
			Common.setSaveAndSubmitFalse(ui);
		}
	}

	/**
	 * 
	 * 返单类型事件监听
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-11-7 上午11:30:24
	 */
	public void returnBillTypeListener(WaybillEditUI ui, WaybillPanelVo bean) {
		// 将返单费用设置到其他费用表格中
		if (bean.getCustomerPickupOrgCode() != null) {
			// setReturnBillCharge(ui, bean);
			if(bean.getSpecialValueAddedServiceType() != null && bean.getSpecialValueAddedServiceType().getValueCode()!=null) {
			  if(bean.getReturnBillType().getValueCode().equals(WaybillConstants.RETURNBILLTYPE_ORIGINAL)
					  ||bean.getReturnBillType().getValueCode().equals(WaybillConstants.RETURNBILLTYPE_FAX)){
				  MsgBox.showInfo("特殊增值服务不可以签收单返单");
			  }
			}
		} else {
			if (!WaybillConstants.NOT_RETURN_BILL.equals(bean
					.getReturnBillType().getValueCode())) {
				// setReturnBillType(bean);
				MsgBox.showInfo(i18n
						.get("foss.gui.creating.listener.Waybill.returnBillTypeListener.one"));
			}
		}
		Common.setSaveAndSubmitFalse(ui);
		/**
		 * 将返单类别设置到储运事项里
		 */
		if (bean.getReturnBillType() != null) {
			String remark = bean.getTransportationRemark();
			if (remark == null) {
				remark = "";
			}
			List<DataDictionaryValueEntity> list = waybillService
					.queryReturnBillType();
			/**
			 * 清空所有的返单类别
			 */
			if (list != null && list.size() > 0) {
				for (DataDictionaryValueEntity dataDictionary : list) {
					if (dataDictionary != null) {
						remark = remark.replace(dataDictionary.getValueName()
								+ ";", "");
				}
			}
			}
			if (!WaybillConstants.NOT_RETURN_BILL.equals(bean
					.getReturnBillType().getValueCode())) {
				if (remark.contains("贵重物品")) {
					String[] s = remark.split(";");
					remark = remark.replace(s[0] + ";", "");
					bean.setTransportationRemark("贵重物品;"
							+ bean.getReturnBillType().getValueName() + ";"
							+ remark);
				} else {
					bean.setTransportationRemark(bean.getReturnBillType()
							.getValueName() + ";" + remark);
				}
			} else {
				bean.setTransportationRemark(remark);
	}
		}
	}

	/**
	 * 
	 * 设置返单费用到其他费用中
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-11-7 上午11:50:46
	 */
	private void setReturnBillCharge(WaybillEditUI ui, WaybillPanelVo bean) {
		JXTable otherTable = ui.incrementPanel.getTblOther();
		WaybillOtherCharge model = (WaybillOtherCharge) otherTable.getModel();
		List<OtherChargeVo> data = model.getData();
		if (!WaybillConstants.NOT_RETURN_BILL.equals(bean.getReturnBillType()
				.getValueCode())) {
			if (data == null || data.isEmpty()) {
				data = new ArrayList<OtherChargeVo>();
			}

			String type = "";
			// 到达联传真要转成传真类型
			if (WaybillConstants.RETURNBILLTYPE_ARRIVE.equals(bean
					.getReturnBillType().getValueCode())) {
				type = WaybillConstants.RETURNBILLTYPE_FAX;
			} else {
				type = bean.getReturnBillType().getValueCode();
			}

			List<ValueAddDto> list = waybillService
					.queryValueAddPriceList(Common.getQueryOtherChargeParam(
							bean, type));
			OtherChargeVo otherVo = getReturnBillCharge(bean, list, data);
			// 添加返单费用到其他费用表格
			String chargeName = Common.addOtherCharge(data, otherVo, bean);
			// 返单费用名称，添加的目的是为了选择了无返单类型删除其他费用中的返单费用
			bean.setReturnBillChargeName(chargeName);
			ui.incrementPanel.setChangeDetail(data);
		} else {
			// 删除返单
			deleteReturnBill(data, bean);
		}
	}

	/**
	 * 
	 * 删除返单
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2013-1-30 下午03:52:12
	 */
	private void deleteReturnBill(List<OtherChargeVo> data, WaybillPanelVo bean) {
		if (data != null && !data.isEmpty()) {
			// 将已有的返单费用从其他费用表格中删除
			Common.deleteOtherCharge(data, bean, bean.getReturnBillChargeName());
			ui.incrementPanel.setChangeDetail(data);
		}
	}

	/**
	 * 
	 * 获取其他费用
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-11-7 上午11:53:53
	 */
	private OtherChargeVo getReturnBillCharge(WaybillPanelVo bean,
			List<ValueAddDto> list, List<OtherChargeVo> data) {
		ValueAddDto dto = new ValueAddDto();
		OtherChargeVo vo = new OtherChargeVo();
		if (list != null) {
			if (!list.isEmpty()) {
				dto = list.get(0);
				// 费用编码
				vo.setCode(dto.getPriceEntityCode());
				// 名称
				vo.setChargeName(dto.getPriceEntityName());
				// 归集类别
				vo.setType(dto.getBelongToPriceEntityName());
				// 金额
				vo.setMoney(CalculateFeeTotalUtils.formatNumberInteger(dto
						.getFee().toString()));
				// 上限
				vo.setUpperLimit(dto.getMaxFee().toString());
				// 下限
				vo.setLowerLimit(dto.getMinFee().toString());
				// 是否可修改
				vo.setIsUpdate(BooleanConvertYesOrNo.stringToBoolean(dto
						.getCanmodify()));

				/**
				 * 月结
				 */
				Boolean chargeMode = bean.getChargeMode();
				if (chargeMode == null) {
					// 没有填写的情况下 作为非月结处理
					chargeMode = Boolean.FALSE;
				}
				/**
				 * 返单费用 非月结客户不允许进行编辑
				 */
				if (chargeMode) {
					vo.setIsUpdate(true);
				} else {
					vo.setIsUpdate(false);
				}

				// 是否可删除
				vo.setIsDelete(BooleanConvertYesOrNo.stringToBoolean(dto
						.getCandelete()));
				vo.setId(dto.getId());
			} else {
				// 删除返单
				deleteReturnBill(data, bean);
				setReturnBillType(bean);
				throw new WaybillValidateException(
						i18n.get("foss.gui.creating.listener.Waybill.exception.two"));
			}
		} else {
			// 删除返单
			deleteReturnBill(data, bean);
			setReturnBillType(bean);
			throw new WaybillValidateException(
					i18n.get("foss.gui.creating.listener.Waybill.exception.two"));
		}
		return vo;
	}

	/**
	 * 
	 * 开单付款方式事件监听
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-11-7 下午03:21:41
	 */
	private void paidMethodListener(WaybillPanelVo bean) {
		//存贮原发货客户编码
		String oldDeliveryCustomerCode=bean.getDeliveryCustomerCode();
		//如果是异地调货客户就设置主客户编码
		if( StringUtil.isNotBlank(bean.getIsCustCircle()) && 
				StringUtil.equals("Y", bean.getIsCustCircle()) && 
				bean.getCustomerCircleEntity() != null &&
						bean.getCusBargainNewEntity() != null  &&
								bean.getCustomerNewEntity() !=null
						){
			bean.setDeliveryCustomerCode(bean.getCustomerCircleEntity().getCustCode());
		}
		if(bean.getPaidMethod() != null) {
			if(bean.getSpecialValueAddedServiceType()!=null 
					&&bean.getPaidMethod().getValueCode().equals(WaybillConstants.ARRIVE_PAYMENT)){
				MsgBox.showInfo("特殊增值服务不能到付");
			}
		// 付款方式规则判断
		identityPayment(bean);
		//调用该方法自动调整到付与预付金额
		CalculateFeeTotalUtils.calculateTotalFee(bean);
		//liding comment
		//NCI项目,付款方式银行卡时取消校验
		/**
		 * 该方法验证若是银行卡付款，则交易流水号是否可编辑
		 * @author:218371-foss-zhaoyanjun
		 * @date:2015-01-23上午08:13
		 */
		//whetherBankCardPayment(bean);
		Common.setSaveAndSubmitFalse(ui);
		
		/**
		 * 该方法验证若是银"现金”、“银行卡”、“网上支付”“月结”、“临时欠款”时，则预付金额是否可编辑
		 * @author:foss-shenshang
		 * @date:2015-06-18上午17:06
		 */
		//判断是否为图片开单  是否是图片修改   重量体积是否为零或者为null
		if((WaybillConstants.WAYBILL_PICTURE.equals(ui.getPictureWaybillType()))&& 
				(bean.getGoodsWeightTotal()==null || bean.getGoodsWeightTotal().compareTo(BigDecimal.ZERO)==0) &&
				(bean.getGoodsVolumeTotal()==null || bean.getGoodsVolumeTotal().compareTo(BigDecimal.ZERO)==0)){
					//付款方式为这五种时  预付金额可填写
					if(WaybillConstants.CASH_PAYMENT.equals(bean.getPaidMethod().getValueCode()) ||
							WaybillConstants.CREDIT_CARD_PAYMENT.equals(bean.getPaidMethod().getValueCode()) ||
							WaybillConstants.ONLINE_PAYMENT.equals(bean.getPaidMethod().getValueCode()) ||
							WaybillConstants.MONTH_PAYMENT.equals(bean.getPaidMethod().getValueCode()) ||
							WaybillConstants.TEMPORARY_DEBT.equals(bean.getPaidMethod().getValueCode())){
						
						ui.billingPayPanel.getTxtAdvancesMoney().setEnabled(false);
						bean.setPrePayAmount(BigDecimal.ZERO);
					}else{
						ui.billingPayPanel.getTxtAdvancesMoney().setEnabled(false);
					}			
			}
		
/*		//判断是否为图片开单  是否是图片修改   重量体积是否为零或者为null
		if((WaybillConstants.WAYBILL_PICTURE.equals(ui.getPictureWaybillType()))&& 
				(bean.getGoodsWeightTotal()==null || bean.getGoodsWeightTotal().compareTo(BigDecimal.ZERO)==0) &&
				(bean.getGoodsVolumeTotal()==null || bean.getGoodsVolumeTotal().compareTo(BigDecimal.ZERO)==0)){
				//如果付款方式为 "到付","临时欠款"是， 预付费保密是否可编辑
				if(WaybillConstants.TEMPORARY_DEBT.equals(bean.getPaidMethod().getValueCode())||
						WaybillConstants.ARRIVE_PAYMENT.equals(bean.getPaidMethod().getValueCode())){
					 //预付费保密不可编辑
					   ui.incrementPanel.getChbSecrecy().setEnabled(false);
				}else{
					//预付费保密可编辑
					   ui.incrementPanel.getChbSecrecy().setEnabled(true);
					}			
		}else{
			}*/
		}
		//将客户编码设置回去
		bean.setDeliveryCustomerCode(oldDeliveryCustomerCode);
	}

	/**
	 * 
	 * <p>
	 * 判断付款方式是否符合业务规则
	 * </p>
	 * 
	 * @author foss-sunrui
	 * @date 2013-1-16 下午4:17:51
	 * @param bean
	 * @see
	 */
	private void identityPayment(WaybillPanelVo bean) {
		if(bean.getPaidMethod() != null){
		Object object = null;
		if(StringUtils.isNotBlank(ui.getPictureWaybillType()) && 
				WaybillConstants.WAYBILL_PICTURE.equals(ui.getPictureWaybillType())){
			object = ui.pictureTransferInfoPanel.getCombProductType().getSelectedItem();
		}else{
			object = ui.transferInfoPanel.getCombProductType().getSelectedItem();
		}
		
		
		if(object != null){
			//如果不在客户圈而且不是统一结算(校验 用合同实体中的是否统一结算字段)，付款方式如果是网上支付需要限制有订单且来自于官网，并且在官网下单时要求的付款方式也应该是网上支付,此处过滤出裹裹订单的情况,就提示不能开网上订单
			if( 	
					!(StringUtil.isNotBlank(bean.getIsCustCircle()) && StringUtil.equals("Y", bean.getIsCustCircle()) && 
					bean.getCustomerCircleEntity() != null && bean.getCusBargainNewEntity() != null  &&
					bean.getCustomerNewEntity() !=null &&StringUtils.equals("Y", bean.getCustomerCircleEntity().getIsFocusPay()))
			){
				// 付款方式如果是网上支付需要限制有订单且来自于官网，并且在官网下单时要求的付款方式也应该是网上支付,此处过滤出裹裹订单的情况，使用WaybillConstants.SERVICE_TYPE进行过滤
				if (WaybillConstants.ONLINE_PAYMENT.equals(bean.getPaidMethod().getValueCode())) {
					if (!WaybillConstants.SERVICE_TYPE.equals(bean.getServerType()) && !WaybillConstants.CRM_ORDER_CHANNEL_ONLINE.equals(bean.getOrderChannel()) && !WaybillConstants.CRM_ORDER_PAYMENT_ONLINE.equals(bean.getOrderPayment())) {
						MsgBox.showInfo(i18n.get("foss.gui.creating.listener.Waybill.identityPayment.one"));
						setPaidMethod(bean);
					}
				}
			}
			ProductEntityVo productEntityVo = null;
			if(StringUtils.isNotBlank(ui.getPictureWaybillType()) && 
					WaybillConstants.WAYBILL_PICTURE.equals(ui.getPictureWaybillType())){
				object = ui.pictureTransferInfoPanel.getCombProductType().getSelectedItem();
			}else{
				object = ui.transferInfoPanel.getCombProductType().getSelectedItem();
			}
			
			
			if(object != null){
				//获取当前订单类型
				//String servicetype = Common.getServiceType(bean.getOrderNo());
				// 付款方式如果是网上支付需要限制有订单且来自于官网，并且在官网下单时要求的付款方式也应该是网上支付,此处过滤出裹裹订单的情况，使用WaybillConstants.SERVICE_TYPE进行过滤
				if (WaybillConstants.ONLINE_PAYMENT.equals(bean.getPaidMethod().getValueCode())) {
					if (!WaybillConstants.SERVICE_TYPE.equals(bean.getServerType()) && !WaybillConstants.CRM_ORDER_CHANNEL_ONLINE.equals(bean.getOrderChannel()) && !WaybillConstants.CRM_ORDER_PAYMENT_ONLINE.equals(bean.getOrderPayment())) {
						MsgBox.showInfo(i18n.get("foss.gui.creating.listener.Waybill.identityPayment.one"));
						setPaidMethod(bean);
					}
				}
				if(StringUtils.isNotBlank(ui.getPictureWaybillType()) && 
						WaybillConstants.WAYBILL_PICTURE.equals(ui.getPictureWaybillType())){
					productEntityVo = (ProductEntityVo) ui.pictureTransferInfoPanel.getCombProductType().getSelectedItem();
				}else{
					productEntityVo = (ProductEntityVo) ui.transferInfoPanel.getCombProductType().getSelectedItem();
				}
				// 付款方式为临时欠款、到付 不允许勾选预付费保密
				// 产品为汽运偏线 不允许勾选预付费保密
				if (WaybillConstants.ARRIVE_PAYMENT.equals(bean.getPaidMethod().getValueCode())
						|| ProductEntityConstants.PRICING_PRODUCT_PARTIAL_LINE.equals(productEntityVo.getCode())
						|| ProductEntityConstants.PRICING_PRODUCT_AIR_FREIGHT.equals(productEntityVo.getCode())) {
					ui.incrementPanel.getChbSecrecy().setEnabled(false);
					ui.incrementPanel.getChbSecrecy().setSelected(false);
				} else {
					ui.incrementPanel.getChbSecrecy().setEnabled(true);
				}
				
				/**
				 * 临欠、散客开单付款方式为临时欠款时，客户编码不允许为空
				 */
				if(WaybillConstants.TEMPORARY_DEBT.equals(bean.getPaidMethod().getValueCode())){
					//判断客户编码是否为空
					if(StringUtil.isEmpty(bean.getDeliveryCustomerCode())){
						MsgBox.showError(i18n.get("foss.gui.creating.listener.Waybill.MsgBox.payment"));
					}
				}
				if(WaybillConstants.MONTH_PAYMENT.equals(bean.getPaidMethod().getValueCode())){
					 
					CusBargainVo vo=new CusBargainVo();
					vo.setChargeType(WaybillConstants.MONTH_END);
					vo.setCustomerCode(bean.getDeliveryCustomerCode());
					//判断运单是否是补录
					if(WaybillConstants.WAYBILL_PICTURE_TYPE_PDA_PENDING.equals(bean.getWaybillstatus())
							|| WaybillConstants.WAYBILL_STATUS_PC_PENDING.equals(bean.getWaybillstatus())){
						//如果是补录运单，将开单时间设为运单开单时间
						vo.setBillDate(bean.getBillTime());					
					}else{
						//设置开单时间为当前时间
						vo.setBillDate(new Date());
					}				
					vo.setBillOrgCode(bean.getReceiveOrgCode());
					boolean  isOk = waybillService.isCanPaidMethod(vo);
					if(!isOk){
						throw new WaybillValidateException(i18n.get("foss.gui.creating.listener.Waybill.exception.NocanPaidMethod"));
					}
				}
				//合伙人 不允许 网上支付
				if(BZPartnersJudge.IS_PARTENER){
					if(WaybillConstants.ONLINE_PAYMENT.equals(bean.getPaidMethod().getValueCode())){
						throw new WaybillValidateException(i18n.get("foss.gui.creating.listener.Waybill.identityPayment.two"));
					}
				}
				
			}
			//==============FOSS开单优化v0.2：判断工号信息和客户信息是否一致/lianhe/2016年12月19日17:45:57/start===============
			//工号输入不为空的时候才走以下逻辑
			if (StringUtils.isNotBlank(bean.getEmployeeNo())) {
				CommonUtils.validateLinkMan(bean);
			}
			//==============FOSS开单优化v0.2：判断工号信息和客户信息是否一致/lianhe/2016年12月19日17:45:57/end===============
			Common.validatePayMethod(bean);
		}
		}
	}
	/**
	 * 
	 * 整车事件监听
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-11-22 下午06:19:55
	 */
	public void isWholeVehicleListener(final WaybillPanelVo bean) {

		// 如果是整车
		if (bean.getIsWholeVehicle()) {
			if (StringUtil.isEmpty(bean.getWaybillNo())) {
				MsgBox.showInfo(i18n
						.get("foss.gui.creating.listener.Waybill.isWholeVehicleListener.five"));
				// 整车设置为不选中状态
				bean.setIsWholeVehicle(false);
			} else if (bean.getIsBigGoods() != null && bean.getIsBigGoods()) {
				MsgBox.showInfo(i18n
						.get("foss.gui.creating.listener.Waybill.isWholeVehicleListener.six"));
				bean.setIsWholeVehicle(false);
			} else {

					SwingUtilities.invokeLater(new Runnable() {

						@Override
						public void run() {
						if (JOptionPane.YES_OPTION == JOptionPane.showConfirmDialog(
								ui,
								i18n.get("foss.gui.creating.listener.Waybill.isWholeVehicleListener.one"),
								i18n.get("foss.gui.creating.waybillEditUI.common.prompt"),
								JOptionPane.YES_NO_OPTION)) {
								Common.setWholeVehicleData(ui, bean);
							// 当改变为整车时，改变提货方式
								ProductEntityVo productVo = bean.getProductCode();
							if (productVo != null
									&& productVo.getCode() != null) {
									// 整车默认提货方式
								Common.wholeVehicleReceiveMethod(
										waybillService, bean, ui);
								}
								// 设置上门接货和司机工号是不可编辑
							ui.basicPanel.getCboReceiveModel()
									.setEnabled(false);
							ui.basicPanel.getTxtDriverNumber()
									.setEnabled(false);
							// 整车不能使用优惠券
							ui.incrementPanel.getTxtPromotionNumber()
									.setEnabled(false);
							ui.incrementPanel.getTxtInsuranceRate().setVisible(
									true);
								ui.incrementPanel.getLblNewLabel().setVisible(true);
							ui.incrementPanel.getLblNewLabel_1().setVisible(
									true);
							// 整车不能参与营销活动
							setterVehicleActiveInfo(bean, ui);
								ui.consignerPanel.getTxtInvoice().setEnabled(false);
							ui.consignerPanel.getTxtInvoice()
									.setEditable(false);
								ui.consignerPanel.getTxtInvoice().setVisible(false);
							ui.consignerPanel.getCombInvoiceMode().setEnabled(
									true);
							// ui.consignerPanel.getCombInvoiceMode().setEditable(true);
							ui.consignerPanel.getCombInvoiceMode().setVisible(
									true);
							// 是否整车可以选择
								ui.basicPanel.getChbExhibitCargo().setEnabled(true);
							} else {
								ui.consignerPanel.getTxtInvoice().setEnabled(true);
								ui.consignerPanel.getTxtInvoice().setVisible(true);
							// ui.consignerPanel.getTxtInvoice().setEditable(true);
							ui.consignerPanel.getCombInvoiceMode().setEnabled(
									false);
							ui.consignerPanel.getCombInvoiceMode().setEditable(
									false);
							ui.consignerPanel.getCombInvoiceMode().setVisible(
									false);

							ui.incrementPanel.getTxtInsuranceRate().setVisible(
									false);
							ui.incrementPanel.getLblNewLabel()
									.setVisible(false);
							ui.incrementPanel.getLblNewLabel_1().setVisible(
									false);
								// 整车设置为不选中状态
								bean.setIsWholeVehicle(false);
								// 经过营业部设置为不选中状态
								bean.setIsPassDept(false);
								// 经过营业部
								ui.basicPanel.getChbPassDept().setEnabled(false);
								// 设置上门接货和司机工号是可编辑
								ui.basicPanel.getCboReceiveModel().setEnabled(true);
								ui.basicPanel.getTxtDriverNumber().setEnabled(true);
							// 非整车可以使用优惠券
							ui.incrementPanel.getTxtPromotionNumber()
									.setEnabled(true);
								// 非整车提货方式
								ProductEntityVo productVo = bean.getProductCode();
							if (productVo != null
									&& productVo.getCode() != null) {
									// 汽运提货方式
								Common.highwaysReceiveMethod(waybillService,
										bean, ui);
								}
							// 非整车可以参与营销活动
							ui.incrementPanel.getCombActiveInfo().setEnabled(
									true);
							}

						}
					});
				}

		} else {
			ui.incrementPanel.getTxtInsuranceRate().setVisible(false);
			ui.incrementPanel.getLblNewLabel().setVisible(false);
			ui.incrementPanel.getLblNewLabel_1().setVisible(false);
			if (!StringUtil.isEmpty(bean.getWaybillNo())
					&& (bean.getIsBigGoods() == null || !bean.getIsBigGoods())) {// 运单编号部位空时再执行
				SwingUtilities.invokeLater(new Runnable() {

					@Override
					public void run() {
						if (JOptionPane.YES_OPTION == JOptionPane.showConfirmDialog(
								ui,
								i18n.get("foss.gui.creating.listener.Waybill.isWholeVehicleListener.three"),
								i18n.get("foss.gui.creating.waybillEditUI.common.prompt"),
								JOptionPane.YES_NO_OPTION)) {

							// 整车约车报价
							ui.billingPayPanel.billingPayBelongPanel
									.getTxtWholeVehicleAppfee().setVisible(
											false);
							// 整车约车报价标签
							ui.billingPayPanel.billingPayBelongPanel
									.getLblWholeVehicleAppfee().setVisible(
											false);
							ui.basicPanel.getTxtVehicleNumber().setVisible(
									false);
							ui.basicPanel.getLblVehicleNumber().setVisible(
									false);
							ui.basicPanel.getBtnImportVehicle().setVisible(
									false);
							ui.billingPayPanel.billingPayBelongPanel
									.getLblPublicCharge()
									.setText(
											i18n.get("foss.gui.creating.listener.Waybill.isWholeVehicleListener.four")
													+ "：");
							// 清空产品，设置为非整车产品类型
							Common.cleanProductToOtherType(ui);
							// 设置运输性质为“精准卡航”
							Common.setProductCode(
									ui,
									bean,
									ProductEntityConstants.PRICING_PRODUCT_LONG_DISTANCE_FAST_FREIGHT);

							Common.setUIEnableTrue(bean, ui);
							// 根据网点是否能开代收货款设置编辑状态
							setCanCodEnabled(bean);

							// 经过营业部设置为不选中状态
							bean.setIsPassDept(false);
							/**
							 * 如果不是整车，设置整车约车编码为空
							 */
							bean.setVehicleNumber(null);
							// 经过营业部
							ui.basicPanel.getChbPassDept().setEnabled(false);
							// 公布价
							ui.billingPayPanel.billingPayBelongPanel
									.getTxtPublicCharge().setEnabled(false);
							// 设置上门接货和司机工号是可编辑
							ui.basicPanel.getCboReceiveModel().setEnabled(true);
							ui.basicPanel.getTxtDriverNumber().setEnabled(true);
							// 非整车可以使用优惠券
							ui.incrementPanel.getTxtPromotionNumber()
									.setEnabled(true);
							// 非整车提货方式
							ProductEntityVo productVo = bean.getProductCode();
							if (productVo != null
									&& productVo.getCode() != null) {
								// 汽运提货方式
								Common.highwaysReceiveMethod(waybillService,
										bean, ui);
							}
							// 保价费率
							ui.incrementPanel.getTxtInsuranceRate().setEnabled(
									false);
							// 非整车可以参与营销活动
							ui.incrementPanel.getCombActiveInfo().setEnabled(
									true);
							ui.consignerPanel.getTxtInvoice().setEnabled(true);
							ui.consignerPanel.getTxtInvoice().setVisible(true);
							// ui.consignerPanel.getTxtInvoice().setEditable(true);
							ui.consignerPanel.getCombInvoiceMode().setEnabled(
									false);
							ui.consignerPanel.getCombInvoiceMode().setEditable(
									false);
							ui.consignerPanel.getCombInvoiceMode().setVisible(
									false);
						} else {
							ui.consignerPanel.getTxtInvoice().setEnabled(false);
							ui.consignerPanel.getTxtInvoice()
									.setEditable(false);
							ui.consignerPanel.getTxtInvoice().setVisible(false);
							ui.consignerPanel.getCombInvoiceMode().setEnabled(
									true);
							// ui.consignerPanel.getCombInvoiceMode().setEditable(true);
							ui.consignerPanel.getCombInvoiceMode().setVisible(
									true);
							// 整车设置为选中状态
							bean.setIsWholeVehicle(true);
							// 经过营业部(整车不允许编辑是否经过营业部,由约车信息而定,根据MANA-389修改)
							ui.basicPanel.getChbPassDept().setEnabled(false);
							// 设置上门接货和司机工号是不可编辑
							ui.basicPanel.getCboReceiveModel()
									.setEnabled(false);
							ui.basicPanel.getTxtDriverNumber()
									.setEnabled(false);
							// 整车不能使用优惠券
							ui.incrementPanel.getTxtPromotionNumber()
									.setEnabled(false);
							// 当改变为整车时，改变提货方式
							ProductEntityVo productVo = bean.getProductCode();
							if (productVo != null
									&& productVo.getCode() != null) {
								// 整车默认提货方式
								Common.wholeVehicleReceiveMethod(
										waybillService, bean, ui);
							}
							// 整车不能参与营销活动
							setterVehicleActiveInfo(bean, ui);
						}

					}
				});
		}
	}

	}

	/**
	 * 
	 * 根据网点是否能开代收货款设置编辑状态
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2013-1-18 上午10:41:06
	 */
	private void setCanCodEnabled(WaybillPanelVo bean) {
		if (FossConstants.YES.equals(bean.getCanAgentCollected())) {
			// 代收货款金额
			ui.incrementPanel.getTxtCashOnDelivery().setEnabled(true);
			// 代收货款类型
			ui.incrementPanel.getCombRefundType().setEnabled(true);
		} else {
			// 代收货款金额
			ui.incrementPanel.getTxtCashOnDelivery().setEnabled(false);
			// 代收货款类型
			ui.incrementPanel.getCombRefundType().setEnabled(false);
			// 清理代收货款信息
			Common.cleanCodInfo(ui, bean);
		}
	}

	/**
	 * 
	 * 是否经过营业部事件监听
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-11-22 下午06:19:55
	 */
	private void isPassDeptListener(WaybillPanelVo bean) {
		// 设置代收货款设置状态
		Common.setPassDeptCodEnabled(ui, bean);
	}

	/**
	 * 
	 * 接货费改变事件监听
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-11-27 下午05:42:49
	 */
	private void pickupFeeListener(WaybillPanelVo bean) {
		BigDecimal pickupFee = BigDecimal.ZERO;
		if (bean.getPickupFee() != null) {
			pickupFee = bean.getPickupFee();
		}

		/**
		 * DMANA-6051 开单接货费优化—外租车系统需求 新增判断条件 1.满足配置的接货费可以改小的参数是开启状态（Y）
		 * 2.满足当营业部为非集中接货区域，开单接货司机为外请司机的上门接货运单 3.满足不是crm合同客户，或者合同中对接货费没有折扣
		 * 接货费可以改大或改小，但不能小于0
		 */
		// 获取开单和更改单接货费是否可以改小的配置参数 根据该配置参数来判断是否进行接货费更改的校验
		ConfigurationParamsEntity isValidationEntity = BaseDataServiceFactory
				.getBaseDataService().queryConfigurationParamsByEntity(null,
						PricingConstants.PICKUP_FEE_IS_CHANGE_SMALL, null);

		// 获取当前登陆部门编码
		String loginDeptCode = bean.getReceiveOrgCode();
		SaleDepartmentEntity  deptEntity = new SaleDepartmentEntity();

		if (bean.getReceiveOrgCode() != null) {
			// 根据当前登陆部门编码，查询对应的营业部信息
			deptEntity = BaseDataServiceFactory.getBaseDataService()
					.querySaleDepartmentByCodeOnline(loginDeptCode);

		}
		
		//合伙人和非合伙人验证不一样 2016年1月13日 19:07:10 葛亮亮
		if(BZPartnersJudge.IS_PARTENER){
			bean.setPickUpFeeCanvas(bean.getPickupFee().toString());
			CalculateFeeTotalUtils.resetCalculateFee(bean);
			if (pickupFee.compareTo(BigDecimal.ZERO) < 0
				|| (bean.getMaxPickupFee() != null && bean.getMaxPickupFee().compareTo(pickupFee) < 0)) {
				// 接货费最低值不能小于0
				MsgBox.showInfo("对不起，接货费值的修改只能在【  " + BigDecimal.ZERO + " , "
						+ bean.getMaxPickupFee().toString() + " 】范围内!");
				bean.setPickupFee(BigDecimal.ZERO);
			}
		}else
		{
			if(isValidationEntity != null
				&& FossConstants.YES.equals(isValidationEntity.getConfValue())
				&& deptEntity != null
				&& FossConstants.NO
						.equals(deptEntity.getInCentralizedShuttle())
				&& PricingConstants.DRIVER_CODE_OUT
						.equals(bean.getDriverCode())) {
				if (pickupFee.compareTo(BigDecimal.ZERO) < 0
						|| bean.getMaxPickupFee().compareTo(pickupFee) < 0) {
					// 接货费最低值不能小于0
					MsgBox.showInfo("对不起，接货费值的修改只能在【  " + BigDecimal.ZERO + " , "
							+ bean.getMaxPickupFee().toString() + " 】范围内!");
								bean.setPickupFee(BigDecimal.ZERO);
				}
			}else if(bean.getBasePickupFee() != null) {
				/**
				 * 接货费校验： 是否在基础费（为0或者最小值）用与最大费用之间 MANA-257接货费优化
				 * 
				 * @author 026123-foss-lifengteng
				 * @date 2014-03-05 上午8:59:54
				 */
				if (bean.getBasePickupFee().compareTo(pickupFee) == 1
						|| CommonUtils.defaultIfNull(bean.getMaxPickupFee())
								.compareTo(pickupFee) == -1) {
					MsgBox.showInfo("对不起，接货费值的修改只能在【  "
							+ bean.getBasePickupFee().toString() + " , "
							+ bean.getMaxPickupFee().toString() + " 】范围内!");
							bean.setPickupFee(bean.getBasePickupFee());
				}
			}
			bean.setPickUpFeeCanvas(bean.getPickupFee().toString());
			Common.getYokeCharge(bean, ui);
			CalculateFeeTotalUtils.calculateFee(bean);
		}
		// // 设置画布接货费
		// if (bean.getBasePickupFee() != null) {
		// if (bean.getAuditNo() == null) {
		// if (bean.getBasePickupFee().compareTo(pickupFee) == 1) {
		// MsgBox.showInfo(i18n.get("foss.gui.creating.listener.Waybill.PickupFeeError"));
		// bean.setPickupFee(bean.getBasePickupFee());
		// }
		// }
		// }
	}

	/**
	 * 
	 * 包装费改变事件监听
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-12-10 下午06:02:44
	 */
	private void packageFeeListener(WaybillPanelVo bean) {
		
		// 手写包装费
		BigDecimal packageFee = bean.getPackageFee();
		// 计算运费获得的包装费
		BigDecimal calculatePackageFee = bean.getCalculatedPackageFee();		
		
		//合伙人包装费调整 2016年1月14日 09:40:13 葛亮亮
		if(BZPartnersJudge.IS_PARTENER){
			/*包装类型为打木托时，提取标准为100%
			  包装类型为打木架时，提取标准为75%
			  包装类型为打木箱时，提取标准为83%
			  低于德邦提取的成本,系统提示：包装费已经低于成本值，请重新确认*/			
			//木架费用
			BigDecimal standCharge = bean.getStandCharge();
			if(standCharge == null){
			   standCharge = BigDecimal.ZERO;
			}
			//木箱费
			BigDecimal boxCharge = bean.getBoxCharge();
			if(boxCharge == null){
				boxCharge = BigDecimal.ZERO;
			}
			//木托费
			BigDecimal salverGoods = bean.getSalverGoodsCharge();
			if(salverGoods == null){
				salverGoods = BigDecimal.ZERO;
			}
			//木架提取费
			ConfigurationParamsEntity configurationStand = BaseDataServiceFactory.getBaseDataService().
													       queryConfigurationParamsByEntity(DictionaryConstants.SYSTEM_CONFIG_PARM__PKP,
							                                                                ConfigurationParamsConstants.PKP_FOSS_PACKAGE_STAND_DISCOUNT,
							                                                                FossConstants.ROOT_ORG_CODE);
			double tempStand = Double.parseDouble(configurationStand.getConfValue());
			//木箱提取费
			ConfigurationParamsEntity configurationBox = BaseDataServiceFactory.getBaseDataService().
								  						 queryConfigurationParamsByEntity(DictionaryConstants.SYSTEM_CONFIG_PARM__PKP,
										                                                  ConfigurationParamsConstants.PKP_FOSS_PACKAGE_BOX_DISCOUNT,
										                                                  FossConstants.ROOT_ORG_CODE);
			double tempBox = Double.parseDouble(configurationBox.getConfValue());			
			//木托提取费
			ConfigurationParamsEntity configurationSalver = BaseDataServiceFactory.getBaseDataService().
  														    queryConfigurationParamsByEntity(DictionaryConstants.SYSTEM_CONFIG_PARM__PKP,
									                                                  	     ConfigurationParamsConstants.PKP_FOSS_PACKAGE_SALVER_DISCOUNT,
									                                                         FossConstants.ROOT_ORG_CODE);
			double tempSalver = Double.parseDouble(configurationSalver.getConfValue());			
			//三种费用乘以比例后相加后四舍五入
			BigDecimal woodPrice = (standCharge.multiply(new BigDecimal(tempStand)).
							        add(boxCharge.multiply(new BigDecimal(tempBox))).
							        add(salverGoods.multiply(new BigDecimal(tempSalver)))).
							       setScale(2, BigDecimal.ROUND_HALF_UP);
			
			//设置画布
			bean.setPackageFeeCanvas(bean.getPackageFee().toString());
			//重新计算总运费
			CalculateFeeTotalUtils.resetCalculateFee(bean);
			
			if(woodPrice.subtract(packageFee).compareTo(BigDecimal.ZERO) > 0){
				// 代打木架费情况下, 包装费输入值不能低于运费计算值
				MsgBox.showInfo(i18n.get("foss.gui.creating.listener.Waybill.packageFeeTooLow"));
				// 回到包装费焦点
				ui.billingPayPanel.getTxtPackCharge().requestFocus();
			}
			return;
		}else{
			
			// 打木架
			Integer wood = bean.getWood();

			// 打木架 empty go
			if (wood == null || bean.getWood().intValue() == 0) {

				// 设置保存按钮与提交按钮不可编辑
				Common.getYokeCharge(bean, ui);
				CalculateFeeTotalUtils.calculateFee(bean);
				bean.setPackageFeeCanvas(bean.getPackageFee().toString());
				return;
			} else {

				// 打木架有值
				if (calculatePackageFee == null || packageFee == null) {

					// 设置保存按钮与提交按钮不可编辑
					Common.getYokeCharge(bean, ui);
					CalculateFeeTotalUtils.calculateFee(bean);
					bean.setPackageFeeCanvas(bean.getPackageFee().toString());
					return;
				} else {
					// 运费计算值 > 输入值
					if (calculatePackageFee.doubleValue() > packageFee
							.doubleValue()) {

						// 代打木架费情况下, 包装费输入值不能低于运费计算值
						MsgBox.showInfo(i18n
								.get("foss.gui.creating.listener.Waybill.packageFeeListener.one"));

						// 回到包装费焦点
						ui.billingPayPanel.getTxtPackCharge().requestFocus();

						// 把费用设置回去
						// 把费用清0 下面这个步骤会重新计算
						bean.setPackageFee(BigDecimal.ZERO);

						// 设置保存按钮与提交按钮不可编辑
						Common.getYokeCharge(bean, ui);
						CalculateFeeTotalUtils.calculateFee(bean);
						bean.setPackageFeeCanvas(bean.getPackageFee().toString());

						return;
					} else {
						Common.getYokeCharge(bean, ui);
						CalculateFeeTotalUtils.calculateFee(bean, false, false);
						bean.setPackageFeeCanvas(bean.getPackageFee().toString());
						return;
					}
				}
			}
		}
	}

	/**
	 * 
	 * 代收货款改变事件监听
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-12-10 下午06:08:17
	 */
	private void codAmountListener(WaybillPanelVo bean) {
		// 代收货款不能小于0
		if (bean.getCodAmount() != null
				&& bean.getCodAmount().compareTo(BigDecimal.ZERO) < 0) {
			MsgBox.showInfo("代收货款不能小于0");
			return;
		}
		//DP-FOSS zhaoyiqing 343617 20161011
        //此方法拿页面输入的代收货款和配置参数比较
        validateCodeAmount(bean);

		if(bean.getSpecialValueAddedServiceType()!=null && bean.getCodAmount().compareTo(BigDecimal.ZERO) > 0){
			MsgBox.showInfo("特殊增值服务不能有代收货款");
		}
		
		if (bean.getCodAmount().compareTo(BigDecimal.ZERO) == 0) {
			Common.cleanCodInfo(ui, bean);
		} else {
			// 画布代收货款
			bean.setCodAmountCanvas(bean.getCodAmount().toString());
		}

		// 若为PDA补录，则更改代收货款后颜色变化以示提醒
		if (WaybillConstants.WAYBILL_STATUS_PDA_PENDING.equals(bean
				.getWaybillstatus())) {
			ui.incrementPanel.getTxtCashOnDelivery().setForeground(Color.RED);
		}
		
		//合伙人暂不验证代收货款上限 2016年3月28日 20:52:34 葛亮亮
//		if(!true == bean.getIsWholeVehicle() && bean.getCodAmount() != null && bean.getCodAmount().compareTo(BigDecimal.ZERO) > 0 && BZPartnersJudge.IS_PARTENER){
//			partenerCodAmountUpperLimitCheck(bean);
//		}
		
		Common.getYokeCharge(bean, ui);
		CalculateFeeTotalUtils.calculateFee(bean);
		Common.setSaveAndSubmitFalse(ui);
	}

    //DP-FOSS zhaoyiqing 343617 20161011 不为0走这段逻辑，判断和配置参数中配置值比较
    private void validateCodeAmount(WaybillPanelVo bean) {
        if (bean.getCodAmount() != null
                && bean.getCodAmount().compareTo(BigDecimal.ZERO) > NUMBER_ZERO) {

            BaseDataService baseDataService = BaseDataServiceFactory.getBaseDataService();
            //默认获取零担的代收货款上下限配置参数
            String codMinParam = ConfigurationParamsConstants.PKP_COD_MIN_AMOUNT;
            String codMaxParam = ConfigurationParamsConstants.PKP_COD_MAX_AMOUNT;
            //获得配置的值
            ConfigurationParamsEntity minParamEntity = baseDataService.queryConfigurationParamsByEntity(DictionaryConstants.SYSTEM_CONFIG_PARM__PKP, codMinParam, FossConstants.ROOT_ORG_CODE);
            ConfigurationParamsEntity maxParamEntity = baseDataService.queryConfigurationParamsByEntity(DictionaryConstants.SYSTEM_CONFIG_PARM__PKP, codMaxParam, FossConstants.ROOT_ORG_CODE);
            if(minParamEntity!=null){
                String minAmount = minParamEntity.getConfValue();
                if (StringUtil.isNotEmpty(minAmount) && bean.getCodAmount().compareTo(
                        new BigDecimal(minAmount)) < NUMBER_ZERO) {
                    //页面重置，bean重置，按钮置灰
                    ui.incrementPanel.getTxtCashOnDelivery().setText(ZERO);
                    bean.setCodAmount(BigDecimal.ZERO);
                    Common.setSaveAndSubmitFalse(ui);
                    throw new WaybillValidateException("代收货款金额低于最小值：" + minAmount
                            + "，请重新输入！");
                }
            }
            if(maxParamEntity!=null){
                String maxAmount = maxParamEntity.getConfValue();
                if (StringUtil.isNotEmpty(maxAmount) && bean.getCodAmount().compareTo(
                        new BigDecimal(maxAmount)) > NUMBER_ZERO) {
                    //页面重置，bean重置，按钮置灰
                    ui.incrementPanel.getTxtCashOnDelivery().setText(ZERO);
                    bean.setCodAmount(BigDecimal.ZERO);
                    Common.setSaveAndSubmitFalse(ui);
                    throw new WaybillValidateException("代收货款金额超过最大值：" + maxAmount
                            + "，请重新输入！");
                }
            }

        }
    }

    //合伙人开单验证代收货款上限额度 2016年1月28日 08:24:31 葛亮亮
	public void partenerCodAmountUpperLimitCheck(WaybillPanelVo bean){
		//登陆人信息
		UserEntity user = (UserEntity) SessionContext.getCurrentUser();
		//登陆人部门编号
		String partnerDeptCode = user.getEmployee().getDepartment().getCode();
		//请求实体
		PartenerCodAmountUpperLimitDto partenerCodAmountUpperLimit = new PartenerCodAmountUpperLimitDto();
		partenerCodAmountUpperLimit.setPartnerDeptCode(partnerDeptCode);
		
		//调接口返回部门代收款上限金额
		SynPartenerCodAmountUpperLimitResponse perLimitResponse = waybillService.partenerCodAmountUpperLimitResponse(partenerCodAmountUpperLimit);
	    Boolean isSuccess = perLimitResponse.getSuccess(); //访问放回状态
	    BigDecimal maxMoney = perLimitResponse.getMaxMoney(); //上限金额 
	    String errorMsg = perLimitResponse.getErrorMsg();//异常
		
		//如果返回异常提示“代收货款金额上限接口访问异常”
		if(isSuccess){
			if(null != maxMoney){
				//输入代收款大于上限额度
				if(bean.getCodAmount().compareTo(maxMoney) > 0){
					MsgBox.showInfo(i18n.get("foss.gui.creating.listener.Waybill.upperLimit",maxMoney));
					//将代收货款相关内容清空
					Common.cleanCodInfo(ui, bean);
				}
			}else{
				MsgBox.showInfo(i18n.get("foss.gui.creating.listener.Waybill.upperLimit.null"));
				//将代收货款相关内容清空
				Common.cleanCodInfo(ui, bean);
			}
		}else
		{
			MsgBox.showInfo(errorMsg);
			//将代收货款相关内容清空
			Common.cleanCodInfo(ui, bean);
		}
	}

	/**
	 * 
	 * 装卸费改变事件监听
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-12-10 下午06:10:01
	 */
	private void serviceFeeListener(WaybillPanelVo bean) {

		bean.setServiceFeeCanvas(bean.getServiceFee().toString());
		Common.setSaveAndSubmitFalse(ui);
	}

	/**
	 * 
	 * 送货费改变事件监听 1. 送货费默认不可改小，但可改大。除了月结客户外，只能对系统计算出的送货费取值进行上调，
	 * 不能下调。当送货费取值大于最高送货费（基础资料配置）时，送货费自动跳改为最高送货费值，但用户可以上调送货费； 2.3.5
	 * “月结”客户的送货费收费按以上计算出默认值，但可以修改。（送货费不受限制。可向上修改也可以向下修改，最小为0） 2.3.6
	 * 除月结客户的属性外其它所有情况的送货费不可向下修改，只能向上修改
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-12-10 下午06:12:06
	 */
	public void deliveryGoodsFeeListener(WaybillPanelVo bean) {
		// 计算送货费
		BigDecimal calculatedeliveryGoodsFee = bean
				.getCalculateDeliveryGoodsFee();
		// 送货费
		BigDecimal deliveryGoodsFee = bean.getDeliveryGoodsFee();
		// 送货费上限
		// 是否月结
		Boolean chargeMode = bean.getChargeMode();

		// 没有值得情况下 我也当非月结客户处理
		if (chargeMode == null) {
			chargeMode = Boolean.FALSE;
		}

		// 非月结 只能改大
		// if (!chargeMode) {
			// 非月结客户,送货费修改金额不能低于系统计算金额
		if (calculatedeliveryGoodsFee.doubleValue() > deliveryGoodsFee
				.doubleValue()) {
			/*
			 * BigDecimal sh=
			 * deliveryGoodsFee.subtract(calculatedeliveryGoodsFee);
			 * List<DeliverChargeEntity> list = bean.getDeliverList();
			 * for(DeliverChargeEntity entity : list){
			 * if(PriceEntityConstants.PRICING_CODE_SH
			 * .equals(entity.getCode())){
			 * entity.setAmount(entity.getAmount().add(sh)); } }
			 */
				// 将暂存提交按钮设置为不可编辑
				Common.setSaveAndSubmitFalse(ui);
				bean.setDeliveryGoodsFee(calculatedeliveryGoodsFee);
			throw new WaybillValidateException(
					i18n.get("foss.gui.creating.listener.Waybill.deliveryGoodsFeeListener.one"));
		} else {
				bean.setDeliveryGoodsFee(deliveryGoodsFee);
			}
		// }else{
			/**
		 * BUG-45095送货进仓的送货费无法修改 开单送货进仓时，月结客户可以修改送货费（增加或减少），下限为150
			 */
		// BigDecimal sh= deliveryGoodsFee.subtract(calculatedeliveryGoodsFee);
			String code = bean.getReceiveMethod().getValueCode();
			BigDecimal fee = BigDecimal.valueOf(0);
		if (WaybillConstants.DELIVER_STORAGE.equals(code)) {
				List<DeliverChargeEntity> list = bean.getDeliverList();
			if (CollectionUtils.isNotEmpty(list)) {
					for (DeliverChargeEntity entity : list) {

					// if(PriceEntityConstants.PRICING_CODE_SH.equals(entity.getCode())){
						//	entity.setAmount(entity.getAmount().add(sh));
					// }
					// 是否是送货进仓
					if (PriceEntityConstants.PRICING_CODE_SHJC.equals(entity
							.getCode())) {
							fee = entity.getAmount();
						}
					}

				// 判断修改的费用是否小于送货进仓费
				if (bean.getDeliveryGoodsFee().compareTo(fee) < 0) {
						bean.setDeliveryGoodsFee(fee);
						deliveryGoodsFee = fee;
					// 【送货费】不能小于【送货进仓费】
					MsgBox.showError(i18n
							.get("foss.gui.creating.listener.Waybill.exception.noLessThanSHJXF"));
					}
				}
			}

		// }

		/**
		 * BUG-34714: 台州派送部---送货费异常（综合查询是55元，打印到达联显示40元） 2013-07-01 9:00
		 * 顾贺要求修改送货费后，计算总运费送货费还是手改的送货费
		 */
		// 判断送货费集合是否为空
		if (CollectionUtils.isNotEmpty(bean.getDeliverList())) {
			// 送货费集合
    		List<DeliverChargeEntity> list = bean.getDeliverList();
			// 计算送货费集中当中，非“SH”费用之和
    		BigDecimal otherDeliveryCharge = BigDecimal.ZERO;
    		for (DeliverChargeEntity entity : list) {
				if (PriceEntityConstants.PRICING_CODE_SH.equals(entity
						.getCode())) {
    				continue;
				} else {
					if (otherDeliveryCharge.compareTo(BigDecimal.valueOf(0)) == 0) {
    					otherDeliveryCharge = entity.getAmount();
					} else {
    					otherDeliveryCharge.add(entity.getAmount());
    				}
    			}
			}

			// 原来的基础送货费
			BigDecimal shCharge = calculatedeliveryGoodsFee
					.subtract(otherDeliveryCharge);

			// 手动修改费用
			BigDecimal handDelivery = CommonUtils.defaultIfNull(bean
					.getHandDeliveryFee());
			// 如果手动设置的送货费大于计算出的送货费，那么将手动设置的送货费赋给送货费
			if (handDelivery.compareTo(calculatedeliveryGoodsFee) > 0
					&& !chargeMode) {
    			bean.setDeliveryGoodsFee(handDelivery);
				// 遍历集合
				for (int i = 0; i < list.size(); i++) {
        			DeliverChargeEntity charge = list.get(i);
					if (PriceEntityConstants.PRICING_CODE_SH.equals(charge
							.getCode())) {
						BigDecimal sum = shCharge.add(handDelivery
								.subtract(calculatedeliveryGoodsFee));
        				list.get(i).setAmount(sum);
        			}
				}
			} else {
				// 如果送货费大于计算出的送货费，或者是月结客户并且送货费大于0
				if (deliveryGoodsFee.compareTo(calculatedeliveryGoodsFee) > 0
						|| (chargeMode && deliveryGoodsFee.doubleValue() >= 0)) {
					for (int i = 0; i < list.size(); i++) {
            			DeliverChargeEntity charge = list.get(i);
						if (PriceEntityConstants.PRICING_CODE_SH.equals(charge
								.getCode())) {
							BigDecimal sum = (deliveryGoodsFee
									.subtract(calculatedeliveryGoodsFee))
									.add(shCharge);
            				list.get(i).setAmount(sum);
            			}
            		}
    		}
			}
			// 是否上一次手动修改过
			if (handDelivery.compareTo(BigDecimal.valueOf(0)) != 0) {
				// 判断是否为月结客户
				if (chargeMode) {
					// 判断这次是否手动修改过
					if (deliveryGoodsFee.compareTo(calculatedeliveryGoodsFee) != 0
							&& deliveryGoodsFee.doubleValue() >= 0) {
        				bean.setHandDeliveryFee(deliveryGoodsFee);
						// 未手动修改过
					} else {
						// 取得上次手动修改的送货费
        				deliveryGoodsFee = handDelivery;
        				bean.setDeliveryGoodsFee(handDelivery);
        			}
					// 设置送货费明细里面的基础送货费
					if (deliveryGoodsFee.doubleValue() >= 0) {
						for (int i = 0; i < list.size(); i++) {
                 			DeliverChargeEntity charge = list.get(i);
							if (PriceEntityConstants.PRICING_CODE_SH
									.equals(charge.getCode())) {
								BigDecimal sum = (deliveryGoodsFee
										.subtract(calculatedeliveryGoodsFee))
										.add(shCharge);
                 				list.get(i).setAmount(sum);
                 			}
                 		}
                    }
				} else {
					// 判断这次是否手动修改过
					if (deliveryGoodsFee.compareTo(calculatedeliveryGoodsFee) > 0) {
        				bean.setHandDeliveryFee(deliveryGoodsFee);
						// 未手动修改过
					} else {
						// 取得上次手动修改的送货费
        				deliveryGoodsFee = handDelivery;
        				bean.setDeliveryGoodsFee(handDelivery);
        			}
    			}
			} else {
    			bean.setHandDeliveryFee(deliveryGoodsFee);
    		}
    	}
		bean.setDeliveryGoodsFeeCanvas(String.valueOf(deliveryGoodsFee));
		// 需要重新计算运费（resetCalculateFee方法不会再次计算优惠券费用）
		CalculateFeeTotalUtils.resetCalculateFee(bean);
	}

	/**
	 * 
	 * 航班类型改变事件监听
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-12-19 下午08:18:39
	 */
	@SuppressWarnings("unchecked")
	private void flightNumberTypeListener(WaybillPanelVo bean) {
		if (bean.getCustomerPickupOrgCode() == null) {
			throw new WaybillValidateException(
					i18n.get("foss.gui.creating.calculateAction.exception.nullCustomerPickupOrg"));
		}

		if (bean.getFlightNumberType() != null
				&& bean.getFlightNumberType().getValueCode() != null) {
			FlightEntity entity = new FlightEntity();
			// 航班类型（早班、中班、晚班）
			entity.setFlightSort(bean.getFlightNumberType().getValueCode());
			/**
			 * 设置始发站为当前用户所在部门所在城市
			 */
			// UserEntity user = (UserEntity) SessionContext.getCurrentUser();
			// if(user!=null && user.getEmployee()!=null &&
			// user.getEmployee().getDepartment()!=null &&
			// user.getEmployee().getDepartment().getCityCode()!=null){
			// entity.setDepartureAirport(getCityName(user.getEmployee().getDepartment().getCityCode()));
			// }
			// 目的城市
			String cityName = getCityName(bean.getCustomerPickupOrgCode()
					.getCityCode());
			entity.setDestinationAirport(cityName);
			PaginationDto dto = waybillService
					.queryFlightDtoListBySelectiveCondition(entity, 0,
							Integer.MAX_VALUE);
			if (dto != null) {
				List<FlightDto> flightDto = dto.getPaginationDtos();
				FlightInfoDialog dialog = new FlightInfoDialog(flightDto);
				// 居中显示弹出窗口
				WindowUtil.centerAndShow(dialog);

				FlightDto flight = dialog.getFlightDto();
				if (flight != null) {
					// 设置航班时间
					bean.setFlightShift(Common.getFlyDate(flight));

					if (flight.getPlanLeaveTime() != null) {
						// 获取空运预计出发时间
						Date leaveTime = waybillService.getAirLeaveTime(bean
								.getReceiveOrgCode(),
								flight.getPlanLeaveTime(), bean
										.getFlightNumberType().getValueCode());
						// 设置航班预计出发时间
						bean.setPreDepartureTime(leaveTime);
						// 设置航班预计到达、自提时间
						bean.setPreCustomerPickupTime(getAirArriveTime(
								flight.getPlanArriveTime(), leaveTime));
					}
				} else {
					// 设置航班时间
					bean.setFlightShift("");
				}
			}
		} else {
			// 设置航班时间
			bean.setFlightShift("");
		}
		// DEFECT-3034 航班类型更改之后必须计算之后才能提交
		Common.setSaveAndSubmitFalse(ui);
	}

	/**
	 * 设置整车营销活动不可编辑
	 * 
	 * @创建时间 2014-4-30 下午7:19:50
	 * @创建人： WangQianJin
	 */
	private void setterVehicleActiveInfo(WaybillPanelVo bean, WaybillEditUI ui) {
		// 设置整车不能参与营销活动
		DataDictionaryValueVo nullVo = new DataDictionaryValueVo();
		nullVo.setValueName("");
		bean.setActiveInfo(nullVo);
		ui.incrementPanel.getCombActiveInfo().setEnabled(false);
	}

	/**
	 * 
	 * 通过城市CODE获取城市名称
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2013-4-12 下午03:07:04
	 * @return
	 */
	private String getCityName(String code) {
		AdministrativeRegionsEntity entity = waybillService
				.queryAdministrativeRegionsByCode(code);
		if (entity == null) {
			throw new WaybillValidateException("提货网点所属城市为空，请在基础数据中添加！");
		}
		return entity.getName();
	}

	/**
	 * 
	 * 获得空运到达时间
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2013-3-11 上午10:29:14
	 */
	@SuppressWarnings("static-access")
	private Date getAirArriveTime(Date planArriveTime, Date planLeaveTime) {
		if (planArriveTime != null) {
			Calendar cal = Calendar.getInstance();
			cal.setTime(planArriveTime);
			// 获得时
			int hour = cal.get(cal.HOUR_OF_DAY);
			// 获得分
			int minute = cal.get(cal.MINUTE);

			cal.setTime(planLeaveTime);
			// 年
			int year = cal.get(cal.YEAR);
			// 月
			int month = cal.get(cal.MONTH);
			// 日
			int day = cal.get(cal.DAY_OF_MONTH);

			Date airArriveTime = new Date();
			Calendar current = Calendar.getInstance();
			current.setTime(airArriveTime);
			current.set(current.YEAR, year);
			current.set(current.MONTH, month);
			current.set(current.DAY_OF_MONTH, day);
			current.set(current.HOUR_OF_DAY, hour);
			current.set(current.MINUTE, minute);
			current.set(current.SECOND, 0);
			airArriveTime = current.getTime();

			return airArriveTime;
		}
		return null;
	}

	/**
	 * 
	 * 合票类型改变事件监听
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-12-19 下午08:28:57
	 */
	private void freightMethodListener(WaybillPanelVo bean) {
		// 判断是否是自提件
		if (bean.getIsEconomyGoods() != null && bean.getIsEconomyGoods()) {
			Common.setEconomyReceiveMethod(bean);
			if (StringUtils.isNotBlank(ui.getPictureWaybillType())
					&& WaybillConstants.WAYBILL_PICTURE.equals(ui
							.getPictureWaybillType())) {
				// 提货方式不可编辑
				ui.pictureTransferInfoPanel.getCombPickMode().setEnabled(false);
			} else {
				// 提货方式不可编辑
				ui.transferInfoPanel.getCombPickMode().setEnabled(false);
			}
		} else {
			// 更改提货方式
			Common.changePickUpModeByHop(bean, ui);
			/**
			 * 判断合票方式和运输性质是否为空
			 */
			if (bean.getFreightMethod() != null
					&& bean.getProductCode() != null) {
				/**
				 * 判断合票方式是否为单独开单和运输性质是否为精准空运
				 */
				if (ProductEntityConstants.PRICING_PRODUCT_FREIGNT_DDKD
						.equals(bean.getFreightMethod().getValueCode())
						&& ProductEntityConstants.PRICING_PRODUCT_AIR_FREIGHT
								.equals(bean.getProductCode().getCode())) {
					/**
					 * 创建提货方式对象
					 */
					DataDictionaryValueVo receiveMethod = new DataDictionaryValueVo();
					receiveMethod.setValueCode(WaybillConstants.AIRPORT_PICKUP);
					receiveMethod
							.setValueName(i18n
									.get("foss.gui.creating.transferInfoPanel.airportPickup.label"));
					bean.setReceiveMethod(receiveMethod);
					if (StringUtils.isNotBlank(ui.getPictureWaybillType())
							&& WaybillConstants.WAYBILL_PICTURE.equals(ui
									.getPictureWaybillType())) {
						ui.pictureTransferInfoPanel.getCombPickMode()
								.setEnabled(false);
					} else {
						ui.transferInfoPanel.getCombPickMode()
								.setEnabled(false);
					}
				} else {
					if (StringUtils.isNotBlank(ui.getPictureWaybillType())
							&& WaybillConstants.WAYBILL_PICTURE.equals(ui
									.getPictureWaybillType())) {
						ui.pictureTransferInfoPanel.getCombPickMode()
								.setEnabled(true);
					} else {
						ui.transferInfoPanel.getCombPickMode().setEnabled(true);
					}
				}
			}
		}
		// 清空目的站以及预配线路
		cleanTargetEmpty(bean);
	}

	/**
	 * 收货人地址失去焦点事件
	 * 
	 * @author 026123-foss-lifengteng
	 * @date 2012-12-25 下午5:09:13
	 */
	public void receiveCustomerAddressListener(WaybillPanelVo bean) {
		// 非空判断
		if (null == bean.getProductCode()) {
			throw new WaybillGisPickupOrgException(
					i18n.get("foss.gui.creating.listener.Waybill.exception.productTypeNotNull"));
		}
	
		//调用GIS地址匹配提货网点 2017-03-16 下午5:09:13
		matchPickupSite(bean);
	
		ui.getTxtConsigneeAddress().setForeground(Color.BLACK);
		//调用GIS地址匹配提货网点卡，注释掉该方法；修改人: 076234
		// 整车不需要自动匹配提货网点 
		/*if (!PricingConstants.ProductEntityConstants.PRICING_PRODUCT_FULL_VEHICLE
				.equals(bean.getProductCode().getCode())) {
			// 若之前有过成功匹配地址的造成地址栏颜色变化时，在清空地址或带出新地址之前应该将地址颜色变回黑色
			ui.getTxtConsigneeAddress().setForeground(Color.BLACK);
			matchPickupOrg(bean, ui);
		}*/

		// 若为PDA补录，则更改收货客户信息后颜色变化以示提醒
		if (WaybillConstants.WAYBILL_STATUS_PDA_PENDING.equals(bean
				.getWaybillstatus())) {
			Common.setForegroundColor(ui, bean);
		}
	}

	/**
	 * 行政区域焦点监听事件
	 * 
	 * @author 026123-foss-lifengteng
	 * @date 2013-3-1 上午10:58:03
	 */
	private void deliveryCustomerAreaListener(WaybillPanelVo bean) {
		// 省市区县变化时重新设置编码和DTO
		String deliveryCustomerArea = ui.getTxtConsignerArea().getText().trim();
		// 判断地址是否为空
		if ("".equals(deliveryCustomerArea)) {
			ui.getTxtConsignerArea().setAddressFieldDto(null);
			// 向bean中设置DTO
			bean.setDeliveryCustomerAreaDto(null);
			// 国家
			bean.setDeliveryCustomerNationCode("");
			// 省份
			bean.setDeliveryCustomerProvCode("");
			// 城市
			bean.setDeliveryCustomerCityCode("");
			// 区县
			bean.setDeliveryCustomerDistCode("");
		} else {
			if (null != ui.getTxtConsignerArea()) {
    			// 获得控件上的DTO
				AddressFieldDto address = ui.getTxtConsignerArea()
						.getAddressFieldDto();
				if (null != address) {
    				// 向bean中设置DTO
    				bean.setDeliveryCustomerAreaDto(address);
    				// 国家
    				bean.setDeliveryCustomerNationCode(address.getNationId());
    				// 省份
    				bean.setDeliveryCustomerProvCode(address.getProvinceId());
    				// 城市
    				bean.setDeliveryCustomerCityCode(address.getCityId());
    				// 区县
					bean.setDeliveryCustomerDistCode(address.getCountyId());
    			}
			}
	}
	}

	/**
	 * 行政区域焦点监听事件
	 * 
	 * @author 026123-foss-lifengteng
	 * @date 2013-1-7 上午9:49:57
	 */
	private void receiveCustomerAreaListener(WaybillPanelVo bean) {
		// 省市区县变化时重新设置编码和DTO
		String receiveCustomerArea = ui.getTxtConsigneeArea().getText().trim();
		// 判断地址是否为空
		if ("".equals(receiveCustomerArea)) {
			ui.getTxtConsigneeArea().setAddressFieldDto(null);
			// 向bean中设置DTO
			bean.setReceiveCustomerAreaDto(null);
			// 国家
			bean.setReceiveCustomerNationCode("");
			// 省份
			bean.setReceiveCustomerProvCode("");
			// 城市
			bean.setReceiveCustomerCityCode("");
			// 区县
			bean.setReceiveCustomerDistCode("");
		} else {
			if (null != ui.getTxtConsigneeArea()) {
				// 获得控件上的DTO
				AddressFieldDto address = ui.getTxtConsigneeArea()
						.getAddressFieldDto();
				if (null != address) {
					// 向bean中设置DTO
					bean.setReceiveCustomerAreaDto(address);
					// 国家
					bean.setReceiveCustomerNationCode(address.getNationId());
					// 省份
					bean.setReceiveCustomerProvCode(address.getProvinceId());
					// 城市
					bean.setReceiveCustomerCityCode(address.getCityId());
					// 区县
					bean.setReceiveCustomerDistCode(address.getCountyId());
				}
			}
		}

		// 判断运输性质是否为空
		if (null == bean.getProductCode()) {
			throw new WaybillValidateException(
					i18n.get("foss.gui.creating.listener.Waybill.exception.transportFeeNotNull"));
		}
		ui.getTxtConsigneeAddress().setForeground(Color.BLACK);
		//调用GIS地址匹配提货网点卡，注释掉该方法；修改人: 076234
		// 整车不需要自动匹配提货网点
		if (!PricingConstants.ProductEntityConstants.PRICING_PRODUCT_FULL_VEHICLE
				.equals(bean.getProductCode().getCode())) {
			// 若之前有过成功匹配地址的造成地址栏颜色变化时，在清空地址或带出新地址之前应该将地址颜色变回黑色
			ui.getTxtConsigneeAddress().setForeground(Color.BLACK);
			//matchPickupOrg(bean, ui);
		}

		// 若为PDA补录，则更改收货客户信息后颜色变化以示提醒
		if (WaybillConstants.WAYBILL_STATUS_PDA_PENDING.equals(bean
				.getWaybillstatus())) {
			Common.setForegroundColor(ui, bean);
		}
	}
	
	/**
	 * 调用gis接口匹配提货网点
	 * @author 321993 zhangdianhao
	 * @date 2017-03-16 下午 06:52:08
	 */
	public void matchPickupSite(WaybillPanelVo bean) {
		// 定义查询参数
		HisSegMatchRequest dto = new HisSegMatchRequest();
		// 运单号
		dto.setWaybillNum(bean.getWaybillNo());

		// 获得地址栏VO
		AddressFieldDto address = bu.getProvCityCounty(
				bean.getReceiveCustomerProvCode(),
				bean.getReceiveCustomerCityCode(),
				bean.getReceiveCustomerDistCode());

		// 判断省市区地址对象是否为空
		if (null == address) {
			return;
		}
		
		// 省份
		dto.setProvince(address.getProvinceName());
		//省份编码
		dto.setProvinceCode(bean.getReceiveCustomerProvCode());
		// 城市
		dto.setCity(address.getCityName());
		// 城市编码
		dto.setCityCode(bean.getReceiveCustomerCityCode());
		// 区县
		dto.setCounty(address.getCountyName());
		// 区县编码
		dto.setCountyCode(bean.getReceiveCustomerDistCode());
		// 乡镇
		dto.setTown("");
		// 乡镇编码
		dto.setTownCode("");
		// 详细地址
		dto.setDetailAddress(bean.getReceiveCustomerAddress());

		if (bean.getProductCode() != null) {
			// 汽运类型
			dto.setTransType(GisConstants.GIS_FORTUNE);
		}
		if (bean.getReceiveMethod() != null) {
			// 提货方式
			dto.setDeliveryType(CommonUtils.setReceiveMethod(bean
					.getReceiveMethod().getValueCode()));
		}
		
		//判断是否精准大票,是不调用gis接口
		if(null!=bean.getIsBigGoods()){
			if(bean.getIsBigGoods()){//true时为精准大票
				return;
			}
		}
		//调用gis接口获取提货网点信息
		HisSegMatchResponse response = waybillService.queryStationInfo(dto);
		if(response!=null){
			if(StringUtils.isNotBlank(response.getStationCode())&&
					StringUtils.isNotBlank(response.getStationName())){//判断网点编码和名称不为空
				if(StringUtils.isNotBlank(response.getStationCode())){
					//网点编码
					BranchVo branchVo = bean.getCustomerPickupOrgCode();
					if(branchVo==null){
						branchVo = new BranchVo();
					}
					//网点编码
					branchVo.setCode(response.getStationCode());
					//网点名称
					branchVo.setName(response.getStationName());
					bean.setCustomerPickupOrgCode(branchVo);
				}
				
				if(StringUtils.isNotBlank(response.getComment())){
					//备注
					bean.setInnerNotes(response.getComment());
				}
				//校验提货网点信息
				ShowPickupStationDialogAction showPickupStationDialog = new ShowPickupStationDialogAction();
				showPickupStationDialog.validatePickupOrgName(bean,ui,response);
			}
		}
	}
	

	/**
	 * 匹配提货网点
	 * 
	 * @author 026123-foss-lifengteng
	 * @date 2013-1-7 上午9:52:08
	 */
	private void matchPickupOrg(WaybillPanelVo bean, WaybillEditUI ui) {
		// 地址
		String address = StringUtils.defaultString(bean
				.getReceiveCustomerAddress());
		// 区域
		String area = ui.getTxtConsigneeArea().getText().trim();
		// 判断地址和区域是否为空
		if (!"".equals(address) && !"".equals(area)) {
			// 根据收货人地址获取特殊地址类型
			List<String> remarkTypes = waybillService
					.querySpecialAddressByGis(gainGisPickupOrgDto(bean));
			// 收货人详细地址
			JTextFieldValidate txtAddress = ui.getTxtConsigneeAddress();
			// 设置地址颜色
			setReceiveAddressColor(remarkTypes, txtAddress);

			// 根据收货人地址匹配提货网点
			List<GisDepartmentDto> depts = waybillService
					.queryPickupOrgCodeByGis(gainGisPickupOrgDto(bean));
			// 对象非空判断
			if (depts != null) {
				// 提货网点集合对象
				List<BranchVo> voList = new ArrayList<BranchVo>();
				// 遍历部门信息，通过部门编码和是否代理获得提货网点信息
				for (GisDepartmentDto dto : depts) {
					// 根据组织标杆编码查询部门编码
					OrgAdministrativeInfoEntity org = waybillService
							.queryOrgByUnifiedCode(dto.getDeptNo());
					if (null != org) {
						dto.setDeptNo(StringUtil.defaultIfNull(org.getCode()));
					}
					// 查询代理网点
					BranchVo vo = bu.getCustomerPickupOrg(dto);
					if (null != vo) {
						voList.add(vo);
					}
				}

				setPickupOrgData(ui, bean, voList);
			}
		}
	}

	/**
	 * 收货联系人监听事件
	 * 
	 * @author 026123-foss-lifengteng
	 * @date 2013-1-8 下午7:32:43
	 */
	private void receiveCustomerContactListener(WaybillPanelVo bean) {
		// 若为PDA补录，则更改收货客户信息后颜色变化以示提醒
		if (WaybillConstants.WAYBILL_STATUS_PDA_PENDING.equals(bean
				.getWaybillstatus())) {
			Common.setForegroundColor(ui, bean);
		}
	}

	/**
	 * 根据特殊地址类型设置
	 * 
	 * @author 026123-foss-lifengteng
	 * @date 2013-1-4 下午4:59:35
	 */
	private void setReceiveAddressColor(List<String> remarkTypes,
			JTextFieldValidate txtAddress) {
		// 判断是否为空
		if (CollectionUtils.isNotEmpty(remarkTypes)) {
			// 遍历备注类型
			for (String remark : remarkTypes) {
				// 禁行区域：红色
				if (GisConstants.SPECIAL_ADDRESS_FORBID.equals(remark)) {
					txtAddress.setForeground(Color.RED);
				}
				// 进仓区域：黄色
				else if (GisConstants.SPECIAL_ADDRESS_ENTER.equals(remark)) {
					txtAddress.setForeground(Color.YELLOW);
				}
				// 其它：黑色
				else {
					txtAddress.setForeground(Color.BLACK);
				}
			}
		} else {
			// 将已设置的颜色重新设置回来
			txtAddress.setForeground(Color.BLACK);
		}
	}

	/**
	 * 组装到达网点匹配的查询条件
	 * 
	 * @author 026123-foss-lifengteng
	 * @date 2012-12-27 下午2:37:06
	 */
	private GisPickupOrgDto gainGisPickupOrgDto(WaybillPanelVo bean) {
		// 定义查询参数
		GisPickupOrgDto dto = new GisPickupOrgDto();
		// 运单号
		dto.setAppNum(bean.getWaybillNo());

		// 获得地址栏VO
		AddressFieldDto address = bu.getProvCityCounty(
				bean.getReceiveCustomerProvCode(),
				bean.getReceiveCustomerCityCode(),
				bean.getReceiveCustomerDistCode());

		// 判断省市区地址对象是否为空
		if (null == address) {
			return null;
		}

		// 省份
		dto.setProvince(address.getProvinceName());
		// 城市
		dto.setCity(address.getCityName());
		// 区县
		dto.setCounty(address.getCountyName());

		// 其它地址
		dto.setOtherAddress(bean.getReceiveCustomerAddress());
		if (bean.getProductCode() != null) {
			// 汽运类型
			dto.setTransportway(CommonUtils.covertProductToGisType(bean
					.getProductCode().getCode()));
		}
		if (bean.getReceiveMethod() != null) {
			// 提货方式
			dto.setMatchtypes(CommonUtils.covertReceiveMethod(bean
					.getReceiveMethod().getValueCode()));
		}

		// 收货人电话
		dto.setTel(bean.getReceiveCustomerPhone());
		// 收货人手机
		dto.setPhone(bean.getReceiveCustomerMobilephone());

		return dto;
	}

	/**
	 * 根据标杆编码查询提货网点信息
	 * 
	 * @author 026123-foss-lifengteng
	 * @date 2012-12-31 上午9:24:18
	 */
	private void setPickupOrgData(WaybillEditUI ui, WaybillPanelVo bean,
			List<BranchVo> depts) {
		// 判断返回的标杆编码集合是否为空
		if (CollectionUtils.isNotEmpty(depts)) {
			// 显示网点对象信息
			showPickupStationDialog(bean, depts);
			ShowPickupStationDialogAction action = new ShowPickupStationDialogAction();
			// 将该UI设置到ShowPickupStationDialogAction类中
			action.setInjectUI(ui);
			// 设置线路信息
			action.setLoadLine(bean);
			action.setAirDeptEnabled(bean);
		} else {
			// 不做业务处理
		}
	}

	/**
	 * 
	 * 预付金额事件监听
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-12-28 下午12:10:48
	 * @param bean
	 */
	private void prePayAmountListener(WaybillPanelVo bean) {
		// 手动修改预付金额，需要自动对到付金额进行计算
		setToPayAmount(bean);
	}

	/**
	 * 
	 * 一半先付一半到付，根据输入的预付金额计算出到付金额
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-12-28 下午12:13:40
	 * @param bean
	 */
	private void setToPayAmount(WaybillPanelVo bean) {
		// 预付金额
		BigDecimal prePayAmount = bean.getPrePayAmount();
		prePayAmount = prePayAmount == null ? BigDecimal.ZERO : prePayAmount;
		// 到付金额
		BigDecimal toPayAmount = BigDecimal.ZERO;
		// 总金额
		BigDecimal totalAmount = bean.getTotalFee();
		// 代收货款
		BigDecimal codAmount = bean.getCodAmount();
		// 计算除去代收货款的总金额
		totalAmount = totalAmount.subtract(codAmount);
// 判断是否图片开单
		if (!((WaybillConstants.WAYBILL_PICTURE
				.equals(ui.getPictureWaybillType()))
				&& (bean.getGoodsWeightTotal() == null || bean
						.getGoodsWeightTotal().compareTo(new BigDecimal(0)) == 0)
				&& (bean.getGoodsVolumeTotal() == null || bean
						.getGoodsVolumeTotal().compareTo(new BigDecimal(0)) == 0))) {
			 if (prePayAmount.compareTo(BigDecimal.ZERO) == 0) {
					ui.billingPayPanel.getTxtAdvancesMoney().requestFocus();
					// 将暂存提交按钮设置为不可编辑
					Common.setSaveAndSubmitFalse(ui);
				throw new WaybillValidateException(
						i18n.get("foss.gui.creating.listener.Waybill.setToPayAmount.one"));
				} else if (prePayAmount.compareTo(totalAmount) > 0) {
					ui.billingPayPanel.getTxtAdvancesMoney().requestFocus();
					// 将暂存提交按钮设置为不可编辑
					Common.setSaveAndSubmitFalse(ui);
				throw new WaybillValidateException(
						i18n.get("foss.gui.creating.listener.Waybill.setToPayAmount.two"));
				} else {
					// 到付金额 = 总金额 - 预付金额
					toPayAmount = totalAmount.subtract(prePayAmount);
				validateTotalAmount(prePayAmount, toPayAmount, totalAmount,
						bean);
					// 实际到付金额 = 到付金额+代收货款
					toPayAmount = toPayAmount.add(codAmount);
					bean.setToPayAmount(toPayAmount);
	}
		}
	}

	/**
	 * 
	 * 验证预付金额+到付金额是否=总金额
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-12-28 下午02:15:13
	 */
	private void validateTotalAmount(BigDecimal prePayAmount,
			BigDecimal toPayAmount, BigDecimal totalAmount, WaybillPanelVo bean) {
		if (prePayAmount.add(toPayAmount).compareTo(totalAmount) != 0) {
			Common.setSaveAndSubmitFalse(ui);
			throw new WaybillValidateException(
					i18n.get("foss.gui.creating.listener.Waybill.validateTotalAmount.one"));
		}
	}

	/**
	 * 
	 * 到付金额事件监听
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-12-28 下午12:10:48
	 * @param bean
	 */
	private void toPayAmountListener(WaybillPanelVo bean) {
		// 一半先付一半到付，根据输入的到付金额计算出预付金额
		setPrePayAmount(bean);
	}

	/**
	 * 
	 * 一半先付一半到付，根据输入的到付金额计算出预付金额
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-12-28 下午12:13:40
	 * @param bean
	 */
	private void setPrePayAmount(WaybillPanelVo bean) {
		// 预付金额
		BigDecimal toPayAmount = bean.getToPayAmount();
		// 到付金额
		BigDecimal prePayAmount = BigDecimal.ZERO;
		// 总金额
		BigDecimal totalAmount = bean.getTotalFee();
		// 代收货款
		BigDecimal codAmount = bean.getCodAmount();
		if (toPayAmount.compareTo(codAmount) < 0) {
			MsgBox.showInfo(i18n
					.get("foss.gui.creating.listener.Waybill.setPrePayAmount.one"));
			ui.billingPayPanel.getTxtArrivePayment().requestFocus();
			// 将暂存提交按钮设置为不可编辑
			Common.setSaveAndSubmitFalse(ui);
		} else if (toPayAmount.compareTo(totalAmount) > 0) {
			MsgBox.showInfo(i18n
					.get("foss.gui.creating.listener.Waybill.setPrePayAmount.two"));
			ui.billingPayPanel.getTxtArrivePayment().requestFocus();
			// 将暂存提交按钮设置为不可编辑
			Common.setSaveAndSubmitFalse(ui);
		} else {
			// 到付金额 = 总金额 - 预付金额
			prePayAmount = totalAmount.subtract(toPayAmount);
			validateTotalAmount(prePayAmount, toPayAmount, totalAmount, bean);
			bean.setPrePayAmount(prePayAmount);
		}
	}

	/**
	 * 
	 * 联动后，都需要把提交实体设置为空，保证修改优惠券编号后，都需要用户点击计算，来校验优惠券 和把优惠券的金额减去中运费
	 * 
	 * @author 026113-FOSS-linwensheng
	 * @date 2013-1-4 上午09:52:49
	 */

	private void promotionsCodeListener(WaybillPanelVo bean) {
		bean.setCouponInfoDto(null);
		bean.setCouponFree(null);
		Common.setSaveAndSubmitFalse(ui);
	}

	/**
	 * 
	 * 是否vo.set***也触发该事件类
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2013-1-10 上午09:05:30
	 * @return
	 */
	public boolean isFromVoTargetEnable() {
		return false;
	}

	/**
	 * 判断强制设置AB货
	 * 
	 * @author foss-liyongfei
	 * @param bean
	 */
	/*
	 * private void setGoodsTypeB(WaybillPanelVo bean){
	 * //若是可分拣A、B货，则重置AB货选择，并进行判断是否强制B货 if(bean.getGoodsTypeIsAB()!=null){
	 * if(bean.getGoodsTypeIsAB()) {
	 * if(StringUtils.isNotBlank(ui.getPictureWaybillType()) &&
	 * WaybillConstants.WAYBILL_PICTURE.equals(ui.getPictureWaybillType())){
	 * //强制B货判断,若是B货，选择B，且灰掉按钮，变为不可用状态 if(CommonUtils.getGoodsTypeIsB(bean)){
	 * ui.pictureCargoInfoPanel.getRbnB().setSelected(true);
	 * ui.pictureCargoInfoPanel.getRbnA().setEnabled(false);
	 * ui.pictureCargoInfoPanel.getRbnB().setEnabled(false); }else{
	 * //若不符合强制B货的条件，且可分拣A、B货，并且之前的按钮为可选状态（初始化状态或者手动选择AB货后），do Nothing
	 * if(ui.pictureCargoInfoPanel.getRbnA().isEnabled() &&
	 * ui.pictureCargoInfoPanel.getRbnB().isEnabled()){ //Do
	 * Nothing--------------- }else{
	 * ui.pictureCargoInfoPanel.getRbnA().setEnabled(true);
	 * ui.pictureCargoInfoPanel.getRbnB().setEnabled(true);
	 * bean.setGoodsType(""); } } }else{ //强制B货判断,若是B货，选择B，且灰掉按钮，变为不可用状态
	 * if(CommonUtils.getGoodsTypeIsB(bean)){
	 * ui.cargoInfoPanel.getRbnB().setSelected(true);
	 * ui.cargoInfoPanel.getRbnA().setEnabled(false);
	 * ui.cargoInfoPanel.getRbnB().setEnabled(false); }else{
	 * //若不符合强制B货的条件，且可分拣A、B货，并且之前的按钮为可选状态（初始化状态或者手动选择AB货后），do Nothing
	 * if(ui.cargoInfoPanel.getRbnA().isEnabled() &&
	 * ui.cargoInfoPanel.getRbnB().isEnabled()){ //Do Nothing---------------
	 * }else{ ui.cargoInfoPanel.getRbnA().setEnabled(true);
	 * ui.cargoInfoPanel.getRbnB().setEnabled(true); bean.setGoodsType(""); }
	 * 
	 * } } } }
	 * 
	 * }
	 */

	/**
	 * @需求：大件上楼优化需求
	 * @功能：1.判断送货上楼或者大件上楼是否满足需求 2.对内备注
	 * @author:218371-foss-zhaoyanjun
	 * @date:2015-04-02下午15:15
	 */
	private void addCombPickModeListener(WaybillPanelVo bean) {
		try {
			//调用GIS地址匹配提货网点 2017-03-16 下午5:09:13
			matchPickupSite(bean);
			/*
			 * “大件上楼”或者“送货上楼”提货方式对内备注
			 */
			CommonUtils.inwardRemark(bean);
		} catch (Exception e) {
			// TODO: handle exception
			if (StringUtils.isNotEmpty(e.getMessage())) {
				MsgBox.showInfo(e.getMessage());
			}
		}
	}


	//liding comment for NCI
	/**
	 * 该方法验证若是银行卡付款，则交易流水号是否可编辑
	 * 
	 * @author:218371-foss-zhaoyanjun
	 * @date:2015-01-23上午08:13
	 */
//	private void whetherBankCardPayment(WaybillPanelVo bean) {
//		// TODO Auto-generated method stub
//		if (bean.getPaidMethod() != null
//				&& WaybillConstants.CREDIT_CARD_PAYMENT.equals(bean
//						.getPaidMethod().getValueCode())) {
//			ui.billingPayPanel.getTransactionSerialNumber().setEnabled(true);
//		} else {
//			ui.billingPayPanel.getTransactionSerialNumber().setEnabled(false);
//			bean.setTransactionSerialNumber(null);
//		}
//	}

	
	//liding comment for NCI
	/**
	 * 对交易流水号进行监控
	 * 
	 * @author:218371-foss-zhaoyanjun
	 * @date:2015-01-23
	 */
//	private void verificate(String transactionSerialNumber) {
//		// TODO Auto-generated method stub
//		if (StringUtils.isEmpty(transactionSerialNumber)) {
//			MsgBox.showInfo(i18n
//					.get("foss.gui.creating.listener.Waybill.transactionSerialNumber"));
//		}
//	}

	/**
	 * 根据“至尊宝”判断，若修改保费小于50000时，删除“至尊宝冲减”
	 * 
	 * @author:218371-foss-zhaoyanjun
	 * @date:2015-04-15上午09:39
	 */
	private void judgeZhiZunBao(WaybillPanelVo bean) {
		if (bean.getInsuranceAmount() != null
				&& bean.getInsuranceAmount().compareTo(new BigDecimal(NUM_50000)) < 0) {
			List<OtherChargeVo> data = ((WaybillOtherCharge) ui.incrementPanel
					.getTblOther().getModel()).getData();
			if (data != null) {
				for (int i = 0; i < data.size(); i++) {
					if (PriceEntityConstants.PRICING_CODE_ZZB
							.equalsIgnoreCase(data.get(i).getCode())) {
						// copy的代码
						// 累计其他费用面板所有费用(因为当点击计算总运费以后，其他费用中已经去除各种特殊归集费用，要把特殊费用再次累加到其他费用，方便下一次归集)
						CommoForFeeUtils.otherPanelSumFee(data, bean);
						BigDecimal otherFee = bean.getOtherFee().subtract(
								new BigDecimal(data.get(i).getMoney()));
						bean.setOtherFee(otherFee);
						bean.setOtherFeeCanvas(bean.getOtherFee().toString());
						data.remove(i);
						ui.incrementPanel.setChangeDetail(data);
							if (ui.getPictureWaybillType() != null
								&& WaybillConstants.WAYBILL_PICTURE.equals(ui
										.getPictureWaybillType().trim())) {
							String weight = ui.pictureCargoInfoPanel
									.getTxtWeight().getText();
							String volume = ui.pictureCargoInfoPanel
									.getTxtVolume().getText();
							if (StringUtils.isNotBlank(weight)
									&& new BigDecimal(weight)
											.compareTo(new BigDecimal(0)) > 0
									&& StringUtils.isNotBlank(volume)
									&& new BigDecimal(volume)
											.compareTo(new BigDecimal(0)) > 0) {
								ui.incrementPanel.getBtnCalculate().setEnabled(
										true);
								ui.billingPayPanel.getBtnSubmit().setEnabled(
										false);// 提交为不可编辑
								ui.billingPayPanel.getBtnSubmitAndNextSingle()
										.setEnabled(false);								
								ui.incrementPanel.getJlable().setVisible(false);
								ui.incrementPanel.getCombServiceRate()
										.setVisible(false);
							} else {
								ui.incrementPanel.getBtnCalculate().setEnabled(
										false);
								ui.billingPayPanel.getBtnSubmit().setEnabled(
										true);// 提交为不可编辑
								ui.billingPayPanel.getBtnSubmitAndNextSingle()
										.setEnabled(true);
								ui.incrementPanel.getJlable().setVisible(true);
								ui.incrementPanel.getCombServiceRate()
										.setVisible(true);
							}

						} else {
							ui.billingPayPanel.getBtnSubmit().setEnabled(false);// 提交为不可编辑
							ui.buttonPanel.getBtnSubmit().setEnabled(false);// 提交为不可编辑
						}
					}
				}
			}
		}
	}

	public void internalDeliveryListener(WaybillPanelVo bean) {

		JComboBox internalDeliveryType = ui.basicPanel
				.getInternalDeliveryType();
		JTextFieldValidate txtStaffNumber = ui.basicPanel.getTxtStaffNumber();
		JComboBox comBox = ui.incrementPanel.getCombPaymentMode();
		DefaultComboBoxModel model = ui.getCombPaymentModeModel();
		DefaultComboBoxModel internalDeliveryTypeModel = ui
				.getDeliveryTypeModel();
		// liding add for NCI
		// 图片开单时付款方式屏蔽银行卡
		boolean isPicWaybill = WaybillConstants.WAYBILL_PICTURE.equals(ui
				.getPictureWaybillType());
		CommonUtils.internalDelivery(bean, internalDeliveryType,
				internalDeliveryTypeModel, txtStaffNumber, comBox, model,isPicWaybill);
	}

	/**
	 * 判断一个数字是否在一个范围之内
	 * 
	 * @param current
	 * @param min
	 * @param max
	 * @return
	 */
	public static boolean rangeInDefined(int current, int min, int max) {
		return Math.max(min, current) == Math.min(current, max);
	}

	/**
	 * 是否伙伴开单
	 * 
	 * @param bean
	 */
	public void partnerBillingListener(WaybillPanelVo bean) {
		boolean bool = ui.basicPanel.getPartnerCheckBox().isSelected();
		if (bool) {
			ui.basicPanel.getPartnerLabel().setVisible(true);
			ui.basicPanel.getPhoneLabel().setVisible(true);
			ui.basicPanel.getPartnerName().setVisible(true);
			ui.basicPanel.getPartnerPhone().setVisible(true);
			ui.incrementPanel.getCombActiveInfo().setEditable(false);
			ui.incrementPanel.getCombActiveInfo().setEnabled(false);
			ui.incrementPanel.getTxtPromotionNumber().setEditable(false);
			ui.incrementPanel.getTxtPromotionNumber().setEnabled(false);
			ui.billingPayPanel.getBtnSubmit().setEnabled(false);
			ui.buttonPanel.getBtnSubmit().setEnabled(false);
		} else {
			bean.setPartnerName("");
			bean.setPartnerPhone("");
			ui.basicPanel.getPartnerLabel().setVisible(false);
			ui.basicPanel.getPhoneLabel().setVisible(false);
			ui.basicPanel.getPartnerName().setVisible(false);
			ui.basicPanel.getPartnerPhone().setVisible(false);
			ui.basicPanel.getPartnerName().setText("");
			ui.basicPanel.getPartnerPhone().setText("");
			ui.billingPayPanel.getBtnSubmit().setEnabled(false);
			ui.buttonPanel.getBtnSubmit().setEnabled(false);
			ui.incrementPanel.getTxtPromotionNumber().setEditable(true);
			ui.incrementPanel.getTxtPromotionNumber().setEnabled(true);
			ui.incrementPanel.getCombActiveInfo().setEditable(true);
			ui.incrementPanel.getCombActiveInfo().setEnabled(true);
			ui.billingPayPanel.billingPayBelongPanel.getTxtPublicCharge()
					.setEditable(false);
			ui.billingPayPanel.billingPayBelongPanel.getTxtPublicCharge()
					.setEnabled(false);
		}
	}
}