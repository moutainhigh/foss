/**
 *  initial comments.
 */
/*******************************************************************************
 * Copyright 2013 PKP
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *    http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * PROJECT NAME	: pkp-changing
 * 
 * FILE PATH        	: src/main/java/com/deppon/foss/module/pickup/changing/client/listener/WaybillInfoBindingListener.java
 * 
 * FILE NAME        	: WaybillInfoBindingListener.java
 * 
 * AUTHOR			: FOSS接送货系统开发组
 * 
 * HOME PAGE		: http://www.deppon.com
 * 
 * COPYRIGHT		: Copyright (c) 2012  Deppon All Rights Reserved.
 ******************************************************************************/
/*
 * Copyright by Deppon and the original author or authors.
 * 
 * This document only allow internal use ,Any of your behaviors using the file
 * not internal will pay legal responsibility.
 *
 * You may learn more information about Deppon from
 *
 *      http://www.deppon.com
 *
 */

/**--------------------------------------
 * 营业员点击运单离线开单，
 * 进入运单离线开单界面。
 本界面为离线录入货物信息。
 1.	录入货物信息：
 录入信息包括：货物名称、总件数、总重量、
 货物尺寸、总体积、货物包装、货物类型、是否贵重物品；
 1.1	货物名称：货物的名称；
 1.2	总件数：收货时货物的总件数；
 1.3	总重量：收货时货物的总重量；
 1.4	货物尺寸：收货时货物的尺寸；
 1.5	总体积：收货时货物的总体积；
 1.6	货物包装：货物的包装，其包装总件数等于打木架和打木箱后的总件数；
 1.7	货物类型：
 1.7.1	运输类型为汽运时，
 货物类型为公司规则的分拣条件的类型，
 为唯一选择框，包括：A、B；
 1.7.2	运输类型为空运时，
 货物类型为下拉选择框，
 默认显示为普货，
 目前只这一个分类，
 该类型可做配置；
 1.8	是否贵重物品：
 货物是否为公司规则的贵重物品，
 为选择框；
 */
/**--------------------------------------
 * 1.	若货物为违禁品，
 * 	则系统自动提示“货物为违禁品，不可开单！”；
 2.	若货物为拒收品，
 则系统自动提示“货物为拒收品，不可开单！”；
 3.	若货物为贵重物品，
 则系统自动勾选“贵重物品”，
 且不可修改；
 4.	若货物为限保物品，
 则系统自动限定保价金额，且不可修改，
 并提示“货物为限保物品”；
 5.	违禁品、拒收品、
 贵重物品、限保物品（含保价金额上限）
 具体类型可在系统中进行配置；
 1.	货物重量单位为千克
 */
/**--------------------------------------
 * 1.	货物尺寸为计算器输入，
 * 显示为输入文本；
2.	尺寸计算单位为厘米，
尺寸计算出数据后转换单位为立方米后，
在货物体积中显示数据；例如：
尺寸录入为：50*50*20，
则体积显示数据为：0.05；
 */
/**--------------------------------------
 * 1.	货物体积单位为立方米；
2.	营业员可以修改通过尺寸计算器
计算得出的体积数据；
3.	系统设置货物重量体积比区间值（该值由基础资料配置），
在运单提交时，
系统自动对重量体积比进行校验：
即重量体积比X=重量/体积；
3.1	当X不在设置的区间中，
弹出提示“请确认录入的重量体积是否准确！”；
（该弹窗有两个按钮：确定、取消）点击确定时，
弹出离线开单确认运单信息界面；点击取消，
点返回运单录入界面；
3.2	当X在区间中，无提示；
直接进入确认运单信息界面；
--------------------------------------
 */
/**--------------------------------------
 * 1.	纸包装件数默认显示数值等于货物总件数，
 * 营业员可以修改各包装的件数；
 * 系统自动在录入下一个包装前计算显示剩余未录入的件数，
 * 例：某票货物为50件，则自动显示纸包装50，
 * 在营业员修改纸包装为20时，木包装自动显示为30，
 * 在营业员修改木包装为10时，
 * 纤包装自动显示为20，该过程中未录入包装数值的默认显示为0；
2.	货物包装总件数小于等于货物总件数；
 */
/**--------------------------------------
 * 1.	离线开单时，不录入代打木架信息；
 * 当木包装件数大于等于1时，系统不提示任何信息，
 * 也不弹出代打木架录入界面；
2.	离线开单的代打木架信息在离线开单提交时，
系统校验提醒；
 */
/**
 * 1.	运输类型为汽运时，货物类型为唯一选择项；即，
 * 非A即B；默认不可勾选，
 * 只有当走货路由经过特定的城市时需要录入货物类型,
 * 特定城市可在系统中进行配置；
2.	运输类型为空
默认显示为普货，目前只有这一个分类，该类型可做配置；
--------------------------------------
 */
/**--------------------------------------
 * 1.	系统根据货物名称匹配生成的勾选贵重物品，
 * 营业员不可去掉勾选；
2.	营业员也可以主动勾选贵重物品；
3.	件数等于1、体积小于等于0.05个方、
报价声明价值大于等于10000元，为贵重物品；
系统自动勾选贵重物品，
营业员可修改是否勾选；
4.	件数大于等于2时，平均体积（体积/件数）
小于等于0.5方，平均声明价值（保价声明价值/件数）
大于等于10000元，为贵重物品；
系统自动勾选贵重物品，
营业员可修改是否勾选；
1.	营业部开单时按打完木架后的包装开，
即包装中含“木架/木箱”，
开单件数为货物打木架/木箱前的实际件数（防止丢货），
尺寸和重量按照以下公式计算：
1.1	整票货物代打时：
开单体积=代打货物体积*1.4；
开单重量=所有货物重量+代打货物体积*42；
1.2	部分货物代打时，
开单体积=代打货物体积*1.4+未打木架货物体积；
开单重量=所有货物重量+代打货物体积*42。
即：营业部按照代打货物未打木架之前体积的1.4倍来开单收费，
重量另加，单票中未打木架的货物的体积和重量不变；
1.3	例如：一票货物需全部代打，
货物体积为1个方，重量为100KG，
则开单体积为1.4个方，
开单重量为100+1*42=142KG，
收取客户包装费为150*1.4=210元；
1.4	需要加托时，仍按照50元/个另外收取费用，
托的重量和体积不再另加；
营业部不需要再更改由于打木架引起重量和体积的变化；
2.	开单件数为代打木架前货物实际件数，
包装为打木架后的包装，
打木架后件数发生变化后，
需及时更改件数；
--------------------------------------
 */

/**--------------------------------------
 * 每天处理的运单约为1000000单
营业员数量约10000名
系统一般要求
营业部、集中开单小组上班时间
营业部：16：00-20：00
集中开单小组：21：00-次日4：00
 */

/**--------------------------------------
 * 本界面为录入增值服务信息。
界面主要分为三个部分：
录入增值服务、
录入包装费、
查询其它费用。
1.	录入增值服务
录入增值服务分为两个部分：
录入增值服务信息界面、
录入其它费用列表；
1.1	录入增值服务信息界面
录入增值服务信息界面包括：
1.1.1	保价声明价值；
1.1.2	保价费率：
保价费率可由基础资料配置，
可按出发城市区域，
出发营业部等；
1.1.3	保价费；
1.1.4	代收货款；
1.1.5	代收费率；
1.1.6	代收手续费；
1.1.7	退款类型：
包括三日退、
退日退、
审核退，
默认三日退；
1.1.8	包装费；
1.1.9	装卸费；
1.1.10	送货费；
1.1.11	其它费用合计；
1.1.12	返单类别：
包括无需返单、
原件签收单返回、
传真件签收单返回、
扫描件返回，
默认无需返单；
1.1.13	预付费保密；
1.2	录入其它费用列表
录入其它费用列表包括：
1.2.1	费用名称；
1.2.2	费用金额；
1.2.3	新增其它费用：
功能按钮；
1.2.4	删除其它费用：
功能按钮；
2.	录入包装费
其界面和界面和需求详见系统用例“DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息”中“录入包装费”；
3.	查询其它费用
其界面和界面和需求详见系统用例“DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息”中“查询其它费用”；
--------------------------------------
 */
/**
 * 录入保价声明价值
 * 1.	系统根据录入的保价声明价值和系统自动获得的保价费率计算保价费；
 * 2.	规则-请参见系统用例“DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息”中系统规则SR1、SR3；
 * 录入代货货款
 * 1.	系统根据录入的代收货款和系统自动获得的代收费率计算代收手续费；
2.	规则-请参见系统用例“DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息”中系统规则SR2、SR3；
录入退款类型
1.	规则-请参见系统用例“DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息”中系统规则SR2、SR4；
2.	规则-请参见系统规则SR1；
录入包装费：焦点移至包装费时，
自动弹出包装费录入界面
1.	规则-请参见系统用例“DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息”中系统规则SR5；
录入装卸费
 * 1.	规则-请参见系统用例“DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息”中系统规则SR6；
 * 录入送货费
 * 1.	规则-请参见系统用例“DP-FOSS-接送货系统用例-运单生成-
 * 确认承运信息-录入增值服务信息”中系统规则SR7；
 * 录入其它费用：点击新增其它费用，增加新的其它费用列后，点击放大镜，弹出其它费用查询列表；
 * 运单生成-确认承运信息-录入增值服务信息”中系统规则SR8；
 * 录入返单类别
 * 1.	规则-请参见系统用例“DP-FOSS-接送货系统用例
 * -运单生成-确认承运信息-录入增值服务信息”中系统规则SR9；
 * 录入预付费保密
 * 1.	规则-请参见系统用例“DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息”中系统规则
 * SR10,SR11,SR12；
 * 1.	离线开单中不生成代收货款退款收银人信息，
 * 且不录入；
 * 其代收货款的退款收银人信息在有线后提交运单时录入；
 * 字段名称 	说明 	输入限制	输入项提示文本	长度	是否必填	备注
 * 保价声明价值		数字		8	是	
保价费率		数字、符号		8		
保价费		数字		8		系统自动生成
代收货款		数字		8	是	
代收费率		数字、符号		8		
代收手续费		数字		8		系统自动生成
退款类型		下拉框		3	是	
包装费		数字		8	是	
装卸费		数字		8	是	
送货费		数字		8	是	
其它费用合计		数字		8	是	
返单类别		下拉框		10	是	
预付费保密		复选框		1	否	
--------------------------------------
使用量	每天处理的运单约为1000000单
2012年全网估计用户数	营业员数量约10000名
响应要求（如果与全系统要求 不一致的话）	系统一般要求
使用时间段	营业部、集中开单小组上班时间
高峰使用时间段	营业部：16：00-20：00
集中开单小组：21：00-次日4：00
--------------------------------------
1.10	接口描述
输入的尺寸可以进行加减例如：1*1*1*5+2*2*2*3-0.5*0.5*0.5*
体积为空时，录入尺寸后，
填充体积。
当尺寸修改时，
体积随之变处。
当修改体积时，
尺寸不变化。 

货物包装总件数小于等于货物总件数，
如果大于总件数，
提示：“包装件数不能大于总件数”
--------------------------------------
贵重物品规则变更： 
1.修改现有系统对"贵重物品"的判断条件如下： 
a. 单票单件货物，
体积≤0.05立方且保价声明价值≥1万元； 
b. 单票多件货物，
平均单件体积≤0.2立方且平均单件保价声明价值≥1万元；
（注：平均单件体积=开单总体积÷开单件数，
平均单件保价=开单保价声明价值÷开单件数） 
c. 高保价货物，
单票货物保价≥10万元； 
满足以上任意一个条件时，
系统将判定该票货物为贵重物品并自动勾选"贵重物品"复选框，
且为灰色，不可编辑；不满足以上条件时，
该复选框为可编辑状态，
用户可根据实际情况自行选择是否勾选； 
2.若"贵重物品"复选框被勾选，
则在【储运注意事项】中自动加入提示记录"贵重物品"字段，
若该货物为贵重物品时，
"储运注意事项"中信息显示优先级为：贵重物品＞其他； 
--------------------------------------
尺寸录入框可以不录入件数，
如件数为1时。
因此录入框即可以输入10*10*10，
又可以输入10*10*10*1
进入该页面时，木架和木箱都赋初始值0，
仍保持必填，操作员根据实际情况改，
选择木架或木箱或两者都选择后则该值不能为0
--------------------------------------
	ISSUE-1105
1.运单开单时，货物的件数、
重量及体积文本框是必填项，
默认值为空； 
2.件数只能是大于等于1的整数，
重量及体积只能大于0。
体积、重量这种过程数据保留两位小数
--------------------------------------
前置条件		1.	贵重物品基础资料
2.	违禁物品基础资料
3.	分拣目的站基础资料
后置条件		1.	打木架录入
2.	运单收银
--------------------------------------
营业员点击运单开单，进入运单开单界面。
本界面为录入货物信息。
界面主要分为两个部分：录入货物信息、代收木架信息录入。
1.	录入货物信息：
录入信息包括：货物名称、总件数、
总重量、货物尺寸、
总体积、货物包装、
货物类型、是否贵重物品；
1.1	货物名称：
货物的名称；
1.2	总件数：
收货时货物的总件数；
1.3	总重量：
收货时货物的总重量；
1.4	货物尺寸：
收货时货物的尺寸；
1.5	总体积：
收货时货物的总体积；
1.6	货物包装：
货物的包装，
其包装总件数等于打木架和打木箱后的总件数；
1.7	货物类型：
1.7.1	运输类型为汽运时，
货物类型为公司规则的分拣条件的类型， 
为唯一选择框，包括：A、B；
1.7.2	运输类型为空运时，
货物类型为下拉选择框，
默认显示为普货，
目前只这一个分类，
该类型可做配置；
1.8	是否贵重物品：
货物是否为公司规则的贵重物品，
为选择框；
2.	代打木架信息录入；
当包装木的件数大于等于1时，
自动弹出对话框：“是否收入代打木架？”，是，
则进入场代打木架信息录入界面；
录入信息包括：代打部门、打木架货物件数、
代打木架要求、打木架货物尺寸、打木架货物体积、
打木箱货物件数、代打木箱要求、打木箱货物尺寸、打木架货物体积；
2.1	代打部门：
代打木箱或木架的部门名称；
2.2	打木架货物件数：
需要代打木架的货物件数；
2.3	代打木架要求：
代打木架的要求，
如“1和2合打，3、4分开打”；
2.4	打木架货物尺寸：
需要代打木架的货物尺寸；
2.5	打木架货物体积：
需要代打木架的货物体积；
2.6	打木箱货物件数：
需要代打木架的货物件数；
2.7	代打木箱要求：
代打木箱的要求，如“5和6合打，加一个木托”；
2.8	打木箱货物尺寸：
需要代打木箱的货物尺寸；
2.9	打木箱货物体积：
需要代打木箱的货物体积；
2.10	功能按钮：
确定、关闭、重置；k
--------------------------------------------------
1.6.1	录入货物信息
序号	基本步骤	相关数据	补充步骤
1	录入货物名称		
	1.	系统自动匹配违禁品、贵重物品、限保物品基础资料，生成规则；
2.	规则-请参见系统规则SR1；
2	录入总件数		
	规则-请参见系统规则SR2
3	录入总重量		
	1.	规则-请参见系统规则SR2、SR11；
4	录入货物尺寸		
	1.	规则-请参见系统规则SR3、SR4；
5	录入总体积		
	1.	规则-请参见系统规则SR2、SR3、SR4、SR10；
6	录入货物包装		
	1.	当木包装大于等于1时，
		系统校验出发城市和对应目的站的走货路由中是否有有打木架功能的部门，
		若有，则提醒营业员“是否收入代打木架？”，是，
		则进入场代打木架信息录入界面”，
		并显示第一个有打木架功能的部门名称；
		若走货路由中无有打木架功能的部门，
		则不提示“是否收入代打木架？”；
2.	规则-请参见系统规则SR5、SR6、SR10；
7	录入货物类型		
	1.	规则-请参见系统规则SR7；
8	录入是否贵重货物		
	1.	规则-请参见系统规则SR8；
9       录入打木箱货物体积		
	1.	规则-请参见系统规则SR3、SR4、SR10；
	-----------------------------------
	1.	若货物为违禁品，
	则系统自动提示“货物为违禁品，不可开单！”；
2.	若货物为贵重物品，
则系统自动勾选“贵重物品”，
且不可修改；
3.	若货物为限保物品，
则系统自动限定保价金额，
且不可修改，
并提示“货物为限保物品”；
4.	违禁品、
拒收品、
贵重物品、
限保物品（含保价金额上限）
具体类型可在系统中进行配置；
1.	货物重量单位为千克；
2.	运单开单时，
货物的件数、
重量及体积文本框是必填项，
默认值为空； 
3.	件数只能是大于等于1的整数，
重量及体积只能大于0。
4.	体积、
重量这种过程数据保留两位小数
1.	尺寸录入文本框，
支持'长*宽*高*件数+长*宽*高*（即多个尺寸相加）的计算；
2.	如果件数是1，
则不强制在录入时要“*1”；
3.	货物尺寸为计算器输入，
输入的尺寸可以进行加减，
例如：1*1*1*5+2*2*2*3-0.5*0.5*0.5，
显示为输入文本；
4.	尺寸计算单位为厘米，
尺寸计算出数据后转换单位为立方米后，
在货物体积中显示数据；
例如：尺寸录入为：50*50*20（其中20为件数），
则体积显示数据为：0.05； 
5.	体积为空时，
录入尺寸后，填充体积。
当尺寸修改时，体积随之变处。
当修改体积时，尺寸不变化。
6.	体积初始值为“0”，
仍保持必填，
操作员根据实际情况改，
选择木架或木箱或两者都选择后则该值不能为0

1.	货物体积单位为立方米；
2.	营业员可以修改通过尺寸计算器计算得出的体积数据；
3.	系统设置货物重量体积比区间值（该值由基础资料配置），
在运单提交时，
系统自动对重量体积比进行校验：即重量体积比X=重量/体积； 
3.1	当X不在设置的区间中，
弹出提示“请确认录入的重量体积是否准确！”；
（该弹窗有两个按钮：确定、取消）点击确定时，
弹出确认运单信息界面；点击取消，点返回运单录入界面；
3.2	当X在区间中，无提示；
直接进入确认运单信息界面；
4.	录入重量体积后，
系统校验单票的重量体积及单件（平均单件）
的重量体积是否满足“修改-查询行政组织业务属性”
基础资料中的单票和单件重量体积限制；
只要该四项中有一项不满足，
则提示“XX超出提货网点限制，
请重新选择提货网点！”； 
1.	货物包装总件数小于等于货物总件数，
如果大于总件数，
提示：“包装件数不能大于总件数”；
1.	当木包装件数大于等于1时，
系统校验出发城市和对应目的站的走货路由中是否有有打木架功能的部门，
若有，则提醒营业员“是否收入代打木架？”，是，
则进入场代打木架信息录入界面”，
并显示第一个有打木架功能的部门名称；
若走货路由中无有打木架功能的部门，
则不提示“是否收入代打木架？”；
2.	当走货路由中有有打木架功能的部门为多个时，
只显示系统路由中第一有有打木架功能的部门，
且不可修改；
1.	运输类型为汽运时，
货物类型为唯一选择项；
即，非A即B；默认不可勾选，
只有当走货路由经过特定的城市时需要录入货物类型,
特定城市可在系统中进行配置；
2.	运输类型为空运时，
货物类型为下拉选择框，
默认显示为普货，
目前只有这一个分类，
该类型可做配置；
1.	贵重物品判断规则： 
a. 单票单件货物，
体积≤0.05立方且保价声明价值≥1万元； 
b. 单票多件货物，
平均单件体积≤0.2立方且平均单件保价声明价值≥1万元；
（注：平均单件体积=开单总体积÷开单件数，
平均单件保价=开单保价声明价值÷开单件数） 
c. 高保价货物，
单票货物保价≥10万元； 
满足以上任意一个条件时，
系统将判定该票货物为贵重物品并自动勾选"贵重物品"复选框，
且为灰色，
不可编辑；
不满足以上条件时，
该复选框为可编辑状态，
用户可根据实际情况自行选择是否勾选； 
2.	若"贵重物品"复选框被勾选，
则在【储运注意事项】中自动加入提示记录"贵重物品"字段
，若该货物为贵重物品时，
"储运注意事项"中信息显示优先级为：
贵重物品＞其他；
======================================
1.	录入的打木架货物件数和打木箱件数之和必须大于等于录入的木包装件数；
2.	系统默认标签流水号前X的货物为需要代打木架货物，
X等于录入的“打木架货物件数”和“打木箱货物件数”之和；
3.	营业员在打印标签时，
按流水号先贴要打木架或打木箱的货物；
1.	录入的打木架货物体积和打木箱货物体积之和乘以1.4必须小于等于货物总体积；
该1.4为打木架体积计算系统，可配置；
2.	营业部开单时按打完木架后的包装开，
即包装中含“木架/木箱”，
开单件数为货物打木架/木箱前的实际件数（防止丢货），
尺寸和重量按照以下公式计算：
1.1	整票货物代打时：开单体积=代打货物体积*1.4；
开单重量=所有货物重量+代打货物体积*42；
1.2	部分货物代打时，
开单体积=代打货物体积*1.4+未打木架货物体积；
开单重量=所有货物重量+代打货物体积*42。
即：营业部按照代打货物未打木架之前体积的1.4倍来开单收费，
重量另加，
单票中未打木架的货物的体积和重量不变；
1.3	例如：一票货物需全部代打，货物体积为1个方，
重量为100KG，则开单体积为1.4个方，
开单重量为100+1*42=142KG，
收取客户包装费为150*1.4=210元；
1.4	需要加托时，仍按照50元/个另外收取费用，
托的重量和体积不再另加；
营业部不需要再更改由于打木架引起重量和体积的变化；
3.	打木架要在“对内备注”中备注“代打木架/木箱”，
特殊要求（特别是合打情况）必须在对内备注和A4纸上都注明，
例如：货物1、2、3合打成一件等；
4.	开单件数为代打木架前货物实际件数，
包装为打木架后的包装，打木架后件数发生变化后，
需及时更改件数；
=======================================
1.8.1	录入货物信息
字段名称 	说明 	输入限制	输入项提示文本	长度	是否必填	备注
货物名称		文本		100	是	
货物总件数		数字		4	是	
货物总重量		数字		8	是	
货物尺寸		数字、符号		500	否	
货物总体积		数字		8	是	
货物包装		数字、文本		4	是	
货物类型		选择框		10	否	
贵重物品		选择框		1	否	
=======================================
1.8.2	代打木架信息录入
字段名称 	说明 	输入限制	输入项提示文本	长度	是否必填	备注
代打部门		文本		20	是	
打木架货物件数		数字		4	是	
代打木架要求		文本		100	是	
打木架货物尺寸		数字、符号		500	否	
打木架货物体积		数字		8	是	
打木箱货物件数		数字		4	是	
代打木箱要求		文本		100	是	
打木箱货物尺寸		数字、符号		500	否	
打木箱货物体积		数字		8	是	
==========================================
使用量	每天处理的运单约为1000000单
2012年全网估计用户数	营业员数量约10000名
响应要求（如果与全系统要求 不一致的话）	系统一般要求
使用时间段	营业部、集中开单小组上班时间
高峰使用时间段	营业部：16：00-20：00
集中开单小组：21：00-次日4：00
============================================
根据电话号码带出客户信息，
仅在客户名称为空的前提下才会有效。
即意味着由其他方式带出客户信息后，
修改电话号码并不会触发重新的检索。
==========================================
1.	使用电话号码和手机进行匹配，
如果是唯一匹配一条CRM客户信息时，
填充客户编码、客户名称、联系人、地址，
如果有多条需弹出选择框进行选择， 
如果查询不到CRM客户信息时，
使用FOSS三个月运单历史记录中的收货信息查询，
唯一匹配一条进行填充收货客户信息，多条进行弹窗选择，
如果都查询不到，不做其他操作
2.	但是对于电话号码匹配，只有当发货人手机、
客户名称为空时，才会用电话号码检索并弹窗显示使用手机号码、
电话号码、客户名称弹出选择框选择记录后覆盖原先记录
3.	修改联系人时，需要清空客户名称，
当清空客户名称时，会同时删除客户编码
4.	使用手机号码、
电话号码弹出选择框选择记录后覆盖原先记录
==========================================
身份证号、客户编码、客户名称、
联系人编码可以查询到全公司的客户
==========================================
本界面分为两个界面：录入收货客户信息、选择收货客户。
1.	录入收货客户信息：
界面为信息录入界面：包括：手机、电话、
发货收货联系人（发货收货部门）、发货收货人地址；
1.1	手机：发货收货人手机号码；
1.2	电话：发货收货人电话号码；
1.3	收货联系人（收货部门）：
收货客户的客户姓名，
当“运单开单”中的“开单提货方式”
为“内部带货自提”时，
“收货联系人”字段更改为“收货部门”；
1.4	收货人地址：收货客户的详细联系地址，
支持国家行政区域自动过滤；
1.5	客户名称
1.6	客户编码
2.	选择收货客户界面：
界面为选择客户信息界面：包括两部分：
客户信息列表区域、功能按钮区域；
2.1.	客户信息列表区域：
包括：联系人、手机、电话、
地址（规范化地址和详细地址）；
2.2.	功能按钮区域：
包括：确定、取消；
3.	    选择热门城市界面
   界面信息包含人热门城市
4.	选择省份界面
   界面信息包含省份
5.	选择城市界面
           界面信息保护城市
6.	选择区县界面
           界面信息保护区县
==============================================
1.6.1	录入
序号	基本步骤	相关数据	补充步骤
1	录入手机号码		
1.	系统自动查询CRM系统中对应手机号码绑定的客户信息，
如果有弹窗，
弹窗操作见扩展1a，和如果没有，
弹出FOSS历史开单记录中对应手机号码绑定的客户信息，
并弹窗，弹窗操作见扩展1b；
2.	规则-请参见系统规则SR1、SR5、SR6；
2	录入电话号码		
1.	如果手机号码没有填写，
系统自动查询CRM系统中对应电话号码绑定的客户信息，
如果有弹窗，
弹窗操作见扩展2a，
如果没有，
弹出FOSS历史开单记录中对应手机号码绑定的客户信息，
并弹窗，弹窗操作见扩展2b；
1.	1、系统自动查询CRM系统中对应电话号码绑定的
客户信息和FOSS历史开单记录中对应手机号码绑定的客户信息，
并弹窗，弹窗操作参见扩展2a；
2.	规则-请参见系统规则
SR1、SR5 、SR6；
------------------------------------
3	录入收货联系人（收货部门）		
1.	规则-请参见系统规则SR2、SR3；
4	录入收货人地址		
1.	提供下拉框选择输入，
系统自动过滤输入的行政区下一级行政级的字段；
2.	地址在系统后台通过GIS系统进行匹配，
如果是禁行区域，地址颜色为红色，
如果是进仓区域，地址颜色为黄色
3.	规则-请参见系统规则SR4；
===================================
1.6.2	扩展
序号	扩展事件	相关数据	备注
1a	
当录入的手机号码在CRM系统中有手机号码绑定的客户信息，
则自动弹窗并显示手机号码为录入的手机号的所有客户信息，
营业员选择录入一条记录，并确定；
选择的客户信息自动带入收货客户信息中；
当光标焦点移至录入手机号码时，
系统自动调用CRM系统对应发货客户的历史发货记录，
并自动弹窗显示所有该发货客户的历史发货记录；
营业员选择一条记录，并确定，
选择的客户信息自动带信收货客户信息中；
	客户信息	1.	
	规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则；
2.	规则-请参见系统规则SR5 、SR6；
1.	规则-请参见系统规则SR5；
1b	当录入的手机号码在CRM系统中没有手机号码绑定的客户信息时，
则如果该客户在这3个月有发过货，
则弹出历史收货记录自动弹窗并显示手机号码为录入的手机号的所有客户信息，
营业员选择录入一条记录，并确定；选择的客户信息自动带入收货客户信息中；	
客户信息	1.	规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则；
2.	规则-请参见系统规则SR5 、SR6；

2a2a	当录入的电话号码在CRM系统中有电话号码绑定的客户信息，
则自动弹窗并显示电话号码为录入的电话号码的所有客户信息，
营业员选择录入一条记录，并确定；
选择的客户信息自动带入收货客户信息中；
当录入的电话号码在CRM系统中有电话号码绑定的客户信息，
则自动弹窗并显示电话号码为录入的电话号码的所有客户信息，
营业员选择录入一条记录，并确定；选择的客户信息自动带入收货客户信息中；	
客户信息客户信息	1.	规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则；
2.	规则-请参见系统规则SR5 、SR6；
1.	规则-请参见系统用例SUC-492中的“1.6.2扩展2a”的规则；
2.	规则-请参见系统规则SR6；
==============================================
2b	当录入的电话号码在CRM系统中没有电话号码绑定的客户信息时，
如果该客户在这3个月有发过货，则弹出历史收货记录，营业员选择录入一条记录，
并确定；选择的客户信息自动带入收货客户信息中；	客户信息	1.
	规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则；
2.	规则-请参见系统规则SR5 、SR6；
	==========================
1.7	业务规则
序号	描述
SR1	1.	收货客户手机号码及固定电话至少提供一个，
手机号码只能为数字并且为11位，固定电话号码只能为数字，
且可添加多个；
SR2	1.	当“运单开单”中的“开单提货方式”为“内部带货自提”时，
“收货联系人”字段更改为“收货部门”；
SR3	1.	若为公司内部带货，
则收货客户信息中的收货部门名称必须与OA系统中组织架构名称保持一致；
SR4	1.	客户详细地址必填至乡/镇，
且乡镇下一级内容不能为空；

2.	当鼠标点击规范化地址文本框时，
显示如下图片，
包含热门城市、省份、城市、县区，选择热门城市，
会直接跳到区县，现在省份后自动跳到城市，
选择城市后自动跳到区县（必须选择完上一级行政区域后，
才能选择下一行政区域），选择完区县后，
会把规范化地址显示在规范化文本框内，
例如：江苏省-苏州市-相城区


3.	地址可以进行拼音和首写字母进行匹配，
例如输入“GZ”会在规范化地址文本框下面显示 ；
匹配时可带出城市、区、
县等符合的信息，该设计来自官网，具体可以参考官网


4.	当提货方式含“自提”时，收货人地址为非必填项；
SR5	1.	使用电话号码和手机进行匹配，
如果是唯一匹配一条CRM客户信息时，
填充客户编码、客户名称、联系人、地址，
如果有多条需弹出选择框进行选择，
 如果查询不到CRM客户信息时，
 使用FOSS三个月运单历史记录中的收货信息查询，
 唯一匹配一条进行填充收货客户信息，
 多条进行弹窗选择，如果都查询不到，
 不做其他操作
2.	但是对于电话号码匹配，
只有当发货人手机、
客户名称为空时，
才会用电话号码检索并弹窗显示
3.	使用手机号码、
电话号码、
客户名称弹出选择框选择记录后覆盖原先记录
4.	修改联系人时，
需要清空客户名称，
当清空客户名称时，
会同时删除客户编码
5.	使用手机号码、
电话号码弹出选择框选择记录后覆盖原先记录
6.	点击客户名称查询控件，
弹出查询信息:窗口SUC-424-查找会员
7.	身份证号、客户编码、
客户名称、联系人编码可以查询到全公司的客户
	
1.	只有当收货人手机为空，
且发货客户信息已录入时，才会检索并弹窗显示；
2.	若未查询到历史记录，
则无法提示；
3.	通过选择录入的收货人信息均可修改；
4.	使用号码进行匹配，
如果是唯一匹配一条CRM客户信息时，填充客户编码和客户名称，如果有多条不做操作
SR6	1.	通过选择录入收货发货信息，
同时带出对应的目的站和提货网点信息；
2.	带出目的站仍然使用GIS进行查询，
并以GIS返回为准；
3.	若GIS未查询得出，
则以历史开单的目的站和提货网点信息为准；
================================
1.8	数据元素
1.8.1	录入收货客户信息
字段名称 	说明 	输入限制	输入项提示文本	长度	是否必填	备注
手机		数字		11	二者至少填一	
电话		数字		25		当“运单开单”中的“开单提货方式”为“内部带货自提”时，电话输入栏自动生成“[******]”，代替输入号码信息
收货联系人（收货部门）		文本		80	是	
收货人地址		下拉框、文本		100	是	当提货方式含“自提”时，收货人地址为非必填项；
客户名称		文本		80	否	不可修改
客户编码		文本		80	否	不可修改
--------------------------------------
1.8.2	选择收货客户
字段名称 	说明 	输入限制	输入项提示文本	长度	是否必填	备注
客户名称		文本		80		
手机		文本		11		
电话		文本		25		
收货联系人（收货部门）		文本		80		
收货人地址		文本		100		
联系人ID		文本		20		
联系人编码		文本		20		
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1.9	非功能性需求
使用量	每天处理的运单约为1000000单
2012年全网估计用户数	营业员数量约10000名
响应要求（如果与全系统要求 不一致的话）	系统一般要求
使用时间段	营业部、集中开单小组上班时间
高峰使用时间段	营业部：16：00-20：00
集中开单小组：21：00-次日4：00
=======================================
1.10	接口描述
接口名称 	对方系统（外部系统或内部其他模块）	接口描述
查询客户资料	CRM客户管理模块	
FOSS能过手机号或其它条件查询客户资料信息，
包括：客户名称、客户编码、发货收货联系人、
发货收货人地址等
查询公司架构	OA系统组织架构管理	
当开单提货方式为内部带货自提时，
FOSS向OA请求验证发货收货部门的有效性
 */

/**--------------------------------------
 * 营业员点击运单离线开单，
 * 进入运单离线开单界面。
 本界面为离线录入货物信息。
 1.	录入货物信息：
 录入信息包括：货物名称、总件数、总重量、
 货物尺寸、总体积、货物包装、货物类型、是否贵重物品；
 1.1	货物名称：货物的名称；
 1.2	总件数：收货时货物的总件数；
 1.3	总重量：收货时货物的总重量；
 1.4	货物尺寸：收货时货物的尺寸；
 1.5	总体积：收货时货物的总体积；
 1.6	货物包装：货物的包装，其包装总件数等于打木架和打木箱后的总件数；
 1.7	货物类型：
 1.7.1	运输类型为汽运时，
 货物类型为公司规则的分拣条件的类型，
 为唯一选择框，包括：A、B；
 1.7.2	运输类型为空运时，
 货物类型为下拉选择框，
 默认显示为普货，
 目前只这一个分类，
 该类型可做配置；
 1.8	是否贵重物品：
 货物是否为公司规则的贵重物品，
 为选择框；
 */
/**--------------------------------------
 * 1.	若货物为违禁品，
 * 	则系统自动提示“货物为违禁品，不可开单！”；
 2.	若货物为拒收品，
 则系统自动提示“货物为拒收品，不可开单！”；
 3.	若货物为贵重物品，
 则系统自动勾选“贵重物品”，
 且不可修改；
 4.	若货物为限保物品，
 则系统自动限定保价金额，且不可修改，
 并提示“货物为限保物品”；
 5.	违禁品、拒收品、
 贵重物品、限保物品（含保价金额上限）
 具体类型可在系统中进行配置；
 1.	货物重量单位为千克
 */
/**--------------------------------------
 * 1.	货物尺寸为计算器输入，
 * 显示为输入文本；
2.	尺寸计算单位为厘米，
尺寸计算出数据后转换单位为立方米后，
在货物体积中显示数据；例如：
尺寸录入为：50*50*20，
则体积显示数据为：0.05；
 */
/**--------------------------------------
 * 1.	货物体积单位为立方米；
2.	营业员可以修改通过尺寸计算器
计算得出的体积数据；
3.	系统设置货物重量体积比区间值（该值由基础资料配置），
在运单提交时，
系统自动对重量体积比进行校验：
即重量体积比X=重量/体积；
3.1	当X不在设置的区间中，
弹出提示“请确认录入的重量体积是否准确！”；
（该弹窗有两个按钮：确定、取消）点击确定时，
弹出离线开单确认运单信息界面；点击取消，
点返回运单录入界面；
3.2	当X在区间中，无提示；
直接进入确认运单信息界面；
--------------------------------------
 */
/**--------------------------------------
 * 1.	纸包装件数默认显示数值等于货物总件数，
 * 营业员可以修改各包装的件数；
 * 系统自动在录入下一个包装前计算显示剩余未录入的件数，
 * 例：某票货物为50件，则自动显示纸包装50，
 * 在营业员修改纸包装为20时，木包装自动显示为30，
 * 在营业员修改木包装为10时，
 * 纤包装自动显示为20，该过程中未录入包装数值的默认显示为0；
2.	货物包装总件数小于等于货物总件数；
 */
/**--------------------------------------
 * 1.	离线开单时，不录入代打木架信息；
 * 当木包装件数大于等于1时，系统不提示任何信息，
 * 也不弹出代打木架录入界面；
2.	离线开单的代打木架信息在离线开单提交时，
系统校验提醒；
 */
/**
 * 1.	运输类型为汽运时，货物类型为唯一选择项；即，
 * 非A即B；默认不可勾选，
 * 只有当走货路由经过特定的城市时需要录入货物类型,
 * 特定城市可在系统中进行配置；
2.	运输类型为空
默认显示为普货，目前只有这一个分类，该类型可做配置；
--------------------------------------
 */
/**--------------------------------------
 * 1.	系统根据货物名称匹配生成的勾选贵重物品，
 * 营业员不可去掉勾选；
2.	营业员也可以主动勾选贵重物品；
3.	件数等于1、体积小于等于0.05个方、
报价声明价值大于等于10000元，为贵重物品；
系统自动勾选贵重物品，
营业员可修改是否勾选；
4.	件数大于等于2时，平均体积（体积/件数）
小于等于0.5方，平均声明价值（保价声明价值/件数）
大于等于10000元，为贵重物品；
系统自动勾选贵重物品，
营业员可修改是否勾选；
1.	营业部开单时按打完木架后的包装开，
即包装中含“木架/木箱”，
开单件数为货物打木架/木箱前的实际件数（防止丢货），
尺寸和重量按照以下公式计算：
1.1	整票货物代打时：
开单体积=代打货物体积*1.4；
开单重量=所有货物重量+代打货物体积*42；
1.2	部分货物代打时，
开单体积=代打货物体积*1.4+未打木架货物体积；
开单重量=所有货物重量+代打货物体积*42。
即：营业部按照代打货物未打木架之前体积的1.4倍来开单收费，
重量另加，单票中未打木架的货物的体积和重量不变；
1.3	例如：一票货物需全部代打，
货物体积为1个方，重量为100KG，
则开单体积为1.4个方，
开单重量为100+1*42=142KG，
收取客户包装费为150*1.4=210元；
1.4	需要加托时，仍按照50元/个另外收取费用，
托的重量和体积不再另加；
营业部不需要再更改由于打木架引起重量和体积的变化；
2.	开单件数为代打木架前货物实际件数，
包装为打木架后的包装，
打木架后件数发生变化后，
需及时更改件数；
--------------------------------------
 */

/**--------------------------------------
 * 每天处理的运单约为1000000单
营业员数量约10000名
系统一般要求
营业部、集中开单小组上班时间
营业部：16：00-20：00
集中开单小组：21：00-次日4：00
 */

/**--------------------------------------
 * 本界面为录入增值服务信息。
界面主要分为三个部分：
录入增值服务、
录入包装费、
查询其它费用。
1.	录入增值服务
录入增值服务分为两个部分：
录入增值服务信息界面、
录入其它费用列表；
1.1	录入增值服务信息界面
录入增值服务信息界面包括：
1.1.1	保价声明价值；
1.1.2	保价费率：
保价费率可由基础资料配置，
可按出发城市区域，
出发营业部等；
1.1.3	保价费；
1.1.4	代收货款；
1.1.5	代收费率；
1.1.6	代收手续费；
1.1.7	退款类型：
包括三日退、
退日退、
审核退，
默认三日退；
1.1.8	包装费；
1.1.9	装卸费；
1.1.10	送货费；
1.1.11	其它费用合计；
1.1.12	返单类别：
包括无需返单、
原件签收单返回、
传真件签收单返回、
扫描件返回，
默认无需返单；
1.1.13	预付费保密；
1.2	录入其它费用列表
录入其它费用列表包括：
1.2.1	费用名称；
1.2.2	费用金额；
1.2.3	新增其它费用：
功能按钮；
1.2.4	删除其它费用：
功能按钮；
2.	录入包装费
其界面和界面和需求详见系统用例“DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息”中“录入包装费”；
3.	查询其它费用
其界面和界面和需求详见系统用例“DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息”中“查询其它费用”；
--------------------------------------
 */
/**
 * 录入保价声明价值
 * 1.	系统根据录入的保价声明价值和系统自动获得的保价费率计算保价费；
 * 2.	规则-请参见系统用例“DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息”中系统规则SR1、SR3；
 * 录入代货货款
 * 1.	系统根据录入的代收货款和系统自动获得的代收费率计算代收手续费；
2.	规则-请参见系统用例“DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息”中系统规则SR2、SR3；
录入退款类型
1.	规则-请参见系统用例“DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息”中系统规则SR2、SR4；
2.	规则-请参见系统规则SR1；
录入包装费：焦点移至包装费时，
自动弹出包装费录入界面
1.	规则-请参见系统用例“DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息”中系统规则SR5；
录入装卸费
 * 1.	规则-请参见系统用例“DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息”中系统规则SR6；
 * 录入送货费
 * 1.	规则-请参见系统用例“DP-FOSS-接送货系统用例-运单生成-
 * 确认承运信息-录入增值服务信息”中系统规则SR7；
 * 录入其它费用：点击新增其它费用，增加新的其它费用列后，点击放大镜，弹出其它费用查询列表；
 * 运单生成-确认承运信息-录入增值服务信息”中系统规则SR8；
 * 录入返单类别
 * 1.	规则-请参见系统用例“DP-FOSS-接送货系统用例
 * -运单生成-确认承运信息-录入增值服务信息”中系统规则SR9；
 * 录入预付费保密
 * 1.	规则-请参见系统用例“DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息”中系统规则
 * SR10,SR11,SR12；
 * 1.	离线开单中不生成代收货款退款收银人信息，
 * 且不录入；
 * 其代收货款的退款收银人信息在有线后提交运单时录入；
 * 字段名称 	说明 	输入限制	输入项提示文本	长度	是否必填	备注
 * 保价声明价值		数字		8	是	
保价费率		数字、符号		8		
保价费		数字		8		系统自动生成
代收货款		数字		8	是	
代收费率		数字、符号		8		
代收手续费		数字		8		系统自动生成
退款类型		下拉框		3	是	
包装费		数字		8	是	
装卸费		数字		8	是	
送货费		数字		8	是	
其它费用合计		数字		8	是	
返单类别		下拉框		10	是	
预付费保密		复选框		1	否	
--------------------------------------
使用量	每天处理的运单约为1000000单
2012年全网估计用户数	营业员数量约10000名
响应要求（如果与全系统要求 不一致的话）	系统一般要求
使用时间段	营业部、集中开单小组上班时间
高峰使用时间段	营业部：16：00-20：00
集中开单小组：21：00-次日4：00
--------------------------------------
1.10	接口描述
输入的尺寸可以进行加减例如：1*1*1*5+2*2*2*3-0.5*0.5*0.5*
体积为空时，录入尺寸后，
填充体积。
当尺寸修改时，
体积随之变处。
当修改体积时，
尺寸不变化。 

货物包装总件数小于等于货物总件数，
如果大于总件数，
提示：“包装件数不能大于总件数”
--------------------------------------
贵重物品规则变更： 
1.修改现有系统对"贵重物品"的判断条件如下： 
a. 单票单件货物，
体积≤0.05立方且保价声明价值≥1万元； 
b. 单票多件货物，
平均单件体积≤0.2立方且平均单件保价声明价值≥1万元；
（注：平均单件体积=开单总体积÷开单件数，
平均单件保价=开单保价声明价值÷开单件数） 
c. 高保价货物，
单票货物保价≥10万元； 
满足以上任意一个条件时，
系统将判定该票货物为贵重物品并自动勾选"贵重物品"复选框，
且为灰色，不可编辑；不满足以上条件时，
该复选框为可编辑状态，
用户可根据实际情况自行选择是否勾选； 
2.若"贵重物品"复选框被勾选，
则在【储运注意事项】中自动加入提示记录"贵重物品"字段，
若该货物为贵重物品时，
"储运注意事项"中信息显示优先级为：贵重物品＞其他； 
--------------------------------------
尺寸录入框可以不录入件数，
如件数为1时。
因此录入框即可以输入10*10*10，
又可以输入10*10*10*1
进入该页面时，木架和木箱都赋初始值0，
仍保持必填，操作员根据实际情况改，
选择木架或木箱或两者都选择后则该值不能为0
--------------------------------------
	ISSUE-1105
1.运单开单时，货物的件数、
重量及体积文本框是必填项，
默认值为空； 
2.件数只能是大于等于1的整数，
重量及体积只能大于0。
体积、重量这种过程数据保留两位小数
--------------------------------------
前置条件		1.	贵重物品基础资料
2.	违禁物品基础资料
3.	分拣目的站基础资料
后置条件		1.	打木架录入
2.	运单收银
--------------------------------------
营业员点击运单开单，进入运单开单界面。
本界面为录入货物信息。
界面主要分为两个部分：录入货物信息、代收木架信息录入。
1.	录入货物信息：
录入信息包括：货物名称、总件数、
总重量、货物尺寸、
总体积、货物包装、
货物类型、是否贵重物品；
1.1	货物名称：
货物的名称；
1.2	总件数：
收货时货物的总件数；
1.3	总重量：
收货时货物的总重量；
1.4	货物尺寸：
收货时货物的尺寸；
1.5	总体积：
收货时货物的总体积；
1.6	货物包装：
货物的包装，
其包装总件数等于打木架和打木箱后的总件数；
1.7	货物类型：
1.7.1	运输类型为汽运时，
货物类型为公司规则的分拣条件的类型， 
为唯一选择框，包括：A、B；
1.7.2	运输类型为空运时，
货物类型为下拉选择框，
默认显示为普货，
目前只这一个分类，
该类型可做配置；
1.8	是否贵重物品：
货物是否为公司规则的贵重物品，
为选择框；
2.	代打木架信息录入；
当包装木的件数大于等于1时，
自动弹出对话框：“是否收入代打木架？”，是，
则进入场代打木架信息录入界面；
录入信息包括：代打部门、打木架货物件数、
代打木架要求、打木架货物尺寸、打木架货物体积、
打木箱货物件数、代打木箱要求、打木箱货物尺寸、打木架货物体积；
2.1	代打部门：
代打木箱或木架的部门名称；
2.2	打木架货物件数：
需要代打木架的货物件数；
2.3	代打木架要求：
代打木架的要求，
如“1和2合打，3、4分开打”；
2.4	打木架货物尺寸：
需要代打木架的货物尺寸；
2.5	打木架货物体积：
需要代打木架的货物体积；
2.6	打木箱货物件数：
需要代打木架的货物件数；
2.7	代打木箱要求：
代打木箱的要求，如“5和6合打，加一个木托”；
2.8	打木箱货物尺寸：
需要代打木箱的货物尺寸；
2.9	打木箱货物体积：
需要代打木箱的货物体积；
2.10	功能按钮：
确定、关闭、重置；k
--------------------------------------------------
1.6.1	录入货物信息
序号	基本步骤	相关数据	补充步骤
1	录入货物名称		
	1.	系统自动匹配违禁品、贵重物品、限保物品基础资料，生成规则；
2.	规则-请参见系统规则SR1；
2	录入总件数		
	规则-请参见系统规则SR2
3	录入总重量		
	1.	规则-请参见系统规则SR2、SR11；
4	录入货物尺寸		
	1.	规则-请参见系统规则SR3、SR4；
5	录入总体积		
	1.	规则-请参见系统规则SR2、SR3、SR4、SR10；
6	录入货物包装		
	1.	当木包装大于等于1时，
		系统校验出发城市和对应目的站的走货路由中是否有有打木架功能的部门，
		若有，则提醒营业员“是否收入代打木架？”，是，
		则进入场代打木架信息录入界面”，
		并显示第一个有打木架功能的部门名称；
		若走货路由中无有打木架功能的部门，
		则不提示“是否收入代打木架？”；
2.	规则-请参见系统规则SR5、SR6、SR10；
7	录入货物类型		
	1.	规则-请参见系统规则SR7；
8	录入是否贵重货物		
	1.	规则-请参见系统规则SR8；
9       录入打木箱货物体积		
	1.	规则-请参见系统规则SR3、SR4、SR10；
	-----------------------------------
	1.	若货物为违禁品，
	则系统自动提示“货物为违禁品，不可开单！”；
2.	若货物为贵重物品，
则系统自动勾选“贵重物品”，
且不可修改；
3.	若货物为限保物品，
则系统自动限定保价金额，
且不可修改，
并提示“货物为限保物品”；
4.	违禁品、
拒收品、
贵重物品、
限保物品（含保价金额上限）
具体类型可在系统中进行配置；
1.	货物重量单位为千克；
2.	运单开单时，
货物的件数、
重量及体积文本框是必填项，
默认值为空； 
3.	件数只能是大于等于1的整数，
重量及体积只能大于0。
4.	体积、
重量这种过程数据保留两位小数
1.	尺寸录入文本框，
支持'长*宽*高*件数+长*宽*高*（即多个尺寸相加）的计算；
2.	如果件数是1，
则不强制在录入时要“*1”；
3.	货物尺寸为计算器输入，
输入的尺寸可以进行加减，
例如：1*1*1*5+2*2*2*3-0.5*0.5*0.5，
显示为输入文本；
4.	尺寸计算单位为厘米，
尺寸计算出数据后转换单位为立方米后，
在货物体积中显示数据；
例如：尺寸录入为：50*50*20（其中20为件数），
则体积显示数据为：0.05； 
5.	体积为空时，
录入尺寸后，填充体积。
当尺寸修改时，体积随之变处。
当修改体积时，尺寸不变化。
6.	体积初始值为“0”，
仍保持必填，
操作员根据实际情况改，
选择木架或木箱或两者都选择后则该值不能为0

1.	货物体积单位为立方米；
2.	营业员可以修改通过尺寸计算器计算得出的体积数据；
3.	系统设置货物重量体积比区间值（该值由基础资料配置），
在运单提交时，
系统自动对重量体积比进行校验：即重量体积比X=重量/体积； 
3.1	当X不在设置的区间中，
弹出提示“请确认录入的重量体积是否准确！”；
（该弹窗有两个按钮：确定、取消）点击确定时，
弹出确认运单信息界面；点击取消，点返回运单录入界面；
3.2	当X在区间中，无提示；
直接进入确认运单信息界面；
4.	录入重量体积后，
系统校验单票的重量体积及单件（平均单件）
的重量体积是否满足“修改-查询行政组织业务属性”
基础资料中的单票和单件重量体积限制；
只要该四项中有一项不满足，
则提示“XX超出提货网点限制，
请重新选择提货网点！”； 
1.	货物包装总件数小于等于货物总件数，
如果大于总件数，
提示：“包装件数不能大于总件数”；
1.	当木包装件数大于等于1时，
系统校验出发城市和对应目的站的走货路由中是否有有打木架功能的部门，
若有，则提醒营业员“是否收入代打木架？”，是，
则进入场代打木架信息录入界面”，
并显示第一个有打木架功能的部门名称；
若走货路由中无有打木架功能的部门，
则不提示“是否收入代打木架？”；
2.	当走货路由中有有打木架功能的部门为多个时，
只显示系统路由中第一有有打木架功能的部门，
且不可修改；
1.	运输类型为汽运时，
货物类型为唯一选择项；
即，非A即B；默认不可勾选，
只有当走货路由经过特定的城市时需要录入货物类型,
特定城市可在系统中进行配置；
2.	运输类型为空运时，
货物类型为下拉选择框，
默认显示为普货，
目前只有这一个分类，
该类型可做配置；
1.	贵重物品判断规则： 
a. 单票单件货物，
体积≤0.05立方且保价声明价值≥1万元； 
b. 单票多件货物，
平均单件体积≤0.2立方且平均单件保价声明价值≥1万元；
（注：平均单件体积=开单总体积÷开单件数，
平均单件保价=开单保价声明价值÷开单件数） 
c. 高保价货物，
单票货物保价≥10万元； 
满足以上任意一个条件时，
系统将判定该票货物为贵重物品并自动勾选"贵重物品"复选框，
且为灰色，
不可编辑；
不满足以上条件时，
该复选框为可编辑状态，
用户可根据实际情况自行选择是否勾选； 
2.	若"贵重物品"复选框被勾选，
则在【储运注意事项】中自动加入提示记录"贵重物品"字段
，若该货物为贵重物品时，
"储运注意事项"中信息显示优先级为：
贵重物品＞其他；
======================================
1.	录入的打木架货物件数和打木箱件数之和必须大于等于录入的木包装件数；
2.	系统默认标签流水号前X的货物为需要代打木架货物，
X等于录入的“打木架货物件数”和“打木箱货物件数”之和；
3.	营业员在打印标签时，
按流水号先贴要打木架或打木箱的货物；
1.	录入的打木架货物体积和打木箱货物体积之和乘以1.4必须小于等于货物总体积；
该1.4为打木架体积计算系统，可配置；
2.	营业部开单时按打完木架后的包装开，
即包装中含“木架/木箱”，
开单件数为货物打木架/木箱前的实际件数（防止丢货），
尺寸和重量按照以下公式计算：
1.1	整票货物代打时：开单体积=代打货物体积*1.4；
开单重量=所有货物重量+代打货物体积*42；
1.2	部分货物代打时，
开单体积=代打货物体积*1.4+未打木架货物体积；
开单重量=所有货物重量+代打货物体积*42。
即：营业部按照代打货物未打木架之前体积的1.4倍来开单收费，
重量另加，
单票中未打木架的货物的体积和重量不变；
1.3	例如：一票货物需全部代打，货物体积为1个方，
重量为100KG，则开单体积为1.4个方，
开单重量为100+1*42=142KG，
收取客户包装费为150*1.4=210元；
1.4	需要加托时，仍按照50元/个另外收取费用，
托的重量和体积不再另加；
营业部不需要再更改由于打木架引起重量和体积的变化；
3.	打木架要在“对内备注”中备注“代打木架/木箱”，
特殊要求（特别是合打情况）必须在对内备注和A4纸上都注明，
例如：货物1、2、3合打成一件等；
4.	开单件数为代打木架前货物实际件数，
包装为打木架后的包装，打木架后件数发生变化后，
需及时更改件数；
=======================================
1.8.1	录入货物信息
字段名称 	说明 	输入限制	输入项提示文本	长度	是否必填	备注
货物名称		文本		100	是	
货物总件数		数字		4	是	
货物总重量		数字		8	是	
货物尺寸		数字、符号		500	否	
货物总体积		数字		8	是	
货物包装		数字、文本		4	是	
货物类型		选择框		10	否	
贵重物品		选择框		1	否	
=======================================
1.8.2	代打木架信息录入
字段名称 	说明 	输入限制	输入项提示文本	长度	是否必填	备注
代打部门		文本		20	是	
打木架货物件数		数字		4	是	
代打木架要求		文本		100	是	
打木架货物尺寸		数字、符号		500	否	
打木架货物体积		数字		8	是	
打木箱货物件数		数字		4	是	
代打木箱要求		文本		100	是	
打木箱货物尺寸		数字、符号		500	否	
打木箱货物体积		数字		8	是	
==========================================
使用量	每天处理的运单约为1000000单
2012年全网估计用户数	营业员数量约10000名
响应要求（如果与全系统要求 不一致的话）	系统一般要求
使用时间段	营业部、集中开单小组上班时间
高峰使用时间段	营业部：16：00-20：00
集中开单小组：21：00-次日4：00
============================================
根据电话号码带出客户信息，
仅在客户名称为空的前提下才会有效。
即意味着由其他方式带出客户信息后，
修改电话号码并不会触发重新的检索。
==========================================
1.	使用电话号码和手机进行匹配，
如果是唯一匹配一条CRM客户信息时，
填充客户编码、客户名称、联系人、地址，
如果有多条需弹出选择框进行选择， 
如果查询不到CRM客户信息时，
使用FOSS三个月运单历史记录中的收货信息查询，
唯一匹配一条进行填充收货客户信息，多条进行弹窗选择，
如果都查询不到，不做其他操作
2.	但是对于电话号码匹配，只有当发货人手机、
客户名称为空时，才会用电话号码检索并弹窗显示使用手机号码、
电话号码、客户名称弹出选择框选择记录后覆盖原先记录
3.	修改联系人时，需要清空客户名称，
当清空客户名称时，会同时删除客户编码
4.	使用手机号码、
电话号码弹出选择框选择记录后覆盖原先记录
==========================================
身份证号、客户编码、客户名称、
联系人编码可以查询到全公司的客户
==========================================
本界面分为两个界面：录入收货客户信息、选择收货客户。
1.	录入收货客户信息：
界面为信息录入界面：包括：手机、电话、
发货收货联系人（发货收货部门）、发货收货人地址；
1.1	手机：发货收货人手机号码；
1.2	电话：发货收货人电话号码；
1.3	收货联系人（收货部门）：
收货客户的客户姓名，
当“运单开单”中的“开单提货方式”
为“内部带货自提”时，
“收货联系人”字段更改为“收货部门”；
1.4	收货人地址：收货客户的详细联系地址，
支持国家行政区域自动过滤；
1.5	客户名称
1.6	客户编码
2.	选择收货客户界面：
界面为选择客户信息界面：包括两部分：
客户信息列表区域、功能按钮区域；
2.1.	客户信息列表区域：
包括：联系人、手机、电话、
地址（规范化地址和详细地址）；
2.2.	功能按钮区域：
包括：确定、取消；
3.	    选择热门城市界面
   界面信息包含人热门城市
4.	选择省份界面
   界面信息包含省份
5.	选择城市界面
           界面信息保护城市
6.	选择区县界面
           界面信息保护区县
==============================================
1.6.1	录入
序号	基本步骤	相关数据	补充步骤
1	录入手机号码		
1.	系统自动查询CRM系统中对应手机号码绑定的客户信息，
如果有弹窗，
弹窗操作见扩展1a，和如果没有，
弹出FOSS历史开单记录中对应手机号码绑定的客户信息，
并弹窗，弹窗操作见扩展1b；
2.	规则-请参见系统规则SR1、SR5、SR6；
2	录入电话号码		
1.	如果手机号码没有填写，
系统自动查询CRM系统中对应电话号码绑定的客户信息，
如果有弹窗，
弹窗操作见扩展2a，
如果没有，
弹出FOSS历史开单记录中对应手机号码绑定的客户信息，
并弹窗，弹窗操作见扩展2b；
1.	1、系统自动查询CRM系统中对应电话号码绑定的
客户信息和FOSS历史开单记录中对应手机号码绑定的客户信息，
并弹窗，弹窗操作参见扩展2a；
2.	规则-请参见系统规则
SR1、SR5 、SR6；
------------------------------------
3	录入收货联系人（收货部门）		
1.	规则-请参见系统规则SR2、SR3；
4	录入收货人地址		
1.	提供下拉框选择输入，
系统自动过滤输入的行政区下一级行政级的字段；
2.	地址在系统后台通过GIS系统进行匹配，
如果是禁行区域，地址颜色为红色，
如果是进仓区域，地址颜色为黄色
3.	规则-请参见系统规则SR4；
===================================
1.6.2	扩展
序号	扩展事件	相关数据	备注
1a	
当录入的手机号码在CRM系统中有手机号码绑定的客户信息，
则自动弹窗并显示手机号码为录入的手机号的所有客户信息，
营业员选择录入一条记录，并确定；
选择的客户信息自动带入收货客户信息中；
当光标焦点移至录入手机号码时，
系统自动调用CRM系统对应发货客户的历史发货记录，
并自动弹窗显示所有该发货客户的历史发货记录；
营业员选择一条记录，并确定，
选择的客户信息自动带信收货客户信息中；
	客户信息	1.	
	规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则；
2.	规则-请参见系统规则SR5 、SR6；
1.	规则-请参见系统规则SR5；
1b	当录入的手机号码在CRM系统中没有手机号码绑定的客户信息时，
则如果该客户在这3个月有发过货，
则弹出历史收货记录自动弹窗并显示手机号码为录入的手机号的所有客户信息，
营业员选择录入一条记录，并确定；选择的客户信息自动带入收货客户信息中；	
客户信息	1.	规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则；
2.	规则-请参见系统规则SR5 、SR6；

2a2a	当录入的电话号码在CRM系统中有电话号码绑定的客户信息，
则自动弹窗并显示电话号码为录入的电话号码的所有客户信息，
营业员选择录入一条记录，并确定；
选择的客户信息自动带入收货客户信息中；
当录入的电话号码在CRM系统中有电话号码绑定的客户信息，
则自动弹窗并显示电话号码为录入的电话号码的所有客户信息，
营业员选择录入一条记录，并确定；选择的客户信息自动带入收货客户信息中；	
客户信息客户信息	1.	规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则；
2.	规则-请参见系统规则SR5 、SR6；
1.	规则-请参见系统用例SUC-492中的“1.6.2扩展2a”的规则；
2.	规则-请参见系统规则SR6；
==============================================
2b	当录入的电话号码在CRM系统中没有电话号码绑定的客户信息时，
如果该客户在这3个月有发过货，则弹出历史收货记录，营业员选择录入一条记录，
并确定；选择的客户信息自动带入收货客户信息中；	客户信息	1.
	规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则；
2.	规则-请参见系统规则SR5 、SR6；
	==========================
1.7	业务规则
序号	描述
SR1	1.	收货客户手机号码及固定电话至少提供一个，
手机号码只能为数字并且为11位，固定电话号码只能为数字，
且可添加多个；
SR2	1.	当“运单开单”中的“开单提货方式”为“内部带货自提”时，
“收货联系人”字段更改为“收货部门”；
SR3	1.	若为公司内部带货，
则收货客户信息中的收货部门名称必须与OA系统中组织架构名称保持一致；
SR4	1.	客户详细地址必填至乡/镇，
且乡镇下一级内容不能为空；

2.	当鼠标点击规范化地址文本框时，
显示如下图片，
包含热门城市、省份、城市、县区，选择热门城市，
会直接跳到区县，现在省份后自动跳到城市，
选择城市后自动跳到区县（必须选择完上一级行政区域后，
才能选择下一行政区域），选择完区县后，
会把规范化地址显示在规范化文本框内，
例如：江苏省-苏州市-相城区


3.	地址可以进行拼音和首写字母进行匹配，
例如输入“GZ”会在规范化地址文本框下面显示 ；
匹配时可带出城市、区、
县等符合的信息，该设计来自官网，具体可以参考官网


4.	当提货方式含“自提”时，收货人地址为非必填项；
SR5	1.	使用电话号码和手机进行匹配，
如果是唯一匹配一条CRM客户信息时，
填充客户编码、客户名称、联系人、地址，
如果有多条需弹出选择框进行选择，
 如果查询不到CRM客户信息时，
 使用FOSS三个月运单历史记录中的收货信息查询，
 唯一匹配一条进行填充收货客户信息，
 多条进行弹窗选择，如果都查询不到，
 不做其他操作
2.	但是对于电话号码匹配，
只有当发货人手机、
客户名称为空时，
才会用电话号码检索并弹窗显示
3.	使用手机号码、
电话号码、
客户名称弹出选择框选择记录后覆盖原先记录
4.	修改联系人时，
需要清空客户名称，
当清空客户名称时，
会同时删除客户编码
5.	使用手机号码、
电话号码弹出选择框选择记录后覆盖原先记录
6.	点击客户名称查询控件，
弹出查询信息:窗口SUC-424-查找会员
7.	身份证号、客户编码、
客户名称、联系人编码可以查询到全公司的客户
	
1.	只有当收货人手机为空，
且发货客户信息已录入时，才会检索并弹窗显示；
2.	若未查询到历史记录，
则无法提示；
3.	通过选择录入的收货人信息均可修改；
4.	使用号码进行匹配，
如果是唯一匹配一条CRM客户信息时，填充客户编码和客户名称，如果有多条不做操作
SR6	1.	通过选择录入收货发货信息，
同时带出对应的目的站和提货网点信息；
2.	带出目的站仍然使用GIS进行查询，
并以GIS返回为准；
3.	若GIS未查询得出，
则以历史开单的目的站和提货网点信息为准；
================================
1.8	数据元素
1.8.1	录入收货客户信息
字段名称 	说明 	输入限制	输入项提示文本	长度	是否必填	备注
手机		数字		11	二者至少填一	
电话		数字		25		当“运单开单”中的“开单提货方式”为“内部带货自提”时，电话输入栏自动生成“[******]”，代替输入号码信息
收货联系人（收货部门）		文本		80	是	
收货人地址		下拉框、文本		100	是	当提货方式含“自提”时，收货人地址为非必填项；
客户名称		文本		80	否	不可修改
客户编码		文本		80	否	不可修改
--------------------------------------
1.8.2	选择收货客户
字段名称 	说明 	输入限制	输入项提示文本	长度	是否必填	备注
客户名称		文本		80		
手机		文本		11		
电话		文本		25		
收货联系人（收货部门）		文本		80		
收货人地址		文本		100		
联系人ID		文本		20		
联系人编码		文本		20		
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1.9	非功能性需求
使用量	每天处理的运单约为1000000单
2012年全网估计用户数	营业员数量约10000名
响应要求（如果与全系统要求 不一致的话）	系统一般要求
使用时间段	营业部、集中开单小组上班时间
高峰使用时间段	营业部：16：00-20：00
集中开单小组：21：00-次日4：00
=======================================
1.10	接口描述
接口名称 	对方系统（外部系统或内部其他模块）	接口描述
查询客户资料	CRM客户管理模块	
FOSS能过手机号或其它条件查询客户资料信息，
包括：客户名称、客户编码、发货收货联系人、
发货收货人地址等
查询公司架构	OA系统组织架构管理	
当开单提货方式为内部带货自提时，
FOSS向OA请求验证发货收货部门的有效性
 */

/**--------------------------------------
 * 营业员点击运单离线开单，
 * 进入运单离线开单界面。
 本界面为离线录入货物信息。
 1.	录入货物信息：
 录入信息包括：货物名称、总件数、总重量、
 货物尺寸、总体积、货物包装、货物类型、是否贵重物品；
 1.1	货物名称：货物的名称；
 1.2	总件数：收货时货物的总件数；
 1.3	总重量：收货时货物的总重量；
 1.4	货物尺寸：收货时货物的尺寸；
 1.5	总体积：收货时货物的总体积；
 1.6	货物包装：货物的包装，其包装总件数等于打木架和打木箱后的总件数；
 1.7	货物类型：
 1.7.1	运输类型为汽运时，
 货物类型为公司规则的分拣条件的类型，
 为唯一选择框，包括：A、B；
 1.7.2	运输类型为空运时，
 货物类型为下拉选择框，
 默认显示为普货，
 目前只这一个分类，
 该类型可做配置；
 1.8	是否贵重物品：
 货物是否为公司规则的贵重物品，
 为选择框；
 */
/**--------------------------------------
 * 1.	若货物为违禁品，
 * 	则系统自动提示“货物为违禁品，不可开单！”；
 2.	若货物为拒收品，
 则系统自动提示“货物为拒收品，不可开单！”；
 3.	若货物为贵重物品，
 则系统自动勾选“贵重物品”，
 且不可修改；
 4.	若货物为限保物品，
 则系统自动限定保价金额，且不可修改，
 并提示“货物为限保物品”；
 5.	违禁品、拒收品、
 贵重物品、限保物品（含保价金额上限）
 具体类型可在系统中进行配置；
 1.	货物重量单位为千克
 */
/**--------------------------------------
 * 1.	货物尺寸为计算器输入，
 * 显示为输入文本；
2.	尺寸计算单位为厘米，
尺寸计算出数据后转换单位为立方米后，
在货物体积中显示数据；例如：
尺寸录入为：50*50*20，
则体积显示数据为：0.05；
 */
/**--------------------------------------
 * 1.	货物体积单位为立方米；
2.	营业员可以修改通过尺寸计算器
计算得出的体积数据；
3.	系统设置货物重量体积比区间值（该值由基础资料配置），
在运单提交时，
系统自动对重量体积比进行校验：
即重量体积比X=重量/体积；
3.1	当X不在设置的区间中，
弹出提示“请确认录入的重量体积是否准确！”；
（该弹窗有两个按钮：确定、取消）点击确定时，
弹出离线开单确认运单信息界面；点击取消，
点返回运单录入界面；
3.2	当X在区间中，无提示；
直接进入确认运单信息界面；
--------------------------------------
 */
/**--------------------------------------
 * 1.	纸包装件数默认显示数值等于货物总件数，
 * 营业员可以修改各包装的件数；
 * 系统自动在录入下一个包装前计算显示剩余未录入的件数，
 * 例：某票货物为50件，则自动显示纸包装50，
 * 在营业员修改纸包装为20时，木包装自动显示为30，
 * 在营业员修改木包装为10时，
 * 纤包装自动显示为20，该过程中未录入包装数值的默认显示为0；
2.	货物包装总件数小于等于货物总件数；
 */
/**--------------------------------------
 * 1.	离线开单时，不录入代打木架信息；
 * 当木包装件数大于等于1时，系统不提示任何信息，
 * 也不弹出代打木架录入界面；
2.	离线开单的代打木架信息在离线开单提交时，
系统校验提醒；
 */
/**
 * 1.	运输类型为汽运时，货物类型为唯一选择项；即，
 * 非A即B；默认不可勾选，
 * 只有当走货路由经过特定的城市时需要录入货物类型,
 * 特定城市可在系统中进行配置；
2.	运输类型为空
默认显示为普货，目前只有这一个分类，该类型可做配置；
--------------------------------------
 */
/**--------------------------------------
 * 1.	系统根据货物名称匹配生成的勾选贵重物品，
 * 营业员不可去掉勾选；
2.	营业员也可以主动勾选贵重物品；
3.	件数等于1、体积小于等于0.05个方、
报价声明价值大于等于10000元，为贵重物品；
系统自动勾选贵重物品，
营业员可修改是否勾选；
4.	件数大于等于2时，平均体积（体积/件数）
小于等于0.5方，平均声明价值（保价声明价值/件数）
大于等于10000元，为贵重物品；
系统自动勾选贵重物品，
营业员可修改是否勾选；
1.	营业部开单时按打完木架后的包装开，
即包装中含“木架/木箱”，
开单件数为货物打木架/木箱前的实际件数（防止丢货），
尺寸和重量按照以下公式计算：
1.1	整票货物代打时：
开单体积=代打货物体积*1.4；
开单重量=所有货物重量+代打货物体积*42；
1.2	部分货物代打时，
开单体积=代打货物体积*1.4+未打木架货物体积；
开单重量=所有货物重量+代打货物体积*42。
即：营业部按照代打货物未打木架之前体积的1.4倍来开单收费，
重量另加，单票中未打木架的货物的体积和重量不变；
1.3	例如：一票货物需全部代打，
货物体积为1个方，重量为100KG，
则开单体积为1.4个方，
开单重量为100+1*42=142KG，
收取客户包装费为150*1.4=210元；
1.4	需要加托时，仍按照50元/个另外收取费用，
托的重量和体积不再另加；
营业部不需要再更改由于打木架引起重量和体积的变化；
2.	开单件数为代打木架前货物实际件数，
包装为打木架后的包装，
打木架后件数发生变化后，
需及时更改件数；
--------------------------------------
 */

/**--------------------------------------
 * 每天处理的运单约为1000000单
营业员数量约10000名
系统一般要求
营业部、集中开单小组上班时间
营业部：16：00-20：00
集中开单小组：21：00-次日4：00
 */

/**--------------------------------------
 * 本界面为录入增值服务信息。
界面主要分为三个部分：
录入增值服务、
录入包装费、
查询其它费用。
1.	录入增值服务
录入增值服务分为两个部分：
录入增值服务信息界面、
录入其它费用列表；
1.1	录入增值服务信息界面
录入增值服务信息界面包括：
1.1.1	保价声明价值；
1.1.2	保价费率：
保价费率可由基础资料配置，
可按出发城市区域，
出发营业部等；
1.1.3	保价费；
1.1.4	代收货款；
1.1.5	代收费率；
1.1.6	代收手续费；
1.1.7	退款类型：
包括三日退、
退日退、
审核退，
默认三日退；
1.1.8	包装费；
1.1.9	装卸费；
1.1.10	送货费；
1.1.11	其它费用合计；
1.1.12	返单类别：
包括无需返单、
原件签收单返回、
传真件签收单返回、
扫描件返回，
默认无需返单；
1.1.13	预付费保密；
1.2	录入其它费用列表
录入其它费用列表包括：
1.2.1	费用名称；
1.2.2	费用金额；
1.2.3	新增其它费用：
功能按钮；
1.2.4	删除其它费用：
功能按钮；
2.	录入包装费
其界面和界面和需求详见系统用例“DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息”中“录入包装费”；
3.	查询其它费用
其界面和界面和需求详见系统用例“DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息”中“查询其它费用”；
--------------------------------------
 */
/**
 * 录入保价声明价值
 * 1.	系统根据录入的保价声明价值和系统自动获得的保价费率计算保价费；
 * 2.	规则-请参见系统用例“DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息”中系统规则SR1、SR3；
 * 录入代货货款
 * 1.	系统根据录入的代收货款和系统自动获得的代收费率计算代收手续费；
2.	规则-请参见系统用例“DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息”中系统规则SR2、SR3；
录入退款类型
1.	规则-请参见系统用例“DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息”中系统规则SR2、SR4；
2.	规则-请参见系统规则SR1；
录入包装费：焦点移至包装费时，
自动弹出包装费录入界面
1.	规则-请参见系统用例“DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息”中系统规则SR5；
录入装卸费
 * 1.	规则-请参见系统用例“DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息”中系统规则SR6；
 * 录入送货费
 * 1.	规则-请参见系统用例“DP-FOSS-接送货系统用例-运单生成-
 * 确认承运信息-录入增值服务信息”中系统规则SR7；
 * 录入其它费用：点击新增其它费用，增加新的其它费用列后，点击放大镜，弹出其它费用查询列表；
 * 运单生成-确认承运信息-录入增值服务信息”中系统规则SR8；
 * 录入返单类别
 * 1.	规则-请参见系统用例“DP-FOSS-接送货系统用例
 * -运单生成-确认承运信息-录入增值服务信息”中系统规则SR9；
 * 录入预付费保密
 * 1.	规则-请参见系统用例“DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息”中系统规则
 * SR10,SR11,SR12；
 * 1.	离线开单中不生成代收货款退款收银人信息，
 * 且不录入；
 * 其代收货款的退款收银人信息在有线后提交运单时录入；
 * 字段名称 	说明 	输入限制	输入项提示文本	长度	是否必填	备注
 * 保价声明价值		数字		8	是	
保价费率		数字、符号		8		
保价费		数字		8		系统自动生成
代收货款		数字		8	是	
代收费率		数字、符号		8		
代收手续费		数字		8		系统自动生成
退款类型		下拉框		3	是	
包装费		数字		8	是	
装卸费		数字		8	是	
送货费		数字		8	是	
其它费用合计		数字		8	是	
返单类别		下拉框		10	是	
预付费保密		复选框		1	否	
--------------------------------------
使用量	每天处理的运单约为1000000单
2012年全网估计用户数	营业员数量约10000名
响应要求（如果与全系统要求 不一致的话）	系统一般要求
使用时间段	营业部、集中开单小组上班时间
高峰使用时间段	营业部：16：00-20：00
集中开单小组：21：00-次日4：00
--------------------------------------
1.10	接口描述
输入的尺寸可以进行加减例如：1*1*1*5+2*2*2*3-0.5*0.5*0.5*
体积为空时，录入尺寸后，
填充体积。
当尺寸修改时，
体积随之变处。
当修改体积时，
尺寸不变化。 

货物包装总件数小于等于货物总件数，
如果大于总件数，
提示：“包装件数不能大于总件数”
--------------------------------------
贵重物品规则变更： 
1.修改现有系统对"贵重物品"的判断条件如下： 
a. 单票单件货物，
体积≤0.05立方且保价声明价值≥1万元； 
b. 单票多件货物，
平均单件体积≤0.2立方且平均单件保价声明价值≥1万元；
（注：平均单件体积=开单总体积÷开单件数，
平均单件保价=开单保价声明价值÷开单件数） 
c. 高保价货物，
单票货物保价≥10万元； 
满足以上任意一个条件时，
系统将判定该票货物为贵重物品并自动勾选"贵重物品"复选框，
且为灰色，不可编辑；不满足以上条件时，
该复选框为可编辑状态，
用户可根据实际情况自行选择是否勾选； 
2.若"贵重物品"复选框被勾选，
则在【储运注意事项】中自动加入提示记录"贵重物品"字段，
若该货物为贵重物品时，
"储运注意事项"中信息显示优先级为：贵重物品＞其他； 
--------------------------------------
尺寸录入框可以不录入件数，
如件数为1时。
因此录入框即可以输入10*10*10，
又可以输入10*10*10*1
进入该页面时，木架和木箱都赋初始值0，
仍保持必填，操作员根据实际情况改，
选择木架或木箱或两者都选择后则该值不能为0
--------------------------------------
	ISSUE-1105
1.运单开单时，货物的件数、
重量及体积文本框是必填项，
默认值为空； 
2.件数只能是大于等于1的整数，
重量及体积只能大于0。
体积、重量这种过程数据保留两位小数
--------------------------------------
前置条件		1.	贵重物品基础资料
2.	违禁物品基础资料
3.	分拣目的站基础资料
后置条件		1.	打木架录入
2.	运单收银
--------------------------------------
营业员点击运单开单，进入运单开单界面。
本界面为录入货物信息。
界面主要分为两个部分：录入货物信息、代收木架信息录入。
1.	录入货物信息：
录入信息包括：货物名称、总件数、
总重量、货物尺寸、
总体积、货物包装、
货物类型、是否贵重物品；
1.1	货物名称：
货物的名称；
1.2	总件数：
收货时货物的总件数；
1.3	总重量：
收货时货物的总重量；
1.4	货物尺寸：
收货时货物的尺寸；
1.5	总体积：
收货时货物的总体积；
1.6	货物包装：
货物的包装，
其包装总件数等于打木架和打木箱后的总件数；
1.7	货物类型：
1.7.1	运输类型为汽运时，
货物类型为公司规则的分拣条件的类型， 
为唯一选择框，包括：A、B；
1.7.2	运输类型为空运时，
货物类型为下拉选择框，
默认显示为普货，
目前只这一个分类，
该类型可做配置；
1.8	是否贵重物品：
货物是否为公司规则的贵重物品，
为选择框；
2.	代打木架信息录入；
当包装木的件数大于等于1时，
自动弹出对话框：“是否收入代打木架？”，是，
则进入场代打木架信息录入界面；
录入信息包括：代打部门、打木架货物件数、
代打木架要求、打木架货物尺寸、打木架货物体积、
打木箱货物件数、代打木箱要求、打木箱货物尺寸、打木架货物体积；
2.1	代打部门：
代打木箱或木架的部门名称；
2.2	打木架货物件数：
需要代打木架的货物件数；
2.3	代打木架要求：
代打木架的要求，
如“1和2合打，3、4分开打”；
2.4	打木架货物尺寸：
需要代打木架的货物尺寸；
2.5	打木架货物体积：
需要代打木架的货物体积；
2.6	打木箱货物件数：
需要代打木架的货物件数；
2.7	代打木箱要求：
代打木箱的要求，如“5和6合打，加一个木托”；
2.8	打木箱货物尺寸：
需要代打木箱的货物尺寸；
2.9	打木箱货物体积：
需要代打木箱的货物体积；
2.10	功能按钮：
确定、关闭、重置；k
--------------------------------------------------
1.6.1	录入货物信息
序号	基本步骤	相关数据	补充步骤
1	录入货物名称		
	1.	系统自动匹配违禁品、贵重物品、限保物品基础资料，生成规则；
2.	规则-请参见系统规则SR1；
2	录入总件数		
	规则-请参见系统规则SR2
3	录入总重量		
	1.	规则-请参见系统规则SR2、SR11；
4	录入货物尺寸		
	1.	规则-请参见系统规则SR3、SR4；
5	录入总体积		
	1.	规则-请参见系统规则SR2、SR3、SR4、SR10；
6	录入货物包装		
	1.	当木包装大于等于1时，
		系统校验出发城市和对应目的站的走货路由中是否有有打木架功能的部门，
		若有，则提醒营业员“是否收入代打木架？”，是，
		则进入场代打木架信息录入界面”，
		并显示第一个有打木架功能的部门名称；
		若走货路由中无有打木架功能的部门，
		则不提示“是否收入代打木架？”；
2.	规则-请参见系统规则SR5、SR6、SR10；
7	录入货物类型		
	1.	规则-请参见系统规则SR7；
8	录入是否贵重货物		
	1.	规则-请参见系统规则SR8；
9       录入打木箱货物体积		
	1.	规则-请参见系统规则SR3、SR4、SR10；
	-----------------------------------
	1.	若货物为违禁品，
	则系统自动提示“货物为违禁品，不可开单！”；
2.	若货物为贵重物品，
则系统自动勾选“贵重物品”，
且不可修改；
3.	若货物为限保物品，
则系统自动限定保价金额，
且不可修改，
并提示“货物为限保物品”；
4.	违禁品、
拒收品、
贵重物品、
限保物品（含保价金额上限）
具体类型可在系统中进行配置；
1.	货物重量单位为千克；
2.	运单开单时，
货物的件数、
重量及体积文本框是必填项，
默认值为空； 
3.	件数只能是大于等于1的整数，
重量及体积只能大于0。
4.	体积、
重量这种过程数据保留两位小数
1.	尺寸录入文本框，
支持'长*宽*高*件数+长*宽*高*（即多个尺寸相加）的计算；
2.	如果件数是1，
则不强制在录入时要“*1”；
3.	货物尺寸为计算器输入，
输入的尺寸可以进行加减，
例如：1*1*1*5+2*2*2*3-0.5*0.5*0.5，
显示为输入文本；
4.	尺寸计算单位为厘米，
尺寸计算出数据后转换单位为立方米后，
在货物体积中显示数据；
例如：尺寸录入为：50*50*20（其中20为件数），
则体积显示数据为：0.05； 
5.	体积为空时，
录入尺寸后，填充体积。
当尺寸修改时，体积随之变处。
当修改体积时，尺寸不变化。
6.	体积初始值为“0”，
仍保持必填，
操作员根据实际情况改，
选择木架或木箱或两者都选择后则该值不能为0

1.	货物体积单位为立方米；
2.	营业员可以修改通过尺寸计算器计算得出的体积数据；
3.	系统设置货物重量体积比区间值（该值由基础资料配置），
在运单提交时，
系统自动对重量体积比进行校验：即重量体积比X=重量/体积； 
3.1	当X不在设置的区间中，
弹出提示“请确认录入的重量体积是否准确！”；
（该弹窗有两个按钮：确定、取消）点击确定时，
弹出确认运单信息界面；点击取消，点返回运单录入界面；
3.2	当X在区间中，无提示；
直接进入确认运单信息界面；
4.	录入重量体积后，
系统校验单票的重量体积及单件（平均单件）
的重量体积是否满足“修改-查询行政组织业务属性”
基础资料中的单票和单件重量体积限制；
只要该四项中有一项不满足，
则提示“XX超出提货网点限制，
请重新选择提货网点！”； 
1.	货物包装总件数小于等于货物总件数，
如果大于总件数，
提示：“包装件数不能大于总件数”；
1.	当木包装件数大于等于1时，
系统校验出发城市和对应目的站的走货路由中是否有有打木架功能的部门，
若有，则提醒营业员“是否收入代打木架？”，是，
则进入场代打木架信息录入界面”，
并显示第一个有打木架功能的部门名称；
若走货路由中无有打木架功能的部门，
则不提示“是否收入代打木架？”；
2.	当走货路由中有有打木架功能的部门为多个时，
只显示系统路由中第一有有打木架功能的部门，
且不可修改；
1.	运输类型为汽运时，
货物类型为唯一选择项；
即，非A即B；默认不可勾选，
只有当走货路由经过特定的城市时需要录入货物类型,
特定城市可在系统中进行配置；
2.	运输类型为空运时，
货物类型为下拉选择框，
默认显示为普货，
目前只有这一个分类，
该类型可做配置；
1.	贵重物品判断规则： 
a. 单票单件货物，
体积≤0.05立方且保价声明价值≥1万元； 
b. 单票多件货物，
平均单件体积≤0.2立方且平均单件保价声明价值≥1万元；
（注：平均单件体积=开单总体积÷开单件数，
平均单件保价=开单保价声明价值÷开单件数） 
c. 高保价货物，
单票货物保价≥10万元； 
满足以上任意一个条件时，
系统将判定该票货物为贵重物品并自动勾选"贵重物品"复选框，
且为灰色，
不可编辑；
不满足以上条件时，
该复选框为可编辑状态，
用户可根据实际情况自行选择是否勾选； 
2.	若"贵重物品"复选框被勾选，
则在【储运注意事项】中自动加入提示记录"贵重物品"字段
，若该货物为贵重物品时，
"储运注意事项"中信息显示优先级为：
贵重物品＞其他；
======================================
1.	录入的打木架货物件数和打木箱件数之和必须大于等于录入的木包装件数；
2.	系统默认标签流水号前X的货物为需要代打木架货物，
X等于录入的“打木架货物件数”和“打木箱货物件数”之和；
3.	营业员在打印标签时，
按流水号先贴要打木架或打木箱的货物；
1.	录入的打木架货物体积和打木箱货物体积之和乘以1.4必须小于等于货物总体积；
该1.4为打木架体积计算系统，可配置；
2.	营业部开单时按打完木架后的包装开，
即包装中含“木架/木箱”，
开单件数为货物打木架/木箱前的实际件数（防止丢货），
尺寸和重量按照以下公式计算：
1.1	整票货物代打时：开单体积=代打货物体积*1.4；
开单重量=所有货物重量+代打货物体积*42；
1.2	部分货物代打时，
开单体积=代打货物体积*1.4+未打木架货物体积；
开单重量=所有货物重量+代打货物体积*42。
即：营业部按照代打货物未打木架之前体积的1.4倍来开单收费，
重量另加，
单票中未打木架的货物的体积和重量不变；
1.3	例如：一票货物需全部代打，货物体积为1个方，
重量为100KG，则开单体积为1.4个方，
开单重量为100+1*42=142KG，
收取客户包装费为150*1.4=210元；
1.4	需要加托时，仍按照50元/个另外收取费用，
托的重量和体积不再另加；
营业部不需要再更改由于打木架引起重量和体积的变化；
3.	打木架要在“对内备注”中备注“代打木架/木箱”，
特殊要求（特别是合打情况）必须在对内备注和A4纸上都注明，
例如：货物1、2、3合打成一件等；
4.	开单件数为代打木架前货物实际件数，
包装为打木架后的包装，打木架后件数发生变化后，
需及时更改件数；
=======================================
1.8.1	录入货物信息
字段名称 	说明 	输入限制	输入项提示文本	长度	是否必填	备注
货物名称		文本		100	是	
货物总件数		数字		4	是	
货物总重量		数字		8	是	
货物尺寸		数字、符号		500	否	
货物总体积		数字		8	是	
货物包装		数字、文本		4	是	
货物类型		选择框		10	否	
贵重物品		选择框		1	否	
=======================================
1.8.2	代打木架信息录入
字段名称 	说明 	输入限制	输入项提示文本	长度	是否必填	备注
代打部门		文本		20	是	
打木架货物件数		数字		4	是	
代打木架要求		文本		100	是	
打木架货物尺寸		数字、符号		500	否	
打木架货物体积		数字		8	是	
打木箱货物件数		数字		4	是	
代打木箱要求		文本		100	是	
打木箱货物尺寸		数字、符号		500	否	
打木箱货物体积		数字		8	是	
==========================================
使用量	每天处理的运单约为1000000单
2012年全网估计用户数	营业员数量约10000名
响应要求（如果与全系统要求 不一致的话）	系统一般要求
使用时间段	营业部、集中开单小组上班时间
高峰使用时间段	营业部：16：00-20：00
集中开单小组：21：00-次日4：00
============================================
根据电话号码带出客户信息，
仅在客户名称为空的前提下才会有效。
即意味着由其他方式带出客户信息后，
修改电话号码并不会触发重新的检索。
==========================================
1.	使用电话号码和手机进行匹配，
如果是唯一匹配一条CRM客户信息时，
填充客户编码、客户名称、联系人、地址，
如果有多条需弹出选择框进行选择， 
如果查询不到CRM客户信息时，
使用FOSS三个月运单历史记录中的收货信息查询，
唯一匹配一条进行填充收货客户信息，多条进行弹窗选择，
如果都查询不到，不做其他操作
2.	但是对于电话号码匹配，只有当发货人手机、
客户名称为空时，才会用电话号码检索并弹窗显示使用手机号码、
电话号码、客户名称弹出选择框选择记录后覆盖原先记录
3.	修改联系人时，需要清空客户名称，
当清空客户名称时，会同时删除客户编码
4.	使用手机号码、
电话号码弹出选择框选择记录后覆盖原先记录
==========================================
身份证号、客户编码、客户名称、
联系人编码可以查询到全公司的客户
==========================================
本界面分为两个界面：录入收货客户信息、选择收货客户。
1.	录入收货客户信息：
界面为信息录入界面：包括：手机、电话、
发货收货联系人（发货收货部门）、发货收货人地址；
1.1	手机：发货收货人手机号码；
1.2	电话：发货收货人电话号码；
1.3	收货联系人（收货部门）：
收货客户的客户姓名，
当“运单开单”中的“开单提货方式”
为“内部带货自提”时，
“收货联系人”字段更改为“收货部门”；
1.4	收货人地址：收货客户的详细联系地址，
支持国家行政区域自动过滤；
1.5	客户名称
1.6	客户编码
2.	选择收货客户界面：
界面为选择客户信息界面：包括两部分：
客户信息列表区域、功能按钮区域；
2.1.	客户信息列表区域：
包括：联系人、手机、电话、
地址（规范化地址和详细地址）；
2.2.	功能按钮区域：
包括：确定、取消；
3.	    选择热门城市界面
   界面信息包含人热门城市
4.	选择省份界面
   界面信息包含省份
5.	选择城市界面
           界面信息保护城市
6.	选择区县界面
           界面信息保护区县
==============================================
1.6.1	录入
序号	基本步骤	相关数据	补充步骤
1	录入手机号码		
1.	系统自动查询CRM系统中对应手机号码绑定的客户信息，
如果有弹窗，
弹窗操作见扩展1a，和如果没有，
弹出FOSS历史开单记录中对应手机号码绑定的客户信息，
并弹窗，弹窗操作见扩展1b；
2.	规则-请参见系统规则SR1、SR5、SR6；
2	录入电话号码		
1.	如果手机号码没有填写，
系统自动查询CRM系统中对应电话号码绑定的客户信息，
如果有弹窗，
弹窗操作见扩展2a，
如果没有，
弹出FOSS历史开单记录中对应手机号码绑定的客户信息，
并弹窗，弹窗操作见扩展2b；
1.	1、系统自动查询CRM系统中对应电话号码绑定的
客户信息和FOSS历史开单记录中对应手机号码绑定的客户信息，
并弹窗，弹窗操作参见扩展2a；
2.	规则-请参见系统规则
SR1、SR5 、SR6；
------------------------------------
3	录入收货联系人（收货部门）		
1.	规则-请参见系统规则SR2、SR3；
4	录入收货人地址		
1.	提供下拉框选择输入，
系统自动过滤输入的行政区下一级行政级的字段；
2.	地址在系统后台通过GIS系统进行匹配，
如果是禁行区域，地址颜色为红色，
如果是进仓区域，地址颜色为黄色
3.	规则-请参见系统规则SR4；
===================================
1.6.2	扩展
序号	扩展事件	相关数据	备注
1a	
当录入的手机号码在CRM系统中有手机号码绑定的客户信息，
则自动弹窗并显示手机号码为录入的手机号的所有客户信息，
营业员选择录入一条记录，并确定；
选择的客户信息自动带入收货客户信息中；
当光标焦点移至录入手机号码时，
系统自动调用CRM系统对应发货客户的历史发货记录，
并自动弹窗显示所有该发货客户的历史发货记录；
营业员选择一条记录，并确定，
选择的客户信息自动带信收货客户信息中；
	客户信息	1.	
	规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则；
2.	规则-请参见系统规则SR5 、SR6；
1.	规则-请参见系统规则SR5；
1b	当录入的手机号码在CRM系统中没有手机号码绑定的客户信息时，
则如果该客户在这3个月有发过货，
则弹出历史收货记录自动弹窗并显示手机号码为录入的手机号的所有客户信息，
营业员选择录入一条记录，并确定；选择的客户信息自动带入收货客户信息中；	
客户信息	1.	规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则；
2.	规则-请参见系统规则SR5 、SR6；

2a2a	当录入的电话号码在CRM系统中有电话号码绑定的客户信息，
则自动弹窗并显示电话号码为录入的电话号码的所有客户信息，
营业员选择录入一条记录，并确定；
选择的客户信息自动带入收货客户信息中；
当录入的电话号码在CRM系统中有电话号码绑定的客户信息，
则自动弹窗并显示电话号码为录入的电话号码的所有客户信息，
营业员选择录入一条记录，并确定；选择的客户信息自动带入收货客户信息中；	
客户信息客户信息	1.	规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则；
2.	规则-请参见系统规则SR5 、SR6；
1.	规则-请参见系统用例SUC-492中的“1.6.2扩展2a”的规则；
2.	规则-请参见系统规则SR6；
==============================================
2b	当录入的电话号码在CRM系统中没有电话号码绑定的客户信息时，
如果该客户在这3个月有发过货，则弹出历史收货记录，营业员选择录入一条记录，
并确定；选择的客户信息自动带入收货客户信息中；	客户信息	1.
	规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则；
2.	规则-请参见系统规则SR5 、SR6；
	==========================
1.7	业务规则
序号	描述
SR1	1.	收货客户手机号码及固定电话至少提供一个，
手机号码只能为数字并且为11位，固定电话号码只能为数字，
且可添加多个；
SR2	1.	当“运单开单”中的“开单提货方式”为“内部带货自提”时，
“收货联系人”字段更改为“收货部门”；
SR3	1.	若为公司内部带货，
则收货客户信息中的收货部门名称必须与OA系统中组织架构名称保持一致；
SR4	1.	客户详细地址必填至乡/镇，
且乡镇下一级内容不能为空；

2.	当鼠标点击规范化地址文本框时，
显示如下图片，
包含热门城市、省份、城市、县区，选择热门城市，
会直接跳到区县，现在省份后自动跳到城市，
选择城市后自动跳到区县（必须选择完上一级行政区域后，
才能选择下一行政区域），选择完区县后，
会把规范化地址显示在规范化文本框内，
例如：江苏省-苏州市-相城区


3.	地址可以进行拼音和首写字母进行匹配，
例如输入“GZ”会在规范化地址文本框下面显示 ；
匹配时可带出城市、区、
县等符合的信息，该设计来自官网，具体可以参考官网


4.	当提货方式含“自提”时，收货人地址为非必填项；
SR5	1.	使用电话号码和手机进行匹配，
如果是唯一匹配一条CRM客户信息时，
填充客户编码、客户名称、联系人、地址，
如果有多条需弹出选择框进行选择，
 如果查询不到CRM客户信息时，
 使用FOSS三个月运单历史记录中的收货信息查询，
 唯一匹配一条进行填充收货客户信息，
 多条进行弹窗选择，如果都查询不到，
 不做其他操作
2.	但是对于电话号码匹配，
只有当发货人手机、
客户名称为空时，
才会用电话号码检索并弹窗显示
3.	使用手机号码、
电话号码、
客户名称弹出选择框选择记录后覆盖原先记录
4.	修改联系人时，
需要清空客户名称，
当清空客户名称时，
会同时删除客户编码
5.	使用手机号码、
电话号码弹出选择框选择记录后覆盖原先记录
6.	点击客户名称查询控件，
弹出查询信息:窗口SUC-424-查找会员
7.	身份证号、客户编码、
客户名称、联系人编码可以查询到全公司的客户
	
1.	只有当收货人手机为空，
且发货客户信息已录入时，才会检索并弹窗显示；
2.	若未查询到历史记录，
则无法提示；
3.	通过选择录入的收货人信息均可修改；
4.	使用号码进行匹配，
如果是唯一匹配一条CRM客户信息时，填充客户编码和客户名称，如果有多条不做操作
SR6	1.	通过选择录入收货发货信息，
同时带出对应的目的站和提货网点信息；
2.	带出目的站仍然使用GIS进行查询，
并以GIS返回为准；
3.	若GIS未查询得出，
则以历史开单的目的站和提货网点信息为准；
================================
1.8	数据元素
1.8.1	录入收货客户信息
字段名称 	说明 	输入限制	输入项提示文本	长度	是否必填	备注
手机		数字		11	二者至少填一	
电话		数字		25		当“运单开单”中的“开单提货方式”为“内部带货自提”时，电话输入栏自动生成“[******]”，代替输入号码信息
收货联系人（收货部门）		文本		80	是	
收货人地址		下拉框、文本		100	是	当提货方式含“自提”时，收货人地址为非必填项；
客户名称		文本		80	否	不可修改
客户编码		文本		80	否	不可修改
--------------------------------------
1.8.2	选择收货客户
字段名称 	说明 	输入限制	输入项提示文本	长度	是否必填	备注
客户名称		文本		80		
手机		文本		11		
电话		文本		25		
收货联系人（收货部门）		文本		80		
收货人地址		文本		100		
联系人ID		文本		20		
联系人编码		文本		20		
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1.9	非功能性需求
使用量	每天处理的运单约为1000000单
2012年全网估计用户数	营业员数量约10000名
响应要求（如果与全系统要求 不一致的话）	系统一般要求
使用时间段	营业部、集中开单小组上班时间
高峰使用时间段	营业部：16：00-20：00
集中开单小组：21：00-次日4：00
=======================================
1.10	接口描述
接口名称 	对方系统（外部系统或内部其他模块）	接口描述
查询客户资料	CRM客户管理模块	
FOSS能过手机号或其它条件查询客户资料信息，
包括：客户名称、客户编码、发货收货联系人、
发货收货人地址等
查询公司架构	OA系统组织架构管理	
当开单提货方式为内部带货自提时，
FOSS向OA请求验证发货收货部门的有效性
 */

/**--------------------------------------
 * 营业员点击运单离线开单，
 * 进入运单离线开单界面。
 本界面为离线录入货物信息。
 1.	录入货物信息：
 录入信息包括：货物名称、总件数、总重量、
 货物尺寸、总体积、货物包装、货物类型、是否贵重物品；
 1.1	货物名称：货物的名称；
 1.2	总件数：收货时货物的总件数；
 1.3	总重量：收货时货物的总重量；
 1.4	货物尺寸：收货时货物的尺寸；
 1.5	总体积：收货时货物的总体积；
 1.6	货物包装：货物的包装，其包装总件数等于打木架和打木箱后的总件数；
 1.7	货物类型：
 1.7.1	运输类型为汽运时，
 货物类型为公司规则的分拣条件的类型，
 为唯一选择框，包括：A、B；
 1.7.2	运输类型为空运时，
 货物类型为下拉选择框，
 默认显示为普货，
 目前只这一个分类，
 该类型可做配置；
 1.8	是否贵重物品：
 货物是否为公司规则的贵重物品，
 为选择框；
 */
/**--------------------------------------
 * 1.	若货物为违禁品，
 * 	则系统自动提示“货物为违禁品，不可开单！”；
 2.	若货物为拒收品，
 则系统自动提示“货物为拒收品，不可开单！”；
 3.	若货物为贵重物品，
 则系统自动勾选“贵重物品”，
 且不可修改；
 4.	若货物为限保物品，
 则系统自动限定保价金额，且不可修改，
 并提示“货物为限保物品”；
 5.	违禁品、拒收品、
 贵重物品、限保物品（含保价金额上限）
 具体类型可在系统中进行配置；
 1.	货物重量单位为千克
 */
/**--------------------------------------
 * 1.	货物尺寸为计算器输入，
 * 显示为输入文本；
2.	尺寸计算单位为厘米，
尺寸计算出数据后转换单位为立方米后，
在货物体积中显示数据；例如：
尺寸录入为：50*50*20，
则体积显示数据为：0.05；
 */
/**--------------------------------------
 * 1.	货物体积单位为立方米；
2.	营业员可以修改通过尺寸计算器
计算得出的体积数据；
3.	系统设置货物重量体积比区间值（该值由基础资料配置），
在运单提交时，
系统自动对重量体积比进行校验：
即重量体积比X=重量/体积；
3.1	当X不在设置的区间中，
弹出提示“请确认录入的重量体积是否准确！”；
（该弹窗有两个按钮：确定、取消）点击确定时，
弹出离线开单确认运单信息界面；点击取消，
点返回运单录入界面；
3.2	当X在区间中，无提示；
直接进入确认运单信息界面；
--------------------------------------
 */
/**--------------------------------------
 * 1.	纸包装件数默认显示数值等于货物总件数，
 * 营业员可以修改各包装的件数；
 * 系统自动在录入下一个包装前计算显示剩余未录入的件数，
 * 例：某票货物为50件，则自动显示纸包装50，
 * 在营业员修改纸包装为20时，木包装自动显示为30，
 * 在营业员修改木包装为10时，
 * 纤包装自动显示为20，该过程中未录入包装数值的默认显示为0；
2.	货物包装总件数小于等于货物总件数；
 */
/**--------------------------------------
 * 1.	离线开单时，不录入代打木架信息；
 * 当木包装件数大于等于1时，系统不提示任何信息，
 * 也不弹出代打木架录入界面；
2.	离线开单的代打木架信息在离线开单提交时，
系统校验提醒；
 */
/**
 * 1.	运输类型为汽运时，货物类型为唯一选择项；即，
 * 非A即B；默认不可勾选，
 * 只有当走货路由经过特定的城市时需要录入货物类型,
 * 特定城市可在系统中进行配置；
2.	运输类型为空
默认显示为普货，目前只有这一个分类，该类型可做配置；
--------------------------------------
 */
/**--------------------------------------
 * 1.	系统根据货物名称匹配生成的勾选贵重物品，
 * 营业员不可去掉勾选；
2.	营业员也可以主动勾选贵重物品；
3.	件数等于1、体积小于等于0.05个方、
报价声明价值大于等于10000元，为贵重物品；
系统自动勾选贵重物品，
营业员可修改是否勾选；
4.	件数大于等于2时，平均体积（体积/件数）
小于等于0.5方，平均声明价值（保价声明价值/件数）
大于等于10000元，为贵重物品；
系统自动勾选贵重物品，
营业员可修改是否勾选；
1.	营业部开单时按打完木架后的包装开，
即包装中含“木架/木箱”，
开单件数为货物打木架/木箱前的实际件数（防止丢货），
尺寸和重量按照以下公式计算：
1.1	整票货物代打时：
开单体积=代打货物体积*1.4；
开单重量=所有货物重量+代打货物体积*42；
1.2	部分货物代打时，
开单体积=代打货物体积*1.4+未打木架货物体积；
开单重量=所有货物重量+代打货物体积*42。
即：营业部按照代打货物未打木架之前体积的1.4倍来开单收费，
重量另加，单票中未打木架的货物的体积和重量不变；
1.3	例如：一票货物需全部代打，
货物体积为1个方，重量为100KG，
则开单体积为1.4个方，
开单重量为100+1*42=142KG，
收取客户包装费为150*1.4=210元；
1.4	需要加托时，仍按照50元/个另外收取费用，
托的重量和体积不再另加；
营业部不需要再更改由于打木架引起重量和体积的变化；
2.	开单件数为代打木架前货物实际件数，
包装为打木架后的包装，
打木架后件数发生变化后，
需及时更改件数；
--------------------------------------
 */

/**--------------------------------------
 * 每天处理的运单约为1000000单
营业员数量约10000名
系统一般要求
营业部、集中开单小组上班时间
营业部：16：00-20：00
集中开单小组：21：00-次日4：00
 */

/**--------------------------------------
 * 本界面为录入增值服务信息。
界面主要分为三个部分：
录入增值服务、
录入包装费、
查询其它费用。
1.	录入增值服务
录入增值服务分为两个部分：
录入增值服务信息界面、
录入其它费用列表；
1.1	录入增值服务信息界面
录入增值服务信息界面包括：
1.1.1	保价声明价值；
1.1.2	保价费率：
保价费率可由基础资料配置，
可按出发城市区域，
出发营业部等；
1.1.3	保价费；
1.1.4	代收货款；
1.1.5	代收费率；
1.1.6	代收手续费；
1.1.7	退款类型：
包括三日退、
退日退、
审核退，
默认三日退；
1.1.8	包装费；
1.1.9	装卸费；
1.1.10	送货费；
1.1.11	其它费用合计；
1.1.12	返单类别：
包括无需返单、
原件签收单返回、
传真件签收单返回、
扫描件返回，
默认无需返单；
1.1.13	预付费保密；
1.2	录入其它费用列表
录入其它费用列表包括：
1.2.1	费用名称；
1.2.2	费用金额；
1.2.3	新增其它费用：
功能按钮；
1.2.4	删除其它费用：
功能按钮；
2.	录入包装费
其界面和界面和需求详见系统用例“DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息”中“录入包装费”；
3.	查询其它费用
其界面和界面和需求详见系统用例“DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息”中“查询其它费用”；
--------------------------------------
 */
/**
 * 录入保价声明价值
 * 1.	系统根据录入的保价声明价值和系统自动获得的保价费率计算保价费；
 * 2.	规则-请参见系统用例“DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息”中系统规则SR1、SR3；
 * 录入代货货款
 * 1.	系统根据录入的代收货款和系统自动获得的代收费率计算代收手续费；
2.	规则-请参见系统用例“DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息”中系统规则SR2、SR3；
录入退款类型
1.	规则-请参见系统用例“DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息”中系统规则SR2、SR4；
2.	规则-请参见系统规则SR1；
录入包装费：焦点移至包装费时，
自动弹出包装费录入界面
1.	规则-请参见系统用例“DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息”中系统规则SR5；
录入装卸费
 * 1.	规则-请参见系统用例“DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息”中系统规则SR6；
 * 录入送货费
 * 1.	规则-请参见系统用例“DP-FOSS-接送货系统用例-运单生成-
 * 确认承运信息-录入增值服务信息”中系统规则SR7；
 * 录入其它费用：点击新增其它费用，增加新的其它费用列后，点击放大镜，弹出其它费用查询列表；
 * 运单生成-确认承运信息-录入增值服务信息”中系统规则SR8；
 * 录入返单类别
 * 1.	规则-请参见系统用例“DP-FOSS-接送货系统用例
 * -运单生成-确认承运信息-录入增值服务信息”中系统规则SR9；
 * 录入预付费保密
 * 1.	规则-请参见系统用例“DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息”中系统规则
 * SR10,SR11,SR12；
 * 1.	离线开单中不生成代收货款退款收银人信息，
 * 且不录入；
 * 其代收货款的退款收银人信息在有线后提交运单时录入；
 * 字段名称 	说明 	输入限制	输入项提示文本	长度	是否必填	备注
 * 保价声明价值		数字		8	是	
保价费率		数字、符号		8		
保价费		数字		8		系统自动生成
代收货款		数字		8	是	
代收费率		数字、符号		8		
代收手续费		数字		8		系统自动生成
退款类型		下拉框		3	是	
包装费		数字		8	是	
装卸费		数字		8	是	
送货费		数字		8	是	
其它费用合计		数字		8	是	
返单类别		下拉框		10	是	
预付费保密		复选框		1	否	
--------------------------------------
使用量	每天处理的运单约为1000000单
2012年全网估计用户数	营业员数量约10000名
响应要求（如果与全系统要求 不一致的话）	系统一般要求
使用时间段	营业部、集中开单小组上班时间
高峰使用时间段	营业部：16：00-20：00
集中开单小组：21：00-次日4：00
--------------------------------------
1.10	接口描述
输入的尺寸可以进行加减例如：1*1*1*5+2*2*2*3-0.5*0.5*0.5*
体积为空时，录入尺寸后，
填充体积。
当尺寸修改时，
体积随之变处。
当修改体积时，
尺寸不变化。 

货物包装总件数小于等于货物总件数，
如果大于总件数，
提示：“包装件数不能大于总件数”
--------------------------------------
贵重物品规则变更： 
1.修改现有系统对"贵重物品"的判断条件如下： 
a. 单票单件货物，
体积≤0.05立方且保价声明价值≥1万元； 
b. 单票多件货物，
平均单件体积≤0.2立方且平均单件保价声明价值≥1万元；
（注：平均单件体积=开单总体积÷开单件数，
平均单件保价=开单保价声明价值÷开单件数） 
c. 高保价货物，
单票货物保价≥10万元； 
满足以上任意一个条件时，
系统将判定该票货物为贵重物品并自动勾选"贵重物品"复选框，
且为灰色，不可编辑；不满足以上条件时，
该复选框为可编辑状态，
用户可根据实际情况自行选择是否勾选； 
2.若"贵重物品"复选框被勾选，
则在【储运注意事项】中自动加入提示记录"贵重物品"字段，
若该货物为贵重物品时，
"储运注意事项"中信息显示优先级为：贵重物品＞其他； 
--------------------------------------
尺寸录入框可以不录入件数，
如件数为1时。
因此录入框即可以输入10*10*10，
又可以输入10*10*10*1
进入该页面时，木架和木箱都赋初始值0，
仍保持必填，操作员根据实际情况改，
选择木架或木箱或两者都选择后则该值不能为0
--------------------------------------
	ISSUE-1105
1.运单开单时，货物的件数、
重量及体积文本框是必填项，
默认值为空； 
2.件数只能是大于等于1的整数，
重量及体积只能大于0。
体积、重量这种过程数据保留两位小数
--------------------------------------
前置条件		1.	贵重物品基础资料
2.	违禁物品基础资料
3.	分拣目的站基础资料
后置条件		1.	打木架录入
2.	运单收银
--------------------------------------
营业员点击运单开单，进入运单开单界面。
本界面为录入货物信息。
界面主要分为两个部分：录入货物信息、代收木架信息录入。
1.	录入货物信息：
录入信息包括：货物名称、总件数、
总重量、货物尺寸、
总体积、货物包装、
货物类型、是否贵重物品；
1.1	货物名称：
货物的名称；
1.2	总件数：
收货时货物的总件数；
1.3	总重量：
收货时货物的总重量；
1.4	货物尺寸：
收货时货物的尺寸；
1.5	总体积：
收货时货物的总体积；
1.6	货物包装：
货物的包装，
其包装总件数等于打木架和打木箱后的总件数；
1.7	货物类型：
1.7.1	运输类型为汽运时，
货物类型为公司规则的分拣条件的类型， 
为唯一选择框，包括：A、B；
1.7.2	运输类型为空运时，
货物类型为下拉选择框，
默认显示为普货，
目前只这一个分类，
该类型可做配置；
1.8	是否贵重物品：
货物是否为公司规则的贵重物品，
为选择框；
2.	代打木架信息录入；
当包装木的件数大于等于1时，
自动弹出对话框：“是否收入代打木架？”，是，
则进入场代打木架信息录入界面；
录入信息包括：代打部门、打木架货物件数、
代打木架要求、打木架货物尺寸、打木架货物体积、
打木箱货物件数、代打木箱要求、打木箱货物尺寸、打木架货物体积；
2.1	代打部门：
代打木箱或木架的部门名称；
2.2	打木架货物件数：
需要代打木架的货物件数；
2.3	代打木架要求：
代打木架的要求，
如“1和2合打，3、4分开打”；
2.4	打木架货物尺寸：
需要代打木架的货物尺寸；
2.5	打木架货物体积：
需要代打木架的货物体积；
2.6	打木箱货物件数：
需要代打木架的货物件数；
2.7	代打木箱要求：
代打木箱的要求，如“5和6合打，加一个木托”；
2.8	打木箱货物尺寸：
需要代打木箱的货物尺寸；
2.9	打木箱货物体积：
需要代打木箱的货物体积；
2.10	功能按钮：
确定、关闭、重置；k
--------------------------------------------------
1.6.1	录入货物信息
序号	基本步骤	相关数据	补充步骤
1	录入货物名称		
	1.	系统自动匹配违禁品、贵重物品、限保物品基础资料，生成规则；
2.	规则-请参见系统规则SR1；
2	录入总件数		
	规则-请参见系统规则SR2
3	录入总重量		
	1.	规则-请参见系统规则SR2、SR11；
4	录入货物尺寸		
	1.	规则-请参见系统规则SR3、SR4；
5	录入总体积		
	1.	规则-请参见系统规则SR2、SR3、SR4、SR10；
6	录入货物包装		
	1.	当木包装大于等于1时，
		系统校验出发城市和对应目的站的走货路由中是否有有打木架功能的部门，
		若有，则提醒营业员“是否收入代打木架？”，是，
		则进入场代打木架信息录入界面”，
		并显示第一个有打木架功能的部门名称；
		若走货路由中无有打木架功能的部门，
		则不提示“是否收入代打木架？”；
2.	规则-请参见系统规则SR5、SR6、SR10；
7	录入货物类型		
	1.	规则-请参见系统规则SR7；
8	录入是否贵重货物		
	1.	规则-请参见系统规则SR8；
9       录入打木箱货物体积		
	1.	规则-请参见系统规则SR3、SR4、SR10；
	-----------------------------------
	1.	若货物为违禁品，
	则系统自动提示“货物为违禁品，不可开单！”；
2.	若货物为贵重物品，
则系统自动勾选“贵重物品”，
且不可修改；
3.	若货物为限保物品，
则系统自动限定保价金额，
且不可修改，
并提示“货物为限保物品”；
4.	违禁品、
拒收品、
贵重物品、
限保物品（含保价金额上限）
具体类型可在系统中进行配置；
1.	货物重量单位为千克；
2.	运单开单时，
货物的件数、
重量及体积文本框是必填项，
默认值为空； 
3.	件数只能是大于等于1的整数，
重量及体积只能大于0。
4.	体积、
重量这种过程数据保留两位小数
1.	尺寸录入文本框，
支持'长*宽*高*件数+长*宽*高*（即多个尺寸相加）的计算；
2.	如果件数是1，
则不强制在录入时要“*1”；
3.	货物尺寸为计算器输入，
输入的尺寸可以进行加减，
例如：1*1*1*5+2*2*2*3-0.5*0.5*0.5，
显示为输入文本；
4.	尺寸计算单位为厘米，
尺寸计算出数据后转换单位为立方米后，
在货物体积中显示数据；
例如：尺寸录入为：50*50*20（其中20为件数），
则体积显示数据为：0.05； 
5.	体积为空时，
录入尺寸后，填充体积。
当尺寸修改时，体积随之变处。
当修改体积时，尺寸不变化。
6.	体积初始值为“0”，
仍保持必填，
操作员根据实际情况改，
选择木架或木箱或两者都选择后则该值不能为0

1.	货物体积单位为立方米；
2.	营业员可以修改通过尺寸计算器计算得出的体积数据；
3.	系统设置货物重量体积比区间值（该值由基础资料配置），
在运单提交时，
系统自动对重量体积比进行校验：即重量体积比X=重量/体积； 
3.1	当X不在设置的区间中，
弹出提示“请确认录入的重量体积是否准确！”；
（该弹窗有两个按钮：确定、取消）点击确定时，
弹出确认运单信息界面；点击取消，点返回运单录入界面；
3.2	当X在区间中，无提示；
直接进入确认运单信息界面；
4.	录入重量体积后，
系统校验单票的重量体积及单件（平均单件）
的重量体积是否满足“修改-查询行政组织业务属性”
基础资料中的单票和单件重量体积限制；
只要该四项中有一项不满足，
则提示“XX超出提货网点限制，
请重新选择提货网点！”； 
1.	货物包装总件数小于等于货物总件数，
如果大于总件数，
提示：“包装件数不能大于总件数”；
1.	当木包装件数大于等于1时，
系统校验出发城市和对应目的站的走货路由中是否有有打木架功能的部门，
若有，则提醒营业员“是否收入代打木架？”，是，
则进入场代打木架信息录入界面”，
并显示第一个有打木架功能的部门名称；
若走货路由中无有打木架功能的部门，
则不提示“是否收入代打木架？”；
2.	当走货路由中有有打木架功能的部门为多个时，
只显示系统路由中第一有有打木架功能的部门，
且不可修改；
1.	运输类型为汽运时，
货物类型为唯一选择项；
即，非A即B；默认不可勾选，
只有当走货路由经过特定的城市时需要录入货物类型,
特定城市可在系统中进行配置；
2.	运输类型为空运时，
货物类型为下拉选择框，
默认显示为普货，
目前只有这一个分类，
该类型可做配置；
1.	贵重物品判断规则： 
a. 单票单件货物，
体积≤0.05立方且保价声明价值≥1万元； 
b. 单票多件货物，
平均单件体积≤0.2立方且平均单件保价声明价值≥1万元；
（注：平均单件体积=开单总体积÷开单件数，
平均单件保价=开单保价声明价值÷开单件数） 
c. 高保价货物，
单票货物保价≥10万元； 
满足以上任意一个条件时，
系统将判定该票货物为贵重物品并自动勾选"贵重物品"复选框，
且为灰色，
不可编辑；
不满足以上条件时，
该复选框为可编辑状态，
用户可根据实际情况自行选择是否勾选； 
2.	若"贵重物品"复选框被勾选，
则在【储运注意事项】中自动加入提示记录"贵重物品"字段
，若该货物为贵重物品时，
"储运注意事项"中信息显示优先级为：
贵重物品＞其他；
======================================
1.	录入的打木架货物件数和打木箱件数之和必须大于等于录入的木包装件数；
2.	系统默认标签流水号前X的货物为需要代打木架货物，
X等于录入的“打木架货物件数”和“打木箱货物件数”之和；
3.	营业员在打印标签时，
按流水号先贴要打木架或打木箱的货物；
1.	录入的打木架货物体积和打木箱货物体积之和乘以1.4必须小于等于货物总体积；
该1.4为打木架体积计算系统，可配置；
2.	营业部开单时按打完木架后的包装开，
即包装中含“木架/木箱”，
开单件数为货物打木架/木箱前的实际件数（防止丢货），
尺寸和重量按照以下公式计算：
1.1	整票货物代打时：开单体积=代打货物体积*1.4；
开单重量=所有货物重量+代打货物体积*42；
1.2	部分货物代打时，
开单体积=代打货物体积*1.4+未打木架货物体积；
开单重量=所有货物重量+代打货物体积*42。
即：营业部按照代打货物未打木架之前体积的1.4倍来开单收费，
重量另加，
单票中未打木架的货物的体积和重量不变；
1.3	例如：一票货物需全部代打，货物体积为1个方，
重量为100KG，则开单体积为1.4个方，
开单重量为100+1*42=142KG，
收取客户包装费为150*1.4=210元；
1.4	需要加托时，仍按照50元/个另外收取费用，
托的重量和体积不再另加；
营业部不需要再更改由于打木架引起重量和体积的变化；
3.	打木架要在“对内备注”中备注“代打木架/木箱”，
特殊要求（特别是合打情况）必须在对内备注和A4纸上都注明，
例如：货物1、2、3合打成一件等；
4.	开单件数为代打木架前货物实际件数，
包装为打木架后的包装，打木架后件数发生变化后，
需及时更改件数；
=======================================
1.8.1	录入货物信息
字段名称 	说明 	输入限制	输入项提示文本	长度	是否必填	备注
货物名称		文本		100	是	
货物总件数		数字		4	是	
货物总重量		数字		8	是	
货物尺寸		数字、符号		500	否	
货物总体积		数字		8	是	
货物包装		数字、文本		4	是	
货物类型		选择框		10	否	
贵重物品		选择框		1	否	
=======================================
1.8.2	代打木架信息录入
字段名称 	说明 	输入限制	输入项提示文本	长度	是否必填	备注
代打部门		文本		20	是	
打木架货物件数		数字		4	是	
代打木架要求		文本		100	是	
打木架货物尺寸		数字、符号		500	否	
打木架货物体积		数字		8	是	
打木箱货物件数		数字		4	是	
代打木箱要求		文本		100	是	
打木箱货物尺寸		数字、符号		500	否	
打木箱货物体积		数字		8	是	
==========================================
使用量	每天处理的运单约为1000000单
2012年全网估计用户数	营业员数量约10000名
响应要求（如果与全系统要求 不一致的话）	系统一般要求
使用时间段	营业部、集中开单小组上班时间
高峰使用时间段	营业部：16：00-20：00
集中开单小组：21：00-次日4：00
============================================
根据电话号码带出客户信息，
仅在客户名称为空的前提下才会有效。
即意味着由其他方式带出客户信息后，
修改电话号码并不会触发重新的检索。
==========================================
1.	使用电话号码和手机进行匹配，
如果是唯一匹配一条CRM客户信息时，
填充客户编码、客户名称、联系人、地址，
如果有多条需弹出选择框进行选择， 
如果查询不到CRM客户信息时，
使用FOSS三个月运单历史记录中的收货信息查询，
唯一匹配一条进行填充收货客户信息，多条进行弹窗选择，
如果都查询不到，不做其他操作
2.	但是对于电话号码匹配，只有当发货人手机、
客户名称为空时，才会用电话号码检索并弹窗显示使用手机号码、
电话号码、客户名称弹出选择框选择记录后覆盖原先记录
3.	修改联系人时，需要清空客户名称，
当清空客户名称时，会同时删除客户编码
4.	使用手机号码、
电话号码弹出选择框选择记录后覆盖原先记录
==========================================
身份证号、客户编码、客户名称、
联系人编码可以查询到全公司的客户
==========================================
本界面分为两个界面：录入收货客户信息、选择收货客户。
1.	录入收货客户信息：
界面为信息录入界面：包括：手机、电话、
发货收货联系人（发货收货部门）、发货收货人地址；
1.1	手机：发货收货人手机号码；
1.2	电话：发货收货人电话号码；
1.3	收货联系人（收货部门）：
收货客户的客户姓名，
当“运单开单”中的“开单提货方式”
为“内部带货自提”时，
“收货联系人”字段更改为“收货部门”；
1.4	收货人地址：收货客户的详细联系地址，
支持国家行政区域自动过滤；
1.5	客户名称
1.6	客户编码
2.	选择收货客户界面：
界面为选择客户信息界面：包括两部分：
客户信息列表区域、功能按钮区域；
2.1.	客户信息列表区域：
包括：联系人、手机、电话、
地址（规范化地址和详细地址）；
2.2.	功能按钮区域：
包括：确定、取消；
3.	    选择热门城市界面
   界面信息包含人热门城市
4.	选择省份界面
   界面信息包含省份
5.	选择城市界面
           界面信息保护城市
6.	选择区县界面
           界面信息保护区县
==============================================
1.6.1	录入
序号	基本步骤	相关数据	补充步骤
1	录入手机号码		
1.	系统自动查询CRM系统中对应手机号码绑定的客户信息，
如果有弹窗，
弹窗操作见扩展1a，和如果没有，
弹出FOSS历史开单记录中对应手机号码绑定的客户信息，
并弹窗，弹窗操作见扩展1b；
2.	规则-请参见系统规则SR1、SR5、SR6；
2	录入电话号码		
1.	如果手机号码没有填写，
系统自动查询CRM系统中对应电话号码绑定的客户信息，
如果有弹窗，
弹窗操作见扩展2a，
如果没有，
弹出FOSS历史开单记录中对应手机号码绑定的客户信息，
并弹窗，弹窗操作见扩展2b；
1.	1、系统自动查询CRM系统中对应电话号码绑定的
客户信息和FOSS历史开单记录中对应手机号码绑定的客户信息，
并弹窗，弹窗操作参见扩展2a；
2.	规则-请参见系统规则
SR1、SR5 、SR6；
------------------------------------
3	录入收货联系人（收货部门）		
1.	规则-请参见系统规则SR2、SR3；
4	录入收货人地址		
1.	提供下拉框选择输入，
系统自动过滤输入的行政区下一级行政级的字段；
2.	地址在系统后台通过GIS系统进行匹配，
如果是禁行区域，地址颜色为红色，
如果是进仓区域，地址颜色为黄色
3.	规则-请参见系统规则SR4；
===================================
1.6.2	扩展
序号	扩展事件	相关数据	备注
1a	
当录入的手机号码在CRM系统中有手机号码绑定的客户信息，
则自动弹窗并显示手机号码为录入的手机号的所有客户信息，
营业员选择录入一条记录，并确定；
选择的客户信息自动带入收货客户信息中；
当光标焦点移至录入手机号码时，
系统自动调用CRM系统对应发货客户的历史发货记录，
并自动弹窗显示所有该发货客户的历史发货记录；
营业员选择一条记录，并确定，
选择的客户信息自动带信收货客户信息中；
	客户信息	1.	
	规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则；
2.	规则-请参见系统规则SR5 、SR6；
1.	规则-请参见系统规则SR5；
1b	当录入的手机号码在CRM系统中没有手机号码绑定的客户信息时，
则如果该客户在这3个月有发过货，
则弹出历史收货记录自动弹窗并显示手机号码为录入的手机号的所有客户信息，
营业员选择录入一条记录，并确定；选择的客户信息自动带入收货客户信息中；	
客户信息	1.	规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则；
2.	规则-请参见系统规则SR5 、SR6；

2a2a	当录入的电话号码在CRM系统中有电话号码绑定的客户信息，
则自动弹窗并显示电话号码为录入的电话号码的所有客户信息，
营业员选择录入一条记录，并确定；
选择的客户信息自动带入收货客户信息中；
当录入的电话号码在CRM系统中有电话号码绑定的客户信息，
则自动弹窗并显示电话号码为录入的电话号码的所有客户信息，
营业员选择录入一条记录，并确定；选择的客户信息自动带入收货客户信息中；	
客户信息客户信息	1.	规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则；
2.	规则-请参见系统规则SR5 、SR6；
1.	规则-请参见系统用例SUC-492中的“1.6.2扩展2a”的规则；
2.	规则-请参见系统规则SR6；
==============================================
2b	当录入的电话号码在CRM系统中没有电话号码绑定的客户信息时，
如果该客户在这3个月有发过货，则弹出历史收货记录，营业员选择录入一条记录，
并确定；选择的客户信息自动带入收货客户信息中；	客户信息	1.
	规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则；
2.	规则-请参见系统规则SR5 、SR6；
	==========================
1.7	业务规则
序号	描述
SR1	1.	收货客户手机号码及固定电话至少提供一个，
手机号码只能为数字并且为11位，固定电话号码只能为数字，
且可添加多个；
SR2	1.	当“运单开单”中的“开单提货方式”为“内部带货自提”时，
“收货联系人”字段更改为“收货部门”；
SR3	1.	若为公司内部带货，
则收货客户信息中的收货部门名称必须与OA系统中组织架构名称保持一致；
SR4	1.	客户详细地址必填至乡/镇，
且乡镇下一级内容不能为空；

2.	当鼠标点击规范化地址文本框时，
显示如下图片，
包含热门城市、省份、城市、县区，选择热门城市，
会直接跳到区县，现在省份后自动跳到城市，
选择城市后自动跳到区县（必须选择完上一级行政区域后，
才能选择下一行政区域），选择完区县后，
会把规范化地址显示在规范化文本框内，
例如：江苏省-苏州市-相城区


3.	地址可以进行拼音和首写字母进行匹配，
例如输入“GZ”会在规范化地址文本框下面显示 ；
匹配时可带出城市、区、
县等符合的信息，该设计来自官网，具体可以参考官网


4.	当提货方式含“自提”时，收货人地址为非必填项；
SR5	1.	使用电话号码和手机进行匹配，
如果是唯一匹配一条CRM客户信息时，
填充客户编码、客户名称、联系人、地址，
如果有多条需弹出选择框进行选择，
 如果查询不到CRM客户信息时，
 使用FOSS三个月运单历史记录中的收货信息查询，
 唯一匹配一条进行填充收货客户信息，
 多条进行弹窗选择，如果都查询不到，
 不做其他操作
2.	但是对于电话号码匹配，
只有当发货人手机、
客户名称为空时，
才会用电话号码检索并弹窗显示
3.	使用手机号码、
电话号码、
客户名称弹出选择框选择记录后覆盖原先记录
4.	修改联系人时，
需要清空客户名称，
当清空客户名称时，
会同时删除客户编码
5.	使用手机号码、
电话号码弹出选择框选择记录后覆盖原先记录
6.	点击客户名称查询控件，
弹出查询信息:窗口SUC-424-查找会员
7.	身份证号、客户编码、
客户名称、联系人编码可以查询到全公司的客户
	
1.	只有当收货人手机为空，
且发货客户信息已录入时，才会检索并弹窗显示；
2.	若未查询到历史记录，
则无法提示；
3.	通过选择录入的收货人信息均可修改；
4.	使用号码进行匹配，
如果是唯一匹配一条CRM客户信息时，填充客户编码和客户名称，如果有多条不做操作
SR6	1.	通过选择录入收货发货信息，
同时带出对应的目的站和提货网点信息；
2.	带出目的站仍然使用GIS进行查询，
并以GIS返回为准；
3.	若GIS未查询得出，
则以历史开单的目的站和提货网点信息为准；
================================
1.8	数据元素
1.8.1	录入收货客户信息
字段名称 	说明 	输入限制	输入项提示文本	长度	是否必填	备注
手机		数字		11	二者至少填一	
电话		数字		25		当“运单开单”中的“开单提货方式”为“内部带货自提”时，电话输入栏自动生成“[******]”，代替输入号码信息
收货联系人（收货部门）		文本		80	是	
收货人地址		下拉框、文本		100	是	当提货方式含“自提”时，收货人地址为非必填项；
客户名称		文本		80	否	不可修改
客户编码		文本		80	否	不可修改
--------------------------------------
1.8.2	选择收货客户
字段名称 	说明 	输入限制	输入项提示文本	长度	是否必填	备注
客户名称		文本		80		
手机		文本		11		
电话		文本		25		
收货联系人（收货部门）		文本		80		
收货人地址		文本		100		
联系人ID		文本		20		
联系人编码		文本		20		
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1.9	非功能性需求
使用量	每天处理的运单约为1000000单
2012年全网估计用户数	营业员数量约10000名
响应要求（如果与全系统要求 不一致的话）	系统一般要求
使用时间段	营业部、集中开单小组上班时间
高峰使用时间段	营业部：16：00-20：00
集中开单小组：21：00-次日4：00
=======================================
1.10	接口描述
接口名称 	对方系统（外部系统或内部其他模块）	接口描述
查询客户资料	CRM客户管理模块	
FOSS能过手机号或其它条件查询客户资料信息，
包括：客户名称、客户编码、发货收货联系人、
发货收货人地址等
查询公司架构	OA系统组织架构管理	
当开单提货方式为内部带货自提时，
FOSS向OA请求验证发货收货部门的有效性
 */

/**--------------------------------------
 * 营业员点击运单离线开单，
 * 进入运单离线开单界面。
 本界面为离线录入货物信息。
 1.	录入货物信息：
 录入信息包括：货物名称、总件数、总重量、
 货物尺寸、总体积、货物包装、货物类型、是否贵重物品；
 1.1	货物名称：货物的名称；
 1.2	总件数：收货时货物的总件数；
 1.3	总重量：收货时货物的总重量；
 1.4	货物尺寸：收货时货物的尺寸；
 1.5	总体积：收货时货物的总体积；
 1.6	货物包装：货物的包装，其包装总件数等于打木架和打木箱后的总件数；
 1.7	货物类型：
 1.7.1	运输类型为汽运时，
 货物类型为公司规则的分拣条件的类型，
 为唯一选择框，包括：A、B；
 1.7.2	运输类型为空运时，
 货物类型为下拉选择框，
 默认显示为普货，
 目前只这一个分类，
 该类型可做配置；
 1.8	是否贵重物品：
 货物是否为公司规则的贵重物品，
 为选择框；
 */
/**--------------------------------------
 * 1.	若货物为违禁品，
 * 	则系统自动提示“货物为违禁品，不可开单！”；
 2.	若货物为拒收品，
 则系统自动提示“货物为拒收品，不可开单！”；
 3.	若货物为贵重物品，
 则系统自动勾选“贵重物品”，
 且不可修改；
 4.	若货物为限保物品，
 则系统自动限定保价金额，且不可修改，
 并提示“货物为限保物品”；
 5.	违禁品、拒收品、
 贵重物品、限保物品（含保价金额上限）
 具体类型可在系统中进行配置；
 1.	货物重量单位为千克
 */
/**--------------------------------------
 * 1.	货物尺寸为计算器输入，
 * 显示为输入文本；
2.	尺寸计算单位为厘米，
尺寸计算出数据后转换单位为立方米后，
在货物体积中显示数据；例如：
尺寸录入为：50*50*20，
则体积显示数据为：0.05；
 */
/**--------------------------------------
 * 1.	货物体积单位为立方米；
2.	营业员可以修改通过尺寸计算器
计算得出的体积数据；
3.	系统设置货物重量体积比区间值（该值由基础资料配置），
在运单提交时，
系统自动对重量体积比进行校验：
即重量体积比X=重量/体积；
3.1	当X不在设置的区间中，
弹出提示“请确认录入的重量体积是否准确！”；
（该弹窗有两个按钮：确定、取消）点击确定时，
弹出离线开单确认运单信息界面；点击取消，
点返回运单录入界面；
3.2	当X在区间中，无提示；
直接进入确认运单信息界面；
--------------------------------------
 */
/**--------------------------------------
 * 1.	纸包装件数默认显示数值等于货物总件数，
 * 营业员可以修改各包装的件数；
 * 系统自动在录入下一个包装前计算显示剩余未录入的件数，
 * 例：某票货物为50件，则自动显示纸包装50，
 * 在营业员修改纸包装为20时，木包装自动显示为30，
 * 在营业员修改木包装为10时，
 * 纤包装自动显示为20，该过程中未录入包装数值的默认显示为0；
2.	货物包装总件数小于等于货物总件数；
 */
/**--------------------------------------
 * 1.	离线开单时，不录入代打木架信息；
 * 当木包装件数大于等于1时，系统不提示任何信息，
 * 也不弹出代打木架录入界面；
2.	离线开单的代打木架信息在离线开单提交时，
系统校验提醒；
 */
/**
 * 1.	运输类型为汽运时，货物类型为唯一选择项；即，
 * 非A即B；默认不可勾选，
 * 只有当走货路由经过特定的城市时需要录入货物类型,
 * 特定城市可在系统中进行配置；
2.	运输类型为空
默认显示为普货，目前只有这一个分类，该类型可做配置；
--------------------------------------
 */
/**--------------------------------------
 * 1.	系统根据货物名称匹配生成的勾选贵重物品，
 * 营业员不可去掉勾选；
2.	营业员也可以主动勾选贵重物品；
3.	件数等于1、体积小于等于0.05个方、
报价声明价值大于等于10000元，为贵重物品；
系统自动勾选贵重物品，
营业员可修改是否勾选；
4.	件数大于等于2时，平均体积（体积/件数）
小于等于0.5方，平均声明价值（保价声明价值/件数）
大于等于10000元，为贵重物品；
系统自动勾选贵重物品，
营业员可修改是否勾选；
1.	营业部开单时按打完木架后的包装开，
即包装中含“木架/木箱”，
开单件数为货物打木架/木箱前的实际件数（防止丢货），
尺寸和重量按照以下公式计算：
1.1	整票货物代打时：
开单体积=代打货物体积*1.4；
开单重量=所有货物重量+代打货物体积*42；
1.2	部分货物代打时，
开单体积=代打货物体积*1.4+未打木架货物体积；
开单重量=所有货物重量+代打货物体积*42。
即：营业部按照代打货物未打木架之前体积的1.4倍来开单收费，
重量另加，单票中未打木架的货物的体积和重量不变；
1.3	例如：一票货物需全部代打，
货物体积为1个方，重量为100KG，
则开单体积为1.4个方，
开单重量为100+1*42=142KG，
收取客户包装费为150*1.4=210元；
1.4	需要加托时，仍按照50元/个另外收取费用，
托的重量和体积不再另加；
营业部不需要再更改由于打木架引起重量和体积的变化；
2.	开单件数为代打木架前货物实际件数，
包装为打木架后的包装，
打木架后件数发生变化后，
需及时更改件数；
--------------------------------------
 */

/**--------------------------------------
 * 每天处理的运单约为1000000单
营业员数量约10000名
系统一般要求
营业部、集中开单小组上班时间
营业部：16：00-20：00
集中开单小组：21：00-次日4：00
 */

/**--------------------------------------
 * 本界面为录入增值服务信息。
界面主要分为三个部分：
录入增值服务、
录入包装费、
查询其它费用。
1.	录入增值服务
录入增值服务分为两个部分：
录入增值服务信息界面、
录入其它费用列表；
1.1	录入增值服务信息界面
录入增值服务信息界面包括：
1.1.1	保价声明价值；
1.1.2	保价费率：
保价费率可由基础资料配置，
可按出发城市区域，
出发营业部等；
1.1.3	保价费；
1.1.4	代收货款；
1.1.5	代收费率；
1.1.6	代收手续费；
1.1.7	退款类型：
包括三日退、
退日退、
审核退，
默认三日退；
1.1.8	包装费；
1.1.9	装卸费；
1.1.10	送货费；
1.1.11	其它费用合计；
1.1.12	返单类别：
包括无需返单、
原件签收单返回、
传真件签收单返回、
扫描件返回，
默认无需返单；
1.1.13	预付费保密；
1.2	录入其它费用列表
录入其它费用列表包括：
1.2.1	费用名称；
1.2.2	费用金额；
1.2.3	新增其它费用：
功能按钮；
1.2.4	删除其它费用：
功能按钮；
2.	录入包装费
其界面和界面和需求详见系统用例“DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息”中“录入包装费”；
3.	查询其它费用
其界面和界面和需求详见系统用例“DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息”中“查询其它费用”；
--------------------------------------
 */
/**
 * 录入保价声明价值
 * 1.	系统根据录入的保价声明价值和系统自动获得的保价费率计算保价费；
 * 2.	规则-请参见系统用例“DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息”中系统规则SR1、SR3；
 * 录入代货货款
 * 1.	系统根据录入的代收货款和系统自动获得的代收费率计算代收手续费；
2.	规则-请参见系统用例“DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息”中系统规则SR2、SR3；
录入退款类型
1.	规则-请参见系统用例“DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息”中系统规则SR2、SR4；
2.	规则-请参见系统规则SR1；
录入包装费：焦点移至包装费时，
自动弹出包装费录入界面
1.	规则-请参见系统用例“DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息”中系统规则SR5；
录入装卸费
 * 1.	规则-请参见系统用例“DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息”中系统规则SR6；
 * 录入送货费
 * 1.	规则-请参见系统用例“DP-FOSS-接送货系统用例-运单生成-
 * 确认承运信息-录入增值服务信息”中系统规则SR7；
 * 录入其它费用：点击新增其它费用，增加新的其它费用列后，点击放大镜，弹出其它费用查询列表；
 * 运单生成-确认承运信息-录入增值服务信息”中系统规则SR8；
 * 录入返单类别
 * 1.	规则-请参见系统用例“DP-FOSS-接送货系统用例
 * -运单生成-确认承运信息-录入增值服务信息”中系统规则SR9；
 * 录入预付费保密
 * 1.	规则-请参见系统用例“DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息”中系统规则
 * SR10,SR11,SR12；
 * 1.	离线开单中不生成代收货款退款收银人信息，
 * 且不录入；
 * 其代收货款的退款收银人信息在有线后提交运单时录入；
 * 字段名称 	说明 	输入限制	输入项提示文本	长度	是否必填	备注
 * 保价声明价值		数字		8	是	
保价费率		数字、符号		8		
保价费		数字		8		系统自动生成
代收货款		数字		8	是	
代收费率		数字、符号		8		
代收手续费		数字		8		系统自动生成
退款类型		下拉框		3	是	
包装费		数字		8	是	
装卸费		数字		8	是	
送货费		数字		8	是	
其它费用合计		数字		8	是	
返单类别		下拉框		10	是	
预付费保密		复选框		1	否	
--------------------------------------
使用量	每天处理的运单约为1000000单
2012年全网估计用户数	营业员数量约10000名
响应要求（如果与全系统要求 不一致的话）	系统一般要求
使用时间段	营业部、集中开单小组上班时间
高峰使用时间段	营业部：16：00-20：00
集中开单小组：21：00-次日4：00
--------------------------------------
1.10	接口描述
输入的尺寸可以进行加减例如：1*1*1*5+2*2*2*3-0.5*0.5*0.5*
体积为空时，录入尺寸后，
填充体积。
当尺寸修改时，
体积随之变处。
当修改体积时，
尺寸不变化。 

货物包装总件数小于等于货物总件数，
如果大于总件数，
提示：“包装件数不能大于总件数”
--------------------------------------
贵重物品规则变更： 
1.修改现有系统对"贵重物品"的判断条件如下： 
a. 单票单件货物，
体积≤0.05立方且保价声明价值≥1万元； 
b. 单票多件货物，
平均单件体积≤0.2立方且平均单件保价声明价值≥1万元；
（注：平均单件体积=开单总体积÷开单件数，
平均单件保价=开单保价声明价值÷开单件数） 
c. 高保价货物，
单票货物保价≥10万元； 
满足以上任意一个条件时，
系统将判定该票货物为贵重物品并自动勾选"贵重物品"复选框，
且为灰色，不可编辑；不满足以上条件时，
该复选框为可编辑状态，
用户可根据实际情况自行选择是否勾选； 
2.若"贵重物品"复选框被勾选，
则在【储运注意事项】中自动加入提示记录"贵重物品"字段，
若该货物为贵重物品时，
"储运注意事项"中信息显示优先级为：贵重物品＞其他； 
--------------------------------------
尺寸录入框可以不录入件数，
如件数为1时。
因此录入框即可以输入10*10*10，
又可以输入10*10*10*1
进入该页面时，木架和木箱都赋初始值0，
仍保持必填，操作员根据实际情况改，
选择木架或木箱或两者都选择后则该值不能为0
--------------------------------------
	ISSUE-1105
1.运单开单时，货物的件数、
重量及体积文本框是必填项，
默认值为空； 
2.件数只能是大于等于1的整数，
重量及体积只能大于0。
体积、重量这种过程数据保留两位小数
--------------------------------------
前置条件		1.	贵重物品基础资料
2.	违禁物品基础资料
3.	分拣目的站基础资料
后置条件		1.	打木架录入
2.	运单收银
--------------------------------------
营业员点击运单开单，进入运单开单界面。
本界面为录入货物信息。
界面主要分为两个部分：录入货物信息、代收木架信息录入。
1.	录入货物信息：
录入信息包括：货物名称、总件数、
总重量、货物尺寸、
总体积、货物包装、
货物类型、是否贵重物品；
1.1	货物名称：
货物的名称；
1.2	总件数：
收货时货物的总件数；
1.3	总重量：
收货时货物的总重量；
1.4	货物尺寸：
收货时货物的尺寸；
1.5	总体积：
收货时货物的总体积；
1.6	货物包装：
货物的包装，
其包装总件数等于打木架和打木箱后的总件数；
1.7	货物类型：
1.7.1	运输类型为汽运时，
货物类型为公司规则的分拣条件的类型， 
为唯一选择框，包括：A、B；
1.7.2	运输类型为空运时，
货物类型为下拉选择框，
默认显示为普货，
目前只这一个分类，
该类型可做配置；
1.8	是否贵重物品：
货物是否为公司规则的贵重物品，
为选择框；
2.	代打木架信息录入；
当包装木的件数大于等于1时，
自动弹出对话框：“是否收入代打木架？”，是，
则进入场代打木架信息录入界面；
录入信息包括：代打部门、打木架货物件数、
代打木架要求、打木架货物尺寸、打木架货物体积、
打木箱货物件数、代打木箱要求、打木箱货物尺寸、打木架货物体积；
2.1	代打部门：
代打木箱或木架的部门名称；
2.2	打木架货物件数：
需要代打木架的货物件数；
2.3	代打木架要求：
代打木架的要求，
如“1和2合打，3、4分开打”；
2.4	打木架货物尺寸：
需要代打木架的货物尺寸；
2.5	打木架货物体积：
需要代打木架的货物体积；
2.6	打木箱货物件数：
需要代打木架的货物件数；
2.7	代打木箱要求：
代打木箱的要求，如“5和6合打，加一个木托”；
2.8	打木箱货物尺寸：
需要代打木箱的货物尺寸；
2.9	打木箱货物体积：
需要代打木箱的货物体积；
2.10	功能按钮：
确定、关闭、重置；k
--------------------------------------------------
1.6.1	录入货物信息
序号	基本步骤	相关数据	补充步骤
1	录入货物名称		
	1.	系统自动匹配违禁品、贵重物品、限保物品基础资料，生成规则；
2.	规则-请参见系统规则SR1；
2	录入总件数		
	规则-请参见系统规则SR2
3	录入总重量		
	1.	规则-请参见系统规则SR2、SR11；
4	录入货物尺寸		
	1.	规则-请参见系统规则SR3、SR4；
5	录入总体积		
	1.	规则-请参见系统规则SR2、SR3、SR4、SR10；
6	录入货物包装		
	1.	当木包装大于等于1时，
		系统校验出发城市和对应目的站的走货路由中是否有有打木架功能的部门，
		若有，则提醒营业员“是否收入代打木架？”，是，
		则进入场代打木架信息录入界面”，
		并显示第一个有打木架功能的部门名称；
		若走货路由中无有打木架功能的部门，
		则不提示“是否收入代打木架？”；
2.	规则-请参见系统规则SR5、SR6、SR10；
7	录入货物类型		
	1.	规则-请参见系统规则SR7；
8	录入是否贵重货物		
	1.	规则-请参见系统规则SR8；
9       录入打木箱货物体积		
	1.	规则-请参见系统规则SR3、SR4、SR10；
	-----------------------------------
	1.	若货物为违禁品，
	则系统自动提示“货物为违禁品，不可开单！”；
2.	若货物为贵重物品，
则系统自动勾选“贵重物品”，
且不可修改；
3.	若货物为限保物品，
则系统自动限定保价金额，
且不可修改，
并提示“货物为限保物品”；
4.	违禁品、
拒收品、
贵重物品、
限保物品（含保价金额上限）
具体类型可在系统中进行配置；
1.	货物重量单位为千克；
2.	运单开单时，
货物的件数、
重量及体积文本框是必填项，
默认值为空； 
3.	件数只能是大于等于1的整数，
重量及体积只能大于0。
4.	体积、
重量这种过程数据保留两位小数
1.	尺寸录入文本框，
支持'长*宽*高*件数+长*宽*高*（即多个尺寸相加）的计算；
2.	如果件数是1，
则不强制在录入时要“*1”；
3.	货物尺寸为计算器输入，
输入的尺寸可以进行加减，
例如：1*1*1*5+2*2*2*3-0.5*0.5*0.5，
显示为输入文本；
4.	尺寸计算单位为厘米，
尺寸计算出数据后转换单位为立方米后，
在货物体积中显示数据；
例如：尺寸录入为：50*50*20（其中20为件数），
则体积显示数据为：0.05； 
5.	体积为空时，
录入尺寸后，填充体积。
当尺寸修改时，体积随之变处。
当修改体积时，尺寸不变化。
6.	体积初始值为“0”，
仍保持必填，
操作员根据实际情况改，
选择木架或木箱或两者都选择后则该值不能为0

1.	货物体积单位为立方米；
2.	营业员可以修改通过尺寸计算器计算得出的体积数据；
3.	系统设置货物重量体积比区间值（该值由基础资料配置），
在运单提交时，
系统自动对重量体积比进行校验：即重量体积比X=重量/体积； 
3.1	当X不在设置的区间中，
弹出提示“请确认录入的重量体积是否准确！”；
（该弹窗有两个按钮：确定、取消）点击确定时，
弹出确认运单信息界面；点击取消，点返回运单录入界面；
3.2	当X在区间中，无提示；
直接进入确认运单信息界面；
4.	录入重量体积后，
系统校验单票的重量体积及单件（平均单件）
的重量体积是否满足“修改-查询行政组织业务属性”
基础资料中的单票和单件重量体积限制；
只要该四项中有一项不满足，
则提示“XX超出提货网点限制，
请重新选择提货网点！”； 
1.	货物包装总件数小于等于货物总件数，
如果大于总件数，
提示：“包装件数不能大于总件数”；
1.	当木包装件数大于等于1时，
系统校验出发城市和对应目的站的走货路由中是否有有打木架功能的部门，
若有，则提醒营业员“是否收入代打木架？”，是，
则进入场代打木架信息录入界面”，
并显示第一个有打木架功能的部门名称；
若走货路由中无有打木架功能的部门，
则不提示“是否收入代打木架？”；
2.	当走货路由中有有打木架功能的部门为多个时，
只显示系统路由中第一有有打木架功能的部门，
且不可修改；
1.	运输类型为汽运时，
货物类型为唯一选择项；
即，非A即B；默认不可勾选，
只有当走货路由经过特定的城市时需要录入货物类型,
特定城市可在系统中进行配置；
2.	运输类型为空运时，
货物类型为下拉选择框，
默认显示为普货，
目前只有这一个分类，
该类型可做配置；
1.	贵重物品判断规则： 
a. 单票单件货物，
体积≤0.05立方且保价声明价值≥1万元； 
b. 单票多件货物，
平均单件体积≤0.2立方且平均单件保价声明价值≥1万元；
（注：平均单件体积=开单总体积÷开单件数，
平均单件保价=开单保价声明价值÷开单件数） 
c. 高保价货物，
单票货物保价≥10万元； 
满足以上任意一个条件时，
系统将判定该票货物为贵重物品并自动勾选"贵重物品"复选框，
且为灰色，
不可编辑；
不满足以上条件时，
该复选框为可编辑状态，
用户可根据实际情况自行选择是否勾选； 
2.	若"贵重物品"复选框被勾选，
则在【储运注意事项】中自动加入提示记录"贵重物品"字段
，若该货物为贵重物品时，
"储运注意事项"中信息显示优先级为：
贵重物品＞其他；
======================================
1.	录入的打木架货物件数和打木箱件数之和必须大于等于录入的木包装件数；
2.	系统默认标签流水号前X的货物为需要代打木架货物，
X等于录入的“打木架货物件数”和“打木箱货物件数”之和；
3.	营业员在打印标签时，
按流水号先贴要打木架或打木箱的货物；
1.	录入的打木架货物体积和打木箱货物体积之和乘以1.4必须小于等于货物总体积；
该1.4为打木架体积计算系统，可配置；
2.	营业部开单时按打完木架后的包装开，
即包装中含“木架/木箱”，
开单件数为货物打木架/木箱前的实际件数（防止丢货），
尺寸和重量按照以下公式计算：
1.1	整票货物代打时：开单体积=代打货物体积*1.4；
开单重量=所有货物重量+代打货物体积*42；
1.2	部分货物代打时，
开单体积=代打货物体积*1.4+未打木架货物体积；
开单重量=所有货物重量+代打货物体积*42。
即：营业部按照代打货物未打木架之前体积的1.4倍来开单收费，
重量另加，
单票中未打木架的货物的体积和重量不变；
1.3	例如：一票货物需全部代打，货物体积为1个方，
重量为100KG，则开单体积为1.4个方，
开单重量为100+1*42=142KG，
收取客户包装费为150*1.4=210元；
1.4	需要加托时，仍按照50元/个另外收取费用，
托的重量和体积不再另加；
营业部不需要再更改由于打木架引起重量和体积的变化；
3.	打木架要在“对内备注”中备注“代打木架/木箱”，
特殊要求（特别是合打情况）必须在对内备注和A4纸上都注明，
例如：货物1、2、3合打成一件等；
4.	开单件数为代打木架前货物实际件数，
包装为打木架后的包装，打木架后件数发生变化后，
需及时更改件数；
=======================================
1.8.1	录入货物信息
字段名称 	说明 	输入限制	输入项提示文本	长度	是否必填	备注
货物名称		文本		100	是	
货物总件数		数字		4	是	
货物总重量		数字		8	是	
货物尺寸		数字、符号		500	否	
货物总体积		数字		8	是	
货物包装		数字、文本		4	是	
货物类型		选择框		10	否	
贵重物品		选择框		1	否	
=======================================
1.8.2	代打木架信息录入
字段名称 	说明 	输入限制	输入项提示文本	长度	是否必填	备注
代打部门		文本		20	是	
打木架货物件数		数字		4	是	
代打木架要求		文本		100	是	
打木架货物尺寸		数字、符号		500	否	
打木架货物体积		数字		8	是	
打木箱货物件数		数字		4	是	
代打木箱要求		文本		100	是	
打木箱货物尺寸		数字、符号		500	否	
打木箱货物体积		数字		8	是	
==========================================
使用量	每天处理的运单约为1000000单
2012年全网估计用户数	营业员数量约10000名
响应要求（如果与全系统要求 不一致的话）	系统一般要求
使用时间段	营业部、集中开单小组上班时间
高峰使用时间段	营业部：16：00-20：00
集中开单小组：21：00-次日4：00
============================================
根据电话号码带出客户信息，
仅在客户名称为空的前提下才会有效。
即意味着由其他方式带出客户信息后，
修改电话号码并不会触发重新的检索。
==========================================
1.	使用电话号码和手机进行匹配，
如果是唯一匹配一条CRM客户信息时，
填充客户编码、客户名称、联系人、地址，
如果有多条需弹出选择框进行选择， 
如果查询不到CRM客户信息时，
使用FOSS三个月运单历史记录中的收货信息查询，
唯一匹配一条进行填充收货客户信息，多条进行弹窗选择，
如果都查询不到，不做其他操作
2.	但是对于电话号码匹配，只有当发货人手机、
客户名称为空时，才会用电话号码检索并弹窗显示使用手机号码、
电话号码、客户名称弹出选择框选择记录后覆盖原先记录
3.	修改联系人时，需要清空客户名称，
当清空客户名称时，会同时删除客户编码
4.	使用手机号码、
电话号码弹出选择框选择记录后覆盖原先记录
==========================================
身份证号、客户编码、客户名称、
联系人编码可以查询到全公司的客户
==========================================
本界面分为两个界面：录入收货客户信息、选择收货客户。
1.	录入收货客户信息：
界面为信息录入界面：包括：手机、电话、
发货收货联系人（发货收货部门）、发货收货人地址；
1.1	手机：发货收货人手机号码；
1.2	电话：发货收货人电话号码；
1.3	收货联系人（收货部门）：
收货客户的客户姓名，
当“运单开单”中的“开单提货方式”
为“内部带货自提”时，
“收货联系人”字段更改为“收货部门”；
1.4	收货人地址：收货客户的详细联系地址，
支持国家行政区域自动过滤；
1.5	客户名称
1.6	客户编码
2.	选择收货客户界面：
界面为选择客户信息界面：包括两部分：
客户信息列表区域、功能按钮区域；
2.1.	客户信息列表区域：
包括：联系人、手机、电话、
地址（规范化地址和详细地址）；
2.2.	功能按钮区域：
包括：确定、取消；
3.	    选择热门城市界面
   界面信息包含人热门城市
4.	选择省份界面
   界面信息包含省份
5.	选择城市界面
           界面信息保护城市
6.	选择区县界面
           界面信息保护区县
==============================================
1.6.1	录入
序号	基本步骤	相关数据	补充步骤
1	录入手机号码		
1.	系统自动查询CRM系统中对应手机号码绑定的客户信息，
如果有弹窗，
弹窗操作见扩展1a，和如果没有，
弹出FOSS历史开单记录中对应手机号码绑定的客户信息，
并弹窗，弹窗操作见扩展1b；
2.	规则-请参见系统规则SR1、SR5、SR6；
2	录入电话号码		
1.	如果手机号码没有填写，
系统自动查询CRM系统中对应电话号码绑定的客户信息，
如果有弹窗，
弹窗操作见扩展2a，
如果没有，
弹出FOSS历史开单记录中对应手机号码绑定的客户信息，
并弹窗，弹窗操作见扩展2b；
1.	1、系统自动查询CRM系统中对应电话号码绑定的
客户信息和FOSS历史开单记录中对应手机号码绑定的客户信息，
并弹窗，弹窗操作参见扩展2a；
2.	规则-请参见系统规则
SR1、SR5 、SR6；
------------------------------------
3	录入收货联系人（收货部门）		
1.	规则-请参见系统规则SR2、SR3；
4	录入收货人地址		
1.	提供下拉框选择输入，
系统自动过滤输入的行政区下一级行政级的字段；
2.	地址在系统后台通过GIS系统进行匹配，
如果是禁行区域，地址颜色为红色，
如果是进仓区域，地址颜色为黄色
3.	规则-请参见系统规则SR4；
===================================
1.6.2	扩展
序号	扩展事件	相关数据	备注
1a	
当录入的手机号码在CRM系统中有手机号码绑定的客户信息，
则自动弹窗并显示手机号码为录入的手机号的所有客户信息，
营业员选择录入一条记录，并确定；
选择的客户信息自动带入收货客户信息中；
当光标焦点移至录入手机号码时，
系统自动调用CRM系统对应发货客户的历史发货记录，
并自动弹窗显示所有该发货客户的历史发货记录；
营业员选择一条记录，并确定，
选择的客户信息自动带信收货客户信息中；
	客户信息	1.	
	规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则；
2.	规则-请参见系统规则SR5 、SR6；
1.	规则-请参见系统规则SR5；
1b	当录入的手机号码在CRM系统中没有手机号码绑定的客户信息时，
则如果该客户在这3个月有发过货，
则弹出历史收货记录自动弹窗并显示手机号码为录入的手机号的所有客户信息，
营业员选择录入一条记录，并确定；选择的客户信息自动带入收货客户信息中；	
客户信息	1.	规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则；
2.	规则-请参见系统规则SR5 、SR6；

2a2a	当录入的电话号码在CRM系统中有电话号码绑定的客户信息，
则自动弹窗并显示电话号码为录入的电话号码的所有客户信息，
营业员选择录入一条记录，并确定；
选择的客户信息自动带入收货客户信息中；
当录入的电话号码在CRM系统中有电话号码绑定的客户信息，
则自动弹窗并显示电话号码为录入的电话号码的所有客户信息，
营业员选择录入一条记录，并确定；选择的客户信息自动带入收货客户信息中；	
客户信息客户信息	1.	规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则；
2.	规则-请参见系统规则SR5 、SR6；
1.	规则-请参见系统用例SUC-492中的“1.6.2扩展2a”的规则；
2.	规则-请参见系统规则SR6；
==============================================
2b	当录入的电话号码在CRM系统中没有电话号码绑定的客户信息时，
如果该客户在这3个月有发过货，则弹出历史收货记录，营业员选择录入一条记录，
并确定；选择的客户信息自动带入收货客户信息中；	客户信息	1.
	规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则；
2.	规则-请参见系统规则SR5 、SR6；
	==========================
1.7	业务规则
序号	描述
SR1	1.	收货客户手机号码及固定电话至少提供一个，
手机号码只能为数字并且为11位，固定电话号码只能为数字，
且可添加多个；
SR2	1.	当“运单开单”中的“开单提货方式”为“内部带货自提”时，
“收货联系人”字段更改为“收货部门”；
SR3	1.	若为公司内部带货，
则收货客户信息中的收货部门名称必须与OA系统中组织架构名称保持一致；
SR4	1.	客户详细地址必填至乡/镇，
且乡镇下一级内容不能为空；

2.	当鼠标点击规范化地址文本框时，
显示如下图片，
包含热门城市、省份、城市、县区，选择热门城市，
会直接跳到区县，现在省份后自动跳到城市，
选择城市后自动跳到区县（必须选择完上一级行政区域后，
才能选择下一行政区域），选择完区县后，
会把规范化地址显示在规范化文本框内，
例如：江苏省-苏州市-相城区


3.	地址可以进行拼音和首写字母进行匹配，
例如输入“GZ”会在规范化地址文本框下面显示 ；
匹配时可带出城市、区、
县等符合的信息，该设计来自官网，具体可以参考官网


4.	当提货方式含“自提”时，收货人地址为非必填项；
SR5	1.	使用电话号码和手机进行匹配，
如果是唯一匹配一条CRM客户信息时，
填充客户编码、客户名称、联系人、地址，
如果有多条需弹出选择框进行选择，
 如果查询不到CRM客户信息时，
 使用FOSS三个月运单历史记录中的收货信息查询，
 唯一匹配一条进行填充收货客户信息，
 多条进行弹窗选择，如果都查询不到，
 不做其他操作
2.	但是对于电话号码匹配，
只有当发货人手机、
客户名称为空时，
才会用电话号码检索并弹窗显示
3.	使用手机号码、
电话号码、
客户名称弹出选择框选择记录后覆盖原先记录
4.	修改联系人时，
需要清空客户名称，
当清空客户名称时，
会同时删除客户编码
5.	使用手机号码、
电话号码弹出选择框选择记录后覆盖原先记录
6.	点击客户名称查询控件，
弹出查询信息:窗口SUC-424-查找会员
7.	身份证号、客户编码、
客户名称、联系人编码可以查询到全公司的客户
	
1.	只有当收货人手机为空，
且发货客户信息已录入时，才会检索并弹窗显示；
2.	若未查询到历史记录，
则无法提示；
3.	通过选择录入的收货人信息均可修改；
4.	使用号码进行匹配，
如果是唯一匹配一条CRM客户信息时，填充客户编码和客户名称，如果有多条不做操作
SR6	1.	通过选择录入收货发货信息，
同时带出对应的目的站和提货网点信息；
2.	带出目的站仍然使用GIS进行查询，
并以GIS返回为准；
3.	若GIS未查询得出，
则以历史开单的目的站和提货网点信息为准；
================================
1.8	数据元素
1.8.1	录入收货客户信息
字段名称 	说明 	输入限制	输入项提示文本	长度	是否必填	备注
手机		数字		11	二者至少填一	
电话		数字		25		当“运单开单”中的“开单提货方式”为“内部带货自提”时，电话输入栏自动生成“[******]”，代替输入号码信息
收货联系人（收货部门）		文本		80	是	
收货人地址		下拉框、文本		100	是	当提货方式含“自提”时，收货人地址为非必填项；
客户名称		文本		80	否	不可修改
客户编码		文本		80	否	不可修改
--------------------------------------
1.8.2	选择收货客户
字段名称 	说明 	输入限制	输入项提示文本	长度	是否必填	备注
客户名称		文本		80		
手机		文本		11		
电话		文本		25		
收货联系人（收货部门）		文本		80		
收货人地址		文本		100		
联系人ID		文本		20		
联系人编码		文本		20		
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1.9	非功能性需求
使用量	每天处理的运单约为1000000单
2012年全网估计用户数	营业员数量约10000名
响应要求（如果与全系统要求 不一致的话）	系统一般要求
使用时间段	营业部、集中开单小组上班时间
高峰使用时间段	营业部：16：00-20：00
集中开单小组：21：00-次日4：00
=======================================
1.10	接口描述
接口名称 	对方系统（外部系统或内部其他模块）	接口描述
查询客户资料	CRM客户管理模块	
FOSS能过手机号或其它条件查询客户资料信息，
包括：客户名称、客户编码、发货收货联系人、
发货收货人地址等
查询公司架构	OA系统组织架构管理	
当开单提货方式为内部带货自提时，
FOSS向OA请求验证发货收货部门的有效性
 */

/**--------------------------------------
 * 营业员点击运单离线开单，
 * 进入运单离线开单界面。
 本界面为离线录入货物信息。
 1.	录入货物信息：
 录入信息包括：货物名称、总件数、总重量、
 货物尺寸、总体积、货物包装、货物类型、是否贵重物品；
 1.1	货物名称：货物的名称；
 1.2	总件数：收货时货物的总件数；
 1.3	总重量：收货时货物的总重量；
 1.4	货物尺寸：收货时货物的尺寸；
 1.5	总体积：收货时货物的总体积；
 1.6	货物包装：货物的包装，其包装总件数等于打木架和打木箱后的总件数；
 1.7	货物类型：
 1.7.1	运输类型为汽运时，
 货物类型为公司规则的分拣条件的类型，
 为唯一选择框，包括：A、B；
 1.7.2	运输类型为空运时，
 货物类型为下拉选择框，
 默认显示为普货，
 目前只这一个分类，
 该类型可做配置；
 1.8	是否贵重物品：
 货物是否为公司规则的贵重物品，
 为选择框；
 */
/**--------------------------------------
 * 1.	若货物为违禁品，
 * 	则系统自动提示“货物为违禁品，不可开单！”；
 2.	若货物为拒收品，
 则系统自动提示“货物为拒收品，不可开单！”；
 3.	若货物为贵重物品，
 则系统自动勾选“贵重物品”，
 且不可修改；
 4.	若货物为限保物品，
 则系统自动限定保价金额，且不可修改，
 并提示“货物为限保物品”；
 5.	违禁品、拒收品、
 贵重物品、限保物品（含保价金额上限）
 具体类型可在系统中进行配置；
 1.	货物重量单位为千克
 */
/**--------------------------------------
 * 1.	货物尺寸为计算器输入，
 * 显示为输入文本；
2.	尺寸计算单位为厘米，
尺寸计算出数据后转换单位为立方米后，
在货物体积中显示数据；例如：
尺寸录入为：50*50*20，
则体积显示数据为：0.05；
 */
/**--------------------------------------
 * 1.	货物体积单位为立方米；
2.	营业员可以修改通过尺寸计算器
计算得出的体积数据；
3.	系统设置货物重量体积比区间值（该值由基础资料配置），
在运单提交时，
系统自动对重量体积比进行校验：
即重量体积比X=重量/体积；
3.1	当X不在设置的区间中，
弹出提示“请确认录入的重量体积是否准确！”；
（该弹窗有两个按钮：确定、取消）点击确定时，
弹出离线开单确认运单信息界面；点击取消，
点返回运单录入界面；
3.2	当X在区间中，无提示；
直接进入确认运单信息界面；
--------------------------------------
 */
/**--------------------------------------
 * 1.	纸包装件数默认显示数值等于货物总件数，
 * 营业员可以修改各包装的件数；
 * 系统自动在录入下一个包装前计算显示剩余未录入的件数，
 * 例：某票货物为50件，则自动显示纸包装50，
 * 在营业员修改纸包装为20时，木包装自动显示为30，
 * 在营业员修改木包装为10时，
 * 纤包装自动显示为20，该过程中未录入包装数值的默认显示为0；
2.	货物包装总件数小于等于货物总件数；
 */
/**--------------------------------------
 * 1.	离线开单时，不录入代打木架信息；
 * 当木包装件数大于等于1时，系统不提示任何信息，
 * 也不弹出代打木架录入界面；
2.	离线开单的代打木架信息在离线开单提交时，
系统校验提醒；
 */
/**
 * 1.	运输类型为汽运时，货物类型为唯一选择项；即，
 * 非A即B；默认不可勾选，
 * 只有当走货路由经过特定的城市时需要录入货物类型,
 * 特定城市可在系统中进行配置；
2.	运输类型为空
默认显示为普货，目前只有这一个分类，该类型可做配置；
--------------------------------------
 */
/**--------------------------------------
 * 1.	系统根据货物名称匹配生成的勾选贵重物品，
 * 营业员不可去掉勾选；
2.	营业员也可以主动勾选贵重物品；
3.	件数等于1、体积小于等于0.05个方、
报价声明价值大于等于10000元，为贵重物品；
系统自动勾选贵重物品，
营业员可修改是否勾选；
4.	件数大于等于2时，平均体积（体积/件数）
小于等于0.5方，平均声明价值（保价声明价值/件数）
大于等于10000元，为贵重物品；
系统自动勾选贵重物品，
营业员可修改是否勾选；
1.	营业部开单时按打完木架后的包装开，
即包装中含“木架/木箱”，
开单件数为货物打木架/木箱前的实际件数（防止丢货），
尺寸和重量按照以下公式计算：
1.1	整票货物代打时：
开单体积=代打货物体积*1.4；
开单重量=所有货物重量+代打货物体积*42；
1.2	部分货物代打时，
开单体积=代打货物体积*1.4+未打木架货物体积；
开单重量=所有货物重量+代打货物体积*42。
即：营业部按照代打货物未打木架之前体积的1.4倍来开单收费，
重量另加，单票中未打木架的货物的体积和重量不变；
1.3	例如：一票货物需全部代打，
货物体积为1个方，重量为100KG，
则开单体积为1.4个方，
开单重量为100+1*42=142KG，
收取客户包装费为150*1.4=210元；
1.4	需要加托时，仍按照50元/个另外收取费用，
托的重量和体积不再另加；
营业部不需要再更改由于打木架引起重量和体积的变化；
2.	开单件数为代打木架前货物实际件数，
包装为打木架后的包装，
打木架后件数发生变化后，
需及时更改件数；
--------------------------------------
 */

/**--------------------------------------
 * 每天处理的运单约为1000000单
营业员数量约10000名
系统一般要求
营业部、集中开单小组上班时间
营业部：16：00-20：00
集中开单小组：21：00-次日4：00
 */

/**--------------------------------------
 * 本界面为录入增值服务信息。
界面主要分为三个部分：
录入增值服务、
录入包装费、
查询其它费用。
1.	录入增值服务
录入增值服务分为两个部分：
录入增值服务信息界面、
录入其它费用列表；
1.1	录入增值服务信息界面
录入增值服务信息界面包括：
1.1.1	保价声明价值；
1.1.2	保价费率：
保价费率可由基础资料配置，
可按出发城市区域，
出发营业部等；
1.1.3	保价费；
1.1.4	代收货款；
1.1.5	代收费率；
1.1.6	代收手续费；
1.1.7	退款类型：
包括三日退、
退日退、
审核退，
默认三日退；
1.1.8	包装费；
1.1.9	装卸费；
1.1.10	送货费；
1.1.11	其它费用合计；
1.1.12	返单类别：
包括无需返单、
原件签收单返回、
传真件签收单返回、
扫描件返回，
默认无需返单；
1.1.13	预付费保密；
1.2	录入其它费用列表
录入其它费用列表包括：
1.2.1	费用名称；
1.2.2	费用金额；
1.2.3	新增其它费用：
功能按钮；
1.2.4	删除其它费用：
功能按钮；
2.	录入包装费
其界面和界面和需求详见系统用例“DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息”中“录入包装费”；
3.	查询其它费用
其界面和界面和需求详见系统用例“DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息”中“查询其它费用”；
--------------------------------------
 */
/**
 * 录入保价声明价值
 * 1.	系统根据录入的保价声明价值和系统自动获得的保价费率计算保价费；
 * 2.	规则-请参见系统用例“DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息”中系统规则SR1、SR3；
 * 录入代货货款
 * 1.	系统根据录入的代收货款和系统自动获得的代收费率计算代收手续费；
2.	规则-请参见系统用例“DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息”中系统规则SR2、SR3；
录入退款类型
1.	规则-请参见系统用例“DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息”中系统规则SR2、SR4；
2.	规则-请参见系统规则SR1；
录入包装费：焦点移至包装费时，
自动弹出包装费录入界面
1.	规则-请参见系统用例“DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息”中系统规则SR5；
录入装卸费
 * 1.	规则-请参见系统用例“DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息”中系统规则SR6；
 * 录入送货费
 * 1.	规则-请参见系统用例“DP-FOSS-接送货系统用例-运单生成-
 * 确认承运信息-录入增值服务信息”中系统规则SR7；
 * 录入其它费用：点击新增其它费用，增加新的其它费用列后，点击放大镜，弹出其它费用查询列表；
 * 运单生成-确认承运信息-录入增值服务信息”中系统规则SR8；
 * 录入返单类别
 * 1.	规则-请参见系统用例“DP-FOSS-接送货系统用例
 * -运单生成-确认承运信息-录入增值服务信息”中系统规则SR9；
 * 录入预付费保密
 * 1.	规则-请参见系统用例“DP-FOSS-接送货系统用例-运单生成-确认承运信息-录入增值服务信息”中系统规则
 * SR10,SR11,SR12；
 * 1.	离线开单中不生成代收货款退款收银人信息，
 * 且不录入；
 * 其代收货款的退款收银人信息在有线后提交运单时录入；
 * 字段名称 	说明 	输入限制	输入项提示文本	长度	是否必填	备注
 * 保价声明价值		数字		8	是	
保价费率		数字、符号		8		
保价费		数字		8		系统自动生成
代收货款		数字		8	是	
代收费率		数字、符号		8		
代收手续费		数字		8		系统自动生成
退款类型		下拉框		3	是	
包装费		数字		8	是	
装卸费		数字		8	是	
送货费		数字		8	是	
其它费用合计		数字		8	是	
返单类别		下拉框		10	是	
预付费保密		复选框		1	否	
--------------------------------------
使用量	每天处理的运单约为1000000单
2012年全网估计用户数	营业员数量约10000名
响应要求（如果与全系统要求 不一致的话）	系统一般要求
使用时间段	营业部、集中开单小组上班时间
高峰使用时间段	营业部：16：00-20：00
集中开单小组：21：00-次日4：00
--------------------------------------
1.10	接口描述
输入的尺寸可以进行加减例如：1*1*1*5+2*2*2*3-0.5*0.5*0.5*
体积为空时，录入尺寸后，
填充体积。
当尺寸修改时，
体积随之变处。
当修改体积时，
尺寸不变化。 

货物包装总件数小于等于货物总件数，
如果大于总件数，
提示：“包装件数不能大于总件数”
--------------------------------------
贵重物品规则变更： 
1.修改现有系统对"贵重物品"的判断条件如下： 
a. 单票单件货物，
体积≤0.05立方且保价声明价值≥1万元； 
b. 单票多件货物，
平均单件体积≤0.2立方且平均单件保价声明价值≥1万元；
（注：平均单件体积=开单总体积÷开单件数，
平均单件保价=开单保价声明价值÷开单件数） 
c. 高保价货物，
单票货物保价≥10万元； 
满足以上任意一个条件时，
系统将判定该票货物为贵重物品并自动勾选"贵重物品"复选框，
且为灰色，不可编辑；不满足以上条件时，
该复选框为可编辑状态，
用户可根据实际情况自行选择是否勾选； 
2.若"贵重物品"复选框被勾选，
则在【储运注意事项】中自动加入提示记录"贵重物品"字段，
若该货物为贵重物品时，
"储运注意事项"中信息显示优先级为：贵重物品＞其他； 
--------------------------------------
尺寸录入框可以不录入件数，
如件数为1时。
因此录入框即可以输入10*10*10，
又可以输入10*10*10*1
进入该页面时，木架和木箱都赋初始值0，
仍保持必填，操作员根据实际情况改，
选择木架或木箱或两者都选择后则该值不能为0
--------------------------------------
	ISSUE-1105
1.运单开单时，货物的件数、
重量及体积文本框是必填项，
默认值为空； 
2.件数只能是大于等于1的整数，
重量及体积只能大于0。
体积、重量这种过程数据保留两位小数
--------------------------------------
前置条件		1.	贵重物品基础资料
2.	违禁物品基础资料
3.	分拣目的站基础资料
后置条件		1.	打木架录入
2.	运单收银
--------------------------------------
营业员点击运单开单，进入运单开单界面。
本界面为录入货物信息。
界面主要分为两个部分：录入货物信息、代收木架信息录入。
1.	录入货物信息：
录入信息包括：货物名称、总件数、
总重量、货物尺寸、
总体积、货物包装、
货物类型、是否贵重物品；
1.1	货物名称：
货物的名称；
1.2	总件数：
收货时货物的总件数；
1.3	总重量：
收货时货物的总重量；
1.4	货物尺寸：
收货时货物的尺寸；
1.5	总体积：
收货时货物的总体积；
1.6	货物包装：
货物的包装，
其包装总件数等于打木架和打木箱后的总件数；
1.7	货物类型：
1.7.1	运输类型为汽运时，
货物类型为公司规则的分拣条件的类型， 
为唯一选择框，包括：A、B；
1.7.2	运输类型为空运时，
货物类型为下拉选择框，
默认显示为普货，
目前只这一个分类，
该类型可做配置；
1.8	是否贵重物品：
货物是否为公司规则的贵重物品，
为选择框；
2.	代打木架信息录入；
当包装木的件数大于等于1时，
自动弹出对话框：“是否收入代打木架？”，是，
则进入场代打木架信息录入界面；
录入信息包括：代打部门、打木架货物件数、
代打木架要求、打木架货物尺寸、打木架货物体积、
打木箱货物件数、代打木箱要求、打木箱货物尺寸、打木架货物体积；
2.1	代打部门：
代打木箱或木架的部门名称；
2.2	打木架货物件数：
需要代打木架的货物件数；
2.3	代打木架要求：
代打木架的要求，
如“1和2合打，3、4分开打”；
2.4	打木架货物尺寸：
需要代打木架的货物尺寸；
2.5	打木架货物体积：
需要代打木架的货物体积；
2.6	打木箱货物件数：
需要代打木架的货物件数；
2.7	代打木箱要求：
代打木箱的要求，如“5和6合打，加一个木托”；
2.8	打木箱货物尺寸：
需要代打木箱的货物尺寸；
2.9	打木箱货物体积：
需要代打木箱的货物体积；
2.10	功能按钮：
确定、关闭、重置；k
--------------------------------------------------
1.6.1	录入货物信息
序号	基本步骤	相关数据	补充步骤
1	录入货物名称		
	1.	系统自动匹配违禁品、贵重物品、限保物品基础资料，生成规则；
2.	规则-请参见系统规则SR1；
2	录入总件数		
	规则-请参见系统规则SR2
3	录入总重量		
	1.	规则-请参见系统规则SR2、SR11；
4	录入货物尺寸		
	1.	规则-请参见系统规则SR3、SR4；
5	录入总体积		
	1.	规则-请参见系统规则SR2、SR3、SR4、SR10；
6	录入货物包装		
	1.	当木包装大于等于1时，
		系统校验出发城市和对应目的站的走货路由中是否有有打木架功能的部门，
		若有，则提醒营业员“是否收入代打木架？”，是，
		则进入场代打木架信息录入界面”，
		并显示第一个有打木架功能的部门名称；
		若走货路由中无有打木架功能的部门，
		则不提示“是否收入代打木架？”；
2.	规则-请参见系统规则SR5、SR6、SR10；
7	录入货物类型		
	1.	规则-请参见系统规则SR7；
8	录入是否贵重货物		
	1.	规则-请参见系统规则SR8；
9       录入打木箱货物体积		
	1.	规则-请参见系统规则SR3、SR4、SR10；
	-----------------------------------
	1.	若货物为违禁品，
	则系统自动提示“货物为违禁品，不可开单！”；
2.	若货物为贵重物品，
则系统自动勾选“贵重物品”，
且不可修改；
3.	若货物为限保物品，
则系统自动限定保价金额，
且不可修改，
并提示“货物为限保物品”；
4.	违禁品、
拒收品、
贵重物品、
限保物品（含保价金额上限）
具体类型可在系统中进行配置；
1.	货物重量单位为千克；
2.	运单开单时，
货物的件数、
重量及体积文本框是必填项，
默认值为空； 
3.	件数只能是大于等于1的整数，
重量及体积只能大于0。
4.	体积、
重量这种过程数据保留两位小数
1.	尺寸录入文本框，
支持'长*宽*高*件数+长*宽*高*（即多个尺寸相加）的计算；
2.	如果件数是1，
则不强制在录入时要“*1”；
3.	货物尺寸为计算器输入，
输入的尺寸可以进行加减，
例如：1*1*1*5+2*2*2*3-0.5*0.5*0.5，
显示为输入文本；
4.	尺寸计算单位为厘米，
尺寸计算出数据后转换单位为立方米后，
在货物体积中显示数据；
例如：尺寸录入为：50*50*20（其中20为件数），
则体积显示数据为：0.05； 
5.	体积为空时，
录入尺寸后，填充体积。
当尺寸修改时，体积随之变处。
当修改体积时，尺寸不变化。
6.	体积初始值为“0”，
仍保持必填，
操作员根据实际情况改，
选择木架或木箱或两者都选择后则该值不能为0

1.	货物体积单位为立方米；
2.	营业员可以修改通过尺寸计算器计算得出的体积数据；
3.	系统设置货物重量体积比区间值（该值由基础资料配置），
在运单提交时，
系统自动对重量体积比进行校验：即重量体积比X=重量/体积； 
3.1	当X不在设置的区间中，
弹出提示“请确认录入的重量体积是否准确！”；
（该弹窗有两个按钮：确定、取消）点击确定时，
弹出确认运单信息界面；点击取消，点返回运单录入界面；
3.2	当X在区间中，无提示；
直接进入确认运单信息界面；
4.	录入重量体积后，
系统校验单票的重量体积及单件（平均单件）
的重量体积是否满足“修改-查询行政组织业务属性”
基础资料中的单票和单件重量体积限制；
只要该四项中有一项不满足，
则提示“XX超出提货网点限制，
请重新选择提货网点！”； 
1.	货物包装总件数小于等于货物总件数，
如果大于总件数，
提示：“包装件数不能大于总件数”；
1.	当木包装件数大于等于1时，
系统校验出发城市和对应目的站的走货路由中是否有有打木架功能的部门，
若有，则提醒营业员“是否收入代打木架？”，是，
则进入场代打木架信息录入界面”，
并显示第一个有打木架功能的部门名称；
若走货路由中无有打木架功能的部门，
则不提示“是否收入代打木架？”；
2.	当走货路由中有有打木架功能的部门为多个时，
只显示系统路由中第一有有打木架功能的部门，
且不可修改；
1.	运输类型为汽运时，
货物类型为唯一选择项；
即，非A即B；默认不可勾选，
只有当走货路由经过特定的城市时需要录入货物类型,
特定城市可在系统中进行配置；
2.	运输类型为空运时，
货物类型为下拉选择框，
默认显示为普货，
目前只有这一个分类，
该类型可做配置；
1.	贵重物品判断规则： 
a. 单票单件货物，
体积≤0.05立方且保价声明价值≥1万元； 
b. 单票多件货物，
平均单件体积≤0.2立方且平均单件保价声明价值≥1万元；
（注：平均单件体积=开单总体积÷开单件数，
平均单件保价=开单保价声明价值÷开单件数） 
c. 高保价货物，
单票货物保价≥10万元； 
满足以上任意一个条件时，
系统将判定该票货物为贵重物品并自动勾选"贵重物品"复选框，
且为灰色，
不可编辑；
不满足以上条件时，
该复选框为可编辑状态，
用户可根据实际情况自行选择是否勾选； 
2.	若"贵重物品"复选框被勾选，
则在【储运注意事项】中自动加入提示记录"贵重物品"字段
，若该货物为贵重物品时，
"储运注意事项"中信息显示优先级为：
贵重物品＞其他；
======================================
1.	录入的打木架货物件数和打木箱件数之和必须大于等于录入的木包装件数；
2.	系统默认标签流水号前X的货物为需要代打木架货物，
X等于录入的“打木架货物件数”和“打木箱货物件数”之和；
3.	营业员在打印标签时，
按流水号先贴要打木架或打木箱的货物；
1.	录入的打木架货物体积和打木箱货物体积之和乘以1.4必须小于等于货物总体积；
该1.4为打木架体积计算系统，可配置；
2.	营业部开单时按打完木架后的包装开，
即包装中含“木架/木箱”，
开单件数为货物打木架/木箱前的实际件数（防止丢货），
尺寸和重量按照以下公式计算：
1.1	整票货物代打时：开单体积=代打货物体积*1.4；
开单重量=所有货物重量+代打货物体积*42；
1.2	部分货物代打时，
开单体积=代打货物体积*1.4+未打木架货物体积；
开单重量=所有货物重量+代打货物体积*42。
即：营业部按照代打货物未打木架之前体积的1.4倍来开单收费，
重量另加，
单票中未打木架的货物的体积和重量不变；
1.3	例如：一票货物需全部代打，货物体积为1个方，
重量为100KG，则开单体积为1.4个方，
开单重量为100+1*42=142KG，
收取客户包装费为150*1.4=210元；
1.4	需要加托时，仍按照50元/个另外收取费用，
托的重量和体积不再另加；
营业部不需要再更改由于打木架引起重量和体积的变化；
3.	打木架要在“对内备注”中备注“代打木架/木箱”，
特殊要求（特别是合打情况）必须在对内备注和A4纸上都注明，
例如：货物1、2、3合打成一件等；
4.	开单件数为代打木架前货物实际件数，
包装为打木架后的包装，打木架后件数发生变化后，
需及时更改件数；
=======================================
1.8.1	录入货物信息
字段名称 	说明 	输入限制	输入项提示文本	长度	是否必填	备注
货物名称		文本		100	是	
货物总件数		数字		4	是	
货物总重量		数字		8	是	
货物尺寸		数字、符号		500	否	
货物总体积		数字		8	是	
货物包装		数字、文本		4	是	
货物类型		选择框		10	否	
贵重物品		选择框		1	否	
=======================================
1.8.2	代打木架信息录入
字段名称 	说明 	输入限制	输入项提示文本	长度	是否必填	备注
代打部门		文本		20	是	
打木架货物件数		数字		4	是	
代打木架要求		文本		100	是	
打木架货物尺寸		数字、符号		500	否	
打木架货物体积		数字		8	是	
打木箱货物件数		数字		4	是	
代打木箱要求		文本		100	是	
打木箱货物尺寸		数字、符号		500	否	
打木箱货物体积		数字		8	是	
==========================================
使用量	每天处理的运单约为1000000单
2012年全网估计用户数	营业员数量约10000名
响应要求（如果与全系统要求 不一致的话）	系统一般要求
使用时间段	营业部、集中开单小组上班时间
高峰使用时间段	营业部：16：00-20：00
集中开单小组：21：00-次日4：00
============================================
根据电话号码带出客户信息，
仅在客户名称为空的前提下才会有效。
即意味着由其他方式带出客户信息后，
修改电话号码并不会触发重新的检索。
==========================================
1.	使用电话号码和手机进行匹配，
如果是唯一匹配一条CRM客户信息时，
填充客户编码、客户名称、联系人、地址，
如果有多条需弹出选择框进行选择， 
如果查询不到CRM客户信息时，
使用FOSS三个月运单历史记录中的收货信息查询，
唯一匹配一条进行填充收货客户信息，多条进行弹窗选择，
如果都查询不到，不做其他操作
2.	但是对于电话号码匹配，只有当发货人手机、
客户名称为空时，才会用电话号码检索并弹窗显示使用手机号码、
电话号码、客户名称弹出选择框选择记录后覆盖原先记录
3.	修改联系人时，需要清空客户名称，
当清空客户名称时，会同时删除客户编码
4.	使用手机号码、
电话号码弹出选择框选择记录后覆盖原先记录
==========================================
身份证号、客户编码、客户名称、
联系人编码可以查询到全公司的客户
==========================================
本界面分为两个界面：录入收货客户信息、选择收货客户。
1.	录入收货客户信息：
界面为信息录入界面：包括：手机、电话、
发货收货联系人（发货收货部门）、发货收货人地址；
1.1	手机：发货收货人手机号码；
1.2	电话：发货收货人电话号码；
1.3	收货联系人（收货部门）：
收货客户的客户姓名，
当“运单开单”中的“开单提货方式”
为“内部带货自提”时，
“收货联系人”字段更改为“收货部门”；
1.4	收货人地址：收货客户的详细联系地址，
支持国家行政区域自动过滤；
1.5	客户名称
1.6	客户编码
2.	选择收货客户界面：
界面为选择客户信息界面：包括两部分：
客户信息列表区域、功能按钮区域；
2.1.	客户信息列表区域：
包括：联系人、手机、电话、
地址（规范化地址和详细地址）；
2.2.	功能按钮区域：
包括：确定、取消；
3.	    选择热门城市界面
   界面信息包含人热门城市
4.	选择省份界面
   界面信息包含省份
5.	选择城市界面
           界面信息保护城市
6.	选择区县界面
           界面信息保护区县
==============================================
1.6.1	录入
序号	基本步骤	相关数据	补充步骤
1	录入手机号码		
1.	系统自动查询CRM系统中对应手机号码绑定的客户信息，
如果有弹窗，
弹窗操作见扩展1a，和如果没有，
弹出FOSS历史开单记录中对应手机号码绑定的客户信息，
并弹窗，弹窗操作见扩展1b；
2.	规则-请参见系统规则SR1、SR5、SR6；
2	录入电话号码		
1.	如果手机号码没有填写，
系统自动查询CRM系统中对应电话号码绑定的客户信息，
如果有弹窗，
弹窗操作见扩展2a，
如果没有，
弹出FOSS历史开单记录中对应手机号码绑定的客户信息，
并弹窗，弹窗操作见扩展2b；
1.	1、系统自动查询CRM系统中对应电话号码绑定的
客户信息和FOSS历史开单记录中对应手机号码绑定的客户信息，
并弹窗，弹窗操作参见扩展2a；
2.	规则-请参见系统规则
SR1、SR5 、SR6；
------------------------------------
3	录入收货联系人（收货部门）		
1.	规则-请参见系统规则SR2、SR3；
4	录入收货人地址		
1.	提供下拉框选择输入，
系统自动过滤输入的行政区下一级行政级的字段；
2.	地址在系统后台通过GIS系统进行匹配，
如果是禁行区域，地址颜色为红色，
如果是进仓区域，地址颜色为黄色
3.	规则-请参见系统规则SR4；
===================================
1.6.2	扩展
序号	扩展事件	相关数据	备注
1a	
当录入的手机号码在CRM系统中有手机号码绑定的客户信息，
则自动弹窗并显示手机号码为录入的手机号的所有客户信息，
营业员选择录入一条记录，并确定；
选择的客户信息自动带入收货客户信息中；
当光标焦点移至录入手机号码时，
系统自动调用CRM系统对应发货客户的历史发货记录，
并自动弹窗显示所有该发货客户的历史发货记录；
营业员选择一条记录，并确定，
选择的客户信息自动带信收货客户信息中；
	客户信息	1.	
	规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则；
2.	规则-请参见系统规则SR5 、SR6；
1.	规则-请参见系统规则SR5；
1b	当录入的手机号码在CRM系统中没有手机号码绑定的客户信息时，
则如果该客户在这3个月有发过货，
则弹出历史收货记录自动弹窗并显示手机号码为录入的手机号的所有客户信息，
营业员选择录入一条记录，并确定；选择的客户信息自动带入收货客户信息中；	
客户信息	1.	规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则；
2.	规则-请参见系统规则SR5 、SR6；

2a2a	当录入的电话号码在CRM系统中有电话号码绑定的客户信息，
则自动弹窗并显示电话号码为录入的电话号码的所有客户信息，
营业员选择录入一条记录，并确定；
选择的客户信息自动带入收货客户信息中；
当录入的电话号码在CRM系统中有电话号码绑定的客户信息，
则自动弹窗并显示电话号码为录入的电话号码的所有客户信息，
营业员选择录入一条记录，并确定；选择的客户信息自动带入收货客户信息中；	
客户信息客户信息	1.	规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则；
2.	规则-请参见系统规则SR5 、SR6；
1.	规则-请参见系统用例SUC-492中的“1.6.2扩展2a”的规则；
2.	规则-请参见系统规则SR6；
==============================================
2b	当录入的电话号码在CRM系统中没有电话号码绑定的客户信息时，
如果该客户在这3个月有发过货，则弹出历史收货记录，营业员选择录入一条记录，
并确定；选择的客户信息自动带入收货客户信息中；	客户信息	1.
	规则-请参见系统用例SUC-492中的“1.6.2扩展1a”的规则；
2.	规则-请参见系统规则SR5 、SR6；
	==========================
1.7	业务规则
序号	描述
SR1	1.	收货客户手机号码及固定电话至少提供一个，
手机号码只能为数字并且为11位，固定电话号码只能为数字，
且可添加多个；
SR2	1.	当“运单开单”中的“开单提货方式”为“内部带货自提”时，
“收货联系人”字段更改为“收货部门”；
SR3	1.	若为公司内部带货，
则收货客户信息中的收货部门名称必须与OA系统中组织架构名称保持一致；
SR4	1.	客户详细地址必填至乡/镇，
且乡镇下一级内容不能为空；

2.	当鼠标点击规范化地址文本框时，
显示如下图片，
包含热门城市、省份、城市、县区，选择热门城市，
会直接跳到区县，现在省份后自动跳到城市，
选择城市后自动跳到区县（必须选择完上一级行政区域后，
才能选择下一行政区域），选择完区县后，
会把规范化地址显示在规范化文本框内，
例如：江苏省-苏州市-相城区


3.	地址可以进行拼音和首写字母进行匹配，
例如输入“GZ”会在规范化地址文本框下面显示 ；
匹配时可带出城市、区、
县等符合的信息，该设计来自官网，具体可以参考官网


4.	当提货方式含“自提”时，收货人地址为非必填项；
SR5	1.	使用电话号码和手机进行匹配，
如果是唯一匹配一条CRM客户信息时，
填充客户编码、客户名称、联系人、地址，
如果有多条需弹出选择框进行选择，
 如果查询不到CRM客户信息时，
 使用FOSS三个月运单历史记录中的收货信息查询，
 唯一匹配一条进行填充收货客户信息，
 多条进行弹窗选择，如果都查询不到，
 不做其他操作
2.	但是对于电话号码匹配，
只有当发货人手机、
客户名称为空时，
才会用电话号码检索并弹窗显示
3.	使用手机号码、
电话号码、
客户名称弹出选择框选择记录后覆盖原先记录
4.	修改联系人时，
需要清空客户名称，
当清空客户名称时，
会同时删除客户编码
5.	使用手机号码、
电话号码弹出选择框选择记录后覆盖原先记录
6.	点击客户名称查询控件，
弹出查询信息:窗口SUC-424-查找会员
7.	身份证号、客户编码、
客户名称、联系人编码可以查询到全公司的客户
	
1.	只有当收货人手机为空，
且发货客户信息已录入时，才会检索并弹窗显示；
2.	若未查询到历史记录，
则无法提示；
3.	通过选择录入的收货人信息均可修改；
4.	使用号码进行匹配，
如果是唯一匹配一条CRM客户信息时，填充客户编码和客户名称，如果有多条不做操作
SR6	1.	通过选择录入收货发货信息，
同时带出对应的目的站和提货网点信息；
2.	带出目的站仍然使用GIS进行查询，
并以GIS返回为准；
3.	若GIS未查询得出，
则以历史开单的目的站和提货网点信息为准；
================================
1.8	数据元素
1.8.1	录入收货客户信息
字段名称 	说明 	输入限制	输入项提示文本	长度	是否必填	备注
手机		数字		11	二者至少填一	
电话		数字		25		当“运单开单”中的“开单提货方式”为“内部带货自提”时，电话输入栏自动生成“[******]”，代替输入号码信息
收货联系人（收货部门）		文本		80	是	
收货人地址		下拉框、文本		100	是	当提货方式含“自提”时，收货人地址为非必填项；
客户名称		文本		80	否	不可修改
客户编码		文本		80	否	不可修改
--------------------------------------
1.8.2	选择收货客户
字段名称 	说明 	输入限制	输入项提示文本	长度	是否必填	备注
客户名称		文本		80		
手机		文本		11		
电话		文本		25		
收货联系人（收货部门）		文本		80		
收货人地址		文本		100		
联系人ID		文本		20		
联系人编码		文本		20		
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1.9	非功能性需求
使用量	每天处理的运单约为1000000单
2012年全网估计用户数	营业员数量约10000名
响应要求（如果与全系统要求 不一致的话）	系统一般要求
使用时间段	营业部、集中开单小组上班时间
高峰使用时间段	营业部：16：00-20：00
集中开单小组：21：00-次日4：00
=======================================
1.10	接口描述
接口名称 	对方系统（外部系统或内部其他模块）	接口描述
查询客户资料	CRM客户管理模块	
FOSS能过手机号或其它条件查询客户资料信息，
包括：客户名称、客户编码、发货收货联系人、
发货收货人地址等
查询公司架构	OA系统组织架构管理	
当开单提货方式为内部带货自提时，
FOSS向OA请求验证发货收货部门的有效性
 */

/**--------------------------------------
 * 营业员点击运单离线开单，
 * 进入运单离线开单界面。
 本界面为离线录入货物信息。
 1.	录入货物信息：
 录入信息包括：货物名称、总件数、总重量、
 货物尺寸、总体积、货物包装、货物类型、是否贵重物品；
 1.1	货物名称：货物的名称；
 1.2	总件数：收货时货物的总件数；
 1.3	总重量：收货时货物的总重量；
 1.4	货物尺寸：收货时货物的尺寸；
 1.5	总体积：收货时货物的总体积；
 1.6	货物包装：货物的包装，其包装总件数等于打木架和打木箱后的总件数；
 1.7	货物类型：
 1.7.1	运输类型为汽运时，
 货物类型为公司规则的分拣条件的类型，
 为唯一选择框，包括：A、B；
 1.7.2	运输类型为空运时，
 货物类型为下拉选择框，
 默认显示为普货，
 目前只这一个分类，
 该类型可做配置；
 1.8	是否贵重物品：
 货物是否为公司规则的贵重物品，
 为选择框；
 */
/**--------------------------------------
 * 1.	若货物为违禁品，
 * 	则系统自动提示“货物为违禁品，不可开单！”；
 2.	若货物为拒收品，
 则系统自动提示“货物为拒收品，不可开单！”；
 3.	若货物为贵重物品，
 则系统自动勾选“贵重物品”，
 且不可修改；
 4.	若货物为限保物品，
 则系统自动限定保价金额，且不可修改，
 并提示“货物为限保物品”；
 5.	违禁品、拒收品、
 贵重物品、限保物品（含保价金额上限）
 具体类型可在系统中进行配置；
 1.	货物重量单位为千克
 */
/**--------------------------------------
 * 1.	货物尺寸为计算器输入，
 * 显示为输入文本；
2.	尺寸计算单位为厘米，
尺寸计算出数据后转换单位为立方米后，
在货物体积中显示数据；例如：
尺寸录入为：50*50*20，
则体积显示数据为：0.05；
 */
/**--------------------------------------
 * 1.	货物体积单位为立方米；
2.	营业员可以修改通过尺寸计算器
计算得出的体积数据；
3.	系统设置货物重量体积比区间值（该值由基础资料配置），
在运单提交时，
系统自动对重量体积比进行校验：
即重量体积比X=重量/体积；
3.1	当X不在设置的区间中，
弹出提示“请确认录入的重量体积是否准确！”；
（该弹窗有两个按钮：确定、取消）点击确定时，
弹出离线开单确认运单信息界面；点击取消，
点返回运单录入界面；
3.2	当X在区间中，无提示；
直接进入确认运单信息界面；
--------------------------------------
 */
/**--------------------------------------
 * 1.	纸包装件数默认显示数值等于货物总件数，
 * 营业员可以修改各包装的件数；
 * 系统自动在录入下一个包装前计算显示剩余未录入的件数，
 * 例：某票货物为50件，则自动显示纸包装50，
 * 在营业员修改纸包装为20时，木包装自动显示为30，
 * 在营业员修改木包装为10时，
 * 纤包装自动显示为20，该过程中未录入包装数值的默认显示为0；
2.	货物包装总件数小于等于货物总件数；
 */
/**--------------------------------------
 * 1.	离线开单时，不录入代打木架信息；
 * 当木包装件数大于等于1时，系统不提示任何信息，
 * 也不弹出代打木架录入界面；
2.	离线开单的代打木架信息在离线开单提交时，
系统校验提醒；
 */
/**
 * 1.	运输类型为汽运时，货物类型为唯一选择项；即，
 * 非A即B；默认不可勾选，
 * 只有当走货路由经过特定的城市时需要录入货物类型,
 * 特定城市可在系统中进行配置；
2.	运输类型为空
默认显示为普货，目前只有这一个分类，该类型可做配置；
--------------------------------------
 */
/**--------------------------------------
 * 1.	系统根据货物名称匹配生成的勾选贵重物品，
 * 营业员不可去掉勾选；
2.	营业员也可以主动勾选贵重物品；
3.	件数等于1、体积小于等于0.05个方、
报价声明价值大于等于10000元，为贵重物品；
系统自动勾选贵重物品，
营业员可修改是否勾选；
4.	件数大于等于2时，平均体积（体积/件数）
小于等于0.5方，平均声明价值（保价声明价值/件数）
大于等于10000元，为贵重物品；
系统自动勾选贵重物品，
营业员可修改是否勾选；
1.	营业部开单时按打完木架后的包装开，
即包装中含“木架/木箱”，
开单件数为货物打木架/木箱前的实际件数（防止丢货），
尺寸和重量按照以下公式计算：
1.1	整票货物代打时：
开单体积=代打货物体积*1.4；
开单重量=所有货物重量+代打货物体积*42；
1.2	部分货物代打时，
开单体积=代打货物体积*1.4+未打木架货物体积；
开单重量=所有货物重量+代打货物体积*42。
即：营业部按照代打货物未打木架之前体积的1.4倍来开单收费，
重量另加，单票中未打木架的货物的体积和重量不变；
1.3	例如：一票货物需全部代打，
货物体积为1个方，重量为100KG，
则开单体积为1.4个方，
开单重量为100+1*42=142KG，
收取客户包装费为150*1.4=210元；
1.4	需要加托时，仍按照50元/个另外收取费用，
托的重量和体积不再另加；
营业部不需要再更改由于打木架引起重量和体积的变化；
2.	开单件数为代打木架前货物实际件数，
包装为打木架后的包装，
打木架后件数发生变化后，
需及时更改件数；
--------------------------------------
 */

/**--------------------------------------
 * 每天处理的运单约为1000000单
营业员数量约10000名
系统一般要求
营业部、集中开单小组上班时间
营业部：16：00-20：00
集中开单小组：21：00-次日4：00
 */


package com.deppon.foss.module.pickup.changing.client.listener;

import java.awt.Color;
import java.lang.reflect.InvocationTargetException;
import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;

import com.deppon.foss.module.pickup.common.client.utils.*;
import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.beanutils.PropertyUtils;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.jdesktop.swingx.JXTable;

import com.deppon.foss.base.util.define.NumberConstants;
import com.deppon.foss.framework.client.commons.i18n.I18nManager;
import com.deppon.foss.framework.client.commons.i18n.II18n;
import com.deppon.foss.framework.client.commons.util.WindowUtil;
import com.deppon.foss.framework.client.core.binding.BindingEvent;
import com.deppon.foss.framework.client.core.binding.IBindingListener;
import com.deppon.foss.framework.client.core.context.SessionContext;
import com.deppon.foss.framework.client.widget.msgbox.MsgBox;
import com.deppon.foss.framework.client.widget.validatewidget.JTextFieldValidate;
import com.deppon.foss.framework.exception.BusinessException;
import com.deppon.foss.framework.shared.util.string.StringUtil;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.AdministrativeRegionsEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.CusAccountEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.CusBargainNewEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.CustomerCircleEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.FlightEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.LimitedWarrantyItemsEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.OrgAdministrativeInfoEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.OuterBranchEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.SaleDepartmentEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.UserEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.dto.CustomerCircleNewDto;
import com.deppon.foss.module.base.baseinfo.api.shared.dto.CustomerQueryConditionDto;
import com.deppon.foss.module.base.baseinfo.api.shared.dto.FlightDto;
import com.deppon.foss.module.base.baseinfo.api.shared.dto.FreightRouteLineDto;
import com.deppon.foss.module.base.baseinfo.api.shared.dto.PaginationDto;
import com.deppon.foss.module.base.dict.api.shared.define.ConfigurationParamsConstants;
import com.deppon.foss.module.base.dict.api.shared.define.DictionaryConstants;
import com.deppon.foss.module.base.dict.api.shared.domain.ConfigurationParamsEntity;
import com.deppon.foss.module.base.dict.api.shared.domain.DataDictionaryValueEntity;
import com.deppon.foss.module.mainframe.client.utills.ExceptionHandler;
import com.deppon.foss.module.pickup.changing.client.action.ShowPickupStationDialogAction;
import com.deppon.foss.module.pickup.changing.client.service.IWaybillRfcService;
import com.deppon.foss.module.pickup.changing.client.service.WaybillRfcServiceFactory;
import com.deppon.foss.module.pickup.changing.client.ui.WaybillRFCUI;
import com.deppon.foss.module.pickup.changing.client.ui.dialog.ChangeGoodsQtyDialog;
import com.deppon.foss.module.pickup.changing.client.ui.dialog.EnterYokeInfoChangeDialog;
import com.deppon.foss.module.pickup.changing.client.ui.internal.IncrementPanel.WaybillOtherCharge;
import com.deppon.foss.module.pickup.changing.client.ui.internal.transport.ReturnInfoPanel;
import com.deppon.foss.module.pickup.changing.client.ui.internal.transport.TransferInfoPanel;
import com.deppon.foss.module.pickup.changing.client.utils.Common;
import com.deppon.foss.module.pickup.changing.client.vo.WaybillInfoVo;
import com.deppon.foss.module.pickup.common.client.dto.OrgInfoDto;
import com.deppon.foss.module.pickup.common.client.service.BaseDataServiceFactory;
import com.deppon.foss.module.pickup.common.client.ui.combocheckbox.JComboCheckBox;
import com.deppon.foss.module.pickup.common.client.ui.commonUI.QueryPickupStationDialog;
import com.deppon.foss.module.pickup.common.client.ui.customer.BankAccountDialog;
import com.deppon.foss.module.pickup.common.client.ui.customer.QueryConsigneeDialog;
import com.deppon.foss.module.pickup.common.client.ui.customer.QueryConsignerDialog;
import com.deppon.foss.module.pickup.common.client.ui.dialog.FlightInfoDialog;
import com.deppon.foss.module.pickup.common.client.vo.BranchVo;
import com.deppon.foss.module.pickup.common.client.vo.DataDictionaryValueVo;
import com.deppon.foss.module.pickup.common.client.vo.DeliverChargeEntity;
import com.deppon.foss.module.pickup.common.client.vo.EconomyVo;
import com.deppon.foss.module.pickup.common.client.vo.OtherChargeVo;
import com.deppon.foss.module.pickup.common.client.vo.ProductEntityVo;
import com.deppon.foss.module.pickup.common.client.vo.QueryMemberDialogVo;
import com.deppon.foss.module.pickup.common.client.vo.ValueCopy;
import com.deppon.foss.module.pickup.common.client.vo.WaybillPanelVo;
import com.deppon.foss.module.pickup.pricing.api.shared.define.PricingConstants;
import com.deppon.foss.module.pickup.pricing.api.shared.define.PricingConstants.PriceEntityConstants;
import com.deppon.foss.module.pickup.pricing.api.shared.define.PricingConstants.ProductEntityConstants;
import com.deppon.foss.module.pickup.pricing.api.shared.domain.MinFeePlanEntity;
import com.deppon.foss.module.pickup.pricing.api.shared.domain.PriceEntity;
import com.deppon.foss.module.pickup.pricing.api.shared.domain.ProductEntity;
import com.deppon.foss.module.pickup.pricing.api.shared.dto.ProductPriceDto;
import com.deppon.foss.module.pickup.pricing.api.shared.dto.QueryBillCacilateDto;
import com.deppon.foss.module.pickup.pricing.api.shared.dto.QueryBillCacilateValueAddDto;
import com.deppon.foss.module.pickup.pricing.api.shared.dto.ValueAddDto;
import com.deppon.foss.module.pickup.waybill.shared.define.GisConstants;
import com.deppon.foss.module.pickup.waybill.shared.define.LabeledGoodChangeHistoryConstants;
import com.deppon.foss.module.pickup.waybill.shared.define.WaybillConstants;
import com.deppon.foss.module.pickup.waybill.shared.define.WaybillRfcConstants;
import com.deppon.foss.module.pickup.waybill.shared.domain.SynPartenerCodAmountUpperLimitResponse;
import com.deppon.foss.module.pickup.waybill.shared.domain.WaybillEntity;
import com.deppon.foss.module.pickup.waybill.shared.domain.WaybillRfcTranferEntity;
import com.deppon.foss.module.pickup.waybill.shared.dto.AddressFieldDto;
import com.deppon.foss.module.pickup.waybill.shared.dto.FreightRouteDto;
import com.deppon.foss.module.pickup.waybill.shared.dto.GisDepartmentDto;
import com.deppon.foss.module.pickup.waybill.shared.dto.GisPickupOrgDto;
import com.deppon.foss.module.pickup.waybill.shared.dto.LabeledGoodChangeHistoryDto;
import com.deppon.foss.module.pickup.waybill.shared.dto.LostRepDto;
import com.deppon.foss.module.pickup.waybill.shared.dto.PartenerCodAmountUpperLimitDto;
import com.deppon.foss.module.pickup.waybill.shared.dto.QueryPickupPointDto;
import com.deppon.foss.module.pickup.waybill.shared.dto.WaybillRfcChangeDetailDto;
import com.deppon.foss.module.pickup.waybill.shared.exception.WaybillRfcChangeException;
import com.deppon.foss.module.pickup.waybill.shared.exception.WaybillSubmitException;
import com.deppon.foss.module.pickup.waybill.shared.exception.WaybillValidateException;
import com.deppon.foss.module.transfer.load.api.shared.domain.HandOverBillDetailEntity;
import com.deppon.foss.module.transfer.scheduling.api.shared.domain.TransportPathEntity;
import com.deppon.foss.util.DateUtils;
import com.deppon.foss.util.define.FossConstants;
 
/**
 * 
 * 运单信息联动
 * 
 * @author 102246-foss-shaohongliang
 * @date 2012-10-29 上午9:06:00
 */
public class WaybillInfoBindingListener implements IBindingListener {
	

	// 日志Logger
	private static final Logger LOG = Logger.getLogger(WaybillInfoBindingListener.class);

	// 更改单UI
	private WaybillRFCUI ui;

	// 更改单Service
	private IWaybillRfcService waybillService = WaybillRfcServiceFactory.getWaybillRfcService();
	
	//工具类获取branchVo对象
	private BusinessUtils bu = new BusinessUtils();
	//0
	private static final String ZERO = "0";

	private static final int NUMBER_ZERO = 0;
	/**
	 * 国际化对象
	 */
	private static final II18n i18n = I18nManager.getI18n(WaybillInfoBindingListener.class); 
	
	private IWaybillRfcService rfcService = WaybillRfcServiceFactory
			.getWaybillRfcService();
	
	/**
	 * 构造方法
	 * @param waybillRFCUI
	 */
	public WaybillInfoBindingListener(WaybillRFCUI waybillRFCUI) {
		this.ui = waybillRFCUI;
	}
	
	/**
	 * 
	 * 设置保存按钮与提交按钮不可编辑
	 * @author 025000-FOSS-helong
	 * @date 2012-12-10 下午05:24:45
	 */
	public void setSaveAndSubmitFalse(WaybillRFCUI ui)
	{
		//提交按钮不可用
		ui.getButtonPanel().getBtnSubmit().setEnabled(false);
		//计算总运费按钮可用
		ui.getWaybillInfoPanel().getBillingPayPanel().getBtnCalculate().setEnabled(true);
	}
	
	/**
	 * 
	 * 设置保存按钮与提交按钮可编辑
	 * @author 025000-FOSS-helong
	 * @date 2012-12-10 下午05:24:45
	 */
	public void setSaveAndSubmitTrue(WaybillRFCUI ui)
	{
		//允许提交
		ui.getButtonPanel().getBtnSubmit().setEnabled(true);
	}

	/**
	 * 
	 * 绑定VO属性值发生变化后回调该方法
	 * @author 102246-foss-shaohongliang
	 * @date 2012-12-25 上午11:51:54
	 * @see com.deppon.foss.framework.client.core.binding.IBindingListener#bindingTriggered(java.util.List)
	 */
	public void bindingTriggered(List<BindingEvent> be) {
		
    		// 绑定VO
    		WaybillInfoVo bean = ui.getBinderWaybill();
    		for (BindingEvent bindingEvent : be) {
    			String propertyName = bindingEvent.getPropertyName();//时间所改变的bean属性的名字
    			
    			if(LOG.isDebugEnabled()){//记录日志
    				LOG.debug("property" + propertyName + " binding triggered with focus lost");
    			}
    			try {
	    			
	    			/**导入面板*/
	    			if ("rfcSource".equals(propertyName)) {
	    				// 变更来源
	    				rfcSourceListener(bean);
	    			} else if ("rfcType".equals(propertyName)) {
	    				// 变更类型
	    				rfcTypeListener(bean);
	    			/**转运信息*/
	    			} else if ("tfrCustomerPickupOrgName".equals(propertyName)) {
	    				// 转运目的站
	    				transferCustomerPickupOrgNameListener(bean);
	    			} else if ("tfrUnitPrice".equals(propertyName)
	    					|| "rtnUnitPrice".equals(propertyName)){//返货费率
	    				//转运费率
	    				transferUnitPrice(bean);
	    			}else if ("tfrProductCode".equals(propertyName)) {
	    				// 转运运输性质
	    				transferProductCodeListener(bean);
	    			} else if ("tfrReceiveMethod".equals(propertyName)) {
	    				// 转运提货方式
	    				transferReceiveMethodListener(bean);
	    			} else if ("tfrFlightNumberType".equals(propertyName)) {
	    				// 转运航班
	    				transferflightNumberTypeListener(bean);
	    			/**返货信息*/
	    			} else if ("rtnCustomerPickupOrgName".equals(propertyName)) {
	    				// 返货目的站
	    				returnCustomerPickupOrgNameListener(bean);
	    			} else if ("rtnProductCode".equals(propertyName)) {
	    				// 返货运输性质
	    				returnProductCodeListener(bean);
	    			} else if ("rtnReceiveMethod".equals(propertyName)) {
	    				// 返货提货方式
	    				returnReceiveMethodListener(bean);
	    				
	    			/** 货物信息 */
	    			} else if ("goodsName".equals(bindingEvent.getPropertyName())){
	    				// 货物名称
	    				gooodsNameListener(bean);
	    			} else if ("deliveryCustomerMobilephone".equals(bindingEvent.getPropertyName())){
	    				// 发货人手机号码
	    				deliveryCustomerMobilephoneListener(bean);
	    			} else if ("deliveryCustomerPhone".equals(bindingEvent.getPropertyName())){
	    				// 发货人电话
	    				deliveryCustomerPhoneListener(bean);
	    			} else if("deliveryCustomerName".equals(bindingEvent.getPropertyName())){ 
						//发货客户名称
						deliveryCustomerNameListener(bean);
					} else if("deliveryCustomerContact".equals(bindingEvent.getPropertyName())){
						//发货联系人
						deliveryCustomerContactListener(bean);
					} else if ("receiveCustomerMobilephone".equals(bindingEvent.getPropertyName())){ 
	    				// 收货人手机号码
	    				receiveCustomerMobilephoneListener(bean);
	    			} else if ("receiveCustomerPhone".equals(bindingEvent.getPropertyName())){
	    				// 收货人电话
	    				receiveCustomerPhoneListener(bean);
	    			} else if ("receiveMethod".equals(bindingEvent.getPropertyName())){
	    				// 提货方式
	    				receiveMethodListener(bean);
	    			}else if ("specialValueAddedServiceType".equals(bindingEvent.getPropertyName())){
	    				//特殊增值服务监听 254615-foss-mabinliang
	    				specialValueAddedServiceTypeListener(bean);
	    			} else if("receiveCustomerName".equals(bindingEvent.getPropertyName())){
	    				//收货客户名称
						receiveCustomerNameListener(bean);
					} else if("receiveCustomerArea".equals(bindingEvent.getPropertyName())){
						//收货区域
						receiveCustomerAreaListener(bean);
					} else if("receiveCustomerContact".equals(bindingEvent.getPropertyName())){
						//收货联系人
						receiveCustomerContactListener(bean);
					} else if ("productCode".equals(bindingEvent.getPropertyName())){
	    				// 运输性质
	    				productCodeListener(bean);
	    			} else if ("goodsWeightTotal".equals(bindingEvent.getPropertyName())){
	    				// 重量
	    				goodsWeightTotalListener(bean);
	    			} else if ("goodsVolumeTotal".equals(bindingEvent.getPropertyName())){
	    				// 体积
	    				goodsVolumeTotalListener(bean);
	    			} else if ("goodsQtyTotal".equals(bindingEvent.getPropertyName())){
	    				// 件数
	    				goodsQtyTotalListener(bean, bindingEvent.getOldValue(), bindingEvent.getNewValue());
	    			} else if ("insuranceAmount".equals(bindingEvent.getPropertyName())){
	    				// 保险价值
	    				insuranceAmountListener(bean);
	    			} else if("insuranceRate".equals(bindingEvent.getPropertyName())){
	    				// 保价费率
	    				insuranceRateListener(bean);
	    				
	    			} else if ("goodsSize".equals(bindingEvent.getPropertyName())){
	    				// 尺寸
	    				goodsSizeListener(bean);
	    			} else if ("paper".equals(bindingEvent.getPropertyName())){
	    				// 包装-纸
	    				paperListener(bean);
	    			} else if ("wood".equals(bindingEvent.getPropertyName())){
	    				// 包装-木
	    				woodListener(bean);
	    			} else if ("fibre".equals(bindingEvent.getPropertyName())) {
	    				// 包装-纤
						fibreListener(bean);
					} else if ("salver".equals(bindingEvent.getPropertyName())) {
						// 包装-托
						salverListener(bean);
					} else if ("membrane".equals(bindingEvent.getPropertyName())) {
						// 包装-膜
						membraneListener(bean);
	    			} else if ("otherPackage".equals(bindingEvent.getPropertyName())) {
						// 包装-其他
	    				otherPackageListener(bean);
	    			} else if ("refundType".equals(bindingEvent.getPropertyName())){
	    				// 退款类型
	    				refundTypeListener(bean);
	    			} else if ("returnBillType".equals(bindingEvent.getPropertyName())){
	    				// 返单类型
	    				returnBillTypeListener(bean);
	    			} else if ("paidMethod".equals(bindingEvent.getPropertyName())){
	    				// 开单付款方式
	    				paidMethodListener(bean);
	    			} else if ("isWholeVehicle".equals(bindingEvent.getPropertyName())){
	    				// 是否整车
	    				isWholeVehicleListener(bean);
	    			} else if ("isPassDept".equals(bindingEvent.getPropertyName())){
	    				// 是否经过营业部
	    				isPassDeptListener(bean);
	    			} else if ("pickupFee".equals(bindingEvent.getPropertyName())){
	    				// 接货费
	    				pickupFeeListener(bean);
	    			} else if ("packageFee".equals(bindingEvent.getPropertyName())){
	    				// 包装费
	    				packageFeeListener(bean);
	    			} else if ("codAmount".equals(bindingEvent.getPropertyName())){
	    				// 代收货款
	    				codAmountListener(bean);
	    			} else if ("serviceFee".equals(bindingEvent.getPropertyName())){
	    				// 装卸费
	    				serviceFeeListener(bean);
	    			} else if ("deliveryGoodsFee".equals(bindingEvent.getPropertyName())){
	    				// 送货费
	    				deliveryGoodsFeeListener(bean);
	    			} else if ("carDirectDelivery".equals(bindingEvent.getPropertyName())) {
	    				// 大车直送
						carDirectDeliveryListener(bean);
					} else if ("preciousGoods".equals(bindingEvent.getPropertyName())){
	    				// 贵重物品
	    				preciousGoodsListener(bean);
	    			} else if ("flightNumberType".equals(bindingEvent.getPropertyName())){
	    				// 航班类型
	    				flightNumberTypeListener(bean);
	    			} else if ("freightMethod".equals(bindingEvent.getPropertyName())){
	    				// 合票类型
	    				freightMethodListener(bean);
	    			}else if("tfrFreightMethod".equals(bindingEvent.getPropertyName())){
	    				
	    				// 转货合票类型
	    				tfrFreightMethodListener(bean);
	    				
	    			}else if("receiveCustomerAddress".equalsIgnoreCase(bindingEvent.getPropertyName())){
	    				//收货人地址
	    				receiveCustomerAddressListener(bean);
	    			}else if("prePayAmount".equalsIgnoreCase(bindingEvent.getPropertyName())){
	    				//预付金额
	    				prePayAmountListener(bean);
	    			}else if("toPayAmount".equalsIgnoreCase(bindingEvent.getPropertyName())){
	    				//到付金额
	    				toPayAmountListener(bean);
	    			}else if("errorHandlingCode".equalsIgnoreCase(bindingEvent.getPropertyName())){
	        			//差错处理
	        			errorHandling(bean);
        			}else if("innerNotes".equalsIgnoreCase(bindingEvent.getPropertyName())){
	        			// 对内备注
        				innerNotesListener(bean);
        			}else if ("transportFee".equalsIgnoreCase(bindingEvent.getPropertyName())) {
        				// 开单报价（公布价运费）
    					transportFeeListener(bean);// 开单报价
    				}else if ("importWaybillNo".equalsIgnoreCase(bindingEvent.getPropertyName())) {
    					// 更改运单号
    					waybillNoListener(bean);// 更改运单号
    				}else if ("promotionsCode".equalsIgnoreCase(bindingEvent.getPropertyName())) {
    					// 优惠编码
    					promotionsCodeListener(bean);
    				}else if ("pickupToDoor".equals(bindingEvent.getPropertyName())) {// 上门接货
    					pickupToDoorListener(bean);
    				}else if("freePickupGoods".equals(bindingEvent.getPropertyName())){//免费接货
    					freePickupGoodsListener(bean);
    				}else if("recordProductCode".equals(bindingEvent.getPropertyName()))
                    {

   					recordProductCodeListener(bean);
 			        }else if("isEconomyGoods".equalsIgnoreCase(bindingEvent.getPropertyName()))//是否自提件
 					{
 						isEconomyGoodsListener(bean);
 					}else if("tfrUnitPrice".equalsIgnoreCase(bindingEvent.getPropertyName())){
 						tfrUnitPriceListener(bean);
 					}else if("rtnUnitPrice".equalsIgnoreCase(bindingEvent.getPropertyName())){
 						rtnUnitPriceListener(bean);
					}else if("activeInfo".equalsIgnoreCase(bindingEvent.getPropertyName())){
 						//市场推广活动名称
 						activeInfoListener(bean);
 					}else if("isBigGoods".equals(bindingEvent.getPropertyName())){
 						isBigGoodsListener((Boolean) bindingEvent.getNewValue(),bean);
 					}else if("isExhibitCargo".equals(bindingEvent.getPropertyName())){
 						//是否展货
 						bean.setIsExhibitCargo((Boolean) bindingEvent.getNewValue());
 					}else if("deliveryCustomerAddressNote".equals(bindingEvent.getPropertyName())){
 						//发货人地址备注
 						if(StringUtils.isNotBlank((String) bindingEvent.getNewValue())){
 							bean.setDeliveryCustomerAddressNote((String) bindingEvent.getNewValue());
 						}
 					}else if("receiveCustomerAddressNote".equals(bindingEvent.getPropertyName())){
 						//收货人地址备注
 						if(StringUtils.isNotBlank((String) bindingEvent.getNewValue())){
 							bean.setReceiveCustomerAddressNote((String) bindingEvent.getNewValue());
 						}
 					}
	    			// liding comment
	    			// NCI项目,付款方式银行卡时取消校验
	    			/**
					 * 对交易流水号进行监控
					 * @author:218371-foss-zhaoyanjun
					 * @date:2015-01-23
					 */
//					else if("transactionSerialNumber".equals(bindingEvent.getPropertyName())){
//						verificate(bean.getTransactionSerialNumber());
//					}
					else if ("internalDeliveryType".equals(bindingEvent.getPropertyName())) {
 						internalDeliveryListener(bean);
					} else if ("employeeNo".equals(bindingEvent.getPropertyName())){ //工号--Lianhe--2017年1月11日--新增
	    				// 工号变更
						employeeNoListener();	
 					}//添加保价费，代收货款手续费监听 2016年1月16日 13:37:44 葛亮亮
					else if("supportFee".equalsIgnoreCase(bindingEvent.getPropertyName())){//保价费
 						supportFeeListener(bean);
 					}else if("collectingFee".equalsIgnoreCase(bindingEvent.getPropertyName())){//代收货款手续费
 						codFeeListener(bean);
 					}    			    			
    			} catch (Exception e) {//异常
    				LOG.error(e.getMessage(), e);//处理异常记录日志
    				MsgBox.showError(e.getMessage()+"\n");//弹出对话框
    			}
    			
    		}
	}
	
	/**
	 * LianHe--2017年1月11日20:18:23
	 * 工号变更监听
	 */
	private void employeeNoListener() {
		//设置提交按钮置灰
		ui.getButtonPanel().getBtnSubmit().setEnabled(false);
	}

	/**
	 * 免费接货监听
	 * @author 306486 wangshuai
	 * @date 2016年3月17日
	 * @param bean
	 */
	private void freePickupGoodsListener(WaybillInfoVo bean) {
		
		//是否免费接货
		boolean bool = ui.getWaybillInfoPanel().getBasicPanel().getCboFreePickupGoods().isSelected();
		if (bool) {
			DataDictionaryValueVo vo = bean.getFlabelleavemonth() ;
			if(vo == null){
				bean.setFreePickupGoods(false);
				ui.getWaybillInfoPanel().getBasicPanel().getCboFreePickupGoods().setEnabled(false);
			}else{
				if (!WaybillConstants.VIP.equals(vo.getValueCode())
						&& !WaybillConstants.OMNI_ACTIVE.equals(vo.getValueCode())) {
					bean.setFreePickupGoods(false);
					ui.getWaybillInfoPanel().getBasicPanel().getCboFreePickupGoods().setEnabled(false);
				}
				
			}
			// 接货费
			bean.setPickupFee(BigDecimal.ZERO);
			// 重新计算运费
			CalculateFeeTotalUtils.resetCalculateFee(bean);
		} else {
			//是上门接货
			if (ui.getWaybillInfoPanel().getBasicPanel().getCboBigGoodsModel().isSelected()) {
				// 接货费输入框
				ui.getWaybillInfoPanel().getIncrementPanel().getTxtPickUpCharge().setEditable(false);
				//如果选择了上门接货 则设置是否修改标志位  需要重新计算接货费
				bean.setModifyMark(true);
			}else{
				// 接货费
				bean.setPickupFee(BigDecimal.ZERO);
				// 重新计算运费
				CalculateFeeTotalUtils.resetCalculateFee(bean);
			}
		}	
		//修改完是否上门接货不能立即提交需要再次计算运费
		ui.getButtonPanel().getBtnSubmit().setEnabled(false);
	}

	/*
	 * 是否是精准大票
	 */
	private void isBigGoodsListener(Boolean falg, WaybillInfoVo bean) {
		ui.getButtonPanel().getBtnSubmit().setEnabled(false);// 提交为不可编辑
		List<ProductEntity> list = WaybillRfcServiceFactory.getWaybillRfcService().queryTransType(bean.getReceiveOrgCode());	
		DefaultComboBoxModel productTypeModel = ui.getWaybillInfoPanel().getTransferPanel().getTransportInfoPanel().getProductTypeModel();
		if(list!=null && list.size()>0){
			productTypeModel.removeAllElements();
			CommonUtils.filterBigGoodsProductEntity(list,falg);
		}
		if(list!=null && list.size()>0){
			for (ProductEntity dataDictionary : list) {
				ProductEntityVo vo = new ProductEntityVo();
				
				if(CommonUtils.directDetermineIsExpressByProductCode(dataDictionary.getCode())){
					continue;
				}
				ValueCopy.entityValueCopy(dataDictionary, vo);
				productTypeModel.addElement(vo);
			}
		}
		for (int i = 0; i < productTypeModel.getSize(); i++) {
			ProductEntityVo vo = (ProductEntityVo) productTypeModel
					.getElementAt(i);
			if (falg) {
				// 默认设置为-精准大票卡航
				if (ProductEntityConstants.PRICING_PRODUCT_LONG_DISTANCE_FAST_FREIGHT_BG
						.equals(vo.getCode())) {
					bean.setProductCode(vo);
				}
			} else {
				// 默认设置为精准卡航
				if (ProductEntityConstants.PRICING_PRODUCT_LONG_DISTANCE_FAST_FREIGHT
						.equals(vo.getCode())) {
					bean.setProductCode(vo);
				}
			}
		}
		DefaultComboBoxModel pickModel = ui.getWaybillInfoPanel().getTransferPanel().getTransportInfoPanel().getPickModeModel();
		pickModel.removeAllElements();
		if(WaybillConstants.DELIVER_FREE.equals(ui.getOriginWaybill().getReceiveMethod().getValueCode()) 
				|| WaybillConstants.DELIVER_FREE_AIR.equals(ui.getOriginWaybill().getReceiveMethod().getValueCode())){
			Common.modifyPickModel(pickModel, falg);
		}else{
			Common.modifyPickModel(pickModel, falg,bean);
		}
		Common.modifyReceiveMethod(bean, pickModel);
		//setTargetEmpty(bean);
		
		if(bean.getIsBigGoods()){
			ui.incrementPanel.getCombActiveInfo().setSelectedItem(null);
			ui.incrementPanel.getCombActiveInfo().setEnabled(false);
		}else{
			ui.incrementPanel.getCombActiveInfo().setEnabled(true);
		}
	}

	/**
	 * 市场推广活动名称监听事件
	 * @创建时间 2014-5-20 上午10:46:58   
	 * @创建人： WangQianJin
	 */
	private void activeInfoListener(WaybillInfoVo bean){
		ui.getButtonPanel().getBtnSubmit().setEnabled(false);
		//修改了活动
		bean.setModifyMark(true);
		Common.resetDeliverGoodsFee(bean, ui);
	}
	
	/**
	 * 获取报价费率范围
	 * @param bean
	 */
	private void insuranceRateListener(WaybillInfoVo bean) {
		Common.setSaveAndSubmitFalse(ui);
		//最低保价费率
		BigDecimal minFeeRate = bean.getMinFeeRate();
		//最高保价费率
		BigDecimal maxFeeRate = bean.getMaxFeeRate();
		//调整保价费率
		BigDecimal insuranceRate = bean.getInsuranceRate().divide(new BigDecimal(NumberConstants.NUMBER_1000));
		//报价声明价值
		BigDecimal insuranceAmount =bean.getInsuranceAmount();
		if(minFeeRate!=null && maxFeeRate!=null){
			if(insuranceRate.compareTo(minFeeRate)<0
						||
			insuranceRate.compareTo(maxFeeRate)>0){
				minFeeRate=minFeeRate.multiply(new BigDecimal(NumberConstants.NUMBER_1000));
				maxFeeRate=maxFeeRate.multiply(new BigDecimal(NumberConstants.NUMBER_1000));
				ui.getButtonPanel().getBtnSubmit().setEnabled(false);
				throw new WaybillValidateException(i18n.get("foss.gui.changing.listener.Waybill.exception.Outrange",new Object[]{insuranceAmount,minFeeRate+"‰",maxFeeRate+"‰"}));
			}
		}
		Common.getInsuranceRateListener(bean);
	}

	/**
	 * 
	 * 修改费率需要重新计算总运费
	 * @author WangQianJin
	 * @date 2013-08-31
	 */
	private void tfrUnitPriceListener(WaybillInfoVo bean){
		ui.getButtonPanel().getBtnSubmit().setEnabled(false);
	}
	
	/**
	 * 
	 * 修改费率需要重新计算总运费
	 * @author WangQianJin
	 * @date 2013-08-31
	 */
	private void rtnUnitPriceListener(WaybillInfoVo bean){
		ui.getButtonPanel().getBtnSubmit().setEnabled(false);
	}
	
	/**
	 * 
	 * 转运与返货时初始化自提件信息
	 * @author WangQianJin
	 * @date 2013-08-16
	 */
	private void initEconomyGoodsListener(WaybillInfoVo bean){
		//判断是否是自提件
		if(bean.getIsEconomyGoods()!=null && bean.getIsEconomyGoods()){
			//经济自提件上门接货不能编辑
			ui.getWaybillInfoPanel().getBasicPanel().getCboReceiveModel().setEnabled(false);
			//自提件类型
			DataDictionaryValueVo initVo=getEconomyGoodsTypeByChannel(bean,true);
			bean.setEconomyGoodsType(initVo);			
			//设置自提件运输性质
			Common.economyGoodsTypeListener(bean,ui);
			//设置自提件提货方式
			Common.setEconomyReceiveMethod(bean,ui);		
		}
	}
	
	/**
	 * 
	 * 是否自提件监控
	 * @author WangQianJin
	 * @date 2013-08-16
	 */
	private void isEconomyGoodsListener(WaybillInfoVo bean){
		//判断是否是自提件
		if(bean.getIsEconomyGoods()!=null && bean.getIsEconomyGoods()){
			validateEconomyGoodsType(bean);
			//经济自提件上门接货不能编辑
			ui.getWaybillInfoPanel().getBasicPanel().getCboReceiveModel().setEnabled(false);
			//自提件类型
			DataDictionaryValueVo initVo=getEconomyGoodsTypeByChannel(bean,false);
			bean.setEconomyGoodsType(initVo);			
			//设置自提件运输性质
			Common.economyGoodsTypeListener(bean,ui);
			//设置自提件提货方式
			Common.setEconomyReceiveMethod(bean,ui);	
			//设置储运事项
			Common.economySetTransportationRemark(bean);
		}else{
			//自提件类型					
			bean.setEconomyGoodsType(null);
			//设置上门接货可编辑
			ui.getWaybillInfoPanel().getBasicPanel().getCboReceiveModel().setEnabled(true);
			//设置非自提件的运输性质
			Common.initCombProductType(bean,ui);
			//设置非自提件的提货方式
			Common.initCombPickMode(bean,ui);
			//设置储运事项
			Common.economySetTransportationRemark(bean);
		}
	}
	
	/**
	 * 校验是否自提件
	 * @author WangQianJin
	 * @date 2013-08-21
	 */
	private void validateEconomyGoodsType(WaybillInfoVo bean){
		boolean flag=false;
		EconomyVo ecoVo=null;		
		//根据开单日期获取自提件类型列表
		List<MinFeePlanEntity> minFeeList=waybillService.getMinFeePlanEntityByDate(bean.getBillTime());		
		if(minFeeList!=null && minFeeList.size()>0){		
			//循环遍历筛选
			for(MinFeePlanEntity entity:minFeeList){
				//判断是否能做自提件
				ecoVo=Common.getIsDefaultSelectedForRfc(bean,entity);
				//如果导入的订单符合经济自提件并且是非上门接货，则默认选中
				if(ecoVo.isResult()){
					flag=true;
					break;
				}
			}
			//不符合条件，给予提示
			if(!flag && ecoVo!=null){
				//没有符合条件的渠道信息，请检查最低一票方案是否配置以及运输性质、提货方式、上门接货是否符合自提件要求！
				if(!ecoVo.isResult()){
					throw new WaybillValidateException(i18n.get("foss.gui.changing.winbillbindinglistenter.iserror.isresult"));	
				}						
			}
		}else{
			//没有符合条件的渠道信息，请检查最低一票方案是否配置！
			throw new WaybillValidateException(i18n.get("foss.gui.changing.winbillbindinglistenter.iserror.minfeelist"));
		} 	
				
	}
	
	/**
     * 设置能否开经济自提件
     * @param panelVo
     */
    private DataDictionaryValueVo getEconomyGoodsTypeByChannel(WaybillInfoVo panelVo,boolean isInit){
    	DataDictionaryValueVo economyVo = null;		
    	if(panelVo.getOrderChannel()!=null){
    		//根据开单日期获取自提件类型列表
			List<MinFeePlanEntity> minFeeList=waybillService.getMinFeePlanEntityByDate(panelVo.getBillTime());		
			if(minFeeList!=null && minFeeList.size()>0){			
				//循环遍历筛选
				for(MinFeePlanEntity entity:minFeeList){
					if(entity!=null){	
						//判断是否能做自提件
						EconomyVo ecoVo=Common.getIsDefaultSelectedForRfc(panelVo,entity);
						if(isInit){
							ecoVo=Common.getIsDefaultSelected(panelVo,entity);
						}else{
							ecoVo=Common.getIsDefaultSelectedForRfc(panelVo,entity);
						}
						//如果导入的订单符合经济自提件并且是非上门接货，则默认选中
						if(ecoVo.isResult()){
							economyVo = new DataDictionaryValueVo();
							economyVo.setId(entity.getId());
							economyVo.setValueCode(entity.getChannelCode());
							economyVo.setValueName(entity.getPlanName());
							break;
						}
					}
				}				
			}
    	}
    	return economyVo;
    }
	
	/**
	 * 转货
	 * @param bean
	 */
	private void tfrFreightMethodListener(WaybillInfoVo bean) {
		
		//判断是否是自提件
		if(bean.getIsEconomyGoods()!=null && bean.getIsEconomyGoods()){
			//设置自提件提货方式
			Common.setEconomyReceiveMethod(bean,ui);
		}else{
			/**
			 * 判断合票方式和运输性质是否为空
			 */
			if (bean.getTfrFreightMethod() != null && bean.getTfrProductCode() != null) {
				/**
				 * 判断合票方式是否为单独开单和运输性质是否为精准空运
				 */
				if (ProductEntityConstants.PRICING_PRODUCT_FREIGNT_DDKD.equals(bean.getTfrFreightMethod().getValueCode())
						&& ProductEntityConstants.PRICING_PRODUCT_AIR_FREIGHT.equals(bean.getTfrProductCode().getCode())) {
					/**
					 * 创建提货方式对象
					 */
					DataDictionaryValueVo receiveMethod = new DataDictionaryValueVo();
					receiveMethod.setValueCode(WaybillConstants.AIRPORT_PICKUP);
					receiveMethod.setValueName(i18n.get("foss.gui.creating.transferInfoPanel.airportPickup.label"));
					bean.setTfrReceiveMethod(receiveMethod);
					ui.getWaybillInfoPanel().getTransferPanel().getTransferTabPanel().getTransferInfoPanel().getCombTransferAllocationType().setEnabled(false);
				} else {
					ui.getWaybillInfoPanel().getTransferPanel().getTransferTabPanel().getTransferInfoPanel().getCombTransferAllocationType().setEnabled(true);
				}
			}
		}
		
	}

	/**
	 * 更改运输性质，如果没有走货路线需要提示，然后设置计算价格按钮为不可编辑，如果有，设置计算价格按钮可以编辑
	 * @param bean
	 */
	private void recordProductCodeListener(WaybillInfoVo bean){
		
		if(!ui.getWaybillInfoPanel().getTransferPanel().getTransportRecordTabPanel().getTransferInfoPanel().getBtnQueryBranch().isEnabled()&&bean.getRecordProductCode()!=null)
		{
	try{
			OrgInfoDto	dto =rfcService.queryLodeDepartmentInfo(bean.getPickupCentralized(),bean.getReceiveOrgCode(), bean.getCustomerPickupOrgCode().getCode(), bean.getRecordProductCode().getCode());
		
			if (dto == null || dto.getFreightRoute() == null) {
				MsgBox.showInfo(i18n.get("foss.gui.creating.showPickupStationDialogAction.MsgBox.failQueryFreightRoute"));
				ui.getWaybillInfoPanel().getBillingPayPanel().getBtnCalculate().setEnabled(false);
				
			}else{
				ui.getWaybillInfoPanel().getBillingPayPanel().getBtnCalculate().setEnabled(true);
			}
			
	}catch(BusinessException e)
	{
		ui.getWaybillInfoPanel().getBillingPayPanel().getBtnCalculate().setEnabled(false);
		MsgBox.showInfo(e.getMessage());
		return;
	}
			
		}
		
		setSaveAndSubmitFalse(ui);
		
	}
	
	
	/**
	 * 更改运单号
	 * @param bean
	 */
	private void waybillNoListener(WaybillPanelVo bean) {
		//修改运单号
		setSaveAndSubmitFalse(ui);
	}
	
	/**
	 * 开单报价
	 * 
	 * @param bean
	 */
	private void transportFeeListener(WaybillPanelVo bean) {
		ConfigurationParamsEntity configuration= BaseDataServiceFactory.getBaseDataService()
				.queryConfigurationParamsByEntity(
						DictionaryConstants.SYSTEM_CONFIG_PARM__PKP, ConfigurationParamsConstants.CREATING_PARTNER_ORDER_DISCOUNT,
						FossConstants.ROOT_ORG_CODE);
		if(null!=configuration && StringUtils.isNotBlank(configuration.getConfValue())){
			if(BZPartnersJudge.IS_PARTENER){//合伙人需求
				
				//合伙人如果改单时没有重新计算公布价运费则不需要该验证  2016年4月16日 13:44:36 葛亮亮
				double temp = Double.parseDouble(configuration.getConfValue());
				int intValue2 = bean.getTransportFee().intValue();
				if (intValue2 != 0 && bean.getTempTransportFee() != null) {
					int transportFee = bean.getTempTransportFee().intValue();
					int intValue = (int) (transportFee * temp );
					bean.setTransportFeeCanvas(intValue2+"");
					CalculateFeeTotalUtils.resetCalculateFee(bean);
					if(FossConstants.YES.equals(bean.getIsCalTraFee())){
						if (intValue2 < intValue) {
							MsgBox.showInfo(i18n.get("foss.gui.changing.listener.Waybill.transportFeeBZPMsgBox",intValue));
						}
					}
				}
			}else{
				double temp = Double.parseDouble(configuration.getConfValue());
				int intValue2 = bean.getTransportFee().intValue();
				if(intValue2!=0 && bean.getTempTransportFee()!=null){
					int transportFee = bean.getTempTransportFee().intValue();
					int intValue = (int) (transportFee*temp+NumberConstants.NUMBER_0_5d);
					if(intValue2>=intValue){
						CalculateFeeTotalUtils.calculateFee(bean);
						ui.getButtonPanel().getBtnSubmit().setEnabled(true);
					}else{
						MsgBox.showInfo(i18n.get("foss.gui.creating.listener.Waybill.transportFeeMsgBox")+intValue);
						ui.getButtonPanel().getBtnSubmit().setEnabled(false);
					}
				}
			}
		}else{
			int intValue2 = bean.getTransportFee().intValue();
			if(intValue2!=0 && bean.getTempTransportFee()!=null){
				int transportFee = bean.getTempTransportFee().intValue();
				int intValue = (int) (transportFee*NumberConstants.NUMBER_0_35d+NumberConstants.NUMBER_0_5d);
				if(intValue2>=intValue){
					CalculateFeeTotalUtils.calculateFee(bean);
					ui.getButtonPanel().getBtnSubmit().setEnabled(true);
				}else{
					MsgBox.showInfo(i18n.get("foss.gui.creating.listener.Waybill.transportFeeMsgBox")+intValue);
					ui.getButtonPanel().getBtnSubmit().setEnabled(false);
				}
			}
		}
		
		if (!bean.getIsWholeVehicle()) {//整车的情况才有开单报价
			/**
			 * 不是整车 直接返回不操作
			 */
			return;
		}
		/**
		 * 开单报价为null
		 */
		if (bean.getTransportFee() == null) {
			/**
			 * 直接返回不操作
			 */
			return;
		}
		/**
		 * 整车费用浮动上限
		 */
		BigDecimal rate = bean.getWholeVehicleActualfeeFlowRangeUp();

		/**
		 * 整车费用浮动下限
		 */
		BigDecimal ratelow = bean.getWholeVehicleActualfeeFlowRangeLow();
		if (ratelow == null) {//如果没有配置
			/**
			 * 弹出提示
			 */
			MsgBox.showInfo(i18n.get("foss.gui.creating.listener.Waybill.transportFee.one"));
			/**
			 * 浮动上限取默认值0.1
			 */
			ratelow= BigDecimal.valueOf(NumberConstants.NUMBER_0_1d);
		}
		
		BigDecimal upLevel = null;
		if(rate!=null){
    		/**
    		 * 整车费用浮动上限
    		 */
    		BigDecimal uprate = BigDecimal.ONE.add(rate);
    		/**
    		 * 整车费用浮动上限值
    		 */
    		upLevel = bean.getWholeVehicleAppfee().multiply(uprate);
		}
		/**
		 * 整车费用浮动下限
		 */
		//zxy 20131112 BUG-58343 start 修改：sub 改成 add 按开单的为准
		BigDecimal lowrate = BigDecimal.ONE.add(ratelow);	
		//zxy 20131112 BUG-58343 end 修改：sub 改成 add 按开单的为准
		/**
		 * 整车费用浮动下限值
		 */
		BigDecimal lowLevel = bean.getWholeVehicleAppfee().multiply(lowrate);
		
		if(upLevel!=null&&upLevel.doubleValue()>0){
    		/**
    		 * 运输费用不在浮动返回以内
    		 * 不能用该开单费用
    		 */
    		if (bean.getTransportFee().doubleValue() < lowLevel.doubleValue() || bean.getTransportFee().doubleValue() > upLevel.doubleValue()) {
    			/**
    			 * 提示错误
    			 */
    			MsgBox.showInfo(i18n.get("foss.gui.creating.listener.Waybill.transportFee.two") + lowLevel.doubleValue() + "~" + upLevel.doubleValue());
    		}else{/**
    			 * 重新设置开单费用
    			 */
    			bean.setWholeVehicleActualfee(bean.getTransportFee());
    		}
		}else{
			/**
    		 * 运输费用不在浮动返回以内
    		 * 不能用该开单费用
    		 */
    		if (bean.getTransportFee().doubleValue() < lowLevel.doubleValue()) {
    			/**
    			 * 提示错误
    			 */
    			MsgBox.showInfo(i18n.get("foss.gui.creating.listener.Waybill.transportFee.three") + lowLevel.doubleValue());
    		}else{/**
    			 * 重新设置开单费用
    			 */
    			bean.setWholeVehicleActualfee(bean.getTransportFee());
    		}
		}
	}

	/**
	 * 
	 * <p>
	 * (货物品名事件监听)
	 * </p>
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-10-19 下午03:09:04
	 * @see
	 */
	private void gooodsNameListener(WaybillInfoVo bean) {
		ui.getButtonPanel().getBtnSubmit().setEnabled(false);// 提交为不可编辑
		if(bean!=null && !bean.getIsWholeVehicle()){
			// 是否限保物品
			isInsurGoods(bean);
			// 是否贵重物品
			isValuablesGoods(bean);
		}
		/* zhangchengfu 20150530 FOSS系统新客户标签需求 begin */
		//根据货物名称，填充行业货源品类
		if(bean != null){
			Common.fillIndustrySourceCategoryData(bean, ui);
		}
		/* zhangchengfu 20150530 FOSS系统新客户标签需求 end */
	}
	
	/**
	 * 
	 * 联动后，都需要把提交实体设置为空，保证修改优惠券编号后，都需要用户点击计算，来校验优惠券 和把优惠券的金额减去中运费
	 * 
	 * @author 026113-FOSS-linwensheng
	 * @date 2013-1-4 上午09:52:49
	 */

	private void promotionsCodeListener(WaybillPanelVo bean) {
		/**
		 * 联动后，都需要把提交实体设置为空
		 */
		bean.setCouponInfoDto(null);
		/**
		 * 联动后，都需要把提交实体设置为空
		 */
		bean.setCouponFree(null);
		//修改运单号
		setSaveAndSubmitFalse(ui);
	}

	/**
	 * 
	 * 是否限保物品
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-11-12 下午02:49:13
	 */
	private void isInsurGoods(WaybillInfoVo bean) {
		
		/**
		 *  判断是否限保物品
		 *  1.	SUC-494-录入货物信息
		 *  规则：
		 * SR1： 3.	若货物为限保物品，则系统自动限定保价金额，且不可修改，并提示“货物为限保物品”；
		 */
		LimitedWarrantyItemsEntity entity = waybillService.isInsurGoods(bean.getGoodsName());
		if (entity != null) {
			MsgBox.showInfo(i18n.get("foss.gui.creating.listener.Waybill.insurGoods.one"));
			bean.setVirtualCode(entity.getVirtualCode());
			bean.setLimitedAmount(entity.getLimitedAmount());//限制报价金额
			ui.incrementPanel.getTxtInsuranceValue().setEnabled(false);// 设置为不可编辑
			ui.getWaybillInfoPanel().getBasicPanel().getChbExhibitCargo().setEnabled(false);// 设置为不可编辑
			/**
			 * 如果限保物品保价金额为空时：设置为0，不可编辑
			 */
			if (entity.getLimitedAmount() != null &&  !bean.getIsWholeVehicle()) {
				bean.setInsuranceAmount(entity.getLimitedAmount());
				bean.setInsuranceAmountCanvas(entity.getLimitedAmount().toString());
			} else {
				bean.setInsuranceAmount(BigDecimal.ZERO);
				bean.setInsuranceAmountCanvas(ZERO);
			}
		} else {
			//zxy 20131219 DEFECT-937 start 修改:当货物还在开单部门库存时，才可以改变保价声明价值为可编辑
			//货物状态为营业部库存出库的情况下
			if(bean.getGoodsStatus()!=null && WaybillRfcConstants.RECEIVE_STOCK.equals(bean.getGoodsStatus().getValueCode())){
				ui.incrementPanel.getTxtInsuranceValue().setEnabled(true);// 设置可编辑
			}
			//zxy 20131219 DEFECT-937 end 修改:当货物还在开单部门库存时，才可以改变保价声明价值为可编辑
			bean.setVirtualCode("");
		}
	}

	/**
	 * 
	 * 根据名称判断是否贵重物品
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-12-22 下午03:46:17
	 * @param WaybillBindingListener
	 */
	private void isValuablesGoods(WaybillInfoVo bean) {
		isValueGoods(bean);
	}
	
	/**
	 * 
	 * 对内备注事件监听
	 * @author 025000-FOSS-helong
	 * @date 2013-1-9 下午05:55:20
	 */
	private void innerNotesListener(WaybillInfoVo bean){
		/**
		 *  对内备注
		 */
		StringBuffer sb = new StringBuffer("");
		/**
		 * 木架
		 */
		String woodTxt= "";
		/**
		 * 木箱
		 */
		String sandTxt= "";
		/**
		 *得到对内备注事
		 */
		String originalTxt = bean.getTransportationRemark();
		if(originalTxt==null){//如果为null
			/**
			 * 木架设置为""
			 */
			originalTxt = "";
		}
		
		/**
		 * 对内备注事分解为数组
		 */
		String[] remark = originalTxt.split(";");
		/**
		 * 遍历数组
		 */
		for(int i=0;i<remark.length;i++){
			/**
			 * 查看每个对内备注
			 */
			String oldData = remark[i];
			/**
			 * 如果是木架
			 * @update 为木架增加"/"，与对内备注可能会出现的“木架”区分开
			 */
			if(oldData.indexOf(StringUtil.defaultIfNull(i18n.get("foss.gui.creating.woodYokeEnterAction.standGoods") + "/")) != -1){
				/**
				 * 木架设置为原始值
				 */
				woodTxt = oldData;
			}
			/**
			 * 如果是木箱
			 * @update 为木箱增加"/"，与对内备注可能会出现的“木箱”区分开
			 */
			if(oldData.indexOf(StringUtil.defaultIfNull(i18n.get("foss.gui.creating.woodYokeEnterAction.boxGoods") + "/")) != -1){
				/**
				 * 木箱设置为原始值
				 */
				sandTxt = oldData;
			}
		}
		/*
		 * BUG-57555 贵重物品 显示的优先级最高
		 */
		if(ui.getWaybillInfoPanel().getGoodsPanel().getChbValuable().isSelected()){
	       	sb.append(i18n.get("foss.gui.changing.waybillInfoBindingListener.goodsPanel.chbValuable")).append("; ");
        }
		
		// 返单类别
		String returnBillType =ui.getBinderWaybill().getReturnBillType().getValueName();
        if(ui.getBinderWaybill().getReturnBillType()!=null){
        	if(returnBillType!=null
        			&& !"".equals(returnBillType)
        			&& !WaybillConstants.NOT_RETURN_BILL.equals(ui.getBinderWaybill().getReturnBillType().getValueCode())){
        		sb.append(returnBillType).append(";");
        	} 
        }
        
		/**
		 * 木架不是空
		 */
		if(StringUtils.isNotEmpty(woodTxt)){
			/**
			 * 木架附上
			 */
    		sb.append(woodTxt).append("; ");
    	}
		/**
		 * 木箱不是空
		 */
    	if(StringUtils.isNotEmpty(sandTxt)){
    		/**
			 * 木箱附上
			 */
    		sb.append(sandTxt).append("; ");
    	}
		
		/**
		 * 对外备注
		 */
        JComboCheckBox checkbox = (JComboCheckBox) (JComboCheckBox)ui.getWaybillInfoPanel().getTransferPanel().getTransportInfoPanel().getCombOutSideRemark();
        /**
		 * 遍历数组
		 */
        for (String string : checkbox.getCheckedValues()) {
        	/**
			 * 查看每个对外备注
			 */
			sb.append(string).append("; ");
		}
        	
        /**
         * 对内备注
         */
        String innerSiderRemark = ui.getWaybillInfoPanel().getTransferPanel().getTransportInfoPanel().getTxtInsideRemark().getText();
        /**
         * 对内备注不是null
         */
        if(innerSiderRemark!=null && !"".equals(innerSiderRemark) ){
        	// 变更明细表的字段长度为varchar2（1000），最多只能储存333汉字
        	//if(innerSiderRemark.length() > 300){
        		//MsgBox.showInfo("对内备注长度不能超过300字符");
				//return;
        	//}
        	/**
			 * 查看每个对外备注
			 */
        	sb.append(innerSiderRemark).append("; ");
        }
        	
        /**
         * 大车直送
         */
        if(ui.getWaybillInfoPanel().getGoodsPanel().getChbCarThrough().isSelected()){
        	/**
             * 大车直送备注
             */
        	sb.append(i18n.get("foss.gui.changing.waybillInfoBindingListener.chbCarThrough.laber")).append("; ");
        }
        
        /**
         * 设置对外备注
         */
        bean.setTransportationRemark(sb.toString());	
	
	}
	
	
	/**
	 * 差错处理编号
	 * 
	 * @author 026113-FOSS-林文升
	 * @param bean
	 */
	private void errorHandling(WaybillInfoVo bean){
		/**
		 * 差错编号是否可以使用为false
		 */
		bean.setErrorCodeIsTrue(false);
		try {
			 /**
		     * 
		     * 查询差错处理结果
		     * 
		     * @author 102246-foss-shaohongliang
		     * @date 2012-11-27 上午10:00:13
		     */
			LostRepDto errorHandlingResult = waybillService.queryErrorHandlingResult(bean.getErrorHandlingCode(), bean.getWaybillNo());
			/**
			 * 查询失败原因(查询不到或者其他业务规则原因导致查询失败需要返回原因)
			 */
			bean.setErrorHandlingResult(errorHandlingResult.getMessage());
			/**
			 * 有正确处理结果
			 */
			if(errorHandlingResult.isResultType()){
				/**
				 * 弹出报错对话框
				 */
				MsgBox.showError(bean.getErrorHandlingCode()+i18n.get("foss.gui.changing.waybillInfoBindingListener.msgBox.getErrorHandlingCode"));
				/**
				 * 查询失败原因(查询不到或者其他业务规则原因导致查询失败需要返回原因)
				 */
				bean.setErrorHandlingResult(bean.getErrorHandlingCode()+i18n.get("foss.gui.changing.waybillInfoBindingListener.msgBox.getAllErrorHandlingCode"));
				/**
				 * 设置 中止信息面板
				 */
				setAbortInfoPanelMEssage(ui,bean.getErrorHandlingCode()+i18n.get("foss.gui.changing.waybillInfoBindingListener.msgBox.getErrorHandlingCode"),DateUtils.convert(new Date()));
				/**
				 * 差错编号是否可以使用为true
				 */
				bean.setErrorCodeIsTrue(true);
				/**
				 * 设置为fasle
				 */
				ui.getButtonPanel().getBtnSubmit().setEnabled(true);
			}
			/**
			 * 失败
			 */
			else{
				/**
				 * 弹出报错对话框
				 */
				MsgBox.showError(bean.getErrorHandlingCode()+":"+errorHandlingResult.getMessage());
				/**
				 * 清空 中止信息面板
				 */
				setAbortInfoPanelMEssage(ui,"","");
				/**
				 * 不能提交
				 */
				ui.getButtonPanel().getBtnSubmit().setEnabled(false);
				/**
				 * 差错编号是否可以使用为true
				 */
				bean.setErrorCodeIsTrue(false);
			}
		} catch (BusinessException e) {//异常
			ExceptionHandler.alert(e);
			setAbortInfoPanelMEssage(ui,"","");
			bean.setErrorCodeIsTrue(false);
			ui.getButtonPanel().getBtnSubmit().setEnabled(false);
		}
		
	}
	
	/**
	 * 设置 中止信息面板
	 * @param ui
	 * @param lblErrorResult
	 * @param operateTime
	 */
    private void setAbortInfoPanelMEssage(WaybillRFCUI ui,String lblErrorResult,String operateTime){
    	ui.getMessagePanel().getAbortInfoPanel().getLblErrorResult().setText(lblErrorResult);
    	ui.getMessagePanel().getAbortInfoPanel().getLblOperateTime().setText(operateTime);
    	
    }
    
	/**
	 * 
	 * （提货方式变更监听）
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-10-20 下午01:56:55
	 */
	private void returnReceiveMethodListener(WaybillInfoVo bean) {
		if (bean.getRtnReceiveMethod() != null) {//提货方式变 not null
			// 各种自提
			selfRtnPickup(bean);
			
			String code = bean.getRtnReceiveMethod().getValueCode();
			//删除超远派送费
			deleteVeryFarFee(code);

			setSaveAndSubmitFalse(ui);//不能提交
			//发票标记
			CommonUtils.setInvoiceType(bean,bean.getBillTime());
			//内部带货处理
			Common.innerPickup(bean, ui, bean.getRtnReceiveMethod().getValueCode());
		}
	}
	
	/**
	 * 
	 * 提货方式-自提业务规则处理
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-12-4 下午03:25:42
	 */
	private void selfRtnPickup(WaybillInfoVo bean) {
		String code = bean.getRtnReceiveMethod().getValueCode();
		// 判断是否自提
		// 返货提货方式变更监听--设置送货费可编辑  【徐思衍-20160808-空运提货方式优化】
		if (WaybillConstants.SELF_PICKUP.equals(code)
//				|| WaybillConstants.AIR_SELF_PICKUP.equals(code)
				|| WaybillConstants.AIR_PICKUP_FREE.equals(code) || WaybillConstants.AIRPORT_PICKUP.equals(code)
				|| WaybillConstants.INNER_PICKUP.equals(code)
				|| WaybillConstants.DELIVER_INNER_PICKUP.equals(code)) {
			ui.incrementPanel.getTxtDeliveryCharge().setEnabled(false);
			bean.setDeliveryGoodsFee(BigDecimal.ZERO);
			bean.setDeliveryGoodsFeeCanvas("0");
			bean.setCalculateDeliveryGoodsFee(BigDecimal.ZERO);
		} else {
			ui.incrementPanel.getTxtDeliveryCharge().setEnabled(true);
		}
		
		if(WaybillConstants.INNER_PICKUP.equals(code)||WaybillConstants.DELIVER_INNER_PICKUP.equals(code)){
			//发票标记
			bean.setInvoiceTab(WaybillConstants.INVOICE_TYPE_02);
			bean.setInvoice(WaybillConstants.INVOICE_02);
		}
	}


	/**
	 * 
	 * 返货没有空运类型
	 * 
	 * @author 102246-foss-shaohongliang
	 * @date 2012-10-22 下午04:48:08
	 */
	private void returnProductCodeListener(WaybillInfoVo bean) {
		// 产品对象
		ProductEntityVo product = bean.getRtnProductCode();
		//精准包裹提示
		Common.validateProductCode(bean,product);
		/**
		 * 精准包裹运输性质不能免费接货
		 */
		Common.changeFreePickUpGoods(bean, ui,product);
		// 根据运输性质改变提货方式
		changeRtnPickUpMode(bean);
		//设置自提件提货方式
		Common.setEconomyReceiveMethod(bean,ui);
		// 空运、偏线以及中转下线无法选择签收单返单
		Common.setReturnBill(bean, ui);
		// 偏线与空运不能选择预付费保密
		setRtnSecretPrepaid(bean);
		//清掉走货路径
		cleanTranportOrgInfo(bean);
		setSaveAndSubmitFalse(ui);//不能提交
		
	}
	
	
	/**
	 * 清掉走货路径
	 * @param bean
	 */
	private void cleanTranportOrgInfo(WaybillInfoVo bean) {
		
		//变更类型
		String rfcType = bean.getRfcType().getValueCode();
		bean.setOrgInfoDto(null);// 清掉走货路径
		
		if(!WaybillRfcConstants.RETURN.equals(rfcType)  && !WaybillRfcConstants.TRANSFER.equals(rfcType)){
			bean.setLoadLineName("");// 配载线路名称
			bean.setLoadLineCode("");// 配载线路编码
			bean.setLoadOrgCode("");// 配载部门编号
			bean.setLoadOrgName("");// 配载部门名称
		}
		bean.setLastLoadOrgCode("");// 最终配载部门编号
		bean.setLastLoadOrgName("");// 最终配载部门名称
		bean.setPackageOrgCode("");// 代打木架部门编码
		bean.setPackingOrganizationName("");// 代打木架部门名称
		bean.setDoPacking("");// 是否可以打木架
		bean.setLastOutLoadOrgCode("");//最终配置外场
		bean.setTfrTargetOrgCode("");//转运目的站
		bean.setTfrCustomerPickupOrgName("");//转运提货网点
		bean.setTfrCustomerPickupOrgCode(null);//清除最转运终目的站
		bean.setRtnTargetOrgCode("");//返货目的站
		bean.setRtnCustomerPickupOrgName("");//返货提货网点
		bean.setRtnCustomerPickupOrgCode(null);//清除返货最终目的站
	}

	/**
	 * 
	 * 根据运输性质的改变，改变提货方式
	 * @author 102246-foss-shaohongliang
	 * @date 2012-11-8 上午9:56:05
	 */
	private void changeRtnPickUpMode(WaybillInfoVo bean) {
		// 清除数据
		DefaultComboBoxModel returnPikcModeModel = ui.getWaybillInfoPanel().getTransferPanel().getReturnTabPanel().getReturnInfoPanel().getPickModeModel();
		
		//DefaultComboBoxModel pikcModeModel = ui.getWaybillInfoPanel().getTransferPanel().getTransportInfoPanel().getPickModeModel();
	
		returnPikcModeModel.removeAllElements();
		ProductEntityVo productVo = bean.getProductCode();
		ProductEntityVo productEntityVoReturn = bean.getRtnProductCode();
		List<DataDictionaryValueEntity> list = waybillService.queryPickUpGoodsHighWays();
		
		//精准包裹，隐藏“内部带货自提”和“内部带货送货”
		delInnerPickUp(productEntityVoReturn, list);
		//DMANA-4923  FOSS开单提货方式隐藏“免费送货”
		if(ui.getOriginWaybill().getReceiveMethod().getValueCode()!=null && !WaybillConstants.DELIVER_FREE.equals(ui.getOriginWaybill().getReceiveMethod().getValueCode()) && !WaybillConstants.DELIVER_FREE_AIR.equals(ui.getOriginWaybill().getReceiveMethod())){
			for (int i = 0; i < list.size(); i++) {
				if(WaybillConstants.DELIVER_FREE.equals(list.get(i).getValueCode()) || WaybillConstants.DELIVER_FREE_AIR.equals(list.get(i).getValueCode())){
					list.remove(list.get(i));
				}
			}
		}
		Common.delReceiveMethod(productVo, list);
		//当运输性质为门到门的时候，进行剔除提货方式为自提的方式
		//Common.delReceiveMethodDTD(productEntityVoReturn, list);
		for (DataDictionaryValueEntity dataDictionary : list) {
			//非批量开单 不允许有 内部带货送货 -- sangwenhao
			//合伙人开的单 去除内部带货自提、送货上楼安装（家居）,内部带货送货 -- sangwenhao
			if((WaybillConstants.DELIVER_INNER_PICKUP.equals(dataDictionary.getValueCode())&&!ui.isBatchWaybill())
					||(BZPartnersJudge.IS_PARTENER && (WaybillConstants.INNER_PICKUP.equals(dataDictionary.getValueCode()) 
				    || WaybillConstants.DELIVER_INNER_PICKUP.equals(dataDictionary.getValueCode())
					|| WaybillConstants.DELIVER_FLOOR.equals(dataDictionary.getValueCode())))){
				continue ;
			}
			
			DataDictionaryValueVo vo = new DataDictionaryValueVo();
			ValueCopy.valueCopy(dataDictionary, vo);
			returnPikcModeModel.addElement(vo);
			if (WaybillConstants.SELF_PICKUP.equals(vo.getValueCode()))// 设置提货方式默认值
			{
				bean.setReceiveMethod(vo);
			}
			
		}
		/*
		if(returnPikcModeModel.getSize()>0){
			ui.getWaybillInfoPanel().getTransferPanel().getReturnTabPanel().getReturnInfoPanel().getCombReturnAllocationType().setSelectedIndex(0);
		}*/
	}

	/**
	 * 
	 * 空运、偏线以及中转下线无法选择签收单返单
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-11-7 上午11:09:08
	 */
	protected void setRtnReturnBill(WaybillInfoVo bean) {
		ProductEntityVo productVo = bean.getRtnProductCode();
		if (ProductEntityConstants.PRICING_PRODUCT_PARTIAL_LINE.equals(productVo.getCode())
				|| ProductEntityConstants.PRICING_PRODUCT_AIR_FREIGHT.equals(productVo.getCode())) {
			ui.getWaybillInfoPanel().getTransferPanel().getTransportInfoPanel().getCombReturnBillType().setEnabled(false);
		} else {
			ui.getWaybillInfoPanel().getTransferPanel().getTransportInfoPanel().getCombReturnBillType().setEnabled(true);
		}
	}

	/**
	 * 
	 * 偏线与空运不能选择预付费保密
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-11-8 上午08:30:46
	 */
	private void setRtnSecretPrepaid(WaybillInfoVo bean) {
		WaybillInfoVo waybillVo = ui.getOriginWaybill();
		//原为预付费保密的可以取消；
		//原为非预付费保密的不可更改为预付费保密
		if(waybillVo.getSecretPrepaid()!= null && waybillVo.getSecretPrepaid()){
			ProductEntityVo productVo = bean.getRtnProductCode();
			if (ProductEntityConstants.PRICING_PRODUCT_PARTIAL_LINE.equals(productVo.getCode())
					|| ProductEntityConstants.PRICING_PRODUCT_AIR_FREIGHT.equals(productVo.getCode())) {
				ui.getWaybillInfoPanel().getBillingPayPanel().getChbSecrecy().setSelected(false);
				ui.getWaybillInfoPanel().getBillingPayPanel().getChbSecrecy().setEnabled(false);
			} else {
				ui.getWaybillInfoPanel().getBillingPayPanel().getChbSecrecy().setEnabled(true);
			}
		}
	}

	/**
	 * 
	 * 原运输类型 + 原目的站 + 转运目的站 | 原运输类型 + 货物是否出最终配载部门 + 最终配载部门 + 转运目的站 --> 转运运输性质
	 * 
	 * @author 102246-foss-shaohongliang
	 * @date 2012-11-5 上午9:30:36
	 */
	public void returnCustomerPickupOrgNameListener(WaybillInfoVo bean) {
		//修改返货费率可编辑性
		changeRtnUnitPrice(bean);
	}

	
	/**
	 * 
	 * 修改转运费率是否可编辑
	 * @author 102246-foss-shaohongliang
	 * @date 2012-12-25 下午2:10:52
	 */
	private void changeRtnUnitPrice(WaybillInfoVo bean) {
		boolean isNeedHandEdit = isRtnUnitHandEdit(bean);
		bean.setRtnNeedHandWrite(isNeedHandEdit);
		ReturnInfoPanel returnInfoPanel = ui.getWaybillInfoPanel().getTransferPanel().getReturnTabPanel().getReturnInfoPanel();
		//返货费率、计价方式可编辑
		returnInfoPanel.getCombReturnBillingType().setEnabled(isNeedHandEdit);
		returnInfoPanel.getTxtReturnUnitPrice().setEnabled(isNeedHandEdit);
	}
	
	/**
	 * 
	 * 是否需要手动修改转运费率
	 * @author 102246-foss-shaohongliang
	 * @date 2012-12-25 下午2:13:10
	 */
	private boolean isRtnUnitHandEdit(WaybillInfoVo bean) {
		if(bean == null){
			MsgBox.showInfo("运单信息为空！");
			return false;
		}
		if(!isNeedCalcZZF(bean)){
			setTransportOtherCharge(bean);
			return false;
		}
		
		//已出最终配载部门手动编辑
		if(bean.isRtnNeedFilter()){
			return true;
		}
		if(bean.getRtnCustomerPickupOrgCode() == null){
			return false;
		}
		ProductPriceDto dto = null;

		QueryBillCacilateDto cacilateDto = getRtnQueryParam(bean);
		//开单时刻上门接货价
		if(bean.getPickupToDoor()){
			dto = getProductPriceDto(bean, cacilateDto);
		}
		//开单时刻非上门接货价
		if(dto == null){
			cacilateDto.setIsReceiveGoods(FossConstants.NO);//no
			dto = getProductPriceDto(bean, cacilateDto);
		}
		//当前时刻上门接货价
		if(dto == null && bean.getPickupToDoor()){
			cacilateDto.setReceiveDate(null);// 营业部收货日期（可选，无则表示当前日期）
			cacilateDto.setIsReceiveGoods(FossConstants.YES);//no
			dto = getProductPriceDto(bean, cacilateDto);
		}
		//当前时刻非上门接货价
		if(dto == null){
			cacilateDto.setReceiveDate(null);// 营业部收货日期（可选，无则表示当前日期）
			cacilateDto.setIsReceiveGoods(FossConstants.NO);//no
			dto = getProductPriceDto(bean, cacilateDto);
		}

		//找不到公布价手动编辑
		if(dto == null){
			MsgBox.showInfo(i18n.get("foss.gui.changing.waybillInfoBindingListener.msgBox.nullProductPrice"));
			return true;
		}else{

			/**
			 * FOSS20150818-RFOSS2015052405-更改单异常操作服务费规则优化
			 * @author foss-206860
			 * 现状：只要多次更改中转费都叠加；需求要求：在范围一和范围二中多次更改只收取一次中转费 
			 * 货物库存范围一：货物已出收货部门库存未出第一中转外场库存（多次更改只收取一次中转费）；
			 * 货物库存范围二：货物已出到达部门上一级外场库存未出到达部门库存（多次更改只收取一次中转费）；
			 * 货物库存范围三：不属阶段一也不属阶段二（多次更改中转费叠加）；
			 */
			//判断该运单的货物是否分批，若分批则不处理，不分批才走新逻辑
			//更改单异常操作服务费规则优化(是否叠加中转费)
			if(cacilateDto != null){
				//为了后期计算中转费，获取更改时的货物状态范围
				queryRangeForZZ(bean);
				//将数据加载至bean对象中
				addRfcTranferList(bean,dto,cacilateDto);
			}
			
			
			
			if(CollectionUtils.isNotEmpty(bean.getRfcTranferList())){
				//针对中转费重新加载其他费用面板
				loadZZOther(bean);
			}else{
				return true;
			}
			return false;
		}
		

//		//找不到公布价手动编辑
//		if(dto == null){
//			MsgBox.showInfo(i18n.get("foss.gui.changing.waybillInfoBindingListener.msgBox.nullProductPrice"));
//			return true;
//		}else{
//			//设置计费类型
//			DataDictionaryValueVo dataDictionaryValueVo = new DataDictionaryValueVo();
//			dataDictionaryValueVo.setValueCode(dto.getCaculateType());
//			bean.setRtnBillingType(dataDictionaryValueVo);//费率
//			bean.setRtnUnitPrice(dto.getActualFeeRate());
//			//总费用
//			bean.setRtnFee(dto.getCaculateFee().setScale(0, BigDecimal.ROUND_HALF_UP));// 四舍五入
//			bean.setTfrFee(BigDecimal.ZERO);
//			setTransportOtherCharge(bean);
//			return false;
//		}
	}
	
	/**
	 * 
	 * 是否需要重新计算中转费
	 * 
	 * 现状：FOSS设计：货物离开出发部门库存后，客户要求发起目的站变更均要收取中转费。
	 * 从12月3日至12月18日，中转费投诉424条，最终外场出库前就起草同城更改并收取中转费的投诉有103条，
	 * 其中铂金客户4位，黄金客户8位。一线部门反馈，客户对现有中转费收取规则很不满意。 
	 * 
	 * 方案：1、同城定义：以原到达部门所在地级市为判断依据。更改前后部门在同一地级市行政区域范围内为同城，
	 * 更改前后部门不在同一地级市行政区域范围内为异地。 
	 * 2、货物离开出发部门库存后，客户要求将目的站更改为异地目的站，须收取中转费。
	 * 例如，客户要求将原发往重庆北碚区营业部的货物更改至四川泸州蓝田营业部，虽然是同一外场配载，但分属不同地级市，须收取中转费。 
	 * 3、货物离开出发部门库存后，客户要求将目的站更改为同城目的站： 
	 *  3.1、货物离开出发部门库存后至到达部门上一级外场交接出库前，不收取中转费。
	 *  例如客户要求将原发往上海浦东上南路营业部的货物更改至上海派送部，虽然是不同外场配载，但分属同意地级市，不收取中转费 
	 *  3.2、货物在到达部门（驻地派送部为到达部门）库存中，更改为同城部门，须收取中转费 
	 *  3.3、货物离开到达部门上一级外场库存或有交接记录且交接目的站为原到达部门，须收取中转费 
	 * 4、中转费计算规则不变 
	 * 
	 * 效益：每月货物在最终外场出库前，更改同城目的站的有17855条，公司每月开单量约为300万条，
	 * 规则优化后影响的更改率很小，为0.6%。但是可以提高这些更改运单客户的满意度。
	 * 平均每一条同城目的站更改需要20分钟时间解释，优化后将节省357100分钟、5951小时。
	 * 
	 * @author 102246-foss-shaohongliang
	 * @date 2013-3-12 下午7:00:11
	 */
	private boolean isNeedCalcZZF(WaybillInfoVo bean) {
		boolean isCalcZZF = true;
		
		//界面选择的新的提货网点
		BranchVo branchVo = bean.getFinalCustomerPickupOrgCode();
		
		//导入的时候的提货部门所属的
//		BranchVo branchVoOld = bean.getCustomerPickupOrgCode();
		BranchVo branchVoOld = ui.getOriginWaybill().getCustomerPickupOrgCode();
		
		// zxy 20131114 KDTE-5804 start 新增:当是转运性质类型，且从地图中选择的目的站，需要调整一下数据
		//						(地图会把CustomerPickupOrgCode和tfrCustomerPickupOrgCode改成同一个值，同时cityCode是中文描述的)
		String rfcType = bean.getRfcType().getValueCode();
		if (WaybillRfcConstants.TRANSFER.equals(rfcType) || WaybillRfcConstants.RETURN.equals(rfcType)) {
			//如果是汽运偏线或空运
			if(ProductEntityConstants.PRICING_PRODUCT_PARTIAL_LINE.equals(bean.getFinalProductCode().getCode())					
					|| ProductEntityConstants.PRICING_PRODUCT_AIR_FREIGHT.equals(bean.getFinalProductCode().getCode())){
				//偏给代理网点
				OuterBranchEntity agent = waybillService.queryAgencyBranchInfo(branchVo.getCode());
				if(agent!=null){
					branchVo.setCityCode(agent.getCityCode());
				}
			}else{
				QueryPickupPointDto queryDto = new QueryPickupPointDto();
				queryDto.setActive(FossConstants.YES);
				queryDto.setTargetOrgCode(branchVo.getCode());
				SaleDepartmentEntity saleDepartment = waybillService.queryDepartmentInfoByDto(queryDto);
				if(saleDepartment!=null){
					branchVo.setCityCode(saleDepartment.getPickupAreaDesc());
				}				
			}
			
		}
		// zxy 20131114 KDTE-5804 end 新增:当是转运性质类型，且从地图中选择的目的站，需要调整一下数据
		//						(地图会把CustomerPickupOrgCode和tfrCustomerPickupOrgCode改成同一个值，同时cityCode是中文描述的)
		
		if(!ProductEntityConstants.PRICING_PRODUCT_AIR_FREIGHT
				.equals(ui.getOriginWaybill().getProductCode().getCode())
				&& !ProductEntityConstants.PRICING_PRODUCT_PARTIAL_LINE
				.equals(ui.getOriginWaybill().getProductCode().getCode())){
			
			if(branchVo!=null && branchVoOld!=null){
				//修改后的提货网点如果是属于同一个城市
				if(branchVo.getCityCode()!=null 
						&&branchVoOld.getCityCode()!=null 
						&& branchVo.getCityCode().equals(branchVoOld.getCityCode())){
					String currentStockOrgCode = bean.getStockStatus().getCurrentStockOrgCode();
					//当前网点如果不是如果不是最后一个提货网点， 并且同城的情况下  不需要收取中转费
					if(!currentStockOrgCode.equals(branchVoOld.getCode())){
						isCalcZZF = false;
					}
				}
			}
		}
		//费率
		DataDictionaryValueVo dataDictionaryValueVo = new DataDictionaryValueVo();
		dataDictionaryValueVo.setValueCode(PricingConstants.CRITERIA_DETAIL_CACULATE_TYPE_WEIGHT);
		bean.setTfrBillingType(dataDictionaryValueVo);
		bean.setRtnBillingType(dataDictionaryValueVo);
		bean.setTfrUnitPrice(BigDecimal.ZERO);
		bean.setRtnUnitPrice(BigDecimal.ZERO);
		//总费用
		if(bean.getTfrFee()!=null){
			bean.setOtherFee(bean.getOtherFee().subtract(bean.getTfrFee()));
		}
		if(bean.getRtnFee()!=null){
			bean.setOtherFee(bean.getOtherFee().subtract(bean.getRtnFee()));
		}
		
		bean.setTfrFee(BigDecimal.ZERO);// 四舍五入
		bean.setRtnFee(BigDecimal.ZERO);
		bean.setIsTfrFeeCalculate(isCalcZZF);//是否重新计算中转费
		return isCalcZZF;
	}
	
	/**
	 * 
	 * 获取产品价格查询参数
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-11-16 上午11:02:10
	 */
	private QueryBillCacilateDto getRtnQueryParam(WaybillInfoVo bean) {
		QueryBillCacilateDto queryDto = Common.getQueryParam(bean, BooleanConvertYesOrNo.booleanToString(bean
				.getPickupToDoor()), Common.FHF);
		return queryDto;
	}
	

	/**
	 * 
	 * （提货方式变更监听）
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-10-20 下午01:56:55
	 */
	private void transferReceiveMethodListener(WaybillInfoVo bean) {
		if (bean.getTfrReceiveMethod() != null) {
			// 各种自提
			selfTfrPickup(bean);
			
			String code = bean.getTfrReceiveMethod().getValueCode();
			//删除超远派送费
			deleteVeryFarFee(code);

			setSaveAndSubmitFalse(ui);//不能提交
			//发票标记
			CommonUtils.setInvoiceType(bean,bean.getBillTime());
			//内部带货处理
			Common.innerPickup(bean, ui, bean.getTfrReceiveMethod().getValueCode());
		}
	}
	
	/**
	 * 
	 * 提货方式-自提业务规则处理
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-12-4 下午03:25:42
	 */
	private void selfTfrPickup(WaybillInfoVo bean) {
		String code = bean.getTfrReceiveMethod().getValueCode();
		// 判断是否自提
		// 转运提货方式监听设置运送费可编辑  【徐思衍-20160808-空运提货方式优化】
		if (WaybillConstants.SELF_PICKUP.equals(code)
//				|| WaybillConstants.AIR_SELF_PICKUP.equals(code)
				|| WaybillConstants.AIR_PICKUP_FREE.equals(code) || WaybillConstants.AIRPORT_PICKUP.equals(code)
				|| WaybillConstants.INNER_PICKUP.equals(code)
				|| WaybillConstants.DELIVER_INNER_PICKUP.equals(code)) {
			ui.incrementPanel.getTxtDeliveryCharge().setEnabled(false);
			bean.setDeliveryGoodsFee(BigDecimal.ZERO);
			bean.setDeliveryGoodsFeeCanvas("0");
			bean.setCalculateDeliveryGoodsFee(BigDecimal.ZERO);
		} else {
			ui.incrementPanel.getTxtDeliveryCharge().setEnabled(true);
		}
	}

	
	/**
	 * 
	 * 变更类型监听
	 * 
	 * 1、运单无出库记录，不允许起草转运单、返货单；
	 * 客户来源可以选择更改、作废；
	 * 内部来源可以选择更改、中止
	 * 2、运单出库记录，不允许起草作废单，涉及到目的站、提货网点的修改必须到转运信息、返货信息面板修改；如果变更提货方式，由“派送”该为“自提”，原始目的站不支持“自提”，提示“原始目的站不支持自提，请选择转运或返货类型”
	 * 客户来源可以选择更改、转运、返货；
	 * 内部来源可以选择更改、中止
	 * 
	 * @author 102246-foss-shaohongliang
	 * @date 2012-12-24 下午7:21:21
	 */
	private void rfcTypeListener(WaybillInfoVo bean) {
		/**
		 * 根据变更类型切换UI显示,并清空变更类型、来源、原因
		 */
		ui.updateComponentClear();
		// 转运
		if(bean.getRfcType() != null){
			//变更类型
			String rfcType = bean.getRfcType().getValueCode();
			if (WaybillRfcConstants.TRANSFER.equals(rfcType)) {
				//初始转运数据
				initTansferComponentData();
				//当更改类型为 - 转运 的时候必须收取更改费
				setChangeOtherCharge(bean);
			}else if (WaybillRfcConstants.RETURN.equals(rfcType)) {
				//初始返货数据
				initReturnComponentData();
				//当更改类型为 - 返货 的时候必须收取更改费
				setChangeOtherCharge(bean);
			}else if(WaybillRfcConstants.INVALID.equals(rfcType)){
				//作废人、中止人
				initUserInfo();
			}
			
			//初始化经济自提件
			initEconomyGoodsListener(bean);	
				
		}
	}

	/**
	 * 
	 * 作废人、中止人
	 * @author 105888-foss-Zhangxingwang
	 * @date 2013-10-2 16:42:32
	 */
	private void initUserInfo() {
		// 用户名
		String userName = ((UserEntity) SessionContext.getCurrentUser()).getEmployee().getEmpName();
		Date abortTime = new Date();
		SimpleDateFormat sf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		// 设置中止操作人
		ui.getMessagePanel().getInvalidInfoPanel()
				.getLblOperateUser().setText(userName);
		// 设置中止操作人
		ui.getMessagePanel().getInvalidInfoPanel().getLblOperateTime()
				.setText(sf.format(abortTime));
	}

	/**
	 * 
	 * 变更来源监听
	 * 
	 * 1、运单无出库记录，不允许起草转运单、返货单；
	 * 客户来源可以选择更改、作废；
	 * 内部来源可以选择更改、中止
	 * 2、运单出库记录，不允许起草作废单，涉及到目的站、提货网点的修改必须到转运信息、返货信息面板修改；如果变更提货方式，由“派送”该为“自提”，原始目的站不支持“自提”，提示“原始目的站不支持自提，请选择转运或返货类型”
	 * 客户来源可以选择更改、转运、返货；
	 * 内部来源可以选择更改、中止
	 * 
	 * @author 102246-foss-shaohongliang
	 * @date 2012-12-24 下午7:21:42
	 */
	private void rfcSourceListener(WaybillInfoVo bean) {
		if(bean.getIsWholeVehicle()){
			ui.getWaybillInfoPanel().getBasicPanel().getCboBigGoodsModel().setEnabled(false);
		}
		
		String newValue = bean.getRfcSource();
		if (WaybillRfcConstants.CUSTOMER_REQUIRE.equals(newValue)) {
			
			// 客户要求变更类型"变更"、"转运"、"返货"、"作废"可选择
			DefaultComboBoxModel model = ui.getImportPanel().getRfcTypeComboBoxModel();
			model.removeAllElements();
			List<DataDictionaryValueEntity> list = waybillService.queryCustomerChangeType();
			try {
				for (DataDictionaryValueEntity dataDictionary : list) {
					
					//更改、转运、返货 提货方式 不能为 内部带货送货 --sangwanhao
					if(WaybillConstants.DELIVER_INNER_PICKUP.equals(dataDictionary.getValueCode())){
						if(!ui.isBatchWaybill()
							|| (WaybillRfcConstants.TRANSFER.equals(dataDictionary.getValueCode())
										|| WaybillRfcConstants.RETURN.equals(dataDictionary.getValueCode())
										|| WaybillConstants.CUSTOMER_CHANGE.equals(dataDictionary.getValueCode()))){
							continue ;
						}
					}
					
					//合伙人开的零担单子无论在何种情况下都可以有作废操作 2016年4月11日 17:25:09 葛亮亮
					if(BZPartnersJudge.IS_PARTENER && WaybillRfcConstants.INVALID.equals(dataDictionary.getValueCode())){
						//如果是合伙人开单，“作废”操作不屏蔽
					}else{
						//运单第一件流水号的当前库存为开单时部门，且运单所有流水号没有非开单时部门的pda卸车记录的，且运单所有流水号没有交接记录,
						//才可以选择“作废”
						if(!(WaybillRfcConstants.RECEIVE_STOCK.equals(bean.getGoodsStatus().getValueCode()) && 
							rfcService.queryUnloadTaskReport(bean.getWaybillNo())==false && 
							((waybillService.queryHandOveredRecordsByWaybillNo(bean.getWaybillNo())==null || 
							waybillService.queryHandOveredRecordsByWaybillNo(bean.getWaybillNo()).size()==0)))){
								if(WaybillRfcConstants.INVALID.equals(dataDictionary.getValueCode())){
									continue;
								}
						 }
					}
					
					//没有出库记录不能选择"转运"与"返货"
					if(bean.getStockStatus() != null
							&& FossConstants.NO.equals(bean.getStockStatus().getStockRecord())){
						if(WaybillRfcConstants.TRANSFER.equals(dataDictionary.getValueCode())
								|| WaybillRfcConstants.RETURN.equals(dataDictionary.getValueCode())){
							continue;
						}
					}else{
						//if(WaybillRfcConstants.INVALID.equals(dataDictionary.getValueCode())){
						//	continue;
						//}
						//else 
						//合伙人空运暂不让转运和返货（后期需求可能会调整）
						if((bean.getIsWholeVehicle()!=null && bean.getIsWholeVehicle())
							||(BZPartnersJudge.IS_PARTENER && WaybillConstants.AIR_FLIGHT.equals(bean.getProductCode().getCode())) ){
							//整车不能选择"转运"与"返货"
							if(WaybillRfcConstants.TRANSFER.equals(dataDictionary.getValueCode())
									|| WaybillRfcConstants.RETURN.equals(dataDictionary.getValueCode())){
								continue;
							}
						}
					}
					
					DataDictionaryValueVo dataDictionaryVo = new DataDictionaryValueVo();
					PropertyUtils.copyProperties(dataDictionaryVo, dataDictionary);
					model.addElement(dataDictionaryVo);
				}
			} catch (IllegalAccessException e) {
				LOG.error(e.getMessage(), e);
			} catch (InvocationTargetException e) {
				LOG.error(e.getMessage(), e);
			} catch (NoSuchMethodException e) {
				LOG.error(e.getMessage(), e);
			}
			if(list.size()>0){
				ui.getImportPanel().getCboRfcType().setSelectedIndex(0);
			}
			// 产品类型
			initCombProductType(newValue,bean);
		} else if (WaybillRfcConstants.INSIDE_REQUIRE.equals(newValue)) {
			

			// 内部要求变更类型"变更"、"中止"可选择
			DefaultComboBoxModel model = ui.getImportPanel().getRfcTypeComboBoxModel();
			model.removeAllElements();
			List<DataDictionaryValueEntity> list = waybillService.queryInsideChangeType();
			try {
				for (DataDictionaryValueEntity dataDictionary : list) {
					//没有出库记录不能选择"中止"
//					if(bean.getStockStatus() != null
//							&& FossConstants.NO.equals(bean.getStockStatus().getStockRecord())){
//						if(WaybillRfcConstants.ABORT.equals(dataDictionary.getValueCode())){
//							continue;
//						}
//					}
					DataDictionaryValueVo dataDictionaryVo = new DataDictionaryValueVo();
					PropertyUtils.copyProperties(dataDictionaryVo, dataDictionary);
					model.addElement(dataDictionaryVo);
				}
			} catch (IllegalAccessException e) {
				LOG.error(e.getMessage(), e);
			} catch (InvocationTargetException e) {
				LOG.error(e.getMessage(), e);
			} catch (NoSuchMethodException e) {
				LOG.error(e.getMessage(), e);
			}
			if(list.size() > 0){
				ui.getImportPanel().getCboRfcType().setSelectedIndex(0);
			}
			// 产品类型
			initCombProductType(newValue,bean);
		} else {
			DefaultComboBoxModel model = ui.getImportPanel().getRfcTypeComboBoxModel();
			model.removeAllElements();
		}
		
		DataDictionaryValueVo vo = bean.getFlabelleavemonth() ;
		//运输性质
		ProductEntityVo productVo = bean.getProductCode();
		if(bean.getPickupToDoor() && vo !=null ){
			if((WaybillConstants.VIP.equals(vo.getValueCode())
				|| WaybillConstants.OMNI_ACTIVE.equals(vo.getValueCode()))
				&&(productVo==null||!ProductEntityConstants.PRICING_PRODUCT_PCP.equals(productVo.getCode()))){
				ui.getWaybillInfoPanel().getBasicPanel().getCboFreePickupGoods().setEnabled(true);
			}else{
				bean.setFreePickupGoods(false);
				ui.getWaybillInfoPanel().getBasicPanel().getCboFreePickupGoods().setEnabled(false);
			}
		}else{
			bean.setFreePickupGoods(false);
			ui.getWaybillInfoPanel().getBasicPanel().getCboFreePickupGoods().setEnabled(false);
		}
		
	}


	/**
	 * 
	 * 产品类型下拉框
	 * 
	 * @author 102246-foss-shaohongliang
	 * @date 2012-10-31 下午6:29:11
	 */
	private void initCombProductType(String newValue,WaybillInfoVo bean) {
		List<ProductEntity> list = new ArrayList<ProductEntity>();
		
		//如果是自提件业务，则重新获取产品信息
		if(bean.getIsEconomyGoods()!=null && bean.getIsEconomyGoods()){
			String channelCode=null;
			if(bean.getEconomyGoodsType()!=null){
				channelCode=bean.getEconomyGoodsType().getValueCode();
			}			
			Date billTime=bean.getBillTime();
			if(channelCode!=null){					
				//根据渠道CODE和当前时间获取产品信息
				list=waybillService.getProductOfMinFeePlanByChannelCodeAndSpecifiedDate(channelCode, billTime);
			}				
		}else{
			if(WaybillRfcConstants.CUSTOMER_REQUIRE.equals(newValue)){
				list = new ArrayList<ProductEntity>();
				//本部门出发产品
				List<ProductEntity> deptList = waybillService.queryTransType(bean.getReceiveOrgCode());
				//原运输性质
				ProductEntityVo productVo = ui.getOriginWaybill().getProductCode();
				if(ProductEntityConstants.PRICING_PRODUCT_PARTIAL_LINE.equals(productVo.getCode())
						|| ProductEntityConstants.PRICING_PRODUCT_AIR_FREIGHT.equals(productVo.getCode())){
					for(ProductEntity productEntity : deptList){
						
						if(CommonUtils.directDetermineIsExpressByProductCode(productEntity.getCode())){
							continue;
						}
						
						if(productEntity.getCode().equals(productVo.getCode())){
							list.add(productEntity);
							break;
						}
					}
				}else{
					//目的站到达产品
					List<ProductEntity> arriveList = waybillService.queryByArriveDeptProduct(bean.getCustomerPickupOrgCode().getCode());
					for(ProductEntity fromEntity : deptList){
						for(ProductEntity toEntity : arriveList){
							if(CommonUtils.directDetermineIsExpressByProductCode(toEntity.getCode())){
								continue;
							}
							if(fromEntity.getCode().equals(toEntity.getCode())){
								list.add(fromEntity);
								break;
							}
						}
					}
				}
				//如果
			}else if(WaybillRfcConstants.INSIDE_REQUIRE.equals(newValue)){
				list = waybillService.queryTransType(bean.getReceiveOrgCode());
			}	
		}	
		bean.setProductCode(null);
		Boolean falg = false;
		String productCode = ui.getOriginWaybill().getProductCode().getCode();
		if(ProductEntityConstants.PRICING_PRODUCT_LONG_DISTANCE_FAST_FREIGHT_BG.equals(productCode)
				|| ProductEntityConstants.PRICING_PRODUCT_SHORT_DISTANCE_FAST_FREIGHT_BG.equals(productCode)
				|| ProductEntityConstants.PRICING_PRODUCT_LONG_DISTANCE_ROAD_FREIGHT_BG.equals(productCode)
				|| ProductEntityConstants.PRICING_PRODUCT_SHORT_DISTANCE_ROAD_FREIGHT_BG.equals(productCode)
				|| ProductEntityConstants.PRICING_PRODUCT_DOOR_TO_DOOR.equals(productCode)
				|| ProductEntityConstants.PRICING_PRODUCT_YARD_TO_YARD.equals(productCode)) {
			falg = true;
		}
		DefaultComboBoxModel productTypeModel = ui.getWaybillInfoPanel().getTransferPanel().getTransportInfoPanel().getProductTypeModel();
//		DefaultComboBoxModel transportRecordTabProduct = ui.getWaybillInfoPanel().getTransferPanel().getTransportRecordTabPanel().getTransferInfoPanel().getTransferProductTypeModel();
		
		if(list!=null && list.size()>0){
			productTypeModel.removeAllElements();
//			transportRecordTabProduct.removeAllElements();
			CommonUtils.filterBigGoodsProductEntity(list,falg);
		}
		if(list!=null && list.size()>0){
			for (ProductEntity dataDictionary : list) {
				ProductEntityVo vo = new ProductEntityVo();
				
				if(CommonUtils.directDetermineIsExpressByProductCode(dataDictionary.getCode())){
					continue;
				}
				ValueCopy.entityValueCopy(dataDictionary, vo);
				productTypeModel.addElement(vo);
//				transportRecordTabProduct.addElement(vo);
			}
		}
		//设置默认值
		for(int i = 0 ; i < productTypeModel.getSize() ; i++){
			ProductEntityVo vo = (ProductEntityVo) productTypeModel.getElementAt(i);
			if(productCode.equals(vo.getCode())){
				bean.setProductCode(vo);
			}
		}
	}


	/**
	 * 
	 * 运单导入时运输信息对外调用
	 * @author 102246-foss-shaohongliang
	 * @date 2012-12-19 下午7:11:53
	 */
	public void productCodeChanged(ProductEntityVo entity) {
		if(entity == null){
			return;
		}// 根据运输性质改变提货方式
		changePickUpMode(entity);
	}
	/**
	 * 运单导入时特殊增值服务外调
	 * foss-254615-mabinliang
	 */
	public void specialValueAddedServiceTypeCodeChanged(DataDictionaryValueVo specialValueAddedServiceType){
		if(specialValueAddedServiceType.getValueCode()==null){
			return;
		}
		changeSpecialPickUpMode(specialValueAddedServiceType);
	}
	/**
	 * 根据特殊增值服务的改变，改变提货方式
	 * foss-254615-mabinliang
	 */

	public void changeSpecialPickUpMode(DataDictionaryValueVo specialValueAddedServiceType){
		// 清除数据
				DefaultComboBoxModel pikcModeModel = ui.getWaybillInfoPanel().getTransferPanel().getTransportInfoPanel().getPickModeModel();
				DefaultComboBoxModel pickModeMdoeltfr= ui.getWaybillInfoPanel().getTransferPanel().getTransferTabPanel().getTransferInfoPanel().getPickModeModel();
				
				//变更信息提货方式
				DefaultComboBoxModel transportSingleModel=ui.getWaybillInfoPanel().getTransferPanel().getTransportRecordTabPanel().getTransferInfoPanel().getPickModeModel();
				pikcModeModel.removeAllElements();
				pickModeMdoeltfr.removeAllElements();
				List<DataDictionaryValueEntity> list = null;
				
				list = waybillService.querySpecialPickUp();
			
				try {
					WaybillInfoVo bean = ui.getBinderWaybill();
					//DMANA-4923  FOSS开单提货方式隐藏“免费送货”
					if(null != ui.getOriginWaybill().getReceiveMethod() 
							&& 
					 ui.getOriginWaybill().getReceiveMethod().getValueCode()!=null 
					        && 
					 !WaybillConstants.DELIVER_FREE.equals(ui.getOriginWaybill().getReceiveMethod().getValueCode()) 
					        && 
					 !WaybillConstants.DELIVER_FREE_AIR.equals(ui.getOriginWaybill().getReceiveMethod())){
						for (int i = 0; i < list.size(); i++) {
							if(WaybillConstants.DELIVER_FREE.equals(list.get(i).getValueCode()) || WaybillConstants.DELIVER_FREE_AIR.equals(list.get(i).getValueCode())){
								list.remove(list.get(i));
							}
						}
					}
					if(bean.getIsBigGoods()){
						for (DataDictionaryValueEntity dataDictionary : list) {
							if(!WaybillConstants.INNER_PICKUP.equals(dataDictionary.getValueCode())){
								DataDictionaryValueVo vo = new DataDictionaryValueVo();
								PropertyUtils.copyProperties(vo, dataDictionary);
								pikcModeModel.addElement(vo);
								pickModeMdoeltfr.addElement(vo);
							}
						}
					}else{
						for (DataDictionaryValueEntity dataDictionary : list) {
							DataDictionaryValueVo vo = new DataDictionaryValueVo();
							PropertyUtils.copyProperties(vo, dataDictionary);
							pikcModeModel.addElement(vo);
							pickModeMdoeltfr.addElement(vo);
						}
					}
					//变更信息处理
					if(transportSingleModel!=null && transportSingleModel.getSize()>0){	
						//DMANA-4923  FOSS开单提货方式隐藏“免费送货”
						if(null != ui.getOriginWaybill().getReceiveMethod() && ui.getOriginWaybill().getReceiveMethod().getValueCode()!=null && !WaybillConstants.DELIVER_FREE.equals(ui.getOriginWaybill().getReceiveMethod().getValueCode()) && !WaybillConstants.DELIVER_FREE_AIR.equals(ui.getOriginWaybill().getReceiveMethod())){
							for(int i=0;i<transportSingleModel.getSize();i++){
								DataDictionaryValueVo vo=(DataDictionaryValueVo)transportSingleModel.getElementAt(i);
								if(WaybillConstants.DELIVER_FREE.equals(vo.getValueCode()) || WaybillConstants.DELIVER_FREE_AIR.equals(vo.getValueCode())){
									transportSingleModel.removeElementAt(i);
									break;
								}						
							}
						}							
					}
				} catch (IllegalAccessException e) {
					LOG.error(e.getMessage(),e);//异常
				} catch (InvocationTargetException e) {
					LOG.error(e.getMessage(),e);//异常
				} catch (NoSuchMethodException e) {
					LOG.error(e.getMessage(),e);//异常
				}
				if(ui.getWaybillInfoPanel().getTransferPanel().getTransportInfoPanel().getCombPickMode().getItemCount()>0){
					ui.getWaybillInfoPanel().getTransferPanel().getTransportInfoPanel().getCombPickMode().setSelectedIndex(0);
				}
		//		if(ui.getWaybillInfoPanel().getTransferPanel().getTransferTabPanel().getTransferInfoPanel().getPickModeModel().get>0)
				ui.getBinderWaybill().setReceiveMethod(ui.getOriginWaybill().getReceiveMethod());
			}

	/**
	 * 
	 * 根据运输性质的改变，改变提货方式
	 * @author 102246-foss-shaohongliang
	 * @date 2012-11-8 上午9:56:05
	 */
	private void changePickUpMode(ProductEntityVo entity) {

		// 清除数据
		DefaultComboBoxModel pikcModeModel = ui.getWaybillInfoPanel().getTransferPanel().getTransportInfoPanel().getPickModeModel();
		
		//变更信息提货方式
		DefaultComboBoxModel transportSingleModel=ui.getWaybillInfoPanel().getTransferPanel().getTransportRecordTabPanel().getTransferInfoPanel().getPickModeModel();
		pikcModeModel.removeAllElements();
		List<DataDictionaryValueEntity> list = null;
		if (ProductEntityConstants.PRICING_PRODUCT_AIR_FREIGHT.equals(entity.getCode())) {
			//页面初始化时提货方式隐藏免费自提（更改（客户要求，内部要求），转运，返货都会经过）【徐思衍-20160808-空运提货方式优化】
			list = waybillService.queryPickUpGoodsAir();
			if(ui.getOriginWaybill().getReceiveMethod()!=null && !WaybillConstants.AIR_PICKUP_FREE.equals(ui.getOriginWaybill().getReceiveMethod().getValueCode())){
				List<DataDictionaryValueEntity> dellist = new ArrayList<DataDictionaryValueEntity>();
				for(DataDictionaryValueEntity data : list) {
					if(WaybillConstants.AIR_PICKUP_FREE.equals(data.getValueCode())){
						dellist.add(data);
					}
				}
				list.removeAll(dellist);
			}
		} else {
			list = waybillService.queryPickUpGoodsHighWays();
		}
		//精准包裹，隐藏“内部带货自提”和“内部带货送货”
		delInnerPickUp(entity, list);
		//合伙人不加载内部带货自提
		//合伙人还需要剔除内部带货送货、送货上楼安装（家居） 2016年4月5日 14:08:23 葛亮亮
			if(list!=null && list.size() > 0) {
				for(int j = 0; j < list.size(); j++) {
					if (!"".equals(list.get(j).getValueCode())) {
						if(WaybillConstants.DELIVER_INNER_PICKUP.equals(list.get(j).getValueCode())
								&& !ui.isBatchWaybill()){
							list.remove(list.get(j));
							j--;
						}else if(BZPartnersJudge.IS_PARTENER){
								if (WaybillConstants.INNER_PICKUP.equals(list.get(j).getValueCode())
										||WaybillConstants.DELIVER_FLOOR.equals(list.get(j).getValueCode())) {
									list.remove(list.get(j));
									j--;
								}
							}
					}
			}
		}
		
		try {
			WaybillInfoVo bean = ui.getBinderWaybill();
			//DMANA-4923  FOSS开单提货方式隐藏“免费送货”
			if(null != ui.getOriginWaybill().getReceiveMethod() 
					&& 
			 ui.getOriginWaybill().getReceiveMethod().getValueCode()!=null 
			        && 
			 !WaybillConstants.DELIVER_FREE.equals(ui.getOriginWaybill().getReceiveMethod().getValueCode()) 
			        && 
			 !WaybillConstants.DELIVER_FREE_AIR.equals(ui.getOriginWaybill().getReceiveMethod())){
				for (int i = 0; i < list.size(); i++) {
					if(WaybillConstants.DELIVER_FREE.equals(list.get(i).getValueCode()) || WaybillConstants.DELIVER_FREE_AIR.equals(list.get(i).getValueCode())){
						list.remove(list.get(i));
					}
				}
			}
			if(bean.getIsBigGoods()){
				for (DataDictionaryValueEntity dataDictionary : list) {
					if(!WaybillConstants.INNER_PICKUP.equals(dataDictionary.getValueCode())){
						DataDictionaryValueVo vo = new DataDictionaryValueVo();
						PropertyUtils.copyProperties(vo, dataDictionary);
						pikcModeModel.addElement(vo);
					}
				}
			}else{
				for (DataDictionaryValueEntity dataDictionary : list) {
					DataDictionaryValueVo vo = new DataDictionaryValueVo();
					PropertyUtils.copyProperties(vo, dataDictionary);
					pikcModeModel.addElement(vo);
				}
			}
			/*for (DataDictionaryValueEntity dataDictionary : list) {
				DataDictionaryValueVo dataDictionaryVo = new DataDictionaryValueVo();
				PropertyUtils.copyProperties(dataDictionaryVo, dataDictionary);
				pikcModeModel.addElement(dataDictionaryVo);
			}*/
			//变更信息处理
			if(transportSingleModel!=null && transportSingleModel.getSize()>0){	
				//DMANA-4923  FOSS开单提货方式隐藏“免费送货”
				if(null != ui.getOriginWaybill().getReceiveMethod() && ui.getOriginWaybill().getReceiveMethod().getValueCode()!=null && !WaybillConstants.DELIVER_FREE.equals(ui.getOriginWaybill().getReceiveMethod().getValueCode()) && !WaybillConstants.DELIVER_FREE_AIR.equals(ui.getOriginWaybill().getReceiveMethod())){
					for(int i=0;i<transportSingleModel.getSize();i++){
						DataDictionaryValueVo vo=(DataDictionaryValueVo)transportSingleModel.getElementAt(i);
						if(WaybillConstants.DELIVER_FREE.equals(vo.getValueCode()) || WaybillConstants.DELIVER_FREE_AIR.equals(vo.getValueCode())){
							transportSingleModel.removeElementAt(i);
							break;
						}						
					}
				}							
			}
		} catch (IllegalAccessException e) {
			LOG.error(e.getMessage(),e);//异常
		} catch (InvocationTargetException e) {
			LOG.error(e.getMessage(),e);//异常
		} catch (NoSuchMethodException e) {
			LOG.error(e.getMessage(),e);//异常
		}
		if(ui.getWaybillInfoPanel().getTransferPanel().getTransportInfoPanel().getCombPickMode().getItemCount()>0){
			ui.getWaybillInfoPanel().getTransferPanel().getTransportInfoPanel().getCombPickMode().setSelectedIndex(0);
		}
		ui.getBinderWaybill().setReceiveMethod(ui.getOriginWaybill().getReceiveMethod());
	}

	/**
	 * 
	 * 转运运输性质 --> 转运预配航班
	 * 
	 * @author 102246-foss-shaohongliang
	 * @date 2012-10-22 下午04:48:08
	 */
	private void transferProductCodeListener(WaybillInfoVo bean) {
		if(bean.getSpecialValueAddedServiceType()!=null&&bean.getSpecialValueAddedServiceType().getValueCode()!=null){
			changeTfrSpecialPickUpMode(bean);
		}else{
		// 根据运输性质改变提货方式
			changeTfrPickUpMode(bean);
		}
		// 产品对象
		ProductEntityVo product = bean.getTfrProductCode();
		//精准包裹提示
		Common.validateProductCode(bean,product);
		/**
		 * 精准包裹运输性质不能免费接货
		 */
		Common.changeFreePickUpGoods(bean, ui ,product);
		//设置自提件提货方式
		Common.setEconomyReceiveMethod(bean,ui);
		// 空运、偏线以及中转下线无法选择签收单返单
		Common.setReturnBill(bean, ui);
		// 偏线与空运不能选择预付费保密
		setTfrSecretPrepaid(bean);
		//清掉走货路径
		cleanTranportOrgInfo(bean);

		setSaveAndSubmitFalse(ui);
		//转运选择转运运输性质时，如果提货方式为自提（不含机场送货费），打开送货费可编辑【徐思衍-20160808-空运提货方式优化】
		DefaultComboBoxModel transportSingleModel=ui.getWaybillInfoPanel().getTransferPanel().getTransportInfoPanel().getPickModeModel();
		DataDictionaryValueVo valueEntity = (DataDictionaryValueVo) transportSingleModel.getSelectedItem() ;
		if(valueEntity!=null&&StringUtils.equals(valueEntity.getValueCode(),WaybillConstants.AIR_SELF_PICKUP)){
			ui.incrementPanel.getTxtDeliveryCharge().setEnabled(true);
		}
	}
	
	
	
	
	
	
   //转运提货方式改变
	private void changeTfrSpecialPickUpMode(WaybillInfoVo bean) {
		
		// 清除数据
		DefaultComboBoxModel pikcModeModel = ui.getWaybillInfoPanel().getTransferPanel().getTransferTabPanel().getTransferInfoPanel().getPickModeModel();
		
		//变更信息提货方式
		DefaultComboBoxModel transportSingleModel=ui.getWaybillInfoPanel().getTransferPanel().getTransportRecordTabPanel().getTransferInfoPanel().getPickModeModel();
		pikcModeModel.removeAllElements();
		List<DataDictionaryValueEntity> list = null;
		
		list = waybillService.querySpecialPickUp();
		//转运运输性质监听隐藏免费自提 【徐思衍-20160808-空运提货方式优化】
		if(ui.getOriginWaybill().getReceiveMethod()!=null && !WaybillConstants.AIR_PICKUP_FREE.equals(ui.getOriginWaybill().getReceiveMethod().getValueCode())){
			List<DataDictionaryValueEntity> dellist = new ArrayList<DataDictionaryValueEntity>();
			for(DataDictionaryValueEntity data : list) {
				if(WaybillConstants.AIR_PICKUP_FREE.equals(data.getValueCode())){
					dellist.add(data);
				}
			}
			list.removeAll(dellist);
		}
		try {
			//精准包裹，隐藏“内部带货自提”和“内部带货送货”
			delInnerPickUp(bean.getTfrProductCode(),list);
			
			//DMANA-4923  FOSS开单提货方式隐藏“免费送货”
			if(null != ui.getOriginWaybill().getReceiveMethod() 
					&& 
			 ui.getOriginWaybill().getReceiveMethod().getValueCode()!=null 
			        && 
			 !WaybillConstants.DELIVER_FREE.equals(ui.getOriginWaybill().getReceiveMethod().getValueCode()) 
			        && 
			 !WaybillConstants.DELIVER_FREE_AIR.equals(ui.getOriginWaybill().getReceiveMethod())){
				for (int i = 0; i < list.size(); i++) {
					if(WaybillConstants.DELIVER_FREE.equals(list.get(i).getValueCode()) 
							|| WaybillConstants.DELIVER_FREE_AIR.equals(list.get(i).getValueCode())
							|| (WaybillConstants.DELIVER_INNER_PICKUP.equals(list.get(i).getValueCode())&&!ui.isBatchWaybill())
							//合伙人开的单 去除内部带货自提、送货上楼安装（家居）,内部带货送货 -- sangwenhao
							||(BZPartnersJudge.IS_PARTENER && (WaybillConstants.INNER_PICKUP.equals(list.get(i).getValueCode()) 
									|| WaybillConstants.DELIVER_INNER_PICKUP.equals(list.get(i).getValueCode())
									||WaybillConstants.DELIVER_FLOOR.equals(list.get(i).getValueCode())))
							){
						list.remove(list.get(i));
						i-- ;
					}
					
				}
			}
			if(bean.getIsBigGoods()){
				for (DataDictionaryValueEntity dataDictionary : list) {
					if(!WaybillConstants.INNER_PICKUP.equals(dataDictionary.getValueCode())
							&& !WaybillConstants.DELIVER_INNER_PICKUP.equals(dataDictionary.getValueCode())){
						//合伙人开的单 去除内部带货自提、送货上楼安装（家居）,内部带货送货 -- sangwenhao
						if(BZPartnersJudge.IS_PARTENER && (WaybillConstants.INNER_PICKUP.equals(dataDictionary.getValueCode()) 
							    ||WaybillConstants.DELIVER_INNER_PICKUP.equals(dataDictionary.getValueCode())
							    ||WaybillConstants.DELIVER_FLOOR.equals(dataDictionary.getValueCode()))){
							continue ;
						}
						DataDictionaryValueVo vo = new DataDictionaryValueVo();
						PropertyUtils.copyProperties(vo, dataDictionary);
						pikcModeModel.addElement(vo);
					}
				}
			}else{
				for (DataDictionaryValueEntity dataDictionary : list) {
					//合伙人开的单 去除内部带货自提、送货上楼安装（家居）,内部带货送货 -- sangwenhao
					if((WaybillConstants.DELIVER_INNER_PICKUP.equals(dataDictionary.getValueCode())&&!ui.isBatchWaybill())
							||(BZPartnersJudge.IS_PARTENER && (WaybillConstants.INNER_PICKUP.equals(dataDictionary.getValueCode()) 
						       || WaybillConstants.DELIVER_INNER_PICKUP.equals(dataDictionary.getValueCode())
							   || WaybillConstants.DELIVER_FLOOR.equals(dataDictionary.getValueCode())))){
						continue ;
					}
					DataDictionaryValueVo vo = new DataDictionaryValueVo();
					PropertyUtils.copyProperties(vo, dataDictionary);
					pikcModeModel.addElement(vo);
				}
			}
			//变更信息处理
			if(transportSingleModel!=null && transportSingleModel.getSize()>0){	
				//DMANA-4923  FOSS开单提货方式隐藏“免费送货”
				if(null != ui.getOriginWaybill().getReceiveMethod() 
						&& ui.getOriginWaybill().getReceiveMethod().getValueCode()!=null 
						&& !WaybillConstants.DELIVER_FREE.equals(ui.getOriginWaybill().getReceiveMethod().getValueCode()) 
						&& !WaybillConstants.DELIVER_FREE_AIR.equals(ui.getOriginWaybill().getReceiveMethod())){
					for(int i=0;i<transportSingleModel.getSize();i++){
						DataDictionaryValueVo vo=(DataDictionaryValueVo)transportSingleModel.getElementAt(i);
						if(WaybillConstants.DELIVER_FREE.equals(vo.getValueCode()) || WaybillConstants.DELIVER_FREE_AIR.equals(vo.getValueCode())){
							transportSingleModel.removeElementAt(i);
							break;
						}						
					}
				}							
			}
		} catch (IllegalAccessException e) {
			LOG.error(e.getMessage(),e);//异常
		} catch (InvocationTargetException e) {
			LOG.error(e.getMessage(),e);//异常
		} catch (NoSuchMethodException e) {
			LOG.error(e.getMessage(),e);//异常
		}
		if(ui.getWaybillInfoPanel().getTransferPanel().getTransportInfoPanel().getCombPickMode().getItemCount()>0){
			ui.getWaybillInfoPanel().getTransferPanel().getTransportInfoPanel().getCombPickMode().setSelectedIndex(0);
		}
		ui.getBinderWaybill().setReceiveMethod(ui.getOriginWaybill().getReceiveMethod());
	}
	
	//精准包裹去掉"内部带货自提"和"内部带货送货"
	private void delInnerPickUp(ProductEntityVo productVo,List<DataDictionaryValueEntity> list){
		
		if(productVo==null||list==null){
			return;
		}
		//精准包裹去掉"内部带货自提"和"内部带货送货"
		if(ProductEntityConstants.PRICING_PRODUCT_PCP.equals(productVo.getCode())){
			for(Iterator<DataDictionaryValueEntity> item=list.iterator() ; item.hasNext() ; ){
				DataDictionaryValueEntity dve = item.next();
				if(WaybillConstants.INNER_PICKUP.equals(dve.getValueCode())||WaybillConstants.DELIVER_INNER_PICKUP.equals(dve.getValueCode())){
					item.remove();
				}
			}
		}
	}

	/**
	 * 
	 * 偏线与空运不能选择预付费保密
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-11-8 上午08:30:46
	 */
	private void setTfrSecretPrepaid(WaybillInfoVo bean) {
		WaybillInfoVo waybillVo = ui.getOriginWaybill();
		//原为预付费保密的可以取消；
		//原为非预付费保密的不可更改为预付费保密
		if(waybillVo.getSecretPrepaid()!= null && waybillVo.getSecretPrepaid()){
			ProductEntityVo productVo = bean.getTfrProductCode();
			if (ProductEntityConstants.PRICING_PRODUCT_PARTIAL_LINE.equals(productVo.getCode())
					|| ProductEntityConstants.PRICING_PRODUCT_AIR_FREIGHT.equals(productVo.getCode())) {
				ui.getWaybillInfoPanel().getBillingPayPanel().getChbSecrecy().setSelected(false);
				ui.getWaybillInfoPanel().getBillingPayPanel().getChbSecrecy().setEnabled(false);
			} else {
				ui.getWaybillInfoPanel().getBillingPayPanel().getChbSecrecy().setEnabled(true);
			}
		}
	}

	/**
	 * 
	 * 根据运输性质的改变，改变提货方式
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-11-6 下午04:49:48
	 */
	private void changeTfrPickUpMode(WaybillInfoVo bean) {
		ProductEntityVo productVo = bean.getTfrProductCode();
		if(productVo!=null){
			DefaultComboBoxModel pikcModeModel = ui.getWaybillInfoPanel().getTransferPanel().getTransferTabPanel().getTransferInfoPanel().getPickModeModel();
			if (ProductEntityConstants.PRICING_PRODUCT_AIR_FREIGHT.equals(productVo.getCode())) {
				
				setTfrAirPropertyToTrue();
				

				pikcModeModel.removeAllElements();
				List<DataDictionaryValueEntity> list = waybillService.queryPickUpGoodsAir();
				//DMANA-4923  FOSS开单提货方式隐藏“免费送货”
				if(ui.getOriginWaybill().getReceiveMethod().getValueCode()!=null && !WaybillConstants.DELIVER_FREE.equals(ui.getOriginWaybill().getReceiveMethod().getValueCode()) && !WaybillConstants.DELIVER_FREE_AIR.equals(ui.getOriginWaybill().getReceiveMethod())){
					for (int i = 0; i < list.size(); i++) {
						if(WaybillConstants.DELIVER_FREE.equals(list.get(i).getValueCode()) || WaybillConstants.DELIVER_FREE_AIR.equals(list.get(i).getValueCode())){
							list.remove(list.get(i));
						}
					}
				}
				//转运运输性质监听隐藏免费自提 【徐思衍-20160808-空运提货方式优化】
				if(ui.getOriginWaybill().getReceiveMethod()!=null && !WaybillConstants.AIR_PICKUP_FREE.equals(ui.getOriginWaybill().getReceiveMethod().getValueCode())){
					List<DataDictionaryValueEntity> dellist = new ArrayList<DataDictionaryValueEntity>();
					for(DataDictionaryValueEntity data : list) {
						if(WaybillConstants.AIR_PICKUP_FREE.equals(data.getValueCode())){
							dellist.add(data);
						}
					}
					list.removeAll(dellist);
				}
				for (DataDictionaryValueEntity dataDictionary : list) {
					//客户原因不能选择内部带货、免费自提 
					if (WaybillConstants.INNER_PICKUP.equals(dataDictionary.getValueCode()) 
							|| WaybillConstants.AIR_PICKUP_FREE.equals(dataDictionary.getValueCode())
							|| WaybillConstants.DELIVER_INNER_PICKUP.equals(dataDictionary.getValueCode())
							//合伙人开的单 去除[内部带货自提]、送货上楼安装（家居）,[内部带货送货 ]-- sangwenhao
							|| (BZPartnersJudge.IS_PARTENER && (WaybillConstants.DELIVER_FLOOR.equals(dataDictionary.getValueCode())))) {
						continue;
					}
					DataDictionaryValueVo vo = new DataDictionaryValueVo();
					ValueCopy.valueCopy(dataDictionary, vo);
					pikcModeModel.addElement(vo);
					if (WaybillConstants.AIR_SELF_PICKUP.equals(vo.getValueCode())){// 设置提货方式默认值
						bean.setTfrReceiveMethod(vo);
					}
				}
			} else {
				
				setTfrAirPropertyToFalse(bean);
				
				pikcModeModel.removeAllElements();
				List<DataDictionaryValueEntity> list = waybillService.queryPickUpGoodsHighWays();
				
				//精准包裹，隐藏“内部带货自提”和“内部带货送货”
				delInnerPickUp(bean.getTfrProductCode(),list);
				
				//DMANA-4923  FOSS开单提货方式隐藏“免费送货”
				if(ui.getOriginWaybill().getReceiveMethod().getValueCode()!=null 
						&& !WaybillConstants.DELIVER_FREE.equals(ui.getOriginWaybill().getReceiveMethod().getValueCode()) 
						&& !WaybillConstants.DELIVER_FREE_AIR.equals(ui.getOriginWaybill().getReceiveMethod())){
					for (int i = 0; i < list.size(); i++) {
						if(WaybillConstants.DELIVER_FREE.equals(list.get(i).getValueCode()) || WaybillConstants.DELIVER_FREE_AIR.equals(list.get(i).getValueCode())){
							list.remove(list.get(i));
						}
					}
				}
				
				Common.delReceiveMethod(productVo, list);
				for (DataDictionaryValueEntity dataDictionary : list) {
					//客户原因不能选择内部带货、免费自提 
					if (WaybillConstants.INNER_PICKUP.equals(dataDictionary.getValueCode()) 
							|| WaybillConstants.AIR_PICKUP_FREE.equals(dataDictionary.getValueCode())
							|| WaybillConstants.DELIVER_INNER_PICKUP.equals(dataDictionary.getValueCode())
							//合伙人开的单 去除[内部带货自提]、送货上楼安装（家居）,[内部带货送货 ]-- sangwenhao
							|| (BZPartnersJudge.IS_PARTENER && (WaybillConstants.DELIVER_FLOOR.equals(dataDictionary.getValueCode())))) {
						continue;
					}
					
					DataDictionaryValueVo vo = new DataDictionaryValueVo();//创建对象
					ValueCopy.valueCopy(dataDictionary, vo);//copy属性内容
					pikcModeModel.addElement(vo);//加入
					if (WaybillConstants.SELF_PICKUP.equals(vo.getValueCode())){// 设置提货方式默认值
					
						bean.setTfrReceiveMethod(vo);
					}
				}
			}
		}		
	}

	/**
	 * 
	 * 如果运输性质为精准空运，则将合票方式和航班类型设置为不可编辑且将下拉框设置为空
	 * @author 025000-FOSS-helong
	 * @date 2012-12-19 下午06:21:22
	 */
	private void setTfrAirPropertyToFalse(WaybillInfoVo bean){
		ui.getWaybillInfoPanel().getTransferPanel().getTransferTabPanel().getTransferInfoPanel().getCombFreightMethod().setEnabled(false);
		ui.getWaybillInfoPanel().getTransferPanel().getTransferTabPanel().getTransferInfoPanel().getCombTransferPredictFlight().setEnabled(false);
		//航班类型
		setTfrFlightNumberType(bean);
	}

	/**
	 * 
	 * 设置航班类型
	 * @author 025000-FOSS-helong
	 * @date 2012-12-19 下午09:16:51
	 */
	private void setTfrFlightNumberType(WaybillInfoVo bean){
		int size = ui.getWaybillInfoPanel().getTransferPanel().getTransferTabPanel().getTransferInfoPanel().getPredictFlightModel().getSize();
		for (int i = 0; i < size; i++) {
			DataDictionaryValueVo vo = new DataDictionaryValueVo();
			vo = (DataDictionaryValueVo) ui.getWaybillInfoPanel().getTransferPanel().getTransferTabPanel().getTransferInfoPanel().getPredictFlightModel().getElementAt(i);
			if (vo == null || vo.getValueCode() == null) {
				bean.setTfrFlightNumberType(vo);
			}
		}
	}

	/**
	 * 
	 * 如果运输性质为精准空运，则将合票方式和航班类型设置为可编辑
	 * @author 025000-FOSS-helong
	 * @date 2012-12-19 下午06:21:22
	 */
	private void setTfrAirPropertyToTrue(){
		//如果运输性质为精准空运，则将合票方式和航班类型设置为可编辑
		ui.getWaybillInfoPanel().getTransferPanel().getTransferTabPanel().getTransferInfoPanel().getCombFreightMethod().setEnabled(true);
		//如果运输性质为精准空运，则将合票方式和航班类型设置为可编辑
		ui.getWaybillInfoPanel().getTransferPanel().getTransferTabPanel().getTransferInfoPanel().getCombTransferPredictFlight().setEnabled(true);
	}

	
	/**
	 * 
	 * 原运输类型 + 原目的站 + 转运目的站 | 原运输类型 + 货物是否出最终配载部门 + 最终配载部门 + 转运目的站 --> 转运运输性质
	 * 
	 * @author 102246-foss-shaohongliang
	 * @date 2012-11-5 上午9:30:36
	 */
	public void transferCustomerPickupOrgNameListener(WaybillInfoVo bean) {
		//修改转运费率可编辑性
		changeTfrUnitPrice(bean);
	}
	
	/**
	 * 
	 * 修改转运费率是否可编辑
	 * @author 102246-foss-shaohongliang
	 * @date 2012-12-25 下午2:10:52
	 */
	private void changeTfrUnitPrice(WaybillInfoVo bean) {
		boolean isNeedHandEdit = isTfrUnitHandEdit(bean);//是否可编辑
		setTfrNeedHandWrite(bean, isNeedHandEdit);//设置是否可编辑
	}
	
	/**
	 * 
	 * 手动编辑
	 * @author 102246-foss-shaohongliang
	 * @date 2013-1-11 下午3:09:07
	 */
	private void setTfrNeedHandWrite(WaybillInfoVo bean, boolean isNeedHandEdit) {
		bean.setTfrNeedHandWrite(isNeedHandEdit);//是否可编辑
		TransferInfoPanel transferInfoPanel = ui.getWaybillInfoPanel().getTransferPanel().getTransferTabPanel().getTransferInfoPanel();
		//转运费率、计价方式可编辑
		transferInfoPanel.getCombTransferBillingType().setEnabled(isNeedHandEdit);
		transferInfoPanel.getTxtTransferUnitPrice().setEnabled(isNeedHandEdit);
	}

	/**
	 * 
	 * 是否需要手动修改转运费率
	 * @author 102246-foss-shaohongliang
	 * @date 2012-12-25 下午2:13:10
	 */
	private boolean isTfrUnitHandEdit(WaybillInfoVo bean) {
		if(bean == null){
			MsgBox.showInfo("运单信息实体为空");
			return false;
		}
		if(!isNeedCalcZZF(bean)){
			setTransportOtherCharge(bean);
			return false;
		}
		
		//已出最终配载部门手动编辑
		if(bean.isTfrNeedFilter()){
			/**
			 * 可以编辑
			 */
			
			return true;
		}
		if(bean.getTfrCustomerPickupOrgCode() == null){
			/**
			 * 不可以编辑
			 */
			return false;
		}
		//产品价格
		ProductPriceDto dto = null;
		//计算dto
		QueryBillCacilateDto cacilateDto = getTfrQueryParam(bean);
		//开单时刻上门接货价
		if(bean.getPickupToDoor()){
			dto = getProductPriceDto(bean, cacilateDto);
		}
		//开单时刻非上门接货价
		if(dto == null){
			cacilateDto.setIsReceiveGoods(FossConstants.NO);//no
			dto = getProductPriceDto(bean, cacilateDto);
		}
		//当前时刻上门接货价
		if(dto == null && bean.getPickupToDoor()){
			cacilateDto.setReceiveDate(null);// 营业部收货日期（可选，无则表示当前日期）
			cacilateDto.setIsReceiveGoods(FossConstants.YES);//no
			dto = getProductPriceDto(bean, cacilateDto);
		}
		//当前时刻非上门接货价
		if(dto == null){
			cacilateDto.setReceiveDate(null);// 营业部收货日期（可选，无则表示当前日期）
			cacilateDto.setIsReceiveGoods(FossConstants.NO);//no
			dto = getProductPriceDto(bean, cacilateDto);
		}
		
		
		//找不到公布价手动编辑
		if(dto == null){
			MsgBox.showInfo(i18n.get("foss.gui.changing.waybillInfoBindingListener.msgBox.nullProductPrice"));
			return true;
		}else{
			/**
			 * FOSS20150818-RFOSS2015052405-更改单异常操作服务费规则优化
			 * @author foss-206860
			 * 现状：只要多次更改中转费都叠加；需求要求：在范围一和范围二中多次更改只收取一次中转费 
			 * 货物库存范围一：货物已出收货部门库存未出第一中转外场库存（多次更改只收取一次中转费）；
			 * 货物库存范围二：货物已出到达部门上一级外场库存未出到达部门库存（多次更改只收取一次中转费）；
			 * 货物库存范围三：不属阶段一也不属阶段二（多次更改中转费叠加）；
			 */
			//判断该运单的货物是否分批，若分批则不处理，不分批才走新逻辑
			//更改单异常操作服务费规则优化(是否叠加中转费)
			if(bean != null && dto != null && cacilateDto != null){
				//为了后期计算中转费，获取更改时的货物状态范围
				queryRangeForZZ(bean);
				//将数据加载至bean对象中 //重新计算中转费
				addRfcTranferList(bean,dto,cacilateDto);
			}
			if(CollectionUtils.isNotEmpty(bean.getRfcTranferList())){
				//针对中转费重新加载其他费用面板
				loadZZOther(bean);
			}else{
				return true;
			}
			return false;
		}
	}
	
	/**
	 * 针对中转费重新加载其他费用面板
	 * @author foss-206860
	 * */
	private void loadZZOther(WaybillInfoVo bean) {
		//当存在累加中转费时，清除现有所有中转费，重新加载所有
		//查询当前单号，active="Y"且范围不属货物现在范围==>查询出来的加上当前转运集合中isSum=Y的设置至面板
		List<WaybillRfcTranferEntity> rfcTranferList = bean.getRfcTranferList();
		List<WaybillRfcTranferEntity> transferHistory = null;
		List<OtherChargeVo> otherChargeList = new ArrayList<OtherChargeVo>();
		if(CollectionUtils.isNotEmpty(rfcTranferList)){
			for (int i = 0; i < rfcTranferList.size(); i++) {
				//当费率不为0且费用不为0时，将rfcTranferList.get(i)转换成OtherChargeVo
				if(rfcTranferList.get(i).getTransportFeeRate() != null
						&& rfcTranferList.get(i).getTransportFee() != null
						&& rfcTranferList.get(i).getTransportFeeRate().compareTo(BigDecimal.ZERO) != 0
						&& rfcTranferList.get(i).getTransportFee().compareTo(BigDecimal.ZERO) != 0){
					// ================优化内容:合伙人的时候需要设置当前新增的异常操作费可更改/时间:2016年11月2日下午4:59:41/LianHe/start================
					if (BZPartnersJudge.IS_PARTENER) {
						OtherChargeVo vo = converRfcTranfer(rfcTranferList.get(i));
						//设置为可更改
						vo.setIsUpdate(Boolean.TRUE);
						otherChargeList.add(vo);
					} else {
						//非合伙人的时候按照原先的逻辑继续执行
						otherChargeList.add(converRfcTranfer(rfcTranferList.get(i)));
					}
				// ================优化内容:合伙人的时候需要设置当前新增的异常操作费可更改/时间:2016年11月2日下午5:00:11/LianHe/end================
				}
				//设置计费类型
				DataDictionaryValueVo dataDictionaryValueVo = new DataDictionaryValueVo();
				dataDictionaryValueVo.setValueCode(rfcTranferList.get(i).getBillingType());
				
				BigDecimal unitPrice = rfcTranferList.get(i).getTransportFeeRate();
				//四舍五入
				BigDecimal fee = rfcTranferList.get(i).getTransportFee().setScale(0, BigDecimal.ROUND_HALF_UP);
				if(WaybillRfcConstants.TRANSFER.equals(bean.getRfcType().getValueCode())){
					bean.setTfrBillingType(dataDictionaryValueVo);
					//费率
					bean.setTfrUnitPrice(unitPrice);
					//总费用
					bean.setTfrFee(fee);
					bean.setRtnFee(BigDecimal.ZERO);
					//设置异常操作费
					bean.setNewZqExceptionOperateFee(fee);//合伙人三期需求：新增异常操作费--Lianhe--2016年11月1日
				}else if(WaybillRfcConstants.RETURN.equals(bean.getRfcType().getValueCode())){
					bean.setRtnBillingType(dataDictionaryValueVo);
					//费率
					bean.setRtnUnitPrice(unitPrice);
					//总费用
					bean.setRtnFee(fee);
					bean.setTfrFee(BigDecimal.ZERO);
					//设置异常操作费
					bean.setNewZqExceptionOperateFee(fee);//合伙人三期需求：新增异常操作费--Lianhe--2016年11月1日
				}
				
			}
		
			WaybillRfcTranferEntity entity = rfcTranferList.get(0);
			//查询同单号下不在范围一和范围二下的有效记录
			transferHistory = waybillService.queryRfcTransferHistory(entity);
			if(CollectionUtils.isNotEmpty(transferHistory)){
				for (int j = 0; j < transferHistory.size(); j++) {
					otherChargeList.add(converRfcTranfer(transferHistory.get(j)));
				}
			}
		}
		//剔除所有现有中转费记录
		setTransportOtherChargeForSum(bean,otherChargeList);
	}

	//将waybillRfcTranferEntity转换成OtherChargeVo--206860
	private OtherChargeVo converRfcTranfer(
			WaybillRfcTranferEntity waybillRfcTranferEntity) {
		OtherChargeVo vo = new OtherChargeVo();
		PriceEntity dto = waybillService.queryValueAddPriceByCode(PriceEntityConstants.PRICING_CODE_ZZ);
		if(dto != null){
			vo.setChargeName(dto.getName());
			vo.setCode(dto.getCode());
			vo.setId(dto.getId());
		}else{
			vo.setChargeName(i18n.get("foss.gui.changing.waybillInfoBindingListener.otherChargeVo.chargeName"));
			vo.setCode(PriceEntityConstants.PRICING_CODE_ZZ);
			vo.setId(PriceEntityConstants.PRICING_CODE_ZZ);
		}
		if(waybillRfcTranferEntity != null){
			vo.setMoney(waybillRfcTranferEntity.getTransportFee().toPlainString());
		}
		/**
		 * 是否初始化值
		 */
		vo.setIsInit(Boolean.FALSE);
		vo.setIsDelete(false);
		vo.setIsUpdate(false);
		return vo;
	}

	/**
	 * 设置转运费到其他费用中
	 * 
	 * @author foss-206860
	 */
	public void setTransportOtherChargeForSum(WaybillInfoVo bean,List<OtherChargeVo> otherChargeList) {
//		bean.setOtherFee(bean.getOtherFee().add(bean.getTfrFee().add(bean.getRtnFee())));
		
		JXTable otherTable = ui.incrementPanel.getTable();
		WaybillOtherCharge model = (WaybillOtherCharge) otherTable.getModel();
		List<OtherChargeVo> data = model.getData();
		//中转费Code
		String zzCode = PriceEntityConstants.PRICING_CODE_ZZ;
		//中转费用项
		if(CollectionUtils.isNotEmpty(data)){
//			for (int i = 0; i < data.size(); i++) {
//				if(!zzCode.equals(data.get(i).getCode())){
//					//当其他费用面板中code不为中转费时，添加至加载list中
//					otherChargeList.add(data.get(i));
//				}
//			}
			for (int i = data.size()-1; i >= 0; i--) {
				if(zzCode.equals(data.get(i).getCode())){
					data.remove(data.get(i));
				}
			}
		}
		for(OtherChargeVo chargeVo : otherChargeList){
			data.add(chargeVo);
		}
		ui.incrementPanel.setChangeDetail(data);
		bean.setOtherChargeChanged(true);
	}
	
	//判断是否满足叠加中转费的条件---206860
	//判断当前运单更改时的货物状态，列出所属范围
	public void queryRangeForZZ(WaybillInfoVo bean){
		//货物状态
		String goodsStatu = "";
		//货物范围
		String goodsRange = "";
		String receiveOrgCode = "";//开单部门
		String recordProductCode = "";//运输性质
		String recordCustomerPickupOrgCode = ""; //提货网点
		//第一外场
//		String firstLoadOrgCode = null;
		//最终配载部门=最终外场
		String lastOutLoadOrgCode = null;
		//先从中转获取开单时走货路径，获取不导按导入的数据来获取走货路径
		TransportPathEntity queryTransportPath = waybillService.queryTransportPath(bean.getWaybillNo());
		if(queryTransportPath != null && StringUtil.isNotEmpty(queryTransportPath.getTransportPath())){
			String transportPath = queryTransportPath.getTransportPath();
			String[] path = transportPath.split("-");
			if(path != null){
				//开单部门
				if(StringUtil.isNotEmpty(path[0])){
					OrgAdministrativeInfoEntity entity = new OrgAdministrativeInfoEntity();
					entity.setName(path[0]);
					List<OrgAdministrativeInfoEntity> querySimpleOrgAdministrativeInfoByEntity = waybillService.querySimpleOrgAdministrativeInfoByEntity(entity, 0, 1);
					if(CollectionUtils.isNotEmpty(querySimpleOrgAdministrativeInfoByEntity)){
						receiveOrgCode = querySimpleOrgAdministrativeInfoByEntity.get(0).getCode();
					}
				}
				//第一外场
				/*if(StringUtil.isNotEmpty(path[1])){
					OrgAdministrativeInfoEntity entity = new OrgAdministrativeInfoEntity();
					entity.setName(path[1]);
					List<OrgAdministrativeInfoEntity> querySimpleOrgAdministrativeInfoByEntity = waybillService.querySimpleOrgAdministrativeInfoByEntity(entity, 0, 1);
					if(CollectionUtils.isNotEmpty(querySimpleOrgAdministrativeInfoByEntity)){
						firstLoadOrgCode = querySimpleOrgAdministrativeInfoByEntity.get(0).getCode();
					}
				}*/
				//最终配载部门
				if(StringUtil.isNotEmpty(path[path.length-2])){
					OrgAdministrativeInfoEntity entity = new OrgAdministrativeInfoEntity();
					entity.setName(path[path.length-2]);
					List<OrgAdministrativeInfoEntity> querySimpleOrgAdministrativeInfoByEntity = waybillService.querySimpleOrgAdministrativeInfoByEntity(entity, 0, 1);
					if(CollectionUtils.isNotEmpty(querySimpleOrgAdministrativeInfoByEntity)){
						lastOutLoadOrgCode = querySimpleOrgAdministrativeInfoByEntity.get(0).getCode();
					}
				}
				//提货网点
				if(StringUtil.isNotEmpty(path[path.length-1])){
					OrgAdministrativeInfoEntity entity = new OrgAdministrativeInfoEntity();
					entity.setName(path[path.length-1]);
					List<OrgAdministrativeInfoEntity> querySimpleOrgAdministrativeInfoByEntity = waybillService.querySimpleOrgAdministrativeInfoByEntity(entity, 0, 1);
					if(CollectionUtils.isNotEmpty(querySimpleOrgAdministrativeInfoByEntity)){
						recordCustomerPickupOrgCode = querySimpleOrgAdministrativeInfoByEntity.get(0).getCode();
					}
				}
			}
		}
		if(StringUtil.isEmpty(lastOutLoadOrgCode)){
			//开单时的出发部门
			receiveOrgCode = bean.getRecordStartOrgCode();
			if(StringUtil.isEmpty(receiveOrgCode)){
				receiveOrgCode = bean.getReceiveOrgCode();
			}
			//开单时的运输性质
			ProductEntityVo recordProduct = bean.getRecordProductCode();
			//运输性质
			if(recordProduct != null){
				recordProductCode = recordProduct.getCode();
			}else{
				if(bean.getProductCode() != null){
					recordProductCode = bean.getProductCode().getCode();
				}
			}
			//开单时的提货网点
			BranchVo recordCustomerPickupOrg = bean.getRecordCustomerPickupOrgCode();
			//提货网点
			if(recordCustomerPickupOrg != null){
				recordCustomerPickupOrgCode = recordCustomerPickupOrg.getCode();
			}else{
				if(bean.getCustomerPickupOrgCode() != null){
					recordCustomerPickupOrgCode = bean.getCustomerPickupOrgCode().getCode();
				}
			}
			FreightRouteDto queryFreightRouteBySourceTarget = waybillService.queryFreightRouteBySourceTarget(receiveOrgCode, recordCustomerPickupOrgCode, recordProductCode, bean.getBillTime());
			if(queryFreightRouteBySourceTarget != null){
				//获取走货路径线路段
				List<FreightRouteLineDto> freightRouteLineList = queryFreightRouteBySourceTarget.getFreightRouteLinelist();
				if (CollectionUtils.isNotEmpty(freightRouteLineList)) {
					//获取第一外场
//					firstLoadOrgCode = freightRouteLineList.get(0).getTargetCode();
					//获取最终外场
					lastOutLoadOrgCode = freightRouteLineList.get(freightRouteLineList.size() - 1).getSourceCode();
				}
			}
		}
		//查询否存在交接单记录
		List<HandOverBillDetailEntity> handoverBillDetailFirst = waybillService.queryHandoverBillDetailByWaybillNoAndOrgCord(bean.getWaybillNo(),"");
		//查询在最终外场是否存在出库记录
		List<HandOverBillDetailEntity> handoverBillDetailLast = waybillService.queryHandoverBillDetailByWaybillNoAndOrgCord(bean.getWaybillNo(), lastOutLoadOrgCode);
		//查询在提货网点时候存在出库记录
		List<HandOverBillDetailEntity> handoverBillDetailleast = waybillService.queryHandoverBillDetailByWaybillNoAndOrgCord(bean.getWaybillNo(), recordCustomerPickupOrgCode);
		//在第一外场,最终外场，提货网点都没有交接出库记录属于范围一
		if(CollectionUtils.isEmpty(handoverBillDetailFirst)){
			goodsRange =  "range_one";
		}else{
			for (int i = 0; i < handoverBillDetailFirst.size(); i++) {
				if(StringUtil.isNotEmpty(receiveOrgCode)
						&& !receiveOrgCode.equals(handoverBillDetailFirst.get(i).getOrigOrgCode())){
					goodsRange = "不在开单部门交接出库";
					break;
				}
			}
			if("不在开单部门交接出库".equals(goodsRange)){
				goodsRange = "";
			}else{
				goodsRange =  "range_one";
			}
		}
		//在最终外场有全部的交接出库记录，在提货网点没有交接出库记录属于范围二
		if(CollectionUtils.isNotEmpty(handoverBillDetailLast)){
			int handoverBillTotal  = 0;
			for (int i = 0; i < handoverBillDetailLast.size(); i++) {
				if(handoverBillDetailLast.get(i) != null && handoverBillDetailLast.get(i).getPieces() != null){
					handoverBillTotal += handoverBillDetailLast.get(i).getPieces().intValue();
				}
			}
			if(handoverBillTotal == bean.getGoodsQtyTotal()
					&& CollectionUtils.isEmpty(handoverBillDetailleast)){
				goodsRange =  "range_two";
			}
		}
		
		//设置更改时的货物状态
		bean.setGoodsStatu(goodsStatu);
		//设置更改时的货物范围
		bean.setGoodsRange(goodsRange);
	}
	
	/**
	 * 获取对应转运实体集合添加至bean对象中
	 * 
	 * @author foss-206860
	 * */
	private Boolean addRfcTranferList(WaybillInfoVo bean,ProductPriceDto dto,QueryBillCacilateDto cacilateDto) {
		//封装数据
		WaybillRfcTranferEntity waybillRfcTranferEntity = createWaybillRfcTranferEntity(bean,dto,cacilateDto,FossConstants.NO,FossConstants.NO,null);
		if(StringUtils.isNotEmpty(bean.getGoodsRange())){
			//根据运单号和当前货物所处范围查询转运或返货更改表，判断是否存在一条同单号同范围且active="Y"的更改信息，则合并同单号同范围的更改信息，重新计算中转费;反之，不做处理;最后返回合并后的最新实体
			List<WaybillRfcTranferEntity> tranferEntityList = waybillService.queryWaybillRfcTransferEntity(waybillRfcTranferEntity);
			if(CollectionUtils.isNotEmpty(tranferEntityList)){
				//重新计算中转费并封装最新实体，插入数据库
				boolean calculateTfrFeeToInsert = calculateTfrFeeToInsert(bean,tranferEntityList.get(0));
				return calculateTfrFeeToInsert;
			}else{
				List<WaybillRfcTranferEntity> rfcTranferList = new ArrayList<WaybillRfcTranferEntity>();
				rfcTranferList.add(waybillRfcTranferEntity);
				bean.setRfcTranferList(rfcTranferList);
			}
		}else{
			List<WaybillRfcTranferEntity> rfcTranferList = new ArrayList<WaybillRfcTranferEntity>();
			rfcTranferList.add(waybillRfcTranferEntity);
			bean.setRfcTranferList(rfcTranferList);
		}
		return false;
	}

	/**
	 * 封装新的数据重新计算中转费
	 * 
	 * @author foss-206860
	 * */
	private boolean calculateTfrFeeToInsert(WaybillInfoVo bean,WaybillRfcTranferEntity tranferEntity) {
		if(bean == null){
			//没有价格且出发区域和到达区域不一致，说明缺少价格方案
			MsgBox.showInfo("运单信息实体为空！");
			return true;
		}
		//产品价格
		ProductPriceDto dto = null;
		
		//计算dto
		QueryBillCacilateDto cacilateDto = getTfrQueryParam(bean,tranferEntity);
		//开单时刻上门接货价
		if(bean.getPickupToDoor()){
			dto = getProductPriceDto(bean, cacilateDto);
		}
		//开单时刻非上门接货价
		if(dto == null){
			cacilateDto.setIsReceiveGoods(FossConstants.NO);//no
			dto = getProductPriceDto(bean, cacilateDto);
		}
		//当前时刻上门接货价
		if(dto == null && bean.getPickupToDoor()){
			cacilateDto.setReceiveDate(null);// 营业部收货日期（可选，无则表示当前日期）
			cacilateDto.setIsReceiveGoods(FossConstants.YES);//no
			dto = getProductPriceDto(bean, cacilateDto);
		}
		//当前时刻非上门接货价
		if(dto == null){
			cacilateDto.setReceiveDate(null);// 营业部收货日期（可选，无则表示当前日期）
			cacilateDto.setIsReceiveGoods(FossConstants.NO);//no
			dto = getProductPriceDto(bean, cacilateDto);
		}
		//当原有出发目的站和到达目的站一样时，说明转运到原目的站了，不收取费用
		if(tranferEntity.getSourceCustomerOrgCode().equals(bean.getFinalCustomerPickupOrgCode().getCode())){
			dto = new ProductPriceDto();
			dto.setCaculateType("WEIGHT");
			dto.setActualFeeRate(BigDecimal.ZERO);
			dto.setCaculateFee(BigDecimal.ZERO);
		}else{
			if(dto == null){
				//没有价格且出发区域和到达区域不一致，说明缺少价格方案
				MsgBox.showInfo(i18n.get("foss.gui.changing.waybillInfoBindingListener.msgBox.nullProductPrice"));
				return true;
			}
		}
		if(bean != null && dto != null && cacilateDto != null){
			WaybillRfcTranferEntity rfcTranferEntity = createWaybillRfcTranferEntity(bean, dto, cacilateDto,FossConstants.YES,FossConstants.NO,tranferEntity);
			
			List<WaybillRfcTranferEntity> rfcTranferList = new ArrayList<WaybillRfcTranferEntity>();
			rfcTranferList.add(rfcTranferEntity);
			bean.setRfcTranferList(rfcTranferList);
		}
		return false;
	}

	/**
	 * 封装WaybillRfcTranferEntity实体
	 * 
	 * @author foss-206860
	 * @param isSum 是否累加
	 * @param istfrHandWrite 是否手写费率
	 * */
	private WaybillRfcTranferEntity createWaybillRfcTranferEntity(WaybillInfoVo bean,
			ProductPriceDto dto,QueryBillCacilateDto cacilateDto,String isSum,String isTfrHandWrite,WaybillRfcTranferEntity tranferEntity) {
		WaybillRfcTranferEntity waybillRfcTranferEntity = new WaybillRfcTranferEntity();
		if(bean != null){
			//运单号
			waybillRfcTranferEntity.setWaybillNo(bean.getWaybillNo());
			//货物范围
			waybillRfcTranferEntity.setGoodsRange(bean.getGoodsRange());
			//货物状态
			waybillRfcTranferEntity.setGoodsStatus(bean.getGoodsStatu());
			if(bean.getFinalCustomerPickupOrgCode() != null){
				// 转运或返货到达部门
				waybillRfcTranferEntity.setChangeTargerOrgCode(bean.getFinalCustomerPickupOrgCode().getCode());
				//转运或者返货后的目的站
				waybillRfcTranferEntity.setFinalCustomerOrgCode(bean.getFinalCustomerPickupOrgCode().getCode());
			}
		}
		if(tranferEntity != null){
			//转运或者返货前的目的站
			waybillRfcTranferEntity.setSourceCustomerOrgCode(tranferEntity.getSourceCustomerOrgCode());
		}else{
			if(bean.getCustomerPickupOrgCode() != null){
				//转运或者返货前的目的站
				waybillRfcTranferEntity.setSourceCustomerOrgCode(bean.getCustomerPickupOrgCode().getCode());
			}
		}
		if(cacilateDto != null){
			// 转运或返货出发部门
			waybillRfcTranferEntity.setSourceTargerOrgCode(cacilateDto.getOriginalOrgCode());
		}else{
			waybillRfcTranferEntity.setSourceTargerOrgCode(bean.getFinalStartOrgCode());
		}
		//中转费
		if(dto != null && dto.getCaculateFee() != null){
			//设置计费类型
			waybillRfcTranferEntity.setBillingType(dto.getCaculateType());
			//费率
			waybillRfcTranferEntity.setTransportFeeRate(dto.getActualFeeRate());
			waybillRfcTranferEntity.setTransportFee(dto.getCaculateFee().setScale(0, BigDecimal.ROUND_HALF_UP));
		}else{
			//获取转运计费类型
			if(bean.getTfrBillingType() == null){
				throw new WaybillValidateException(i18n.get("foss.gui.changing.calculateAction.exception.nullTfrBillingType"));
			}
			//如果转运费率人工编辑	
			String tfrBillType = bean.getTfrBillingType().getValueCode();
			if(StringUtil.isEmpty(tfrBillType)){
				throw new WaybillValidateException(i18n.get("foss.gui.changing.calculateAction.exception.nullTfrBillingType"));
			}
			BigDecimal unitPrice = BigDecimal.ZERO;
			if(WaybillRfcConstants.TRANSFER.equals(bean.getRfcType().getValueCode())){
				unitPrice = bean.getTfrUnitPrice();
			}else if(WaybillRfcConstants.RETURN.equals(bean.getRfcType().getValueCode())){
				unitPrice = bean.getRtnUnitPrice();
			}
			if(unitPrice==null || BigDecimal.ZERO.compareTo(unitPrice) == 0){
				throw new WaybillValidateException(i18n.get("foss.gui.changing.calculateAction.exception.nullTfrUnitPrice"));
			}
			BigDecimal tfrFee = null;
			if(PricingConstants.CRITERIA_DETAIL_CACULATE_TYPE_WEIGHT.equals(tfrBillType)){
				// 重量计费
				tfrFee = bean.getGoodsWeightTotal().multiply(unitPrice);
			}else if(PricingConstants.CRITERIA_DETAIL_CACULATE_TYPE_VOLUME.equals(tfrBillType)){
				// 体积计费
				tfrFee = bean.getGoodsVolumeTotal().multiply(unitPrice);
			}
			//设置计费类型
			waybillRfcTranferEntity.setBillingType(tfrBillType);
			//费率
			waybillRfcTranferEntity.setTransportFeeRate(unitPrice);
			if(tfrFee != null){
				waybillRfcTranferEntity.setTransportFee(tfrFee.setScale(0, BigDecimal.ROUND_HALF_UP));
			}
		}
		//是否有效
		waybillRfcTranferEntity.setActive(FossConstants.NO);
		//操作时间
		waybillRfcTranferEntity.setOperateTime(new Date());
		//是否累加
		waybillRfcTranferEntity.setIsSum(isSum);
		//中转类型
		waybillRfcTranferEntity.setRfcType(bean.getRfcType().getValueCode());
		//是否手写费率
		waybillRfcTranferEntity.setIsTfrHandWrite(isTfrHandWrite);
		
		return waybillRfcTranferEntity;
	}
	
	/**
	 * 监听手输转运费率
	 * 当找不到价格时，需要手动输入转运费率
	 * @author foss-206860
	 * */
	private void transferUnitPrice(WaybillInfoVo bean){
		//校验数据输入
		//校验转运计费类型
		if(bean.getTfrBillingType() == null){
			throw new WaybillValidateException(i18n.get("foss.gui.changing.calculateAction.exception.nullTfrBillingType"));
		}
		BigDecimal unitPrice = BigDecimal.ZERO;
		if(WaybillRfcConstants.TRANSFER.equals(bean.getRfcType().getValueCode())){
			unitPrice = bean.getTfrUnitPrice();
		}else if(WaybillRfcConstants.RETURN.equals(bean.getRfcType().getValueCode())){
			unitPrice = bean.getRtnUnitPrice();
		}
		//如果转运费率人工编辑	
		String tfrBillType = bean.getTfrBillingType().getValueCode();
		if(StringUtil.isEmpty(tfrBillType)){
			throw new WaybillValidateException(i18n.get("foss.gui.changing.calculateAction.exception.nullTfrBillingType"));
		}
		if(unitPrice==null  || BigDecimal.ZERO.compareTo(unitPrice) == 0){
			throw new WaybillValidateException(i18n.get("foss.gui.changing.calculateAction.exception.nullTfrUnitPrice"));
		}
		//获取当前变更时的货物状态范围
		queryRangeForZZ(bean);
		//判断当前单号当前范围内是否存在有效数据
		List<WaybillRfcTranferEntity> rfcTranferList = new ArrayList<WaybillRfcTranferEntity>();
		WaybillRfcTranferEntity entity = null;
		//根据输入的费率计算转运费并封装最新实体，填充至bean对象中
		entity = createWaybillRfcTranferEntity(bean, null, null, FossConstants.NO,FossConstants.YES,null);
		if(StringUtils.isNotEmpty(bean.getGoodsRange())){
			//根据运单号和当前货物所处范围查询转运或返货更改表，判断是否存在一条同单号同范围且active="Y"的更改信息，则合并同单号同范围的更改信息，重新计算中转费;反之，不做处理;最后返回合并后的最新实体
			List<WaybillRfcTranferEntity> tranferEntityList = waybillService.queryWaybillRfcTransferEntity(entity);
			if(CollectionUtils.isNotEmpty(tranferEntityList)){
				entity.setSourceTargerOrgCode(tranferEntityList.get(0).getSourceTargerOrgCode());
				entity.setSourceCustomerOrgCode(tranferEntityList.get(0).getSourceCustomerOrgCode());
				entity.setIsSum(FossConstants.YES);
			}
		}
		if(entity != null){
			rfcTranferList.add(entity);
		}
		bean.setRfcTranferList(rfcTranferList);
		if(CollectionUtils.isNotEmpty(bean.getRfcTranferList())){
			//针对中转费重新加载其他费用面板
			loadZZOther(bean);
		}
	}
	
	/**
	 * 
	 * 获取产品价格查询参数
	 * 针对转运和返货新增的参数获取方法
	 * @author foss-206860
	 * 
	 */
	private QueryBillCacilateDto getTfrQueryParam(WaybillInfoVo bean,WaybillRfcTranferEntity tranferEntity) {
		QueryBillCacilateDto queryDto = null;
		if(WaybillRfcConstants.TRANSFER.equals(bean.getRfcType().getValueCode())){
			queryDto = Common.getQueryParamForZZ(bean, BooleanConvertYesOrNo.booleanToString(bean
					.getPickupToDoor()), Common.ZYF,tranferEntity);
		}else if(WaybillRfcConstants.RETURN.equals(bean.getRfcType().getValueCode())){
			queryDto = Common.getQueryParamForZZ(bean, BooleanConvertYesOrNo.booleanToString(bean
					.getPickupToDoor()), Common.FHF,tranferEntity);
		}
		return queryDto;
	}
	
	/**
	 * 
	 * 获取产品价格查询参数
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-11-16 上午11:02:10
	 */
	private QueryBillCacilateDto getTfrQueryParam(WaybillInfoVo bean) {
		QueryBillCacilateDto queryDto = Common.getQueryParam(bean, BooleanConvertYesOrNo.booleanToString(bean
				.getPickupToDoor()), Common.ZYF);
		return queryDto;
	}

	/**
	 * 
	 * 获得产品价格详细信息
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-11-5 下午04:27:16
	 */
	private ProductPriceDto getProductPriceDto(WaybillInfoVo bean, QueryBillCacilateDto cacilateDto) {
		List<ProductPriceDto> productPrice = waybillService
				.queryProductPriceList(cacilateDto);
		ProductPriceDto dto = null;
		if (productPrice == null) {
			return null;
		} else {
			for (ProductPriceDto fee : productPrice) {
				dto = fee;
			}
		}
		return dto;
	}
	
	
	/**
	 * 
	 * 初始化转运数据 转运运输性质： 1） 原运输类型为汽运：以原目的站作为转运始发站，与转运目的站匹配运输性质； 2） 原运输类型为偏线或空运： ⅰ
	 * 若货物未出原最终配载部门库存，以原最终配载部门所在城市作为转运始发站，与转运目的站匹配运输性质； ⅱ
	 * 若货物已出原最终配载部门库存，转运运输性质只能为偏线或空运。
	 * 
	 * @author 102246-foss-shaohongliang
	 * @date 2012-11-3 上午9:23:13
	 */
	private void initTansferComponentData() {
		WaybillInfoVo bean = ui.getBinderWaybill();
		
		List<ProductEntity> list = waybillService.queryTransType(bean.getTfrStartOrgCode());
		TransferInfoPanel transferInfoPanel = ui.getWaybillInfoPanel().getTransferPanel().getTransferTabPanel().getTransferInfoPanel();
		DefaultComboBoxModel productTypeModel = transferInfoPanel.getTransferProductTypeModel();
		productTypeModel.removeAllElements();
		Boolean falg = bean.getIsBigGoods();
		if(falg){
			//打开新产品功能
			CommonUtils.filterChangingBigGoodsProductEntity(list,falg);
//			CommonUtils.filterBigGoodsProductEntity(list, falg);
		}
		for (ProductEntity dataDictionary : list) {
			if(bean.isTfrNeedFilter()){
				if(!(ProductEntityConstants.PRICING_PRODUCT_AIR_FREIGHT.equals(dataDictionary.getCode()) 
						|| ProductEntityConstants.PRICING_PRODUCT_PARTIAL_LINE.equals(dataDictionary.getCode()))){
					continue;
				}
			}
			if(!falg){
				if(ProductEntityConstants.PRICING_PRODUCT_C2_C20006.equals(dataDictionary.getParentCode())
					||ProductEntityConstants.PRICING_PRODUCT_C2_C20007.equals(dataDictionary.getParentCode())
					||ProductEntityConstants.PRICING_PRODUCT_C2_C20008.equals(dataDictionary.getParentCode())
					||ProductEntityConstants.PRICING_PRODUCT_C2_C20009.equals(dataDictionary.getParentCode())){
					 continue;
				 }
			}
			ProductEntityVo vo = new ProductEntityVo();
			if(CommonUtils.directDetermineIsExpressByProductCode(dataDictionary.getCode())){
				continue;
			}
			try {
				BeanUtils.copyProperties(vo, dataDictionary);
			} catch (IllegalAccessException e) {
				LOG.error(e.getMessage(), e);
			} catch (InvocationTargetException e) {
				LOG.error(e.getMessage(), e);
			}
			productTypeModel.addElement(vo);
		}
		
		for (int i = 0; i < productTypeModel.getSize(); i++) {
			ProductEntityVo vo = (ProductEntityVo) productTypeModel
					.getElementAt(i);
			if (falg) {
				// 默认设置为-精准大票卡航
				if (ProductEntityConstants.PRICING_PRODUCT_LONG_DISTANCE_FAST_FREIGHT_BG
						.equals(vo.getCode())) {
					bean.setProductCode(vo);
				}
			} else {
				// 默认设置为精准卡航
				if (ProductEntityConstants.PRICING_PRODUCT_LONG_DISTANCE_FAST_FREIGHT
						.equals(vo.getCode())) {
					bean.setProductCode(vo);
				}
			}
		}
		DefaultComboBoxModel pickModel = transferInfoPanel.getPickModeModel();
		pickModel.removeAllElements();
		if(ui.getOriginWaybill().getSpecialValueAddedServiceType()!=null&&
				ui.getOriginWaybill().getSpecialValueAddedServiceType().getValueCode()!=null){
			Common.modifyspecialPickmodel(pickModel);
		}
		//DMANA-4923 FOSS开单隐藏免费送货
		else if(WaybillConstants.DELIVER_FREE.equals(ui.getOriginWaybill().getReceiveMethod().getValueCode()) || WaybillConstants.DELIVER_FREE_AIR.equals(ui.getOriginWaybill().getReceiveMethod())){
			Common.modifyPickModel(pickModel, falg);
		}else{
			Common.modifyPickModel(pickModel, falg,bean);
		}
		Common.modifyReceiveMethod(bean, pickModel);
		
//		if(transferInfoPanel.getCombTransferProductType().getItemCount()>0){
//			transferInfoPanel.getCombTransferProductType().setSelectedIndex(0);
//		}
		
		//如果货物已出最终配载部门，转运费率手工输入
		if(bean.isTfrNeedFilter()){
			transferInfoPanel.getTxtTransferUnitPrice().setEnabled(true);
		}else{
			transferInfoPanel.getTxtTransferUnitPrice().setEnabled(false);
		}
		
		
		//合票方式初始化
		DefaultComboBoxModel combFreightMethodModel=(DefaultComboBoxModel) transferInfoPanel.getCombFreightMethodModel();
		List<DataDictionaryValueEntity> freightMethodList = waybillService
				.queryFreightMethod();
		combFreightMethodModel.removeAllElements();
		for (DataDictionaryValueEntity dataDictionary : freightMethodList) {
			DataDictionaryValueVo vo = entityToVo(dataDictionary);
			combFreightMethodModel.addElement(vo);
		}
	}

	/**
	 * 
	 * 数据字典Entity转换为VO
	 * @author 102246-foss-shaohongliang
	 * @date 2012-12-25 下午12:18:48
	 */
	private DataDictionaryValueVo entityToVo(
			DataDictionaryValueEntity dataDictionary) {
		DataDictionaryValueVo vo = new DataDictionaryValueVo();
		try {
			BeanUtils.copyProperties(vo, dataDictionary);
		} catch (IllegalAccessException e) {
			LOG.error(e.getMessage());
		} catch (InvocationTargetException e) {
			LOG.error(e.getMessage());
		}
		return vo;
	}
	
	/**
	 * 
	 * 初始化返货数据 返货运输性质： 1） 原运输类型为汽运：以原目的站作为返货始发站，与返货目的站匹配运输性质； 2） 原运输类型为偏线或空运： ⅰ
	 * 若货物未出原最终配载部门库存，以原最终配载部门所在城市作为返货始发站，与返货目的站匹配运输性质； ⅱ
	 * 若货物已出原最终配载部门库存，返货运输性质只能为偏线或空运。
	 * 
	 * @author 102246-foss-shaohongliang
	 * @date 2012-11-3 上午9:23:13
	 */
	private void initReturnComponentData() {
		WaybillInfoVo bean = ui.getBinderWaybill();
		
		List<ProductEntity> list = waybillService.queryTransType(bean.getRtnStartOrgCode());
		ReturnInfoPanel returnInfoPanel = ui.getWaybillInfoPanel().getTransferPanel().getReturnTabPanel().getReturnInfoPanel();
		DefaultComboBoxModel productTypeModel = returnInfoPanel.getReturnProductTypeModel();
		productTypeModel.removeAllElements();
		Boolean falg = bean.getIsBigGoods();
		if(!falg){
			CommonUtils.filterBigGoodsProductEntity(list,falg);
		}
		for (ProductEntity dataDictionary : list) {
			// 返货不能选择空运类型
			if(ProductEntityConstants.PRICING_PRODUCT_AIR_FREIGHT.equals(dataDictionary.getCode())){
				continue;
			}
			
			if(bean.isRtnNeedFilter()){
				if(!(ProductEntityConstants.PRICING_PRODUCT_AIR_FREIGHT.equals(dataDictionary.getCode()) 
						|| ProductEntityConstants.PRICING_PRODUCT_PARTIAL_LINE.equals(dataDictionary.getCode()))){
					continue;
				}
			}
			
			ProductEntityVo vo = new ProductEntityVo();
			if(CommonUtils.directDetermineIsExpressByProductCode(dataDictionary.getCode())){
				continue;
			}
			try {
				BeanUtils.copyProperties(vo, dataDictionary);
			} catch (IllegalAccessException e) {
				LOG.error(e.getMessage(), e);
			} catch (InvocationTargetException e) {
				LOG.error(e.getMessage(), e);
			}
			productTypeModel.addElement(vo);
		}
		if(returnInfoPanel.getCombReturnProductType().getItemCount()>0){
			returnInfoPanel.getCombReturnProductType().setSelectedIndex(0);
		}
		
		//如果货物已出最终配载部门，返货费率手工输入
		if(bean.isTfrNeedFilter()){
			returnInfoPanel.getTxtReturnUnitPrice().setEnabled(true);
		}else{
			returnInfoPanel.getTxtReturnUnitPrice().setEnabled(false);
		}
	}
	


	/**
	 * 根据查询条件查询客户信息
	 * 
	 * @author 026123-foss-lifengteng
	 * @date 2012-11-22 下午7:25:50
	 */
	public List<CustomerQueryConditionDto> queryDeliveryCustomer(WaybillInfoVo bean) {
		// 查询条件
		List<CustomerQueryConditionDto> dtoList = new ArrayList<CustomerQueryConditionDto>();
		// 手机
		String mobilePhone = StringUtil.defaultIfNull(bean.getDeliveryCustomerMobilephone());
		// 电话
		String telePhone = StringUtil.defaultIfNull(bean.getDeliveryCustomerPhone());
		// 客户名称
		String custName = StringUtil.defaultIfNull(bean.getDeliveryCustomerName());

		// 解析多个电话号码的查询
		Map<String, List<String>> map = null;
		// 将电话号码中的手机号码解析出来
		List<String> mobiles = null;
		// 电话集合
		List<String> phones = null;

		// 判断名称是否为空
		if (StringUtils.isNotEmpty(custName)) {
			CustomerQueryConditionDto dto = new CustomerQueryConditionDto();
			dto.setCustName(custName);
			dto.setExactQuery(true);
			dtoList.add(dto);
		}
		// 判断手机是否为空
		else if (StringUtils.isNotEmpty(mobilePhone)) {
			mobiles = new ArrayList<String>();
			mobiles.add(mobilePhone);

			CustomerQueryConditionDto dto = new CustomerQueryConditionDto();
			dto.setMobilePhone(mobilePhone);
			dto.setExactQuery(true);
			dtoList.add(dto);
		}
		// 判断电话是否为空
		else if (StringUtils.isNotEmpty(telePhone)) {
			map = resolveMobileAndPhone(telePhone);
			mobiles = map.get("mobiles");
			phones = map.get("phones");

			CustomerQueryConditionDto dto = null;
			// 手机不为空时
			if (CollectionUtils.isNotEmpty(mobiles)) {
				for (String mobile : mobiles) {
					dto = new CustomerQueryConditionDto();
					dto.setMobilePhone(mobile);
					dto.setExactQuery(true);
					dtoList.add(dto);
				}
			}
			// 电话不为空时
			if (CollectionUtils.isNotEmpty(phones)) {
				for (String phone : phones) {
					dto = new CustomerQueryConditionDto();
					dto.setContactPhone(phone);
					dto.setExactQuery(true);
					dtoList.add(dto);
				}
			}
		}

		// 根据条件查询客户信息
		List<CustomerQueryConditionDto> contactList = waybillService.queryCustomerByConditionList(dtoList);

		// 若CRM中查询无果，则从历史客户中查询
		if (CollectionUtils.isEmpty(contactList)) {
			if (CollectionUtils.isNotEmpty(mobiles)) {
				// 将手机中的号码加入集合进行查询
				mobiles.add(mobilePhone);
				List<CustomerQueryConditionDto> custMobile = waybillService.queryHisDeliveryCusByMobileList(mobiles);
				if (CollectionUtils.isNotEmpty(custMobile)) {
					if (CollectionUtils.isEmpty(contactList)) {
						contactList = custMobile;
					} else {
						contactList.addAll(custMobile);
					}
				}
			}
			// 电话号码不为空时
			if (CollectionUtils.isNotEmpty(phones)) {
				List<CustomerQueryConditionDto> custPhone = waybillService.queryHisDeliveryCusByPhoneList(phones);
				if (CollectionUtils.isNotEmpty(custPhone)) {
					if (CollectionUtils.isEmpty(contactList)) {
						contactList = custPhone;
					} else {
						contactList.addAll(custPhone);
					}
				}
			}
		}
		return contactList;
	}
	
	/**
	 * 解析字符中的电话号码和手机号码
	 * @author 026123-foss-lifengteng
	 * @date 2013-1-7 下午5:20:32
	 */
	private Map<String,List<String>> resolveMobileAndPhone(String phone){
		//存放解析后的手机和电话号码
		Map<String,List<String>> map = new HashMap<String,List<String>>();
		//分隔字符串
		List<String> strList = StrUtils.resolvePhone(phone);
		//电话号码
		List<String> phoneList = new ArrayList<String>();
		//手机号码
		List<String> mobileList = new ArrayList<String>();
		
		if(CollectionUtils.isNotEmpty(strList)){
			//将解析出的字符串进行分类
			for (String str : strList) {
				if(StrUtils.isMobileNO(str)){
					mobileList.add(str);
				}else{
					phoneList.add(str);
				}
			}
		}
		
		map.put("mobiles", mobileList);
		map.put("phones", phoneList);
		return map;
		
		
	}
	
	/**
	 * 设置主客户统一结算
	 *
	 * @author wangfeng @date 2017/01/12
	 */
	private static void setDeliverySettleAndContactAndRemending(CustomerCircleEntity customerCircleEntity, QueryMemberDialogVo memberBean,CusBargainNewEntity cusBargainNewEntity) {
		//是否统一结算
		memberBean.setCentralizedSettlement(customerCircleEntity.getIsFocusPay());
		//催款部门标杆编码
		memberBean.setReminderOrgCode(cusBargainNewEntity.getHastenfunddeptCode());
		//合同部门code 
		memberBean.setContractOrgCode(cusBargainNewEntity.getUnifiedCode()); 
		//合同部门标杆名称
		memberBean.setContractOrgName(cusBargainNewEntity.getApplicateOrgName());
	}



	/**
	 * 设置客户圈主客户信息
	 * @param memberVo
	 * @author wangfeng @date 2017/01/12
     */
	private void setMainCustomer(WaybillRFCUI ui,QueryMemberDialogVo memberVo,WaybillPanelVo waybillBean) {
		String mainCustomer;
		CustomerCircleNewDto customerCircleNewDto = waybillService.queryCustomerByCusCode(memberVo.getCustomerCode(), waybillBean.getBillTime(), "N");
		if (customerCircleNewDto != null
				&& ("Y").equals(customerCircleNewDto.getIsCustCircle())
				&& customerCircleNewDto.getCustomerCircleEntity() != null
				&& customerCircleNewDto.getCusBargainNewEntity() != null
				&& customerCircleNewDto.getCustomerNewEntity() != null) {
            mainCustomer = customerCircleNewDto.getCustomerCircleEntity().getCustCode();
            //合同实体
			waybillBean.setCusBargainNewEntity(customerCircleNewDto.getCusBargainNewEntity());
			//客户圈实体
			waybillBean.setCustomerCircleEntity(customerCircleNewDto.getCustomerCircleEntity());
			//客户实体
			waybillBean.setCustomerNewEntity(customerCircleNewDto.getCustomerNewEntity());
			//设置主客户
			waybillBean.setIsMainCustomer("Y");
			//设置是否客户圈
			waybillBean.setIsCircle("Y");
            //设置主客户编码
           waybillBean.setMainCustomerCode(mainCustomer);
			//设置实际客户(从客户编码,开单显示从客户编码)
			waybillBean.setActualCustomerCode(memberVo.getCustomerCode());
			//设置主客户编码
			waybillBean.setDeliveryCustomerCode(mainCustomer);
            //是否精准包裹
            memberVo.setIsAccuratePackage(customerCircleNewDto.getCusBargainNewEntity().getIsAccuratePackage());
            //大客户标记
            memberVo.setIsBigCustomer(customerCircleNewDto.getCustomerNewEntity().getIsLargeCustomers());
            //合同编号
            memberVo.setAuditNo(customerCircleNewDto.getCusBargainNewEntity().getBargainCode());
//            boolean monthEnd;
//            if("MONTH_END".equals(customerCircleNewDto.getCusBargainNewEntity().getChargeType())){
//                monthEnd =true;
//                //月结属性
//                waybillBean.setChargeMode(monthEnd);
//            }
            //优惠类型
            memberVo.setPreferentialType(customerCircleNewDto.getCusBargainNewEntity().getPreferentialType());
            //统一结算
            setDeliverySettleAndContactAndRemending(customerCircleNewDto.getCustomerCircleEntity(),memberVo,customerCircleNewDto.getCusBargainNewEntity());
            //客户分群
            memberVo.setFlabelleavemonth(customerCircleNewDto.getCustomerNewEntity().getFlabelleavemonth());
          //合同部门的标杆名称
            memberVo.setContractOrgName(customerCircleNewDto.getCusBargainNewEntity().getApplicateOrgName() !=null ? customerCircleNewDto.getCusBargainNewEntity().getApplicateOrgName():"");
			//合同部门的标杆编码
            memberVo.setContractOrgCode(customerCircleNewDto.getCusBargainNewEntity().getUnifiedCode() !=null ? customerCircleNewDto.getCusBargainNewEntity().getUnifiedCode():"");
			//催款部门的标杆编码
            memberVo.setReminderOrgCode(customerCircleNewDto.getCusBargainNewEntity().getHastenfunddeptCode() !=null ? customerCircleNewDto.getCusBargainNewEntity().getHastenfunddeptCode():"");
            /**
			 * Dmana-10888根据客户编码查询发票标记
			 * @author:218371-foss-zhaoyanjun
			 * @date:2015-01-06下午13:45
			 */
            queryInvoice(ui, memberVo, waybillBean, mainCustomer);

        }else{
        	//设置是否客户圈
			waybillBean.setIsCircle("N");
			//设置主客户
			waybillBean.setIsMainCustomer("N");
			/**
			 * Dmana-10888根据客户编码查询发票标记
			 * @author:218371-foss-zhaoyanjun
			 * @date:2015-01-06下午13:45
			 */
			memberVo.setInvoice(CommonUtils.setInvoice(memberVo.getCustomerCode()));
			//设置实际客户编码
			waybillBean.setDeliveryCustomerCode(memberVo.getCustomerCode());
			if(waybillBean.getGoodsWeightTotal() != null && waybillBean.getGoodsVolumeTotal() != null 
					&& waybillBean.getCustomerPickupOrgCode() != null
					&& waybillBean.getProductCode() != null){
				String isUpdateDeliveryCustomer = Common.validateDeliveryCustomer(waybillBean.getDeliveryCustomerCode(),ui);
				waybillBean.setIsUpdateDeliveryCustomer(isUpdateDeliveryCustomer);
				String isYorN = Common.getInsuranceRate(waybillBean,ui);
				DataDictionaryValueVo goodsStatus = ui.getBinder().getBean().getGoodsStatus();
				String inventory = goodsStatus.getValueCode();
				if(FossConstants.YES.equals(isYorN) && WaybillRfcConstants.RECEIVE_STOCK.equals(inventory)){
					ui.incrementPanel.getTxtInsuranceRate().setEnabled(true);
				}else{
					if(FossConstants.YES.equals(isUpdateDeliveryCustomer) && isYorN.equals(FossConstants.YES)){
						ui.incrementPanel.getTxtInsuranceRate().setEnabled(true);
					}else{
						ui.incrementPanel.getTxtInsuranceRate().setEnabled(false);
					}	
				}
			}
        }
	}

	//根据客户编码查询发票标记
	private void queryInvoice(WaybillRFCUI ui, QueryMemberDialogVo memberVo,
			WaybillPanelVo waybillBean, String mainCustomer) {
		memberVo.setInvoice(CommonUtils.setInvoice(mainCustomer));
		if(waybillBean.getGoodsWeightTotal() != null && waybillBean.getGoodsVolumeTotal() != null 
				&& waybillBean.getCustomerPickupOrgCode() != null
				&& waybillBean.getProductCode() != null){
			String isUpdateDeliveryCustomer = Common.validateDeliveryCustomer(waybillBean.getDeliveryCustomerCode(),ui);
			waybillBean.setIsUpdateDeliveryCustomer(isUpdateDeliveryCustomer);
			String isYorN = Common.getInsuranceRate(waybillBean,ui);
			DataDictionaryValueVo goodsStatus = ui.getBinder().getBean().getGoodsStatus();
			String inventory = goodsStatus.getValueCode();
			if(FossConstants.YES.equals(isYorN) && WaybillRfcConstants.RECEIVE_STOCK.equals(inventory)){
				ui.incrementPanel.getTxtInsuranceRate().setEnabled(true);
			}else{
				if(FossConstants.YES.equals(isUpdateDeliveryCustomer) && isYorN.equals(FossConstants.YES)){
					ui.incrementPanel.getTxtInsuranceRate().setEnabled(true);
				}else{
					ui.incrementPanel.getTxtInsuranceRate().setEnabled(false);
				}	
			}
		}
	}
	/**
	 * 填充发货客户数据
	 * 
	 * @author 026123-foss-lifengteng
	 * @date 2012-11-17 下午3:16:36
	 */
	public void fillDeliveryCustomerData(WaybillInfoVo bean, String mobile, String phone) {
		// 根据条件查询客户信息
		List<CustomerQueryConditionDto> contactList = queryDeliveryCustomer(bean);
		if (CollectionUtils.isNotEmpty(contactList)) {
			// 创建弹出窗口
			QueryConsignerDialog dialog = new QueryConsignerDialog(contactList);
			// 剧中显示弹出窗口
			WindowUtil.centerAndShow(dialog);
			// 获得弹出窗口选择的值
			QueryMemberDialogVo memberVo = dialog.getCustomerVo();
			// 这里判空是为了防止选择一行记录未确定后直接关闭时出现的空对象
			if (memberVo == null) {
				/**
				 * 手机、电话修改后失去焦点，取消弹出对话框 由于手机、电话无法变回原值，为保证不出现张冠李戴的情况
				 * 需要将客户信息全部清空掉，所免造成客户误解
				 */
				// 清空发货客户信息
				Common.cleanDeliveryCustomerInfo(ui, bean, "", "");

				return;
			}
			/**
			 * 更改客户判断客户是否在客户圈
			 * @author wangfeng 311417	@date 2017/01/11
			 */
			if (StringUtils.isNotEmpty(memberVo.getCustomerCode())){
				setMainCustomer(ui,memberVo,bean);
			} 
			
			//保价费率换算
			if(bean.getGoodsWeightTotal() != null && bean.getGoodsVolumeTotal() != null 
					&& bean.getCustomerPickupOrgCode() != null
					&& bean.getProductCode() != null){
				String isUpdateDeliveryCustomer = Common.validateDeliveryCustomer(bean.getDeliveryCustomerCode(),ui);
				bean.setIsUpdateDeliveryCustomer(isUpdateDeliveryCustomer);
				String isYorN = Common.getInsuranceRate(bean,ui);
				DataDictionaryValueVo goodsStatus = ui.getBinder().getBean().getGoodsStatus();
				String inventory = goodsStatus.getValueCode();
				if(FossConstants.YES.equals(isYorN) && WaybillRfcConstants.RECEIVE_STOCK.equals(inventory)){
					ui.incrementPanel.getTxtInsuranceRate().setEnabled(true);
				}else{
					if(FossConstants.YES.equals(isUpdateDeliveryCustomer) && isYorN.equals(FossConstants.YES)){
						ui.incrementPanel.getTxtInsuranceRate().setEnabled(true);
					}else{
						ui.incrementPanel.getTxtInsuranceRate().setEnabled(false);
					}	
				}
			}
			//设置实际客户编码
			bean.setDeliveryCustomerCode(memberVo.getCustomerCode());
			//精准包裹提示
			Common.validateProductCode(bean);
			// 填充数据
			Common.fillDeliveryCustomerInfo(ui, memberVo, bean);
			// 提交为不可编辑
			ui.getButtonPanel().getBtnSubmit().setEnabled(false);
		} else {
			//新客户(即非VIP和全网活跃客户)免费接货不能勾选 add by 306486
			if(ui.getWaybillInfoPanel().getBasicPanel().getCboFreePickupGoods().isSelected()){
				ui.getWaybillInfoPanel().getBasicPanel().getCboFreePickupGoods().setSelected(false);
				ui.getWaybillInfoPanel().getBasicPanel().getCboFreePickupGoods().setEnabled(false);
			}
			// 若为删除原客户信息，则清空全部
			if (!"".equals(StringUtils.defaultString(bean.getDeliveryCustomerId()))) {
				// 清空发货客户信息
				Common.cleanDeliveryCustomerInfo(ui, bean, mobile, phone);
			}
			Common.setServiceChargeEnabled("",false, ui);
		}
	}

	/**
	 * 
	 * 清理银行信息
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-12-10 下午05:07:44
	 */
	public void cleanBankInfo(WaybillInfoVo bean) {
		// 收款人名称
		bean.setAccountName("");
		// 收款人开户行
		bean.setAccountBank("");
		// 收款人银行账号
		bean.setAccountCode("");
	}

	/**
	 * 
	 * 查询收货客户
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-12-10 下午05:08:02
	 */
	public List<CustomerQueryConditionDto> queryReceiveCustomer(WaybillInfoVo bean) {
		//查询条件
		CustomerQueryConditionDto dto = new CustomerQueryConditionDto();
		//手机
		String mobilePhone = StringUtil.defaultIfNull(bean.getReceiveCustomerMobilephone());
		//电话
		String telePhone = StringUtil.defaultIfNull(bean.getReceiveCustomerPhone());
		//客户名称
		String custName = StringUtil.defaultIfNull(bean.getReceiveCustomerName());
		//判断手机是否为空
		if (StringUtils.isNotEmpty(mobilePhone)) {
			dto.setMobilePhone(mobilePhone);
			dto.setExactQuery(true);
		} 
		//判断电话是否为空
		if(StringUtils.isNotEmpty(telePhone)){
			dto.setContactPhone(telePhone);
			dto.setExactQuery(true);
		}
		//判断名称是否为空
		if(StringUtils.isNotEmpty(custName)){
			dto.setCustName(custName);
			dto.setExactQuery(true);
		}
		// 查询客户信息
		dto.setInvoiceDate(new Date());
		// 根据条件查询客户信息
		List<CustomerQueryConditionDto> contactList = waybillService.queryCustomerByCondition(dto);
		
		//若CRM中查询无果，则从历史客户中查询
		if (CollectionUtils.isEmpty(contactList)) {
			Map<String,List<String>> map = resolveMobileAndPhone(telePhone);
			//将电话号码中的手机号码解析出来
			List<String> mobiles =  map.get("mobiles");
			//电话集合
			List<String> phones =  map.get("phones");
			//将手机中的号码加入集合进行查询
			mobiles.add(mobilePhone);
			if(CollectionUtils.isNotEmpty(mobiles)){
				List<CustomerQueryConditionDto> custMobile = waybillService.queryHisReceiveCusByMobileList(mobiles);
				if(CollectionUtils.isNotEmpty(custMobile)){
    				if(CollectionUtils.isEmpty(contactList)){
    					contactList = custMobile;
    				}else{
    					contactList.addAll(custMobile);
    				}
				}
			}
			//电话号码不为空时
			if(CollectionUtils.isNotEmpty(phones)){
				List<CustomerQueryConditionDto> custPhone = waybillService.queryHisReceiveCusByPhoneList(phones);
				if(CollectionUtils.isNotEmpty(custPhone)){
					if(CollectionUtils.isEmpty(contactList)){
						contactList = custPhone;
					}else{
						contactList.addAll(custPhone);
					}
				}
			}
		}
		return contactList;
	}

	/**
	 * 填充收货客户数据
	 * @author 026123-foss-lifengteng
	 * @date 2012-11-17 下午3:16:36
	 */
	public void fillReceiveCustomerData(WaybillInfoVo bean, String mobile, String phone) {
		// 根据条件查询客户信息
		List<CustomerQueryConditionDto> contactList = queryReceiveCustomer(bean);
		if (CollectionUtils.isEmpty(contactList)) {
			// 若为删除原客户信息，则清空全部
			if (!"".equals(StringUtils.defaultString(bean.getReceiveCustomerId()))) {
				// 清空收货客户信息
				Common.cleanReceiveCustomerInfo(ui, bean, mobile, phone);
			}else{
				bean.setReceiveCustomerCode("");
				ui.getConsigneePanel().getTxtReceiveCustomerCode().setText("");
			
			}
		} else {
			//定义VO对象
			QueryMemberDialogVo memberVo = null;
			
			//若只能一条记录时，则自动填充
			if(contactList.size() == 1){
				memberVo = CommonUtils.convertToMemberVo(contactList, WaybillConstants.YES).get(0);
			}else{
				// 创建弹出窗口
				QueryConsigneeDialog dialog = new QueryConsigneeDialog(contactList);
				// 剧中显示弹出窗口
				WindowUtil.centerAndShow(dialog);
				// 获得弹出窗口选择的值
				memberVo = dialog.getCustomerVo();
			}
			// 数据非空判断
			if (memberVo == null) {
				/**
				 * 手机、电话修改后失去焦点，取消弹出对话框 由于手机、电话无法变回原值，为保证不出现张冠李戴的情况
				 * 需要将客户信息全部清空掉，所免造成客户误解
				 */
				// 清空发货客户信息
				Common.cleanReceiveCustomerInfo(ui, bean, "", "");
				return;
			}

			// 填充数据
			Common.fillReceiveCustomerInfo(ui, memberVo, bean);
		}
	}

	/**
	 * 
	 * （发货人手机号码监听）
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-10-20 上午10:52:04
	 */
	private void deliveryCustomerMobilephoneListener(WaybillInfoVo bean) {
		// 判断操作
		if (null == bean.getReceiveMethod()) {
			// 增加日志
			LOG.error("开单提货方式不能为空！");
			// 抛出异常信息
			throw new WaybillSubmitException(i18n.get("foss.gui.changing.waybillInfoBindingListener.exception.ReceiveMethodNotNull"));
		}

		ui.getButtonPanel().getBtnSubmit().setEnabled(false);// 提交为不可编辑
		// 是否内部带货
		if (WaybillConstants.INNER_PICKUP.equals(bean.getReceiveMethod().getValueCode())) {
			return;
		}

		// 手机号码
		String mobile = StringUtil.defaultIfNull(bean.getDeliveryCustomerMobilephone());
		// 手机号是否为空
		boolean mobilePhone = StringUtil.isEmpty(mobile);
		// 手机非空时,则只以手机为查询条件，其它查询条件置空（防止其它查询条件引影响手机号码查询）
		if (!mobilePhone) {
			// 电话置空
			bean.setDeliveryCustomerPhone("");
			// 客户名称
			bean.setDeliveryCustomerName("");
			bean.setDeliveryCustomerId("");
			//手机号为空，则清空客户信息
			Common.noDeliveryCustomerInfo(ui, bean);
			bean.setDeliveryCustomerContact("");
			bean.setDeliveryCustomerContactId("");
			// 行政区域
			bean.setDeliveryCustomerArea("");
			ui.consignerPanel.getTxtConsignerArea().setText(bean.getDeliveryCustomerArea());
			// 发货客户地址
			bean.setDeliveryCustomerAddress("");
			ui.consignerPanel.getTxtConsignerAddress().setText(bean.getDeliveryCustomerAddress());
			bean.setDeliveryCustomerAddressNote("");
			ui.consignerPanel.getTxtConsignerAddress().setText(bean.getDeliveryCustomerAddressNote());
			//重新设置收货人手机号号码
			bean.setDeliveryCustomerMobilephone(mobile);
			// 当未查询出数据时手机会被清空，此时需要重新设置回来
			fillDeliveryCustomerData(bean, mobile, "");
		}else{
			//手机号为空，则清空客户信息
			Common.noDeliveryCustomerInfo(ui, bean);
			bean.setDeliveryCustomerContact("");
			bean.setDeliveryCustomerContactId("");
		}
		
		Common.resetDeliverGoodsFee(bean,ui);
		
		//针对梯度保价添加的监听--206860
		gradInsuranceRateListener(bean);
	}

	/**
	 * 
	 * （收货人手机号码事件监听）
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-10-20 下午04:55:34
	 */
	private void receiveCustomerMobilephoneListener(WaybillInfoVo bean) {
		// 判断对像是否为空
		if (null == bean.getReceiveMethod()) {
			// 增加日志
			LOG.error("开单提货方式不能为空！");
			// 抛出异常信息
			throw new WaybillSubmitException(i18n.get("foss.gui.changing.showPickupStationDialogAction.exception.nullReceiveMethod"));
		}
		// 判断是否为内部带货
		if (WaybillConstants.INNER_PICKUP.equals(bean.getReceiveMethod().getValueCode())) {
			return;
		}
		// 手机号码
		String mobile = StringUtil.defaultIfNull(bean.getReceiveCustomerMobilephone());		
		// 是否为空
		boolean mobilePhone = StringUtil.isEmpty(mobile);
		// 手机非空时,则只以手机为查询条件，其它查询条件置空（防止其它查询条件引影响手机号码查询）
		if (!mobilePhone) {
			// 电话置空
			bean.setReceiveCustomerPhone("");
			// 客户名称
			bean.setReceiveCustomerName("");
			bean.setReceiveCustomerId("");
			//清空收货客户信息
			Common.noReceiveCustomerInfo(ui, bean);
			bean.setReceiveCustomerContact("");
			bean.setReceiveCustomerContactId("");
			// 行政区域
			bean.setReceiveCustomerArea("");
			ui.consigneePanel.getTxtConsigneeArea().setText("");
			// 收货客户地址
			bean.setReceiveCustomerAddress("");
			ui.consigneePanel.getTxtConsigneeAddress().setText("");
			// 收货客户地址备注
			bean.setReceiveCustomerAddressNote("");
			ui.consigneePanel.getTxtConsigneeAddressNote().setText("");
			//收货联系人可编辑
			ui.consigneePanel.getTxtConsigneeLinkMan().setEnabled(true);
			//重新设置收货人手机号号码
			bean.setReceiveCustomerMobilephone(mobile);
			// 若未查询出数据，电话号码会被清空，此时需要将其重新设置回来
			fillReceiveCustomerData(bean, mobile, "");
		}else{
			//清空收货客户信息
			Common.noReceiveCustomerInfo(ui, bean);
			bean.setReceiveCustomerContact("");
			bean.setReceiveCustomerContactId("");
		}
	}

	/**
	 * 
	 * （发货客户电话号码监听）
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-10-20 下午03:54:13
	 */
	private void deliveryCustomerPhoneListener(WaybillInfoVo bean) {
		// 判断是否为内部带货自提
		if (WaybillConstants.INNER_PICKUP.equals(bean.getReceiveMethod().getValueCode())) {
			return;
		}

		// 发货客户手机是否为空：true为空
		boolean mobilePhone = StringUtil.isEmpty(StringUtil.defaultIfNull(bean.getDeliveryCustomerMobilephone()));
		// 发货客户电话号码
		String phone = StringUtil.defaultIfNull(bean.getDeliveryCustomerPhone());
		// 发货客户电话是否为空：true为空
		boolean telePhone = StringUtil.isEmpty(phone);
		// 发货客户名称
		boolean custName = StringUtil.isEmpty(StringUtil.defaultIfNull(bean.getDeliveryCustomerName()));
		// 手机、客户名称为空时
		if (mobilePhone && !telePhone && custName) {
			// 若未查询出数据，电话号码会被清空，此时需要将其重新设置回来
			fillDeliveryCustomerData(bean, "", phone);
		}
		
		Common.resetDeliverGoodsFee(bean,ui);
		
		//针对梯度保价添加的监听--206860
		gradInsuranceRateListener(bean);

	}
	
	/**
	 * 收货客户焦点失去监听事件
	 * @author 026123-foss-lifengteng
	 * @date 2013-1-6 下午2:34:31
	 */
	private void deliveryCustomerNameListener(WaybillInfoVo bean){
		ui.getButtonPanel().getBtnSubmit().setEnabled(false);// 提交为不可编辑
		//客户名称
		String custName = StringUtil.defaultIfNull(bean.getDeliveryCustomerName());
		//客户名称为空则清空客户编码，设置发货联系人为可修改状态
		if ("".equals(custName)) {
			Common.noDeliveryCustomerInfo(ui, bean);
		} else {
			// 封装查询条件
			CustomerQueryConditionDto dto = new CustomerQueryConditionDto();
			// 收货客户名称
			dto.setCustName(bean.getDeliveryCustomerName());
			// 精确查询
			dto.setExactQuery(true);
			// 查询客户信息
			dto.setInvoiceDate(new Date());
			List<CustomerQueryConditionDto> contacts = waybillService.queryCustomerByCondition(dto);
			if (CollectionUtils.isNotEmpty(contacts)) {
				// 创建弹出窗口
				QueryConsignerDialog dialog = new QueryConsignerDialog(contacts);
				// 剧中显示弹出窗口
				WindowUtil.centerAndShow(dialog);
				// 获得弹出窗口选择的值
				QueryMemberDialogVo memberVo = dialog.getCustomerVo();
				// 这里判空是为了防止选择一行记录未确定后直接关闭时出现的空对象
				if (memberVo == null) {
					return;
				}
				/**
				 * 从客户查询主客户
				 * @author 311417 wangfeng
				 * @date 2017/01/14
				 */
				if (StringUtils.isNotEmpty(memberVo.getCustomerCode())){
					setMainCustomer(ui,memberVo,bean);
				} 
				/**
				 * Dmana-10888根据客户编码查询发票标记
				 * @author:218371-foss-zhaoyanjun
				 * @date:2015-01-06下午13:45
				 */
				memberVo.setInvoice(CommonUtils.setInvoice(memberVo.getCustomerCode()));
				
				if(bean.getGoodsWeightTotal() != null && bean.getGoodsVolumeTotal() != null 
						&& bean.getCustomerPickupOrgCode() != null
						&& bean.getProductCode() != null){
					String isUpdateDeliveryCustomer = Common.validateDeliveryCustomer(bean.getDeliveryCustomerCode(),ui);
					bean.setIsUpdateDeliveryCustomer(isUpdateDeliveryCustomer);
					String isYorN = Common.getInsuranceRate(bean,ui);
					DataDictionaryValueVo goodsStatus = ui.getBinder().getBean().getGoodsStatus();
					String inventory = goodsStatus.getValueCode();
					if(FossConstants.YES.equals(isYorN) && WaybillRfcConstants.RECEIVE_STOCK.equals(inventory)){
						ui.incrementPanel.getTxtInsuranceRate().setEnabled(true);
					}else{
						if(FossConstants.YES.equals(isUpdateDeliveryCustomer) && isYorN.equals(FossConstants.YES)){
							ui.incrementPanel.getTxtInsuranceRate().setEnabled(true);
						}else{
							ui.incrementPanel.getTxtInsuranceRate().setEnabled(false);
						}	
					}
				}
				Common.fillDeliveryCustomerInfo(ui, memberVo, bean);
				//精准包裹提示
				Common.validateProductCode(bean);
				ui.getButtonPanel().getBtnSubmit().setEnabled(false);
			} else {
				Common.noDeliveryCustomerInfo(ui, bean);
			}
		}
		
		Common.resetDeliverGoodsFee(bean,ui);
	}
	
	/**
	 * 监听发货联系人事件
	 * @author 026123-foss-lifengteng
	 * @date 2013-1-8 下午7:23:37
	 */
	private void deliveryCustomerContactListener(WaybillInfoVo bean){
		ui.getButtonPanel().getBtnSubmit().setEnabled(false);// 提交为不可编辑
		// 是否月结
		//bean.setChargeMode(false);
		//优惠类型
		bean.setPreferentialType("");
	}


	/**
	 * 
	 * （收货客户电话号码监听）
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-10-20 下午03:54:13
	 */
	private void receiveCustomerPhoneListener(WaybillInfoVo bean) {
		if (WaybillConstants.INNER_PICKUP.equals(bean.getReceiveMethod().getValueCode())) {
			return;
		}

		// 判断客户手机或电话是否为空或空字符串
		// 手机是否为空：true为空
		boolean mobilePhone = StringUtil.isEmpty(StringUtil.defaultIfNull(bean.getReceiveCustomerMobilephone()));
		// 电话号码
		String phone = StringUtil.defaultIfNull(bean.getReceiveCustomerPhone());
		// 电话号码是否为空：true为空
		boolean telePhone = StringUtil.isEmpty(phone);
		// 客户名称是否为空：true为空
		boolean custName = StringUtil.isEmpty(StringUtil.defaultIfNull(bean.getReceiveCustomerName()));
		// 手机为空，电话非空，客户为空
		if (mobilePhone && !telePhone && custName) {
			// 若未查询出数据，电话号码会被清空，此时需要将其重新设置回来
			fillReceiveCustomerData(bean, "", phone);
		}
	}

	/**
	 * 
	 * （运输性质事件监听）
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-10-22 下午04:48:08
	 */
	private void productCodeListener(WaybillInfoVo bean) {
		DataDictionaryValueVo dictionaryValueVo = bean
				.getSpecialValueAddedServiceType();
		if (dictionaryValueVo != null) {
			if (dictionaryValueVo.getValueCode() != null) {
				return;
			}
		}
		ProductEntityVo productVo = bean.getProductCode();
		if(productVo==null || productVo.getCode()==null){
			return;
		}
		//精准包裹提示
		Common.validateProductCode(bean,productVo);
		/**
		 * 精准包裹运输性质不能免费接货
		 */
		Common.changeFreePickUpGoods(bean, ui,productVo);
		//发票标记
		CommonUtils.setInvoiceType(bean,bean.getBillTime());
		/**
		 * @author - wutao
		 * 当运输性质为DTD的时候，上面接货的选框自动勾选
		 * 【新需求】：取消门到门的限制
		 *  Common.setWhenTransportTypeEqDTDSetPickUpSelected(bean,ui);
		 */
		// 根据运输性质改变提货方式
		changePickUpMode(bean);	
		/**
		 * author: yangkang
		 * DMANA-4978  
		 * 新产品开发项目——FOSS支持新产品更改单
		 */
		bean.setModifyMark(true);
		
		//设置自提件提货方式
		Common.setEconomyReceiveMethod(bean,ui);		
		// 空运、偏线以及中转下线无法选择签收单返单
		Common.setReturnBill(bean, ui);
		// 偏线与空运不能选择预付费保密
		setSecretPrepaid(bean);
		
		//针对梯度保价添加的监听--206860
		gradInsuranceRateListener(bean);

		//清空目的站
		setTargetEmpty(bean);
		setSaveAndSubmitFalse(ui);
	}
	
	/**
	 * 
	 * 清空目的站
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-10-22 下午04:48:08
	 */
	private void setTargetEmpty(WaybillInfoVo bean) {
		
		String newValue = bean.getRfcSource();
		if (WaybillRfcConstants.CUSTOMER_REQUIRE.equals(newValue))
		{
			//根据新运输性质校验走货路径
			ShowPickupStationDialogAction action = new ShowPickupStationDialogAction();
			action.setInjectUI(ui);
			action.setLoadLine(bean);
		}else if(WaybillRfcConstants.INSIDE_REQUIRE.equals(newValue))
		{
			// 提货网点
			bean.setCustomerPickupOrgCode(null);
			// 提货网点名称
			bean.setCustomerPickupOrgName("");
			// 目的站名称
			bean.setTargetOrgCode("");
		}

		
	}

	/**
	 * 
	 * 偏线与空运不能选择预付费保密
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-11-8 上午08:30:46
	 */
	private void setSecretPrepaid(WaybillInfoVo bean) {
		WaybillInfoVo waybillVo = ui.getOriginWaybill();
		//原为预付费保密的可以取消；
		//原为非预付费保密的不可更改为预付费保密
		if(waybillVo.getSecretPrepaid()!= null && waybillVo.getSecretPrepaid()){
			ProductEntityVo productVo = bean.getProductCode();
			if (ProductEntityConstants.PRICING_PRODUCT_PARTIAL_LINE.equals(productVo.getCode())
					|| ProductEntityConstants.PRICING_PRODUCT_AIR_FREIGHT.equals(productVo.getCode())) {
				ui.getWaybillInfoPanel().getBillingPayPanel().getChbSecrecy().setSelected(false);
				ui.getWaybillInfoPanel().getBillingPayPanel().getChbSecrecy().setEnabled(false);
			} else {
				ui.getWaybillInfoPanel().getBillingPayPanel().getChbSecrecy().setEnabled(true);
			}
		}
	}

	/**
	 * 
	 * 空运、偏线以及中转下线无法选择签收单返单
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-11-7 上午11:09:08
	 */
	protected void setReturnBill(WaybillInfoVo bean) {
		ProductEntityVo productVo = bean.getProductCode();
		if (ProductEntityConstants.PRICING_PRODUCT_PARTIAL_LINE.equals(productVo.getCode())
				|| ProductEntityConstants.PRICING_PRODUCT_AIR_FREIGHT.equals(productVo.getCode())) {
			ui.getWaybillInfoPanel().getTransferPanel().getTransportInfoPanel().getCombReturnBillType().setEnabled(false);
			//设置返单类型默认值
			setReturnBillType(bean,ui.getWaybillInfoPanel().getTransferPanel().getTransportInfoPanel().getReturnBillTypeModel());
			// 将返单费用设置到其他费用表格中
			setOtherCharge(bean);
		} else {
			ui.getWaybillInfoPanel().getTransferPanel().getTransportInfoPanel().getCombReturnBillType().setEnabled(true);
		}
	}
	
	/**
	 * 
	 * 设置返单类型默认值
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-11-13 下午02:45:07
	 */
	public void setReturnBillType(WaybillInfoVo bean,DefaultComboBoxModel model) {
		for (int i = 0; i < model.getSize(); i++) {
			DataDictionaryValueVo vo=(DataDictionaryValueVo) model.getElementAt(i);
			if (WaybillConstants.NOT_RETURN_BILL.equals(
					vo.getValueCode())) {
				bean.setReturnBillType(vo);
			}
		}
	}
	

	/**
	 * 
	 * 根据运输性质的改变，改变提货方式
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-11-6 下午04:49:48
	 */
	private void changePickUpMode(WaybillInfoVo bean) {
		if(bean ==null){
			throw new WaybillValidateException("运单信息实体为空！");
		}
		ProductEntityVo productVo = bean.getProductCode();
		//DMANA-2604-liyongfei 更改运输性质优化
		//变更运输性质前的提货方式code
		String lastReceiveMethodCode = null;
		if(bean!=null && bean.getReceiveMethod()!=null){
			lastReceiveMethodCode = bean.getReceiveMethod().getValueCode();
		}
		//默认的提货方式
		DataDictionaryValueVo object = new DataDictionaryValueVo();
		//变更前的提货方式
		DataDictionaryValueVo method = new DataDictionaryValueVo();
		//变更前的提货方式在提货方式列表中是否存在
		boolean isExsit = false;
		//TODO 处理运输性质为精准空运的情况
		if (ProductEntityConstants.PRICING_PRODUCT_AIR_FREIGHT.equals(productVo.getCode())) {
			//如果运输性质为精准空运，则将合票方式和航班类型设置为可编辑
			setAirPropertyToTrue();
			//设置默认的提货方式code，消除空指针异常
			if(lastReceiveMethodCode==null){
				lastReceiveMethodCode = WaybillConstants.AIR_SELF_PICKUP;
			}
			DefaultComboBoxModel pikcModeModel = ui.getWaybillInfoPanel().getTransferPanel().getTransportInfoPanel().getPickModeModel();

			pikcModeModel.removeAllElements();
			List<DataDictionaryValueEntity> list = waybillService.queryPickUpGoodsAir();
			//DMANA-4923  FOSS开单提货方式隐藏“免费送货”
			if(ui.getOriginWaybill().getReceiveMethod().getValueCode()!=null && !WaybillConstants.DELIVER_FREE.equals(ui.getOriginWaybill().getReceiveMethod().getValueCode()) && !WaybillConstants.DELIVER_FREE_AIR.equals(ui.getOriginWaybill().getReceiveMethod())){
				for (int i = 0; i < list.size(); i++) {
					if(WaybillConstants.DELIVER_FREE.equals(list.get(i).getValueCode()) || WaybillConstants.DELIVER_FREE_AIR.equals(list.get(i).getValueCode())){
						list.remove(list.get(i));
					}
				}
			}
			//更改运输性质变更监听（内部要求），隐藏免费自提 【徐思衍-20160808-空运提货方式优化】
			if(ui.getOriginWaybill().getReceiveMethod()!=null && !WaybillConstants.AIR_PICKUP_FREE.equals(ui.getOriginWaybill().getReceiveMethod().getValueCode())){
				List<DataDictionaryValueEntity> dellist = new ArrayList<DataDictionaryValueEntity>();
				for(DataDictionaryValueEntity data : list) {
					if(WaybillConstants.AIR_PICKUP_FREE.equals(data.getValueCode())){
						dellist.add(data);
					}
				}
				list.removeAll(dellist);
			}
			for (DataDictionaryValueEntity dataDictionary : list) {
				DataDictionaryValueVo vo = new DataDictionaryValueVo();
				ValueCopy.valueCopy(dataDictionary, vo);
				pikcModeModel.addElement(vo);
				if(lastReceiveMethodCode.equals(vo.getValueCode())){//变更前的提货方式在列表中存在
					isExsit = true;
					method = vo;
				}
				if (WaybillConstants.AIR_SELF_PICKUP.equals(vo.getValueCode()))// 设置提货方式默认值
				{
					object = vo;
				}
			}
		} else {//处理非精准空运的情况
			//如果运输性质不为精准空运，则将合票方式和航班类型设置为不可编辑
			setAirPropertyToFalse(bean);
			//设置默认的提货方式code，消除空指针异常
			if(lastReceiveMethodCode==null){
				lastReceiveMethodCode = WaybillConstants.SELF_PICKUP;
			}
			DefaultComboBoxModel pikcModeModel = ui.getWaybillInfoPanel().getTransferPanel().getTransportInfoPanel().getPickModeModel();

			pikcModeModel.removeAllElements();
			List<DataDictionaryValueEntity> list = waybillService.queryPickUpGoodsHighWays();
			
			//精准包裹，隐藏“内部带货自提”和“内部带货送货”
			delInnerPickUp(productVo, list);
			
			//DMANA-4923  FOSS开单提货方式隐藏“免费送货”
			//合伙人还需要剔除内部带货送货送货上楼安装（家居） 2016年4月5日 11:52:38 葛亮亮
			if(ui.getOriginWaybill().getReceiveMethod().getValueCode()!=null && !WaybillConstants.DELIVER_FREE.equals(ui.getOriginWaybill().getReceiveMethod().getValueCode()) && !WaybillConstants.DELIVER_FREE_AIR.equals(ui.getOriginWaybill().getReceiveMethod())){
				for (int i = 0; i < list.size(); i++) {
					if(WaybillConstants.DELIVER_FREE.equals(list.get(i).getValueCode()) || WaybillConstants.DELIVER_FREE_AIR.equals(list.get(i).getValueCode())
					   ||((WaybillConstants.INNER_PICKUP.equals(list.get(i).getValueCode()) 
							    ||WaybillConstants.DELIVER_INNER_PICKUP.equals(list.get(i).getValueCode())
							    ||WaybillConstants.DELIVER_FLOOR.equals(list.get(i).getValueCode()))
							   &&BZPartnersJudge.IS_PARTENER)){
						list.remove(list.get(i));
						i--;
					}
					// 
					if(WaybillConstants.DELIVER_INNER_PICKUP.equals(list.get(i).getValueCode()) && !ui.isBatchWaybill() ){
							list.remove(list.get(i));
							i--;
					}else if(WaybillConstants.DELIVER_INNER_PICKUP.equals(list.get(i).getValueCode()) ){
						if(!(ProductEntityConstants.PRICING_PRODUCT_LONG_DISTANCE_FAST_FREIGHT.equals(productVo.getCode())
								|| ProductEntityConstants.PRICING_PRODUCT_SHORT_DISTANCE_FAST_FREIGHT.equals(productVo.getCode())
								|| ProductEntityConstants.PRICING_PRODUCT_LONG_DISTANCE_ROAD_FREIGHT.equals(productVo.getCode())
								|| ProductEntityConstants.PRICING_PRODUCT_SHORT_DISTANCE_ROAD_FREIGHT.equals(productVo.getCode()))){
							list.remove(list.get(i));
							i--;
						}
					}
				}
			}
			Common.delReceiveMethod(productVo, list);
			for (DataDictionaryValueEntity dataDictionary : list) {
				DataDictionaryValueVo vo = new DataDictionaryValueVo();
				ValueCopy.valueCopy(dataDictionary, vo);
				pikcModeModel.addElement(vo);
				if(lastReceiveMethodCode.equals(vo.getValueCode())){//变更前的提货方式在列表中存在
					isExsit = true;
					method = vo;
				}
				if (WaybillConstants.SELF_PICKUP.equals(vo.getValueCode()))// 设置提货方式默认值
				{
					object = vo;
				}
			}
		}
		//若变更前的提货方式存在，则设置为变更前的提货方式，否则设置为默认值
		if(isExsit){
			bean.setReceiveMethod(method);
		}else{
			bean.setReceiveMethod(object);
		}
		//校验提货方式等逻辑
		receiveMethodListener(bean);
	}
	
	/**
	 * 
	 * 如果运输性质为精准空运，则将合票方式和航班类型设置为可编辑
	 * @author 025000-FOSS-helong
	 * @date 2012-12-19 下午06:21:22
	 */
	private void setAirPropertyToTrue()
	{
		ui.getWaybillInfoPanel().getTransferPanel().getTransportInfoPanel().getCombFreightMethod().setEnabled(true);
		ui.getWaybillInfoPanel().getTransferPanel().getTransportInfoPanel().getCombPredictFlight().setEnabled(true);
		ui.getWaybillInfoPanel().getTransferPanel().getTransportInfoPanel().getTxtFlightShift().setEnabled(true);
		
		//ui.getWaybillInfoPanel().getGoodsPanel().getRdoA().setVisible(false);
		//ui.getWaybillInfoPanel().getGoodsPanel().getRdoB().setVisible(false);
		ui.getWaybillInfoPanel().getGoodsPanel().getCombGoodsType().setVisible(true);
		ui.getWaybillInfoPanel().getGoodsPanel().getLblGoodsType().setVisible(true);
		
	}
	
	/**
	 * 
	 * 如果运输性质为精准空运，则将合票方式和航班类型设置为不可编辑且将下拉框设置为空
	 * @author 025000-FOSS-helong
	 * @date 2012-12-19 下午06:21:22
	 */
	private void setAirPropertyToFalse(WaybillInfoVo bean)
	{
		ui.getWaybillInfoPanel().getTransferPanel().getTransportInfoPanel().getCombFreightMethod().setEnabled(false);
		ui.getWaybillInfoPanel().getTransferPanel().getTransportInfoPanel().getCombPredictFlight().setEnabled(false);
		ui.getWaybillInfoPanel().getTransferPanel().getTransportInfoPanel().getTxtFlightShift().setEnabled(false);

		
		
		//ui.getWaybillInfoPanel().getGoodsPanel().getRdoA().setVisible(true);
		//ui.getWaybillInfoPanel().getGoodsPanel().getRdoB().setVisible(true);
		if(BZPartnersJudge.IS_PARTENER){//是合伙人 则可更改货物类型
			ui.getWaybillInfoPanel().getGoodsPanel().getCombGoodsType().setVisible(true);
		}else{
			ui.getWaybillInfoPanel().getGoodsPanel().getCombGoodsType().setVisible(false);
		}
		ui.getWaybillInfoPanel().getGoodsPanel().getLblGoodsType().setVisible(false);
		
		// 航班类型
		setFlightNumberType(bean);
		// 合票方式
		setFreightMethod(bean);
		// 航班时间
		bean.setFlightShift("");
	}
	
	/**
	 * 
	 * 设置航班类型
	 * @author 025000-FOSS-helong
	 * @date 2012-12-19 下午09:16:51
	 */
	private void setFlightNumberType(WaybillInfoVo bean)
	{
		int size = ui.getWaybillInfoPanel().getTransferPanel().getTransportInfoPanel().getPredictFlightModel().getSize();
		for (int i = 0; i < size; i++) {
			DataDictionaryValueVo vo = new DataDictionaryValueVo();
			vo = (DataDictionaryValueVo) ui.getWaybillInfoPanel().getTransferPanel().getTransportInfoPanel().getPredictFlightModel().getElementAt(i);
			if (vo == null || vo.getValueCode() == null) {
				bean.setFlightNumberType(vo);
			}
		}
	}
	
	
//	/**
//	 * 
//	 * 设置退款类型
//	 * 
//	 * @author 025000-FOSS-helong
//	 * @date 2012-12-19 下午09:16:51
//	 */
//	private void setRefundType(WaybillInfoVo bean) {
//		int size = ui.getWaybillInfoPanel().getIncrementPanel().getRefundTypeModel().getSize();
//		for (int i = 0; i < size; i++) {
//			DataDictionaryValueVo vo = new DataDictionaryValueVo();
//			vo = (DataDictionaryValueVo) ui.getWaybillInfoPanel().getIncrementPanel().getRefundTypeModel().getElementAt(i);
//			if (vo == null || vo.getValueCode() == null) {
//				bean.setRefundType(vo);
//			}
//		}
//	}
	
	/**
	 * 
	 * 设置合票方式
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-12-19 下午09:16:51
	 */
	private void setFreightMethod(WaybillInfoVo bean) {
//		int size = ui.getWaybillInfoPanel().getTransferPanel().getTransportInfoPanel().getPredictFlightModel().getSize();
//		for (int i = 0; i < size; i++) {
//			DataDictionaryValueVo vo = (DataDictionaryValueVo) ui.getWaybillInfoPanel().getTransferPanel().getTransportInfoPanel().getPredictFlightModel().getElementAt(i);
//			if (vo == null || vo.getValueCode() == null) {
//				bean.setFreightMethod(vo);
//			}
//		}
	}
	/**
	 * 特殊增值服务监听
	 * 根据特殊增值服务改变提货方式 
	 * foss-254615-mabinliang
	 */
	private void specialValueAddedServiceTypeListener(WaybillInfoVo bean){
	
		if(ui.getOriginWaybill().getSpecialValueAddedServiceType()==null){
			if(bean.getSpecialValueAddedServiceType()!=null){
				MsgBox.showInfo(i18n.get("foss.module.pickup.changing.client.listener.WaybillInfoBindingListener.tip2"));
				bean.setSpecialValueAddedServiceType(ui.getOriginWaybill().getSpecialValueAddedServiceType());		
			}
		}
		//非特殊增值服务安装费自动隐藏
        if(bean.getSpecialValueAddedServiceType()!=null){
          if(bean.getSpecialValueAddedServiceType().getValueCode()==null||"".equals(bean.getSpecialValueAddedServiceType().getValueCode()))
          {
        	ui.incrementPanel.getBtnInstall().setVisible(false);
          }
        else{
        	ui.incrementPanel.getBtnInstall().setVisible(true);
           }
        }
		DataDictionaryValueVo dictionaryValueVo = bean
				.getSpecialValueAddedServiceType();
		if (dictionaryValueVo == null
				|| dictionaryValueVo.getValueCode() == null) {
			changePickUpMode(bean);	
			ui.getIncrementPanel().getBtnInstall().setEnabled(false);
			cleanOtherCharge();
		}else {
			// 根据特殊增值服务改变提货方式
			List<DataDictionaryValueEntity> list =  waybillService.querySpecialPickUp();				
			DefaultComboBoxModel specilModel = ui.getWaybillInfoPanel().getTransferPanel().getTransportInfoPanel().getPickModeModel();
			DefaultComboBoxModel specialtfrModel =ui.getWaybillInfoPanel().getTransferPanel().getTransferTabPanel().getTransferInfoPanel().getPickModeModel();
			specilModel.removeAllElements();
			specialtfrModel.removeAllElements();
			for (DataDictionaryValueEntity dataDictionary : list) {
							DataDictionaryValueVo vo = new DataDictionaryValueVo();
							ValueCopy.valueCopy(dataDictionary, vo);
							specilModel.addElement(vo);
							specialtfrModel.addElement(vo);
				}
			//清空目的站
			cleanTargetEmpty(bean);
		}
	/*	bean.setBeanState(WaybillConstants.WAYBILLINFOVO);
		//发票标记
		CommonUtils.setInvoiceType(bean,bean.getBillTime());
		// 内部带货
		innerPickup(bean);
		// 各种自提
		selfPickup(bean);
		String code = bean.getReceiveMethod().getValueCode();
		//删除超远派送费
		deleteVeryFarFee(code);
		
		if(!bean.getIsWholeVehicle()){
			//在已经选择了网点的情况下 修改提货方式 需要检查该网点是否支持该提货方式
			validateCustomerPointBySelfPickup(bean);
		}

		
		setSaveAndSubmitFalse(ui);
		
		//重新设置送货费
//		resetDeliveryGoodsFee(bean);
		bean.setHandDeliveryFee(new BigDecimal(0));
		//内部带货处理
	    Common.innerPickup(bean, ui, bean.getReceiveMethod().getValueCode());
*/			/**
		 * 添加提货方式改变的监听事件
		 * @author:218371-foss-zhaoyanjun
		 * @date:2014-12-13上午09:56
		 */
	//	addCombPickModeListener(bean);
	}
	/**
	 * 清理其他费用
	 * 
	 * @author 254615-mabinliang
	 * @date 2015-9-28
	 */
	public  void cleanOtherCharge() {
		List<OtherChargeVo> voList = new ArrayList<OtherChargeVo>();
		// 清空表格
		ui.incrementPanel.setChangeDetail(voList);
	}

	/**
	 * 
	 * （提货方式变更监听）
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-10-20 下午01:56:55
	 */
	private void receiveMethodListener(WaybillInfoVo bean) {
	
		if (bean.getReceiveMethod() != null) {
			
			String rfcType = bean.getRfcType().getValueCode();
			
			if (WaybillRfcConstants.CUSTOMER_CHANGE.equals(rfcType)) {
				if(WaybillConstants.INNER_PICKUP.equals(bean.getReceiveMethod().getValueCode())){
					ui.getWaybillInfoPanel().getTransferPanel().getTransportInfoPanel().getCombPickMode()
					.getModel().setSelectedItem(ui.getOriginWaybill().getReceiveMethod());
					throw new WaybillValidateException(i18n.get("foss.gui.changing.waybillInfoBindingListener.msgBox.pickupNotSupport"));
					
				}
			}
			
			//内部原因不收取更改费, 客户原因收
			String newValue = bean.getRfcSource();
			if (WaybillRfcConstants.CUSTOMER_REQUIRE.equals(newValue)) {
				//客户原因 更改、转运、返货 不支持 提货方式为 内部带货送货
				if(WaybillConstants.DELIVER_INNER_PICKUP.equals(bean.getReceiveMethod().getValueCode())){
					if (WaybillRfcConstants.CUSTOMER_CHANGE.equals(rfcType)
							|| WaybillRfcConstants.TRANSFER.equals(rfcType)
							|| WaybillRfcConstants.RETURN.equals(rfcType)) {
						ui.getWaybillInfoPanel().getTransferPanel().getTransportInfoPanel().getCombPickMode()
						.getModel().setSelectedItem(ui.getOriginWaybill().getReceiveMethod());
						throw new WaybillValidateException(i18n.get("foss.gui.changing.waybillInfoBindingListener.msgBox.customer.pickupNotSupport"));
					}
				}
				//货物状态为营业部库存出库的情况下
				if(bean.getGoodsStatus()!=null && !WaybillRfcConstants.RECEIVE_STOCK.equals(bean.getGoodsStatus().getValueCode())){
					if(!bean.getReceiveMethod() .equals(ui.getOriginWaybill().getReceiveMethod())){
						setChangeOtherCharge(bean);
					}else{
						removeChangeOtherCharge(bean);
					}
				}
			}
			/**
			 * Dmana-10888录入bean的状态
			 * @author:218371-foss-zhaoyanjun
			 * @date:2015-03-24上午11:23
			 */
			bean.setBeanState(WaybillConstants.WAYBILLINFOVO);
			//发票标记
			CommonUtils.setInvoiceType(bean,bean.getBillTime());
			// 内部带货
			innerPickup(bean);
			// 各种自提
			selfPickup(bean);
			String code = bean.getReceiveMethod().getValueCode();
			//删除超远派送费
			deleteVeryFarFee(code);
			
			if(!bean.getIsWholeVehicle()){
				//在已经选择了网点的情况下 修改提货方式 需要检查该网点是否支持该提货方式
				validateCustomerPointBySelfPickup(bean);
			}

			
			setSaveAndSubmitFalse(ui);
			
			//重新设置送货费
//			resetDeliveryGoodsFee(bean);
			bean.setHandDeliveryFee(BigDecimal.ZERO);
			//内部带货处理
			Common.innerPickup(bean, ui, bean.getReceiveMethod().getValueCode());
			/**
			 * 添加提货方式改变的监听事件
			 * @author:218371-foss-zhaoyanjun
			 * @date:2014-12-13上午09:56
			 */
			addCombPickModeListener(bean);
		}
		
		//修改了提货网点、提货方式时，送货费需要重新计算
		//bean.setHandDeliveryFee(null);
	}
	
	
	
	/**
	 * 删除超远派送费
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2013-8-15
	 */
	private void deleteVeryFarFee(String code)
	{
		JXTable table = ui.incrementPanel.getTblOther();
		WaybillOtherCharge model = (WaybillOtherCharge) table.getModel();
		List<OtherChargeVo> data = model.getData();
		if (data != null && !data.isEmpty()) {
			int i = 0;
			int j = 0;
			// 其他费用合计
			for (OtherChargeVo vo : data) {
				// 判断是否自提
				if (WaybillConstants.SELF_PICKUP.equals(code) 
						|| WaybillConstants.AIR_SELF_PICKUP.equals(code) 
						|| WaybillConstants.AIR_PICKUP_FREE.equals(code) 
						|| WaybillConstants.AIRPORT_PICKUP.equals(code) 
						|| WaybillConstants.INNER_PICKUP.equals(code)
						|| WaybillConstants.DELIVER_INNER_PICKUP.equals(code)
						|| WaybillConstants.DELIVER_FREE.equals(code) 
						|| WaybillConstants.DELIVER_FREE_AIR.equals(code)){
					//判断如果有超远派送费则从其他费用中删除
					if(PriceEntityConstants.PRICING_CODE_CCDDJS.equals(vo.getCode()))
					{
						j = i;
						break;
					}
				}
				
				i++;
			}
			if(j != 0)
			{
				//删除超远派送费
				data.remove(j);
				ui.incrementPanel.setChangeDetail(data);
			}
		}
	}

	/**
	 * 在已经选择了网点的情况下 修改提货方式 需要检查该网点是否支持该提货方式
	 * @param bean
	 */
	private void validateCustomerPointBySelfPickup(WaybillInfoVo bean) {
		//获得网点
		BranchVo customerPickupOrgCode = bean.getCustomerPickupOrgCode();
		//如果单子导入时在到达部门库存且提货方式为自提的时候就不进行校验232608
		if(bean.getWaybillDto().getWaybillEntity()!=null&&"SELF_PICKUP".equals(bean.getWaybillDto().getWaybillEntity().getReceiveMethod())
				&&bean.getStockStatus()!=null&&"DELIVERY_STOCK".equals(bean.getStockStatus().getResult())
				&&("DELIVER_INGA".equals(bean.getReceiveMethod().getValueCode())||"DELIVER_UP".equals(bean.getReceiveMethod().getValueCode())
						||"DELIVER_NOUP".equals(bean.getReceiveMethod().getValueCode())||"LARGE_DELIVER_UP".equals(bean.getReceiveMethod().getValueCode()))
				){
			return;
		}
		if(customerPickupOrgCode!=null){
			
			if (WaybillConstants.SELF_PICKUP.equals(bean.getReceiveMethod().getValueCode())
					|| WaybillConstants.INNER_PICKUP.equals(bean.getReceiveMethod().getValueCode())
					|| WaybillConstants.AIR_PICKUP_FREE.equals(bean.getReceiveMethod().getValueCode())
					|| WaybillConstants.AIRPORT_PICKUP.equals(bean.getReceiveMethod().getValueCode())
					|| WaybillConstants.AIR_SELF_PICKUP.equals(bean.getReceiveMethod().getValueCode())) {
				
				//不支持自提
				if(!FossConstants.YES.equals(customerPickupOrgCode.getPickupSelf())){
//					bean.setReceiveMethod(ui.getOriginWaybill().getReceiveMethod());
//					ui.getWaybillInfoPanel().getTransferPanel().getTransportInfoPanel().getCombPickMode().getModel().setSelectedItem(bean.getReceiveMethod());
					throw new WaybillValidateException(bean.getCustomerPickupOrgName()+i18n.get("foss.gui.changing.waybillInfoBindingListener.msgBox.pickupNotSupport"));
					
				}
			}else if (WaybillConstants.DELIVER_FREE.equals(bean.getReceiveMethod().getValueCode())
					|| WaybillConstants.DELIVER_STORAGE.equals(bean.getReceiveMethod().getValueCode())
					|| WaybillConstants.DELIVER_UP.equals(bean.getReceiveMethod().getValueCode())
					|| WaybillConstants.DELIVER_NOUP.equals(bean.getReceiveMethod().getValueCode())
					|| WaybillConstants.DELIVER_FREE_AIR.equals(bean.getReceiveMethod().getValueCode())
					|| WaybillConstants.DELIVER_NOUP_AIR.equals(bean.getReceiveMethod().getValueCode())
					|| WaybillConstants.DELIVER_UP_AIR.equals(bean.getReceiveMethod().getValueCode())
					|| WaybillConstants.DELIVER_INGA_AIR.equals(bean.getReceiveMethod().getValueCode())) {
				
				//不支持送货上门
				if(! FossConstants.YES.equals(customerPickupOrgCode.getDelivery())){
//					bean.setReceiveMethod(ui.getOriginWaybill().getReceiveMethod());
//					ui.getWaybillInfoPanel().getTransferPanel().getTransportInfoPanel().getCombPickMode().getModel().setSelectedItem(bean.getReceiveMethod());
					throw new WaybillValidateException(bean.getCustomerPickupOrgName()+i18n.get("foss.gui.changing.waybillInfoBindingListener.msgBox.pickupNotSupport"));
					
				}
			}
		}
	}
	

	/**
	 * 收货客户名称焦点监听事件
	 * @author 026123-foss-lifengteng
	 * @date 2013-1-7 上午8:31:07
	 */
	private void receiveCustomerNameListener(WaybillInfoVo bean) {
		// 客户名称
		String custName = StringUtil.defaultIfNull(bean.getReceiveCustomerName());
		// 客户名称为空则清空客户编码，设置发货联系人为可修改状态
		if ("".equals(custName)) {
			Common.noReceiveCustomerInfo(ui, bean);
		} else {
			// 封装查询条件
			CustomerQueryConditionDto dto = new CustomerQueryConditionDto();
			// 收货客户名称
			dto.setCustName(bean.getReceiveCustomerName());
			// 精确查询
			dto.setExactQuery(true);
			// 查询客户信息
			dto.setInvoiceDate(new Date());
			// 查询客户信息
			List<CustomerQueryConditionDto> contacts = waybillService.queryCustomerByCondition(dto);
			// 判断集合是否为空
			if (CollectionUtils.isNotEmpty(contacts)) {
				// 定义VO对象
				QueryMemberDialogVo memberVo = null;
				// 若只能一条记录时，则自动填充
				if (contacts.size() == 1) {
					memberVo = CommonUtils.convertToMemberVo(contacts).get(0);
				} else {
					// 创建弹出窗口
					QueryConsignerDialog dialog = new QueryConsignerDialog(contacts);
					// 剧中显示弹出窗口
					WindowUtil.centerAndShow(dialog);
					// 获得弹出窗口选择的值
					memberVo = dialog.getCustomerVo();
				}

				// 这里判空是为了防止选择一行记录未确定后直接关闭时出现的空对象
				if (memberVo == null) {
					return;
				}

				// 设置收货客户信息
				Common.setQueryReceiveCustomer(ui);
			} else {
				Common.noReceiveCustomerInfo(ui, bean);
			}
		}
	}

	/**
	 * 
	 * 提货方式-自提业务规则处理
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-12-4 下午03:25:42
	 */
	private void selfPickup(WaybillInfoVo bean) {
		String code = bean.getReceiveMethod().getValueCode();
		// 判断是否自提
		// 更改提货方式变更监听(内部要求、客户要求）--设置代理处自提为可编辑  【徐思衍-20160808-空运提货方式优化】
		if (WaybillConstants.SELF_PICKUP.equals(code)
//				|| WaybillConstants.AIR_SELF_PICKUP.equals(code)
				|| WaybillConstants.AIR_PICKUP_FREE.equals(code) || WaybillConstants.AIRPORT_PICKUP.equals(code)
				|| WaybillConstants.INNER_PICKUP.equals(code)|| WaybillConstants.DELIVER_INNER_PICKUP.equals(code)) {
			ui.incrementPanel.getTxtDeliveryCharge().setEnabled(false);
			bean.setDeliveryGoodsFee(BigDecimal.ZERO);
			bean.setDeliveryGoodsFeeCanvas("0");
			bean.setCalculateDeliveryGoodsFee(BigDecimal.ZERO);
		} else {
			ui.incrementPanel.getTxtDeliveryCharge().setEnabled(true);
		}
	}

	/**
	 * 
	 * 内部带货业务处理
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-12-4 下午03:23:55
	 */
	private void innerPickup(WaybillInfoVo bean) {

		// 判断是否内部带货自提、内部带货送货
		if (WaybillConstants.INNER_PICKUP.equals(bean.getReceiveMethod().getValueCode())
				||WaybillConstants.DELIVER_INNER_PICKUP.equals(bean.getReceiveMethod().getValueCode())) {
			//发票标记
			bean.setInvoiceTab(WaybillConstants.INVOICE_TYPE_02);
			bean.setInvoice(WaybillConstants.INVOICE_02);
            
			// 修改发货联人和收货联系人名称
			ui.getWaybillInfoPanel().getConsignerPanel().getTxtConsignerLinkMan().setEnabled(false);
			ui.getWaybillInfoPanel().getConsignerPanel().getLblConsignerLinkMan().setText(i18n.get("foss.gui.changing.waybillInfoBindingListener.consignerDept.label"));
			ui.getWaybillInfoPanel().getConsignerPanel().getBtnConsignerDept().setVisible(true);
			bean.setDeliveryCustomerContact("");// 发货联系人
			ui.getWaybillInfoPanel().getConsigneePanel().getTxtConsigneeLinkMan().setEnabled(false);
			ui.getWaybillInfoPanel().getConsigneePanel().getLblConsigneeLinkMan().setText(i18n.get("foss.gui.changing.waybillInfoBindingListener.consigneeDept.label"));
			ui.getWaybillInfoPanel().getConsigneePanel().getBtnConsigneeDept().setVisible(true);
			bean.setReceiveCustomerContact("");// 收货联系人
			// 金额清零
			resetZero(bean);
			
			bean.setReceiveMethodFlag(FossConstants.YES);
		} else {
			if(FossConstants.YES.equals(bean.getReceiveMethodFlag()))
			{
				// 修改发货联人和收货联系人名称
				ui.getWaybillInfoPanel().getConsignerPanel().getTxtConsignerLinkMan().setEnabled(true);
				ui.getWaybillInfoPanel().getConsignerPanel().getLblConsignerLinkMan().setText(i18n.get("foss.gui.changing.waybillInfoBindingListener.consignerLinkMan.label"));
				ui.getWaybillInfoPanel().getConsignerPanel().getBtnConsignerDept().setVisible(false);
				bean.setDeliveryCustomerContact("");// 发货联系人
				ui.getWaybillInfoPanel().getConsigneePanel().getTxtConsigneeLinkMan().setEnabled(true);
				ui.getWaybillInfoPanel().getConsigneePanel().getLblConsigneeLinkMan().setText(i18n.get("foss.gui.changing.waybillInfoBindingListener.consigneeLinkMan.label"));
				ui.getWaybillInfoPanel().getConsigneePanel().getBtnConsigneeDept().setVisible(false);
				bean.setReceiveCustomerContact("");// 收货联系人
				// 金额复原（重新生成金额）
				/**
				 * 将 recover()增加库存状态的参数
				 * @author:218371-foss-zhaoyanjun
				 * @date:2014-12-25上午08:33
				 */
				if(bean.getStockStatus()==null){
					recover(null);
				}else{
					recover(bean.getStockStatus().getResult());
					//修复提货方式改为非内部带货时，还原增值服务费和燃油附加费 start
					//查询增值服务费和燃油附加费
					List<ValueAddDto> list = waybillService.queryValueAddPriceList(CommonUtils.getQueryOtherChargeParam(null));
					List<OtherChargeVo> voList = CommonUtils.getOtherChargeList(list);
					if (voList != null) {
						JXTable otherTable = ui.incrementPanel.getTable();
						WaybillOtherCharge model = (WaybillOtherCharge) otherTable.getModel();
						model.setData(voList);
						// 刷新表格数据
						model.fireTableDataChanged();
					}
					//修复提货方式改为非内部带货时，还原增值服务费和燃油附加费 end
				}
				bean.setReceiveMethodFlag(FossConstants.NO);
			}
		}
	
	}

	/**
	 * 
	 * 不是内部带货则恢复编辑状态
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-12-5 下午08:22:45
	 */
	private void recover(String result) {
		ui.incrementPanel.getTxtPackCharge().setEnabled(true);// 包装费
		ui.incrementPanel.getTxtCashOnDelivery().setEnabled(true);// 代收货款
		ui.incrementPanel.getTxtServiceCharge().setEnabled(true);// 装卸费
		ui.incrementPanel.getTxtDeliveryCharge().setEnabled(true);// 送货费
		/**
		 * 按DEFECT-6350要求，改变保价的编辑状态为：内部更改在货物出库后，未到达最终部门前，都不可以更改保价
		 * @author:218371-foss-zhaoyanjun
		 * @date:2014-12-24下午19:14
		 */
		if(WaybillRfcConstants.RECEIVE_STOCK.equals(result)){
			ui.incrementPanel.getTxtInsuranceValue().setEnabled(true);// 保价声明价
		}else{
			ui.incrementPanel.getTxtInsuranceValue().setEnabled(false);
		}
		ui.getWaybillInfoPanel().getBasicPanel().getChbExhibitCargo().setEnabled(false);// 设置为不可编辑
		ui.incrementPanel.getCombRefundType().setEnabled(true);// 退款类型
		WaybillInfoVo waybillVo = ui.getOriginWaybill();
		//原为预付费保密的可以取消；
		//原为非预付费保密的不可更改为预付费保密
		if(waybillVo.getSecretPrepaid()!= null && waybillVo.getSecretPrepaid()){
			ui.billingPayPanel.getChbSecrecy().setEnabled(true);// 预付费保密
		}
		ui.getWaybillInfoPanel().getTransferPanel().getTransportInfoPanel().getCombReturnBillType().setEnabled(true);// 返单类型
		ui.incrementPanel.getTable().setEnabled(true);// 其他费用表格
		ui.incrementPanel.getBtnAdd().setEnabled(true);// 新增其他费用
		ui.incrementPanel.getBtnDelete().setEnabled(true);// 删除其他费用
		//ui.incrementPanel.getBtnInstall().setEnabled(true);
	}

	/**
	 * 
	 * 内部带货，需要将金额相关全部清零
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-11-13 下午06:22:39
	 */
	private void resetZero(WaybillInfoVo bean) {
		// 增值服务面板
		bean.setInsuranceAmount(BigDecimal.ZERO);// 保险声明价
		bean.setCodAmount(BigDecimal.ZERO);// 代收货款
		bean.setPackageFee(BigDecimal.ZERO);// 包装费
		bean.setDeliveryGoodsFee(BigDecimal.ZERO);// 送货费
		bean.setServiceFee(BigDecimal.ZERO);// 装卸费
		bean.setPickupFee(BigDecimal.ZERO);// 接货费
		bean.setOtherFee(BigDecimal.ZERO);// 其他费用合计
		bean.setAccountName("");// 收款人
		bean.setAccountCode("");// 收款账号

		ui.incrementPanel.getTxtPackCharge().setEnabled(false);// 包装费
		ui.incrementPanel.getTxtCashOnDelivery().setEnabled(false);// 代收货款
		ui.incrementPanel.getTxtServiceCharge().setEnabled(false);// 装卸费
		ui.incrementPanel.getTxtDeliveryCharge().setEnabled(false);// 送货费
		ui.incrementPanel.getTxtInsuranceValue().setEnabled(false);// 保价声明价
		ui.getWaybillInfoPanel().getBasicPanel().getChbExhibitCargo().setEnabled(false);// 设置为不可编辑
		ui.incrementPanel.getCombRefundType().setEnabled(false);// 退款类型
		ui.billingPayPanel.getChbSecrecy().setEnabled(false);// 预付费保密
		ui.getWaybillInfoPanel().getTransferPanel().getTransportInfoPanel().getCombReturnBillType().setEnabled(false);// 返单类型
		ui.incrementPanel.getTable().setEnabled(false);// 其他费用表格
		ui.incrementPanel.getBtnAdd().setEnabled(false);// 新增其他费用
		ui.incrementPanel.getBtnDelete().setEnabled(false);// 删除其他费用
		//ui.incrementPanel.getBtnInstall().setEnabled(false);

		
		// 计费付款面板
		bean.setTransportFee(BigDecimal.ZERO);// 公布价运费
		bean.setValueAddFee(BigDecimal.ZERO);// 增值服务费
		bean.setPromotionsFee(BigDecimal.ZERO);// 优惠合计
		bean.setPrePayAmount(BigDecimal.ZERO);// 预付金额
		bean.setToPayAmount(BigDecimal.ZERO);// 到付金额
		bean.setHandWriteMoney(BigDecimal.ZERO);// 手写现付金额
		bean.setTotalFee(BigDecimal.ZERO);

		// 画布
		bean.setBillWeight(BigDecimal.ZERO);// 计费重量
		bean.setUnitPrice(BigDecimal.ZERO);// 费率
		bean.setTransportFeeCanvas("0");// 公布价运费
		bean.setInsuranceAmountCanvas("0");// 保价声明
		bean.setInsuranceRate(BigDecimal.ZERO);// 保价费率
		bean.setInsuranceFee(BigDecimal.ZERO);// 保价费

		bean.setCodAmountCanvas("0");// 代收货款
		bean.setCodRate(BigDecimal.ZERO);// 代收费率
		bean.setCodFee(BigDecimal.ZERO);// 代收手续费

		bean.setPickUpFeeCanvas("0");// 接货费
		bean.setDeliveryGoodsFeeCanvas("0");// 送货费
		bean.setPackageFeeCanvas("0");// 包装费
		bean.setServiceFeeCanvas("0");// 装卸费

		bean.setOtherFeeCanvas("0");// 其他费用
		//修复提货方式改为非内部带货时，还原增值服务费和燃油附加费 start
				JXTable otherTable = ui.incrementPanel.getTable();
				WaybillOtherCharge model = (WaybillOtherCharge) otherTable.getModel();
				model.setData(null);
				// 刷新表格数据
				model.fireTableDataChanged();
				//修复提货方式改为非内部带货时，还原增值服务费和燃油附加费 end
		bean.setPromotionsFeeCanvas("0");// 优惠合计
		bean.setTotalFeeCanvas("0");// 总费用
	}

	/**
	 * 
	 * （重量联动监听）
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-10-24 下午05:09:48
	 */
	private void goodsWeightTotalListener(WaybillInfoVo bean) {
		vehicleDirect(bean);
		setSaveAndSubmitFalse(ui);
		String result=CommonUtils.promptGoodsWeightTotal(bean);
		/**
		 * 如果校验不正常，提示
		 */
		if(!WaybillConstants.SUCCESS.equals(result))
		{
			MsgBox.showInfo(result);
		}
		
		//PBP-1657 2016年5月12日 09:39:27 邹胜利
		if(BZPartnersJudge.IS_PARTENER)
		{
			//原来重量
			BigDecimal goodsWeightTotalLast = bean.getWaybillDto().getWaybillEntity().getGoodsWeightTotal() != null ? bean.getWaybillDto().getWaybillEntity().getGoodsWeightTotal() : BigDecimal.ZERO;
			//当前重量
			BigDecimal goodsWeightTotalCur = bean.getGoodsWeightTotal() != null ? bean.getGoodsWeightTotal() : BigDecimal.ZERO;
			if(goodsWeightTotalCur.compareTo(goodsWeightTotalLast)<0){
				bean.setGoodsWeightTotal(bean.getWaybillDto().getWaybillEntity().getGoodsWeightTotal());
				ui.getWaybillInfoPanel() .getGoodsPanel().getTxtWeight().requestFocus();
				MsgBox.showInfo(i18n.get("foss.gui.creating.calculateAction.exception.GoodsWeightTotalGreater"));
				return;
			}			
		}else{
			//TODO 强制设置B货
			// setGoodsTypeB(bean);
			 /**
			  * Dmana-9885根据巨商汇或阿里巴巴传来的重量进行判断
			  * @author:218371-foss-zhaoyanjun
			  * @date:2015-02-03
			  */
			 if(WaybillConstants.GIANT_SINK.equals(bean.getOrderChannel())
				||WaybillConstants.ALIBABA.equals(bean.getOrderChannel())){
				 Common.specialChannelFreightWeight(bean);
			 }
		}
		//针对梯度保价添加的监听--206860		
		gradInsuranceRateListener(bean);

		// foss 343617 zhaoyiqing 20160913
		// 如果是精准包裹，修改重量体积时将上次计算送货费置为0，避免校验时送货费不能比原来低的问题。
		if (bean != null && bean.getFinalProductCode() != null &&
				StringUtil.equals(bean.getFinalProductCode().getCode(), ProductEntityConstants.PRICING_PRODUCT_PCP)){
			bean.setCalculateDeliveryGoodsFee(BigDecimal.ZERO);
		}

	}

	/**
	 * 
	 * （体积联动监听）
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-10-24 下午05:09:44
	 */
	private void goodsVolumeTotalListener(WaybillInfoVo bean) {
		vehicleDirect(bean);// 判断是否需要大车直送
		isValueGoods(bean);// 判断是否贵重物品

		setSaveAndSubmitFalse(ui);
		String result=CommonUtils.promptGoodsVolumeTotal(bean);
		/**
		 * 如果校验不正常，提示
		 */
		if(!WaybillConstants.SUCCESS.equals(result))
		{
			MsgBox.showInfo(result);
		}
		//PBP-1657 2016年5月12日 13:42:38 邹胜利
		if(BZPartnersJudge.IS_PARTENER)
		{
			//原来体积
			BigDecimal goodsVolumeTotalLast = bean.getWaybillDto().getWaybillEntity().getGoodsVolumeTotal() != null ? bean.getWaybillDto().getWaybillEntity().getGoodsVolumeTotal() : BigDecimal.ZERO;
			//当前体积
			BigDecimal goodsVolumeTotalCur = bean.getGoodsVolumeTotal() != null ? bean.getGoodsVolumeTotal() : BigDecimal.ZERO;
			if(goodsVolumeTotalCur.compareTo(goodsVolumeTotalLast)<0){
				bean.setGoodsVolumeTotal(bean.getWaybillDto().getWaybillEntity().getGoodsVolumeTotal());
				ui.getWaybillInfoPanel() .getGoodsPanel().getTxtVolume().requestFocus();
				MsgBox.showInfo(i18n.get("foss.gui.creating.calculateAction.exception.GoodsVolumeTotalGreater"));
				return;
			}			
		}else{
			/**
			  * Dmana-9885根据巨商汇传来的体积进行判断
			  * @author:218371-foss-zhaoyanjun
			  * @date:2015-02-03
			  */
			 if(WaybillConstants.GIANT_SINK.equals(bean.getOrderChannel())
				||WaybillConstants.ALIBABA.equals(bean.getOrderChannel())){
				 Common.specialChannelFreightVolume(bean);
			 }
		}
		//针对梯度保价添加的监听--206860
		gradInsuranceRateListener(bean);

		// foss 343617 zhaoyiqing 20160913
		// 如果是精准包裹，修改重量体积时将上次计算送货费置为0，避免校验时送货费不能比原来低的问题。
		if (bean != null && bean.getFinalProductCode() != null &&
				StringUtil.equals(bean.getFinalProductCode().getCode(), ProductEntityConstants.PRICING_PRODUCT_PCP)){
			bean.setCalculateDeliveryGoodsFee(BigDecimal.ZERO);
		}
	}

	/**
	 * 
	 * （大车直送）
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-10-24 下午06:17:25
	 */
	private void vehicleDirect(WaybillInfoVo bean) {

		if (!bean.getCarDirectDelivery()) {
			Boolean bool = waybillService.isVehicleDirect(bean.getGoodsWeightTotal().toString(), bean.getGoodsVolumeTotal().toString());
			if (bool) {
				if (JOptionPane.YES_OPTION == JOptionPane.showConfirmDialog(ui, i18n.get("foss.gui.changing.waybillInfoBindingListener.confirmDialog.vehicleDirect"), i18n.get("foss.gui.changing.waybillRFCUI.common.query"), JOptionPane.YES_NO_OPTION)) {
					ui.getWaybillInfoPanel().getGoodsPanel().getChbCarThrough().setSelected(true);
					ui.getWaybillInfoPanel().getGoodsPanel().getChbCarThrough().setEnabled(true);
				}
			}
		}
	}

	/**
	 * 
	 * （件数事件监听）
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-10-25 上午10:14:42
	 */
	private void goodsQtyTotalListener(WaybillInfoVo bean, Object oldValue, Object newValue) {
		isValueGoods(bean);// 是否贵重物品
		packPieces(bean,
				oldValue == null?0:Integer.valueOf(oldValue.toString()),
				newValue == null?0:Integer.valueOf(newValue.toString()));// 设置包装纸默认值

		//打开修改件数dialog
		showChangeGoodsQtyDialog(bean);
		setSaveAndSubmitFalse(ui);
		//TODO 强制设置B货
		 //setGoodsTypeB(bean);
	}

	/**
	 *打开修改件数的窗口
	 */
	private void showChangeGoodsQtyDialog(WaybillInfoVo bean) {
		ui.getOriginWaybill();
		// 创建弹出窗口
		ChangeGoodsQtyDialog dialog = new ChangeGoodsQtyDialog(bean, ui );
		// 剧中显示弹出窗口
		WindowUtil.centerAndShow(dialog);
	}

	/**
	 * 
	 * （默认货物多少件就有多少纸包装）
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-10-29 上午11:08:59
	 */
	private void packPieces(WaybillInfoVo bean, int oldValue, int newValue) {
		int disValue = newValue - oldValue;
		if(disValue >= 0 || bean.getPaper() >= disValue){
			// DEFECT-689 排除paper<0的情况
			if((bean.getPaper() + disValue) > 0){
				bean.setPaper(bean.getPaper() + disValue);
			}
		}else{
			bean.setPaper(newValue);
			bean.setWood(Integer.valueOf(0));// 木
			bean.setFibre(Integer.valueOf(0));// 纤
			bean.setSalver(Integer.valueOf(0));// 托
			bean.setMembrane(Integer.valueOf(0));// 膜
			
			//任何时候只要setWood 为0 都必须调用下面三个方法
			unsetWaybillPanelVoForWoodenPack(bean);
			unsetStorageMatterForWoodenPack(bean);
			unsetWoodenPackFee(bean);
		}
		
	}
	/**
	 * 
	 * 清除打木架/木箱的费用
	 * 
	 * @author foss-sunrui
	 * @date 2013-2-1 下午2:31:33
	 * @param bean
	 * @see
	 */
	private void unsetWoodenPackFee(WaybillPanelVo bean) {
		bean.setPackageFee(BigDecimal.ZERO);
		bean.setCalculatedPackageFee(BigDecimal.ZERO);
		bean.setStandCharge(BigDecimal.ZERO);
		bean.setBoxCharge(BigDecimal.ZERO);
		//zxy 20131210 ISSUE-4391 DEFECT-539 start 新增:清除打木托费用
		bean.setSalverGoodsCharge(BigDecimal.ZERO);//打木托费用
		bean.setSubPreSalverCharge(true);//zxy 20131210 ISSUE-4391 DEFECT-531 设置木托费已清除标志
		//zxy 20131210 ISSUE-4391 DEFECT-539 start 新增:清除打木托费用
	}
	
	/**
	 * 
	 * 清除运单VO中的木架信息
	 * 
	 * @author 025000-FOSS-helong
	 * @throws InvocationTargetException
	 * @throws IllegalAccessException
	 * @date 2012-11-5 上午08:24:15
	 */
	private void unsetWaybillPanelVoForWoodenPack(WaybillInfoVo bean) {
		bean.setStandGoodsNum(null);// 打木架货物件数
		bean.setStandRequirement(null);// 代打木架要求
		bean.setStandGoodsSize(null);// 打木架货物尺寸
		bean.setStandGoodsVolume(null);// 打木架货物体积
		bean.setBoxGoodsNum(null);// 打木箱货物件数
		bean.setBoxRequirement(null);// 代打木箱要求
		bean.setBoxGoodsSize(null);// 打木箱货物尺寸
		bean.setBoxGoodsVolume(null);// 打木箱货物体积
		//zxy 20131210 ISSUE-4391 DEFECT-539 start 新增:清除打木托
		bean.setSalverGoodsNum(null);//打木托件数
		bean.setSalverRequirement(null);//打木托要求
		Common.refreshChangeHisLabeledPackageType(bean);
		Common.refreshChangeHisLabeledWoodenType(bean);//打木箱木架流水号取消勾选
		//zxy 20131210 ISSUE-4391 DEFECT-539 end 新增:清除打木托
	}

	
	/**
	 * 
	 * （保险声明价值监听）
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-10-25 上午11:12:48
	 */
	private void insuranceAmountListener(WaybillInfoVo bean) {
		isValueGoods(bean);// 是否贵重物品

		bean.setInsuranceAmountCanvas(bean.getInsuranceAmount().toString());
		setSaveAndSubmitFalse(ui);
		
		//zxy 20140101 MANA-409 start 新增:限制非月结客户开单0保价
		//1非月结客户无订单发货,2非月结客户通过内部渠道（400、官网、营业部下单） 保价声明价值等于0则抛出异常
		if (null == bean.getReceiveMethod()) {
			// 抛出异常信息
			throw new WaybillSubmitException(i18n.get("foss.gui.creating.listener.Waybill.exception.ReceiveMethodNotNull"));
		}
		/**
		 * 280747
		 * zhuxue
		 */
		//报价声明价值
		BigDecimal insuranceAmount =bean.getInsuranceAmount();
		// 如果内部带货则不用判断保价声明价值
		if (!WaybillConstants.INNER_PICKUP.equals(bean.getReceiveMethod().getValueCode())) {
			//保价声明价值小于等于0
			if(insuranceAmount == null || insuranceAmount.compareTo(BigDecimal.ZERO) <= 0){
				//非月结客户
				if(bean.getChargeMode() == null || !bean.getChargeMode()){
					//订单号为空
					MsgBox.showInfo(i18n.get("foss.gui.creating.listener.Waybill.exception.noMonthEndInsuranceZero2"));
				}else{
					MsgBox.showInfo(i18n.get("foss.gui.creating.listener.Waybill.exception.noMonthEndInsuranceZero3"));
				}
			}
		}
		//zxy 20140101 MANA-409 end 新增:限制非月结客户开单0保价
		
//		if(bean.getIsWholeVehicle()){
			//获取费率范围
			String yOrN =Common.getInsuranceRate(bean);
			
			if(yOrN.equals(FossConstants.YES)){
				ui.incrementPanel.getTxtInsuranceRate().setEnabled(true);
			}else{
				ui.incrementPanel.getTxtInsuranceRate().setEnabled(false);
			}
//		}
		/**
		 * 根据“至尊宝”判断，若修改保费小于50000时，删除“至尊宝冲减”
		 * @author:218371-foss-zhaoyanjun
		 * @date:2015-04-15上午09:39
		 */
		judgeZhiZunBao(bean);
		//针对梯度保价添加的监听--206860
		gradInsuranceRateListener(bean);
	}

	/**
	 * 
	 * （根据重量、件数、保价判断是否贵重物品）
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-10-25 上午11:07:50
	 */
	private void isValueGoods(WaybillInfoVo bean) {
		if (!ProductEntityConstants.PRICING_PRODUCT_FULL_VEHICLE.equals(bean.getProductCode().getCode())) {
			Boolean bool = false;
			bool = waybillService.isValueGoods(bean.getGoodsName(), bean.getGoodsQtyTotal().intValue(), bean.getGoodsVolumeTotal().toString(), bean.getInsuranceAmount().toString());
			if (bool) {
				ui.getWaybillInfoPanel().getGoodsPanel().getChbValuable().setSelected(true);
				ui.getWaybillInfoPanel().getGoodsPanel().getChbValuable().setEnabled(false);
			} else {
				ui.getWaybillInfoPanel().getGoodsPanel().getChbValuable().setSelected(false);
				ui.getWaybillInfoPanel().getGoodsPanel().getChbValuable().setEnabled(true);
			}
		}
	}
	
	/**
	 * 
	 * 贵重物品事件监听
	 * @author 025000-FOSS-helong
	 * @date 2012-12-13 上午11:46:48
	 */
	private void preciousGoodsListener(WaybillInfoVo bean)
	{
		Boolean bool = bean.getPreciousGoods();
		if (bool) {
			String remark = bean.getTransportationRemark();
			// BUG-57555 贵重物品 显示的优先级最高 
			bean.setTransportationRemark(i18n.get("foss.gui.changing.waybillInfoBindingListener.valuableGoods.label") + ";" + remark);
			ui.getWaybillInfoPanel().getGoodsPanel().getChbValuable().setSelected(true);
		}else
		{
			String remark = bean.getTransportationRemark();
			remark = remark.replace(i18n.get("foss.gui.changing.waybillInfoBindingListener.valuableGoods.label")+";", "");
			remark = remark.replace(i18n.get("foss.gui.changing.waybillInfoBindingListener.valuableGoods.label"), "");
			bean.setTransportationRemark(remark);
			ui.getWaybillInfoPanel().getGoodsPanel().getChbValuable().setSelected(false);
		}
	}

	/**
	 * 
	 * 大车直送事件监听
	 * @author 025000-FOSS-helong
	 * @date 2013-1-9 下午05:55:20
	 */
	private void carDirectDeliveryListener(WaybillInfoVo bean){
		Boolean bool = bean.getCarDirectDelivery();
		if (bool) {
			String remark = bean.getTransportationRemark();
			bean.setTransportationRemark(remark + i18n.get("foss.gui.changing.waybillInfoBindingListener.chbCarThrough.laber")+";");
		}else
		{
			String remark = bean.getTransportationRemark();
			remark = remark.replace(i18n.get("foss.gui.changing.waybillInfoBindingListener.chbCarThrough.laber")+";", "");
			remark = remark.replace(i18n.get("foss.gui.changing.waybillInfoBindingListener.chbCarThrough.laber"), "");
			bean.setTransportationRemark(remark);
		}
	
	}

	/**
	 * 
	 * （尺寸事件监听）
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-10-29 上午08:53:50
	 */
	private void goodsSizeListener(WaybillInfoVo bean) {

		if (bean.getGoodsSize() != null && !"".equals(bean.getGoodsSize())) {
			if (NumberValidate.checkIsGoodsSize(bean.getGoodsSize())) {
				//重新计算体积
				calculateVolume(bean);
				
				//PBP-1657 2016年5月12日 11:24:50 邹胜利
				if(BZPartnersJudge.IS_PARTENER){		
					try{
						//防止开单无尺寸，反写空指针情况--zoushengli
						if(StringUtils.isEmpty(bean.getGoodsSize())){
							bean.setGoodsSize("");
							ui.getWaybillInfoPanel() .getGoodsPanel().getTxtSize().requestFocus();
							return;
						}
						ScriptEngineManager manager = new ScriptEngineManager();
						ScriptEngine engine = manager.getEngineByName("JavaScript");
						//当前修改后尺寸
						Object tmpGoodsSizeCur = engine.eval(bean.getGoodsSize());
						BigDecimal goodsSizeCur = new BigDecimal(tmpGoodsSizeCur.toString());
						
						if(null ==goodsSizeCur || goodsSizeCur.compareTo(BigDecimal.ZERO) == 0){
							bean.setGoodsSize("");
							ui.getWaybillInfoPanel() .getGoodsPanel().getTxtSize().requestFocus();
							return;
						}
					}catch (ScriptException e) {
						LOG.error(e.getMessage(), e);
						MsgBox.showInfo(i18n.get("foss.gui.changing.waybillInfoBindingListener.msgBox.goodsSizeException") + e.getMessage());
					}
			   }else{
				   /**
				    * Dmana-9885根据巨商汇传来的体积进行判断
					 * @author:218371-foss-zhaoyanjun
					 * @date:2015-02-03
					 */
					if(WaybillConstants.GIANT_SINK.equals(bean.getOrderChannel())
					   ||WaybillConstants.ALIBABA.equals(bean.getOrderChannel())){
					   Common.specialChannelFreightVolume(bean);
				    }
			   }
			} else {
				MsgBox.showInfo(i18n.get("foss.gui.changing.waybillInfoBindingListener.msgBox.goodsSizeListener"));
			}
		}
	}

	/**
	 * 
	 * 根据传入的尺寸参数计算体积
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-11-12 下午03:53:39
	 */
	private void calculateVolume(WaybillInfoVo bean) {
		ScriptEngineManager manager = new ScriptEngineManager();
		ScriptEngine engine = manager.getEngineByName("JavaScript");
		try {
			Object result = engine.eval(bean.getGoodsSize());
			BigDecimal bigDecimal = new BigDecimal(result.toString());
			bigDecimal = bigDecimal.setScale(NumberConstants.NUMBER_3, BigDecimal.ROUND_HALF_UP);
			BigDecimal m = new BigDecimal(WaybillConstants.VOLUME_M);// 将厘米转换成米
			bigDecimal = bigDecimal.divide(m);
			bigDecimal = bigDecimal.setScale(2, BigDecimal.ROUND_HALF_UP);// 四舍五入
			// 四舍五入后如果变为0.00，那么需要给成默认的0.01，以免丢失体积
			if (bigDecimal.compareTo(BigDecimal.ZERO)==0) {
				bigDecimal = new BigDecimal("0.01");
			}
			BigDecimal upLimit = new BigDecimal(WaybillConstants.VOLUME_UPLIMIT);
			if (bigDecimal.compareTo(upLimit) > 0) {
				MsgBox.showInfo(i18n.get("foss.gui.changing.waybillInfoBindingListener.msgBox.overVolumeUpLimit") + WaybillConstants.VOLUME_UPLIMIT);
				bean.setGoodsSize("");
			} else if (BigDecimal.ZERO.compareTo(bigDecimal) > 0) {
				MsgBox.showInfo(i18n.get("foss.gui.changing.waybillInfoBindingListener.msgBox.lessVolumeZero"));
				bean.setGoodsSize("");
			} else {	
				//当输入尺寸算出来的体积大原体积时，直接为体积赋值，当小于原体积时，直营单直接赋值，合伙人的运单反写开单时的体积及尺寸
				bean.setGoodsVolumeTotal(bigDecimal);
				if(BZPartnersJudge.IS_PARTENER){
					//因为在合伙人更改单时可以手工调整体积，在改单时，体积只能改大不能改小，所以判断如果按照尺寸算出的体积大于原来的体积则修改，否则还是原来的体积
					BigDecimal goodsVolumeTotalLast = bean.getWaybillDto().getWaybillEntity().getGoodsVolumeTotal(); //原来体积
					String goodsSizeLast = bean.getWaybillDto().getWaybillEntity().getGoodsSize(); //原来尺寸
					if(bigDecimal.compareTo(goodsVolumeTotalLast) < 0){
						//反写体积尺寸--zoushengli
						bean.setGoodsVolumeTotal(goodsVolumeTotalLast);
						bean.setGoodsSize(goodsSizeLast);
						MsgBox.showInfo(i18n.get("foss.gui.creating.calculateAction.exception.GoodsSizeTotalGreater"));
					}
				}
				goodsVolumeTotalListener(bean);//修改体积后，应有提示是否大车直运，保价费率是否改变
			}
			setSaveAndSubmitFalse(ui);
		} catch (ScriptException e) {
			LOG.error(e.getMessage(), e);
			MsgBox.showInfo(i18n.get("foss.gui.changing.waybillInfoBindingListener.msgBox.goodsSizeException") + e.getMessage());
		}
	}
	
	
	/**
	 * 
	 * （包装-纸事件监听）
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-10-29 上午11:48:26
	 */
	private void paperListener(WaybillInfoVo bean) {
		getPackage(bean);
	}
	
	/**
	 * 
	 * 代打木架取消清除储运事项
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-11-2 上午08:44:42
	 */
	private void unsetStorageMatterForWoodenPack(WaybillPanelVo bean) {
		cleanRemark(bean,i18n.get("foss.gui.changing.woodYokeEnterAction.standGoods"));
		cleanRemark(bean,i18n.get("foss.gui.changing.woodYokeEnterAction.boxGoods"));
		cleanRemark(bean,i18n.get("foss.gui.changing.woodYokeEnterAction.salverGoods"));
	}
	
	/**
	 * 
	 * 新增或替换储运事项中打木架、大木箱信息
	 * @author 025000-FOSS-helong
	 * @date 2013-3-11 下午07:21:56
	 */
	private void cleanRemark(WaybillPanelVo bean , String key)
	{
		if(StringUtils.isEmpty(bean.getTransportationRemark()))
		{
			return;
		}
		//将储运事项字符串解析成数据组
		String[] remark = bean.getTransportationRemark().split(";");
		StringBuffer transportationRemark = new StringBuffer();
		for(int i=0;i<remark.length;i++)
		{
			//获取储运事项中的某段数据
			String oldData = remark[i].trim();
			if(StringUtils.isNotEmpty(oldData))
			{
				//判断储运事项中的这段数据是否存在与传入参数一致的数据，存在则用最新的信息替换
				if(oldData.indexOf(StringUtil.defaultIfNull(key.trim())) != -1)
				{
					continue;
				}
				transportationRemark.append(remark[i]);
				transportationRemark.append(";");
			}
		}
		//设置重新拼装的储运事项
		bean.setTransportationRemark(transportationRemark.toString());
	}

	/**
	 * 
	 * （包装-木事件监听）
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-10-29 上午11:48:26
	 */
	private void woodListener(WaybillInfoVo bean) {

		if(bean.getWood()!=null)
		{
			int wood = bean.getWood();
			int oldWood = bean.getOldWood();
			List<HandOverBillDetailEntity> handoverBillDetailFirst = waybillService.queryHandoverBillDetailByWaybillNoAndOrgCord(bean.getWaybillNo(),"");
			if(CollectionUtils.isNotEmpty(handoverBillDetailFirst)){
				if(oldWood >0 && wood==0){
					MsgBox.showInfo(i18n.get("foss.gui.changing.waybillInfoBindingListener.msgBox.woodException"));
				}
			}
			// 如果是合伙人且原来的木信息大于0现在的木信息调整为0抛出异常 2016年5月1日 15:16:56 邹胜利
			if(BZPartnersJudge.IS_PARTENER){
				if(oldWood >0 && wood==0){
					bean.setWood(oldWood);
					// 抛出异常信息
					throw new WaybillSubmitException(i18n.get("foss.gui.changing.waybillInfoBindingListener.msgBox.woodException"));
				}
			}
			//包装费优化木包装需求，出第一外场可更改木、托，但弹出框不更改 - 272311-sangwenhao
			if(!(bean.getGoodsStatus()!=null && !WaybillRfcConstants.RECEIVE_STOCK.equals(bean.getGoodsStatus().getValueCode()))){
				if (wood >= 1) {
					if (FossConstants.YES.equals(bean.getDoPacking())) {
						if (JOptionPane.YES_OPTION == JOptionPane.showConfirmDialog(ui, i18n.get("foss.gui.changing.waybillInfoBindingListener.confirmDialog.doPacking"), i18n.get("foss.gui.changing.waybillRFCUI.common.query"), JOptionPane.YES_NO_OPTION)) {
							checkPackageLabeledGoodSelected(bean);
							showWoodYokeDialog(bean);
							setSaveAndSubmitFalse(ui);
						}
					} else {
						MsgBox.showInfo(i18n.get("foss.gui.changing.waybillInfoBindingListener.msgBox.woodPackingException"));
					}
				}else{
					
					//任何时候只要Wood 为0 都必须调用下面三个方法
					unsetWaybillPanelVoForWoodenPack(bean);
					unsetStorageMatterForWoodenPack(bean);
					unsetWoodenPackFee(bean);
				}
			}
			//TODO 强制设置B货
			// setGoodsTypeB(bean);
		}else{
			bean.setWood(Integer.valueOf(0));
			
			//任何时候只要setWood 为0 都必须调用下面三个方法
			unsetWaybillPanelVoForWoodenPack(bean);
			unsetStorageMatterForWoodenPack(bean);
			unsetWoodenPackFee(bean);
		}
		getPackage(bean);

	}
	
	/**
	 * 
	 * 包装-纤事件监听
	 * @author 025000-FOSS-helong
	 * @date 2013-1-9 下午02:33:41
	 * @param bean
	 */
	private void fibreListener(WaybillInfoVo bean)
	{
		//如果数据为空，则置为0
		if(bean.getFibre()==null)
		{
			bean.setFibre(Integer.valueOf(0));
		}
		getPackage(bean);
	}
	
	/**
	 * 
	 * 包装-托事件监听
	 * @author 025000-FOSS-helong
	 * @date 2013-1-9 下午02:33:41
	 * @param bean
	 */
	private void salverListener(WaybillInfoVo bean)
	{
		//zxy 20131118 ISSUE-4391 start 修改：托也能弹出打木架的对话框
		if(bean.getWood()!=null)
		{
			//包装费优化木包装需求，出第一外场可更改木、托，但弹出框不更改 - 272311-sangwenhao
			if(!(bean.getGoodsStatus()!=null && !WaybillRfcConstants.RECEIVE_STOCK.equals(bean.getGoodsStatus().getValueCode()))){
				int wood = bean.getWood();
				if (wood >= 1) {
					if (FossConstants.YES.equals(bean.getDoPacking())) {
						if (JOptionPane.YES_OPTION == JOptionPane.showConfirmDialog(ui, i18n.get("foss.gui.changing.waybillInfoBindingListener.confirmDialog.doPacking"), i18n.get("foss.gui.changing.waybillRFCUI.common.query"), JOptionPane.YES_NO_OPTION)) {
							checkPackageLabeledGoodSelected(bean);
							showWoodYokeDialog(bean);
							setSaveAndSubmitFalse(ui);
						}
					} else {
						MsgBox.showInfo(i18n.get("foss.gui.changing.waybillInfoBindingListener.msgBox.woodPackingException"));
					}
				}else{
					//任何时候只要Wood 为0 都必须调用下面三个方法
					unsetWaybillPanelVoForWoodenPack(bean);
					unsetStorageMatterForWoodenPack(bean);
					unsetWoodenPackFee(bean);
				}
			}
			//TODO 强制设置B货
			 //setGoodsTypeB(bean);
		}else{
			bean.setWood(Integer.valueOf(0));
			bean.setSalver(Integer.valueOf(0));
			//任何时候只要setWood 为0 都必须调用下面三个方法
			unsetWaybillPanelVoForWoodenPack(bean);
			unsetStorageMatterForWoodenPack(bean);
			unsetWoodenPackFee(bean);
		}
		getPackage(bean);
		//zxy 20131118 ISSUE-4391 end 修改：托也能弹出打木架的对话框
	}
	
	/**
	 * 
	 * 包装-膜事件监听
	 * @author 025000-FOSS-helong
	 * @date 2013-1-9 下午02:33:41
	 * @param bean
	 */
	private void membraneListener(WaybillInfoVo bean)
	{
		//如果数据为空，则置为0
		if(bean.getMembrane()==null)
		{
			bean.setMembrane(Integer.valueOf(0));
		}
		getPackage(bean);
	}
	
	/**
	 * 
	 * 包装-其他事件监听
	 * @author 025000-FOSS-helong
	 * @date 2013-1-9 下午02:33:41
	 * @param bean
	 */
	private void otherPackageListener(WaybillInfoVo bean)
	{
		getPackage(bean);

	}
	
	
	/**
	 * 
	 * 获取包装
	 * @author 025000-FOSS-helong
	 * @date 2012-11-29 上午11:05:50
	 */
	private String getPackage(WaybillPanelVo vo){
		String pack = "";
		if(vo.getPaper() != null && vo.getPaper().intValue() != 0){
			pack = pack + vo.getPaper()+ i18n.get("foss.gui.changing.waybillInfoBindingListener.getPackage.paper");
		}
		
		if(vo.getWood() != null && vo.getWood().intValue() != 0){
			pack = pack + vo.getWood()+ i18n.get("foss.gui.changing.waybillInfoBindingListener.getPackage.wood");
		}
		
		if(vo.getFibre() != null && vo.getFibre().intValue() != 0){
			pack = pack + vo.getFibre()+ i18n.get("foss.gui.changing.waybillInfoBindingListener.getPackage.fibre");
		}
		
		if(vo.getSalver() != null && vo.getSalver().intValue() != 0){
			pack = pack + vo.getSalver()+ i18n.get("foss.gui.changing.waybillInfoBindingListener.getPackage.salver");
		}
		
		if(vo.getMembrane() != null && vo.getMembrane().intValue() != 0){
			pack = pack + vo.getMembrane()+ i18n.get("foss.gui.changing.waybillInfoBindingListener.getPackage.membrane");
		}
		
		if(StringUtils.isNotEmpty(vo.getOtherPackage())){
			pack = pack + vo.getOtherPackage();
		}
		
		vo.setGoodsPackage(pack);
		return vo.getGoodsPackage();
	}

	

	/**
	 * 
	 * 默认勾选已打木架件数
	 * @author 102246-foss-shaohongliang
	 * @date 2013-1-4 下午2:19:13
	 */
	private void checkPackageLabeledGoodSelected(WaybillInfoVo bean) {
		//代打包装总数量
		int count = bean.getWood();
		List<LabeledGoodChangeHistoryDto> dtos = bean.getLabeledGoodChangeHistoryDtoList();
		
		int hasNo = 0;
		
		for(LabeledGoodChangeHistoryDto d: dtos){
			if(!LabeledGoodChangeHistoryConstants.CHANGE_TYPE_DELETE
					.equals(d.getChangeType())){
				hasNo ++ ;
			}
		}
		
		if(count>hasNo){
			MsgBox.showInfo(i18n.get("foss.gui.changing.waybillInfoBindingListener.msgBox.overWoodPackingCount"));
			count =hasNo;
		}
		
		
		
		bean.setSelectedLabeledGoodEntities(dtos);
		
	}

	/**
	 * 
	 * （显示代打木架窗口）
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-10-29 下午02:23:24
	 */
	private void showWoodYokeDialog(WaybillInfoVo bean) {

		// 创建弹出窗口
		EnterYokeInfoChangeDialog dialog = new EnterYokeInfoChangeDialog(ui);
		// 剧中显示弹出窗口
		WindowUtil.centerAndShow(dialog);
	}

	/**
	 * 重载showPickupStationDialog方法，传入提货网点对象集合
	 * @author 026123-foss-lifengteng
	 * @date 2012-12-31 上午9:45:56
	 */
	private void showPickupStationDialog(WaybillInfoVo bean, List<BranchVo> depts) {
		//如果是外部普通更改，不允许弹出
		String rfcType = bean.getRfcType().getValueCode();
		if(!WaybillRfcConstants.CUSTOMER_CHANGE.equals(rfcType)){
			if (CollectionUtils.isNotEmpty(depts)) {
				// 创建弹出窗口
				QueryPickupStationDialog dialog = new QueryPickupStationDialog(depts,bean);
				// 剧中显示弹出窗口
				WindowUtil.centerAndShow(dialog);
				BranchVo branchVO = dialog.getBranchVO();

				if(branchVO != null){
					ShowPickupStationDialogAction action = new ShowPickupStationDialogAction();
					action.setInjectUI(ui);
					action.setDialogData(branchVO, bean);
					
					setSaveAndSubmitFalse(ui);
				}
					
			} else {
				// 不做业务处理
			}
		}
		
	}

	/**
	 * 
	 * 退款类型事件监听
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-11-6 下午05:19:11
	 */
	private void refundTypeListener(WaybillInfoVo bean) {
		setBankInfo(bean);
		//DP-FOSS zhaoyiqing 20161025 更改监听单配合CUBC校验银行信息
		Common.validateBankInfoCUBC(bean,true);
		setSaveAndSubmitFalse(ui);
	}

	/**
	 * 
	 * 返单类型事件监听
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-11-7 上午11:30:24
	 */
	private void returnBillTypeListener(WaybillInfoVo bean) {		
		if(bean.getSpecialValueAddedServiceType() != null &&
				(WaybillConstants.FURNITURE_EQUIP.equals(bean.getSpecialValueAddedServiceType().getValueCode()) ||
				 WaybillConstants.BUILD_MATERIAL_EQUIP.equals(bean.getSpecialValueAddedServiceType().getValueCode()) ||
				 WaybillConstants.HOME_APPLICATION_EQUIP.equals(bean.getSpecialValueAddedServiceType().getValueCode()))){
			if(bean.getReturnBillType().getValueCode()!=null && !bean.getReturnBillType().getValueCode().equals(ui.getOriginWaybill().getReturnBillType().getValueCode())){
				MsgBox.showInfo(i18n.get("foss.module.pickup.changing.client.listener.WaybillInfoBindingListener.tip1"));		
				bean.setReturnBillType(ui.getOriginWaybill().getReturnBillType());
				//ui.billingPayPanel.getPaymentModeModel().setSelectedItem(ui.getOriginWaybill().getPaidMethod());
			}
		}  
		
		// 联动修改储运事项
		if(bean.getReturnBillType() != null){
			String remark = bean.getTransportationRemark();
			if(remark == null){
				remark = "";
			}
			List<DataDictionaryValueEntity> list = waybillService.queryReturnBillType();
			
			//清空所有的返单类别
			if(list != null && list.size() > 0){
				for(DataDictionaryValueEntity dataDictionary : list){
					if(dataDictionary != null){
						remark = remark.replace(dataDictionary.getValueName() + ";", "");
					}
				}
			}
			if (!WaybillConstants.NOT_RETURN_BILL.equals(bean.getReturnBillType().getValueCode())) {
				if(remark.contains("贵重物品")){
					String[] s = remark.split(";");
					remark = remark.replace(s[0]+";","");
					bean.setTransportationRemark("贵重物品;"+bean.getReturnBillType().getValueName()+ ";" + remark); 
				}else{
					bean.setTransportationRemark(bean.getReturnBillType().getValueName()+ ";" + remark); 
				}
			}else{ 
				bean.setTransportationRemark(remark);
			}
		}		
		// 将返单费用设置到其他费用表格中
		//setOtherCharge(bean);
		setSaveAndSubmitFalse(ui);
	}
	
	/**
	 * 
	 * 设置更改费到其他费用中
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-11-7 上午11:50:46
	 */
	public void removeChangeOtherCharge(WaybillInfoVo bean) {
		
		JXTable otherTable = ui.incrementPanel.getTable();
		WaybillOtherCharge model = (WaybillOtherCharge) otherTable.getModel();
		List<OtherChargeVo> data = model.getData();
		//更改费Code
		String ggfCode = PriceEntityConstants.PRICING_CODE_GGF;
		//更改费用项
		OtherChargeVo ggfChargeVo = null;
		for(OtherChargeVo chargeVo : data){
			if(ggfCode.equals(chargeVo.getCode())&&chargeVo.getIsInit()!=null && !chargeVo.getIsInit()){
				data.remove(chargeVo);
				ggfChargeVo = chargeVo;
				break;
			}
		}
		if(ggfChargeVo != null){
			//获取更改费用明细
			if( ggfChargeVo.getMoney()==null  ){
				return;
			}
			double vomoeny = 0 ;
			try{
				vomoeny = Double.parseDouble(ggfChargeVo.getMoney());
			}catch(Exception e){
				//to do nothing
			}
			if(bean.getOtherFee()!=null && vomoeny>0 ){
				bean.setOtherFee(bean.getOtherFee().subtract(BigDecimal.valueOf(vomoeny)));
			}
			List<OtherChargeVo> list = bean.getOtherChargeVos();
			list.remove(ggfChargeVo);
			//设置更改费
			ui.incrementPanel.setChangeDetail(data);

		}
	
		
		
		bean.setOtherChargeChanged(true);
	}
	
	/**
	 * 重新设置送货费
	 * @author WangQianJin
	 * @date 2013-6-18 上午10:26:12
	 */
	public void resetDeliveryGoodsFee(WaybillInfoVo bean) {	
		//获取界面上的费用面板
		JXTable otherTable = ui.incrementPanel.getTable();
		WaybillOtherCharge model = (WaybillOtherCharge) otherTable.getModel();
		List<OtherChargeVo> data = model.getData();
		List<OtherChargeVo> delList=new ArrayList<OtherChargeVo>();
		if(data!=null){
			/**
			 * 删除所有的送货费子项(包括：送货费、送货上楼费、送货进仓费、超远派送费)
			 */
			for(OtherChargeVo chargeVo : data){
				if(PriceEntityConstants.PRICING_CODE_SH.equals(chargeVo.getCode())
						|| PriceEntityConstants.PRICING_CODE_SHSL.equals(chargeVo.getCode())
						|| PriceEntityConstants.PRICING_CODE_SHJC.equals(chargeVo.getCode())
						|| PriceEntityConstants.PRICING_CODE_CY.equals(chargeVo.getCode())){					
					delList.add(chargeVo);
				}
			}
			//将要删除的送货费子项全部删除，子所以要放到delList里面一块删除，是因为遍历的时候不能直接删除，偶尔会报java.util.ConcurrentModificationException
			if(delList.size()>0){
				data.removeAll(delList);
			}
			//获取送货费
			Common.setDeliveryFeeCollection(bean);
			//送货费集合
			List<DeliverChargeEntity> deliverList = bean.getDeliverList();
			if(deliverList!=null && deliverList.size()>0){
				/**
				 * 循环添加送货费子项
				 */
				for(DeliverChargeEntity charge: deliverList){
					if(charge!=null){						
						// 送货费子项
						OtherChargeVo vo = new OtherChargeVo();
						// 费用编码
						vo.setCode(charge.getCode());
						// 名称
						vo.setChargeName(charge.getName());				
						if(charge.getAmount()!=null){
							// 金额
							vo.setMoney(charge.getAmount().toString());
						}else{
							// 金额
							vo.setMoney("0");
						}				
						vo.setId(charge.getId());
						data.add(vo);
					}				
				}		
			}		
			//重新设置界面上的送货费
			ui.incrementPanel.setChangeDetail(data);
		}		
				
	}	
	
	
	/**
	 * 
	 * 设置更改费到其他费用中
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-11-7 上午11:50:46
	 */
	public void setChangeOtherCharge(WaybillInfoVo bean) {
		
		JXTable otherTable = ui.incrementPanel.getTable();
		WaybillOtherCharge model = (WaybillOtherCharge) otherTable.getModel();
		List<OtherChargeVo> data = model.getData();
		//更改费Code
		String ggfCode = PriceEntityConstants.PRICING_CODE_GGF;
		//更改费用项
		OtherChargeVo ggfChargeVo = null;
		for(OtherChargeVo chargeVo : data){
			if(ggfCode.equals(chargeVo.getCode())&&chargeVo.getIsInit()!=null && !chargeVo.getIsInit()){
				ggfChargeVo = chargeVo;
				break;
			}
		}
		if(ggfChargeVo == null){
			//获取更改费用明细
			ggfChargeVo = getChangeOtherCharge(bean);
			if(ggfChargeVo == null || ggfChargeVo.getMoney()==null || ggfChargeVo.getCode()==null ){
				return;
			}
			double vomoeny = 0 ;
			try{
				vomoeny = Double.parseDouble(ggfChargeVo.getMoney());
			}catch(Exception e){
				//to do nothing
			}
			if(bean.getOtherFee()!=null && vomoeny>0 ){
				bean.setOtherFee(bean.getOtherFee().add(BigDecimal.valueOf(vomoeny)));
			}else if(vomoeny>0){
				bean.setOtherFee(BigDecimal.valueOf(vomoeny));
				bean.setOtherFeeCanvas(bean.getOtherFee().toString());
			}
			data.add(ggfChargeVo);
			//设置更改费
			ui.incrementPanel.setChangeDetail(data);

		}
	
		
		
		bean.setOtherChargeChanged(true);
	}
	
	

	/**
	 * 
	 * 获取转运费用
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-11-7 上午11:53:53
	 */
	private OtherChargeVo getChangeOtherCharge(WaybillInfoVo bean) {
		OtherChargeVo vo = new OtherChargeVo();
		
		QueryBillCacilateValueAddDto queryDto = new QueryBillCacilateValueAddDto();
		// 出发部门CODE
		queryDto.setOriginalOrgCode(bean.getReceiveOrgCode());
		// 到达部门CODE
		if(bean.getCustomerPickupOrgCode()!=null){
			queryDto.setDestinationOrgCode(bean.getCustomerPickupOrgCode().getCode());
		}
		// 产品CODE
		queryDto.setProductCode(bean.getProductCode().getCode());
		// 货物类型CODE
		queryDto.setGoodsTypeCode(null);
		queryDto.setReceiveDate(new Date());// 营业部收货日期（可选，无则表示当前日期）
		queryDto.setWeight(BigDecimal.ZERO);// 重量
		queryDto.setVolume(BigDecimal.ZERO);// 体积
		queryDto.setOriginnalCost(BigDecimal.ZERO);// 原始费用
		queryDto.setFlightShift(null);// 航班号
		queryDto.setLongOrShort(bean.getLongOrShort());// 长途 还是短途
		queryDto.setSubType(null);// 为费用类型名称（综合信息费，燃油附加费，中转费等）
		queryDto.setCurrencyCdoe(FossConstants.CURRENCY_CODE_RMB);// 币种
		queryDto.setPricingEntryCode(PriceEntityConstants.PRICING_CODE_QT);// 计价条目CODE
		queryDto.setPricingEntryName(null);// 计价名称
		queryDto.setWaybillNo(bean.getWaybillNo());
		List<ValueAddDto> list = waybillService
				.queryValueAddPriceList(queryDto);
		

		if(list != null){
			for (ValueAddDto dto : list) {
				if(PriceEntityConstants.PRICING_CODE_GGF.equals(dto.getSubType())){
					

					// 费用编码
					vo.setCode(dto.getSubType());
					// 名称
					vo.setChargeName(dto.getSubTypeName());
					// 归集类别
					vo.setType(dto.getBelongToPriceEntityName());
					// 描述
					vo.setDescrition(dto.getPriceEntityCode());
					// 金额
					vo.setMoney(dto.getFee().toString());
					// 上限
					vo.setUpperLimit(dto.getMaxFee().toString());
					// 下限
					vo.setLowerLimit(dto.getMinFee().toString());
					
					vo.setIsInit(Boolean.FALSE);
					// 是否可修改
					vo.setIsUpdate(BooleanConvertYesOrNo.stringToBoolean(dto
							.getCanmodify()));
					// 是否可删除
					vo.setIsDelete(BooleanConvertYesOrNo.stringToBoolean(dto
							.getCandelete()));
					vo.setId(dto.getId());
				}
				
				
			}
		}
		
		
		return vo;
	}
	
//	
//	
//	/**
//	 * 
//	 * 获取转运费用
//	 * 
//	 * @author 025000-FOSS-helong
//	 * @date 2012-11-7 上午11:53:53
//	 */
//	private OtherChargeVo getDeliveryOtherCharge(WaybillInfoVo bean) {
//		OtherChargeVo vo = new OtherChargeVo();
//		
//		QueryBillCacilateValueAddDto queryDto = new QueryBillCacilateValueAddDto();
//		// 出发部门CODE
//		queryDto.setOriginalOrgCode(bean.getReceiveOrgCode());
//		// 到达部门CODE
//		if(bean.getCustomerPickupOrgCode()!=null){
//			queryDto.setDestinationOrgCode(bean.getCustomerPickupOrgCode().getCode());
//		}
//		// 产品CODE
//		queryDto.setProductCode(bean.getProductCode().getCode());
//		// 货物类型CODE
//		queryDto.setGoodsTypeCode(null);
//		queryDto.setReceiveDate(new Date());// 营业部收货日期（可选，无则表示当前日期）
//		queryDto.setWeight(BigDecimal.ZERO);// 重量
//		queryDto.setVolume(BigDecimal.ZERO);// 体积
//		queryDto.setOriginnalCost(BigDecimal.ZERO);// 原始费用
//		queryDto.setFlightShift(null);// 航班号
//		queryDto.setLongOrShort(bean.getLongOrShort());// 长途 还是短途
//		queryDto.setSubType(null);// 为费用类型名称（综合信息费，燃油附加费，中转费等）
//		queryDto.setCurrencyCdoe(FossConstants.CURRENCY_CODE_RMB);// 币种
//		queryDto.setPricingEntryCode(PriceEntityConstants.PRICING_CODE_QT);// 计价条目CODE
//		queryDto.setPricingEntryName(null);// 计价名称
//		List<ValueAddDto> list = waybillService
//				.queryValueAddPriceList(queryDto);
//		
//
//		if(list != null){
//			for (ValueAddDto dto : list) {
//				if(PriceEntityConstants.PRICING_CODE_SHJC.equals(dto.getSubType())){
//					
//
//					// 费用编码
//					vo.setCode(dto.getSubType());
//					// 名称
//					vo.setChargeName(dto.getSubTypeName());
//					// 归集类别
//					vo.setType(dto.getBelongToPriceEntityName());
//					// 描述
//					vo.setDescrition(dto.getPriceEntityCode());
//					// 金额
//					vo.setMoney(dto.getFee().toString());
//					// 上限
//					vo.setUpperLimit(dto.getMaxFee().toString());
//					// 下限
//					vo.setLowerLimit(dto.getMinFee().toString());
//					
//					vo.setIsInit(Boolean.FALSE);
//					// 是否可修改
//					vo.setIsUpdate(BooleanConvertYesOrNo.stringToBoolean(dto
//							.getCanmodify()));
//					// 是否可删除
//					vo.setIsDelete(BooleanConvertYesOrNo.stringToBoolean(dto
//							.getCandelete()));
//					vo.setId(dto.getId());
//				}
//				
//				
//			}
//		}
//		
//		
//		return vo;
//	}

	/**
	 * 
	 * 设置返单费用到其他费用中
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-11-7 上午11:50:46
	 */
	private void setOtherCharge(WaybillInfoVo bean) {

		JXTable otherTable = ui.incrementPanel.getTable();
		WaybillOtherCharge model = (WaybillOtherCharge) otherTable.getModel();
		List<OtherChargeVo> data = model.getData();
		if (!WaybillConstants.NOT_RETURN_BILL.equals(bean.getReturnBillType().getValueCode())) {
			OtherChargeVo otherVo = getReturnBillCharge(bean);
			if(otherVo == null)
				return;
			addReturnBillCharge(data, otherVo, bean);// 添加返单费用到其他费用表格
		} else {
			deleteOtherCharge(data, bean);// 将已有的返单费用从其他费用表格中删除
		}
		ui.incrementPanel.setChangeDetail(data);
		bean.setOtherChargeChanged(true);
	}
	


	/**
	 * 
	 * 设置转运费到其他费用中
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-11-7 上午11:50:46
	 */
	public void setTransportOtherCharge(WaybillInfoVo bean) {
		bean.setOtherFee(bean.getOtherFee().add(bean.getTfrFee().add(bean.getRtnFee())));
		
		JXTable otherTable = ui.incrementPanel.getTable();
		WaybillOtherCharge model = (WaybillOtherCharge) otherTable.getModel();
		List<OtherChargeVo> data = model.getData();
		//中转费Code
		String zzCode = PriceEntityConstants.PRICING_CODE_ZZ;
		//中转费用项
		OtherChargeVo zzfChargeVo = null;
		for(OtherChargeVo chargeVo : data){
			if(zzCode.equals(chargeVo.getCode())&&!chargeVo.getIsInit()){
				if(StringUtils.isEmpty(chargeVo.getMoney()) || "0".equals(chargeVo.getMoney())){
					data.remove(chargeVo);
				}else{
					zzfChargeVo = chargeVo;
				}
				break;
			}
		}
		if(zzfChargeVo == null){
			//获取中转费用明细
			zzfChargeVo = getTransportFeeCharge(bean);
			if(zzfChargeVo == null){
				return;
			}
			data.add(zzfChargeVo);
		}
		//重新设置中转费
		zzfChargeVo.setMoney(bean.getTfrFee().add(bean.getRtnFee()).toPlainString());
		ui.incrementPanel.setChangeDetail(data);
		bean.setOtherChargeChanged(true);
	}
	
	/**
	 * 
	 * 计算总运费时设置转运费到其他费用中
	 * 
	 * @author WangQianJin
	 * @date 2013-08-01 
	 */
	public void setTransportOtherChargeForCal(WaybillInfoVo bean) {
		bean.setOtherFee(bean.getOtherFee().add(bean.getTfrFee().add(bean.getRtnFee())));
		
		JXTable otherTable = ui.incrementPanel.getTable();
		WaybillOtherCharge model = (WaybillOtherCharge) otherTable.getModel();
		List<OtherChargeVo> data = model.getData();
		//中转费Code
		String zzCode = PriceEntityConstants.PRICING_CODE_ZZ;
		//中转费用项
		OtherChargeVo zzfChargeVo = null;
		for(OtherChargeVo chargeVo : data){
			if(zzCode.equals(chargeVo.getCode())&&!chargeVo.getIsInit() && FossConstants.YES.equals(bean.getIsFlagAddZZF())){
				zzfChargeVo = chargeVo;
				break;
			}
		}
		if(zzfChargeVo == null){
			//获取中转费用明细
			zzfChargeVo = getTransportFeeCharge(bean);
			if(zzfChargeVo == null){
				return;
			}
			data.add(zzfChargeVo);
		}
		//重新设置中转费
		zzfChargeVo.setMoney(bean.getTfrFee().add(bean.getRtnFee()).toPlainString());
		ui.incrementPanel.setChangeDetail(data);
		bean.setOtherChargeChanged(true);
	}
	

	/**
	 * 
	 * 获取转运费用
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-11-7 上午11:53:53
	 */
	private OtherChargeVo getTransportFeeCharge(WaybillInfoVo bean) {
		OtherChargeVo vo = new OtherChargeVo();
		PriceEntity dto = waybillService.queryValueAddPriceByCode(PriceEntityConstants.PRICING_CODE_ZZ);
		if(dto != null){
			vo.setChargeName(dto.getName());
			vo.setCode(dto.getCode());
			vo.setId(dto.getId());
		}else{
			vo.setChargeName(i18n.get("foss.gui.changing.waybillInfoBindingListener.otherChargeVo.chargeName"));
			
			vo.setCode(PriceEntityConstants.PRICING_CODE_ZZ);
			vo.setId(PriceEntityConstants.PRICING_CODE_ZZ);
		}
		/**
		 * 是否初始化值
		 */
		vo.setIsInit(Boolean.FALSE);
		vo.setIsDelete(false);
		vo.setIsUpdate(false);
		return vo;
	}
	
	
	/**
	 * 
	 * 如果选择的返单类型为无返单，那么需要将之前存在的返单费用删除
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-11-22 上午10:44:29
	 */
	private void deleteOtherCharge(List<OtherChargeVo> data, WaybillInfoVo bean) {
		for (int i = 0; i < data.size(); i++) {
			OtherChargeVo otherVo = data.get(i);
			// 比较费用名称，判断是否存在重复的返单费用
			if (otherVo.getChargeName().equals(bean.getReturnBillChargeName())  
					|| PricingConstants.PriceEntityConstants.PRICING_CODE_QS.equals(otherVo.getCode())) {
				data.remove(i);
				// 累计其他费用合计
				BigDecimal otherChargeSum = bean.getOtherFee();
				BigDecimal money = new BigDecimal(otherVo.getMoney());
				otherChargeSum = otherChargeSum.subtract(money);
				bean.setOtherFee(otherChargeSum);
				bean.setOtherFeeCanvas(bean.getOtherFee().toString());
				break;
			}
		}
	}

	/**
	 * 
	 * 对其他费用进行校验，判断是否存在返单费用，不存在则添加返单费用到其他费用，并且进行其他费用合计
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-11-21 下午07:06:33
	 */
	private void addReturnBillCharge(List<OtherChargeVo> data, OtherChargeVo returnBillVo, WaybillInfoVo bean) {
		boolean bool = true;
		OtherChargeVo oldVo = null;
		for (int i = 0; i < data.size(); i++) {
			OtherChargeVo otherVo = data.get(i);
			// 比较费用名称，判断是否存在重复的返单费用
			if (otherVo.getChargeName().equals(returnBillVo.getChargeName())) {
				bool = false;
				oldVo = data.get(i);
				data.remove(i);
				data.add(i, returnBillVo);
			}
		}

		// 如果不存在任何返单费用，则直接添加
		if (bool) {
			data.add(returnBillVo);
			// 累计其他费用合计
			BigDecimal otherChargeSum = bean.getOtherFee();
			BigDecimal newMoney = new BigDecimal(returnBillVo.getMoney());
			otherChargeSum = otherChargeSum.add(newMoney);
			bean.setOtherFee(otherChargeSum);
			bean.setOtherFeeCanvas(bean.getOtherFee().toString());
		} else {
			// 累计其他费用合计
			BigDecimal otherChargeSum = bean.getOtherFee();
			BigDecimal oldMoney = new BigDecimal(oldVo.getMoney());
			BigDecimal newMoney = new BigDecimal(returnBillVo.getMoney());
			BigDecimal money = newMoney.subtract(oldMoney);
			otherChargeSum = otherChargeSum.add(money);
			bean.setOtherFee(otherChargeSum);
			bean.setOtherFeeCanvas(bean.getOtherFee().toString());
		}

		// 返单费用名称，添加的目的是为了选择了无返单类型删除其他费用中的返单费用
		bean.setReturnBillChargeName(returnBillVo.getChargeName());
	}

	/**
	 * 
	 * 获取返单费用
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-11-7 上午11:53:53
	 */
	private OtherChargeVo getReturnBillCharge(WaybillInfoVo bean) {
		ValueAddDto dto = new ValueAddDto();
		OtherChargeVo vo = new OtherChargeVo();
		String type = "";
		// 到达联传真要转成传真类型
		if (WaybillConstants.RETURNBILLTYPE_ARRIVE.equals(bean.getReturnBillType().getValueCode())) {
			type = WaybillConstants.RETURNBILLTYPE_FAX;
		} else {
			type = bean.getReturnBillType().getValueCode();
		}
		
		List<ValueAddDto> list = waybillService.queryValueAddPriceList(getQueryParam(bean,type));

		if (list != null) {
			if (!list.isEmpty()) {
				dto = list.get(0);
				vo.setChargeName(dto.getPriceEntityName());
				vo.setMoney(dto.getFee().toString());
				vo.setCode(dto.getPriceEntityCode());
				vo.setId(dto.getId());
			}else
			{
				MsgBox.showError(i18n.get("foss.gui.changing.waybillInfoBindingListener.msgBox.nullQueryParam"));
				return null;
			}
		}else
		{
			MsgBox.showError(i18n.get("foss.gui.changing.waybillInfoBindingListener.msgBox.nullQueryParam"));
			return null;
		}
		return vo;
	}

	/**
	 * 
	 * 获取返单查询参数
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-11-16 上午11:02:10
	 */
	private QueryBillCacilateValueAddDto getQueryParam(WaybillInfoVo bean, String type) {
		
		QueryBillCacilateValueAddDto queryDto = new QueryBillCacilateValueAddDto();
		queryDto.setOriginalOrgCode(bean.getReceiveOrgCode());// 出发部门CODE
		queryDto.setDestinationOrgCode(bean.getCustomerPickupOrgCode().getCode());// 到达部门CODE
		//queryDto.setDestinationOrgCode("00");// 到达部门CODE
		queryDto.setProductCode(bean.getProductCode().getCode());// 产品CODE
		queryDto.setGoodsTypeCode(bean.getGoodsType());// 货物类型CODE
		queryDto.setReceiveDate(new Date());// 营业部收货日期（可选，无则表示当前日期）
		queryDto.setWeight(bean.getGoodsWeightTotal());// 重量
		queryDto.setVolume(bean.getGoodsVolumeTotal());// 体积
		queryDto.setOriginnalCost(BigDecimal.ZERO);// 原始费用
		queryDto.setFlightShift(null);// 航班号
		queryDto.setLongOrShort(bean.getLongOrShort());// 长途 还是短途
		// 为费用类型名称（综合信息费，燃油附加费，中转费等）
		queryDto.setSubType(type);
		queryDto.setCurrencyCdoe(FossConstants.CURRENCY_CODE_RMB);// 币种
		queryDto.setPricingEntryCode(PriceEntityConstants.PRICING_CODE_QS);// 计价条目CODE
		queryDto.setPricingEntryName(null);// 计价名称
		queryDto.setWaybillNo(bean.getWaybillNo());
		return queryDto;
	}

	/**
	 * 
	 * 开单付款方式事件监听
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-11-7 下午03:21:41
	 */
	private void paidMethodListener(WaybillInfoVo bean) {
		//設置主客戶信息
		setMainCustomerCode(bean);
		
		//若用户将带有特殊增值服务运单修改为到付、代收、签收单返回，系统不允许提交更改，并提示“家装送货运单不支持到付、代收、签收单返回”。
		if(bean.getSpecialValueAddedServiceType() !=null){
			if(!StringUtil.isBlank(bean.getSpecialValueAddedServiceType().getValueCode().toString()) &&
					(WaybillConstants.FURNITURE_EQUIP.equals(bean.getSpecialValueAddedServiceType().getValueCode().toString()) ||
							WaybillConstants.BUILD_MATERIAL_EQUIP.equals(bean.getSpecialValueAddedServiceType().getValueCode().toString()) ||
							WaybillConstants.HOME_APPLICATION_EQUIP.equals(bean.getSpecialValueAddedServiceType().getValueCode().toString()))){
				if(WaybillConstants.ARRIVE_PAYMENT.equals(bean.getPaidMethod().getValueCode())){
					MsgBox.showInfo(i18n.get("foss.module.pickup.changing.client.listener.WaybillInfoBindingListener.tip1"));		
					bean.setPaidMethod(ui.getOriginWaybill().getPaidMethod());
					//ui.getOriginWaybill().setPaidMethod(bean.getPaidMethod());
				}
			}
		}

		//裹裹订单类型为12
		//String serviceType = Common.getServiceType(bean.getOrderNo());
		// 付款方式如果是网上支付需要限制有订单且来自于官网，并且在官网下单时要求的付款方式也应该是网上支付,此处过滤出裹裹订单的情况，使用WaybillConstants.SERVICE_TYPE进行过滤
		if (WaybillConstants.ONLINE_PAYMENT.equals(bean.getPaidMethod().getValueCode())) {
			if (!WaybillConstants.SERVICE_TYPE.equals(bean.getServerType()) && (!WaybillConstants.CRM_ORDER_CHANNEL_ONLINE.equals(bean.getOrderChannel()) || !WaybillConstants.CRM_ORDER_PAYMENT_ONLINE.equals(bean.getOrderPayment()))) {
				MsgBox.showInfo(i18n.get("foss.gui.changing.waybillInfoBindingListener.msgBox.orderChannelOnline"));
			}
		}
		
		//货物状态为营业部库存出库的情况下 增加更改费
		//内部原因不收取更改费, 客户原因收
		String newValue = bean.getRfcSource();
		if (WaybillRfcConstants.CUSTOMER_REQUIRE.equals(newValue)) {
		if(bean.getGoodsStatus()!=null && !WaybillRfcConstants.RECEIVE_STOCK.equals(bean.getGoodsStatus().getValueCode())){
			if(!bean.getPaidMethod().equals(ui.getOriginWaybill().getPaidMethod())){
				setChangeOtherCharge(bean);
			}else{
				//如果没有修改其他货签变更项，才删除更改费
				if(!isUpdateOtherItem()){
					removeChangeOtherCharge(bean);	
				}				
			}
		}
		}
		
		// 整车付款方式规则 added by lufeifei
		if(bean.getIsWholeVehicle() != null && bean.getIsWholeVehicle()){
			if(!Common.isExistRepayment(bean.getWaybillNo())){
				if(bean.getIsPassDept() != null && !bean.getIsPassDept()){
					if (WaybillConstants.ARRIVE_PAYMENT.equals(bean.getPaidMethod().getValueCode())) {
						MsgBox.showInfo(i18n.get("foss.gui.changing.listener.Waybill.exception.NoPassDeptNoPayMethod"));
					}
				}
			}
		}
		
		//付款方式为临时欠款不允许勾选预付费保密
//		setSecrecy(bean);
		setSaveAndSubmitFalse(ui);
		//liding comment
		/**
		 * 该方法验证若是银行卡付款，则交易流水号是否可编辑
		 * @author:218371-foss-zhaoyanjun
		 * @date:2015-01-23上午08:13
		 */
		//whetherBankCardPayment(bean);
		//异地调货 客户圈客户校验付款方式 311417 wangfeng
		Common.validatePayMethod(bean);
		//==============FOSS开单优化v0.2：判断工号信息和客户信息是否一致/lianhe/2016年12月19日17:45:57/start===============
		//工号输入不为空的时候才走以下逻辑
		if (StringUtils.isNotBlank(bean.getEmployeeNo())) {
			CommonUtils.validateLinkMan(bean);
		}
		//==============FOSS开单优化v0.2：判断工号信息和客户信息是否一致/lianhe/2016年12月19日17:45:57/end===============
	}
	
	/**
	 * 设置异地调货主客户信息
	 * 311417 wangfeng
	 * @param bean
	 */
	private void setMainCustomerCode(WaybillInfoVo bean) {
		String mainCustomer;
		if(StringUtils.isNotBlank(bean.getDeliveryCustomerCode())){
			CustomerCircleNewDto customerCircleNewDto = waybillService.queryCustomerByCusCode(bean.getDeliveryCustomerCode(), bean.getBillTime(), "N");
			if (customerCircleNewDto != null
					&& ("Y").equals(customerCircleNewDto.getIsCustCircle())
					&& customerCircleNewDto.getCustomerCircleEntity() != null
					&& customerCircleNewDto.getCusBargainNewEntity() != null
					&& customerCircleNewDto.getCustomerNewEntity() != null) {
			    mainCustomer = customerCircleNewDto.getCustomerCircleEntity().getCustCode();
			    //合同实体
			    bean.setCusBargainNewEntity(customerCircleNewDto.getCusBargainNewEntity());
				//客户圈实体
			    bean.setCustomerCircleEntity(customerCircleNewDto.getCustomerCircleEntity());
				//客户实体
			    bean.setCustomerNewEntity(customerCircleNewDto.getCustomerNewEntity());
				//设置主客户
				bean.setIsMainCustomer("Y");
				//设置是否客户圈
				bean.setIsCircle("Y");
			    //设置主客户编码
			   bean.setMainCustomerCode(mainCustomer);
				//设置实际客户(从客户编码,开单显示从客户编码)
			   bean.setActualCustomerCode(bean.getDeliveryCustomerCode());
//			   bean.setDeliveryCustomerCode(mainCustomer);
			  /* String payment =customerCircleNewDto.getCusBargainNewEntity().getAsyntakegoodsCode();
			   if("Y".equals(payment)){
				 //設置始發統一結算是
				   bean.setStartCentralizedSettlement(WaybillConstants.IS_NOT_NULL_FOR_AI);   
			   }else{
				   bean.setStartCentralizedSettlement(WaybillConstants.IS_NULL_FOR_AI);
			   }*/
			 //合同部门的标杆名称
			   bean.setStartContractOrgName(customerCircleNewDto.getCusBargainNewEntity().getApplicateOrgName() !=null ? customerCircleNewDto.getCusBargainNewEntity().getApplicateOrgName():"");
				//合同部门的标杆编码
			   bean.setStartContractOrgCode(customerCircleNewDto.getCusBargainNewEntity().getUnifiedCode() !=null ? customerCircleNewDto.getCusBargainNewEntity().getUnifiedCode():"");
				//催款部门的标杆编码
			   bean.setStartReminderOrgCode(customerCircleNewDto.getCusBargainNewEntity().getHastenfunddeptCode() !=null ? customerCircleNewDto.getCusBargainNewEntity().getHastenfunddeptCode():"");
			   boolean monthEnd;
	            if("MONTH_END".equals(customerCircleNewDto.getCusBargainNewEntity().getChargeType())){
	                monthEnd =true;
	                //月结属性
	                bean.setChargeMode(monthEnd);
	            }
			}
		}
		
	}
	
	/**
	 * 是否更改了要收取更改费的其他项
	 * @author WangQianJin
	 * @date 2013-8-7 下午3:45:12
	 */
	private boolean isUpdateOtherItem(){
		boolean flag=false;
		List<WaybillRfcChangeDetailDto> rfcChangeDetailList = ui.getMessagePanel().getChangedInfoPanel().getTableData();
		for (WaybillRfcChangeDetailDto waybillRfcChangeDetailDto : rfcChangeDetailList) {
			if (waybillRfcChangeDetailDto!=null && waybillRfcChangeDetailDto.getPropertyName() != null){
				if("customerPickupOrgName".equals(waybillRfcChangeDetailDto.getPropertyName())
					|| "productCode".equals(waybillRfcChangeDetailDto.getPropertyName())
//					|| "receiveMethod".equals(waybillRfcChangeDetailDto.getPropertyName())
					|| "goodsQtyTotal".equals(waybillRfcChangeDetailDto.getPropertyName())
					|| "paper".equals(waybillRfcChangeDetailDto.getPropertyName())
					|| "wood".equals(waybillRfcChangeDetailDto.getPropertyName())
					|| "fibre".equals(waybillRfcChangeDetailDto.getPropertyName())
					|| "salver".equals(waybillRfcChangeDetailDto.getPropertyName())
					|| "membrane".equals(waybillRfcChangeDetailDto.getPropertyName())
					|| "otherPackage".equals(waybillRfcChangeDetailDto.getPropertyName())
					|| "receiveMethod".equals(waybillRfcChangeDetailDto.getPropertyName())
					|| "codAmount".equals(waybillRfcChangeDetailDto.getPropertyName())){
					flag=true;
					break;
				}						
			}
		}
		return flag;
	}
	
	/**
	 * 
	 * 付款方式为临时欠款不允许勾选预付费保密
	 * @author 025000-FOSS-helong
	 * @date 2012-12-28 上午10:49:14
	 */
//	private void setSecrecy(WaybillInfoVo bean)
//	{
//		WaybillInfoVo waybillVo = ui.getOriginWaybill();
//		//原为预付费保密的可以取消；
//		//原为非预付费保密的不可更改为预付费保密
//		if(waybillVo.getSecretPrepaid()!= null && waybillVo.getSecretPrepaid()){
//			if (WaybillConstants.TEMPORARY_DEBT.equals(bean.getPaidMethod().getValueCode())) {
//				ui.billingPayPanel.getChbSecrecy().setEnabled(true);
//				ui.billingPayPanel.getChbSecrecy().setSelected(true);
//			} else {
//				ui.billingPayPanel.getChbSecrecy().setEnabled(true);
//			}
//		}
//	}

	/**
	 * 
	 * 整车事件监听
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-11-22 下午06:19:55
	 */
	private void isWholeVehicleListener(WaybillInfoVo bean) {
		// 如果是整车
		if (bean.getIsWholeVehicle()) {
			ui.incrementPanel.getTxtCashOnDelivery().setEnabled(false);// 代收货款金额
			ui.incrementPanel.getCombRefundType().setEnabled(false);// 代收货款类型

			//开单报价
			ui.billingPayPanel.billingPayBelongPanel.getLblPublicCharge().setText(i18n.get("foss.gui.changing.waybillInfoBindingListener.billCharge.label"));
			//整车面板显示
			ui.billingPayPanel.billingPayBelongPanel.getWholeVehiclePanel().setVisible(true);
			//整车不能参与营销活动
			setterVehicleActiveInfo(bean,ui);
		
		} else {
			ui.incrementPanel.getTxtCashOnDelivery().setEnabled(true);// 代收货款金额
			ui.incrementPanel.getCombRefundType().setEnabled(true);// 代收货款类型

			//整车面板隐藏
			ui.billingPayPanel.billingPayBelongPanel.getWholeVehiclePanel().setVisible(false);
			ui.billingPayPanel.billingPayBelongPanel.getLblPublicCharge().setText(i18n.get("foss.gui.changing.waybillInfoBindingListener.publicCharge.label"));
			//公布价
			ui.billingPayPanel.billingPayBelongPanel.getTxtPublicCharge().setEnabled(false);
			//非整车参与营销活动
			ui.incrementPanel.getCombActiveInfo().setEnabled(true);
		}
	}
	/**
	 * 设置整车营销活动不可编辑
	 * @创建时间 2014-4-30 下午7:19:50   
	 * @创建人： WangQianJin
	 */
	private void setterVehicleActiveInfo(WaybillInfoVo bean,WaybillRFCUI ui){
		//设置整车不能参与营销活动
		DataDictionaryValueVo nullVo = new DataDictionaryValueVo();
		nullVo.setValueName("");
		bean.setActiveInfo(nullVo);						
		ui.incrementPanel.getCombActiveInfo().setEnabled(false);
	}

	/**
	 * 
	 * 是否经过营业部事件监听
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-11-22 下午06:19:55
	 */
	private void isPassDeptListener(WaybillInfoVo bean) {
		if (bean.getIsWholeVehicle()) {
			// 如果是整车
			if (bean.getIsPassDept()) {
				// 代收货款金额
				ui.incrementPanel.getTxtCashOnDelivery().setEnabled(true);
				// 代收货款类型
				ui.incrementPanel.getCombRefundType().setEnabled(true);
			} else {
				// 代收货款金额
				ui.incrementPanel.getTxtCashOnDelivery().setEnabled(false);
				// 代收货款类型
				ui.incrementPanel.getCombRefundType().setEnabled(false);
				// 代收货款金额置为0
				bean.setCodAmount(BigDecimal.ZERO);
				
			}
		}
	}

	/**
	 * 
	 * 接货费改变事件监听
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-11-27 下午05:42:49
	 */
	private void pickupFeeListener(WaybillInfoVo bean) {
		// 封装查询数据
		WaybillEntity queryParm = CommonUtils.getWaybillEntity(bean);
		queryParm.setPickupFee(bean.getBasePickupFee());
		//是否收取过接货费
		boolean isGetPickFee = waybillService.queryIsGetPickFeeByCust(queryParm);	
		//==================修复bug(上门接货第二单时，接货费可设置为负数，不合理),已将原来验证移出至此;lianhe-2016/10/29
		if(bean.getPickupToDoor() != null && bean.getPickupToDoor()){
			//合伙人和非合伙人验证不一样 2016年1月19日 17:16:07 葛亮亮
			if(BZPartnersJudge.IS_PARTENER){
				BigDecimal pickupFee = BigDecimal.ZERO;
				if (bean.getPickupFee() != null) {
					pickupFee = bean.getPickupFee();
				}
					//合伙人特殊处理，不可删除  20161214 xingjun
					bean.setPickUpFeeCanvas(bean.getPickupFee().toString());
					//重新计算总费用
					CalculateFeeTotalUtils.resetCalculateFee(bean);
				if (pickupFee.compareTo(BigDecimal.ZERO) < 0
					|| bean.getMaxPickupFee().compareTo(pickupFee) < 0) {
					// 接货费最低值不能小于0
					MsgBox.showInfo("对不起，接货费值的修改只能在【  " + BigDecimal.ZERO + " , "
							+ bean.getMaxPickupFee().toString() + " 】范围内!");
					bean.setPickupFee(BigDecimal.ZERO);
				}
			}
		}
		
		if(!isGetPickFee){
			//判断是否上门接货
			if(bean.getPickupToDoor() != null && bean.getPickupToDoor()){
				//合伙人和非合伙人验证不一样 2016年1月19日 17:16:07 葛亮亮
				if(BZPartnersJudge.IS_PARTENER){
					//=========修复bug(上门接货第二单时，接货费可设置为负数，不合理),已将原来验证移至上面;lianhe-2016/10/29
				}else{
				
					//由于计算总运费时对是否重新赋值接货费加了限制  如果没有收取过接货费  需要设置该字段为true  才可以重新赋值接货费
//					bean.setModifyMark(true);
					/**
					 * DMANA-6051   开单接货费优化—外租车系统需求
					 * 新增判断条件  
					 * 1.满足配置的接货费可以改小的参数是开启状态（Y）
					 * 2.满足当营业部为非集中接货区域，开单接货司机为外请司机的上门接货运单
					 * 3.满足不是crm合同客户，或者合同中对接货费没有折扣
					 * 接货费可以改大或改小，但不能小于0
					 */
					//获取开单和更改单接货费是否可以改小的配置参数 根据该配置参数来判断是否进行接货费更改的校验
					ConfigurationParamsEntity isValidationEntity = BaseDataServiceFactory.getBaseDataService().queryConfigurationParamsByEntity(null,PricingConstants.PICKUP_FEE_IS_CHANGE_SMALL,null);
					//获取当前登陆部门编码
					String loginDeptCode = bean.getReceiveOrgCode();
					SaleDepartmentEntity  deptEntity = new SaleDepartmentEntity();
					
					if(bean.getReceiveOrgCode()!=null){
			            //根据当前登陆部门编码，查询对应的营业部信息
						deptEntity= BaseDataServiceFactory.getBaseDataService().querySaleDepartmentByCodeOnline(loginDeptCode);
	
					}
	
				   if(isValidationEntity!=null 
						        &&FossConstants.YES.equals(isValidationEntity.getConfValue())
								&&deptEntity !=null 
								&&FossConstants.NO.equals(deptEntity.getInCentralizedShuttle())
								&&PricingConstants.DRIVER_CODE_OUT.equals(bean.getDriverCode())
								&&!bean.isPickUpFeeFromCustomer()
								){
							if(bean.getPickupFee()!=null && bean.getPickupFee().compareTo(BigDecimal.ZERO)<0){
								//是否开启更改单接货费验证
								boolean isStartRfcPickfeeVal=waybillService.isStartRfcPickfeeVal();
								if(isStartRfcPickfeeVal){
									setSaveAndSubmitFalse(ui);
									//接货费最低值不能小于0
									throw new WaybillRfcChangeException(i18n.get("foss.gui.changing.calculateaction.thiscust.noget.pickFee.isNotSmallThanZero"));
								}
							}
						}
					/**
					 * 判断接货费是否小于规定值
					 */
					else if(bean.getPickupFee().doubleValue()<bean.getBasePickupFee().doubleValue()){	
						//是否开启更改单接货费验证
						boolean isStartRfcPickfeeVal=waybillService.isStartRfcPickfeeVal();
						if(isStartRfcPickfeeVal){
							setSaveAndSubmitFalse(ui);
							//该客户未收取过规定的接货费值：
							throw new WaybillRfcChangeException(i18n.get("foss.gui.changing.calculateaction.thiscust.noget.pickfee")+bean.getBasePickupFee().toString());
						}
					}
			   
				}
			}						
		}
		bean.setPickUpFeeCanvas(bean.getPickupFee().toString());
		//重新计算总费用
		CalculateFeeTotalUtils.resetCalculateFee(bean);
	}
	

	/**
	 * 
	 * 包装费改变事件监听
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-12-10 下午06:02:44
	 */
	private void packageFeeListener(WaybillInfoVo bean) {
		
		//计算运费获得的包装费
		BigDecimal calculatePackageFee = bean.getCalculatedPackageFee();
		//手写包装费
		BigDecimal packageFee = bean.getPackageFee();
		
		//合伙人包装费调整 2016年1月19日 17:21:52 葛亮亮
		if(BZPartnersJudge.IS_PARTENER){
			/*包装类型为打木托时，提取标准为100%
			  包装类型为打木架时，提取标准为75%
			  包装类型为打木箱时，提取标准为83%
			  低于德邦提取的成本,系统提示：包装费已经低于成本值，请重新确认*/			
			//木架费用
			BigDecimal standCharge = bean.getStandCharge();
			if(standCharge == null){
			   standCharge = BigDecimal.ZERO;
			}
			//木箱费
			BigDecimal boxCharge = bean.getBoxCharge();
			if(boxCharge == null){
				boxCharge = BigDecimal.ZERO;
			}
			//木托费
			BigDecimal salverGoods = bean.getSalverGoodsCharge();
			if(salverGoods == null){
				salverGoods = BigDecimal.ZERO;
			}
			//木架提取费
			ConfigurationParamsEntity configurationStand = BaseDataServiceFactory.getBaseDataService().
													       queryConfigurationParamsByEntity(DictionaryConstants.SYSTEM_CONFIG_PARM__PKP,
							                                                                ConfigurationParamsConstants.PKP_FOSS_PACKAGE_STAND_DISCOUNT,
							                                                                FossConstants.ROOT_ORG_CODE);
			double tempStand = Double.parseDouble(configurationStand.getConfValue());
			//木箱提取费
			ConfigurationParamsEntity configurationBox = BaseDataServiceFactory.getBaseDataService().
								  						 queryConfigurationParamsByEntity(DictionaryConstants.SYSTEM_CONFIG_PARM__PKP,
										                                                  ConfigurationParamsConstants.PKP_FOSS_PACKAGE_BOX_DISCOUNT,
										                                                  FossConstants.ROOT_ORG_CODE);
			double tempBox = Double.parseDouble(configurationBox.getConfValue());			
			//木托提取费
			ConfigurationParamsEntity configurationSalver = BaseDataServiceFactory.getBaseDataService().
  														    queryConfigurationParamsByEntity(DictionaryConstants.SYSTEM_CONFIG_PARM__PKP,
									                                                  	     ConfigurationParamsConstants.PKP_FOSS_PACKAGE_SALVER_DISCOUNT,
									                                                         FossConstants.ROOT_ORG_CODE);
			double tempSalver = Double.parseDouble(configurationSalver.getConfValue());			
			//三种费用乘以比例后相加后四舍五入
			BigDecimal woodPrice = (standCharge.multiply(new BigDecimal(tempStand)).
							        add(boxCharge.multiply(new BigDecimal(tempBox))).
							        add(salverGoods.multiply(new BigDecimal(tempSalver)))).
							       setScale(2, BigDecimal.ROUND_HALF_UP);
			//设置画布
			bean.setPackageFeeCanvas(bean.getPackageFee().toString());
			//重新计算总运费
			CalculateFeeTotalUtils.resetCalculateFee(bean);
			if(woodPrice.subtract(packageFee).compareTo(BigDecimal.ZERO) > 0 ){
				// 代打木架费情况下, 包装费输入值不能低于运费计算值
				MsgBox.showInfo(i18n.get("foss.gui.changing.listener.Waybill.packageFeeTooLow"));
				// 回到包装费焦点
				ui.incrementPanel.getTxtPackCharge().requestFocus();
			}
			return;
		}else{
			//打木架
			Integer wood = bean.getWood();
			
			//打木架 empty go
			if(wood == null || bean.getWood().intValue() == 0){
	
				//设置保存按钮与提交按钮不可编辑
				CalculateFeeTotalUtils.calculateFee(bean);
				return;
			}else{
				
				//打木架有值
				if(calculatePackageFee==null || packageFee==null){
					
					//设置保存按钮与提交按钮不可编辑
					CalculateFeeTotalUtils.calculateFee(bean);
					return;
				}else{
					
					//运费计算值 > 输入值
					if(calculatePackageFee.doubleValue()>packageFee.doubleValue()){
						
						//代打木架费情况下, 包装费输入值不能低于运费计算值
						MsgBox.showInfo(i18n.get("foss.gui.changing.waybillInfoBindingListener.msgBox.lessPackageFee"));
						
						//回到包装费焦点
						ui.incrementPanel.getTxtPackCharge().requestFocus();
						
						//把费用清0 下面这个步骤会重新计算
						bean.setPackageFee(BigDecimal.ZERO);
						
						//设置保存按钮与提交按钮不可编辑
						CalculateFeeTotalUtils.calculateFee(bean);
						return;
					}
					
				}
			}
			//修改包装费，提交按钮不可编辑，需求重新计算总运费
			setSaveAndSubmitFalse(ui);
		}
	}

	/**
	 * 
	 * 代收货款改变事件监听
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-12-10 下午06:08:17
	 */
	private void codAmountListener(WaybillInfoVo bean) {
		//若用户将带有特殊增值服务运单修改为到付、代收、签收单返回，系统不允许提交更改，并提示“家装送货运单不支持到付、代收、签收单返回”。
		if(bean.getSpecialValueAddedServiceType() != null &&
				(WaybillConstants.FURNITURE_EQUIP.equals(bean.getSpecialValueAddedServiceType().getValueCode()) ||
				 WaybillConstants.BUILD_MATERIAL_EQUIP.equals(bean.getSpecialValueAddedServiceType().getValueCode()) ||
				 WaybillConstants.HOME_APPLICATION_EQUIP.equals(bean.getSpecialValueAddedServiceType().getValueCode()))){
			if(bean.getCodAmount()!=null && bean.getCodAmount().compareTo(ui.getOriginWaybill().getCodAmount()) != 0){
				MsgBox.showInfo(i18n.get("foss.module.pickup.changing.client.listener.WaybillInfoBindingListener.tip1"));		
				bean.setCodAmount(ui.getOriginWaybill().getCodAmount());
				//ui.billingPayPanel.getPaymentModeModel().setSelectedItem(ui.getOriginWaybill().getPaidMethod());
			}
		}  
		// 代收货款不能小于0
		if(bean.getCodAmount() != null && bean.getCodAmount().compareTo(BigDecimal.ZERO) < 0){
			MsgBox.showInfo("代收货款不能小于0");
			return;
		}
		//DP-FOSS zhaoyiqing 343617 20161025
		//此方法拿页面输入的代收货款和配置参数比较
		validateCodeAmount(bean);
		
		String newValue = bean.getRfcSource();
		if (WaybillRfcConstants.CUSTOMER_REQUIRE.equals(newValue)) {
			if(bean.getGoodsStatus()!=null && !WaybillRfcConstants.RECEIVE_STOCK.equals(bean.getGoodsStatus().getValueCode())){
				if(!bean.getCodAmount().equals(ui.getOriginWaybill().getCodAmount())){
					setChangeOtherCharge(bean);
				}else{
					//如果没有修改其他货签变更项，才删除更改费
					if(!isUpdateOtherItem()){
						removeChangeOtherCharge(bean);	
					}				
				}
			}
		}
		
		if (bean.getCodAmount().compareTo(BigDecimal.ZERO) == 0) {
			//在收货部门库存才清空
			if(WaybillRfcConstants.RECEIVE_STOCK.equals(bean.getGoodsStatus().getValueCode())){
				Common.cleanCodInfo(ui,bean);
			}
			
			//如果有代收手续费即使取消代收款，画布的值保持和页面展示的一致 2016年1月18日 15:28:22 葛亮亮
			BigDecimal collectingFee = bean.getCollectingFee();
			if(null == collectingFee){
				collectingFee = BigDecimal.ZERO;
			}
			bean.setCodFee(collectingFee);
		} else {
			// 画布代收货款
			bean.setCodAmountCanvas(bean.getCodAmount().toString());
		}
		
		//合伙人暂不验证代收货款接口  2016年3月28日 20:55:41 葛亮亮
//		if (!true == bean.getIsWholeVehicle() && bean.getCodAmount() != null && bean.getCodAmount().compareTo(BigDecimal.ZERO) > 0 && BZPartnersJudge.IS_PARTENER) {
//			expPartenerCodAmountUpperLimitCheck(bean);
//		}
		
		Common.getYokeCharge(bean);
		CalculateFeeTotalUtils.calculateFee(bean);
		//将暂存提交按钮设置为不可编辑
		setSaveAndSubmitFalse(ui);
	}

	//DP-FOSS zhaoyiqing 343617 20161025 不为0走这段逻辑，判断和配置参数中配置值比较
	private void validateCodeAmount(WaybillPanelVo bean) {
		if (bean.getCodAmount() != null
				&& bean.getCodAmount().compareTo(BigDecimal.ZERO) > NUMBER_ZERO) {

			//默认获取零担的代收货款上下限配置参数
			String codMinParam = ConfigurationParamsConstants.PKP_COD_MIN_AMOUNT;
			String codMaxParam = ConfigurationParamsConstants.PKP_COD_MAX_AMOUNT;
			//获得配置的值
			ConfigurationParamsEntity minParamEntity = BaseDataServiceFactory.getBaseDataService().queryConfigurationParamsByEntity(DictionaryConstants.SYSTEM_CONFIG_PARM__PKP, codMinParam, FossConstants.ROOT_ORG_CODE);
			ConfigurationParamsEntity maxParamEntity = BaseDataServiceFactory.getBaseDataService().queryConfigurationParamsByEntity(DictionaryConstants.SYSTEM_CONFIG_PARM__PKP, codMaxParam, FossConstants.ROOT_ORG_CODE);
			if(maxParamEntity!=null){
				String maxAmount = maxParamEntity.getConfValue();
				if (StringUtil.isNotEmpty(maxAmount) && bean.getCodAmount().compareTo(
						new BigDecimal(maxAmount)) > NUMBER_ZERO) {
					//页面重置，bean重置，按钮置灰
					ui.incrementPanel.getTxtCashOnDelivery().setText(ZERO);
					bean.setCodAmount(BigDecimal.ZERO);
					Common.setSaveAndSubmitFalse(ui);
					throw new WaybillValidateException("代收货款金额超过最大值：" + maxAmount
							+ "，请重新输入！");
				}
			}
			if(minParamEntity!=null){
				String minAmount = minParamEntity.getConfValue();
				if (StringUtil.isNotEmpty(minAmount) && bean.getCodAmount().compareTo(
						new BigDecimal(minAmount)) < NUMBER_ZERO) {
					//页面重置，bean重置，按钮置灰
					ui.incrementPanel.getTxtCashOnDelivery().setText(ZERO);
					bean.setCodAmount(BigDecimal.ZERO);
					Common.setSaveAndSubmitFalse(ui);
					throw new WaybillValidateException("代收货款金额低于最小值：" + minAmount
							+ "，请重新输入！");
				}
			}
		}
	}
	
	//合伙人开单验证代收货款上限额度 2016年1月28日 08:24:31 葛亮亮
	public void expPartenerCodAmountUpperLimitCheck(WaybillInfoVo bean){
		//登陆人信息
		UserEntity user = (UserEntity) SessionContext.getCurrentUser();
		//登陆人部门编号
		String partnerDeptCode = user.getEmployee().getDepartment().getCode();
		//请求实体
		PartenerCodAmountUpperLimitDto partenerCodAmountUpperLimit = new PartenerCodAmountUpperLimitDto();
		partenerCodAmountUpperLimit.setPartnerDeptCode(partnerDeptCode);
		
		//调接口返回部门代收款上限金额
		SynPartenerCodAmountUpperLimitResponse perLimitResponse = waybillService.partenerCodAmountUpperLimitResponse(partenerCodAmountUpperLimit);
	    Boolean isSuccess = perLimitResponse.getSuccess(); //访问放回状态
	    BigDecimal maxMoney = perLimitResponse.getMaxMoney(); //上限金额 
	    String errorMsg = perLimitResponse.getErrorMsg();//异常
		
		//如果返回异常提示“代收货款金额上限接口访问异常”
		if(isSuccess){
			if(null != maxMoney){
				//输入代收款大于上限额度
				if(bean.getCodAmount().compareTo(maxMoney) > 0){
					MsgBox.showInfo(i18n.get("foss.gui.changing.listener.Waybill.upperLimit",maxMoney));
					//将代收货款相关内容清空
					Common.cleanCodInfo(ui, bean);
				}
			}else{
				MsgBox.showInfo(i18n.get("foss.gui.changing.listener.Waybill.upperLimit.null"));
				//将代收货款相关内容清空
				Common.cleanCodInfo(ui, bean);
			}
		}else
		{
			MsgBox.showInfo(errorMsg);
			//将代收货款相关内容清空
			Common.cleanCodInfo(ui, bean);
		}
	}
	
	/**
	 * 
	 * 设置银行信息
	 * @author 025000-FOSS-helong
	 * @date 2013-1-11 下午08:11:49
	 */
	private void setBankInfo(WaybillInfoVo bean){
		DataDictionaryValueVo vo = bean.getRefundType();
		if(vo != null){
			if (bean.getDeliveryCustomerCode() == null || "".equals(bean.getDeliveryCustomerCode())) {
				
				//Common.cleanCodInfo(ui, bean);
				throw new WaybillValidateException(i18n.get("foss.gui.changing.waybillInfoBindingListener.exception.nullDeliveryCustomerCode"));
			} else {
				/**
				 * @author 311417 wangfeng
				 * @date 2017/01/16
				 * 客户圈:查询银行卡按实际客户开单
				 */
				List<CusAccountEntity> list;
				//查询实际开单客户信息
				 if( StringUtils.isNotEmpty(bean.getActualCustomerCode()) && "Y".equals(bean.getIsCircle())){
					 list = queryBankAccountForActual(bean);
				 }else {
					 //正常客户查询
					 list = queryBankAccount(bean);
				 }
				if (list != null) {
					BankAccountDialog dialog = new BankAccountDialog(list);
					// 剧中显示弹出窗口
					WindowUtil.centerAndShow(dialog);

					CusAccountEntity entity = dialog.getCusAccountEntity();
					if (entity != null) {
						bean.setOpenBank(entity);
						//即日退限制选择银行
						if(WaybillConstants.REFUND_TYPE_ONE_DAY.equals(bean.getRefundType().getValueCode())){
							if(entity.getOpeningBankName().contains(WaybillConstants.REFUND_TYPE_ONE_DAY_ABC)
									||entity.getOpeningBankName().contains(WaybillConstants.REFUND_TYPE_ONE_DAY_CCB)
									||entity.getOpeningBankName().contains(WaybillConstants.REFUND_TYPE_ONE_DAY_CMB)
									||entity.getOpeningBankName().contains(WaybillConstants.REFUND_TYPE_ONE_DAY_ICBC)){
								bean.setAccountName(entity.getAccountName());// 开户人名称
	    						bean.setAccountCode(entity.getAccountNo());// 开户账号
	    						bean.setAccountBank(entity.getOpeningBankName());// 开户行名称
							}else{
								MsgBox.showInfo(i18n.get("foss.gui.changing.waybillInfoBindingListener.msgBox.errorRefundTypeOneDay"));
								//bean.setCodAmount(BigDecimal.ZERO);
								//判断是否可以开即日退
								//Common.cleanCodInfo(ui, bean);
							}
						}else{
    						bean.setAccountName(entity.getAccountName());// 开户人名称
    						bean.setAccountCode(entity.getAccountNo());// 开户账号
    						bean.setAccountBank(entity.getOpeningBankName());// 开户行名称
						}
					}
				}else{
					//当不存在开户人信息时，提示不存在账户信息
					if (WaybillConstants.REFUND_TYPE_ONE_DAY.equals(bean.getRefundType().getValueCode())) {
						MsgBox.showInfo(i18n.get("foss.gui.changing.common.msgBox.nullBankAccountForOneDay"));
					}else{
						MsgBox.showInfo(i18n.get("foss.gui.changing.common.msgBox.nullBankAccount"));
					}
					
				}
			}
		} else {
			//Common.cleanCodInfo(ui, bean);
		}
	}

	/**
	 * 
	 * 查询客户银行账号信息
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-12-6 下午04:50:56
	 */
	private List<CusAccountEntity> queryBankAccount(WaybillInfoVo bean) {
		List<CusAccountEntity> list = waybillService.queryBankAccountByCode(bean.getDeliveryCustomerCode());
		return list;
	}
	
	/**
	 *
	 * 查询实际开单客户银行账号信息
	 *
	 * @author 025000-FOSS-helong
	 * @date 2012-12-6 下午04:50:56
	 */
	private List<CusAccountEntity> queryBankAccountForActual(WaybillInfoVo bean) {
		List<CusAccountEntity> list = waybillService.queryBankAccountByCode(bean.getActualCustomerCode());
		return list;
	}
	
	/**
	 * 
	 * 装卸费改变事件监听
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2012-12-10 下午06:10:01
	 */
	private void serviceFeeListener(WaybillInfoVo bean) {
		setSaveAndSubmitFalse(ui);
	}

	/**
	 * 
	 * 送货费改变事件监听
	 * 1.送货费默认不可改小，但可改大。除了月结客户外，只能对系统计算出的送货费取值进行上调，
	 * 不能下调。当送货费取值大于最高送货费（基础资料配置）时，
	 * 送货费自动跳改为最高送货费值，但用户可以上调送货费；
	 * 2.3.5	“月结”客户的送货费收费按以上计算出默认值，但可以修改。（送货费不受限制。可向上修改也可以向下修改，最小为0）
     * 2.3.6	除月结客户的属性外其它所有情况的送货费不可向下修改，只能向上修改	 
	 * @author 025000-FOSS-helong
	 * @date 2012-12-10 下午06:12:06
	 */
	public void deliveryGoodsFeeListener(WaybillInfoVo bean) {
		
		
		// 计算送货费
		BigDecimal calculatedeliveryGoodsFee= bean.getCalculateDeliveryGoodsFee();
		// 送货费
		BigDecimal deliveryGoodsFee = bean.getDeliveryGoodsFee();
		// 送货费上限
		// 是否月结
		Boolean chargeMode = bean.getChargeMode();
		
		//没有值得情况下  我也当非月结客户处理
		if(chargeMode == null){
			chargeMode = Boolean.FALSE;
		}

		//非月结 只能改大
		//if(!chargeMode){
			//非月结客户,送货费修改金额不能低于系统计算金额
			if(calculatedeliveryGoodsFee.doubleValue()>deliveryGoodsFee.doubleValue()){
				/*BigDecimal sh= deliveryGoodsFee.subtract(calculatedeliveryGoodsFee);
				List<DeliverChargeEntity> list = bean.getDeliverList();
				for(DeliverChargeEntity entity : list){
					if(PriceEntityConstants.PRICING_CODE_SH.equals(entity.getCode())){
						entity.setAmount(entity.getAmount().add(sh));
					}
				}*/
				MsgBox.showInfo(i18n.get("foss.gui.changing.waybillInfoBindingListener.msgBox.lessDeliveryGoodsFee"));
				bean.setDeliveryGoodsFee(calculatedeliveryGoodsFee);
			}else{
				bean.setDeliveryGoodsFee(deliveryGoodsFee);
			}
		//}else{
			/**
			 * BUG-45095送货进仓的送货费无法修改
			 * 开单送货进仓时，月结客户可以修改送货费（增加或减少），下限为150
			 */
			/*BigDecimal sh= deliveryGoodsFee.subtract(calculatedeliveryGoodsFee);*/
			String code = bean.getReceiveMethod().getValueCode();
			BigDecimal fee = BigDecimal.valueOf(0);
			if(WaybillConstants.DELIVER_STORAGE.equals(code)){
				List<DeliverChargeEntity> list = bean.getDeliverList();
				if(CollectionUtils.isNotEmpty(list)){
					for (DeliverChargeEntity entity : list) {
						/*if(PriceEntityConstants.PRICING_CODE_SH.equals(entity.getCode())){
							entity.setAmount(entity.getAmount().add(sh));
						}*/
						//是否是送货进仓
						if(PriceEntityConstants.PRICING_CODE_SHJC.equals(entity.getCode())){
							fee = entity.getAmount();
						}
					}
					
					//判断修改的费用是否小于送货进仓费
					if(bean.getDeliveryGoodsFee().compareTo(fee) < 0){
						bean.setDeliveryGoodsFee(fee);
						deliveryGoodsFee = fee;
						//【送货费】不能小于【送货进仓费】
						MsgBox.showError(i18n.get("foss.gui.creating.listener.Waybill.exception.noLessThanSHJXF"));
					}
				}
			}
		//}
		
		/**
		 *BUG-34714: 台州派送部---送货费异常（综合查询是55元，打印到达联显示40元）
		 *2013-07-01 9:00 顾贺要求修改送货费后，计算总运费送货费还是手改的送货费
		 */
    	//判断送货费集合是否为空
    	if(CollectionUtils.isNotEmpty(bean.getDeliverList())){
    		//送货费集合
    		List<DeliverChargeEntity> list = bean.getDeliverList();
    		//计算送货费集中当中，非“SH”费用之和
    		BigDecimal otherDeliveryCharge = BigDecimal.ZERO;
    		for (DeliverChargeEntity entity : list) {
    			if(PriceEntityConstants.PRICING_CODE_SH.equals(entity.getCode())){
    				continue;
    			}else{
    				if(otherDeliveryCharge.compareTo(BigDecimal.valueOf(0)) == 0){
    					otherDeliveryCharge = entity.getAmount();
    				}else{
    					otherDeliveryCharge = otherDeliveryCharge.add(entity.getAmount());
    				}
    			}
			}
    		
    		//原来的基础送货费
    		BigDecimal shCharge = calculatedeliveryGoodsFee.subtract(otherDeliveryCharge);

    		BigDecimal handDelivery = CommonUtils.defaultIfNull(bean.getHandDeliveryFee());
    		if(deliveryGoodsFee.compareTo(handDelivery)>0){
    			handDelivery=deliveryGoodsFee;
    		}
    		//如果手动设置的送货费大于计算出的送货费，那么将手动设置的送货费赋给送货费
    		if(handDelivery.compareTo(calculatedeliveryGoodsFee)>0 && !chargeMode){
    			bean.setDeliveryGoodsFee(handDelivery);
        		//遍历集合
        		for (int i=0; i<list.size(); i++) {
        			DeliverChargeEntity charge = list.get(i);
        			if(PriceEntityConstants.PRICING_CODE_SH.equals(charge.getCode())){
        				BigDecimal sum = shCharge.add(handDelivery.subtract(calculatedeliveryGoodsFee));
        				list.get(i).setAmount(sum);
        			}
        		}
    		}else{
              //如果送货费大于计算出的送货费，或者是月结客户并且送货费大于0
                if(deliveryGoodsFee.compareTo(calculatedeliveryGoodsFee)>0 || (chargeMode && deliveryGoodsFee.doubleValue()>=0)){
                	for (int i=0; i<list.size(); i++) {
            			DeliverChargeEntity charge = list.get(i);
            			if(PriceEntityConstants.PRICING_CODE_SH.equals(charge.getCode())){
            				BigDecimal sum = (deliveryGoodsFee.subtract(calculatedeliveryGoodsFee)).add(shCharge);
            				list.get(i).setAmount(sum);
            			}
            		}
                }  
    			
    		}
    		//是否上一次手动修改过
    		if(handDelivery.compareTo(BigDecimal.valueOf(0)) != 0){
    			//判断是否为月结客户
    			if(chargeMode){
    				//判断这次是否手动修改过
        			if(deliveryGoodsFee.compareTo(calculatedeliveryGoodsFee) != 0  && deliveryGoodsFee.doubleValue()>=0){
        				bean.setHandDeliveryFee(deliveryGoodsFee);
        			//未手动修改过
        			}else{
        				//取得上次手动修改的送货费
        				if(deliveryGoodsFee.compareTo(handDelivery)>0){
        					bean.setDeliveryGoodsFee(deliveryGoodsFee);
        				}else{
        					deliveryGoodsFee = handDelivery;
            				bean.setDeliveryGoodsFee(handDelivery);
        				}
        			}
        			//设置送货费明细里面的基础送货费
        			if(deliveryGoodsFee.doubleValue()>=0){
                     	for (int i=0; i<list.size(); i++) {
                 			DeliverChargeEntity charge = list.get(i);
                 			if(PriceEntityConstants.PRICING_CODE_SH.equals(charge.getCode())){
                 				BigDecimal sum = (deliveryGoodsFee.subtract(calculatedeliveryGoodsFee)).add(shCharge);
                 				list.get(i).setAmount(sum);
                 			}
                 		}
                    }
    			}else{
    				//判断这次是否手动修改过
        			if(deliveryGoodsFee.compareTo(calculatedeliveryGoodsFee) > 0 ){
        				bean.setHandDeliveryFee(deliveryGoodsFee);
        			//未手动修改过
        			}else{
        				
        				bean.setDeliveryGoodsFee(handDelivery);
        				//非月结，只能改大
        				if(!chargeMode){
        					if(calculatedeliveryGoodsFee.compareTo(handDelivery)>=0){
        						bean.setDeliveryGoodsFee(calculatedeliveryGoodsFee);
        					}
        				}
        				//取得上次手动修改的送货费
        				deliveryGoodsFee = handDelivery;
        			}
    			}
    		}else{
    			bean.setHandDeliveryFee(deliveryGoodsFee);
    		}
    		
    	}else{
    		bean.setHandDeliveryFee(deliveryGoodsFee);
    	}
    	//此处不能再次调用calculateFee计算运费，因为如果有优惠券的话再次调用会减两次
//		Common.getYokeCharge(bean);
//		CalculateFeeTotalUtils.calculateFee(bean);
    	if(bean.getDeliveryGoodsFee()!=null){
    		bean.setDeliveryGoodsFeeCanvas(String.valueOf(bean.getDeliveryGoodsFee()));	
    	}else{
    		bean.setDeliveryGoodsFeeCanvas("0");
    	}
		
		// 需要重新计算运费（resetCalculateFee方法不会再次计算优惠券费用）
		CalculateFeeTotalUtils.resetCalculateFee(bean);
	}
	
	/**
	 * 是否更改了提货方式
	 * @author WangQianJin
	 * @date 2013-8-7 下午3:45:12
	 */
	private boolean isUpdateReceiveMethod(){
		boolean flag=false;
		List<WaybillRfcChangeDetailDto> rfcChangeDetailList = ui.getMessagePanel().getChangedInfoPanel().getTableData();
		for (WaybillRfcChangeDetailDto waybillRfcChangeDetailDto : rfcChangeDetailList) {
			if (waybillRfcChangeDetailDto!=null && waybillRfcChangeDetailDto.getPropertyName() != null){
				if("receiveMethod".equals(waybillRfcChangeDetailDto.getPropertyName())
					|| "tfrReceiveMethod".equals(waybillRfcChangeDetailDto.getPropertyName())
					|| "rtnReceiveMethod".equals(waybillRfcChangeDetailDto.getPropertyName())){
					flag=true;
					break;
				}						
			}
		}
		return flag;
	}

	/**
	 * 
	 * 航班类型改变事件监听
	 * @author 025000-FOSS-helong
	 * @date 2012-12-19 下午08:18:39
	 */
	@SuppressWarnings("unchecked")
	private void flightNumberTypeListener(WaybillInfoVo bean) {
		
		if(bean.getFlightNumberType() != null)
		{
			FlightEntity entity = new FlightEntity();
			entity.setFlightSort(bean.getFlightNumberType().getValueCode());/**
			 * 设置始发站为当前用户所在部门所在城市
			 */
			UserEntity user = (UserEntity) SessionContext.getCurrentUser();
			if(user!=null && user.getEmployee()!=null && user.getEmployee().getDepartment()!=null && user.getEmployee().getDepartment().getCityCode()!=null){				
				entity.setDepartureAirport(getCityName(user.getEmployee().getDepartment().getCityCode()));
			}
			
			//BUG-58303  更改单：如741111123，运输性质由卡航修改为空运，然后选择合大票，航班类型选择早班。系统提示NULL
			if(bean.getCustomerPickupOrgCode() == null){
				MsgBox.showInfo(i18n.get("foss.gui.creating.waybillTempSaveAction.msgBox.nullTargetOrgCode"));
				return;
				}
			// 目的城市
			entity.setDestinationAirport(getCityName(bean.getCustomerPickupOrgCode().getCityCode()));
			PaginationDto dto = waybillService.queryFlightDtoListBySelectiveCondition(
					entity, 0, Integer.MAX_VALUE);
			List<FlightDto> flightDto = dto.getPaginationDtos();
			FlightInfoDialog dialog = new FlightInfoDialog(flightDto);
			// 居中显示弹出窗口
			WindowUtil.centerAndShow(dialog);
			
			FlightDto flight = dialog.getFlightDto();
			if(flight != null)
			{
				//设置航班时间
				bean.setFlightShift(getFlyDate(flight));
				
				if (flight.getPlanLeaveTime() != null) {
					// 获取空运预计出发时间
					Date leaveTime = waybillService.getAirLeaveTime(bean.getReceiveOrgCode(), flight.getPlanLeaveTime(), bean.getFlightNumberType().getValueCode());
					// 设置航班预计出发时间
					bean.setPreDepartureTime(leaveTime);
					// 设置航班预计到达、自提时间
					bean.setPreCustomerPickupTime(getAirArriveTime(flight.getPlanArriveTime(), leaveTime));
				}
			}
		}
		//DEFECT-3034 航班类型更改之后必须计算之后才能提交
		setSaveAndSubmitFalse(ui);
	}
	
	/**
	 * 
	 * 通过城市CODE获取城市名称
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2013-4-12 下午03:07:04
	 * @return
	 */
	private String getCityName(String code) {
		AdministrativeRegionsEntity entity = waybillService.queryAdministrativeRegionsByCode(code);
		return entity.getName();
	}
	
	/**
	 * 
	 * 获得空运到达时间
	 * 
	 * @author 025000-FOSS-helong
	 * @date 2013-3-11 上午10:29:14
	 */
	@SuppressWarnings("static-access")
	private Date getAirArriveTime(Date planArriveTime, Date planLeaveTime) {
		if (planArriveTime != null) {
			Calendar cal = Calendar.getInstance();
			cal.setTime(planArriveTime);
			// 获得时
			int hour = cal.get(cal.HOUR_OF_DAY);
			// 获得分
			int minute = cal.get(cal.MINUTE);

			cal.setTime(planLeaveTime);
			// 年
			int year = cal.get(cal.YEAR);
			// 月
			int month = cal.get(cal.MONTH);
			// 日
			int day = cal.get(cal.DAY_OF_MONTH);

			Date airArriveTime = new Date();
			Calendar current = Calendar.getInstance();
			current.setTime(airArriveTime);
			current.set(current.YEAR, year);
			current.set(current.MONTH, month);
			current.set(current.DAY_OF_MONTH, day);
			current.set(current.HOUR_OF_DAY, hour);
			current.set(current.MINUTE, minute);
			current.set(current.SECOND, 0);
			airArriveTime = current.getTime();

			return airArriveTime;
		}
		return null;
	}
	
	/**
	 * 
	 * 航班类型改变事件监听
	 * @author 025000-FOSS-helong
	 * @date 2012-12-19 下午08:18:39
	 */
	@SuppressWarnings("unchecked")
	private void transferflightNumberTypeListener(WaybillInfoVo bean) {
		
		if(bean.getTfrFlightNumberType() != null)
		{
			FlightEntity entity = new FlightEntity();
			
			entity.setFlightSort(bean.getTfrFlightNumberType().getValueCode());
			PaginationDto dto = waybillService.queryFlightDtoListBySelectiveCondition(
					entity, 0, Integer.MAX_VALUE);
			
			List<FlightDto> flightDto = dto.getPaginationDtos();
			
			FlightInfoDialog dialog = new FlightInfoDialog(flightDto);
			// 居中显示弹出窗口
			WindowUtil.centerAndShow(dialog);
			
			FlightDto flight = dialog.getFlightDto();
			if(flight != null)
			{
				//设置航班时间
				bean.setTfrFlightShift(getFlyDate(flight));
			}
		}


	}

	/**
	 * 
	 * 组装航班日期
	 * @author 025000-FOSS-helong
	 * @date 2012-12-31 上午09:27:36
	 * @return
	 */
	public static String getFlyDate(FlightDto rowDto)
	{
		//航班日期
		StringBuffer date = new StringBuffer();
		//飞行日期
		String flyDate = "";
		if(FossConstants.YES.equals(rowDto.getFlyOnMonday()))
		{
			flyDate = flyDate + "1";
		}
		
		if(FossConstants.YES.equals(rowDto.getFlyOnTuesday()))
		{
			flyDate = flyDate + "2";
		}
		
		if(FossConstants.YES.equals(rowDto.getFlyOnWednesday()))
		{
			flyDate = flyDate + "3";
		}
		
		if(FossConstants.YES.equals(rowDto.getFlyOnThursday()))
		{
			flyDate = flyDate + "4";
		}
		
		if(FossConstants.YES.equals(rowDto.getFlyOnFriday()))
		{
			flyDate = flyDate + "5";
		}
		
		if(FossConstants.YES.equals(rowDto.getFlyOnSaturday()))
		{
			flyDate = flyDate + "6";
		}
		
		if(FossConstants.YES.equals(rowDto.getFlyOnSunday()))
		{
			flyDate = flyDate + "7";
		}
		
		if(rowDto.getPlanLeaveTime() != null)
		{
			date.append(rowDto.getPlanLeaveTime().toString());
		}
		
		if(rowDto.getPlanArriveTime() != null)
		{
			date.append("|");
			date.append(rowDto.getPlanLeaveTime().toString());
		}
		
		date.append(flyDate);
		
		return date.toString();
	}
	
	/**
	 * 
	 * 合票类型改变事件监听
	 * @author 025000-FOSS-helong
	 * @date 2012-12-19 下午08:28:57
	 */
	private void freightMethodListener(WaybillInfoVo bean) {
		
		//判断是否是自提件
		if(bean.getIsEconomyGoods()!=null && bean.getIsEconomyGoods()){
			//设置自提件提货方式
			Common.setEconomyReceiveMethod(bean,ui);
		}else{
			/**
			 * 判断合票方式和运输性质是否为空
			 */
			if (bean.getFreightMethod() != null && bean.getProductCode() != null) {
				/**
				 * 判断合票方式是否为单独开单和运输性质是否为精准空运
				 */
				if (ProductEntityConstants.PRICING_PRODUCT_FREIGNT_DDKD.equals(bean.getFreightMethod().getValueCode())
						&& ProductEntityConstants.PRICING_PRODUCT_AIR_FREIGHT.equals(bean.getProductCode().getCode())) {
					/**
					 * 创建提货方式对象
					 */
					DataDictionaryValueVo receiveMethod = new DataDictionaryValueVo();
					receiveMethod.setValueCode(WaybillConstants.AIRPORT_PICKUP);
					receiveMethod.setValueName(i18n.get("foss.gui.creating.transferInfoPanel.airportPickup.label"));
					bean.setReceiveMethod(receiveMethod);
					ui.getWaybillInfoPanel().getTransferPanel().getTransportInfoPanel().getCombPickMode().setEnabled(false);
				} else {
					ui.getWaybillInfoPanel().getTransferPanel().getTransportInfoPanel().getCombPickMode().setEnabled(true);
				}
			}
		}	
		
	}
	
	

	/**
	 * 收货人地址失去焦点事件
	 * @author 026123-foss-lifengteng
	 * @date 2012-12-25 下午5:09:13
	 */
	private void receiveCustomerAddressListener(WaybillInfoVo bean){
		// 整车不需要自动匹配提货网点
		if (!PricingConstants.ProductEntityConstants.PRICING_PRODUCT_FULL_VEHICLE.equals(bean.getProductCode().getCode())) {
			// 若之前有过成功匹配地址的造成地址栏颜色变化时，在清空地址或带出新地址之前应该将地址颜色变回黑色
			ui.getTxtConsigneeAddress().setForeground(Color.BLACK);
			matchPickupOrg(bean, ui);
		}
	}
	
	/**
	 * 行政区域焦点监听事件
	 * @author 026123-foss-lifengteng
	 * @date 2013-1-7 上午9:49:57
	 */
	private void receiveCustomerAreaListener(WaybillInfoVo bean){ 
		// 省市区县变化时重新设置编码和DTO
		if(null ==  ui.getTxtConsigneeArea()){
			return ;
		}
		// 获得控件上的DTO
		AddressFieldDto address = ui.getTxtConsigneeArea().getAddressFieldDto();
		// 向bean中设置DTO
		bean.setReceiveCustomerAreaDto(address); 
		// 国家
		bean.setReceiveCustomerNationCode(address.getNationId());
		// 省份
		bean.setReceiveCustomerProvCode(address.getProvinceId());
		// 城市
		bean.setReceiveCustomerCityCode(address.getCityId());
		// 区县
		bean.setReceiveCustomerDistCode(address.getCountyId()); 

		// 整车不需要自动匹配提货网点
		if (!PricingConstants.ProductEntityConstants.PRICING_PRODUCT_FULL_VEHICLE.equals(bean.getProductCode().getCode())) {
			// 若之前有过成功匹配地址的造成地址栏颜色变化时，在清空地址或带出新地址之前应该将地址颜色变回黑色
			ui.getTxtConsigneeAddress().setForeground(Color.BLACK);
			matchPickupOrg(bean, ui);
		}
		
		
		if(StringUtils.isEmpty(bean.getReceiveCustomerArea())){
			bean.setReceiveCustomerAreaDto(new AddressFieldDto());
		}
	}
	
	/**
	 * 匹配提货网点
	 * @author 026123-foss-lifengteng
	 * @date 2013-1-7 上午9:52:08
	 */
	private void matchPickupOrg(WaybillInfoVo bean, WaybillRFCUI ui) {
		// 地址
		String address = StringUtils.defaultString(bean.getReceiveCustomerAddress());
		// 区域
		String area = ui.getTxtConsigneeArea().getText().trim();
		// 判断地址和区域是否为空
		if (!"".equals(address) && !"".equals(area)) {
			// 根据收货人地址获取特殊地址类型
			List<String> remarkTypes = waybillService.querySpecialAddressByGis(gainGisPickupOrgDto(bean, ui));
			// 收货人详细地址
			JTextFieldValidate txtAddress = ui.getTxtConsigneeAddress();
			// 设置地址颜色
			setReceiveAddressColor(remarkTypes, txtAddress);

			// 根据收货人地址匹配提货网点
			List<GisDepartmentDto> depts = waybillService.queryPickupOrgCodeByGis(gainGisPickupOrgDto(bean, ui));
			// 对象非空判断
			if (depts != null) {
				// 提货网点集合对象
				List<BranchVo> voList = new ArrayList<BranchVo>();
				// 遍历部门信息，通过部门编码和是否代理获得提货网点信息
				for (GisDepartmentDto dto : depts) {
					// 根据组织标杆编码查询部门编码
					OrgAdministrativeInfoEntity org = waybillService.queryOrgByUnifiedCode(dto.getDeptNo());
					if (null != org) {
						dto.setDeptNo(StringUtil.defaultIfNull(org.getCode()));
					}
					// 查询代理网点
					BranchVo vo = bu.getCustomerPickupOrg(dto);
					if (null != vo) {
						voList.add(vo);
					}
				}

				setPickupOrgData(ui, bean, voList);
			}
		}
	}
	
	/**
	 * 收货联系人监听事件
	 * @author 026123-foss-lifengteng
	 * @date 2013-1-8 下午7:32:43
	 */
	private void receiveCustomerContactListener(WaybillInfoVo bean){
		//
	}
	
	/**
	 * 根据特殊地址类型设置
	 * @author 026123-foss-lifengteng
	 * @date 2013-1-4 下午4:59:35
	 */
	private void setReceiveAddressColor(List<String> remarkTypes,JTextFieldValidate txtAddress){
		//判断是否为空
		if(CollectionUtils.isNotEmpty(remarkTypes)){
			//遍历备注类型
			for (String remark : remarkTypes) {
				//禁行区域：红色
				if(GisConstants.SPECIAL_ADDRESS_FORBID.equals(remark)){
					txtAddress.setForeground(Color.RED);
				}
				//进仓区域：黄色
				else if(GisConstants.SPECIAL_ADDRESS_ENTER.equals(remark)){
					txtAddress.setForeground(Color.YELLOW);
				}
				//禁行和进仓区域：橙色
				else if(GisConstants.SPECIAL_ADDRESS_ENTER.equals(remark) && GisConstants.SPECIAL_ADDRESS_FORBID.equals(remark)){
					txtAddress.setForeground(Color.ORANGE);
				}
				//其它：黑色
				else{
					txtAddress.setForeground(Color.BLACK);
				}
			}
		}else{
			//将已设置的颜色重新设置回来
			txtAddress.setForeground(Color.BLACK);
		}
	}
	
	/**
	 * 组装到达网点匹配的查询条件
	 * @author 026123-foss-lifengteng
	 * @date 2012-12-27 下午2:37:06
	 */
	private GisPickupOrgDto gainGisPickupOrgDto(WaybillInfoVo bean, WaybillRFCUI ui){
		// 定义查询参数
		GisPickupOrgDto dto = new GisPickupOrgDto();
		// 运单号
		dto.setAppNum(bean.getWaybillNo());

		// 获得地址栏VO
		AddressFieldDto address = bu.getProvCityCounty(bean.getReceiveCustomerProvCode(), bean.getReceiveCustomerCityCode(), bean.getReceiveCustomerDistCode());

		// 判断省市区地址对象是否为空
		if (null == address) {
			return null;
		}

		// 省份
		dto.setProvince(address.getProvinceName());
		// 城市
		dto.setCity(address.getCityName());
		// 区县
		dto.setCounty(address.getCountyName());

		// 其它地址
		dto.setOtherAddress(bean.getReceiveCustomerAddress());
		// 汽运类型
		dto.setTransportway(CommonUtils.covertProductToGisType(bean.getProductCode().getCode()));
		// 提货方式
		dto.setMatchtypes(CommonUtils.covertReceiveMethod(bean.getReceiveMethod().getValueCode()));
		// 收货人电话
		dto.setTel(bean.getReceiveCustomerPhone());
		// 收货人手机
		dto.setPhone(bean.getReceiveCustomerMobilephone());

		return dto;
	}
	
	/**
	 * 根据标杆编码查询提货网点信息
	 * @author 026123-foss-lifengteng
	 * @date 2012-12-31 上午9:24:18
	 */
	private void setPickupOrgData(WaybillRFCUI ui,WaybillInfoVo bean, List<BranchVo> depts){
		// 判断返回的标杆编码集合是否为空
		if (CollectionUtils.isNotEmpty(depts)) {
			// 显示网点对象信息
			showPickupStationDialog(bean, depts);
			ShowPickupStationDialogAction action = new ShowPickupStationDialogAction();
			// 将该UI设置到ShowPickupStationDialogAction类中
			action.setInjectUI(ui);
			// 设置线路信息
			action.setLoadLine(bean);
//			action.setAirDeptEnabled(bean);
		} else {
			// 不做业务处理
		}
	}

	/**
	 * 
	 * 预付金额事件监听
	 * @author 025000-FOSS-helong
	 * @date 2012-12-28 下午12:10:48
	 * @param bean
	 */
	private void prePayAmountListener(WaybillInfoVo bean){
		//手动修改预付金额，需要自动对到付金额进行计算
		setToPayAmount(bean);
	}
	
	/**
	 * 
	 * 一半先付一半到付，根据输入的预付金额计算出到付金额
	 * @author 025000-FOSS-helong
	 * @date 2012-12-28 下午12:13:40
	 * @param bean
	 */
	private void setToPayAmount(WaybillInfoVo bean)
	{
		//预付金额
		BigDecimal prePayAmount = bean.getPrePayAmount();
		//到付金额
		BigDecimal toPayAmount = BigDecimal.ZERO;
		//总金额
		BigDecimal totalAmount = bean.getTotalFee();
		//代收货款
		BigDecimal codAmount = bean.getCodAmount();
		//计算除去代收货款的总金额
		totalAmount = totalAmount.subtract(codAmount);
		if(prePayAmount.compareTo(BigDecimal.ZERO) == 0)
		{
			MsgBox.showInfo(i18n.get("foss.gui.changing.waybillInfoBindingListener.msgBox.zeroPrePayAmount"));
			ui.billingPayPanel.getTxtCashpayment().requestFocus();
			//将暂存提交按钮设置为不可编辑
			setSaveAndSubmitFalse(ui);
		}
		else if(prePayAmount.compareTo(totalAmount) > 0)
		{
			MsgBox.showInfo(i18n.get("foss.gui.changing.waybillInfoBindingListener.msgBox.overPrePayAmount"));
			ui.billingPayPanel.getTxtCashpayment().requestFocus();
			//将暂存提交按钮设置为不可编辑
			setSaveAndSubmitFalse(ui);
		}else
		{
			//到付金额 = 总金额 - 预付金额
			toPayAmount = totalAmount.subtract(prePayAmount);
			validateTotalAmount(prePayAmount,toPayAmount,totalAmount);
			//实际到付金额 = 到付金额+代收货款
			toPayAmount = toPayAmount.add(codAmount);
			bean.setToPayAmount(toPayAmount);
		}
	}
	
	/**
	 * 
	 * 验证预付金额+到付金额是否=总金额
	 * @author 025000-FOSS-helong
	 * @date 2012-12-28 下午02:15:13
	 */
	private void validateTotalAmount(BigDecimal prePayAmount,BigDecimal toPayAmount,BigDecimal totalAmount)
	{
		if(prePayAmount.add(toPayAmount).compareTo(totalAmount) != 0)
		{
			setSaveAndSubmitFalse(ui);
			throw new WaybillValidateException(i18n.get("foss.gui.changing.waybillInfoBindingListener.exception.errorTotalAmount"));
		}
	}
	
	/**
	 * 
	 * 到付金额事件监听
	 * @author 025000-FOSS-helong
	 * @date 2012-12-28 下午12:10:48
	 * @param bean
	 */
	private void toPayAmountListener(WaybillInfoVo bean){
		//一半先付一半到付，根据输入的到付金额计算出预付金额
		setPrePayAmount(bean);
	}
	
	/**
	 * 
	 * 一半先付一半到付，根据输入的到付金额计算出预付金额
	 * @author 025000-FOSS-helong
	 * @date 2012-12-28 下午12:13:40
	 * @param bean
	 */
	private void setPrePayAmount(WaybillInfoVo bean)
	{
		//预付金额
		BigDecimal toPayAmount = bean.getToPayAmount();
		//到付金额
		BigDecimal prePayAmount = BigDecimal.ZERO;
		//总金额
		BigDecimal totalAmount = bean.getTotalFee();
		//代收货款
		BigDecimal codAmount = bean.getCodAmount();
		if(toPayAmount.compareTo(codAmount) < 0)
		{
			MsgBox.showInfo(i18n.get("foss.gui.changing.waybillInfoBindingListener.msgBox.lessToPayAmount"));
			ui.billingPayPanel.getTxtArrivePayment().requestFocus();
			//将暂存提交按钮设置为不可编辑
			setSaveAndSubmitFalse(ui);
		}else if(toPayAmount.compareTo(totalAmount) > 0)
		{
			MsgBox.showInfo(i18n.get("foss.gui.changing.waybillInfoBindingListener.msgBox.overToPayAmount"));
			ui.billingPayPanel.getTxtArrivePayment().requestFocus();
			//将暂存提交按钮设置为不可编辑
			setSaveAndSubmitFalse(ui);
		}else
		{
			//到付金额 = 总金额 - 预付金额
			prePayAmount = totalAmount.subtract(toPayAmount);
			validateTotalAmount(prePayAmount,toPayAmount,totalAmount);
			bean.setPrePayAmount(prePayAmount);
		}
	}

	@Override
	public boolean isFromVoTargetEnable() {
		return false;
	}
	
	
	/**
	 * 把三级产品类型转换成始发和到达线路的运输类型(汽运，空运) :
	 * 1、精准卡航、 精准城运 精准汽运（长途）、 精准汽运（短途）、 汽运偏线  => GIS的汽运
	 * 2、精准空运 => GIS的空运
	 * @author 026123-foss-lifengteng
	 * @date 2012-12-27 下午5:11:35
	 */
	public static String covertProductToGisType(String productCode) {
		// 根据三级产品判断是否是汽运
		if (StringUtils.equals(PricingConstants.ProductEntityConstants.PRICING_PRODUCT_LONG_DISTANCE_FAST_FREIGHT, productCode)
				|| StringUtils.equals(PricingConstants.ProductEntityConstants.PRICING_PRODUCT_SHORT_DISTANCE_FAST_FREIGHT, productCode)
				|| StringUtils.equals(PricingConstants.ProductEntityConstants.PRICING_PRODUCT_LONG_DISTANCE_ROAD_FREIGHT, productCode)
				|| StringUtils.equals(PricingConstants.ProductEntityConstants.PRICING_PRODUCT_SHORT_DISTANCE_ROAD_FREIGHT, productCode)
				|| StringUtils.equals(PricingConstants.ProductEntityConstants.PRICING_PRODUCT_PARTIAL_LINE, productCode)
				|| StringUtils.equals(PricingConstants.ProductEntityConstants.PRICING_PRODUCT_PCP, productCode)) {
			return GisConstants.GIS_TRANS_HIGHWAYS;
		}
		// 根据三级产品判断是否是空运
		if (StringUtils.equals(PricingConstants.ProductEntityConstants.PRICING_PRODUCT_AIR_FREIGHT, productCode)) {
			return GisConstants.GIS_TRANS_AIR;
		}
		
		return null;
	}
	
	/**
	 * 1、自提、空运自提、空运免费自提、机场自提 ==> GIS自提
	 * 2、免费派送、送货进仓、免费派送（上楼）==> GIS送货
	 * @author 026123-foss-lifengteng
	 * @date 2012-12-27 下午5:41:55
	 */
	public static String covertReceiveMethod(String method){
		String rm = StringUtil.defaultIfNull(method);
		//根据提货方式判断是不是自提
		if(rm.toLowerCase().contains(GisConstants.GIS_MATCH_PICKUP.toLowerCase())){
			return GisConstants.GIS_MATCH_PICKUP;
		}
		
		//根据提货方式判断是不是送货
		if(rm.toLowerCase().contains(GisConstants.GIS_MATCH_DELIVER.toLowerCase())){
			return GisConstants.GIS_MATCH_DELIVER;
		}
		
		return null;
	}
	
	/**
	 * 
	 * <p>
	 * (是否上门接货事件监听)
	 * </p>
	 * 
	 * @author WangQianJin
	 * @date 2013-04-16
	 * @see
	 */
	private void pickupToDoorListener(WaybillPanelVo bean) {
		boolean bool = ui.getWaybillInfoPanel().getBasicPanel().getCboReceiveModel().isSelected();
		if (bool) {
			// 接货费输入框
			ui.getWaybillInfoPanel().getIncrementPanel().getTxtPickUpCharge().setEditable(false);
			//如果选择了上门接货 则设置是否修改标志位  需要重新计算接货费
			bean.setModifyMark(true);
			//发货客户分群为VIP群或者全网活跃群时 可以对免费接货进行修改,否则取消免费接货并且设置不可更改 306486 wangshuai
			DataDictionaryValueVo vo = bean.getFlabelleavemonth() ;
			ProductEntityVo productVo = bean.getProductCode();
			if (vo != null && (WaybillConstants.VIP.equals(vo.getValueCode())
					|| WaybillConstants.OMNI_ACTIVE.equals(vo.getValueCode()))) {
				if(productVo==null||!ProductEntityConstants.PRICING_PRODUCT_PCP.equals(productVo.getCode())){
					ui.getWaybillInfoPanel().getBasicPanel().getCboFreePickupGoods().setEnabled(true);
				}
			} else {
				bean.setFreePickupGoods(false);
				ui.getWaybillInfoPanel().getBasicPanel().getCboFreePickupGoods().setEnabled(false);
			}
		} else {
			// 接货费
			bean.setPickupFee(BigDecimal.ZERO);
			// 重新计算运费
			CalculateFeeTotalUtils.resetCalculateFee(bean);
			//306486 修改免费接货
			ui.getWaybillInfoPanel().getBasicPanel().getCboFreePickupGoods().setSelected(false);
			ui.getWaybillInfoPanel().getBasicPanel().getCboFreePickupGoods().setEnabled(false);
		}
		//修改完是否上门接货不能立即提交需要再次计算运费
		ui.getButtonPanel().getBtnSubmit().setEnabled(false);
	}
	
	/**
	 * 判断强制设置AB货
	 * @author foss-liyongfei
	 * @param bean
	 */
	/*private void setGoodsTypeB(WaybillInfoVo bean) {
		// 若是可分拣A、B货，则重置AB货选择，并进行判断是否强制B货
		if (bean.getGoodsTypeIsAB() != null) {
			if (bean.getGoodsTypeIsAB()) {
				// 强制B货判断,若是B货，选择B，且灰掉按钮，变为不可用状态
				if (CommonUtils.getGoodsTypeIsB(bean)) {
					ui.getWaybillInfoPanel().getGoodsPanel().getRdoB()
							.setSelected(true);
					ui.getWaybillInfoPanel().getGoodsPanel().getRdoA()
							.setEnabled(false);
					ui.getWaybillInfoPanel().getGoodsPanel().getRdoB()
							.setEnabled(false);
				} else {
					// 若不符合强制B货的条件，且可分拣A、B货，并且之前的按钮为可选状态（初始化状态或者手动选择AB货后），do
					// Nothing
					if (ui.getWaybillInfoPanel().getGoodsPanel().getRdoA()
							.isEnabled()
							&& ui.getWaybillInfoPanel().getGoodsPanel()
									.getRdoB().isEnabled()) {
						// Do Nothing---------------
					} else {
						ui.getWaybillInfoPanel().getGoodsPanel().getRdoA()
								.setEnabled(true);
						ui.getWaybillInfoPanel().getGoodsPanel().getRdoB()
								.setEnabled(true);
						bean.setGoodsType(null);
					}

				}
			}
		}

	}*/
	/**
	 * 变更精准大票复选框事件
	 * changeProductTypeMode: <br/>
	 * 
	 * Date:2014-6-26上午11:08:04
	 * @author 157229-zxy
	 * @param bean
	 * @since JDK 1.6
	 */
	private void isBigGoodsListener(WaybillInfoVo bean){
		List<ProductEntity> list=null;
		//如果是自提件业务，则重新获取产品信息
		if(FossConstants.YES.equals(bean.getIsEconomyGoods())){
			String channelCode=bean.getEconomyGoodsType().getValueCode();
			Date billTime=bean.getBillTime();
			if(channelCode!=null){					
				//根据渠道CODE和当前时间获取产品信息
				list=WaybillRfcServiceFactory.getWaybillRfcService().getProductOfMinFeePlanByChannelCodeAndSpecifiedDate(channelCode, billTime);
			}				
		}else{
			list = WaybillRfcServiceFactory.getWaybillRfcService().queryTransType(bean.getReceiveOrgCode());	
		}
		DefaultComboBoxModel productTypeModel = ui.getWaybillInfoPanel().getTransferPanel().getTransportInfoPanel().getProductTypeModel();
		//过滤精准大票产品类型
		if(list!=null && list.size()>0){
			productTypeModel.removeAllElements();
			CommonUtils.filterBigGoodsProductEntity(list,bean.getIsBigGoods());
		}
		if(list!=null && list.size()>0){
			for (ProductEntity dataDictionary : list) {
				ProductEntityVo vo = new ProductEntityVo();
				
				if(CommonUtils.directDetermineIsExpressByProductCode(dataDictionary.getCode())){
					continue;
				}
				
				try {
					BeanUtils.copyProperties(vo, dataDictionary);
				} catch (IllegalAccessException e) {
					LOG.error(e.getMessage());
				} catch (InvocationTargetException e) {
					LOG.error(e.getMessage());
				}
				productTypeModel.addElement(vo);
			}
			Common.modifyProductCode(bean, bean.getIsBigGoods(), productTypeModel);
		}
		DefaultComboBoxModel pickModel = ui.getWaybillInfoPanel().getTransferPanel().getTransportInfoPanel().getPickModeModel();
		pickModel.removeAllElements();
		//DMANA-4923 FOSS开单隐藏免费送货
		if(WaybillConstants.DELIVER_FREE.equals(ui.getOriginWaybill().getReceiveMethod().getValueCode()) || WaybillConstants.DELIVER_FREE_AIR.equals(ui.getOriginWaybill().getReceiveMethod())){
			Common.modifyPickModel(pickModel, bean.getIsBigGoods());
		}else{
			Common.modifyPickModel(pickModel, bean.getIsBigGoods(),bean);
		}
		Common.modifyReceiveMethod(bean, pickModel);
		//清空运输性质的选择
		productCodeListener(bean);
	}
	
	/**
	 * @需求：大件上楼优化需求
	 * @功能：1.判断送货上楼或者大件上楼是否满足需求
	 * 		2.对内备注
	 * @author:218371-foss-zhaoyanjun
	 * @date:2015-04-02下午15:15
	 */
	private void addCombPickModeListener(WaybillInfoVo bean) {
		try {
			/*
			 * “大件上楼”或者“送货上楼”提货方式对内备注
			 */
			CommonUtils.inwardRemark(bean);
		} catch (Exception e) {
			// TODO: handle exception
			if(StringUtils.isNotEmpty(e.getMessage())){
				MsgBox.showInfo(e.getMessage());
			}
		}
	}
	
	/**
	 * 通过客户编码查询发票标记，并赋值给memberVo
	 * @author:218371-foss-zhaoyanjun
	 * @date:2015-01-06上午10:33
	 */
	/*private void setInvoice(QueryMemberDialogVo memberVo){
		String invoice=null;//......;这里要综合方法
		if(WaybillConstants.INVOICE_01.equals(invoice)){
			memberVo.setInvoice(WaybillConstants.INVOICE_01);
		}else{
			memberVo.setInvoice(WaybillConstants.INVOICE_02);
		}
	}*/
	
	/**
	 * 该方法验证若是银行卡付款，则交易流水号是否可编辑
	 * @author:218371-foss-zhaoyanjun
	 * @date:2015-01-23上午08:13
	 */
	private void whetherBankCardPayment(WaybillInfoVo bean) {
		// TODO Auto-generated method stub
		if(bean.getPaidMethod()!=null&&WaybillConstants.CREDIT_CARD_PAYMENT.equals(bean.getPaidMethod().getValueCode())){
			//合伙人交易流水号置灰不填 2016年2月22日 09:11:35 葛亮亮
			if(BZPartnersJudge.IS_PARTENER){
				ui.billingPayPanel.getTransactionSerialNumber().setEnabled(false);
			}else{
				ui.billingPayPanel.getTransactionSerialNumber().setEnabled(true);
			}
		}else{
			ui.billingPayPanel.getTransactionSerialNumber().setEnabled(false);
			bean.setTransactionSerialNumber(null);
		}
	}
	
	//liding comment
	/**
	 * 对交易流水号进行监控
	 * @author:218371-foss-zhaoyanjun
	 * @date:2015-01-23
	 */
//	private void verificate(String transactionSerialNumber) {
//		// TODO Auto-generated method stub
//		if(StringUtils.isEmpty(transactionSerialNumber)){
//			MsgBox.showInfo(i18n.get("foss.gui.changing.listener.Waybill.transactionSerialNumber"));
//		}
//	}
	
	/**
	 * 根据“至尊宝”判断，若修改保费小于50000时，删除“至尊宝冲减”
	 * @author:218371-foss-zhaoyanjun
	 * @date:2015-04-15上午09:39
	 */
	private void judgeZhiZunBao(WaybillInfoVo bean){
		if(bean.getInsuranceAmount()!=null
				&&bean.getInsuranceAmount().compareTo(new BigDecimal(NumberConstants.NUMBER_50000))<0){
			List<OtherChargeVo> data=((WaybillOtherCharge)ui.incrementPanel.getTblOther().getModel()).getData();
			if(CollectionUtils.isNotEmpty(data)){
				for(int i=0;i<data.size();i++){
					if(PriceEntityConstants.PRICING_CODE_ZZB.equalsIgnoreCase(data.get(i).getCode())){
						//copy的代码
						//累计其他费用面板所有费用(因为当点击计算总运费以后，其他费用中已经去除各种特殊归集费用，要把特殊费用再次累加到其他费用，方便下一次归集)
						CommoForFeeUtils.otherPanelSumFee(data,bean);
						BigDecimal otherFee = bean.getOtherFee().subtract(new BigDecimal(data.get(i).getMoney()));
						bean.setOtherFee(otherFee);
						bean.setOtherFeeCanvas(bean.getOtherFee().toString());
						Object obj = data.get(i);
						if(obj!=null){
							List<OtherChargeVo> list = bean.getOtherChargeVos();
							list.remove(obj);
							data.remove(obj);
						}
						ui.incrementPanel.setChangeDetail(data);
					}
				}
			}
		}
	}
	/**
	 * 内部折扣方案改变付款方式监听事件
	 * dp-foss-dongjialing
	 * 225131
	 */
	private void internalDeliveryListener(WaybillPanelVo bean) {
		JComboBox internalDeliveryType=ui.getWaybillInfoPanel().getBasicPanel().getInternalDeliveryType();
		JTextFieldValidate txtStaffNumber = ui.getWaybillInfoPanel().getBasicPanel().getTxtStaffNumber();
		JComboBox comBox = ui.billingPayPanel.getCombPaymentMode();
		DefaultComboBoxModel model = ui.billingPayPanel.getPaymentModeModel();
		DefaultComboBoxModel internalDeliveryTypeModel = ui.getWaybillInfoPanel().getBasicPanel().getInternalDeliveryTypeModel();
		CommonUtils.internalDelivery(bean,internalDeliveryType,internalDeliveryTypeModel,txtStaffNumber
				,comBox,model,false);
	}
	
	/**
	 * 针对梯度保价添加的对运输性质、重量、体积、保险申明价值的监听
	 * 
	 * @author foss-206860
	 * */
	private void  gradInsuranceRateListener(WaybillInfoVo bean){
		//梯度费率---206860
		if(bean.getGoodsWeightTotal() != null && bean.getGoodsVolumeTotal() != null 
				&& bean.getCustomerPickupOrgCode() != null
				&& bean.getProductCode() != null){
			//校验发货客户发生变更
			String isUpdateDeliveryCustomer = Common.validateDeliveryCustomer(bean.getDeliveryCustomerCode(),ui);
			bean.setIsUpdateDeliveryCustomer(isUpdateDeliveryCustomer);
			//获取费率范围
			String isYorN = Common.getInsuranceRate(bean);
			//重新计算总费用
			CalculateFeeTotalUtils.resetCalculateFee(bean);
			if(FossConstants.YES.equals(isYorN)){
				ui.incrementPanel.getTxtInsuranceRate().setEnabled(true);
			}else{
				ui.incrementPanel.getTxtInsuranceRate().setEnabled(false);
			}
		}
	}
	/**
	 * 
	 * 清空目的站以及预配线路
	 * 
	 * @author WangQianJin
	 * @date 2013-6-26 下午06:53:27
	 * @param bean
	 */
	private void cleanTargetEmpty(WaybillPanelVo bean) {
		// 清空提货网点
		bean.setCustomerPickupOrgCode(null);
		// 清空提货网点名称
		bean.setCustomerPickupOrgName("");
		// 清空目的站
		bean.setTargetOrgCode("");
		// 清空长短途
		bean.setLongOrShort(null);
		// 清空预配线路
		bean.setLoadLineName("");
	}
	
	
	/**
	 * @author 葛亮亮
	 * @date 2016年1月19日 10:53:11
	 */
	private void codFeeListener(WaybillPanelVo bean) {
		try {
			//合伙人项目
			if(BZPartnersJudge.IS_PARTENER){
				BigDecimal codFee = bean.getCollectingFee() != null ? bean.getCollectingFee() : BigDecimal.ZERO;//修改后
				// 获取 代收手续费 提成
				ConfigurationParamsEntity configuration = BaseDataServiceFactory.getBaseDataService().queryConfigurationParamsByEntity(
														  DictionaryConstants.SYSTEM_CONFIG_PARM__PKP,
														  ConfigurationParamsConstants.PKP_FOSS_COD_FEE_DISCOUNT,
														  FossConstants.ROOT_ORG_CODE);
				if (null != configuration && StringUtils.isNotBlank(configuration.getConfValue())) {
					double temp = Double.parseDouble(configuration.getConfValue());
					BigDecimal discount = BigDecimal.valueOf(temp);
					BigDecimal discountedValue = bean.getPtpWaybillOrgVo().getCodFee().multiply(discount).setScale(2, BigDecimal.ROUND_HALF_UP);
					//画布
					bean.setCodFee(codFee);
					CalculateFeeTotalUtils.resetCalculateFee(bean);
					if (discountedValue.compareTo(codFee) > 0) {
						// 低于德邦成本
						MsgBox.showInfo(i18n.get("foss.gui.changing.listener.waybill.codefeelistener.one",discountedValue));
					}
				}// if end
			}// if end
		} catch (Exception e) {
			throw new WaybillValidateException("代收手续费联动异常："+e.getMessage());
		}
	}
	
	//保价费
	private void supportFeeListener(WaybillPanelVo bean) {
		try {
			// 合伙人项目
			if (BZPartnersJudge.IS_PARTENER) {
				BigDecimal insuranceFee = bean.getSupportFee() != null ? bean.getSupportFee() : BigDecimal.ZERO;
				// 获取 保价费 提成
				ConfigurationParamsEntity configuration = BaseDataServiceFactory.getBaseDataService().queryConfigurationParamsByEntity(
														  DictionaryConstants.SYSTEM_CONFIG_PARM__PKP,
														  ConfigurationParamsConstants.PKP_FOSS_INSURANCE_FEE_DISCOUNT,
														  FossConstants.ROOT_ORG_CODE);
				if (null != configuration&& StringUtils.isNotBlank(configuration.getConfValue())) {
					double temp = Double.parseDouble(configuration.getConfValue());
					BigDecimal discount = BigDecimal.valueOf(temp);
					BigDecimal discountedValue = bean.getPtpWaybillOrgVo().getInsuranceFee().multiply(discount).setScale(2, BigDecimal.ROUND_HALF_UP);
					//画布
					bean.setInsuranceFee(insuranceFee);
					CalculateFeeTotalUtils.resetCalculateFee(bean);
					if (discountedValue.compareTo(insuranceFee) > 0) {
						// 低于德邦成本
						MsgBox.showInfo(i18n.get("foss.gui.changing.listener.Waybill.supportFeeListener.one",discountedValue));
					}	
				}
			}
		} catch (Exception e) {
			throw new WaybillValidateException("保价费联动异常："+e.getMessage());
		}
	}

}
