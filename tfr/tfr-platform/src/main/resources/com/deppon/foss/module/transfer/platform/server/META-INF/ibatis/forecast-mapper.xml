<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="Foss.platform.forecastQuantity" >
	<resultMap id="BaseResultMap" type="com.deppon.foss.module.transfer.platform.api.shared.domain.ForecastQuantityEntity" >
		<id column="FORECAST_QUANTITY_ID" property="forecastQuantityId" jdbcType="VARCHAR" />
		<result column="BELONG_ORG_CODE" property="belongOrgCode" jdbcType="VARCHAR" />
		<result column="BELONG_ORG_CODE_NAME" property="belongOrgCodeName" jdbcType="VARCHAR" />
		<result column="REGION" property="region" jdbcType="VARCHAR" />
		<result column="REGION_NAME" property="regionName" jdbcType="VARCHAR" />
		<result column="RELEVANT_ORG_CODE" property="relevantOrgCode" jdbcType="VARCHAR" />
		<result column="RELEVANT_ORG_CODE_NAME" property="relevantOrgCodeName" jdbcType="VARCHAR" />
		<result column="WEIGHT_TOTAL" property="weightTotal" jdbcType="DECIMAL" />
		<result column="VOLUME_TOTAL" property="volumeTotal" jdbcType="DECIMAL" />
		<result column="WAYBILL_QTY_TOTAL" property="waybillQtyTotal" jdbcType="NUMERIC" />
		<result column="GPS_ENABLED_RES_WEIGHT_TOTAL" property="gpsEnabledResWeightTotal" jdbcType="DECIMAL" />
		<result column="GPS_ENABLED_RES_VOLUME_TOTAL" property="gpsEnabledResVolumeTotal" jdbcType="DECIMAL" />
		<result column="GPS_ENABLED_RES_QTY_TOTAL" property="gpsEnabledResQtyTotal" jdbcType="NUMERIC" />
		<result column="PRECISION_IFS_WEIGHT_TOTAL" property="precisionIfsWeightTotal" jdbcType="DECIMAL" />
		<result column="PRECISION_IFS_VOLUME_TOTAL" property="precisionIfsVolumeTotal" jdbcType="DECIMAL" />
		<result column="PRECISION_IFS_QTY_TOTAL" property="precisionIfsQtyTotal" jdbcType="NUMERIC" />
		<result column="EXPRESS_WEIGHT_TOTAL" property="expressWeightTotal" jdbcType="DECIMAL" />
		<result column="EXPRESS_VOLUME_TOTAL" property="expressVolumeTotal" jdbcType="DECIMAL" />
		<result column="EXPRESS_QTY_TOTAL" property="expressQtyTotal" jdbcType="NUMERIC" />
		<result column="INVENTORY_WEIGHT_TOTAL" property="inventoryWeightTotal" jdbcType="DECIMAL" />
		<result column="INVENTORY_VOLUME_TOTAL" property="inventoryVolumeTotal" jdbcType="DECIMAL" />
		<result column="INVENTORY_QTY_TOTAL" property="inventoryQtyTotal" jdbcType="NUMERIC" />
		<result column="BILLING_WEIGHT_TOTAL" property="billingWeightTotal" jdbcType="DECIMAL" />
		<result column="BILLING_VOLUME_TOTAL" property="billingVolumeTotal" jdbcType="DECIMAL" />
		<result column="BILLING_QTY_TOTAL" property="billingQtyTotal" jdbcType="NUMERIC" />
		<result column="INTRANSIT_WEIGHT_TOTAL" property="intransitWeightTotal" jdbcType="DECIMAL" />
		<result column="INTRANSIT_VOLUME_TOTAL" property="intransitVolumeTotal" jdbcType="DECIMAL" />
		<result column="INTRANSIT_QTY_TOTAL" property="intransitQtyTotal" jdbcType="NUMERIC" />
		<result column="DEVIATION_VOLUME" property="deviationVolume" jdbcType="DECIMAL" />
		<result column="STATISTICS_TIME" property="statisticsTime" jdbcType="TIMESTAMP" />
		<result column="TYPE" property="type" jdbcType="VARCHAR" />
		<result column="FORECAST_TIME" property="forecastTime" jdbcType="DATE" />
		<result column="STATISTICS_DATE" property="statisticsDate" jdbcType="DATE" />
		<result column="STATISTICS_HHMM" property="statisticsHHMM" jdbcType="VARCHAR" />
		<result column="DEPARTUREARRIVAL" property="departurearrival" jdbcType="VARCHAR" />
	</resultMap>
	<sql id="Base_Column_List" >
    FORECAST_QUANTITY_ID, BELONG_ORG_CODE, REGION, RELEVANT_ORG_CODE, WEIGHT_TOTAL, VOLUME_TOTAL, 
    WAYBILL_QTY_TOTAL, GPS_ENABLED_RES_WEIGHT_TOTAL, GPS_ENABLED_RES_VOLUME_TOTAL, GPS_ENABLED_RES_QTY_TOTAL, 
    PRECISION_IFS_WEIGHT_TOTAL, PRECISION_IFS_VOLUME_TOTAL, PRECISION_IFS_QTY_TOTAL, 
    EXPRESS_WEIGHT_TOTAL, EXPRESS_VOLUME_TOTAL, EXPRESS_QTY_TOTAL,
    INVENTORY_WEIGHT_TOTAL, INVENTORY_VOLUME_TOTAL, INVENTORY_QTY_TOTAL, BILLING_WEIGHT_TOTAL, 
    BILLING_VOLUME_TOTAL, BILLING_QTY_TOTAL, INTRANSIT_WEIGHT_TOTAL, INTRANSIT_VOLUME_TOTAL, 
    INTRANSIT_QTY_TOTAL, DEVIATION_VOLUME, STATISTICS_TIME, TYPE, FORECAST_TIME, STATISTICS_DATE, STATISTICS_HHMM
	</sql>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
		<include refid="Base_Column_List" />
    from TFR.T_OPT_FORECAST_QUANTITY_P
    where FORECAST_QUANTITY_ID = #{forecastQuantityId,jdbcType=VARCHAR}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from TFR.T_OPT_FORECAST_QUANTITY_P
    where FORECAST_QUANTITY_ID = #{forecastQuantityId,jdbcType=VARCHAR}
	</delete>
	<insert id="insert" parameterType="com.deppon.foss.module.transfer.platform.api.shared.domain.ForecastQuantityEntity" >
    insert into TFR.T_OPT_FORECAST_QUANTITY_P (FORECAST_QUANTITY_ID, BELONG_ORG_CODE, 
      REGION, RELEVANT_ORG_CODE, WEIGHT_TOTAL, 
      VOLUME_TOTAL, WAYBILL_QTY_TOTAL, GPS_ENABLED_RES_WEIGHT_TOTAL, 
      GPS_ENABLED_RES_VOLUME_TOTAL, GPS_ENABLED_RES_QTY_TOTAL, 
      PRECISION_IFS_WEIGHT_TOTAL, PRECISION_IFS_VOLUME_TOTAL, 
      PRECISION_IFS_QTY_TOTAL, EXPRESS_WEIGHT_TOTAL, 
      EXPRESS_VOLUME_TOTAL, EXPRESS_QTY_TOTAL, INVENTORY_WEIGHT_TOTAL, 
      INVENTORY_VOLUME_TOTAL, INVENTORY_QTY_TOTAL, 
      BILLING_WEIGHT_TOTAL, BILLING_VOLUME_TOTAL, 
      BILLING_QTY_TOTAL, INTRANSIT_WEIGHT_TOTAL, 
      INTRANSIT_VOLUME_TOTAL, INTRANSIT_QTY_TOTAL, 
      DEVIATION_VOLUME, STATISTICS_TIME, TYPE,
      FORECAST_TIME, STATISTICS_DATE, STATISTICS_HHMM,DEPARTUREARRIVAL, DATA_TYPE
      )
    values (#{forecastQuantityId,jdbcType=VARCHAR}, #{belongOrgCode,jdbcType=VARCHAR}, 
      #{region,jdbcType=VARCHAR}, #{relevantOrgCode,jdbcType=VARCHAR}, #{weightTotal,jdbcType=DECIMAL}, 
      #{volumeTotal,jdbcType=DECIMAL}, #{waybillQtyTotal,jdbcType=NUMERIC}, #{gpsEnabledResWeightTotal,jdbcType=DECIMAL}, 
      #{gpsEnabledResVolumeTotal,jdbcType=DECIMAL}, #{gpsEnabledResQtyTotal,jdbcType=NUMERIC}, 
      #{precisionIfsWeightTotal,jdbcType=DECIMAL}, #{precisionIfsVolumeTotal,jdbcType=DECIMAL}, 
      #{precisionIfsQtyTotal,jdbcType=NUMERIC},#{expressWeightTotal,jdbcType=DECIMAL}, #{expressVolumeTotal,jdbcType=DECIMAL}, 
      #{expressQtyTotal,jdbcType=NUMERIC}, #{inventoryWeightTotal,jdbcType=DECIMAL}, 
      #{inventoryVolumeTotal,jdbcType=DECIMAL}, #{inventoryQtyTotal,jdbcType=NUMERIC}, 
      #{billingWeightTotal,jdbcType=DECIMAL}, #{billingVolumeTotal,jdbcType=DECIMAL}, 
      #{billingQtyTotal,jdbcType=NUMERIC}, #{intransitWeightTotal,jdbcType=DECIMAL}, 
      #{intransitVolumeTotal,jdbcType=DECIMAL}, #{intransitQtyTotal,jdbcType=NUMERIC}, 
      #{deviationVolume,jdbcType=DECIMAL}, #{statisticsTime,jdbcType=TIMESTAMP}, #{type,jdbcType=VARCHAR},
      #{forecastTime,jdbcType=DATE}, #{statisticsDate,jdbcType=DATE}, #{statisticsHHMM,jdbcType=VARCHAR},
      #{departurearrival,jdbcType=VARCHAR}, #{dataType, jdbcType=VARCHAR}
      )
	</insert>
	<insert id="insertSelective" parameterType="com.deppon.foss.module.transfer.platform.api.shared.domain.ForecastQuantityEntity" >
    insert into TFR.T_OPT_FORECAST_QUANTITY_P
		<trim prefix="(" suffix=")" suffixOverrides="," >
			<if test="forecastQuantityId != null" >
        FORECAST_QUANTITY_ID,
			</if>
			<if test="belongOrgCode != null" >
        BELONG_ORG_CODE,
			</if>
			<if test="region != null" >
        REGION,
			</if>
			<if test="relevantOrgCode != null" >
        RELEVANT_ORG_CODE,
			</if>
			<if test="weightTotal != null" >
        WEIGHT_TOTAL,
			</if>
			<if test="volumeTotal != null" >
        VOLUME_TOTAL,
			</if>
			<if test="waybillQtyTotal != null" >
        WAYBILL_QTY_TOTAL,
			</if>
			<if test="gpsEnabledResWeightTotal != null" >
        GPS_ENABLED_RES_WEIGHT_TOTAL,
			</if>
			<if test="gpsEnabledResVolumeTotal != null" >
        GPS_ENABLED_RES_VOLUME_TOTAL,
			</if>
			<if test="gpsEnabledResQtyTotal != null" >
        GPS_ENABLED_RES_QTY_TOTAL,
			</if>
			<if test="precisionIfsWeightTotal != null" >
        PRECISION_IFS_WEIGHT_TOTAL,
			</if>
			<if test="precisionIfsVolumeTotal != null" >
        PRECISION_IFS_VOLUME_TOTAL,
			</if>
			<if test="precisionIfsQtyTotal != null" >
        PRECISION_IFS_QTY_TOTAL,
			</if>
			<if test="expressWeightTotal != null" >
        EXPRESS_WEIGHT_TOTAL,
			</if>
			<if test="expressVolumeTotal != null" >
        EXPRESS_VOLUME_TOTAL,
			</if>
			<if test="expressQtyTotal != null" >
        EXPRESS_QTY_TOTAL,
			</if>
			<if test="inventoryWeightTotal != null" >
        INVENTORY_WEIGHT_TOTAL,
			</if>
			<if test="inventoryVolumeTotal != null" >
        INVENTORY_VOLUME_TOTAL,
			</if>
			<if test="inventoryQtyTotal != null" >
        INVENTORY_QTY_TOTAL,
			</if>
			<if test="billingWeightTotal != null" >
        BILLING_WEIGHT_TOTAL,
			</if>
			<if test="billingVolumeTotal != null" >
        BILLING_VOLUME_TOTAL,
			</if>
			<if test="billingQtyTotal != null" >
        BILLING_QTY_TOTAL,
			</if>
			<if test="intransitWeightTotal != null" >
        INTRANSIT_WEIGHT_TOTAL,
			</if>
			<if test="intransitVolumeTotal != null" >
        INTRANSIT_VOLUME_TOTAL,
			</if>
			<if test="intransitQtyTotal != null" >
        INTRANSIT_QTY_TOTAL,
			</if>
			<if test="deviationVolume != null" >
        DEVIATION_VOLUME,
			</if>
			<if test="statisticsTime != null" >
        STATISTICS_TIME,
			</if>
			<if test="type != null" >
        TYPE,
			</if>
			<if test="forecastTime != null" >
        FORECAST_TIME,
			</if>
			<if test="statisticsDate != null" >
        STATISTICS_DATE,
			</if>
			<if test="statisticsHHMM != null" >
        STATISTICS_HHMM,
			</if>
			<if test="departurearrival != null" >
        DEPARTUREARRIVAL,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides="," >
			<if test="forecastQuantityId != null" >
        #{forecastQuantityId,jdbcType=VARCHAR},
			</if>
			<if test="belongOrgCode != null" >
        #{belongOrgCode,jdbcType=VARCHAR},
			</if>
			<if test="region != null" >
        #{region,jdbcType=VARCHAR},
			</if>
			<if test="relevantOrgCode != null" >
        #{relevantOrgCode,jdbcType=VARCHAR},
			</if>
			<if test="weightTotal != null" >
        #{weightTotal,jdbcType=DECIMAL},
			</if>
			<if test="volumeTotal != null" >
        #{volumeTotal,jdbcType=DECIMAL},
			</if>
			<if test="waybillQtyTotal != null" >
        #{waybillQtyTotal,jdbcType=NUMERIC},
			</if>
			<if test="gpsEnabledResWeightTotal != null" >
        #{gpsEnabledResWeightTotal,jdbcType=DECIMAL},
			</if>
			<if test="gpsEnabledResVolumeTotal != null" >
        #{gpsEnabledResVolumeTotal,jdbcType=DECIMAL},
			</if>
			<if test="gpsEnabledResQtyTotal != null" >
        #{gpsEnabledResQtyTotal,jdbcType=NUMERIC},
			</if>
			<if test="precisionIfsWeightTotal != null" >
        #{precisionIfsWeightTotal,jdbcType=DECIMAL},
			</if>
			<if test="precisionIfsVolumeTotal != null" >
        #{precisionIfsVolumeTotal,jdbcType=DECIMAL},
			</if>
			<if test="precisionIfsQtyTotal != null" >
        #{precisionIfsQtyTotal,jdbcType=NUMERIC},
			</if>
			<if test="expressWeightTotal != null" >
        #{expressWeightTotal,jdbcType=DECIMAL},
			</if>
			<if test="expressVolumeTotal != null" >
        #{expressVolumeTotal,jdbcType=DECIMAL},
			</if>
			<if test="expressQtyTotal != null" >
        #{expressQtyTotal,jdbcType=NUMERIC},
			</if>
			<if test="inventoryWeightTotal != null" >
        #{inventoryWeightTotal,jdbcType=DECIMAL},
			</if>
			<if test="inventoryVolumeTotal != null" >
        #{inventoryVolumeTotal,jdbcType=DECIMAL},
			</if>
			<if test="inventoryQtyTotal != null" >
        #{inventoryQtyTotal,jdbcType=NUMERIC},
			</if>
			<if test="billingWeightTotal != null" >
        #{billingWeightTotal,jdbcType=DECIMAL},
			</if>
			<if test="billingVolumeTotal != null" >
        #{billingVolumeTotal,jdbcType=DECIMAL},
			</if>
			<if test="billingQtyTotal != null" >
        #{billingQtyTotal,jdbcType=NUMERIC},
			</if>
			<if test="intransitWeightTotal != null" >
        #{intransitWeightTotal,jdbcType=DECIMAL},
			</if>
			<if test="intransitVolumeTotal != null" >
        #{intransitVolumeTotal,jdbcType=DECIMAL},
			</if>
			<if test="intransitQtyTotal != null" >
        #{intransitQtyTotal,jdbcType=NUMERIC},
			</if>
			<if test="deviationVolume != null" >
        #{deviationVolume,jdbcType=DECIMAL},
			</if>
			<if test="statisticsTime != null" >
        #{statisticsTime,jdbcType=TIMESTAMP},
			</if>
			<if test="type != null" >
        #{type,jdbcType=VARCHAR},
			</if>
			<if test="forecastTime != null" >
        #{forecastTime,jdbcType=DATE},
			</if>
			<if test="statisticsDate != null" >
        #{statisticsDate,jdbcType=DATE},
			</if>
			<if test="statisticsHHMM != null" >
        #{statisticsHHMM,jdbcType=VARCHAR},
			</if>
			<if test="departurearrival != null" >
        #{departurearrival,jdbcType=VARCHAR},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective" parameterType="com.deppon.foss.module.transfer.platform.api.shared.domain.ForecastQuantityEntity" >
    update TFR.T_OPT_FORECAST_QUANTITY_P
		<set >
			<if test="belongOrgCode != null" >
        BELONG_ORG_CODE = #{belongOrgCode,jdbcType=VARCHAR},
			</if>
			<if test="region != null" >
        REGION = #{region,jdbcType=VARCHAR},
			</if>
			<if test="relevantOrgCode != null" >
        RELEVANT_ORG_CODE = #{relevantOrgCode,jdbcType=VARCHAR},
			</if>
			<if test="weightTotal != null" >
        WEIGHT_TOTAL = #{weightTotal,jdbcType=DECIMAL},
			</if>
			<if test="volumeTotal != null" >
        VOLUME_TOTAL = #{volumeTotal,jdbcType=DECIMAL},
			</if>
			<if test="waybillQtyTotal != null" >
        WAYBILL_QTY_TOTAL = #{waybillQtyTotal,jdbcType=NUMERIC},
			</if>
			<if test="gpsEnabledResWeightTotal != null" >
        GPS_ENABLED_RES_WEIGHT_TOTAL = #{gpsEnabledResWeightTotal,jdbcType=DECIMAL},
			</if>
			<if test="gpsEnabledResVolumeTotal != null" >
        GPS_ENABLED_RES_VOLUME_TOTAL = #{gpsEnabledResVolumeTotal,jdbcType=DECIMAL},
			</if>
			<if test="gpsEnabledResQtyTotal != null" >
        GPS_ENABLED_RES_QTY_TOTAL = #{gpsEnabledResQtyTotal,jdbcType=NUMERIC},
			</if>
			<if test="precisionIfsWeightTotal != null" >
        PRECISION_IFS_WEIGHT_TOTAL = #{precisionIfsWeightTotal,jdbcType=DECIMAL},
			</if>
			<if test="precisionIfsVolumeTotal != null" >
        PRECISION_IFS_VOLUME_TOTAL = #{precisionIfsVolumeTotal,jdbcType=DECIMAL},
			</if>
			<if test="precisionIfsQtyTotal != null" >
        PRECISION_IFS_QTY_TOTAL = #{precisionIfsQtyTotal,jdbcType=NUMERIC},
			</if>
			<if test="expressWeightTotal != null" >
        EXPRESS_WEIGHT_TOTAL = #{expressWeightTotal,jdbcType=DECIMAL},
			</if>
			<if test="expressVolumeTotal != null" >
        EXPRESS_VOLUME_TOTAL = #{expressVolumeTotal,jdbcType=DECIMAL},
			</if>
			<if test="expressQtyTotal != null" >
        EXPRESS_QTY_TOTAL = #{expressQtyTotal,jdbcType=NUMERIC},
			</if>
			<if test="inventoryWeightTotal != null" >
        INVENTORY_WEIGHT_TOTAL = #{inventoryWeightTotal,jdbcType=DECIMAL},
			</if>
			<if test="inventoryVolumeTotal != null" >
        INVENTORY_VOLUME_TOTAL = #{inventoryVolumeTotal,jdbcType=DECIMAL},
			</if>
			<if test="inventoryQtyTotal != null" >
        INVENTORY_QTY_TOTAL = #{inventoryQtyTotal,jdbcType=NUMERIC},
			</if>
			<if test="billingWeightTotal != null" >
        BILLING_WEIGHT_TOTAL = #{billingWeightTotal,jdbcType=DECIMAL},
			</if>
			<if test="billingVolumeTotal != null" >
        BILLING_VOLUME_TOTAL = #{billingVolumeTotal,jdbcType=DECIMAL},
			</if>
			<if test="billingQtyTotal != null" >
        BILLING_QTY_TOTAL = #{billingQtyTotal,jdbcType=NUMERIC},
			</if>
			<if test="intransitWeightTotal != null" >
        INTRANSIT_WEIGHT_TOTAL = #{intransitWeightTotal,jdbcType=DECIMAL},
			</if>
			<if test="intransitVolumeTotal != null" >
        INTRANSIT_VOLUME_TOTAL = #{intransitVolumeTotal,jdbcType=DECIMAL},
			</if>
			<if test="intransitQtyTotal != null" >
        INTRANSIT_QTY_TOTAL = #{intransitQtyTotal,jdbcType=NUMERIC},
			</if>
			<if test="deviationVolume != null" >
        DEVIATION_VOLUME = #{deviationVolume,jdbcType=DECIMAL},
			</if>
			<if test="statisticsTime != null" >
        STATISTICS_TIME = #{statisticsTime,jdbcType=TIMESTAMP},
			</if>
			<if test="type != null" >
        TYPE = #{type,jdbcType=VARCHAR},
			</if>
			<if test="type != null" >
        FORECAST_TIME = #{forecastTime,jdbcType=DATE},
			</if>
			<if test="type != null" >
        STATISTICS_DATE = #{statisticsDate,jdbcType=DATE},
			</if>
			<if test="type != null" >
        STATISTICS_HHMM = #{statisticsHHMM,jdbcType=VARCHAR},
			</if>
			<if test="departurearrival != null" >
        DEPARTUREARRIVAL = #{departurearrival,jdbcType=VARCHAR},
			</if>
		</set>
    where FORECAST_QUANTITY_ID = #{forecastQuantityId,jdbcType=VARCHAR}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.deppon.foss.module.transfer.platform.api.shared.domain.ForecastQuantityEntity" >
    update TFR.T_OPT_FORECAST_QUANTITY_P
    set BELONG_ORG_CODE = #{belongOrgCode,jdbcType=VARCHAR},
      REGION = #{region,jdbcType=VARCHAR},
      RELEVANT_ORG_CODE = #{relevantOrgCode,jdbcType=VARCHAR},
      WEIGHT_TOTAL = #{weightTotal,jdbcType=DECIMAL},
      VOLUME_TOTAL = #{volumeTotal,jdbcType=DECIMAL},
      WAYBILL_QTY_TOTAL = #{waybillQtyTotal,jdbcType=NUMERIC},
      GPS_ENABLED_RES_WEIGHT_TOTAL = #{gpsEnabledResWeightTotal,jdbcType=DECIMAL},
      GPS_ENABLED_RES_VOLUME_TOTAL = #{gpsEnabledResVolumeTotal,jdbcType=DECIMAL},
      GPS_ENABLED_RES_QTY_TOTAL = #{gpsEnabledResQtyTotal,jdbcType=NUMERIC},
      PRECISION_IFS_WEIGHT_TOTAL = #{precisionIfsWeightTotal,jdbcType=DECIMAL},
      PRECISION_IFS_VOLUME_TOTAL = #{precisionIfsVolumeTotal,jdbcType=DECIMAL},
      PRECISION_IFS_QTY_TOTAL = #{precisionIfsQtyTotal,jdbcType=NUMERIC},
      EXPRESS_WEIGHT_TOTAL = #{expressWeightTotal,jdbcType=DECIMAL},
      EXPRESS_VOLUME_TOTAL = #{expressVolumeTotal,jdbcType=DECIMAL},
      EXPRESS_QTY_TOTAL = #{expressQtyTotal,jdbcType=NUMERIC},
      INVENTORY_WEIGHT_TOTAL = #{inventoryWeightTotal,jdbcType=DECIMAL},
      INVENTORY_VOLUME_TOTAL = #{inventoryVolumeTotal,jdbcType=DECIMAL},
      INVENTORY_QTY_TOTAL = #{inventoryQtyTotal,jdbcType=NUMERIC},
      BILLING_WEIGHT_TOTAL = #{billingWeightTotal,jdbcType=DECIMAL},
      BILLING_VOLUME_TOTAL = #{billingVolumeTotal,jdbcType=DECIMAL},
      BILLING_QTY_TOTAL = #{billingQtyTotal,jdbcType=NUMERIC},
      INTRANSIT_WEIGHT_TOTAL = #{intransitWeightTotal,jdbcType=DECIMAL},
      INTRANSIT_VOLUME_TOTAL = #{intransitVolumeTotal,jdbcType=DECIMAL},
      INTRANSIT_QTY_TOTAL = #{intransitQtyTotal,jdbcType=NUMERIC},
      DEVIATION_VOLUME = #{deviationVolume,jdbcType=DECIMAL},
      STATISTICS_TIME = #{statisticsTime,jdbcType=TIMESTAMP},
      TYPE = #{type,jdbcType=VARCHAR},
      FORECAST_TIME = #{forecastTime,jdbcType=DATE},
      STATISTICS_DATE = #{statisticsDate,jdbcType=DATE},
      STATISTICS_HHMM = #{statisticsHHMM,jdbcType=VARCHAR},
      DEPARTUREARRIVAL = #{departurearrival,jdbcType=VARCHAR}
    where FORECAST_QUANTITY_ID = #{forecastQuantityId,jdbcType=VARCHAR}
	</update>
  
	<!-- select -->
	<select id="queryforecastQuantityList" resultMap="BaseResultMap" parameterType="com.deppon.foss.module.transfer.platform.api.shared.domain.ForecastQuantityEntity" >
		SELECT P.FORECAST_QUANTITY_ID,
		       P.BELONG_ORG_CODE,
		       BO.NAME BELONG_ORG_CODE_NAME,
		       P.REGION,
		       T.NAME REGION_NAME,
		       P.RELEVANT_ORG_CODE,
		       RO.NAME RELEVANT_ORG_CODE_NAME,
		       P.WEIGHT_TOTAL,
		       P.VOLUME_TOTAL,
		       P.WAYBILL_QTY_TOTAL,
		       P.GPS_ENABLED_RES_WEIGHT_TOTAL,
		       P.GPS_ENABLED_RES_VOLUME_TOTAL,
		       P.GPS_ENABLED_RES_QTY_TOTAL,
		       P.PRECISION_IFS_WEIGHT_TOTAL,
		       P.PRECISION_IFS_VOLUME_TOTAL,
		       P.PRECISION_IFS_QTY_TOTAL,
		       P.EXPRESS_WEIGHT_TOTAL,
		       P.EXPRESS_VOLUME_TOTAL,
		       P.EXPRESS_QTY_TOTAL,
		       P.INVENTORY_WEIGHT_TOTAL,
		       P.INVENTORY_VOLUME_TOTAL,
		       P.INVENTORY_QTY_TOTAL,
		       P.BILLING_WEIGHT_TOTAL,
		       P.BILLING_VOLUME_TOTAL,
		       P.BILLING_QTY_TOTAL,
		       P.INTRANSIT_WEIGHT_TOTAL,
		       P.INTRANSIT_VOLUME_TOTAL,
		       P.INTRANSIT_QTY_TOTAL,
		       P.DEVIATION_VOLUME,
		       P.STATISTICS_TIME,
		       P.TYPE,
		       P.FORECAST_TIME,
		       P.STATISTICS_DATE,
		       P.STATISTICS_HHMM
		  FROM TFR.T_OPT_FORECAST_QUANTITY_P P
		  INNER JOIN BSE.T_BAS_ORG BO
		  ON P.BELONG_ORG_CODE = BO.CODE
		  AND BO.ACTIVE = 'Y' 
		  INNER JOIN BSE.T_BAS_ORG RO
		  ON P.RELEVANT_ORG_CODE = RO.CODE
		  AND RO.ACTIVE = 'Y'
		  LEFT JOIN BSE.T_BAS_SITEGROUP T
		  ON P.REGION = T.VIRTUAL_CODE
		  AND T.ACTIVE = 'Y'
		<include refid="select_Where"/>
		ORDER BY STATISTICS_TIME, VOLUME_TOTAL DESC, WEIGHT_TOTAL DESC, WAYBILL_QTY_TOTAL DESC
	</select>
	
	<!-- selectByPeriod -->
	<select id="selectByPeriod" resultMap="BaseResultMap" parameterType="com.deppon.foss.module.transfer.platform.api.shared.domain.ForecastQuantityEntity" >
    SELECT 
		<include refid="Base_Column_List" />
    FROM TFR.T_OPT_FORECAST_QUANTITY_P
		<where>
			<if test="belongOrgCode!=null and belongOrgCode!='' ">
				AND BELONG_ORG_CODE = #{belongOrgCode}
			</if>
			<if test="relevantOrgCode!=null and relevantOrgCode!='' ">
				AND RELEVANT_ORG_CODE = #{relevantOrgCode}
			</if>
			<if test="statisticsTime!=null and statisticsTime!='' ">
			<![CDATA[
				AND STATISTICS_TIME >= #{statisticsTime}
				AND STATISTICS_TIME < to_timestamp(to_char(#{statisticsTime,jdbcType=VARCHAR}+1,'yyyy-mm-dd HH24:MI:SS'),'yyyy-mm-dd HH24:MI:SS')
			]]>
			</if>
			<if test="type!=null and type!='' ">
				AND TYPE = #{type}
			</if>
			<if test="forecastTime!=null and forecastTime!='' ">
				AND FORECAST_TIME = to_timestamp(to_char(#{forecastTime,jdbcType=VARCHAR},'yyyy-mm-dd'),'yyyy-mm-dd')
			</if>
			<if test="statisticsDate!=null and statisticsDate!='' ">
				AND STATISTICS_DATE = #{statisticsDate,jdbcType=DATE}
			</if>
			<if test="statisticsHHMM!=null and statisticsHHMM!='' ">
				AND STATISTICS_HHMM = #{statisticsHHMM}
			</if>
			<if test="departurearrival!=null and departurearrival!='' ">
				AND DEPARTUREARRIVAL = #{departurearrival}
			</if>
			
		</where>
	ORDER BY STATISTICS_TIME
	</select>
  
	<!-- selectMaxStatisticsTime -->
	<select id="selectMaxStatisticsTime" resultType="Date" parameterType="com.deppon.foss.module.transfer.platform.api.shared.domain.ForecastQuantityEntity" >
    SELECT MAX(STATISTICS_TIME) STATISTICS_TIME
	FROM TFR.T_OPT_FORECAST_QUANTITY_P FQ1
		<where>
			<if test="type!=null and type!='' ">
		FQ1.TYPE = #{type} 
			</if>
			<if test="belongOrgCode!=null and belongOrgCode!='' ">
		AND FQ1.BELONG_ORG_CODE = #{belongOrgCode} 
			</if>
		</where>
	</select>
  
	<!-- select forecastTime list -->
	<select id="selectTimeList" resultType="Date" parameterType="com.deppon.foss.module.transfer.platform.api.shared.domain.ForecastQuantityEntity" >
    SELECT FQ1.FORECAST_TIME FORECAST_TIME
	FROM TFR.T_OPT_FORECAST_QUANTITY_P FQ1
	INNER JOIN (SELECT STATISTICS_DATE, STATISTICS_HHMM FROM
	(SELECT STATISTICS_DATE, STATISTICS_HHMM FROM TFR.T_OPT_FORECAST_QUANTITY_P
		<where>
			<if test="type!=null and type!='' ">
		TYPE = #{type} 
			</if>
			<if test="belongOrgCode!=null and belongOrgCode!='' ">
		AND BELONG_ORG_CODE = #{belongOrgCode} 
			</if>
		</where>
	ORDER BY STATISTICS_TIME DESC) WHERE ROWNUM=1) FQ2
	ON
		<if test="type!=null and type!='' ">
		FQ1.TYPE = #{type} 
		</if>
		<if test="belongOrgCode!=null and belongOrgCode!='' ">
		AND FQ1.BELONG_ORG_CODE = #{belongOrgCode} 
		</if>
	AND FQ1.STATISTICS_DATE = FQ2.STATISTICS_DATE
	AND FQ1.STATISTICS_HHMM = FQ2.STATISTICS_HHMM
	GROUP BY FQ1.FORECAST_TIME
	ORDER BY FQ1.FORECAST_TIME
	</select>
	
	<!-- queryByPage -->
	<select id="queryByPage" resultMap="BaseResultMap" parameterType="com.deppon.foss.module.transfer.platform.api.shared.domain.ForecastQuantityEntity" >
    SELECT 
		<include refid="Base_Column_List" />
   	FROM TFR.T_OPT_FORECAST_QUANTITY_P FQ1
	INNER JOIN (SELECT STATISTICS_DATE STATISTICS_DATE_FQ2, STATISTICS_HHMM STATISTICS_HHMM_FQ2 FROM
	(SELECT STATISTICS_DATE, STATISTICS_HHMM FROM TFR.T_OPT_FORECAST_QUANTITY_P
		<where>
			<if test="type!=null and type!='' ">
		TYPE = #{type} 
			</if>
			<if test="belongOrgCode!=null and belongOrgCode!='' ">
		AND BELONG_ORG_CODE = #{belongOrgCode} 
			</if>
			<if test="relevantOrgCode!=null and relevantOrgCode!='' ">
	AND RELEVANT_ORG_CODE = #{relevantOrgCode}
			</if>
			<if test="forecastTime!=null and forecastTime!='' ">
	AND FORECAST_TIME = #{forecastTime,jdbcType=DATE}
			</if>
			<if test="departurearrival!=null and departurearrival!='' ">
		AND DEPARTUREARRIVAL = #{departurearrival}
	</if>
		</where>
	ORDER BY STATISTICS_TIME DESC) WHERE ROWNUM=1) FQ2 
	ON 
		<if test="type!=null and type!='' ">
		FQ1.TYPE = #{type} 
		</if>
		<if test="belongOrgCode!=null and belongOrgCode!='' ">
		AND FQ1.BELONG_ORG_CODE = #{belongOrgCode} 
		</if>
		<if test="relevantOrgCode!=null and relevantOrgCode!='' ">
		AND FQ1.RELEVANT_ORG_CODE = #{relevantOrgCode}
		</if>
		<if test="forecastTime!=null and forecastTime!='' ">
		AND FQ1.FORECAST_TIME = #{forecastTime,jdbcType=DATE}
		</if>
	AND FQ1.DATA_TYPE = '1' 
	AND FQ1.STATISTICS_DATE = FQ2.STATISTICS_DATE_FQ2
	AND FQ1.STATISTICS_HHMM = FQ2.STATISTICS_HHMM_FQ2
	ORDER BY FQ1.REGION
	</select>
	
	<!-- queryByRegionList -->
	<select id="queryByRegionList" resultMap="BaseResultMap" parameterType="com.deppon.foss.module.transfer.platform.api.shared.domain.ForecastQuantityEntity">
	SELECT FQ1.REGION REGION, FQ1.STATISTICS_DATE STATISTICS_DATE, FQ1.STATISTICS_HHMM STATISTICS_HHMM, FQ1.BELONG_ORG_CODE BELONG_ORG_CODE, FQ1.TYPE TYPE, FQ1.FORECAST_TIME FORECAST_TIME,FQ1.DEPARTUREARRIVAL DEPARTUREARRIVAL
	FROM TFR.T_OPT_FORECAST_QUANTITY_P FQ1
	INNER JOIN (SELECT STATISTICS_DATE, STATISTICS_HHMM FROM
	(SELECT STATISTICS_DATE, STATISTICS_HHMM FROM TFR.T_OPT_FORECAST_QUANTITY_P
		<where>
			<if test="type!=null and type!='' ">
		TYPE = #{type} 
			</if>
			<if test="belongOrgCode!=null and belongOrgCode!='' ">
		AND BELONG_ORG_CODE = #{belongOrgCode} 
			</if>
			<if test="relevantOrgCode!=null and relevantOrgCode!='' ">
		AND RELEVANT_ORG_CODE = #{relevantOrgCode}
			</if>
			<if test="forecastTime!=null and forecastTime!='' ">
		AND FORECAST_TIME = #{forecastTime,jdbcType=DATE}
			</if>
		<if test="departurearrival!=null and departurearrival!='' ">
		AND DEPARTUREARRIVAL = #{departurearrival}
		</if>
		</where>
	ORDER BY STATISTICS_TIME DESC) WHERE ROWNUM=1) FQ2 
	ON 
		<if test="type!=null and type!='' ">
		FQ1.TYPE = #{type} 
		</if>
		<if test="belongOrgCode!=null and belongOrgCode!='' ">
		AND FQ1.BELONG_ORG_CODE = #{belongOrgCode} 
		</if>
		<if test="relevantOrgCode!=null and relevantOrgCode!='' ">
	AND FQ1.RELEVANT_ORG_CODE = #{relevantOrgCode}
		</if>
		<if test="forecastTime!=null and forecastTime!='' ">
	AND FQ1.FORECAST_TIME = #{forecastTime,jdbcType=DATE}
		</if>
		<if test="departurearrival!=null and departurearrival!='' ">
	AND FQ1.DEPARTUREARRIVAL = #{departurearrival}
		</if>
	AND FQ1.DATA_TYPE = '2'
	AND FQ1.STATISTICS_DATE = FQ2.STATISTICS_DATE
	AND FQ1.STATISTICS_HHMM = FQ2.STATISTICS_HHMM
	GROUP BY FQ1.REGION, FQ1.STATISTICS_DATE, FQ1.STATISTICS_HHMM,FQ1.BELONG_ORG_CODE, FQ1.TYPE, FQ1.FORECAST_TIME, FQ1.DEPARTUREARRIVAL
	</select>
	
	<!-- queryByPageCount -->
	<select id="getCount" resultType="Long" parameterType="com.deppon.foss.module.transfer.platform.api.shared.domain.ForecastQuantityEntity" >
	SELECT
		COUNT(FORECAST_QUANTITY_ID)
	FROM TFR.T_OPT_FORECAST_QUANTITY_P FQ1
	INNER JOIN (
				SELECT MAX(STATISTICS_DATE) STATISTICS_DATE, MAX(STATISTICS_HHMM)
				STATISTICS_HHMM FROM TFR.T_OPT_FORECAST_QUANTITY_P
				WHERE BELONG_ORG_CODE =
				#{belongOrgCode} AND TYPE = #{type}
				AND RELEVANT_ORG_CODE = #{relevantOrgCode} AND FORECAST_TIME = #{forecastTime,jdbcType=DATE}
			) FQ2
		ON FQ1.BELONG_ORG_CODE = #{belongOrgCode}
		AND FQ1.TYPE = #{type}
		AND FQ1.RELEVANT_ORG_CODE = #{relevantOrgCode}
		AND FQ1.FORECAST_TIME = #{forecastTime,jdbcType=DATE}
		AND FQ1.DATA_TYPE = '1'
		AND FQ1.STATISTICS_DATE = FQ2.STATISTICS_DATE
		AND FQ1.STATISTICS_HHMM = FQ2.STATISTICS_HHMM
	<if test="departurearrival!=null and departurearrival!='' ">
		AND FQ1.DEPARTUREARRIVAL = #{departurearrival}
	</if>
	</select>

	<sql id="select_Where">
		<where>
			<if test="forecastQuantityId!=null and forecastQuantityId!='' ">
				P.FORECAST_QUANTITY_ID = #{forecastQuantityId}
			</if>
			<if test="belongOrgCode!=null and belongOrgCode!='' ">
				AND P.BELONG_ORG_CODE = #{belongOrgCode}
			</if>
			<if test="region!=null and region!='' ">
				AND P.REGION = #{region}
			</if>
			<if test="relevantOrgCode!=null and relevantOrgCode!='' ">
				AND P.RELEVANT_ORG_CODE = #{relevantOrgCode}
			</if>
			<if test="statisticsTime!=null and statisticsTime!='' ">
				AND P.STATISTICS_TIME = #{statisticsTime}
			</if>
			<if test="type!=null and type!='' ">
				AND P.TYPE = #{type}
			</if>
			<if test="forecastTime!=null and forecastTime!='' ">
				AND P.FORECAST_TIME = #{forecastTime,jdbcType=DATE}
			</if>
			<if test="statisticsDate!=null and statisticsDate!='' ">
				AND P.STATISTICS_DATE = #{statisticsDate,jdbcType=DATE}
			</if>
			<if test="statisticsHHMM!=null and statisticsHHMM!='' ">
				AND P.STATISTICS_HHMM = #{statisticsHHMM}
			</if>
			<if test="dataType!=null and dataType!='' ">
				AND P.DATA_TYPE = #{dataType}
			</if>
			<if test="dataType==null or dataType=='' ">
				AND P.DATA_TYPE != '1'
			</if>
			<if test="departurearrival!=null and departurearrival!='' ">
				AND P.DEPARTUREARRIVAL = #{departurearrival}
			</if>
		</where>
	</sql>
	<!--  BUG-36705 by 134019-foss-yuyongxiang 2013年6月25日 15:30:21 修改在库逻辑 -->
	<select id="queryStockWhitInStock"  parameterType="map" resultType="String">
		SELECT distinct
			tstock.waybill_no AS waybillNo
		FROM TFR.T_OPT_STOCK tstock
		WHERE
			tstock.org_code =  #{origOrgCode}
		AND
			tstock.next_org_code =  #{objectiveOrgCode}
		<!-- 
		AND tstock.in_stock_time >= #{countStartTime}
		AND #{countEndTime} > tstock.in_stock_time
		 -->
	</select>
	<!--  BUG-36705 by 134019-foss-yuyongxiang 2013年6月25日 15:30:21 交接未出发 -->
	<select id="queryStatisticalInquiriesWithWayBillNo" parameterType="map" resultType="com.deppon.foss.module.transfer.platform.api.shared.domain.StatisticalInquiriesEntity">
		SELECT
			o.name nextLine,
			w.WAYBILL_NO 					AS wayBillNo, 
			w.PRODUCT_CODE 					AS transportModelCode,
			w.GOODS_NAME 					AS goodName,
			w.GOODS_WEIGHT_TOTAL 			AS weight,
			w.GOODS_VOLUME_TOTAL 			AS volume,
			w.GOODS_QTY_TOTAL 				AS goodQty,
			w.RECEIVE_ORG_NAME 				AS destOrgName,
			w.CUSTOMER_PICKUP_ORG_NAME 		AS arriveOrgName,
			w.BILL_TIME 					AS billingTime,
			decode(w.product_code,
               		  'FLF','精准卡航',
                      'FSF','精准城运',
                      'LRF','精准汽运(长途)',
                      'SRF','精准汽运(短途)') transportModelName,
			#{goodsStatus,jdbcType=VARCHAR} goodStatus,
			case WAYBILLNO.current_Qty
				when 1 then
					w.GOODS_QTY_TOTAL
				else
					WAYBILLNO.current_Qty
			end currentQty,
			case WAYBILLNO.current_Qty
				when 1 then
					w.GOODS_WEIGHT_TOTAL
				else
					round(w.GOODS_WEIGHT_TOTAL / w.GOODS_QTY_TOTAL * WAYBILLNO.current_Qty, 2) 
			end currentWeight,
			case WAYBILLNO.current_Qty
				when 1 then
					w.GOODS_VOLUME_TOTAL
				else
					round(w.GOODS_VOLUME_TOTAL / w.GOODS_QTY_TOTAL * WAYBILLNO.current_Qty, 2)
			end currentVolume
		FROM pkp.t_srv_waybill w
		INNER JOIN (
			SELECT distinct NEXT_DEST_ORG_CODE,
	         WAYBILL_NO
	         , count(waybill_no) current_Qty
			FROM TFR.T_OPT_PATH_DETAIL 
			WHERE OBJECTIVE_ORG_CODE = #{origOrgCode}
			AND NEXT_DEST_ORG_CODE = #{objectiveOrgCode}
			AND ROUTE_NO = '1'
			AND ARRIVE_OR_LEAVE = #{arriveOrLeave}
			AND BEFORE_VEHICLE_NO = 'N/A'
			<if test="wayBillNo != null and wayBillNo != ''">
				AND WAYBILL_NO = #{wayBillNo}
			</if>
			GROUP BY NEXT_DEST_ORG_CODE, WAYBILL_NO
		) WAYBILLNO
		ON WAYBILLNO.WAYBILL_NO  = w.waybill_no
		AND w.active='Y'
		inner JOIN
			pkp.t_srv_actual_freight f
		ON 
			f.waybill_no = w.waybill_no
		AND 
			f.status = 'EFFECTIVE'
		left join bse.t_bas_org o on WAYBILLNO.NEXT_DEST_ORG_CODE = o.code and o.active = 'Y'
		<where>
		(
		<foreach collection="strList" item="item" separator="or">
			w.product_code = #{item,jdbcType=VARCHAR}
		</foreach>
		)
		AND w.active='Y'
		<if test="startTime != null and startTime != ''">
		AND w.BILL_TIME >= #{startTime}
		</if>
		<if test="endTime != null and endTime != ''">
			<![CDATA[
				AND w.BILL_TIME <= #{endTime} 
			]]>
		</if>
		</where>  
	</select>
	<select id="queryStatisticalInquiriesWithWayBillNoCount" parameterType="map" resultType="Map">
		SELECT
			count(w.WAYBILL_NO)					AS waybillNoCount,
			round(sum(w.GOODS_WEIGHT_TOTAL/1000), 2) 		AS weightSum,
			sum(w.GOODS_VOLUME_TOTAL) 			AS volumeSum,
			sum(case WAYBILLNO.current_Qty
				when 1 then
					w.GOODS_QTY_TOTAL
				else
					WAYBILLNO.current_Qty
			end) currentQty,
			round(sum(case WAYBILLNO.current_Qty
				when 1 then
					w.GOODS_WEIGHT_TOTAL / 1000
				else
					w.GOODS_WEIGHT_TOTAL / w.GOODS_QTY_TOTAL * WAYBILLNO.current_Qty / 1000
			end), 2) currentWeightSum,
			round(sum(case WAYBILLNO.current_Qty
				when 1 then
					w.GOODS_VOLUME_TOTAL
				else
					w.GOODS_VOLUME_TOTAL / w.GOODS_QTY_TOTAL * WAYBILLNO.current_Qty
			end), 2) currentVolumeSum
		FROM pkp.t_srv_waybill w
		INNER JOIN (
			SELECT distinct NEXT_DEST_ORG_CODE,
	         WAYBILL_NO
	         , count(waybill_no) current_Qty
			FROM TFR.T_OPT_PATH_DETAIL 
			WHERE OBJECTIVE_ORG_CODE = #{origOrgCode}
			AND NEXT_DEST_ORG_CODE = #{objectiveOrgCode}
			AND ROUTE_NO = '1'
			AND ARRIVE_OR_LEAVE = #{arriveOrLeave}
			AND BEFORE_VEHICLE_NO = 'N/A'
			<if test="wayBillNo != null and wayBillNo != ''">
				AND WAYBILL_NO = #{wayBillNo}
			</if>
			GROUP BY NEXT_DEST_ORG_CODE, WAYBILL_NO
		) WAYBILLNO
		ON WAYBILLNO.WAYBILL_NO  = w.waybill_no
		inner JOIN
			pkp.t_srv_actual_freight f
		ON 
			f.waybill_no = w.waybill_no
		AND 
			f.status = 'EFFECTIVE'	
		left join bse.t_bas_org o on WAYBILLNO.NEXT_DEST_ORG_CODE = o.code and o.active = 'Y'
		<where>
		(
		<foreach collection="strList" item="item" separator="or">
							w.product_code = #{item,jdbcType=VARCHAR}
		</foreach>
		)
		AND w.active='Y'
		<if test="startTime != null and startTime != ''">
		AND w.BILL_TIME >= #{startTime}
		</if>
		<if test="endTime != null and endTime != ''">
		<![CDATA[
		AND w.BILL_TIME <= #{endTime}
		]]>
		</if>
		</where>  
	</select>
	<select id="queryStatisticalInquiriesWithHandover" parameterType="map" resultType="com.deppon.foss.module.transfer.platform.api.shared.domain.StatisticalInquiriesEntity">
		select distinct o.name as nextLine,
                wayBillNo,
                currentVolume,
                currentWeight,
                currentQty,
                goodQty,
                vehicleassembleNo,
                vehicleNo,
                transportModelCode,
                transportModelName,
                billingTime,
                #{goodsStatus,jdbcType=VARCHAR} goodStatus
  from (SELECT w.WAYBILL_NO AS wayBillNo,
               round(sum(hd.handover_volume), 2) AS currentVolume,
               round(sum(hd.handover_weight), 2) AS currentWeight,
               sum(hd.handover_goods_qty) AS currentQty,
               w.GOODS_QTY_TOTAL AS goodQty,
               v.vehicleassemble_no AS vehicleassembleNo,
               hb.vehicle_no AS vehicleNo,
               w.product_code transportModelCode,
               w.bill_time billingTime,
               decode(w.product_code,
               		  'FLF','精准卡航',
                      'FSF','精准城运',
                      'LRF','精准汽运(长途)',
                      'SRF','精准汽运(短途)') transportModelName
          FROM tfr.t_opt_handoverbill_detail hd
		LEFT JOIN tfr.t_opt_handoverbill hb
		ON hd.handover_no = hb.handover_no
		LEFT JOIN tfr.t_opt_vehicleassemble_detail vd
          on hb.handover_no = vd.handover_no
        left join tfr.t_opt_vehicleassemblebill v
          on vd.vehicleassemblebill_id = v.id
		LEFT JOIN
			pkp.t_srv_waybill w
		ON
			hd.waybill_no = w.waybill_no 
		AND 
			w.active = 'Y'
		inner JOIN
			pkp.t_srv_actual_freight f
		ON 
			f.waybill_no = w.waybill_no
		AND 
			f.status = 'EFFECTIVE'
		LEFT JOIN
			pkp.t_srv_product p 
		ON
			w.product_code = p.code 
		AND 
			p.active = 'Y'
		LEFT JOIN
			tfr.T_OPT_TRUCK_TASK_BILL taskBill
		ON
			taskBill.Bill_No = hb.handover_no
		LEFT JOIN
			tfr.T_OPT_TRUCK_TASK_DETAIL taskDetail
		ON
			taskDetail.Id = taskBill.Truck_Task_Detail_Id
		<where>
			hb.dest_org_code = #{origOrgCode}
			<if test="taskDetailStatus!=null and taskDetailStatus!='' ">
			AND taskDetail.Status = #{taskDetailStatus} <!-- #{taskDetailStatus} 'ONTHEWAY' -->
			</if>
			AND hb.handoverbill_state IN 
				<foreach collection="handoverbillStateList" close=")" open="(" item="handoverbillState" separator=",">
					#{handoverbillState}
				</foreach>
			AND (
				<foreach collection="strList" item="item" separator="or">
					w.product_code = #{item,jdbcType=VARCHAR}
				</foreach>
				)
			<if test="ontheway != null">
				<if test="startTime != null and startTime != ''">
					AND taskDetail.PLAN_ARRIVE_TIME >= #{startTime}
				</if>
				<if test="endTime != null and endTime != ''">
					<![CDATA[
					AND taskDetail.PLAN_ARRIVE_TIME <= #{endTime} 
					]]>
				</if>
			</if>
			<if test="undepart != null">
				<if test="startTime != null and startTime != ''">
					AND hb.create_time >= #{startTime}
				</if>
				<if test="endTime != null and endTime != ''">
					<![CDATA[
					AND hb.create_time <= #{endTime} 
					]]>
				</if>
			</if>
			<if test="wayBillNo != null and wayBillNo != ''">
				AND hd.WAYBILL_NO = #{wayBillNo}
			</if>
			group by w.WAYBILL_NO, w.PRODUCT_CODE
			, w.GOODS_NAME, w.GOODS_QTY_TOTAL, w.RECEIVE_ORG_NAME
			, w.CUSTOMER_PICKUP_ORG_NAME, w.BILL_TIME, v.vehicleassemble_no, hb.vehicle_no
			,w.product_code,w.bill_time
		</where>
		) R
		INNER JOIN TFR.T_OPT_PATH_DETAIL PD ON R.waybillNo = PD.WAYBILL_NO
		and pd.orig_org_code = #{origOrgCode}
		<if test="objectiveOrgCode != null">
			AND PD.OBJECTIVE_ORG_CODE = #{objectiveOrgCode}
		</if>
		left join bse.t_bas_org o on pd.OBJECTIVE_ORG_CODE = o.code and o.active = 'Y'
	</select>
	<select id="queryStatisticalInquiriesWithHandoverCount" parameterType="map" resultType="Map">
		select count(wayBillNo) waybillNoCount,
		round(sum(currentVolume), 2) currentVolumeSum,
		round(sum(currentWeight / 1000), 2) currentWeightSum,
		sum(currentQty) currentQty
	from (select distinct o.name as nextLine,
                wayBillNo,
                currentVolume,
                currentWeight,
                currentQty,
                goodQty,
                vehicleassembleNo,
                vehicleNo
  from (SELECT w.WAYBILL_NO AS wayBillNo,
               round(sum(hd.handover_volume), 2) AS currentVolume,
               round(sum(hd.handover_weight), 2) AS currentWeight,
               sum(hd.handover_goods_qty) AS currentQty,
               w.GOODS_QTY_TOTAL AS goodQty,
               v.vehicleassemble_no AS vehicleassembleNo,
               hb.vehicle_no AS vehicleNo
          FROM tfr.t_opt_handoverbill_detail hd
		LEFT JOIN tfr.t_opt_handoverbill hb
		ON hd.handover_no = hb.handover_no
		LEFT JOIN tfr.t_opt_vehicleassemble_detail vd
          on hb.handover_no = vd.handover_no
        left join tfr.t_opt_vehicleassemblebill v
          on vd.vehicleassemblebill_id = v.id
		LEFT JOIN
			pkp.t_srv_waybill w
		ON
			hd.waybill_no = w.waybill_no 
		AND 
			w.active = 'Y'
		inner JOIN
			pkp.t_srv_actual_freight f
		ON 
			f.waybill_no = w.waybill_no
		AND 
			f.status = 'EFFECTIVE'
		LEFT JOIN
			pkp.t_srv_product p 
		ON
			w.product_code = p.code 
		AND 
			p.active = 'Y'
		LEFT JOIN
			tfr.T_OPT_TRUCK_TASK_BILL taskBill
		ON
			taskBill.Bill_No = hb.handover_no
		LEFT JOIN
			tfr.T_OPT_TRUCK_TASK_DETAIL taskDetail
		ON
			taskDetail.Id = taskBill.Truck_Task_Detail_Id
		<where>
			hb.dest_org_code = #{origOrgCode}
			<if test="taskDetailStatus!=null and taskDetailStatus!='' ">
			AND taskDetail.Status = #{taskDetailStatus} <!-- #{taskDetailStatus} 'ONTHEWAY' -->
			</if>
			AND hb.handoverbill_state IN 
				<foreach collection="handoverbillStateList" close=")" open="(" item="handoverbillState" separator=",">
					#{handoverbillState}
				</foreach>
			AND (
				<foreach collection="strList" item="item" separator="or">
					w.product_code = #{item,jdbcType=VARCHAR}
				</foreach>
				)
			<if test="ontheway != null">
				<if test="startTime != null and startTime != ''">
					AND taskDetail.PLAN_ARRIVE_TIME >= #{startTime}
				</if>
				<if test="endTime != null and endTime != ''">
					<![CDATA[
					AND taskDetail.PLAN_ARRIVE_TIME <= #{endTime} 
					]]>
				</if>
			</if>
			<if test="undepart != null">
				<if test="startTime != null and startTime != ''">
					AND hb.create_time >= #{startTime}
				</if>
				<if test="endTime != null and endTime != ''">
					<![CDATA[
					AND hb.create_time <= #{endTime} 
					]]>
				</if>
			</if>
			<if test="wayBillNo != null and wayBillNo != ''">
				AND hd.WAYBILL_NO = #{wayBillNo}
			</if>
			group by w.WAYBILL_NO, w.PRODUCT_CODE
			, w.GOODS_NAME, w.GOODS_QTY_TOTAL, w.RECEIVE_ORG_NAME
			, w.CUSTOMER_PICKUP_ORG_NAME, w.BILL_TIME, v.vehicleassemble_no, hb.vehicle_no
		</where>
		) R
		INNER JOIN TFR.T_OPT_PATH_DETAIL PD ON R.waybillNo = PD.WAYBILL_NO
		and pd.orig_org_code = #{origOrgCode}
		<if test="objectiveOrgCode != null">
			AND (PD.OBJECTIVE_ORG_CODE = #{objectiveOrgCode})
		</if>
		left join bse.t_bas_org o on pd.OBJECTIVE_ORG_CODE = o.code and o.active = 'Y'
		)
	</select>
	<select id="queryStatisticalInquiriesWithInLibrary" parameterType="map" resultType="com.deppon.foss.module.transfer.platform.api.shared.domain.StatisticalInquiriesEntity">
		select o.name nextLine,
		       ws.waybill_no waybillNo,
		       w.goods_qty_total goodQty,
		       sum(ws.stock_goods_qty) currentQty,
		       round(sum(w.goods_weight_total / w.goods_qty_total *
		                 ws.stock_goods_qty),
		                 3) currentWeight,
		       round(sum(w.goods_volume_total / w.goods_qty_total *
		                 ws.stock_goods_qty),
		                 3) currentVolume,
               w.product_code transportModelCode,
               w.bill_time billingTime,
               decode(w.product_code,
               		  'FLF','精准卡航',
                      'FSF','精准城运',
                      'LRF','精准汽运(长途)',
                      'SRF','精准汽运(短途)') transportModelName,
               #{goodsStatus,jdbcType=VARCHAR} goodStatus
		  from tfr.t_opt_waybill_stock ws
		  left join pkp.t_srv_waybill w on ws.waybill_no = w.waybill_no
		  left join pkp.t_srv_actual_freight f on f.waybill_no = w.waybill_no
		  left join bse.t_bas_org o on ws.next_org_code = o.code and o.active = 'Y'
		  where w.active = 'Y'
			and f.status = 'EFFECTIVE'
			<if test="objectiveOrgCode != null">
				AND ws.next_org_code = #{objectiveOrgCode}
			</if>
			and (
			<foreach collection="strList" item="item" separator="or">
				w.product_code = #{item,jdbcType=VARCHAR}
			</foreach>
			)
			<if test="startTime != null and startTime != ''">
				AND ws.last_in_stock_time >= #{startTime}
			</if>
			<if test="endTime != null and endTime != ''">
				<![CDATA[
				AND ws.last_in_stock_time <= #{endTime} 
				]]>
			</if>
			and ws.org_code = #{origOrgCode}
			<if test="wayBillNo != null and wayBillNo != ''">
				AND ws.WAYBILL_NO = #{wayBillNo}
			</if>
		  group by o.name, ws.next_org_code, ws.waybill_no, w.goods_qty_total,w.product_code,w.bill_time
	</select>
	<select id="queryStatisticalInquiriesWithInLibraryCount" parameterType="map" resultType="Map">
		select 
			count(waybillNo) waybillNoCount, 
			sum(currentQty) currentQty, 
			round(sum(currentWeight / 1000), 2) currentWeightSum, 
			round(sum(currentVolume), 2) currentVolumeSum
		from (
		select o.name nextLine,
		       ws.waybill_no waybillNo,
		       w.goods_qty_total goodQty,
		       sum(ws.stock_goods_qty) currentQty,
		       round(sum(w.goods_weight_total / w.goods_qty_total *
		                 ws.stock_goods_qty),
		                 3) currentWeight,
		       round(sum(w.goods_volume_total / w.goods_qty_total *
		                 ws.stock_goods_qty),
		                 3) currentVolume
		  from tfr.t_opt_waybill_stock ws
		  left join pkp.t_srv_waybill w on ws.waybill_no = w.waybill_no
		  left join pkp.t_srv_actual_freight f on f.waybill_no = w.waybill_no
		  left join bse.t_bas_org o on ws.next_org_code = o.code and o.active = 'Y'
		  where w.active = 'Y'
			and f.status = 'EFFECTIVE'
			<if test="objectiveOrgCode != null">
				AND ws.next_org_code = #{objectiveOrgCode}
			</if>
			and (
			<foreach collection="strList" item="item" separator="or">
				w.product_code = #{item,jdbcType=VARCHAR}
			</foreach>
			)
			<if test="startTime != null and startTime != ''">
				AND ws.last_in_stock_time >= #{startTime}
			</if>
			<if test="endTime != null and endTime != ''">
				<![CDATA[
				AND ws.last_in_stock_time <= #{endTime} 
				]]>
			</if>
			and ws.org_code = #{origOrgCode}
			<if test="wayBillNo != null and wayBillNo != ''">
				AND ws.WAYBILL_NO = #{wayBillNo}
			</if>
		  group by o.name, ws.next_org_code, ws.waybill_no, w.goods_qty_total
		  )
	</select>
	
	<select id="queryStatisticalInquiriesWithUnloadingNotReach" parameterType="java.util.Map" resultType="com.deppon.foss.module.transfer.platform.api.shared.domain.StatisticalInquiriesEntity">
SELECT t.next_org_name nextLine,
       #{goodsStatus,jdbcType=VARCHAR} goodStatus,
       t.waybill_no wayBillNo,
       t.goods_qty_total goodQty,
       t.pieces currentQty,
       round(t.goods_qty_total * t.goods_volume_total / t.pieces, 2) currentVolume,
       round(t.goods_qty_total * t.goods_weight_total / t.pieces / 1000, 2) currentWeight,
       t.product_name transportModelName,
       t.bill_time billingTime,
       t.vehicleassemble_no vehicleassembleNo,
       t.vehicle_no vehicleNo
  FROM (SELECT o.name next_org_name,
               w.waybill_no,
               w.goods_qty_total,
               w.goods_weight_total,
               w.goods_volume_total,
               h.vehicle_no,
               v.vehicleassemble_no,
               decode(w.product_code,
               		  'FLF','精准卡航',
                      'FSF','精准城运',
                      'LRF','精准汽运(长途)',
                      'SRF','精准汽运(短途)') product_name,
               w.bill_time,
               decode(p.if_partial_stowage, 'Y', COUNT(1), w.goods_qty_total) pieces
          FROM tfr.t_opt_truck_task_detail td
         INNER JOIN tfr.t_opt_truck_task_bill tb
            ON tb.truck_task_detail_id = td.id
         INNER JOIN tfr.t_opt_handoverbill h
            ON h.handover_no = tb.bill_no
           AND h.handoverbill_state = 40
           AND h.dest_org_code = #{origOrgCode,jdbcType=VARCHAR}
         INNER JOIN tfr.t_opt_handoverbill_detail hd
            ON hd.handover_no = h.handover_no
         INNER JOIN pkp.t_srv_waybill w
            ON hd.waybill_no = w.waybill_no
           <if test="wayBillNo != null and wayBillNo != ''">
				AND w.waybill_no = #{wayBillNo,jdbcType=VARCHAR}
			</if>
           AND w.product_code IN
           <foreach collection="strList" close=")" open="(" item="item" separator=",">
		   		#{item,jdbcType=VARCHAR}
		   </foreach>
           AND w.active = 'Y'
         INNER JOIN pkp.t_srv_actual_freight f
            ON f.waybill_no = w.waybill_no
           AND f.status = 'EFFECTIVE'
         INNER JOIN tfr.t_opt_transport_path p
            ON p.waybill_no = w.waybill_no
         INNER JOIN tfr.t_opt_path_detail pd
            ON pd.waybill_no = p.waybill_no
           AND pd.orig_org_code = #{origOrgCode,jdbcType=VARCHAR}
           AND pd.objective_org_code = #{objectiveOrgCode,jdbcType=VARCHAR}
         INNER JOIN bse.t_bas_org o
            ON o.code = pd.objective_org_code
           AND o.active = 'Y'
          LEFT JOIN tfr.t_opt_vehicleassemble_detail vd
            ON vd.handover_no = h.handover_no
          LEFT JOIN tfr.t_opt_vehicleassemblebill v
            ON vd.vehicleassemblebill_id = v.id
           AND v.state != '90'
         WHERE td.dest_org_code = #{origOrgCode,jdbcType=VARCHAR}
           AND td.status = 'ARRIVED'
           AND td.actual_arrive_time BETWEEN #{startTime,jdbcType=TIMESTAMP} AND #{endTime,jdbcType=TIMESTAMP}
           AND NOT EXISTS (SELECT 1
		          FROM pkp.t_srv_waybill_sign_result r
		         WHERE r.waybill_no = w.waybill_no
		           AND r.active = 'Y')
         GROUP BY o.name,
                  w.waybill_no,
                  w.goods_qty_total,
                  w.goods_weight_total,
                  w.goods_volume_total,
                  h.vehicle_no,
                  v.vehicleassemble_no,
                  w.product_code,
                  w.bill_time,
                  p.if_partial_stowage) t
	</select>
	<select id="queryStatisticalInquiriesWithUnloadingNotReachCount" parameterType="java.util.Map" resultType="java.util.Map">
SELECT sum(t.pieces) currentQty,
       round(sum(t.goods_qty_total * t.goods_volume_total / t.pieces), 2) currentVolumeSum,
       round(sum(t.goods_qty_total * t.goods_weight_total / t.pieces / 1000), 2) currentWeightSum,
       count(1) waybillNoCount
  FROM (SELECT o.name next_org_name,
               w.waybill_no,
               w.goods_qty_total,
               w.goods_weight_total,
               w.goods_volume_total,
               h.vehicle_no,
               v.vehicleassemble_no,
               decode(p.if_partial_stowage, 'Y', COUNT(1), w.goods_qty_total) pieces
          FROM tfr.t_opt_truck_task_detail td
         INNER JOIN tfr.t_opt_truck_task_bill tb
            ON tb.truck_task_detail_id = td.id
         INNER JOIN tfr.t_opt_handoverbill h
            ON h.handover_no = tb.bill_no
           AND h.handoverbill_state = 40
           AND h.dest_org_code = #{origOrgCode,jdbcType=VARCHAR}
         INNER JOIN tfr.t_opt_handoverbill_detail hd
            ON hd.handover_no = h.handover_no
         INNER JOIN pkp.t_srv_waybill w
            ON hd.waybill_no = w.waybill_no
           <if test="wayBillNo != null and wayBillNo != ''">
				AND w.waybill_no = #{wayBillNo,jdbcType=VARCHAR}
			</if>
           AND w.product_code IN
           <foreach collection="strList" close=")" open="(" item="item" separator=",">
		   		#{item,jdbcType=VARCHAR}
		   </foreach>
           AND w.active = 'Y'
         INNER JOIN pkp.t_srv_actual_freight f
            ON f.waybill_no = w.waybill_no
           AND f.status = 'EFFECTIVE'
         INNER JOIN tfr.t_opt_transport_path p
            ON p.waybill_no = w.waybill_no
         INNER JOIN tfr.t_opt_path_detail pd
            ON pd.waybill_no = p.waybill_no
           AND pd.orig_org_code = #{origOrgCode,jdbcType=VARCHAR}
           AND pd.objective_org_code = #{objectiveOrgCode,jdbcType=VARCHAR}
         INNER JOIN bse.t_bas_org o
            ON o.code = pd.objective_org_code
           AND o.active = 'Y'
          LEFT JOIN tfr.t_opt_vehicleassemble_detail vd
            ON vd.handover_no = h.handover_no
          LEFT JOIN tfr.t_opt_vehicleassemblebill v
            ON vd.vehicleassemblebill_id = v.id
           AND v.state != '90'
         WHERE td.dest_org_code = #{origOrgCode,jdbcType=VARCHAR}
           AND td.status = 'ARRIVED'
           AND td.actual_arrive_time BETWEEN #{startTime,jdbcType=TIMESTAMP} AND #{endTime,jdbcType=TIMESTAMP}
           AND NOT EXISTS (SELECT 1
		          FROM pkp.t_srv_waybill_sign_result r
		         WHERE r.waybill_no = w.waybill_no
		           AND r.active = 'Y')
         GROUP BY o.name,
                  w.waybill_no,
                  w.goods_qty_total,
                  w.goods_weight_total,
                  w.goods_volume_total,
                  h.vehicle_no,
                  v.vehicleassemble_no,
                  p.if_partial_stowage) t
	</select>
	
	<!-- 四周均量 -->
	<select id="countForecastQty" resultMap="BaseResultMap" parameterType="com.deppon.foss.module.transfer.platform.api.shared.domain.ForecastQuantityEntity" >
		select nvl(round(avg(fq.weight_total), 3), 0) weight_Total,
		       nvl(round(avg(fq.volume_total), 3), 0) volume_Total,
		       nvl(cast(avg(fq.waybill_qty_total) as int), 0) waybill_Qty_Total,
		       nvl(round(avg(fq.gps_enabled_res_weight_total), 3), 0) gps_Enabled_Res_Weight_Total,
		       nvl(round(avg(fq.gps_enabled_res_volume_total), 3), 0) gps_Enabled_Res_Volume_Total,
		       nvl(cast(avg(fq.gps_enabled_res_qty_total) as int), 0) gps_Enabled_Res_Qty_Total,
		       nvl(round(avg(fq.precision_ifs_weight_total), 3), 0) precision_Ifs_Weight_Total,
		       nvl(round(avg(fq.precision_ifs_volume_total), 3), 0) precision_Ifs_Volume_Total,
		       nvl(cast(avg(fq.precision_ifs_qty_total) as int), 0) precision_Ifs_Qty_Total,
		       nvl(round(avg(fq.inventory_weight_total), 3), 0) inventory_Weight_Total,
		       nvl(round(avg(fq.inventory_volume_total), 3), 0) inventory_Volume_Total,
		       nvl(cast(avg(fq.inventory_qty_total) as int), 0) inventory_Qty_Total,
		       nvl(round(avg(fq.billing_weight_total), 3), 0) billing_Weight_Total,
		       nvl(round(avg(fq.billing_volume_total), 3), 0) billing_Volume_Total,
		       nvl(cast(avg(fq.billing_qty_total) as int), 0) billing_Qty_Total,
		       nvl(round(avg(fq.intransit_weight_total), 3), 0) intransit_Weight_Total,
		       nvl(round(avg(fq.intransit_volume_total), 3), 0) intransit_Volume_Total,
		       nvl(cast(avg(fq.intransit_qty_total) as int), 0) intransit_Qty_Total,
		       nvl(round(avg(fq.deviation_volume), 3), 0) deviation_Volume,
		       nvl(round(avg(fq.express_weight_total), 3), 0) express_Weight_Total,
		       nvl(round(avg(fq.express_volume_total), 3), 0) express_Volume_Total,
		       nvl(cast(avg(fq.express_qty_total) as int), 0) express_Qty_Total
		  from tfr.t_opt_forecast_quantity_p fq
		 where 1 = 1
		   and fq.forecast_time in
		       (#{forecastTime} - 7 * 1,
		        #{forecastTime} - 7 * 2,
		        #{forecastTime} - 7 * 3,
		        #{forecastTime} - 7 * 4)
		   and fq.statistics_hhmm = #{statisticsHHMM}
		   and fq.type = #{type}
		   and fq.data_type = '2'
		   and fq.departurearrival = #{departurearrival}
		   and fq.belong_org_code = #{belongOrgCode}
		   and fq.relevant_org_code = #{relevantOrgCode}
	</select>

	<!--单日货量-->
	<select id="countForecastQtyOneDay" resultMap="BaseResultMap" parameterType="com.deppon.foss.module.transfer.platform.api.shared.domain.ForecastQuantityEntity" >
		select nvl(round(sum(fq.weight_total), 3), 0) weight_Total,
		       nvl(round(sum(fq.volume_total), 3), 0) volume_Total,
		       nvl(cast(sum(fq.waybill_qty_total) as int), 0) waybill_Qty_Total,
		       nvl(round(sum(fq.gps_enabled_res_weight_total), 3), 0) gps_Enabled_Res_Weight_Total,
		       nvl(round(sum(fq.gps_enabled_res_volume_total), 3), 0) gps_Enabled_Res_Volume_Total,
		       nvl(cast(sum(fq.gps_enabled_res_qty_total) as int), 0) gps_Enabled_Res_Qty_Total,
		       nvl(round(sum(fq.precision_ifs_weight_total), 3), 0) precision_Ifs_Weight_Total,
		       nvl(round(sum(fq.precision_ifs_volume_total), 3), 0) precision_Ifs_Volume_Total,
		       nvl(cast(sum(fq.precision_ifs_qty_total) as int), 0) precision_Ifs_Qty_Total,
		       nvl(round(sum(fq.inventory_weight_total), 3), 0) inventory_Weight_Total,
		       nvl(round(sum(fq.inventory_volume_total), 3), 0) inventory_Volume_Total,
		       nvl(cast(sum(fq.inventory_qty_total) as int), 0) inventory_Qty_Total,
		       nvl(round(sum(fq.billing_weight_total), 3), 0) billing_Weight_Total,
		       nvl(round(sum(fq.billing_volume_total), 3), 0) billing_Volume_Total,
		       nvl(cast(sum(fq.billing_qty_total) as int), 0) billing_Qty_Total,
		       nvl(round(sum(fq.intransit_weight_total), 3), 0) intransit_Weight_Total,
		       nvl(round(sum(fq.intransit_volume_total), 3), 0) intransit_Volume_Total,
		       nvl(cast(sum(fq.intransit_qty_total) as int), 0) intransit_Qty_Total,
		       nvl(round(sum(fq.deviation_volume), 3), 0) deviation_Volume,
		       nvl(round(sum(fq.express_weight_total), 3), 0) express_Weight_Total,
		       nvl(round(sum(fq.express_volume_total), 3), 0) express_Volume_Total,
		       nvl(cast(sum(fq.express_qty_total) as int), 0) express_Qty_Total
		  from tfr.t_opt_forecast_quantity_p fq
		 where 1 = 1
		   and fq.forecast_time = #{forecastTime}
		   <if test="statisticsDate != null and statisticsDate != ''">
		   and fq.statistics_Date = #{statisticsDate}
		   </if>
		   and fq.statistics_hhmm = #{statisticsHHMM}
		   <if test="type != null and type != ''">
		   and fq.type = #{type}
		   </if>
		   <if test="dataType != null and dataType != ''">
		   and fq.data_type = #{dataType}
		   </if>
		   <if test="departurearrival != null and departurearrival != ''">
		   and fq.departurearrival = #{departurearrival}
		   </if>
		   and fq.belong_org_code = #{belongOrgCode}
		   <if test="relevantOrgCode != null and relevantOrgCode != ''">
		   and fq.relevant_org_code = #{relevantOrgCode}
		   </if>
	</select>

	<!--单周货量-->
	<select id="countForecastQtyOneWeek" resultMap="BaseResultMap" parameterType="com.deppon.foss.module.transfer.platform.api.shared.domain.ForecastQuantityEntity" >
		select nvl(round(sum(fq.weight_total), 3), 0) weight_Total,
		       nvl(round(sum(fq.volume_total), 3), 0) volume_Total,
		       nvl(cast(sum(fq.waybill_qty_total) as int), 0) waybill_Qty_Total,
		       nvl(round(sum(fq.gps_enabled_res_weight_total), 3), 0) gps_Enabled_Res_Weight_Total,
		       nvl(round(sum(fq.gps_enabled_res_volume_total), 3), 0) gps_Enabled_Res_Volume_Total,
		       nvl(cast(sum(fq.gps_enabled_res_qty_total) as int), 0) gps_Enabled_Res_Qty_Total,
		       nvl(round(sum(fq.precision_ifs_weight_total), 3), 0) precision_Ifs_Weight_Total,
		       nvl(round(sum(fq.precision_ifs_volume_total), 3), 0) precision_Ifs_Volume_Total,
		       nvl(cast(sum(fq.precision_ifs_qty_total) as int), 0) precision_Ifs_Qty_Total,
		       nvl(round(sum(fq.inventory_weight_total), 3), 0) inventory_Weight_Total,
		       nvl(round(sum(fq.inventory_volume_total), 3), 0) inventory_Volume_Total,
		       nvl(cast(sum(fq.inventory_qty_total) as int), 0) inventory_Qty_Total,
		       nvl(round(sum(fq.billing_weight_total), 3), 0) billing_Weight_Total,
		       nvl(round(sum(fq.billing_volume_total), 3), 0) billing_Volume_Total,
		       nvl(cast(sum(fq.billing_qty_total) as int), 0) billing_Qty_Total,
		       nvl(round(sum(fq.intransit_weight_total), 3), 0) intransit_Weight_Total,
		       nvl(round(sum(fq.intransit_volume_total), 3), 0) intransit_Volume_Total,
		       nvl(cast(sum(fq.intransit_qty_total) as int), 0) intransit_Qty_Total,
		       nvl(round(sum(fq.deviation_volume), 3), 0) deviation_Volume,
		       nvl(round(sum(fq.express_weight_total), 3), 0) express_Weight_Total,
		       nvl(round(sum(fq.express_volume_total), 3), 0) express_Volume_Total,
		       nvl(cast(sum(fq.express_qty_total) as int), 0) express_Qty_Total
		  from tfr.t_opt_forecast_quantity_p fq
		 where 1 = 1
		 <![CDATA[
		   and fq.forecast_time >= #{forecastTime}
		   and fq.forecast_time < #{forecastTime} + 7
		 ]]>
		   and fq.statistics_hhmm = #{statisticsHHMM}
		   and fq.type = #{type}
		   and fq.data_type = #{dataType}
		   and fq.departurearrival = #{departurearrival}
		   and fq.belong_org_code = #{belongOrgCode}
		   <if test="relevantOrgCode != null and relevantOrgCode != ''">
		   and fq.relevant_org_code = #{relevantOrgCode}
		   </if>
	</select>
	
	<!-- depart_deliveryvolume -->
	<select id="queryForecastQtyByRelevantOrgCode" resultMap="BaseResultMap" parameterType="map" >
		select sd.transfer_center relevant_org_code,
		       sum(p.weight_total) weight_total,
		       sum(p.volume_total) volume_total,
		       sum(p.waybill_qty_total) waybill_qty_total
		  from tfr.t_opt_forecast_quantity_p p
		 inner join bse.t_bas_sales_department sd
		    on sd.code = p.relevant_org_code
		   and sd.transfer_center is not null 
		   and sd.active='Y'
		 where sd.transfer_center in
		 <foreach collection="deptCodes" close=")" open="(" item="deptCode" separator=",">
			#{deptCode}
		</foreach>
		and sd.active='Y'
		and p.departurearrival='depart_deliveryvolume'
		<![CDATA[
			and p.statistics_time >= #{forecastDate}-1
			and p.statistics_time < to_timestamp(to_char(#{forecastDate,jdbcType=VARCHAR},'yyyy-mm-dd HH24:MI:SS'),'yyyy-mm-dd HH24:MI:SS')
			and p.forecast_time = #{forecastDate}
		]]>
		 group by sd.transfer_center, p.forecast_time
	</select>
	
	<select id="queryForecastWeightByRelevantOrgCode" resultMap="BaseResultMap" parameterType="map" >
		select #{deptCode} relevantOrgCode, sum(weightTotal) weightTotal
		  from (select sum(fqp.weight_total) weightTotal
		          from tfr.t_opt_forecast_quantity_p fqp
		         where 1 = 1
		           and fqp.type = 'DEPART'
		           and (fqp.belong_org_code = #{deptCode} or fqp.relevant_org_code = #{deptCode})
		           and fqp.forecast_time = #{forecastTime}
		        union all
		        select sum(fqp.weight_total) weightTotal
		          from tfr.t_opt_forecast_quantity_p fqp
		         where 1 = 1
		           and (fqp.belong_org_code = #{deptCode} or fqp.relevant_org_code = #{deptCode})
		           and fqp.type = 'ARRIVE'
		           and fqp.forecast_time = #{forecastTime}
		        union all
		        select avg(fqp.weight_total) weightTotal
		          from tfr.t_opt_forecast_quantity_p fqp
		         where 1 = 1
		           and (
		           fqp.belong_org_code in 
			        <foreach collection="netGroupSites" close=")" open="(" item="netGroupSite" separator=",">
						#{netGroupSite.code, jdbcType=VARCHAR}
					</foreach> 
				   or fqp.relevant_org_code in 
					<foreach collection="netGroupSites" close=")" open="(" item="netGroupSite" separator=",">
						#{netGroupSite.code, jdbcType=VARCHAR}
					</foreach>)
		           and fqp.type = 'DEPART'
		           and fqp.forecast_time in
		               (#{forecastTime} - 7 * 1, #{forecastTime} - 7 * 2,
		                #{forecastTime} - 7 * 3, #{forecastTime} - 7 * 4))
	</select>

	<select id="querySerialnoByVehicleassembleNo" resultType="com.deppon.foss.module.transfer.platform.api.shared.dto.SerialnoDto" parameterType="map" >
		SELECT HS.WAYBILL_NO      WAYBILLNO,
			   HS.SERIAL_NO       SERIALNO
		  FROM TFR.T_OPT_HANDOVERBILL_SERIALNO  HS
		 INNER JOIN TFR.T_OPT_HANDOVERBILL_DETAIL    HD ON HS.HANDOVERBILL_NO = HD.HANDOVER_NO AND HS.WAYBILL_NO = HD.WAYBILL_NO
		 INNER JOIN TFR.T_OPT_HANDOVERBILL           HB ON HD.HANDOVER_NO = HB.HANDOVER_NO AND HB.HANDOVERBILL_STATE != '90'
		  LEFT JOIN TFR.T_OPT_VEHICLEASSEMBLE_DETAIL VD ON HB.HANDOVER_NO = VD.HANDOVER_NO
		  LEFT JOIN TFR.T_OPT_VEHICLEASSEMBLEBILL    V ON VD.VEHICLEASSEMBLEBILL_ID = V.ID AND V.STATE != '90'
		 WHERE 1 = 1
		   AND HB.DEST_ORG_CODE = #{deptCode}
		   AND HD.WAYBILL_NO = #{wayBillNo}
		<if test="vehicleassembleNo != null and vehicleassembleNo != ''">
		   AND V.VEHICLEASSEMBLE_NO = #{vehicleassembleNo}
		</if>
		 ORDER BY HS.SERIAL_NO
	</select>

	<select id="querySerialnoByStock" resultType="com.deppon.foss.module.transfer.platform.api.shared.dto.SerialnoDto" parameterType="map" >
		select s.waybill_no wayBillNo, s.serial_no serialNo
		  from tfr.t_opt_stock s
		 where s.waybill_no = #{wayBillNo}
		 and s.org_code = #{deptCode}
		 order by serial_no
	</select>

	<select id="querySerialnoByPathDetail" resultType="com.deppon.foss.module.transfer.platform.api.shared.dto.SerialnoDto" parameterType="map" >
		select distinct pd.waybill_no wayBillNo, pd.goods_no serialNo
		  from tfr.t_opt_path_detail pd
		  left join bse.t_bas_org o 
		    on pd.next_dest_org_code = o.code
		   and o.active = 'Y'
		 where 1 = 1
		   and pd.waybill_no = #{wayBillNo}
		<if test="nextLine != null and nextLine != ''">
		   and o.name = #{nextLine}
		</if>
		<if test="nextLine == null or nextLine == ''">
		   and pd.next_dest_org_code is null
		</if>
		 order by pd.goods_no
	</select>

	<select id="querySerialnoByLabeledGoods" resultType="com.deppon.foss.module.transfer.platform.api.shared.dto.SerialnoDto" parameterType="map" >
		select lg.waybill_no wayBillNo, lg.serial_no serialNo
		  from pkp.t_srv_labeled_good lg
		 where lg.waybill_no = #{wayBillNo}
		   and active = 'Y'
		 order by lg.serial_no
	</select>
</mapper>