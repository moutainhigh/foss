<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC 
	"-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="foss.stock" >

	<!-- 老库区编号 -->
	<!-- <resultMap id="oldGoodsAreaEntityResultMap" type="com.deppon.foss.module.transfer.stock.api.shared.domain.OldGoodsAreaEntity" >
		<result property="org_code" column="org_code"/>
		<result property="goods_area_code" column="goods_area_code"/>
	</resultMap> -->
	
	
	<!-- 新旧库区对应表 -->
	<resultMap id="newAndOldGoodsAreaEntityResultMap" type="com.deppon.foss.module.transfer.stock.api.shared.domain.NewAndOldGoodsAreaEntity" >
		<id property="id" column="id"/>
		<result property="change_goodsarea_area_id" column="change_goodsarea_area_id"/>
		<result property="org_code" column="org_code"/>
		<result property="old_goods_area_code" column="goods_area_code"/>
		<result property="new_goods_area_code" column="new_goods_area_code"/>
	</resultMap>
	
	
	<!-- 库区编号更改表 -->
	<resultMap id="changeGoodsAreaResultMap" type="com.deppon.foss.module.transfer.stock.api.shared.domain.ChangeGoodsAreaEntity" >
		<id property="id" column="id"/>
		<result property="state" column="state"/>
		<result property="remarks" column="remarks"/>
		<result property="applicant_time" column="applicant_time"/>
		<result property="applicant_name" column="applicant_name"/>
		<result property="applicant_code" column="applicant_code"/>
		<result property="org_name" column="org_name"/>
		<result property="org_code" column="org_code"/>
	</resultMap>
	
	
	<!--库存迁移表关联库存迁移部门表  -->
	<resultMap id="MoveStockQueryResultMap" type="com.deppon.foss.module.transfer.stock.api.shared.dto.MoveGoodsStockQueryDto" >
		<id property="id" column="id"/>
		<result property="state" column="state"/>
		<result property="remarks" column="remarks" />
		<result property="applicant_time" column="applicant_time"/>
		<result property="applicant_name" column="applicant_name"/>
		<result property="applicant_code" column="applicant_code"/>
		<result property="org_name" column="org_name"/>
		<result property="org_code" column="org_code"/>
		<result property="auditor_time" column="auditor_time"/>
		<result property="auditor_name" column="auditor_name"/>
		<result property="auditor_code" column="auditor_code"/>
		<result property="invalidate_time" column="invalidate_time"/>
		<result property="invalidate_name" column="invalidate_name"/>
		<result property="invalidate_code" column="invalidate_code"/>
		<result property="return_time" column="return_time"/>
		<result property="return_name" column="return_name"/>
		<result property="return_code" column="return_code"/>
		<result property="confirm_time" column="confirm_time"/>
		<result property="confirm_name" column="confirm_name"/>
		<result property="confirm_code" column="confirm_code"/>
		<result property="revocation_time" column="revocation_time"/>
		<result property="revocation_name" column="revocation_name"/>
		<result property="revocation_code" column="revocation_code"/>
		<result property="modify_time" column="modify_time"/>
		<result property="modify_name" column="modify_name"/>
		<result property="modify_code" column="modify_code"/>
		<result property="goods_type" column="goods_type"/>
		<result property="moveout_name" column="moveout_name"/>
		<result property="moveout_code" column="moveout_code"/>
		<result property="moveout_areaname" column="moveout_areaname"/>
		<result property="moveout_areacode" column="moveout_areacode"/>
		<result property="movein_name" column="movein_name"/>
		<result property="movein_code" column="movein_code"/>
		<result property="movein_areaname" column="movein_areaname"/>
		<result property="movein_areacode" column="movein_areacode"/>
		
	</resultMap>
	<!-- 库存迁移表 -->
	<resultMap id="moveGoodsStockResultMap" type="com.deppon.foss.module.transfer.stock.api.shared.domain.MoveGoodsEntity" >
		<id property="id" column="id"/>
		<result property="state" column="state"/>
		<result property="remarks" column="remarks"/>
		<result property="applicant_time" column="applicant_time"/>
		<result property="applicant_name" column="applicant_name"/>
		<result property="applicant_code" column="applicant_code"/>
		<result property="org_name" column="org_name"/>
		<result property="org_code" column="org_code"/>
		<result property="auditor_time" column="auditor_time"/>
		<result property="auditor_name" column="auditor_name"/>
		<result property="auditor_code" column="auditor_code"/>
		<result property="invalidate_time" column="invalidate_time"/>
		<result property="invalidate_name" column="invalidate_name"/>
		<result property="invalidate_code" column="invalidate_code"/>
		<result property="return_time" column="return_time"/>
		<result property="return_name" column="return_name"/>
		<result property="return_code" column="return_code"/>
		<result property="confirm_time" column="confirm_time"/>
		<result property="confirm_name" column="confirm_name"/>
		<result property="confirm_code" column="confirm_code"/>
		<result property="revocation_time" column="revocation_time"/>
		<result property="revocation_name" column="revocation_name"/>
		<result property="revocation_code" column="revocation_code"/>
		<result property="modify_time" column="modify_time"/>
		<result property="modify_name" column="modify_name"/>
		<result property="modify_code" column="modify_code"/>
	</resultMap>
	
	<!-- 库存迁移部门表 -->																
	<resultMap id="moveGoodsStockDepartmentResultMap" type="com.deppon.foss.module.transfer.stock.api.shared.domain.MoveGoodsDepartmentEntity" >
		<id property="id" column="id"/> 
		<result property="t_opt_movestock_id" column="t_opt_movestock_id"/>
		<result property="goods_type" column="goods_type"/>
		<result property="moveout_name" column="moveout_name"/>
		<result property="moveout_code" column="moveout_code"/>
		<result property="moveout_areaname" column="moveout_areaname"/>
		<result property="moveout_areacode" column="moveout_areacode"/>
		<result property="movein_name" column="movein_name"/>
		<result property="movein_code" column="movein_code"/>
		<result property="movein_areaname" column="movein_areaname"/>
		<result property="movein_areacode" column="movein_areacode"/>
	</resultMap>
	
	
<!-- ***************************************************************************** -->	
	<!-- 货件库存 -->
	<resultMap id="stockResultMap" type="com.deppon.foss.module.transfer.stock.api.shared.domain.StockEntity" >
		<id property="id" column="id"/>
		<result property="waybillNO" column="WAYBILL_NO"/>
		<result property="serialNO" column="SERIAL_NO"/>
		<result property="operatorCode" column="OPERATOR_CODE"/>
		<result property="operatorName" column="OPERATOR_NAME"/>
		<result property="orgCode" column="ORG_CODE"/>
		<result property="goodsAreaCode" column="GOODS_AREA_CODE"/>
		<result property="goodsAreaName" column="GOODS_AREA_NAME"/>
		<result property="deviceType" column="DEVICE_TYPE"/>
		<result property="inStockTime" column="IN_STOCK_TIME"/>
		<result property="scanTime" column="SCAN_TIME"/>
		<result property="preHandOverState" column="PRE_HANDOVER_STATUS"/>
		<result property="nextOrgCode" column="NEXT_ORG_CODE"/>
		<result property="position" column="position" />
		<result property="stockPositionNumber" column="STOCK_POSITION_NUMBER"/>
		<result property="createTime" column="create_time" />
	</resultMap>
	<!-- 运单库存 -->
	<resultMap id="waybillStockResultMap" type="com.deppon.foss.module.transfer.stock.api.shared.domain.WaybillStockEntity" >
		<id property="id" column="id"/>
		<result property="waybillNO" column="WAYBILL_NO"/>
		<result property="stockGoodsCount" column="STOCK_GOODS_QTY"/>
		<result property="inStockTime" column="IN_STOCK_TIME"/>
		<result property="goodsAreaCode" column="GOODS_AREA_CODE"/>
		<result property="orgCode" column="ORG_CODE"/>
		<result property="lastInStockTime" column="LAST_IN_STOCK_TIME"/>
		<result property="planStartTime" column="PLAN_START_TIME"/>
		<result property="nextOrgCode" column="NEXT_ORG_CODE"/>
	</resultMap>
	<!-- 运单库存关联运单表 -->
	<resultMap id="waybillStockQueryResultMap" type="com.deppon.foss.module.transfer.stock.api.shared.dto.WaybillStockQueryDto" >
		<result property="waybillNO" column="WAYBILL_NO"/>
		<result property="stockGoodsCount" column="STOCK_GOODS_QTY"/>
		<result property="waybillGoodsCount" column="GOODS_QTY_TOTAL"/>
		<result property="createWaybillTime" column="BILL_TIME"/>
		<result property="productCode" column="product_name"/>
		<result property="productTypeCode" column="product_code"/>
		<result property="administrativeArea" column="administrative_area"/>
		<result property="weightTotal" column="GOODS_WEIGHT"/>
		<result property="volumeTotal" column="GOODS_VOLUME"/>
		<result property="goodsName" column="GOODS_NAME"/>
		<result property="departureCode" column="create_org_name"/>
		<result property="nextOrgCode" column="next_org_name"/>
		<result property="receiveOrgCode" column="pickup_org_name"/>
		<result property="goodsAreaCode" column="GOODS_AREA_CODE"/>
		<result property="goodsAreaName" column="goods_area_name"/>
		<result property="orgCode" column="ORG_CODE"/>
		<result property="serialNO" column="SERIAL_NO"/>
		<result property="packageType" column="goods_package"/>
		<result property="operatorName" column="OPERATOR_NAME"/> 
		<result property="inStockTime" column="IN_STOCK_TIME"/>
		<result property="inStockDuration" column="inStockDuration"/>
		<result property="receiveMethod" column="RECEIVE_METHOD" />
		<result property="arrivalTime" column="arrival_time" />
	</resultMap>
	
	<!-- 库存查询导出的数据内容 -->
	<resultMap id="exportStockQueryResultMap" type="com.deppon.foss.module.transfer.stock.api.shared.dto.WaybillStockQueryDto" extends="waybillStockQueryResultMap" >
		<result property="receiveCustomerContact" column="RECEIVE_CUSTOMER_CONTACT"/>
	</resultMap>
	
	<!-- 查询库存统计 -->
	<resultMap id="WaybillStockStatisticsResultMap" type="com.deppon.foss.module.transfer.stock.api.shared.dto.WaybillStockStatisticsDto" >
		<result property="waybillQty" column="WAYBILL_QTY"/>
		<result property="stockGoodsQty" column="STOCK_GOODS_QTY"/>
		<result property="weightTotal" column="STOCK_WEIGHT_TOTAL"/>
		<result property="volumeTotal" column="STOCK_VOLUME_TOTAL"/>
	</resultMap>
	<!-- 合车 -->
	<resultMap id="togetherTruckResultMap" type="com.deppon.foss.module.transfer.stock.api.shared.domain.TogetherTruckStockEntity" >
		<id property="id" column="id"/>
		<result property="waybillNO" column="WAYBILL_NO"/>
		<result property="serialNO" column="SERIAL_NO"/>
		<result property="orgCode" column="ORG_CODE"/>
		<result property="newGoodsAreaCode" column="NEW_GOODS_AREA_CODE"/>
		<result property="origGoodsAreaCode" column="ORIG_GOODS_AREA_CODE"/>
	</resultMap>
	
	<!-- 入库动作 -->
	<resultMap id="inStockMap" type="com.deppon.foss.module.transfer.stock.api.shared.domain.InOutStockEntity" >
		<result property="id" column="id"/>
		<result property="waybillNO" column="WAYBILL_NO"/>
		<result property="serialNO" column="SERIAL_NO"/>
		<result property="orgCode" column="ORG_CODE"/>
		<result property="goodsAreaCode" column="GOODS_AREA_CODE"/>
		<result property="inOutStockTime" column="IN_STOCK_TIME"/>
		<result property="inOutStockType" column="IN_STOCK_TYPE"/>
		<result property="operatorCode" column="OPERATOR_CODE"/>
		<result property="operatorName" column="OPERATOR_NAME"/>
	</resultMap>
	<!-- 出库动作 -->
	<resultMap id="outStockMap" type="com.deppon.foss.module.transfer.stock.api.shared.domain.InOutStockEntity" >
		<result property="id" column="id"/>
		<result property="waybillNO" column="WAYBILL_NO"/>
		<result property="serialNO" column="SERIAL_NO"/>
		<result property="orgCode" column="ORG_CODE"/>
		<result property="goodsAreaCode" column="GOODS_AREA_CODE"/>
		<result property="inOutStockTime" column="OUT_STOCK_TIME"/>
		<result property="inOutStockType" column="OUT_STOCK_TYPE"/>
		<result property="operatorCode" column="OPERATOR_CODE"/>
		<result property="operatorName" column="OPERATOR_NAME"/>
	</resultMap>
	<!-- 200968 zwd 20141220  定位编号 -->
	<resultMap id="StockPositionNumber" type="com.deppon.foss.module.transfer.stock.api.shared.domain.StockPositionNumberEntity" >
		<result property="id" column="id"/>
		<result property="waybillNO" column="WAYBILL_NO"/>
		<result property="serialNO" column="SERIAL_NO"/>
		<result property="stockPositionNumber" column="STOCK_POSITION_NUMBER"/>
		<result property="orgCode" column="ORG_CODE"/>
		<result property="scanTime" column="SCAN_TIME"/>
	</resultMap>
	<!-- ******************************************************货件库存*********************************************-->
	
	<!-- 出发丢货上报 -->
	<resultMap id="ErrorLoseStartingResultMap" type="com.deppon.foss.module.transfer.stock.api.shared.dto.ErrorLoseStartingDto" >
		<result property="waybillNO" column="WAYBILL_NO"/>
		<result property="stockGoodsCount" column="STOCK_GOODS_QTY"/>
		<result property="inStockTime" column="IN_STOCK_TIME"/>
		<result property="orgCode" column="ORG_CODE"/>
		<result property="orgName" column="org_Name"/>
		<result property="pickupToDoor" column="pickup_to_door"/>
		<result property="pickupCentralized" column="Pickup_Centralized"/>
		<result property="station" column="station"/>
		<result property="channelBusiness" column="channel_Business"/>
	</resultMap>
	<!-- 200968 zwd 20150816  查询库存件数 -->
	<select id="queryStockByWO"  parameterType="com.deppon.foss.module.transfer.stock.api.shared.domain.StockEntity" resultMap="stockResultMap">
		SELECT ID,
		WAYBILL_NO,
		SERIAL_NO,
		STOCK_POSITION_NUMBER,
		ORG_CODE
		FROM tfr.t_opt_stock 
		where waybill_no = #{waybillNO,jdbcType=VARCHAR}
		and ORG_CODE = #{orgCode,jdbcType=VARCHAR}
	</select>
	
	<!-- 200968 zwd 20141225  查询库存表 -->
	<select id="queryStockByWSO"  parameterType="com.deppon.foss.module.transfer.stock.api.shared.domain.StockEntity" resultMap="stockResultMap">
		SELECT ID,
		WAYBILL_NO,
		SERIAL_NO,
		STOCK_POSITION_NUMBER,
		ORG_CODE
		FROM tfr.t_opt_stock 
		where waybill_no = #{waybillNO,jdbcType=VARCHAR}
		and serial_no = #{serialNO,jdbcType=VARCHAR} and ORG_CODE = #{orgCode,jdbcType=VARCHAR}
	</select>
	
	<!-- 200968 zwd 20141220  查询库存表返回结果给PDA -->
	<select id="queryStockPositionNumber"  parameterType="com.deppon.foss.module.transfer.stock.api.shared.domain.StockPositionNumberEntity" resultMap="StockPositionNumber">
		SELECT 
		 <include refid="stock_position_number_param"/>
		FROM tfr.t_opt_stock 
		where 
		 stock_position_number is not null
		 and waybill_no = #{waybillNO,jdbcType=VARCHAR} 
		 and ORG_CODE = #{orgCode,jdbcType=VARCHAR}
		 
	</select>
	
	<!-- 200968 zwd 20141220  查询所有的定位编号 -->
	<select id="queryAllStockPositionNumber"  parameterType="com.deppon.foss.module.transfer.stock.api.shared.domain.StockPositionNumberEntity" resultMap="StockPositionNumber">
		SELECT ID,
		WAYBILL_NO,
		SERIAL_NO,
		STOCK_POSITION_NUMBER,
		ORG_CODE
		FROM tfr.t_opt_stock_position_number
		order by scan_time 
	</select>
	<!-- 200968 zwd 20141220  保存定位编号  保存中间表中  -->
	<insert id="saveStockPositionNumber"
		parameterType="com.deppon.foss.module.transfer.stock.api.shared.domain.StockPositionNumberEntity">
		<![CDATA[
			insert into tfr.t_opt_stock_position_number(
		]]>
		<include refid="stock_position_number_param" />
			) values (
			#{id,jdbcType=VARCHAR},
			#{waybillNO,jdbcType=VARCHAR},
			#{serialNO,jdbcType=VARCHAR},
			#{stockPositionNumber,jdbcType=VARCHAR},
			#{orgCode,jdbcType=VARCHAR},
			#{scanTime,jdbcType=TIMESTAMP}
		)
	</insert>
	
	<!-- 200968 zwd 20141220  更新定位编号-->
	<update id="updateStockPositionNumber" parameterType="com.deppon.foss.module.transfer.stock.api.shared.domain.StockEntity">
		update tfr.t_opt_stock t 
        set t.stock_position_number = #{stockPositionNumber,jdbcType=VARCHAR}
		<where>
			t.waybill_no = #{waybillNO,jdbcType=VARCHAR}
			and t.serial_no = #{serialNO,jdbcType=VARCHAR}
			and t.org_code = #{orgCode,jdbcType=VARCHAR}
		</where>
	</update>

	<!-- 200968 zwd 20141221  删除定位编号-->
	<delete id="deleteStockPositionNumber" parameterType="com.deppon.foss.module.transfer.stock.api.shared.domain.StockPositionNumberEntity">
		<![CDATA[
			DELETE FROM tfr.t_opt_stock_position_number
			 WHERE waybill_no = #{waybillNO} 
			 and serial_no=#{serialNO}
			 and org_code = #{orgCode}
		]]>
	</delete>
	
	<!-- 200968 zwd 20141220  定位编号参数配置信息 -->
	<sql id="stock_position_number_param">
		ID,
		WAYBILL_NO,
		SERIAL_NO,
		STOCK_POSITION_NUMBER,
		ORG_CODE,
		SCAN_TIME
	</sql>
	<!-- ******************************************************货件库存*********************************************-->
	<!-- 货件库存参数配置信息 -->
	<sql id="stock_param">
		ID,
		WAYBILL_NO,
		SERIAL_NO,
		OPERATOR_CODE,
		OPERATOR_NAME,
		GOODS_AREA_CODE,
		DEVICE_TYPE,
		ORG_CODE,
		IN_STOCK_TIME,
		SCAN_TIME,
		IS_PAKCAGE,
		NEXT_ORG_CODE,
		PRE_HANDOVER_STATUS
	</sql>
	
	<!-- 查询货件库存 -->
	<select id="stockQuery"  parameterType="com.deppon.foss.module.transfer.stock.api.shared.domain.WaybillStockEntity" resultMap="stockResultMap">
		SELECT s.ID,
    	s.WAYBILL_NO,
    	s.SERIAL_NO,
    	s.ORG_CODE,
    	s.GOODS_AREA_CODE,
    	s.OPERATOR_NAME,
    	s.IN_STOCK_TIME,
    	s.position,
    	s.PRE_HANDOVER_STATUS,
    	tt.create_time
    	FROM tfr.t_opt_stock s
    	LEFT JOIN (
      		select hb.Dest_Org_Code, --到达部门code 
                             hs.waybill_no,
                             hs.serial_no,
                            min(td.actual_arrive_time) create_time --实际到达时间
                      from  tfr.t_opt_truck_task_detail td   --有实际到达时间
                         
                       inner join tfr.t_Opt_Truck_Task_Bill tb
                          on tb.truck_task_detail_id = td.id
                       inner join tfr.t_Opt_Handoverbill hb
                          on hb.handover_no = tb.bill_no
                         and hb.handoverbill_state != '90'
                       inner join tfr.t_opt_handoverbill_detail hd
                          on hd.handover_no = hb.handover_no
                       inner join tfr.t_Opt_Handoverbill_Serialno hs
                          on hs.handoverbill_no = hd.handover_no
                         and hs.waybill_no = hd.waybill_no
                       where td.status in ('ARRIVED','UNLOADED') 
                      /* and td.dest_org_code ='W3100020616'
                       
                         and hs.waybill_no = '400300220'*/
                         group by hb.Dest_Org_Code,hs.waybill_no,
                             hs.serial_no
        ) tt
    	on tt.Dest_Org_Code = s.org_code and tt.waybill_no = s.waybill_no 
       		and tt.serial_no = s.SERIAL_NO  
		where s.waybill_no = #{waybillNO}
		and s.ORG_CODE = #{orgCode}
		<!--
		<choose>
			<when test="goodsAreaCode != null and goodsAreaCode != ''">
				and GOODS_AREA_CODE = #{goodsAreaCode}
			</when>
			<otherwise>
				and GOODS_AREA_CODE is null
			</otherwise>
		</choose>
		-->
		<if test="goodsAreaCode != null and goodsAreaCode != ''">
				and s.GOODS_AREA_CODE = #{goodsAreaCode}
		</if>
		
	</select>
	
	<!-- 查询货件库存 -->
	<select id="stockQueryByWaybillNo"  parameterType="com.deppon.foss.module.transfer.stock.api.shared.domain.WaybillStockEntity" resultMap="stockResultMap">
		SELECT ID,
		WAYBILL_NO,
		SERIAL_NO,
		ORG_CODE,
		NEXT_ORG_CODE,
		GOODS_AREA_CODE,
		OPERATOR_NAME,
		OPERATOR_CODE,
		IN_STOCK_TIME,
		DEVICE_TYPE,
		position,
		PRE_HANDOVER_STATUS 
		FROM tfr.t_opt_stock 
		where waybill_no = #{waybillNO}
		<!--
		<choose>
			<when test="goodsAreaCode != null and goodsAreaCode != ''">
				and GOODS_AREA_CODE = #{goodsAreaCode}
			</when>
			<otherwise>
				and GOODS_AREA_CODE is null
			</otherwise>
		</choose>
		-->
		<if test="goodsAreaCode != null and goodsAreaCode != ''">
				and GOODS_AREA_CODE = #{goodsAreaCode}
		</if>
		
	</select>
	
	
	<!-- 查询唯一货件库存 -->
	<select id="uniqueStockQuery"  parameterType="com.deppon.foss.module.transfer.stock.api.shared.domain.InOutStockEntity" resultMap="stockResultMap">
		SELECT WAYBILL_NO,SERIAL_NO,ORG_CODE,GOODS_AREA_CODE,GOODS_AREA_NAME,OPERATOR_NAME,IN_STOCK_TIME,SCAN_TIME,NEXT_ORG_CODE FROM tfr.t_opt_stock where waybill_no = #{waybillNO}
		 and SERIAL_NO = #{serialNO}
	</select>
	
	<!-- 根据运单号和当前部门编号 查询库存 -->
	<select id="queryStockByWaybillNoOrgCode" parameterType="map" resultMap="stockResultMap">
		SELECT WAYBILL_NO,SERIAL_NO,ORG_CODE,GOODS_AREA_CODE,OPERATOR_NAME,IN_STOCK_TIME,SCAN_TIME,NEXT_ORG_CODE FROM tfr.t_opt_stock where waybill_no = #{waybillNO}
		 and ORG_CODE = #{orgCode}
	</select>
	
	<!-- 根据运单号分析库存表里存在的库存件数以及入库时间 -->
	<select id="queryStockByWaybillNoForGroup" parameterType="map" resultMap="waybillStockResultMap">
		select count(0) STOCK_GOODS_QTY,
		       a.WAYBILL_NO,
		       a.ORG_CODE,
		       a.GOODS_AREA_CODE,
		       a.NEXT_ORG_CODE,
		       a.IN_STOCK_TIME
		  from (select b.waybill_no,
		               b.org_code,
		               b.goods_area_code,
		               b.next_org_code,
		               FIRST_VALUE(b.in_stock_time) OVER(PARTITION BY b.waybill_no, b.org_code, b.goods_area_code, b.next_org_code ORDER BY b.in_stock_time desc) AS in_stock_time
		          from tfr.t_opt_stock b
		         where b.waybill_no =  #{waybillNO}) a
		 group by a.waybill_no,
		          a.org_code,
		          a.goods_area_code,
		          a.next_org_code,
		          a.in_stock_time
	</select>
	
	<!-- 查询界面勾选的货件库存 -->
	<select id="queryExportStock"  parameterType="list" resultMap="exportStockQueryResultMap">
		<![CDATA[	
			SELECT 
	        S.WAYBILL_NO,
	        S.SERIAL_NO,
	        W.GOODS_NAME,
	        P.NAME AS PRODUCT_NAME,
	        ROUND(W.GOODS_WEIGHT_TOTAL/W.GOODS_QTY_TOTAL,2) AS GOODS_WEIGHT,
	        ROUND(W.GOODS_VOLUME_TOTAL/W.GOODS_QTY_TOTAL,2) AS GOODS_VOLUME,
	        W.GOODS_PACKAGE,
	        W.RECEIVE_ORG_NAME AS CREATE_ORG_NAME,
	        W.CUSTOMER_PICKUP_ORG_NAME AS PICKUP_ORG_NAME,
	        S.OPERATOR_NAME,
	        W.RECEIVE_CUSTOMER_CONTACT,
	        S.IN_STOCK_TIME,
	        W.BILL_TIME,
	        W.GOODS_QTY_TOTAL,
	        case
	            when (w.is_express = 'Y') then 
                 null
                when (w.RECEIVE_METHOD = 'DELIVER_NOUP') then
                 bbd.name
                when (w.RECEIVE_METHOD = 'DELIVER_UP') then
                 bbd.name
                when (w.RECEIVE_METHOD = 'DELIVER') then
                 bbd.name
                when (w.RECEIVE_METHOD = 'DELIVER_INGA') then
                 bbd.name
                else
                 null
            end as administrative_area,
	        S.GOODS_AREA_CODE,
	        G.GOODS_AREA_NAME,
	        tts.stock_goods_qty,
	        tt.create_time arrival_time
	      FROM TFR.T_OPT_STOCK S 
	      LEFT JOIN PKP.T_SRV_WAYBILL W ON S.WAYBILL_NO=W.WAYBILL_NO AND W.ACTIVE = 'Y'    
	      LEFT JOIN PKP.T_SRV_PRODUCT P ON W.PRODUCT_CODE = P.CODE AND P.ACTIVE = 'Y'
	      left join bse.t_bas_district bbd
              on w.RECEIVE_CUSTOMER_DIST_CODE = bbd.code
              and bbd.active = 'Y'
	      LEFT JOIN BSE.T_BAS_GOODS_AREA G
	              ON S.GOODS_AREA_CODE = G.GOODS_AREA_CODE
	             AND G.ORG_CODE = S.ORG_CODE
	             AND G.ACTIVE = 'Y'
	      left join tfr.t_opt_waybill_stock  tts 
	      	 on s.waybill_no = tts.waybill_no 
	         and s.goods_area_code = tts.goods_area_code
   			 and s.org_code  = tts.org_code 
	      LEFT JOIN (
	      		 select hb.Dest_Org_Code, 
                             hs.waybill_no,
                             hs.serial_no,
                            min(td.actual_arrive_time) create_time 
                      from  tfr.t_opt_truck_task_detail td    
                       inner join tfr.t_Opt_Truck_Task_Bill tb
                          on tb.truck_task_detail_id = td.id
                       inner join tfr.t_Opt_Handoverbill hb
                          on hb.handover_no = tb.bill_no
                         and hb.handoverbill_state != '90'
                       inner join tfr.t_opt_handoverbill_detail hd
                          on hd.handover_no = hb.handover_no
                       inner join tfr.t_Opt_Handoverbill_Serialno hs
                          on hs.handoverbill_no = hd.handover_no
                         and hs.waybill_no = hd.waybill_no
                       where td.status in ('ARRIVED','UNLOADED') 
                         group by hb.Dest_Org_Code,hs.waybill_no,
                             hs.serial_no
	        ) tt
	    	on tt.dest_org_code = s.org_code and tt.waybill_no = s.waybill_no 
	       		and tt.serial_no = s.SERIAL_NO 
			WHERE S.ID IN  ]]>   
		<foreach collection="list" open="(" close=")" separator="," index="index" item="item">
			#{item}
		</foreach>
			ORDER BY S.WAYBILL_NO,S.SERIAL_NO
	</select>
	<!-- 查询需导出的货件库存
		SELECT 
				S.WAYBILL_NO,
				S.SERIAL_NO,
				W.GOODS_NAME,
				P.NAME AS PRODUCT_NAME,
				ROUND(W.GOODS_WEIGHT_TOTAL/W.GOODS_QTY_TOTAL,2) AS GOODS_WEIGHT,
				ROUND(W.GOODS_VOLUME_TOTAL/W.GOODS_QTY_TOTAL,2) AS GOODS_VOLUME,
				W.GOODS_PACKAGE,
				W.RECEIVE_ORG_NAME AS CREATE_ORG_NAME,
				W.CUSTOMER_PICKUP_ORG_NAME AS PICKUP_ORG_NAME,
				S.OPERATOR_NAME 
			FROM TFR.T_OPT_STOCK S 
			LEFT JOIN PKP.T_SRV_WAYBILL W ON S.WAYBILL_NO=W.WAYBILL_NO AND W.ACTIVE = 'Y'
			LEFT JOIN PKP.T_SRV_PRODUCT P ON W.PRODUCT_CODE = P.CODE AND P.ACTIVE = 'Y'
	 -->
	<select id="queryExportStockAll"  parameterType="com.deppon.foss.module.transfer.stock.api.shared.dto.WaybillStockDto" resultMap="exportStockQueryResultMap">
		<![CDATA[
			SELECT ST.WAYBILL_NO, 
	             ST.SERIAL_NO, 
	             W.GOODS_NAME, 
	             P.NAME AS PRODUCT_NAME, 
	             ROUND(W.GOODS_WEIGHT_TOTAL/W.GOODS_QTY_TOTAL,2) AS GOODS_WEIGHT, 
	             ROUND(W.GOODS_VOLUME_TOTAL/W.GOODS_QTY_TOTAL,2) AS GOODS_VOLUME, 
	             W.GOODS_PACKAGE, 
	             W.RECEIVE_ORG_NAME AS CREATE_ORG_NAME, 
	             W.CUSTOMER_PICKUP_ORG_NAME AS PICKUP_ORG_NAME, 
	             ST.OPERATOR_NAME,
	             W.RECEIVE_CUSTOMER_CONTACT,
	             S.IN_STOCK_TIME,
	             W.BILL_TIME,
	             W.GOODS_QTY_TOTAL,
	             case
	               when (w.is_express = 'Y') then 
                      null
                   when (w.RECEIVE_METHOD = 'DELIVER_NOUP') then
                    bbd.name
                   when (w.RECEIVE_METHOD = 'DELIVER_UP') then
                    bbd.name
                   when (w.RECEIVE_METHOD = 'DELIVER') then
                    bbd.name
                   when (w.RECEIVE_METHOD = 'DELIVER_INGA') then
                    bbd.name
                   else
                    null
                 end as administrative_area,
	             St.GOODS_AREA_CODE,
	             G.GOODS_AREA_NAME ,
	             s.stock_goods_qty,
	             tt.create_time  arrival_time    
             FROM TFR.T_OPT_WAYBILL_STOCK S 
     		 LEFT JOIN TFR.T_OPT_STOCK ST 
                ON S.WAYBILL_NO=ST.WAYBILL_NO 
                AND S.GOODS_AREA_CODE=ST.GOODS_AREA_CODE 
                AND S.ORG_CODE=ST.ORG_CODE
      		LEFT JOIN PKP.T_SRV_WAYBILL W ON S.WAYBILL_NO=W.WAYBILL_NO AND W.ACTIVE = 'Y' 
     		LEFT JOIN PKP.T_SRV_PRODUCT P ON W.PRODUCT_CODE = P.CODE AND P.ACTIVE = 'Y' 
     		left join bse.t_bas_district bbd
                 on w.RECEIVE_CUSTOMER_DIST_CODE = bbd.code
                 and bbd.active = 'Y'
     		LEFT JOIN BSE.T_BAS_GOODS_AREA G
              	ON S.GOODS_AREA_CODE = G.GOODS_AREA_CODE
             	AND G.ORG_CODE = S.ORG_CODE
             	AND G.ACTIVE = 'Y'
      		LEFT JOIN (
      			 select hb.Dest_Org_Code,  
                             
                             hs.waybill_no,
                             hs.serial_no,
                            min(td.actual_arrive_time) create_time 
                      from  tfr.t_opt_truck_task_detail td   
                         
                       inner join tfr.t_Opt_Truck_Task_Bill tb
                          on tb.truck_task_detail_id = td.id
                       inner join tfr.t_Opt_Handoverbill hb
                          on hb.handover_no = tb.bill_no
                         and hb.handoverbill_state != '90'
                       inner join tfr.t_opt_handoverbill_detail hd
                          on hd.handover_no = hb.handover_no
                       inner join tfr.t_Opt_Handoverbill_Serialno hs
                          on hs.handoverbill_no = hd.handover_no
                         and hs.waybill_no = hd.waybill_no
                       where td.status in ('ARRIVED','UNLOADED') 
                      group by hb.Dest_Org_Code,hs.waybill_no,
                             hs.serial_no
        		) tt
    			on tt.dest_org_code = s.org_code and tt.waybill_no = s.waybill_no 
       			and tt.serial_no =  st.serial_no
			
			
	    ]]>
		<include refid="waybillStockQuery_Where"/> 
		ORDER BY ST.WAYBILL_NO,ST.SERIAL_NO
	</select>
	
	<!-- 保存货件库存 -->
	<insert id="insertStockEntity"
		parameterType="com.deppon.foss.module.transfer.stock.api.shared.domain.StockEntity">
		<![CDATA[
			insert into tfr.t_opt_stock(
		]]>
		<include refid="stock_param" />
			) values (
			#{id,jdbcType=VARCHAR},
			#{waybillNO,jdbcType=VARCHAR},
			#{serialNO,jdbcType=VARCHAR},
			#{operatorCode,jdbcType=VARCHAR},
			#{operatorName,jdbcType=VARCHAR},
			<choose>
			<when test="goodsAreaCode != null and goodsAreaCode != ''">
				#{goodsAreaCode,jdbcType=VARCHAR},
			</when>
			<otherwise>
				'N/A',
			</otherwise>
			</choose>
			#{deviceType,jdbcType=VARCHAR},
			#{orgCode,jdbcType=VARCHAR},
			#{inStockTime,jdbcType=TIMESTAMP},
			#{scanTime,jdbcType=TIMESTAMP},
			<choose>
			<when test="bePackage != null and bePackage != ''">
				#{bePackage,jdbcType=VARCHAR},
			</when>
			<otherwise>
				'N',
			</otherwise>
			</choose>
			#{nextOrgCode,jdbcType=VARCHAR},
			#{preHandOverState,jdbcType=VARCHAR}
		)
	</insert>
	
	<!-- 删除货件库存 -->
	<delete id="deleteStockEntity" parameterType="com.deppon.foss.module.transfer.stock.api.shared.domain.InOutStockEntity">
		<![CDATA[
			DELETE FROM tfr.t_opt_stock WHERE WAYBILL_NO = #{waybillNO} and SERIAL_NO = #{serialNO}
		]]>
	</delete>
	
	<select id="goodsQuery"  parameterType="com.deppon.foss.module.transfer.stock.api.shared.domain.InOutStockEntity" resultMap="stockResultMap">
		SELECT WAYBILL_NO, SERIAL_NO FROM PKP.T_SRV_LABELED_GOOD WHERE ACTIVE='Y' AND WAYBILL_NO = #{waybillNO} 
	</select>
	
	<select id="goodsCountQuery"  parameterType="com.deppon.foss.module.transfer.stock.api.shared.domain.InOutStockEntity" resultType="Long">
		select count(s.serial_no) from pkp.t_srv_labeled_good s where s.active='Y' and s.waybill_no=#{waybillNO}
	</select>

	<select id="stockExistQuery"  parameterType="com.deppon.foss.module.transfer.stock.api.shared.domain.InOutStockEntity" resultMap="stockResultMap">
		select id from tfr.t_opt_stock
       	<where>
			 waybill_NO=#{waybillNO} and SERIAL_NO=#{serialNO} and org_code=#{orgCode}
			<if test="goodsAreaCode != null and goodsAreaCode != ''">
				and GOODS_AREA_CODE = #{goodsAreaCode}
			</if>
		</where>
	</select>
	<select id="isExistOtherGoodsAreaStock"  parameterType="map" resultType="int">
		select count(*) from tfr.t_opt_stock
       	  where WAYBILL_NO = #{waybillNO}
       	    and SERIAL_NO = #{serialNO}
			and ORG_CODE = #{orgCode}
			<if test="goodsAreaCode != null and goodsAreaCode != ''">
			and GOODS_AREA_CODE != #{goodsAreaCode}
			</if>
	</select>
	
	<!-- 根据部门查询库存件数 -->
	<select id="queryStockGoodsQty" parameterType="map" resultType="long">
		select nvl(sum(s.stock_goods_qty),0) from tfr.t_opt_waybill_stock s where s.org_code=#{orgCode}
	</select>
	
	<!-- ******************************************************运单库存*********************************************-->
	<!-- 运单库存参数配置信息 -->
	<sql id="waybillStock_param">
		ID,
		WAYBILL_NO,
		STOCK_GOODS_QTY,
		IN_STOCK_TIME,
		GOODS_AREA_CODE,
		ORG_CODE,
		LAST_IN_STOCK_TIME,
		PLAN_START_TIME,
		NEXT_ORG_CODE
	</sql>
		
	<!-- 运单库存查询关联运单表 
	WaybillStockDao
	LEFT JOIN BSE.T_BAS_ORG B1 ON W.CREATE_ORG_CODE = B1.CODE AND B1.ACTIVE = 'Y'
	LEFT JOIN bse.mv_dest_net B2 ON W.CUSTOMER_PICKUP_ORG_CODE = B2.CODE AND B2.ACTIVE = 'Y'
	-->
	<select id="waybillStockJoinQuery"  parameterType="com.deppon.foss.module.transfer.stock.api.shared.dto.WaybillStockDto" resultMap="waybillStockQueryResultMap">
		SELECT 
			S.WAYBILL_NO,
			S.STOCK_GOODS_QTY,
			S.ORG_CODE,
			S.GOODS_AREA_CODE,
			G.GOODS_AREA_NAME,
			W.GOODS_QTY_TOTAL,
			case
			 	when (w.is_express = 'Y') then 
                    null
       			when (w.RECEIVE_METHOD = 'DELIVER_NOUP')
          			then bbd.name
        		when (w.RECEIVE_METHOD = 'DELIVER_UP')
          			then bbd.name
        		when (w.RECEIVE_METHOD = 'DELIVER')
         	    	then bbd.name
        		when (w.RECEIVE_METHOD = 'DELIVER_INGA')
          			then bbd.name
        		else null 
      		end as administrative_area,
			W.BILL_TIME,
			P.NAME AS PRODUCT_NAME,
			w.RECEIVE_METHOD,
			ROUND(S.STOCK_GOODS_QTY*(W.GOODS_WEIGHT_TOTAL/W.GOODS_QTY_TOTAL),2) AS GOODS_WEIGHT,
			ROUND(S.STOCK_GOODS_QTY*(W.GOODS_VOLUME_TOTAL/W.GOODS_QTY_TOTAL),2) AS GOODS_VOLUME,
			W.GOODS_NAME,
			CASE
			WHEN ( w.PRODUCT_CODE='PACKAGE' )
			THEN W.CREATE_USER_DEPT_NAME  
			WHEN ( w.PRODUCT_CODE='RCP' )
     		THEN W.CREATE_USER_DEPT_NAME
     		WHEN ( w.PRODUCT_CODE='EPEP' )
     		THEN W.CREATE_USER_DEPT_NAME  
			ELSE  		   
			W.RECEIVE_ORG_NAME  
			END AS CREATE_ORG_NAME,
			S.LAST_IN_STOCK_TIME AS IN_STOCK_TIME,
			W.CUSTOMER_PICKUP_ORG_NAME AS PICKUP_ORG_NAME
		FROM TFR.T_OPT_WAYBILL_STOCK S 
		LEFT JOIN PKP.T_SRV_WAYBILL W ON S.WAYBILL_NO=W.WAYBILL_NO AND W.ACTIVE = 'Y'
		LEFT JOIN PKP.T_SRV_PRODUCT P ON W.PRODUCT_CODE = P.CODE AND P.ACTIVE = 'Y'
		left join bse.t_bas_district bbd
       		on w.RECEIVE_CUSTOMER_DIST_CODE = bbd.code and bbd.active = 'Y' 
		LEFT JOIN BSE.T_BAS_GOODS_AREA G ON S.GOODS_AREA_CODE = G.GOODS_AREA_CODE AND G.ORG_CODE=S.ORG_CODE AND G.ACTIVE = 'Y'
		<include refid="waybillStockQuery_Where"/> 
		ORDER BY S.LAST_IN_STOCK_TIME DESC
	</select>
	<!-- 根据运单号查找最早到达时间 -->
	<select id="queryArrayTime"  parameterType="com.deppon.foss.module.transfer.stock.api.shared.dto.WaybillStockQueryDto" resultType="Date">
		select tt.create_time from 
		(select * from (select hb.Dest_Org_Code,
                       hs.waybill_no,
                       hs.serial_no,
                       td.actual_arrive_time create_time,
                       row_number() over(partition by hs.waybill_no, hb.dest_org_code order by td.actual_arrive_time) rn
                  from tfr.t_opt_truck_task_detail td
                 inner join tfr.t_Opt_Truck_Task_Bill tb
                    on tb.truck_task_detail_id = td.id
                 inner join tfr.t_Opt_Handoverbill hb
                    on hb.handover_no = tb.bill_no
                   and hb.handoverbill_state != '90'
                 inner join tfr.t_opt_handoverbill_detail hd
                    on hd.handover_no = hb.handover_no
                 inner join tfr.t_Opt_Handoverbill_Serialno hs
                    on hs.handoverbill_no = hd.handover_no
                   and hs.waybill_no = hd.waybill_no
                 where td.status in ('ARRIVED', 'UNLOADED')
                   and hb.Dest_Org_Code = #{orgCode}
                 order by td.actual_arrive_time)
         where rn = 1) tt
    where tt.waybill_no = #{waybillNO}
		
	</select>
	<!-- 运单库存查询关联运单表 (快递员) -->
	<select id="ExpressWaybillStockJoinQuery"  parameterType="com.deppon.foss.module.transfer.stock.api.shared.dto.WaybillStockDto" resultMap="waybillStockQueryResultMap">
		SELECT 
			S.WAYBILL_NO,
			S.STOCK_GOODS_QTY,
			S.ORG_CODE,
			S.GOODS_AREA_CODE,
			G.GOODS_AREA_NAME,
			W.GOODS_QTY_TOTAL,
			case
			 	when (w.is_express = 'Y') then 
                    null
       			when (w.RECEIVE_METHOD = 'DELIVER_NOUP')
          			then bbd.name
        		when (w.RECEIVE_METHOD = 'DELIVER_UP')
          			then bbd.name
        		when (w.RECEIVE_METHOD = 'DELIVER')
         	    	then bbd.name
        		when (w.RECEIVE_METHOD = 'DELIVER_INGA')
          			then bbd.name
        		else null 
      		end as administrative_area,
			W.BILL_TIME,
			P.NAME AS PRODUCT_NAME,
			w.RECEIVE_METHOD,
			ROUND(S.STOCK_GOODS_QTY*(W.GOODS_WEIGHT_TOTAL/W.GOODS_QTY_TOTAL),2) AS GOODS_WEIGHT,
			ROUND(S.STOCK_GOODS_QTY*(W.GOODS_VOLUME_TOTAL/W.GOODS_QTY_TOTAL),2) AS GOODS_VOLUME,
			W.GOODS_NAME,
			CASE
			WHEN ( w.PRODUCT_CODE='PACKAGE' )
			THEN W.CREATE_USER_DEPT_NAME  
			WHEN ( w.PRODUCT_CODE='RCP' )
     		THEN W.CREATE_USER_DEPT_NAME
     		WHEN ( w.PRODUCT_CODE='EPEP' )
     		THEN W.CREATE_USER_DEPT_NAME  
			ELSE  		   
			W.RECEIVE_ORG_NAME  
			END AS CREATE_ORG_NAME,
			S.LAST_IN_STOCK_TIME AS IN_STOCK_TIME,
			W.CUSTOMER_PICKUP_ORG_NAME AS PICKUP_ORG_NAME
		FROM TFR.T_OPT_WAYBILL_STOCK S 
		LEFT JOIN PKP.T_SRV_WAYBILL W ON S.WAYBILL_NO=W.WAYBILL_NO AND W.ACTIVE = 'Y' AND W.PRODUCT_CODE IN ('RCP','PACKAGE','EPEP','DEAP')
		LEFT JOIN PKP.T_SRV_PRODUCT P ON W.PRODUCT_CODE = P.CODE AND P.ACTIVE = 'Y'
		left join bse.t_bas_district bbd
       		on w.RECEIVE_CUSTOMER_DIST_CODE = bbd.code and bbd.active = 'Y' 
		LEFT JOIN BSE.T_BAS_GOODS_AREA G ON S.GOODS_AREA_CODE = G.GOODS_AREA_CODE AND G.ORG_CODE=S.ORG_CODE AND G.ACTIVE = 'Y'
		<include refid="waybillStockQuery_Where"/> 
		ORDER BY S.LAST_IN_STOCK_TIME DESC
	</select>
	
	<!-- 根据运单号查找最早到达时间(快递) -->
	<select id="queryExpressArrayTime"  parameterType="com.deppon.foss.module.transfer.stock.api.shared.dto.WaybillStockQueryDto" resultType="Date">
		select tt.create_time from 
		(select * from (select hb.Dest_Org_Code,
                       hs.waybill_no,
                       hs.serial_no,
                       td.actual_arrive_time create_time,
                       row_number() over(partition by hs.waybill_no, hb.dest_org_code order by td.actual_arrive_time) rn
                  from tfr.t_opt_truck_task_detail td
                 inner join tfr.t_Opt_Truck_Task_Bill tb
                    on tb.truck_task_detail_id = td.id
                 inner join tfr.t_Opt_Handoverbill hb
                    on hb.handover_no = tb.bill_no
                   and hb.handoverbill_state != '90'
                 inner join tfr.t_opt_handoverbill_detail hd
                    on hd.handover_no = hb.handover_no
                 inner join tfr.t_Opt_Handoverbill_Serialno hs
                    on hs.handoverbill_no = hd.handover_no
                   and hs.waybill_no = hd.waybill_no
                 where td.status in ('ARRIVED', 'UNLOADED')
                   and hb.Dest_Org_Code = #{orgCode}
                 order by td.actual_arrive_time)
         where rn = 1) tt
    where tt.waybill_no = #{waybillNO}
		
	</select>
	
	<!-- 运单库存查询关联运单表 统计票数、库存件数、重量、体积
	WaybillStockDao
	-->
	<select id="queryWaybillStockStatistics"  parameterType="com.deppon.foss.module.transfer.stock.api.shared.dto.WaybillStockDto" resultMap="WaybillStockStatisticsResultMap">
	  SELECT 
	      count(*) AS WAYBILL_QTY,
	      sum(S.STOCK_GOODS_QTY) AS STOCK_GOODS_QTY,
	      sum(ROUND(S.STOCK_GOODS_QTY*(W.GOODS_WEIGHT_TOTAL/W.GOODS_QTY_TOTAL),2)) AS STOCK_WEIGHT_TOTAL,   
	      sum(ROUND(S.STOCK_GOODS_QTY*(W.GOODS_VOLUME_TOTAL/W.GOODS_QTY_TOTAL),2)) AS STOCK_VOLUME_TOTAL
      FROM TFR.T_OPT_WAYBILL_STOCK S 
      LEFT JOIN PKP.T_SRV_WAYBILL W ON S.WAYBILL_NO=W.WAYBILL_NO AND W.ACTIVE = 'Y'
	  <include refid="waybillStockQuery_Where"/> 
	</select>
	<!-- 运单库存查询关联运单表 统计票数、库存件数、重量、体积(快递) -->
	<select id="queryExpressWaybillStockStatistics"  parameterType="com.deppon.foss.module.transfer.stock.api.shared.dto.WaybillStockDto" resultMap="WaybillStockStatisticsResultMap">
	  SELECT 
	      count(*) AS WAYBILL_QTY,
	      sum(S.STOCK_GOODS_QTY) AS STOCK_GOODS_QTY,
	      sum(ROUND(S.STOCK_GOODS_QTY*(W.GOODS_WEIGHT_TOTAL/W.GOODS_QTY_TOTAL),2)) AS STOCK_WEIGHT_TOTAL,   
	      sum(ROUND(S.STOCK_GOODS_QTY*(W.GOODS_VOLUME_TOTAL/W.GOODS_QTY_TOTAL),2)) AS STOCK_VOLUME_TOTAL
      FROM TFR.T_OPT_WAYBILL_STOCK S 
      LEFT JOIN PKP.T_SRV_WAYBILL W ON S.WAYBILL_NO=W.WAYBILL_NO AND W.ACTIVE = 'Y' AND W.PRODUCT_CODE IN ('RCP','PACKAGE','EPEP','DEAP')
	  <include refid="waybillStockQuery_Where"/> 
	</select>
	
	
	<sql id="waybillStockQuery_Where">
		<where>
			S.ORG_CODE = #{waybillStock.orgCode} AND W.ACTIVE = 'Y' 
			<if test="waybillStock.waybillNO!=null and waybillStock.waybillNO!='' ">	
				AND S.WAYBILL_NO = #{waybillStock.waybillNO}
			</if>
			<if test="waybillStock.productCode!=null and waybillStock.productCode!='' ">	
				AND W.PRODUCT_CODE = #{waybillStock.productCode}
			</if>
			<if test="waybillStock.receiveMethod!=null and waybillStock.receiveMethod!='' ">	
				AND W.RECEIVE_METHOD like '%'|| #{waybillStock.receiveMethod} ||'%'
			</if>
			<if test="beginInStockTime!=null and endInStockTime!=null">	
				AND (	S.IN_STOCK_TIME between #{beginInStockTime} and #{endInStockTime}
						OR 
						S.LAST_IN_STOCK_TIME between #{beginInStockTime} and #{endInStockTime}
					 )
			</if>
			<if test="goodsAreaList != null">	
				AND S.GOODS_AREA_CODE in 
				<foreach collection="goodsAreaList" open="(" close=")" separator="," index="index" item="item">
					#{item}
			    </foreach>
			</if>
			<if test="waybillStock.position!=null and waybillStock.position!='' ">	
				AND S.POSITION_QTY >0
			</if>
		</where>
	</sql>
	
	<sql id="exportStockQuery_Where">
		<where>
			S.ORG_CODE = #{waybillStock.orgCode}
			<if test="waybillStock.waybillNO!=null and waybillStock.waybillNO!='' ">	
				AND S.WAYBILL_NO = #{waybillStock.waybillNO}
			</if>
			<if test="waybillStock.productCode!=null and waybillStock.productCode!='' ">	
				AND W.PRODUCT_CODE = #{waybillStock.productCode}
			</if>
			<if test="beginInStockTime!=null and endInStockTime!=null">	
				AND S.IN_STOCK_TIME between #{beginInStockTime} and #{endInStockTime}
			</if>
			<if test="goodsAreaList != null">	
				AND S.GOODS_AREA_CODE in 
				<foreach collection="goodsAreaList" open="(" close=")" separator="," index="index" item="item">
					#{item}
			    </foreach>
			</if>
		</where>
	</sql>
	
	<!-- 运单库存查询 -->
	<select id="waybillStockQuery"  parameterType="com.deppon.foss.module.transfer.stock.api.shared.domain.WaybillStockEntity" resultMap="waybillStockResultMap">
		<![CDATA[
			SELECT 
		]]>
		<include refid="waybillStock_param"/>
		<![CDATA[
			FROM tfr.t_opt_waybill_stock where WAYBILL_NO = #{waybillNO} AND ORG_CODE = #{orgCode}
		]]>
		
		<!-- 
		<choose>
		<when test="goodsAreaCode != null">
			AND GOODS_AREA_CODE = #{goodsAreaCode}
		</when>
		<otherwise>
			AND GOODS_AREA_CODE is null
		</otherwise>
		</choose>
		-->
		<if test="goodsAreaCode != null and goodsAreaCode != ''">
				and GOODS_AREA_CODE = #{goodsAreaCode}
		</if>
	</select>
	
	<!-- 运单库存个数查询 -->
	<select id="getCount"	resultType="Long" parameterType="com.deppon.foss.module.transfer.stock.api.shared.dto.WaybillStockDto">
		SELECT COUNT(S.ID) 
		FROM TFR.T_OPT_WAYBILL_STOCK S 
		LEFT JOIN PKP.T_SRV_WAYBILL W ON S.WAYBILL_NO=W.WAYBILL_NO AND W.ACTIVE = 'Y'
		<include refid="waybillStockQuery_Where"/>
	</select>
	<!-- 运单库存个数查询(快递) -->
	<select id="getExpressCount"	resultType="Long" parameterType="com.deppon.foss.module.transfer.stock.api.shared.dto.WaybillStockDto">
		SELECT COUNT(S.ID) 
		FROM TFR.T_OPT_WAYBILL_STOCK S 
		LEFT JOIN PKP.T_SRV_WAYBILL W ON S.WAYBILL_NO=W.WAYBILL_NO AND W.ACTIVE = 'Y' AND W.PRODUCT_CODE IN ('RCP','PACKAGE','EPEP','DEAP')
		<include refid="waybillStockQuery_Where"/>
	</select>
	
	<!-- 运单库存查询条件 -->
	<sql id="waybillStock_Where">
		<where>
			<if test="waybillStock.waybillNO!=null and waybillStock.waybillNO!='' ">	
					AND WAYBILL_NO = #{waybillStock.waybillNO}
			</if>
			<if test="waybillStock.goodsAreaCode!=null and waybillStock.goodsAreaCode!='' ">	
					AND GOODS_AREA_CODE = #{waybillStock.goodsAreaCode}
			</if>
			<if test="waybillStock.orgCode!=null and waybillStock.orgCode!='' ">	
					AND ORG_CODE = #{waybillStock.orgCode}
			</if>
			AND IN_STOCK_TIME between #{beginInStockTime} and #{endInStockTime}
		</where>
	</sql>
	<!-- 根据运单号、部门CODE查询运单库存 -->
	<select id="queryWaybillStockByWaybillOrgCode"  parameterType="map" resultMap="waybillStockResultMap">
		<![CDATA[
			SELECT 
		]]>
		<include refid="waybillStock_param"/>
		<![CDATA[
			FROM tfr.t_opt_waybill_stock where WAYBILL_NO = #{waybillNo} AND ORG_CODE = #{orgCode}
		]]>
		
	</select>
	
	<!-- 查询必走货	
	     规定发车时间小于当天16点 卡 城
                当天16点-规定发车时间 > 24 普货
	 -->
	 <!-- 
	   新的必走货定义：必走货判断：当运输性质为："精准卡航"和"精准城运"，当日查询系统时间减去规定出发时间>0；
	  或当运输性质为："精准汽运（长）"和"精准汽运（短）、汽运偏线"，当日查询系统时间减去规定发车时间>24小时，即为必走货（其中不包括已装车的货物）
	  必走货应用货物规定出发时间与库存时间对比。
	  -->
	<select id="queryPriorityGoods"	parameterType="com.deppon.foss.module.transfer.stock.api.shared.dto.WaybillStockQueryDto" resultMap="waybillStockQueryResultMap">
		select waybill_no,
		       goods_area_code,
		       goods_area_name,
		       org_code,
		       goods_qty_total,
		       stock_goods_qty,
		       goods_name,
		       goods_package,
		       product_name,
		       product_code,
		       create_org_name,
		       next_org_name,
		       pickup_org_name,
		       GOODS_WEIGHT,
		       GOODS_VOLUME,
		       in_stock_time,
		       inStockDuration
		from (
					select t.waybill_no,
					       t.goods_area_code,
					       g.goods_area_name,
					       t.org_code,
					       w.goods_qty_total,
					       t.stock_goods_qty,
					       w.goods_name,
					       w.goods_package,
					       p.name as product_name,
					       p.code as product_code,
					       w.RECEIVE_ORG_NAME as create_org_name,
					       b.name as next_org_name,
					       w.CUSTOMER_PICKUP_ORG_NAME as pickup_org_name,
					       ROUND(t.stock_goods_qty*(w.goods_weight_total/w.goods_qty_total),2) AS GOODS_WEIGHT,
					       ROUND(t.stock_goods_qty*(w.goods_volume_total/w.goods_qty_total),2) AS GOODS_VOLUME, 
					       t.in_stock_time, 
					       trunc((sysdate-cast(t.in_stock_time as date))*24,1) as inStockDuration,
					       p.seq 
					  from tfr.t_opt_waybill_stock t 
					  left join bse.t_bas_org b on t.next_org_code = b.code and b.active='Y' 
					  left join pkp.t_srv_waybill w on t.waybill_no=w.waybill_no AND W.ACTIVE = 'Y'    
					  left join pkp.t_srv_product p on w.product_code = p.code and p.active='Y'
					  left join BSE.T_BAS_GOODS_AREA g on t.goods_area_code = g.goods_area_code and t.org_code = g.org_code and g.active = 'Y'
					      
					  <where>
							<![CDATA[   t.plan_start_time < To_date(to_char(sysdate,'yyyy-mm-dd hh24:mi:ss'),'yyyy-mm-dd hh24:mi:ss')]]>
					        and p.priority = 'FAST' and p.levels = '3' 
					        and t.next_org_code is not null
					        and (select count(0) from bse.t_bas_sales_department a where a.code=t.next_org_code and a.active='Y' and a.station='Y') =0
					        <![CDATA[ and p.seq <4 ]]>
					    	and t.ORG_CODE =#{orgCode}   
					    	<if test="beginInStockTime!=null">
					    		<if test="endInStockTime!=null">
					    			and t.IN_STOCK_TIME between #{beginInStockTime} and #{endInStockTime} 
					    		</if>
					        </if>
					        <if test="goodsAreaCode!=null and goodsAreaCode!=''">
								and t.GOODS_AREA_CODE = #{goodsAreaCode}
					    	</if>
							<if test="productCode!=null and productCode!=''">
								and w.product_code = #{productCode}
					    	</if>
					 </where>            
					union all                              
					select t.waybill_no,
					       t.goods_area_code,
					       g.goods_area_name,
					       t.org_code,
					       w.goods_qty_total,
					       t.stock_goods_qty,
					       w.goods_name,
					       w.goods_package,
					       p.name as product_name,
					       p.code as product_code,
					       w.RECEIVE_ORG_NAME as create_org_name,
					       b.name as next_org_name,
					       w.CUSTOMER_PICKUP_ORG_NAME as pickup_org_name,
					       ROUND(t.stock_goods_qty*(w.goods_weight_total/w.goods_qty_total),2) AS GOODS_WEIGHT,
					       ROUND(t.stock_goods_qty*(w.goods_volume_total/w.goods_qty_total),2) AS GOODS_VOLUME, 
					       t.in_stock_time, 
					       trunc((sysdate-cast(t.in_stock_time as date))*24,1) as inStockDuration,
					       p.seq 
					  from tfr.t_opt_waybill_stock t 
					  left join bse.t_bas_org b on t.next_org_code = b.code and b.active='Y' 
					  left join pkp.t_srv_waybill w on t.waybill_no=w.waybill_no AND W.ACTIVE = 'Y'    
					  left join pkp.t_srv_product p on w.product_code = p.code and p.active='Y'
					  left join BSE.T_BAS_GOODS_AREA g on t.goods_area_code = g.goods_area_code and t.org_code = g.org_code and g.active = 'Y'
					  <where>
				<![CDATA[   t.plan_start_time < To_date(to_char(sysdate-1,'yyyy-mm-dd hh24:mi:ss'),'yyyy-mm-dd hh24:mi:ss') ]]>
							and t.next_org_code is not null
							and (select count(0) from bse.t_bas_sales_department a where a.code=t.next_org_code and a.active='Y' and a.station='Y') =0
					        and p.priority = 'NORMAL' and p.levels = '3' 
					        <![CDATA[ and p.seq <8 ]]>
					    	and t.ORG_CODE =#{orgCode}   
					    	<if test="beginInStockTime!=null">
					    		<if test="endInStockTime!=null">
					    			and t.IN_STOCK_TIME between #{beginInStockTime} and #{endInStockTime} 
					    		</if>
					        </if>
					        <if test="goodsAreaCode!=null and goodsAreaCode!=''">
								and t.GOODS_AREA_CODE = #{goodsAreaCode}
					    	</if>
							<if test="productCode!=null and productCode!=''">
								and w.product_code = #{productCode}
					    	</if>
					 </where>    
			)
		order by seq, inStockDuration desc
	</select>
	<!-- 查询必走货总记录数 -->
	<select id="queryPriorityGoodsCount"	resultType="Long" parameterType="com.deppon.foss.module.transfer.stock.api.shared.dto.WaybillStockQueryDto">
			  select count(t.waybill_no)
			    from tfr.t_opt_waybill_stock t 
          		left join pkp.t_srv_waybill w on t.waybill_no=w.waybill_no AND W.ACTIVE = 'Y' 
          		left join pkp.t_srv_product p on w.product_code = p.code and p.active='Y'   
			    <where>
			    	    (
			    <![CDATA[   t.plan_start_time < To_date(to_char(sysdate,'yyyy-mm-dd hh24:mi:ss'),'yyyy-mm-dd hh24:mi:ss') ]]>
			    			and t.next_org_code is not null
			    			and (select count(0) from bse.t_bas_sales_department a where a.code=t.next_org_code and a.active='Y' and a.station='Y') =0
		                    and p.priority = 'FAST' and p.levels = '3' 
		                     <![CDATA[ and p.seq <4 ]]>
		                    and t.ORG_CODE =#{orgCode}   
		                    <if test="beginInStockTime!=null">
					    		<if test="endInStockTime!=null">
					    			and t.IN_STOCK_TIME between #{beginInStockTime} and #{endInStockTime} 
					    		</if>
					        </if>
		                    <if test="goodsAreaCode!=null and goodsAreaCode!=''">
								and t.GOODS_AREA_CODE = #{goodsAreaCode}
					    	</if>
							<if test="productCode!=null and productCode!=''">
								and w.product_code = #{productCode}
					    	</if> 
			    	     )
			    	  OR
			    	    (
			    <![CDATA[ 	t.plan_start_time < To_date(to_char(sysdate-1,'yyyy-mm-dd hh24:mi:ss'),'yyyy-mm-dd hh24:mi:ss') ]]>
			    			and t.next_org_code is not null
			    			and (select count(0) from bse.t_bas_sales_department a where a.code=t.next_org_code and a.active='Y' and a.station='Y') =0
			                and p.priority = 'NORMAL' and p.levels = '3'
			                <![CDATA[ and p.seq <8 ]]>
			                and t.ORG_CODE =#{orgCode}   
			                <if test="beginInStockTime!=null">
					    		<if test="endInStockTime!=null">
					    			and t.IN_STOCK_TIME between #{beginInStockTime} and #{endInStockTime} 
					    		</if>
					        </if>
		                    <if test="goodsAreaCode!=null and goodsAreaCode!=''">
								and t.GOODS_AREA_CODE = #{goodsAreaCode}
					    	</if>
							<if test="productCode!=null and productCode!=''">
								and w.product_code = #{productCode}
					    	</if> 
			    	     )
			    </where>       
	</select>
	
	<!-- 查询必走货  统计 -->
	<select id="queryPriorityGoodsStatistics" parameterType="com.deppon.foss.module.transfer.stock.api.shared.dto.WaybillStockQueryDto" resultMap="WaybillStockStatisticsResultMap">
			    select count(*) AS WAYBILL_QTY,
			           sum(t.stock_goods_qty) AS STOCK_GOODS_QTY,
			           sum(ROUND(t.stock_goods_qty * (w.GOODS_WEIGHT_TOTAL/w.goods_qty_total),2)) AS STOCK_WEIGHT_TOTAL,
			           sum(ROUND(t.stock_goods_qty * (w.goods_volume_total/w.goods_qty_total),2)) AS STOCK_VOLUME_TOTAL
			    from tfr.t_opt_waybill_stock t 
          		left join pkp.t_srv_waybill w on t.waybill_no=w.waybill_no AND W.ACTIVE = 'Y' 
          		left join pkp.t_srv_product p on w.product_code = p.code and p.active='Y'   
			    <where>
			    	    (
			    <![CDATA[   t.plan_start_time < To_date(to_char(sysdate,'yyyy-mm-dd hh24:mi:ss'),'yyyy-mm-dd hh24:mi:ss') ]]>
		                    and p.priority = 'FAST' and p.levels = '3' 
		                     <![CDATA[ and p.seq <4 ]]>
		                     and t.next_org_code is not null
		                     and (select count(0) from bse.t_bas_sales_department a where a.code=t.next_org_code and a.active='Y' and a.station='Y') =0
		                    and t.ORG_CODE =#{orgCode}   
		                    <if test="beginInStockTime!=null">
					    		<if test="endInStockTime!=null">
					    			and t.IN_STOCK_TIME between #{beginInStockTime} and #{endInStockTime} 
					    		</if>
					        </if>
		                    <if test="goodsAreaCode!=null and goodsAreaCode!=''">
								and t.GOODS_AREA_CODE = #{goodsAreaCode}
					    	</if>
							<if test="productCode!=null and productCode!=''">
								and w.product_code = #{productCode}
					    	</if> 
			    	     )
			    	  OR
			    	    (
			    <![CDATA[ 	t.plan_start_time < To_date(to_char(sysdate-1,'yyyy-mm-dd hh24:mi:ss'),'yyyy-mm-dd hh24:mi:ss') ]]>
			                and p.priority = 'NORMAL' and p.levels = '3' 
			                 <![CDATA[ and p.seq <8 ]]>
			                 and t.next_org_code is not null
			                 and (select count(0) from bse.t_bas_sales_department a where a.code=t.next_org_code and a.active='Y' and a.station='Y') =0
			                and t.ORG_CODE =#{orgCode}   
			                <if test="beginInStockTime!=null">
					    		<if test="endInStockTime!=null">
					    			and t.IN_STOCK_TIME between #{beginInStockTime} and #{endInStockTime} 
					    		</if>
					        </if>
		                    <if test="goodsAreaCode!=null and goodsAreaCode!=''">
								and t.GOODS_AREA_CODE = #{goodsAreaCode}
					    	</if>
							<if test="productCode!=null and productCode!=''">
								and w.product_code = #{productCode}
					    	</if> 
			    	     )
			    </where>       
	</select>
	
	<!-- 入库修改运单库存 -->
	<update id="updateWaybillStockInStock" parameterType="com.deppon.foss.module.transfer.stock.api.shared.domain.WaybillStockEntity">
		UPDATE tfr.t_opt_waybill_stock a
		<set>
			a.STOCK_GOODS_QTY = STOCK_GOODS_QTY + 1,
			a.NEXT_ORG_CODE = #{nextOrgCode,jdbcType=VARCHAR},
			<if test="planStartTime!=null">
				a.PLAN_START_TIME = #{planStartTime},
	    	</if>
			<if test="lastInStockTime!=null">
				a.LAST_IN_STOCK_TIME = #{lastInStockTime}
	    	</if>
		</set>
		WHERE a.ID = #{id}
	</update>
	<!-- 批量入库修改运单库存 -->
	<update id="updateWaybillStockInStockBatch" parameterType="com.deppon.foss.module.transfer.stock.api.shared.domain.WaybillStockEntity">
		UPDATE tfr.t_opt_waybill_stock a
		<set>
			a.STOCK_GOODS_QTY = #{stockGoodsCount},
			a.NEXT_ORG_CODE = #{nextOrgCode,jdbcType=VARCHAR},
			<if test="planStartTime!=null">
				a.PLAN_START_TIME = #{planStartTime},
	    	</if>
			<if test="lastInStockTime!=null">
				a.LAST_IN_STOCK_TIME = #{lastInStockTime}
	    	</if>
		</set>
		WHERE a.ID = #{id}
	</update>
	
	<!-- 出库修改运单库存 -->
	<!-- UPDATE TFR.T_OPT_WAYBILL_STOCK SET STOCK_GOODS_QTY = STOCK_GOODS_QTY - 1
		WHERE WAYBILL_NO = #{waybillNo} and ORG_CODE = #{orgCode}
		and GOODS_AREA_CODE = #{goodsAreaCode}
	 -->
	<update id="updateWaybillStockOutStock" parameterType="com.deppon.foss.module.transfer.stock.api.shared.domain.WaybillStockEntity">
		update tfr.t_opt_waybill_stock a 
		set a.STOCK_GOODS_QTY=(select count(id) 
			from tfr.t_opt_stock  
			where waybill_no=#{waybillNo} 
			and goods_area_code=#{goodsAreaCode}
			and org_code=#{orgCode}
			)
		where a.waybill_no=#{waybillNo} 
		and a.goods_area_code=#{goodsAreaCode}
		and a.org_code=#{orgCode}
	</update>
	
	
	<!-- 保存运单库存 -->
	<insert id="insertWaybillStockEntity"
		parameterType="com.deppon.foss.module.transfer.stock.api.shared.domain.WaybillStockEntity">
		<![CDATA[
			insert into tfr.t_opt_waybill_stock(
		]]>
		<include refid="waybillStock_param" />
			) values (
				#{id,jdbcType=VARCHAR},
				#{waybillNO,jdbcType=VARCHAR},
				#{stockGoodsCount,jdbcType=VARCHAR},
				#{inStockTime,jdbcType=VARCHAR},
				<choose>
				<when test="goodsAreaCode != null and goodsAreaCode != ''">
					#{goodsAreaCode,jdbcType=VARCHAR},
				</when>
				<otherwise>
					'N/A',
				</otherwise>
				</choose>
				#{orgCode,jdbcType=VARCHAR},
				#{lastInStockTime,jdbcType=VARCHAR},
				#{planStartTime,jdbcType=VARCHAR},
				#{nextOrgCode,jdbcType=VARCHAR}
			)
	</insert>

	<!-- 删除运单库存 -->
	<delete id="deleteWaybillStock" parameterType="com.deppon.foss.module.transfer.stock.api.shared.domain.WaybillStockEntity">
		<![CDATA[
			DELETE FROM tfr.t_opt_waybill_stock WHERE WAYBILL_NO = #{waybillNO} and ORG_CODE=#{orgCode}
		]]>
		<!--
		<choose>
			<when test="goodsAreaCode != null">
				and GOODS_AREA_CODE = #{goodsAreaCode}
			</when>
			<otherwise>
				and GOODS_AREA_CODE is null
			</otherwise>
		</choose>
		-->
		<if test="goodsAreaCode != null and goodsAreaCode != ''">
				and GOODS_AREA_CODE = #{goodsAreaCode}
		</if>
		
	</delete>
	
	<!-- ******************************************************合车表*********************************************-->
	
	<sql id="togetherList_param">
		ID,                  
		WAYBILL_NO,       
		SERIAL_NO,        
		NEW_GOODS_AREA_CODE,
		ORIG_GOODS_AREA_CODE,
		ORG_CODE
	</sql>	
	
	<!-- 保存合车记录 -->
	<insert id="insertTogetherTruck"
		parameterType="com.deppon.foss.module.transfer.stock.api.shared.domain.TogetherTruckStockEntity">
		<![CDATA[
			insert into tfr.t_opt_together_list(
		]]>
		<include refid="togetherList_param" />
		<![CDATA[
			) values (
				#{id,jdbcType=VARCHAR},
				#{waybillNO,jdbcType=VARCHAR},
				#{serialNO,jdbcType=VARCHAR},
				#{newGoodsAreaCode,jdbcType=VARCHAR},
				#{origGoodsAreaCode,jdbcType=VARCHAR},
				#{orgCode,jdbcType=VARCHAR}
			)
		]]>
	</insert>
	
	<!-- 删除合车记录 -->
	<delete id="deleteTogetherTruck" parameterType="map">
		<![CDATA[
			DELETE FROM tfr.t_opt_together_list WHERE WAYBILL_NO = #{waybillNO} and SERIAL_NO = #{serialNO} and ORG_CODE=#{orgCode}
		]]>
	</delete>
	
	<!-- 查询合车 -->
	<select id="queryTogetherTruck"  parameterType="map" resultMap="togetherTruckResultMap">
		<![CDATA[
			SELECT 
		]]>
		<include refid="togetherList_param"/>
		<![CDATA[
			FROM tfr.t_opt_together_list 
			where WAYBILL_NO = #{waybillNo} AND 
			SERIAL_NO = #{serialNo} AND
			NEW_GOODS_AREA_CODE = #{goodsAreaCode} AND
			ORG_CODE = #{orgCode}
		]]>
		
	</select>
	
	
	<!-- ******************************************************入库表*********************************************-->
	
	<!-- 入库表参数配置信息 -->
	<sql id="inStock_param">
		ID,                  
		WAYBILL_NO,       
		SERIAL_NO,        
		OPERATOR_CODE,
		OPERATOR_NAME,
		IN_STOCK_TYPE,
		DEVICE_TYPE,
		IN_STOCK_TIME, 
		ORG_CODE,
		GOODS_AREA_CODE,
		GOODS_AREA_NAME,
		IN_STOCK_BILL_NO,
		SCAN_TIME,
		IS_VALID,
		PDA_DEVICE_NO
	</sql>	
	
	<!-- 保存入库动作 -->
	<insert id="insertInStock"
		parameterType="com.deppon.foss.module.transfer.stock.api.shared.domain.InOutStockEntity">
		<![CDATA[
			insert into tfr.t_opt_in_stock(
		]]>
		<include refid="inStock_param" />
			) values (
				#{id,jdbcType=VARCHAR},
				#{waybillNO,jdbcType=VARCHAR},
				#{serialNO,jdbcType=VARCHAR},
				#{operatorCode,jdbcType=VARCHAR},
				#{operatorName,jdbcType=VARCHAR},
				#{inOutStockType,jdbcType=VARCHAR},
				#{deviceType,jdbcType=VARCHAR},
				#{inOutStockTime,jdbcType=TIMESTAMP},
				#{orgCode,jdbcType=VARCHAR},
				<choose>
				<when test="goodsAreaCode != null and goodsAreaCode != ''">
					#{goodsAreaCode,jdbcType=VARCHAR},
				</when>
				<otherwise>
					'N/A',
				</otherwise>
				</choose>
				#{goodsAreaName,jdbcType=VARCHAR},
				#{inOutStockBillNO,jdbcType=VARCHAR},
				#{scanTime,jdbcType=TIMESTAMP},
				#{isValid,jdbcType=VARCHAR},
				#{pdaDeviceNO,jdbcType=VARCHAR}
			)
	</insert>
	
	<!-- ******************************************************出库表*********************************************-->
	
	<!-- 出库表参数配置信息 -->
	<sql id="outStock_param">
		ID,                  
		WAYBILL_NO,       
		SERIAL_NO,        
		OPERATOR_CODE,
		OPERATOR_NAME,
		OUT_STOCK_TYPE,
		DEVICE_TYPE,
		OUT_STOCK_TIME, 
		ORG_CODE,
		GOODS_AREA_CODE,
		GOODS_AREA_NAME,
		OUT_STOCK_BILL_NO,
		SCAN_TIME,
		IS_VALID,
		PDA_DEVICE_NO
	</sql>	
	
	<!-- 保存出库动作 -->
	<insert id="insertOutStock"
		parameterType="com.deppon.foss.module.transfer.stock.api.shared.domain.InOutStockEntity">
		<![CDATA[
			insert into tfr.t_opt_out_stock(
		]]>
		<include refid="outStock_param" />
			) values (
				#{id,jdbcType=VARCHAR},
				#{waybillNO,jdbcType=VARCHAR},
				#{serialNO,jdbcType=VARCHAR},
				#{operatorCode,jdbcType=VARCHAR},
				#{operatorName,jdbcType=VARCHAR},
				#{inOutStockType,jdbcType=VARCHAR},
				#{deviceType,jdbcType=VARCHAR},
				#{inOutStockTime,jdbcType=TIMESTAMP},
				#{orgCode,jdbcType=VARCHAR},
				<choose>
				<when test="goodsAreaCode != null and goodsAreaCode != ''">
					#{goodsAreaCode,jdbcType=VARCHAR},
				</when>
				<otherwise>
					'N/A',
				</otherwise>
				</choose>
				#{goodsAreaName,jdbcType=VARCHAR},
				#{inOutStockBillNO,jdbcType=VARCHAR},
				#{scanTime,jdbcType=TIMESTAMP},
				#{isValid,jdbcType=VARCHAR},
				#{pdaDeviceNO,jdbcType=VARCHAR}
			)
	</insert>
	<!-- 查询出库动作 -->
	<select id="queryOutStock" parameterType="map" resultType="string">
		SELECT ID FROM TFR.T_OPT_OUT_STOCK WHERE WAYBILL_NO = #{waybillNO} AND OUT_STOCK_TIME > #{createBillTime}
	</select>
	
	<!-- 查询入库动作，参数：运单号、流水号、部门、开单时间 -->
	<select id="queryInStockInfo" parameterType="map" resultMap="inStockMap">
		SELECT
			   ID,                  
			   WAYBILL_NO,       
			   SERIAL_NO,        
			   IN_STOCK_TYPE,
			   IN_STOCK_TIME, 
			   ORG_CODE,
			   GOODS_AREA_CODE,
			   OPERATOR_CODE,
			   OPERATOR_NAME
		  FROM TFR.T_OPT_IN_STOCK 
		 WHERE WAYBILL_NO = #{waybillNo} AND
		 	   <if test="serialNo != null and serialNo != '' ">
		      		SERIAL_NO = #{serialNo} AND
		       </if>
		       <if test="orgCode != null and orgCode != '' ">
		      		ORG_CODE = #{orgCode} AND
		       </if>
		 	   IS_VALID = #{isValid} AND
		 	   IN_STOCK_TIME > #{createBillTime}
	  ORDER BY IN_STOCK_TIME
	</select>
	
	<!-- 查询入库动作，参数：运单号、流水号、部门、开单时间 -->
	<select id="queryInStockInfoSmall" parameterType="map" resultMap="inStockMap">
		SELECT
			   ID,                  
			   WAYBILL_NO,       
			   SERIAL_NO,        
			   IN_STOCK_TYPE,
			   IN_STOCK_TIME, 
			   ORG_CODE,
			   GOODS_AREA_CODE,
			   OPERATOR_CODE,
			   OPERATOR_NAME
		  FROM TFR.T_OPT_IN_STOCK 
		 WHERE WAYBILL_NO = #{waybillNo} AND
		 	   <if test="serialNo != null and serialNo != '' ">
		      		SERIAL_NO = #{serialNo} AND
		       </if>
		       <if test="orgCode != null and orgCode != '' ">
		      		ORG_CODE = #{orgCode} AND
		       </if>
		 	   IS_VALID = #{isValid} AND
		 	   <![CDATA[ IN_STOCK_TIME < #{createBillTime} ]]>
	  ORDER BY IN_STOCK_TIME
	</select>
	
	<!-- 查询出库动作，参数：运单号、流水号、部门、开单时间 -->
	<select id="queryOutStockInfo" parameterType="map" resultMap="outStockMap">
		SELECT
			   ID,                  
			   WAYBILL_NO,       
			   SERIAL_NO,        
			   OUT_STOCK_TYPE,
			   OUT_STOCK_TIME, 
			   ORG_CODE,
			   GOODS_AREA_CODE,
			   OPERATOR_CODE,
			   OPERATOR_NAME
		  FROM TFR.T_OPT_OUT_STOCK 
		 WHERE WAYBILL_NO = #{waybillNo} AND
		 	   <if test="serialNo != null and serialNo != '' ">
		      		SERIAL_NO = #{serialNo} AND
		       </if>
		       <if test="orgCode != null and orgCode != '' ">
		      		ORG_CODE = #{orgCode} AND
		       </if>
		 	   IS_VALID = #{isValid} AND
		 	   OUT_STOCK_TIME > #{createBillTime}
	  ORDER BY OUT_STOCK_TIME
	</select>
	
	<!-- 根据库区编号查询货件库存 -->
	<select id="queryStockByGoodsAreaCode"  parameterType="map" resultMap="stockResultMap">
		SELECT WAYBILL_NO,SERIAL_NO,ORG_CODE,GOODS_AREA_CODE,OPERATOR_NAME,IN_STOCK_TIME 
		  FROM tfr.t_opt_stock 
		    where ORG_CODE = #{deptCode}
		      <if test="goodsAreaCode != null and goodsAreaCode != '' ">
		      and GOODS_AREA_CODE = #{goodsAreaCode}
		      </if>
		      order by WAYBILL_NO,SERIAL_NO
	</select>
	<!--更新流水号库存的预配状态-->
	<update id="updatePreHandOverState" parameterType="com.deppon.foss.module.transfer.stock.api.shared.domain.StockEntity">
		update tfr.t_opt_stock t 
		set t.pre_handover_status = #{preHandOverState,jdbcType=VARCHAR}
		<where>
			t.waybill_no = #{waybillNO,jdbcType=VARCHAR}
			and t.serial_no = #{serialNO,jdbcType=VARCHAR}
			and t.org_code = #{orgCode,jdbcType=VARCHAR}
		</where>
	</update>
	
	<!--出库存储过程  -->
	<select id="outStockProcedure" parameterType="map" statementType="CALLABLE">
        {CALL TFR.PKG_OPT_OUT_STOCK.PROC_OUT_STOCK(#{outStockList,mode=IN,jdbcType=ARRAY,typeHandler=com.deppon.foss.module.transfer.stock.api.shared.typehandler.OutStockArrayTypeHandler},
        							 			   #{waybillNo,mode=OUT,jdbcType=VARCHAR},	
			        							   #{serialNo,mode=OUT,jdbcType=VARCHAR},
			        							   #{exceptionInfo,mode=OUT,jdbcType=VARCHAR}
        										  )}
    </select>
	<!--按照类型出库存储过程  -->
	<select id="outStockProcedureByType" parameterType="map" statementType="CALLABLE">
        {CALL TFR.PKG_OPT_OUT_STOCK.PROC_OUT_STOCK_TASKORHANDER(#{outStockList,mode=IN,jdbcType=ARRAY,typeHandler=com.deppon.foss.module.transfer.stock.api.shared.typehandler.OutStockArrayTypeHandler},
        							 			   #{id,mode=IN,jdbcType=VARCHAR},	
        							 			   #{type,mode=IN,jdbcType=VARCHAR},	
        							 			   #{waybillNo,mode=OUT,jdbcType=VARCHAR},	
			        							   #{serialNo,mode=OUT,jdbcType=VARCHAR},
			        							   #{exceptionInfo,mode=OUT,jdbcType=VARCHAR}
        										  )}
    </select>
    
    <!--
    <parameterMap id="inStockParamsMap" type="map">        
    	<parameter property="inOutStockList" mode="IN" jdbcType="ARRAY" typeHandler="com.deppon.foss.module.transfer.stock.api.shared.typehandler.InStockArrayTypeHandler"/>    
    	<parameter property="waybillStockId" mode="IN" jdbcType="VARCHAR" />        
    </parameterMap>    
    -->
    <!--开单入库存储过程  -->
    <select id="inStockCreateBillProcedure" parameterType="map" statementType="CALLABLE">
        {CALL TFR.PKG_OPT_IN_STOCK.PROC_IN_STOCK_CREATE_BILL(#{inStockList,mode=IN,jdbcType=ARRAY,typeHandler=com.deppon.foss.module.transfer.stock.api.shared.typehandler.InStockArrayTypeHandler},
        												     #{waybillStockId,mode=IN,jdbcType=VARCHAR},
        												     #{waybillNo,mode=OUT,jdbcType=VARCHAR},	
						        							 #{serialNo,mode=OUT,jdbcType=VARCHAR},
						        							 #{exceptionInfo,mode=OUT,jdbcType=VARCHAR}
						        							 )}
    </select>
	
	 <!--反签收入库存储过程  -->
    <select id="inStockReverseSignProcedure" parameterType="map" statementType="CALLABLE">
        {CALL TFR.PKG_OPT_IN_STOCK.PROC_IN_STOCK_REVERSE_SIGN(#{inStockList,mode=IN,jdbcType=ARRAY,typeHandler=com.deppon.foss.module.transfer.stock.api.shared.typehandler.InStockArrayTypeHandler},
        												      #{waybillStockId,mode=IN,jdbcType=VARCHAR},
        												      #{waybillNo,mode=OUT,jdbcType=VARCHAR},	
						        							  #{serialNo,mode=OUT,jdbcType=VARCHAR},
						        							  #{exceptionInfo,mode=OUT,jdbcType=VARCHAR}
						        							  )}
    </select>
     <!--移除货件出库存储过程  -->
    <select id="outStockInvalidGoodsProcedure" parameterType="map" statementType="CALLABLE">
        {CALL TFR.PKG_OPT_OUT_STOCK.PROC_OUT_STOCK_INVALID_GOODS(#{outStockList,mode=IN,jdbcType=ARRAY,typeHandler=com.deppon.foss.module.transfer.stock.api.shared.typehandler.OutStockArrayTypeHandler},
        												     	 #{waybillNo,mode=OUT,jdbcType=VARCHAR},	
						        							     #{serialNo,mode=OUT,jdbcType=VARCHAR},
						        							     #{exceptionInfo,mode=OUT,jdbcType=VARCHAR}
						        							     )}
    </select>
    
    <!-- 修改货件库存运单号 -->
	<update id="updateWaybillNoStock" parameterType="map">
		UPDATE tfr.t_opt_stock
			SET WAYBILL_NO = #{newWaybillNo}
		    WHERE WAYBILL_NO = #{oldWaybillNo}
	</update>
    <!-- 修改运单库存运单号 -->
	<update id="updateWaybillNoWaybillStock" parameterType="map">
		UPDATE tfr.t_opt_waybill_stock
			SET WAYBILL_NO = #{newWaybillNo}
		    WHERE WAYBILL_NO = #{oldWaybillNo}
	</update>
    <!-- 修改入库记录运单号 -->
	<update id="updateWaybillNoInStock" parameterType="map">
		UPDATE tfr.t_opt_in_stock
			SET WAYBILL_NO = #{newWaybillNo},IN_STOCK_TYPE = #{inOutStockType}
		    WHERE IN_STOCK_TIME > #{createBillTime} and WAYBILL_NO = #{oldWaybillNo}
	</update>
    <!-- 修改出库记录运单号 -->
	<update id="updateWaybillNoOutStock" parameterType="map">
		UPDATE tfr.t_opt_out_stock
			SET WAYBILL_NO = #{newWaybillNo},OUT_STOCK_TYPE = #{inOutStockType}
		    WHERE OUT_STOCK_TIME > #{createBillTime} and WAYBILL_NO = #{oldWaybillNo}
	</update>
	
	<!-- 查询运单库存明细 -->
	<select id="queryWaybillStockDetail" parameterType="map" resultType="com.deppon.foss.module.transfer.stock.api.shared.dto.WaybillStockDetailDto" >
		select g.waybill_no as waybillNo,
			   g.serial_no as serialNo,
		       g.bill_time as createBillTime,
		       s.id as stockId,
		       s.in_stock_time as inOutStockTime,
		       o.unified_code as unifiedOrgCode,
		       o.name as unifiedOrgName,
		       s.operator_name as operatorName
		from pkp.t_srv_labeled_good g 
		left join tfr.t_opt_stock s on g.waybill_no=s.waybill_no and g.serial_no=s.serial_no
		left join bse.t_bas_org o on s.org_code=o.code and o.active='Y'
		where g.waybill_no=#{waybillNo} and g.active='Y'
		order by g.serial_no 
	</select>
	<!-- 查询货件出库明细 -->
	<select id="queryGoodsOutStock" parameterType="map" resultType="com.deppon.foss.module.transfer.stock.api.shared.dto.WaybillStockDetailDto" >
		select s.out_stock_time as inOutStockTime,
			   o.unified_code as unifiedOrgCode,
			   o.name as unifiedOrgName,
			   s.operator_name as operatorName
		from tfr.t_opt_out_stock s 
		left join bse.t_bas_org o on s.org_code=o.code and o.active='Y'
		where s.waybill_no = #{waybillNo} and
		      s.serial_no = #{serialNo} and
		      s.out_stock_time > #{createBillTime}
		order by s.out_stock_time desc
	</select>
	<!-- 根据运单号查询库存部门编号 distinct -->
	<select id="queryStockOrgCodeByWaybillNo" parameterType="string" resultType="string">
		select distinct w.org_code from tfr.t_opt_waybill_stock w where w.waybill_no = #{waybillNo}
	</select>
	<!-- 根据运单号查询库存件数 -->
	<select id="queryStockQtyByWaybillNo" parameterType="string" resultType="int">
		select sum(s.stock_goods_qty) from tfr.t_opt_waybill_stock  s where s.waybill_no=#{waybillNo}
	</select>
	
	
	<!-- ******************************************************库位记录表*********************************************-->
	<!-- 入库表参数配置信息 -->
	<sql id="inStockAreaLog_param">
		ID,                  
		WAYBILL_NO,       
		SERIAL_NO,        
		OPERATOR_CODE,
		OPERATOR_NAME,
		IN_STOCK_TYPE,
		DEVICE_TYPE,
		IN_STOCK_TIME, 
		ORG_CODE,
		GOODS_AREA_CODE,
		GOODS_AREA_NAME,
		IN_STOCK_BILL_NO,
		SCAN_TIME,
		IS_VALID,
		PDA_DEVICE_NO,
		POSITION
	</sql>	
	<!-- 保存库位记录(跟入库记录一样的表结构，加了库位属性) -->
	<insert id="insertStockAreaLog"
		parameterType="com.deppon.foss.module.transfer.stock.api.shared.domain.InOutStockEntity">
		<![CDATA[
			insert into tfr.T_OPT_STOCK_AREA_LOG(
		]]>
		<include refid="inStockAreaLog_param" />
			) values (
				#{id,jdbcType=VARCHAR},
				#{waybillNO,jdbcType=VARCHAR},
				#{serialNO,jdbcType=VARCHAR},
				#{operatorCode,jdbcType=VARCHAR},
				#{operatorName,jdbcType=VARCHAR},
				#{inOutStockType,jdbcType=VARCHAR},
				#{deviceType,jdbcType=VARCHAR},
				#{inOutStockTime,jdbcType=TIMESTAMP},
				#{orgCode,jdbcType=VARCHAR},
				<choose>
				<when test="goodsAreaCode != null and goodsAreaCode != ''">
					#{goodsAreaCode,jdbcType=VARCHAR},
				</when>
				<otherwise>
					'N/A',
				</otherwise>
				</choose>
				#{goodsAreaName,jdbcType=VARCHAR},
				#{inOutStockBillNO,jdbcType=VARCHAR},
				#{scanTime,jdbcType=TIMESTAMP},
				#{isValid,jdbcType=VARCHAR},
				#{pdaDeviceNO,jdbcType=VARCHAR},
				#{position,jdbcType=VARCHAR}
			)
	</insert>
	<!-- 修改库存表的库位 -->
	<update id="updateStockStockPosition" parameterType="map">
		UPDATE TFR.T_OPT_STOCK  
		SET position = #{position}
		where waybill_no=#{waybillNo} 
			and serial_no=#{serialNO}  
		 	and goods_area_code=#{goodsAreaCode}
		  	and org_code=#{orgCode}
	</update>
	<!-- 修改运单库存表的库位件数 -->
	<update id="updateWaybillStockOutStockPosition" parameterType="com.deppon.foss.module.transfer.stock.api.shared.domain.WaybillStockEntity">
		update tfr.t_opt_waybill_stock a 
		set a.position_qty=(select count(position) as posCount 
			from tfr.t_opt_stock  
			where waybill_no=#{waybillNo} 
			and goods_area_code=#{goodsAreaCode}
			and org_code=#{orgCode}
			and position is not null)
		where a.waybill_no=#{waybillNo} 
		and a.goods_area_code=#{goodsAreaCode}
		and a.org_code=#{orgCode}
	</update>
	
	<!-- 入库修改运单库存 -->
	<update id="updateIsPackage" parameterType="map">
		UPDATE tfr.t_opt_stock s
		<set>
			s.IS_PAKCAGE = 'N'
		</set>
		where s.WAYBILL_NO = #{waybillNo} and s.SERIAL_NO = #{serialNo} and s.ORG_CODE =#{orgCode}
	</update>
	
	<!--  根据当前部门code 以及库区编码 查询库存里下一部门的code以及下一部门的Name(去除重复部门) 用于下拉菜单使用 -->
	<select id="queryNextOrgByStock" parameterType="map" resultMap="stockResultMap">
		select distinct(a.next_org_code),b.name as position FROM TFR.T_OPT_WAYBILL_STOCK a
		left join bse.t_bas_org b on b.code=a.next_org_code and b.active='Y'
		left join bse.t_bas_sales_department sd on sd.code=a.next_org_code and sd.active='Y'
		 where a.org_code = #{orgCode} and a.goods_area_code=#{goodArea} and b.active='Y'
		 and sd.code is null
		 <if test="orgName != null and orgName != '' ">
		 	 and  b.name like '%'|| #{orgName} ||'%'
		 </if>
	</select>
	
	<!-- 根据当前部门code 以及库区编码 查询库存里下一部门的code以及下一部门的Name(去除重复部门) 用于下拉菜单使用 总记录数 -->
	<select id="queryNextOrgByStockCount" parameterType="map" resultType="int">
		select count(distinct(a.next_org_code)) FROM TFR.T_OPT_WAYBILL_STOCK a
		left join bse.t_bas_org b on b.code=a.next_org_code and b.active='Y'
		left join bse.t_bas_sales_department sd on sd.code=a.next_org_code and sd.active='Y'
		 where a.org_code = #{orgCode} and a.goods_area_code=#{goodArea} and b.active='Y'
		 and sd.code is null
		 <if test="orgName != null and orgName != '' ">
		 	 and  b.name like '%'|| #{orgName} ||'%'
		 </if>
	</select>
	<!--根据运单号，查询入库部门编码-->
	<select id="queryInDeptCodeByWaybillNo" parameterType="string" resultType="string">
		SELECT SS.ORG_CODE
  		FROM (SELECT S.WAYBILL_NO, S.ORG_CODE, MAX(S.IN_STOCK_TIME) IN_STOCK_TIME
	          FROM TFR.T_OPT_IN_STOCK S
	         WHERE S.WAYBILL_NO = #{waybillNo,jdbcType=VARCHAR}
	         GROUP BY S.WAYBILL_NO, S.ORG_CODE) SS
 		ORDER BY SS.IN_STOCK_TIME
	</select>

	<select id="queryInStockInfoByType" parameterType="java.util.Map" resultMap="inStockMap">
		SELECT
			   ID,                  
			   WAYBILL_NO,       
			   SERIAL_NO,        
			   IN_STOCK_TYPE,
			   IN_STOCK_TIME, 
			   ORG_CODE,
			   GOODS_AREA_CODE,
			   OPERATOR_CODE,
			   OPERATOR_NAME
		  FROM TFR.T_OPT_IN_STOCK 
		 WHERE WAYBILL_NO = #{waybillNo,jdbcType=VARCHAR} 
		 	   <if test="serialNo != null and serialNo != '' ">
		      	AND	SERIAL_NO = #{serialNo,jdbcType=VARCHAR} 
		       </if>
		       <if test="inStockTypeList != null and inStockTypeList.size() > 0 ">
		       	AND	IN_STOCK_TYPE IN
		       		<foreach collection="inStockTypeList" open="(" close=")" separator="," index="index" item="item">
		      			 #{type,jdbcType=VARCHAR} 
		      		</foreach>
		       </if>
		 	 AND  IS_VALID = 'Y'
	  ORDER BY IN_STOCK_TIME DESC
	</select>
	
	
<!-- ****************************************我是分割线 下面是库存迁移有关SQL语句**************************************************** -->
	
	<!-- 查询库存迁移记录 -->
	<select id="queryMoveGoodsStock" parameterType="com.deppon.foss.module.transfer.stock.api.shared.dto.MoveGoodsStockDto" resultMap="MoveStockQueryResultMap">
		select t.id,
	       t.state,
	       t.remarks,
	       t.applicant_time,
	       t.applicant_name,
	       t.applicant_code,
	       t.org_name,
	       t.org_code,
	       d.goods_type,
	       d.moveout_name,
	       d.moveout_code,
	       d.moveout_areacode,
	       d.movein_name,
	       d.movein_code,
	       d.movein_areacode
       from tfr.t_opt_movestock t
       left join tfr.t_opt_movestock_department d on t.id = d.t_opt_movestock_id
		where t.applicant_time between #{beginInStockTime} and #{endInStockTime} 
		 <if test="isMoveGoodsMan == null or isMoveGoodsMan =='' ">
		 	 and t.applicant_code = #{applicant_code}
		 </if> 	 
		 <if test="state != null and state != '' ">
		 	 and t.state=#{state}
		 </if> 
	</select>
	
	<!-- 修改库存迁移的申请状态为   已撤销 -->
	<update id="revocationStock" parameterType="com.deppon.foss.module.transfer.stock.api.shared.domain.MoveGoodsEntity">
		UPDATE TFR.T_OPT_MOVESTOCK t   
		SET t.state = '4',
			t.revocation_time = #{revocation_time},
			t.revocation_name = #{revocation_name},
			t.revocation_code = #{revocation_code}
		where t.id = #{id}
			
	</update>   
	
	<!-- 修改库存迁移的审核状态  为已审核-->
	<update id="auditorStock" parameterType="com.deppon.foss.module.transfer.stock.api.shared.domain.MoveGoodsEntity">
		UPDATE TFR.T_OPT_MOVESTOCK t   
		SET t.state = '2',
			t.auditor_time = #{auditor_time},
			t.auditor_name = #{auditor_name},
			t.auditor_code = #{auditor_code}
		where t.id = #{id}	
	</update>
	
	<!-- 修改库存迁移的审核状态   为已作废-->
	<update id="invalidateStock" parameterType="com.deppon.foss.module.transfer.stock.api.shared.domain.MoveGoodsEntity">
		UPDATE TFR.T_OPT_MOVESTOCK t   
		SET t.state = '5',
			t.invalidate_time = #{invalidate_time},
			t.invalidate_name = #{invalidate_name},
			t.invalidate_code = #{invalidate_code}
		where t.id = #{id}	
	</update>
	
	<!-- 修改库存迁移的审核状态   为已退回-->
	<update id="returnStock" parameterType="com.deppon.foss.module.transfer.stock.api.shared.domain.MoveGoodsEntity">
		UPDATE TFR.T_OPT_MOVESTOCK t   
		SET t.state = '6',
			t.return_time = #{return_time},
			t.return_name = #{return_name},
			t.return_code = #{return_code}
		where t.id = #{id}	
	</update>
	<!-- 修改库存迁移的审核状态   为已迁移-->
	<update id="confirmStock" parameterType="com.deppon.foss.module.transfer.stock.api.shared.domain.MoveGoodsEntity">
		UPDATE TFR.T_OPT_MOVESTOCK t   
		SET t.state = '3',
			t.confirm_time = #{confirm_time},
			t.confirm_name = #{confirm_name},
			t.confirm_code = #{confirm_code}
		where t.id = #{id}	
	</update>
	<!-- 库存迁移参数配置信息 -->
	<sql id="moveGoodsStock_param">
		id,
		state,
		remarks,
		applicant_time,
		applicant_name,
		applicant_code,
		org_name,
		org_code
	</sql>
	<!-- 根据id查询库存迁移数据库中记录 -->
	<select id="queryMoveGoodsEntityById"  parameterType="String" resultMap="moveGoodsStockResultMap">
		<![CDATA[
			SELECT 
		]]>
		<include refid="moveGoodsStock_param"/>
		<![CDATA[
			FROM tfr.t_opt_movestock where id = #{id} 
		]]>
	</select>
	<!-- 根据id查询库存迁移明细 -->
	<select id="viewMoveGoodsById" parameterType="String" resultMap="MoveStockQueryResultMap">
		select t.id,
		       t.remarks,
		       t.state,
		       d.goods_type,
		       d.moveout_name,
		       d.moveout_code,
		       d.moveout_areaname,
		       d.moveout_areacode,
		       d.movein_name,
		       d.movein_code,
		       d.movein_areaname,
		       d.movein_areacode
	    from tfr.t_opt_movestock t 
	    left join tfr.t_opt_movestock_department d on t.id=d.t_opt_movestock_id
	       where t.id= #{id}

	</select>
	
	<!-- 库存迁移主表入库信息 -->
	<insert id="moveGoodsInStock"
		parameterType="com.deppon.foss.module.transfer.stock.api.shared.domain.MoveGoodsEntity">
		<![CDATA[
			insert into tfr.T_OPT_MOVESTOCK(
		]]>
		<include refid="moveGoodsStock_param" />
			) values (
				#{id,jdbcType=VARCHAR},
				#{state,jdbcType=VARCHAR},
				#{remarks,jdbcType=VARCHAR},
				#{applicant_time,jdbcType=TIMESTAMP},
				#{applicant_name,jdbcType=VARCHAR},
				#{applicant_code,jdbcType=VARCHAR},
				#{org_name,jdbcType=VARCHAR},
				#{org_code,jdbcType=VARCHAR}
			)
	</insert>
	
	<!-- 库存迁移副表入库信息 -->
	<insert id="moveGoodsDepartmentInStock"
		parameterType="com.deppon.foss.module.transfer.stock.api.shared.domain.MoveGoodsDepartmentEntity">
			insert into tfr.T_OPT_MOVESTOCK_DEPARTMENT(
				id,
				T_OPT_MOVESTOCK_id,
				moveout_name,
				moveout_code,
				moveout_areaname,
				moveout_areacode,
				movein_name,
				movein_code,
				movein_areaname,
				movein_areacode
			) values (
				#{id,jdbcType=VARCHAR},
				#{T_OPT_MOVESTOCK_id,jdbcType=VARCHAR},
				#{moveout_name,jdbcType=VARCHAR},
				#{moveout_code,jdbcType=VARCHAR},
				#{moveout_areaname,jdbcType=VARCHAR},
				#{moveout_areacode,jdbcType=VARCHAR},
				#{movein_name,jdbcType=VARCHAR},
				#{movein_code,jdbcType=VARCHAR},
				#{movein_areaname,jdbcType=VARCHAR},
				#{movein_areacode,jdbcType=VARCHAR}
			)
	</insert>
	
	<!-- 库存迁移主表入库修改人信息 -->
	<update id="moveGoodsModifyInStock" 
				parameterType="com.deppon.foss.module.transfer.stock.api.shared.domain.MoveGoodsEntity">
		UPDATE TFR.T_OPT_MOVESTOCK t   
		SET t.state = '1',
			t.remarks = #{remarks},
			t.modify_time = #{modify_time},
			t.modify_name = #{modify_name},
			t.modify_code = #{modify_code}
		where t.id = #{id}
	</update>
	<!-- 库存迁移移入移出部门信息 -->
	<update id="moveGoodsModifyDepartmentInStock" 
				parameterType="com.deppon.foss.module.transfer.stock.api.shared.domain.MoveGoodsDepartmentEntity">
		UPDATE TFR.T_OPT_MOVESTOCK_DEPARTMENT t   
		SET 	t.moveout_name=#{moveout_name},
				t.moveout_code=#{moveout_code},
				t.moveout_areaname=#{moveout_areaname},
				t.moveout_areacode=#{moveout_areacode},
				t.movein_name=#{movein_name},
				t.movein_code=#{movein_code},
				t.movein_areaname=#{movein_areaname},
				t.movein_areacode=#{movein_areacode}
		where t.T_OPT_MOVESTOCK_id = #{T_OPT_MOVESTOCK_id}
	</update>
	
	<!-- 查询库存迁移总记录数 -->
	<select id="queryMoveGoodsCount"	resultType="Long" parameterType="com.deppon.foss.module.transfer.stock.api.shared.dto.MoveGoodsStockDto">
			  select count(t.id)
			    from tfr.t_opt_movestock t 
          		left join tfr.t_opt_movestock_department d on t.id=d.t_opt_movestock_id and d.id !='' and d.id != null
          		where t.applicant_time between #{beginInStockTime} and #{endInStockTime} 
          		<!-- 这个是要判断的,如果是搬迁员,就查询所有的信息 -->
                <if test="isMoveGoodsMan == null or isMoveGoodsMan =='' ">
		 			 and t.applicant_code = #{applicant_code}
		 		</if> 	
			    <if test="state != null and state != '' ">
		 	    	and t.state=#{state}
		 		</if>   
			  
	</select>
	
	<!-- 从库存表中查询出移出部门的货物 -->
	<select id="queryGoodsByOrgAndGoodsArea" parameterType="map" resultMap="stockResultMap">
		select * from tfr.t_opt_stock t
        where t.org_code= #{OrgCode} and t.goods_area_code= #{GoodsAreaCode}
	</select>
	
	<!-- 从运单库存表中查询出移出部门的货物 -->
	<select id="queryGoodsByOrgAndGoodsAreaFromWaybillStock" parameterType="map" resultMap="waybillStockResultMap">
		select * from tfr.t_opt_waybill_stock t
        where t.org_code= #{OrgCode} and t.goods_area_code= #{GoodsAreaCode}
	</select>
	
	<!-- 更新库存表 -->  
	<update id="updateMoveInArea"
		parameterType="map">
			UPDATE tfr.T_OPT_STOCK t
			set	t.org_code = #{stockEntity.orgCode},
				t.goods_area_code = #{stockEntity.goodsAreaCode},
				t.goods_area_name = null,
				t.in_stock_time = #{stockEntity.inStockTime}
			where t.org_code = #{moveout_code} and t.goods_area_code = #{moveout_areacode}
	</update>
	
	<!-- 更新运单库存表 -->  
	<update id="updateMoveInAreaFromWaybillStock"
		parameterType="map">
			UPDATE tfr.T_OPT_WAYBILL_STOCK t
			set	t.org_code = #{waybillStockEntity.orgCode},
				t.goods_area_code = #{waybillStockEntity.goodsAreaCode},
				t.in_stock_time = #{waybillStockEntity.inStockTime}
			where t.org_code = #{moveout_code} and t.goods_area_code = #{moveout_areacode}
	</update>
	
	<!-- 根据部门code和库区code查询目的站部门code -->
	<select id="queryArriveCode" parameterType="map" resultType = "string">
		 select a.arrive_region_code 
		 from bse.t_bas_goods_area a
          where a.org_code = #{orgcode} and a.active = 'Y' and a.goods_area_code = #{areacode}
	</select>


























	
	<select id="findStockOverTime" parameterType="map" resultMap="ErrorLoseStartingResultMap" >
		<!--营业部-->
		select a.waybill_no,
		       a.stock_goods_qty,
		       a.in_stock_time,
		       a.org_code,
		       t.name org_Name,
		       p.pickup_to_door,
		       p.Pickup_Centralized,
		       t.station,
		       '营业部' channel_Business
		  from bse.t_bas_sales_department t
		 right join TFR.t_Opt_Waybill_Stock A
		    on a.org_code = t.code
		   and a.in_stock_time <![CDATA[<]]> #{inStockTime}
		  LEFT JOIN PKP.T_SRV_WAYBILL P
		    ON A.WAYBILL_NO = P.WAYBILL_NO
		   AND P.ACTIVE = 'Y'
		   AND A.ORG_CODE = P.RECEIVE_ORG_CODE
		 where t.active = 'Y'
		   and A.IN_STOCK_TIME <![CDATA[<]]> #{inStockTime}
		   AND p.active = 'Y'
		<!--外场-->
		UNION ALL
		<!-- select a.waybill_no,
		       a.stock_goods_qty,
		       a.in_stock_time,
		       t.billinggroup_code org_code,
		       T.TRANSFER_CENTER_NAME org_Name,
		       p.pickup_to_door,
		       p.Pickup_Centralized,
		       'N' station,
		       '外场' channel_Business
		  from BSE.T_BAS_BILLINGGROUP_TRANSFER T
		 right join TFR.T_OPT_WAYBILL_STOCK A
		    on a.org_code = t.billinggroup_code
		   and a.in_stock_time <![CDATA[<]]> #{inStockTime}
		  LEFT JOIN PKP.T_SRV_WAYBILL P
		    ON A.WAYBILL_NO = P.WAYBILL_NO
		   AND P.ACTIVE = 'Y'
		   AND A.ORG_CODE = P.CREATE_ORG_CODE
		 where A.IN_STOCK_TIME  <![CDATA[<]]> #{inStockTime}
		   AND P.ACTIVE = 'Y'
		   and T.ACTIVE = 'Y' -->
					   select a.waybill_no,
			       a.stock_goods_qty,
			       a.in_stock_time,
			       a.org_code,
			       bs.name org_Name,
			       p.pickup_to_door,
			       p.Pickup_Centralized,
			       'Y' station,
			       '外场' channel_Business
			  from bse.t_bas_sales_department t
			 right join TFR.t_Opt_Waybill_Stock A
			    on a.org_code = t.transfer_center
			    and t.station='Y'
			   and a.in_stock_time <![CDATA[<]]> #{inStockTime}
			  LEFT JOIN PKP.T_SRV_WAYBILL P
			    ON A.WAYBILL_NO = P.WAYBILL_NO
			   AND P.ACTIVE = 'Y'
			   AND t.code = P.Create_Org_Code
			   left join bse.t_bas_transfer_center bs on bs.active='Y' and bs.org_code=t.transfer_center
			 where t.active = 'Y'
			   and A.IN_STOCK_TIME <![CDATA[<]]> #{inStockTime}
			   AND p.active = 'Y'
			   and t.station='Y'
	</select>

	<!--根据运单号和流水号更新库存货区编码和入库时间-->
	<update id="updateReturnGoodsState" parameterType="com.deppon.foss.module.transfer.stock.api.shared.domain.StockEntity">
		update tfr.t_opt_stock t 
		set t.GOODS_AREA_CODE = #{goodsAreaCode,jdbcType=VARCHAR},
		t.IN_STOCK_TIME = #{inStockTime,jdbcType=TIMESTAMP}
		<where>
			t.ID=#{id,jdbcType=VARCHAR}
		</where>
	</update>
		<!-- 根据运单号查询运单库存 -->
	<select id="queryWaybillStockByWaybillNo"  parameterType="String" resultMap="waybillStockResultMap">
		<![CDATA[
			SELECT 
		]]>
		<include refid="waybillStock_param"/>
		<![CDATA[
			FROM tfr.t_opt_waybill_stock where WAYBILL_NO = #{waybillNo}
		]]>
	</select>
	<!-- 根据运单号、部门CODE查询运单库存总件数 -->
	<select id="querySumStockGoodsQtyByWaybillOrgCode"  parameterType="map" resultType="int">		
			SELECT 
		sum(stock_goods_qty) stock_goods_qty
			FROM tfr.t_opt_waybill_stock where WAYBILL_NO = #{waybillNo} AND ORG_CODE = #{orgCode}		
	</select>
	
	<!-- 根据运单号s、部门CODE查询运单库存总件数 -->
	<select id="querySumStockGoodsQtyByWaybillsOrgCode"  parameterType="map" resultMap="waybillStockResultMap">
			select s.waybill_no            WAYBILL_NO,
				   sum(s.stock_goods_qty)  STOCK_GOODS_QTY
			from tfr.t_opt_waybill_stock s 
     		 	where s.waybill_no in 
     		 	 <foreach collection="waybillNos"  index="index" item="waybillNo"  open="(" separator="," close=")">  
	            		#{waybillNo,jdbcType=VARCHAR} 
	             </foreach>
      			and s.org_code= #{orgCode,jdbcType=VARCHAR} 
      			group by s.waybill_no,s.org_code		
	</select>
	
	<!-- 修改运单库存表的货区编码和库存总件数-->
	<update id="updateWaybillStockGoodsArea" parameterType="com.deppon.foss.module.transfer.stock.api.shared.domain.StockEntity">
			UPDATE tfr.t_opt_waybill_stock
			SET GOODS_AREA_CODE = #{goodsAreaCode},
			STOCK_GOODS_QTY = #{stockGoodsCount}
		    WHERE WAYBILL_NO = #{waybillNO}
		    AND ORG_CODE = #{orgCode}
	</update>


	
	<insert id="insertPdaUnloadmsg" parameterType="com.deppon.foss.module.transfer.stock.api.shared.domain.InOutStockEntity" >
		insert into tfr.t_opt_pdaunload_msg (
			id              ,
			waybill_no                   ,
			serial_no                    ,
			OPERATOR_CODE                ,
			OPERATOR_NAME                ,
			ORG_CODE                     ,
			in_stock_type                ,
			create_time                  ,
			be_Package                   ,
			job_id                    
			) 
		values (
			#{id,jdbcType=VARCHAR},
			#{waybillNO,jdbcType=VARCHAR},
			#{serialNO,jdbcType=VARCHAR},
			#{operatorCode,jdbcType=VARCHAR},
			#{operatorName,jdbcType=VARCHAR},
			#{orgCode,jdbcType=VARCHAR},
			#{deviceType,jdbcType=VARCHAR},<!-- 临时当作入库类型 -->
			#{inOutStockTime,jdbcType=TIMESTAMP},
			#{bePackage,jdbcType=VARCHAR},
			#{goodsAreaCode,jdbcType=VARCHAR}<!-- 默认N/A -->
			)
	</insert>
	
	<!-- 查询库区修改记录 -->
	<select id="queryChangeGoodsArea" parameterType="com.deppon.foss.module.transfer.stock.api.shared.dto.ChangeGoodsAreaQueryDto" resultMap="changeGoodsAreaResultMap">
		select t.id,
	       t.state,
	       t.remarks,
	       t.applicant_time,
	       t.applicant_name,
	       t.applicant_code,
	       t.org_name,
	       t.org_code
       from tfr.t_opt_change_goodsarea t
		where t.applicant_time between #{beginInStockTime} and #{endInStockTime} 
		 <if test="state != null and state != '' ">
		 	 and t.state=#{state}
		 </if> 
	</select>
	
	<!-- 查询库存迁移总记录数 -->
	<select id="queryChangeGoodsAreaCount"	resultType="Long" parameterType="com.deppon.foss.module.transfer.stock.api.shared.dto.ChangeGoodsAreaQueryDto">
			  select count(t.id)
			    from tfr.t_opt_change_goodsarea t 
          		where t.applicant_time between #{beginInStockTime} and #{endInStockTime} 	
			    <if test="state != null and state != '' ">
		 	    	and t.state=#{state}
		 		</if>   
	</select>
	
	<!-- 根据id查询库区编号修改数据库中的记录 -->
	<select id="queryChangeGoodsAreaEntityById"  parameterType="String" resultMap="changeGoodsAreaResultMap">
		select  t.id
		from tfr.t_opt_change_goodsarea t 
		 where t.id = #{id} 
	</select>
	
	<!-- 修改库区编号修改的审核状态   为已作废-->
	<update id="invalidateChangeGoodsArea" parameterType="com.deppon.foss.module.transfer.stock.api.shared.domain.ChangeGoodsAreaEntity">
		 update tfr.t_opt_change_goodsarea t 
 			set t.state = '3'
			where t.id = #{id}	
	</update>
	
	
	<!-- 根据部门code查询此部门的库区code集合-->
	<select id="lookGoodsAreaByOrgcode" parameterType="String"  resultMap="newAndOldGoodsAreaEntityResultMap">
		select distinct t.org_code,t.goods_area_code from bse.t_bas_goods_area t 
       		where t.org_code = #{orgCode} and t.active = 'Y' 
       		order by t.goods_area_code
	</select>
	
	<!-- 将申请的库区编号修改信息写入主表 -->
	<insert id="changeGoodsAreaInStock"
		parameterType="com.deppon.foss.module.transfer.stock.api.shared.domain.ChangeGoodsAreaEntity">
		insert into tfr.t_opt_change_goodsarea values (
				#{id,jdbcType=VARCHAR},
				#{state,jdbcType=VARCHAR},
				#{remarks,jdbcType=VARCHAR},
				#{applicant_time,jdbcType=TIMESTAMP},
				#{applicant_name,jdbcType=VARCHAR},
				#{applicant_code,jdbcType=VARCHAR},
				#{org_name,jdbcType=VARCHAR},
				#{org_code,jdbcType=VARCHAR}
			)
	</insert>
	
	<!-- 将申请的库区编号修改的新旧库区信息写入副表 -->
	<insert id="changeGoodsAreaNewAndOldInStock"
		parameterType="com.deppon.foss.module.transfer.stock.api.shared.domain.NewAndOldGoodsAreaEntity">
		insert into tfr.t_opt_change_goodsarea_area values (
				#{id,jdbcType=VARCHAR},
				#{change_goodsarea_area_id,jdbcType=VARCHAR},
				#{org_code,jdbcType=VARCHAR},
				#{old_goods_area_code,jdbcType=VARCHAR},
				#{new_goods_area_code,jdbcType=VARCHAR}
				
			)
	</insert>
	
	<!-- 根据部门code和id查询库区编码对应关系 -->
	<select id="lookModifyGoodsAreaByOrgcode" parameterType="map" resultMap="newAndOldGoodsAreaEntityResultMap">
		select * from tfr.t_opt_change_goodsarea_area t
        where t.org_code= #{orgCode} and t.change_goodsarea_area_id= #{id}
	</select>
	
	<!-- 根据部门code和id查询库区编码对应关系(查询页面) -->
	<select id="lookLookGoodsAreaByOrgcode" parameterType="map" resultMap="newAndOldGoodsAreaEntityResultMap">
		select * from tfr.t_opt_change_goodsarea_area t
        where t.org_code= #{orgCode} and t.change_goodsarea_area_id= #{id}
        	and  t.new_goods_area_code is not null
	</select>
	
	<!-- 根据id更新  新库区编号 -->
	<update id="updateNewCodeById" parameterType="com.deppon.foss.module.transfer.stock.api.shared.domain.NewAndOldGoodsAreaEntity">
		UPDATE tfr.t_opt_change_goodsarea_area t   
			set t.new_goods_area_code = #{new_goods_area_code}
		where t.id = #{id}
	</update>   
	
	<!-- 根据id更新备注信息 -->
	<update id="updateGoodsAreaInStockById" parameterType="com.deppon.foss.module.transfer.stock.api.shared.domain.ChangeGoodsAreaEntity">
		UPDATE tfr.t_opt_change_goodsarea t   
			set t.remarks = #{remarks}
		where t.id = #{id}
	</update>  
	
	<!-- 将要修改的新旧库区关系写入数据库 -->
	<insert id="insertNewCodeById"
		parameterType="com.deppon.foss.module.transfer.stock.api.shared.domain.NewAndOldGoodsAreaEntity">
		insert into tfr.t_opt_change_goodsarea_area values (
				#{id,jdbcType=VARCHAR},
				#{change_goodsarea_area_id,jdbcType=VARCHAR},
				#{org_code,jdbcType=VARCHAR},
				#{old_goods_area_code,jdbcType=VARCHAR},
				#{new_goods_area_code,jdbcType=VARCHAR}
				
			)
	</insert>
	
	<!-- 把tfr.t_opt_stock 的库区code变为    新库区code_new -->
	<update id="update_T_opt_stock_to_code_new" parameterType="map">
		update TFR.t_opt_stock a
   			SET a.goods_area_code =
      			 (select b.new_goods_area_code
          			from tfr.t_opt_change_goodsarea_area b
        			 where b.new_goods_area_code is not null
			         and b.org_code = #{orgCode}
			         and b.change_goodsarea_area_id = #{id}
               		 and a.goods_area_code=b.old_goods_area_code)	
 			where a.goods_area_code = 
 				(select b.old_goods_area_code
          			from tfr.t_opt_change_goodsarea_area b
         			where b.new_goods_area_code is not null
          			and b.org_code = #{orgCode}
           			and b.change_goodsarea_area_id = #{id}
              		and a.goods_area_code=b.old_goods_area_code)
              	and a.org_code= #{orgCode}
	</update>
	
	<!-- 把tfr.t_opt_waybill_stock 的库区code变为    新库区code_new -->
	<update id="update_T_opt_waybill_stock_to_code_new" parameterType="map">
		update TFR.t_opt_waybill_stock a
   			SET a.goods_area_code =
      			 (select b.new_goods_area_code
          			from tfr.t_opt_change_goodsarea_area b
        			 where b.new_goods_area_code is not null
			         and b.org_code =  #{orgCode}
			         and b.change_goodsarea_area_id =  #{id}
               		 and a.goods_area_code=b.old_goods_area_code)	
 			where a.goods_area_code = 
 				(select b.old_goods_area_code
          			from tfr.t_opt_change_goodsarea_area b
         			where b.new_goods_area_code is not null
          			and b.org_code =  #{orgCode}
           			and b.change_goodsarea_area_id =  #{id}
              		and a.goods_area_code=b.old_goods_area_code)
              	and a.org_code= #{orgCode}
	</update>
	
	<!-- 将tfr.t_opt_stock库区编号中的'_new'去掉 -->
	<update id="update_T_opt_stock_delete_new" parameterType="string">
		update tfr.t_opt_stock  a 
       	set a.goods_area_code = substr(a.goods_area_code,0,length(a.goods_area_code)-4)
   		where a.org_code = #{orgCode} and a.goods_area_code like '%_new'
	</update>
	
	<!-- 将tfr.t_opt_waybill_stock库区编号中的'_new'去掉 -->
	<update id="update_T_opt_waybill_stock_delete_new" parameterType="string">
		update tfr.t_opt_waybill_stock  a 
       	set a.goods_area_code = substr(a.goods_area_code,0,length(a.goods_area_code)-4)
   		where a.org_code = #{orgCode} and a.goods_area_code like '%_new'
	</update>
	
	<!-- 将带'_new'的无法删除的库区里面的运单数量加到已存在的运单明细上 -->
	<update id="update_T_opt_waybill_stock_add_new" parameterType="string">
		update tfr.t_opt_waybill_stock t
   		set t.stock_goods_qty =
       	(SELECT COUNT(0)
          	FROM tfr.t_opt_stock c
         	WHERE c.org_code = #{orgCode}
            and c.waybill_no = t.waybill_no
            and c.org_code = t.org_code
            and c.goods_area_code = t.goods_area_code
            GROUP BY c.waybill_no, c.org_code, c.goods_area_code)
       where exists (SELECT 1
           FROM tfr.t_opt_stock c
           WHERE c.org_code = #{orgCode}
           and c.waybill_no = t.waybill_no
           and c.org_code = t.org_code
           and c.goods_area_code = t.goods_area_code
           GROUP BY c.waybill_no, c.org_code, c.goods_area_code)
	</update>
	
	<!-- 将'_new'的数据物理删除 -->
	<delete id="delete_T_opt_waybill_stock_new" parameterType="string">
		delete tfr.t_opt_waybill_stock t 
			where t.org_code=#{orgCode} 
			and t.goods_area_code like '%_new'
	</delete>
	
	<!-- 修改库区编号修改的审核状态   为已修改-->
	<update id="modifiedChangeGoodsArea" parameterType="string">
		 update tfr.t_opt_change_goodsarea t 
 			set t.state = '2'
			where t.id = #{id}	
	</update>


	<!--  在丢货改善小组超过28天的运单-->
	<select id="dayLoseGoodsForGuiji28" resultType="String">
		SELECT a.waybill_no
	  FROM TFR.T_OPT_WAYBILL_STOCK A
	 INNER JOIN pkp.t_srv_waybill p
	    ON p.waybill_no = a.waybill_no
	   AND p.transport_type = 'TRANS_EXPRESS'
	 INNER JOIN BSE.T_BAS_GOODS_AREA bga
	    on  bga.active = 'Y'
	   and  bga.org_code = a.org_code
	 inner join bse.t_bas_transfer_center t
	    on bga.org_code = t.org_code
	   and t.active = 'Y'
	 WHERE bga.ACTIVE = 'Y'
	   and bga.goods_area_type = 'BSE_GOODSAREA_TYPE_EXCEPTION'
	   AND p.bill_time <![CDATA[<=]]>
	       TO_DATE(TO_CHAR(SYSDATE - 28, 'yyyy-mm-dd'), 'yyyy-mm-dd')
	   AND p.transport_type = 'TRANS_EXPRESS'
	</select>
	
	<!-- 查询必走货  统计 -->
	<select id="queryBcmWaybillPriorityGoodsStatistics" parameterType="com.deppon.foss.module.transfer.stock.api.shared.dto.WaybillStockQueryDto" resultMap="WaybillStockStatisticsResultMap">
			    select 
			            ROUND(sum(bss.weight),  2) AS STOCK_WEIGHT_TOTAL,
           				ROUND(sum(bss.volumn), 2) AS STOCK_VOLUME_TOTAL
			    from tfr.t_opt_waybill_stock t 
			    inner join tfr.t_opt_stock st on st.waybill_no=t.waybill_no
      			inner join tfr.t_Opt_Bcmach_Sortscan bss on bss.waybill_no=st.waybill_no and bss.serial_no=st.serial_no
          		left join pkp.t_srv_waybill w on t.waybill_no=w.waybill_no AND W.ACTIVE = 'Y' 
          		left join pkp.t_srv_product p on w.product_code = p.code and p.active='Y'   
			    <where>
			    	    (
			    <![CDATA[   t.plan_start_time < To_date(to_char(sysdate,'yyyy-mm-dd hh24:mi:ss'),'yyyy-mm-dd hh24:mi:ss') ]]>
		                    and p.priority = 'FAST' and p.levels = '3' 
		                     <![CDATA[ and p.seq <4 ]]>
		                     and t.next_org_code is not null
		                     and (select count(0) from bse.t_bas_sales_department a where a.code=t.next_org_code and a.active='Y' and a.station='Y') =0
		                    and t.ORG_CODE =#{orgCode}   
		                    <if test="beginInStockTime!=null">
					    		<if test="endInStockTime!=null">
					    			and t.IN_STOCK_TIME between #{beginInStockTime} and #{endInStockTime} 
					    		</if>
					        </if>
		                    <if test="goodsAreaCode!=null and goodsAreaCode!=''">
								and t.GOODS_AREA_CODE = #{goodsAreaCode}
					    	</if>
							<if test="productCode!=null and productCode!=''">
								and w.product_code = #{productCode}
					    	</if> 
			    	     )
			    	  OR
			    	    (
			    <![CDATA[ 	t.plan_start_time < To_date(to_char(sysdate-1,'yyyy-mm-dd hh24:mi:ss'),'yyyy-mm-dd hh24:mi:ss') ]]>
			                and p.priority = 'NORMAL' and p.levels = '3' 
			                 <![CDATA[ and p.seq <8 ]]>
			                 and t.next_org_code is not null
			                 and (select count(0) from bse.t_bas_sales_department a where a.code=t.next_org_code and a.active='Y' and a.station='Y') =0
			                and t.ORG_CODE =#{orgCode}   
			                <if test="beginInStockTime!=null">
					    		<if test="endInStockTime!=null">
					    			and t.IN_STOCK_TIME between #{beginInStockTime} and #{endInStockTime} 
					    		</if>
					        </if>
		                    <if test="goodsAreaCode!=null and goodsAreaCode!=''">
								and t.GOODS_AREA_CODE = #{goodsAreaCode}
					    	</if>
							<if test="productCode!=null and productCode!=''">
								and w.product_code = #{productCode}
					    	</if> 
			    	     )
			    </where>       
	</select>
	
	<!-- 查询必走货  统计 -->
	<select id="queryNoBcmWaybillPriorityGoodsStatistics" parameterType="com.deppon.foss.module.transfer.stock.api.shared.dto.WaybillStockQueryDto" resultMap="WaybillStockStatisticsResultMap">
			    select 
			    	ROUND(sum(w.goods_weight_total/w.goods_qty_total),  2) AS STOCK_WEIGHT_TOTAL,
           			ROUND(sum(w.goods_volume_total/w.goods_qty_total), 2) AS STOCK_VOLUME_TOTAL
			    from tfr.t_opt_waybill_stock t 
			    inner join tfr.t_opt_stock st on st.waybill_no=t.waybill_no
      			left  join tfr.t_Opt_Bcmach_Sortscan bss on bss.waybill_no=st.waybill_no and bss.serial_no=st.serial_no
          		left join pkp.t_srv_waybill w on t.waybill_no=w.waybill_no AND W.ACTIVE = 'Y' 
          		left join pkp.t_srv_product p on w.product_code = p.code and p.active='Y'   
			    <where>
			    	    (
			    <![CDATA[   t.plan_start_time < To_date(to_char(sysdate,'yyyy-mm-dd hh24:mi:ss'),'yyyy-mm-dd hh24:mi:ss') ]]>
		                    and p.priority = 'FAST' and p.levels = '3' 
		                     <![CDATA[ and p.seq <4 ]]>
		                     and t.next_org_code is not null
		                     and (select count(0) from bse.t_bas_sales_department a where a.code=t.next_org_code and a.active='Y' and a.station='Y') =0
		                    and t.ORG_CODE =#{orgCode}   
		                    <if test="beginInStockTime!=null">
					    		<if test="endInStockTime!=null">
					    			and t.IN_STOCK_TIME between #{beginInStockTime} and #{endInStockTime} 
					    		</if>
					        </if>
		                    <if test="goodsAreaCode!=null and goodsAreaCode!=''">
								and t.GOODS_AREA_CODE = #{goodsAreaCode}
					    	</if>
							<if test="productCode!=null and productCode!=''">
								and w.product_code = #{productCode}
					    	</if> 
					    	and bss.id is null
			    	     )
			    	  OR
			    	    (
			    <![CDATA[ 	t.plan_start_time < To_date(to_char(sysdate-1,'yyyy-mm-dd hh24:mi:ss'),'yyyy-mm-dd hh24:mi:ss') ]]>
			                and p.priority = 'NORMAL' and p.levels = '3' 
			                 <![CDATA[ and p.seq <8 ]]>
			                 and t.next_org_code is not null
			                 and (select count(0) from bse.t_bas_sales_department a where a.code=t.next_org_code and a.active='Y' and a.station='Y') =0
			                and t.ORG_CODE =#{orgCode}   
			                <if test="beginInStockTime!=null">
					    		<if test="endInStockTime!=null">
					    			and t.IN_STOCK_TIME between #{beginInStockTime} and #{endInStockTime} 
					    		</if>
					        </if>
		                    <if test="goodsAreaCode!=null and goodsAreaCode!=''">
								and t.GOODS_AREA_CODE = #{goodsAreaCode}
					    	</if>
							<if test="productCode!=null and productCode!=''">
								and w.product_code = #{productCode}
					    	</if> 
					    	and bss.id is null
			    	     )
			    </where>       
	</select>
	 <!-- 查询货件库存和货区信息 供接送货组调用 -->
	<select id="queryStockAndGoodsArea"  parameterType="HashMap" resultMap="stockResultMap">
		 Select    t.Waybill_No,
			       t.Serial_No,
			       t.Org_Code,
			       t.Goods_Area_Code,
			       a.Goods_Area_Name,
			       t.Operator_Name,
			       t.In_Stock_Time,
			       t.Scan_Time,
			       t.Next_Org_Code
			  From Tfr.T_Opt_Stock t Left Join  Bse.T_Bas_Goods_Area a On 
			  t.goods_area_code=a.goods_area_code And T.Org_Code = A.Org_Code
			 Where t.Waybill_No = #{wayBillNo}
			   And t.Serial_No = #{serialNO}
			   And a.Active='Y'
	</select>
	
	<select id="ifIsExpressWaybill" parameterType="java.lang.String" resultType="int">
		select count(*) from pkp.t_srv_waybill w where w.product_code IN ('RCP','PACKAGE','EPEP','DEAP') and w.waybill_no = #{wayBillNo}
	</select>
	<!-- 快递子母件 丢货找到查询 hwy-218427 -->
	<select id="queryLostFindGoods" parameterType="com.deppon.foss.module.transfer.stock.api.shared.domain.InOutStockEntity" resultMap="inStockMap" >
	   select max(s.in_stock_time) IN_STOCK_TIME  from tfr.t_opt_in_stock s 
         where s.in_stock_type ='LOSS_GOODS_FIND'
			and s.waybill_no =#{waybillNo}
			and s.serial_no =#{serialNo}
			and s.is_valid ='Y'
	
	</select>
	
	<!--根据运单号查询货件库存,按照入库时间排序  200968 2016-3-16-->
	<select id="queryStockByWaybillNoInStockTime"  parameterType="com.deppon.foss.module.transfer.stock.api.shared.domain.WaybillStockEntity" resultMap="stockResultMap">
		SELECT 
		st.ID,
		st.WAYBILL_NO,
		st.SERIAL_NO,
		st.ORG_CODE,
		st.NEXT_ORG_CODE,
		st.GOODS_AREA_CODE,
		st.OPERATOR_NAME,
		st.OPERATOR_CODE,
		st.IN_STOCK_TIME,
		st.DEVICE_TYPE,
		st.position,
		st.PRE_HANDOVER_STATUS 
		FROM tfr.t_opt_stock st
		where st.waybill_no = #{waybillNO}
	    order by st.in_stock_time
	</select>
	
	

	
	<!-- 根据CRM传过来的运单号查询货件库存 -->
	<select id="stockQueryByCrmWaybillNo"  parameterType="string" resultMap="stockResultMap">
		SELECT O.NAME ORG_CODE,TT.*
		FROM (SELECT T.WAYBILL_NO,
		             T.ORG_CODE,
		             T.IN_STOCK_TIME,
		             T.SERIAL_NO,
		             ROW_NUMBER() OVER(PARTITION BY T.ORG_CODE  ORDER BY T.IN_STOCK_TIME DESC) N
		         FROM TFR.T_OPT_STOCK T
		         WHERE T.WAYBILL_NO =#{waybillNO} ) TT
		         JOIN BSE.T_BAS_ORG O
		         ON O.CODE = TT.ORG_CODE
		         AND O.ACTIVE='Y'
		         WHERE TT.N=1
	</select>
	
	<select id="stockQueryOrgCodeByWaybillNo" parameterType="String" resultType="String">
	SELECT O.CODE ORG_CODE
    FROM (SELECT T.WAYBILL_NO,
                 T.ORG_CODE,
                 T.IN_STOCK_TIME,
                 T.SERIAL_NO,
                 ROW_NUMBER() OVER(PARTITION BY T.ORG_CODE  ORDER BY T.IN_STOCK_TIME DESC) N
             FROM TFR.T_OPT_STOCK T
             WHERE T.WAYBILL_NO =#{waybillNO} ) TT
             JOIN BSE.T_BAS_ORG O
             ON O.CODE = TT.ORG_CODE
             AND O.ACTIVE='Y'
             WHERE TT.N=1
	</select>

	
	<!-- 根据运单号,部门code查询运单件数 -->
	<select id="queryCountByWaybillNoAndOrgCode"  parameterType="map" resultType="int">
		select s.stock_goods_qty 
 			from tfr.t_opt_waybill_stock s 
 			where s.waybill_no = #{waybillNO} and s.org_code = #{orgCode}
	</select>
	
	<select id="queryGoodsAreaCodes" parameterType="java.util.Map" resultType="java.lang.String">
		SELECT t.goods_area_code
		  FROM bse.t_bas_goods_area t
		 WHERE t.active = 'Y'
		   AND t.org_code = #{orgCode,jdbcType=VARCHAR}
		   AND t.goods_area_type = #{goodsAreaType,jdbcType=VARCHAR}
	</select>
	
	<!-- 根据当前部门获得库存的总票数总件数  272681-->
	<select id="queryStockGoodsQtyAndWaybillQty"  parameterType="map" resultMap="WaybillStockStatisticsResultMap">
	 select count(*) AS WAYBILL_QTY ,
            nvl(sum(s.stock_goods_qty),0) AS STOCK_GOODS_QTY 
            From  tfr.t_opt_waybill_stock s
            where s.org_code=#{orgCode}
	</select>
	
	<!-- 营业部交接  2016年9月28日 22:17:47 -->
	<!-- 营业部交接库存对应表 -->
	<resultMap id="stockSaleResultMap" type="com.deppon.foss.module.transfer.stock.api.shared.domain.StockSaleEntity">
		<id property="id" column="id"/>
		<result property="waybillNo" column="waybill_no"/>
		<result property="serialNO" column="serial_no"/>
		<result property="inStockTime" column="in_stock_time"/>
		<result property="operatorCode" column="operator_code"/>
		<result property="operatorName" column="operator_name"/>
		<result property="goodsAreaCode" column="goods_area_code"/>
		<result property="goodsAreaName" column="goods_area_name"/>
		<result property="deviceType" column="device_type"/>
		<result property="orgCode" column="org_code"/>
		<result property="scanTime" column="scan_time"/>
		<result property="nextOrgCode" column="next_org_code"/>
		<result property="preHandoverStatus" column="pre_handover_status"/>
		<result property="isOut" column="is_out"/>
	</resultMap>
	
	
	<!-- 营业部交接运单库存对应表 -->
	<resultMap id="waybillStockSaleResultMap"
	 type="com.deppon.foss.module.transfer.stock.api.shared.domain.WaybillStockSaleEntity" >
		<id property="id" column="id"/>
		<result property="waybillNo" column="waybill_no"/>
		<result property="stockGoodsCount" column="stock_goods_qty"/>
		<result property="inStockTime" column="in_stock_time"/>
		<result property="goodsAreaCode" column="goods_area_code"/>
		<result property="orgCode" column="org_code"/>
		<result property="planStartTime" column="plan_start_time"/>
		<result property="lastInStockTime" column="last_in_stock_time"/>
		<result property="nextOrgCode" column="next_org_code"/>
		<result property="isOut" column="is_out"/>
		<result property="positionQty" column="position_qty"/>
	</resultMap>
	
	<!-- 货件库存参数配置信息 -->
	<sql id="stock_sale_param">
		ID,
		WAYBILL_NO,
		SERIAL_NO,
		OPERATOR_CODE,
		OPERATOR_NAME,
		GOODS_AREA_CODE,
		GOODS_AREA_Name,
		DEVICE_TYPE,
		ORG_CODE,
		IN_STOCK_TIME,
		SCAN_TIME,
		NEXT_ORG_CODE,
		PRE_HANDOVER_STATUS
	</sql>
	
	<!-- 运单库存参数配置信息 -->
	<sql id="waybill_sale_param">
		id,
		waybill_no,
		stock_goods_qty,
		in_stock_time,
		goods_area_code,
		org_code,
		plan_start_time,
		last_in_stock_time,
		next_org_code,
		is_out
	</sql>
	
	<!-- 写入运单库存参数配置信息 -->
	<sql id="insert_waybill_sale_param">
		id,
		waybill_no,
		stock_goods_qty,
		in_stock_time,
		goods_area_code,
		org_code,
		plan_start_time,
		last_in_stock_time,
		next_org_code
	</sql>
	
	<!-- 查询唯一货件库存 -->
	<select id="uniqueStockSaleQuery"  
	parameterType="com.deppon.foss.module.transfer.stock.api.shared.domain.InOutStockEntity" 
	resultMap="stockSaleResultMap">
		SELECT WAYBILL_NO,SERIAL_NO,ORG_CODE,GOODS_AREA_CODE,GOODS_AREA_NAME,OPERATOR_NAME,IN_STOCK_TIME,SCAN_TIME,NEXT_ORG_CODE FROM tfr.t_opt_stock_sale 
		where is_out = 'N' and waybill_no = #{waybillNO} and SERIAL_NO = #{serialNO}
	</select>
	
		<!-- 保存货件库存 -->
	<insert id="insertStockSaleEntity"
		parameterType="com.deppon.foss.module.transfer.stock.api.shared.domain.StockSaleEntity">
		<![CDATA[
			insert into tfr.t_opt_stock_sale(
		]]>
		<include refid="stock_sale_param" />
			) values (
			#{id,jdbcType=VARCHAR},
			#{waybillNo,jdbcType=VARCHAR},
			#{serialNO,jdbcType=VARCHAR},
			#{operatorCode,jdbcType=VARCHAR},
			#{operatorName,jdbcType=VARCHAR},
			<choose>
			<when test="goodsAreaCode != null and goodsAreaCode != ''">
				#{goodsAreaCode,jdbcType=VARCHAR},
			</when>
			<otherwise>
				'N/A',
			</otherwise>
			</choose>
			#{goodsAreaName,jdbcType=VARCHAR},
			#{deviceType,jdbcType=VARCHAR},
			#{orgCode,jdbcType=VARCHAR},
			#{inStockTime,jdbcType=TIMESTAMP},
			#{scanTime,jdbcType=TIMESTAMP},
			#{nextOrgCode,jdbcType=VARCHAR},
			#{preHandOverState,jdbcType=VARCHAR}
		)
	</insert>
	
	
	<!-- 运单库存查询 -->
	<select id="waybillStockSaleQuery" 
	 parameterType="com.deppon.foss.module.transfer.stock.api.shared.domain.WaybillStockSaleEntity" 
	 resultMap="waybillStockSaleResultMap">
		<![CDATA[
			SELECT 
		]]>
		<include refid="waybill_sale_param"/>
		<![CDATA[
			FROM tfr.t_opt_waybill_stock_sale where WAYBILL_NO = #{waybillNo} AND ORG_CODE = #{orgCode}
		]]>
		<if test="goodsAreaCode != null and goodsAreaCode != ''">
				and GOODS_AREA_CODE = #{goodsAreaCode}
		</if>
	</select>
	
		<!-- 保存运单库存 -->
	<insert id="insertWaybillStockSaleEntity"
		parameterType="com.deppon.foss.module.transfer.stock.api.shared.domain.WaybillStockSaleEntity">
		<![CDATA[
			insert into tfr.t_opt_waybill_stock_sale(
		]]>
		<include refid="insert_waybill_sale_param" />
			) values (
				#{id,jdbcType=VARCHAR},
				#{waybillNo,jdbcType=VARCHAR},
				#{stockGoodsCount,jdbcType=VARCHAR},
				#{inStockTime,jdbcType=VARCHAR},
				<choose>
				<when test="goodsAreaCode != null and goodsAreaCode != ''">
					#{goodsAreaCode,jdbcType=VARCHAR},
				</when>
				<otherwise>
					'N/A',
				</otherwise>
				</choose>
				#{orgCode,jdbcType=VARCHAR},
				#{planStartTime,jdbcType=VARCHAR},
				#{lastInStockTime,jdbcType=VARCHAR},
				#{nextOrgCode,jdbcType=VARCHAR}
			)
	</insert>
	
	<!-- 入库修改运单库存 -->
	<update id="updateWaybillStockSaleInStock" 
	parameterType="com.deppon.foss.module.transfer.stock.api.shared.domain.WaybillStockSaleEntity">
		UPDATE tfr.t_opt_waybill_stock_sale a
		<set>
			a.STOCK_GOODS_QTY = STOCK_GOODS_QTY + 1,
			a.NEXT_ORG_CODE = #{nextOrgCode,jdbcType=VARCHAR},
			<if test="planStartTime!=null">
				a.PLAN_START_TIME = #{planStartTime},
	    	</if>
			<if test="lastInStockTime!=null">
				a.LAST_IN_STOCK_TIME = #{lastInStockTime}
	    	</if>
		</set>
		WHERE a.ID = #{id}
	</update>
	
	<!-- 根据运单号分析库存表里存在的库存件数以及入库时间 -->
	<select id="queryStockSaleByWaybillNoForGroup" parameterType="map" resultMap="waybillStockSaleResultMap">
		select count(0) STOCK_GOODS_QTY,
		       a.WAYBILL_NO,
		       a.ORG_CODE,
		       a.GOODS_AREA_CODE,
		       a.NEXT_ORG_CODE,
		       a.IN_STOCK_TIME
		  from (select b.waybill_no,
		               b.org_code,
		               b.goods_area_code,
		               b.next_org_code,
		               FIRST_VALUE(b.in_stock_time) OVER(PARTITION BY b.waybill_no, b.org_code, b.goods_area_code, b.next_org_code ORDER BY b.in_stock_time desc) AS in_stock_time
		          from tfr.t_opt_stock_sale b
		         where b.waybill_no =  #{waybillNo,jdbcType=VARCHAR}) a
		 group by a.waybill_no,
		          a.org_code,
		          a.goods_area_code,
		          a.next_org_code,
		          a.in_stock_time
	</select>
	
	<!-- 批量入库修改运单库存 -->
	<update id="updateWaybillStockSaleInStockBatch" 
	parameterType="com.deppon.foss.module.transfer.stock.api.shared.domain.WaybillStockSaleEntity">
		UPDATE tfr.t_opt_waybill_stock_sale a
		<set>
			a.STOCK_GOODS_QTY = #{stockGoodsCount},
			a.NEXT_ORG_CODE = #{nextOrgCode,jdbcType=VARCHAR},
			<if test="planStartTime!=null">
				a.PLAN_START_TIME = #{planStartTime},
	    	</if>
			<if test="lastInStockTime!=null">
				a.LAST_IN_STOCK_TIME = #{lastInStockTime}
	    	</if>
		</set>
		WHERE a.ID = #{id}
	</update>
	
	<!-- 批量出库修改营业部交接库存-->
	<delete id="outStockSale" parameterType="com.deppon.foss.module.transfer.stock.api.shared.domain.InOutStockEntity">
		delete from  tfr.t_opt_stock_sale s 
		<where>
			s.waybill_no = #{waybillNO,jdbcType=VARCHAR}
			and s.serial_no = #{serialNO,jdbcType=VARCHAR}
			and s.org_code = #{orgCode,jdbcType=VARCHAR}
		</where>
	</delete>
	
	<!-- 批量出库修改营业部交接运单库存-->
	<delete id="outWaybillStockSale" parameterType="java.util.Map">
		delete from tfr.t_opt_waybill_stock_sale s 
		<where>
		    s.org_code = #{orgCode,jdbcType=VARCHAR}
			 and s.waybill_no in
		<foreach collection="waybillList" open="(" close=")" separator="," index="index" item="waybillNo">
		      			 #{waybillNo,jdbcType=VARCHAR} 
		  </foreach>
		</where>
	</delete>
	
	<!-- 营业部交接单作废 2016年10月19日 14:27:20  360903  start-->
	<!-- 交接单作废恢复库存状态-->
	<update id="inStockSalePC" parameterType="com.deppon.foss.module.transfer.stock.api.shared.domain.InOutStockEntity">
		update tfr.t_opt_stock_sale s 
        <set> 
        	s.is_out = 'N'
        </set>
		<where>
			s.waybill_no = #{waybillNO,jdbcType=VARCHAR}
			and s.serial_no = #{serialNO,jdbcType=VARCHAR}
			and s.org_code = #{orgCode,jdbcType=VARCHAR}
		</where>
	</update>
	
	<!-- 交接单作废恢复运单库存状态-->
	<update id="inWaybillStockSalePC" parameterType="java.util.Map">
		update tfr.t_opt_waybill_stock_sale s 
        <set> 
        	s.is_out = 'N'，s.stock_goods_qty=s.stock_goods_qty + 1
        </set>
		<where>
		    s.org_code = #{orgCode,jdbcType=VARCHAR} 
			 and s.waybill_no = #{waybillNo,jdbcType=VARCHAR} 
	 </where>
	</update>
	
	<!-- 运单库存按流水出库 -->
	<update id="outWaybillStockSaleSerialNo" parameterType="java.util.Map">
	    update tfr.t_opt_waybill_stock_sale s  
	    <set>   
	    	s.stock_goods_qty = s.stock_goods_qty - 1
	    </set>	
		where s.waybill_no = #{waybillNo,jdbcType=VARCHAR}  
		and  s.org_code = #{orgCode,jdbcType=VARCHAR}
		and s.is_out = 'N'
	 </update>
	<!-- 营业部交接单作废 2016年10月19日 14:27:20  360903 end-->
	
	<!-- 营业部交单票入库 出虚拟库 2016年10月20日 19:07:27  -->
	<delete id="outStockSalePC" parameterType="com.deppon.foss.module.transfer.stock.api.shared.domain.InOutStockEntity">
		delete from tfr.t_opt_stock_sale s 
		<where>
			s.waybill_no = #{waybillNO,jdbcType=VARCHAR}
			and s.serial_no = #{serialNO,jdbcType=VARCHAR}
		</where>
	</delete>
	
	<delete id="outWaybillStockSalePC" parameterType="java.util.Map">
		delete from tfr.t_opt_waybill_stock_sale s 
			<where>
		  	  	s.is_out ='N'
				 and s.waybill_no = #{waybillNo,jdbcType=VARCHAR}
		</where>
	</delete>
	
	<!-- 营业部交单票入库 出虚拟库 2016年10月20日 19:07:27  end-->
	
	<!--判断货件是否存在该部门库存-->
	<select id="stockSaleExistQuery"  
	parameterType="com.deppon.foss.module.transfer.stock.api.shared.domain.InOutStockEntity" 
	resultMap="stockSaleResultMap">
		select id from tfr.t_opt_stock_sale
       	<where>
			 waybill_NO=#{waybillNO} and SERIAL_NO=#{serialNO} and org_code=#{orgCode}
			<if test="goodsAreaCode != null and goodsAreaCode != ''">
				and GOODS_AREA_CODE = #{goodsAreaCode}
			</if>
		</where>
	</select>
	
	<!--判断运单集合是否存在虚拟库存-->
	<select id="queryInStockInfoByWayBills" parameterType="java.util.Map" resultMap="stockSaleResultMap">
		SELECT WAYBILL_NO,SERIAL_NO,ORG_CODE,GOODS_AREA_CODE,GOODS_AREA_NAME,OPERATOR_NAME,IN_STOCK_TIME,SCAN_TIME,NEXT_ORG_CODE FROM tfr.t_opt_stock_sale 
		 WHERE IS_OUT = 'N'   and   ORG_CODE = #{orgCode,jdbcType=VARCHAR}
		       <if test="waybillList != null and waybillList .size() > 0 ">
		       	AND WAYBILL_NO IN 
		       		<foreach collection="waybillList" open="(" close=")" separator="," index="index" item="waybillNo">
		      			 #{waybillNo,jdbcType=VARCHAR} 
		      		</foreach>
		       </if>
	</select>
	
	<!--更新流水号虚拟库存的预配状态-->
	<update id="updatePreSaleHandOverState" parameterType="com.deppon.foss.module.transfer.stock.api.shared.domain.StockSaleEntity">
		update tfr.t_opt_stock_sale t 
		set t.pre_handover_status = #{preHandOverState,jdbcType=VARCHAR}
		<where>
			t.waybill_no = #{waybillNO,jdbcType=VARCHAR}
			and t.serial_no = #{serialNO,jdbcType=VARCHAR}
			and t.org_code = #{orgCode,jdbcType=VARCHAR}
		</where>
	</update>
	
	<!-- tfr.t_opt_waybill_stock_sale先查询运单在此部门的库存件数 -->
	<select id="querySaleCount" parameterType="map" resultType="int">
		select s.stock_goods_qty from  tfr.t_opt_waybill_stock_sale s
		<where>
			s.waybill_no= #{waybillNo,jdbcType=VARCHAR}
			and s.org_code =#{orgCode,jdbcType=VARCHAR}
		</where>
	</select>
	
	<!-- 更新虚拟库存件数 -->
	<update id="updateSaleCount" parameterType="map">
		update tfr.t_opt_waybill_stock_sale s
		set s.stock_goods_qty=#{m, jdbcType=NUMERIC}
		<where>
			s.waybill_no =#{waybillNo,jdbcType=VARCHAR}
			and s.org_code =#{orgCode,jdbcType=VARCHAR}
		</where>
	</update>
	
	<!-- 删除虚拟库存 -->
	<delete id="deleteSaleCount" parameterType="map">
		delete from  tfr.t_opt_waybill_stock_sale s
		<where>
			s.waybill_no =#{waybillNo,jdbcType=VARCHAR}
			and s.org_code =#{orgCode,jdbcType=VARCHAR}
		</where>
	</delete>
</mapper>
