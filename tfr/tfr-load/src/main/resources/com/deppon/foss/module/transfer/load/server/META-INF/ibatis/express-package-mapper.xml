<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC 
	"-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="foss.load.express.package">
	<resultMap id="expressPackageResultMap"
		type="com.deppon.foss.module.transfer.load.api.shared.domain.ExpressPackageEntity">
		<result property="id" column="id" />
		<result property="packageNo" column="packageNo" />
		<result property="departOrgCode" column="departOrgCode" />
		<result property="departOrgName" column="departOrgName" />
		<result property="arriveOrgCode" column="arriveOrgCode" />
		<result property="arriveOrgName" column="arriveOrgName" />
		<result property="weight" column="weight" />
		<result property="volume" column="volume" />
		<result property="waybillQty" column="waybillQty" />
		<result property="goodsQty" column="goodsQty" />
		<result property="endTime" column="endTime" />
		<result property="createTime" column="createTime" />
		<result property="createUserCode" column="createUserCode" />
		<result property="createUserName" column="createUserName" />
		<result property="expressPackageType" column="expressPackageType" />
	</resultMap>
	
	<!-- 用于新增快递包界面查询库存运单,用于查询包交接运单界面显示运单明细 -->
	<resultMap id="waybillStockResultMap"
		type="com.deppon.foss.module.transfer.load.api.shared.dto.ExpressPackageWayBillDetailDto">
		<result property="id" column="id" />
		<result property="handOverBillNo" column="handOverBillNo" />
		<result property="handOverType" column="handOverType"/>
		<result property="waybillNo" column="waybillNo" />
		<result property="transProperty" column="transProperty" />
		<result property="transPropertyCode" column="transPropertyCode" />
		<result property="goodsName" column="goodsName" />
		<result property="packing" column="packing" />
		<result property="cubage" column="cubage" />
		<result property="cubageAc" column="cubageAc" />
		<result property="weight" column="weight" />
		<result property="weightAc" column="weightAc" />
		<result property="note" column="note" />
		<result property="pieces" column="pieces" />
		<result property="instorageDate" column="instorageDate" />
		<result property="arriveDept" column="arriveDept" />
		<result property="insuranceValue" column="insuranceValue" />
		<result property="waybillDate" column="waybillDate" />
		<result property="waybillPieces" column="waybillPieces" />
		<result property="isPreciousGoods" column="isPreciousGoods" />
		<result property="waybillNote" column="waybillNote" />
		<result property="origOrgCode" column="origOrgCode" />
		<result property="receiveOrgName" column="receiveOrgName" />
		<result property="receiveOrgName" column="receiveOrgName" />
		<result property="consignee" column="consignee" />
		<result property="destination" column="destination" />
		<result property="waybillFee" column="waybillFee" />
		<result property="planArriveTime" column="planArriveTime" />
		<result property="codAmount" column="codAmount" />
		<result property="isCarLoad" column="isCarLoad" />
		<result property="isPriorityGoods" column="isPriorityGoods" />
		<result property="isJoinCar" column="isJoinCar" />
		<result property="isFastGoods" column="isFastGoods" />
		<result property="goodsAreaCode" column="goodsAreaCode" />
		<result property="goodsAreaType" column="goodsAreaType" />
		<result property="goodsAreaName" column="goodsAreaName" />
		<result property="goodsType" column="goodsType" />
		<result property="pkpOrgCode" column="pkpOrgCode" />
		<result property="pkpOrgName" column="pkpOrgName" />
	</resultMap>
	
	<!-- 用于查询交接运单界面，双击某运单，得到该运单下的流水号列表 -->
<!-- 	<resultMap id="serialNoStockResultMap" -->
<!-- 		type="com.deppon.foss.module.transfer.load.api.shared.domain.SerialNoStockEntity"> -->
<!-- 		<result property="serialNo" column="serialNo" /> -->
<!-- 		<result property="storageDept" column="storageDept" /> -->
<!-- 		<result property="waybillNo" column="waybillNo" /> -->
<!-- 		<result property="instorageDate" column="instorageDate" /> -->
<!-- 		<result property="isInStorage" column="isInStorage" /> -->
<!-- 		<result property="isJoinCar" column="isJoinCar" /> -->
<!-- 		<result property="isPreHandOver" column="isPreHandOver" /> -->
<!-- 	</resultMap> -->
	
	<!-- 用于查询交接运单界面，双击某运单，得到该运单下的流水号列表 -->
	<resultMap id="serialNoStockResultMap"
		type="com.deppon.foss.module.transfer.load.api.shared.dto.ExpressPackageSerialNoStockDto">
		<result property="serialNo" column="serialNo" />
		<result property="storageDept" column="storageDept" />
		<result property="waybillNo" column="waybillNo" />
		<result property="instorageDate" column="instorageDate" />
		<result property="isInStorage" column="isInStorage" />
		<result property="isJoinCar" column="isJoinCar" />
		<result property="isPreHandOver" column="isPreHandOver" />
		<result property="isCreatedPackage" column="isCreatedPackage" />
	</resultMap>
	
	<!-- 包明细map -->
	<resultMap id="packageDetailResultMap"
		type="com.deppon.foss.module.transfer.load.api.shared.domain.ExpressPackageDetailEntity">
		<result property="id" column="id" />
		<result property="packageNo" column="packageNo" />
		<result property="wayBillNo" column="wayBillNo" />
		<result property="serialNo" column="serialNo" />
		<result property="transportTypeName" column="transportTypeName" />
		<result property="transportTypeCode" column="transportTypeCode" />
		<result property="goodsQty" column="goodsQty" />
		<result property="weight" column="weight" />
		<result property="volume" column="volume" />
		<result property="recieveOrgName" column="recieveOrgName" />
		<result property="reachOrgName" column="reachOrgName" />
		<result property="instorageDate" column="instorageDate" />
		<result property="pack" column="pack" />
		<result property="goodsName" column="goodsName" />
		<result property="notes" column="notes" />
		<result property="goodsState" column="goodsState" />
		<result property="scanState" column="scanState" />
		<result property="deviceNo" column="deviceNo" />
		<result property="scanTime" column="scanTime" />
		<result property="createTime" column="createTime" />
	</resultMap>
	
	<!--包查询-->
	<select id="queryExpressPackageList" resultMap="expressPackageResultMap" 
		parameterType="com.deppon.foss.module.transfer.load.api.shared.dto.ExpressPackageQueryDto">
			select 
			       p.ID               id,
			       p.PACKAGE_NO       packageNo,
			       p.DEPART_ORG_CODE  departOrgCode,
			       o.name departOrgName,
			       p.ARRIVE_ORG_CODE  arriveOrgCode,
			       nvl(o1.name,p.arrive_org_name) arriveOrgName,
			       p.CREATE_USER_NAME createUserName,
			       p.CREATE_USER_CODE createUserCode,
			       p.CREATE_TIME      createTime,
			       p.end_time endTime,
			       p.WEIGHT           weight,
			       p.VOLUME           volume,
			       p.WAYBILL_QTY      waybillQty,
			       p.SERIAL_QTY       goodsQty,
			       p.STATUS           status,
			       p.express_package_type expressPackageType
			  from tfr.T_OPT_PACKAGE p
			  left join bse.t_bas_org o
			  on p.depart_org_code = o.code and o.active = 'Y'
			  left join bse.t_bas_org o1
			  on p.arrive_org_code = o1.code and o1.active = 'Y'
		<where>
			p.DEPART_ORG_CODE = #{departOrgCode,jdbcType=VARCHAR}
			and p.status in ('FINISHED','CREATED_BILL','UN_CREATED_BILL','ALREADY_CANCELED')
			<choose>
				<when test="packageNo != null and packageNo != ''">
					and p.package_no = #{packageNo,jdbcType=VARCHAR}
				</when>
				<otherwise>
					and (p.create_time between #{beginCreateTime,jdbcType=TIMESTAMP} and #{endCreateTime,jdbcType=TIMESTAMP})
					<if test="arriveOrgCode != null and arriveOrgCode != ''">
						and p.ARRIVE_ORG_CODE = #{arriveOrgCode,jdbcType=VARCHAR}
					</if>
					<if test="createUserCode != null and createUserCode != ''">
						and p.CREATE_USER_CODE = #{createUserCode,jdbcType=VARCHAR}
					</if>
					<if test="status != null and status != '' and status != 'ALL'">
						and p.status = #{status,jdbcType=VARCHAR}
					</if>
				</otherwise>
			</choose>
		</where>
		order by p.create_time
	</select>
	
	<!--包查询总条数-->
	<select id="queryExpressPackageCount" resultType="java.lang.Long" 
		parameterType="com.deppon.foss.module.transfer.load.api.shared.dto.ExpressPackageQueryDto">
		     select 
		      count(id)
			  from 
			  tfr.T_OPT_PACKAGE p
		<where>
			p.DEPART_ORG_CODE = #{departOrgCode,jdbcType=VARCHAR}
			and p.status in ('FINISHED','CREATED_BILL','UN_CREATED_BILL','ALREADY_CANCELED')
			<choose>
				<when test="packageNo != null and packageNo != ''">
					and p.package_no = #{packageNo,jdbcType=VARCHAR}
				</when>
				<otherwise>
					and (p.create_time between #{beginCreateTime,jdbcType=TIMESTAMP} and #{endCreateTime,jdbcType=TIMESTAMP})
					<if test="arriveOrgCode != null and arriveOrgCode != ''">
						and p.ARRIVE_ORG_CODE = #{arriveOrgCode,jdbcType=VARCHAR}
					</if>
					<if test="createUserCode != null and createUserCode != ''">
						and p.CREATE_USER_CODE = #{createUserCode,jdbcType=VARCHAR}
					</if>
					<if test="status != null and status != '' and status != 'ALL'">
						and p.status = #{status,jdbcType=VARCHAR}
					</if>
				</otherwise>
			</choose>
		</where>
	</select>
	
	<!--根据包号查询包信息-->
	<select id="queryExpressPackageByPackageNo" resultMap="expressPackageResultMap" 
		parameterType="java.lang.String">
			select 
			       p.ID               id,
			       p.PACKAGE_NO       packageNo,
			       p.DEPART_ORG_CODE  departOrgCode,
			       o.name departOrgName,
			       p.ARRIVE_ORG_CODE  arriveOrgCode,
			       o1.name arriveOrgName,
			       p.CREATE_USER_NAME createUserName,
			       p.CREATE_USER_CODE createUserCode,
			       p.CREATE_TIME      createTime,
			       p.end_time endTime,
			       p.WEIGHT           weight,
			       p.VOLUME           volume,
			       p.WAYBILL_QTY      waybillQty,
			       p.SERIAL_QTY       goodsQty,
			       p.STATUS           status,
			       p.express_package_type expressPackageType
			  from tfr.T_OPT_PACKAGE p
			  left join bse.t_bas_org o
			  on p.depart_org_code = o.code and o.active = 'Y'
			  left join bse.t_bas_org o1
			  on p.arrive_org_code = o1.code and o1.active = 'Y'
		<where>
			p.package_no = #{packageNo,jdbcType=VARCHAR}
			and p.status != 'CANCELED'
		</where>
	</select>
	
	<!--更新包状态-->
	<select id="updateExpressPackageState" parameterType="java.util.HashMap">
		     update
			  tfr.T_OPT_PACKAGE
			  set status = #{targetState,jdbcType=VARCHAR}
			  where package_no = #{packageNo,jdbcType=VARCHAR} and status != 'CANCELED'
	</select>
	<select id="updatePackageInfo" parameterType="com.deppon.foss.module.transfer.load.api.shared.domain.ExpressPackageEntity">
		update tfr.t_opt_package p
		   set p.arrive_org_code  =#{arriveOrgCode ,jdbcType=VARCHAR},
		       p.arrive_org_name  =#{arriveOrgName,jdbcType=VARCHAR},
		       p.modify_time      =#{modifyTime,jdbcType=TIMESTAMP},
		       p.modify_user_name =#{modifyUserName ,jdbcType=VARCHAR},
		       p.modify_user_code =#{modifyUserCode ,jdbcType=VARCHAR}
		 where p.package_no =#{ packageNo,jdbcType=VARCHAR} 
	</select>
	
	
	<!--快速添加运单，根据运单号获取运单库存-->
	<select id="queryWaybillStockByWaybillNo" resultMap="waybillStockResultMap" 
		parameterType="com.deppon.foss.module.transfer.load.api.shared.dto.QueryWaybillForExpressPackageConditionDto">
		<!--库存运单-->
		     select stock.waybill_no waybillNo,
                 waybill.goods_name goodsName,
                 waybill.goods_type_code goodsType,
                 'N' isJoinCar,
                 waybill.goods_package packing,
                 pro.code transPropertyCode,
                 pro.name transProperty,
                 pro.seq seq,
                 round((waybill.goods_volume_total / waybill.goods_qty_total) *
                       stock.stock_goods_qty,
                       2) cubage,
                round((waybill.goods_weight_total / waybill.goods_qty_total) *
                       stock.stock_goods_qty,
                       2)  weight,
                 stock.stock_goods_qty pieces,
                 stock.in_stock_time instorageDate,
                 stock.next_org_code nextOrgCode,
                 stock.org_code currentDeptCode,
                 waybill.insurance_amount / 100 insuranceValue,
                 waybill.bill_time waybillDate,
                 waybill.cod_amount / 100 codAmount,
                 waybill.IS_WHOLE_VEHICLE isCarLoad,
                 waybill.goods_qty_total waybillPieces,
                 waybill.precious_goods isPreciousGoods,
                 waybill.inner_notes waybillNote,
                 waybill.Receive_Org_Code origOrgCode,
                 md.name arriveDept,
                 mdn.name receiveOrgName,
                 case pro.priority when 'FAST' then 'Y' else 'N' end isFastGoods,
                 ga.goods_area_code goodsAreaCode,
                 ga.goods_area_type goodsAreaType,
                 ga.goods_area_name goodsAreaName,
                 waybill.Receive_Customer_Name consignee,
                 waybill.Target_Org_Code destination,
                 waybill.Total_Fee / 100 waybillFee 
           from tfr.t_opt_waybill_stock stock
           left join pkp.t_srv_waybill waybill
             on stock.waybill_no = waybill.waybill_no
            and waybill.active = 'Y'
           left join bse.mv_dest_net md
             on waybill.CUSTOMER_PICKUP_ORG_CODE = md.code
            and md.active = 'Y'
           left join bse.mv_dest_net mdn
             on waybill.RECEIVE_ORG_CODE = mdn.code
            and mdn.active = 'Y'
           left join pkp.t_srv_product pro
             on waybill.product_code = pro.code
            and pro.active = 'Y' and pro.levels = 3
           left join bse.t_bas_goods_area ga
             on stock.goods_area_code = ga.goods_area_code
            and ga.org_code = stock.org_code
            and ga.active = 'Y'
            and ga.goods_area_type not in (
		<foreach collection="abnormalGoodsAreaTypeList" item="item" separator=",">
								  #{item,jdbcType=VARCHAR}
		</foreach>
					  		  )
          WHERE 
		(<foreach collection="arriveDeptList" item="item" separator="or">
					stock.next_org_code = #{item,jdbcType=VARCHAR}
		</foreach>)
            and stock.ORG_CODE = #{currentDeptCode}
            and waybill.waybill_No = #{waybillNo}
        
	</select>
	
	<!--查询交接运单界面，双击某运单，查询本部库存的该运单的所有流水号 ,默认查询出来的流水号是没有建包的-->
	<select id="querySerialNoStockList" parameterType="com.deppon.foss.module.transfer.load.api.shared.dto.QuerySerialNoListForWaybillConditionDto"
		resultMap="serialNoStockResultMap">
		select t.waybill_no waybillNo,
		    'N' isCreatedPackage,
            t.serial_no serialNo,
            t.org_code storageDept,
            t.in_stock_time instorageDate,
            1 isInStorage,
            case t.pre_handover_status when 
         	'PRE_HANDOVER' then 'Y' else 'N' end isPreHandOver,
            'N' isJoinCar
             from tfr.t_opt_STOCK t 
             left join bse.t_bas_goods_area ga
             on t.goods_area_code = ga.goods_area_code
            and ga.org_code = t.org_code
            and ga.active = 'Y'
		<where>
			t.waybill_no = #{waybillNo} 
			<if test="nextDeptCodeList != null and nextDeptCodeList.size() != 0">
            	and  
				(<foreach collection="nextDeptCodeList" item="item" separator="or">
						t.next_org_code = #{item,jdbcType=VARCHAR}
				</foreach>)
			</if>
			and t.org_code = #{currentDeptCode} 
			and (ga.goods_area_type not in (
			<foreach collection="abnormalGoodsAreaTypeList" item="item" separator=",">
					  #{item,jdbcType=VARCHAR}
			</foreach>
			) or ga.goods_area_type is null)
		</where>
			order by t.in_stock_time
	</select>
	
	<!--根据出发部门和到达部门查询始发线路有多少条这样的线路-->
	<select id="queryExpressSourceLineByOrgCount" parameterType="com.deppon.foss.module.transfer.load.api.shared.dto.QueryWaybillForExpressPackageConditionDto"
		resultType="java.lang.Long">
		select count(*)
		from bse.t_bas_line l
		<where>
			l.line_sort = 'BSE_LINE_SORT_SOURCE'
			<if test="currentDeptCode != null and currentDeptCode != ''">
            	and  l.orig_org_code = #{currentDeptCode,jdbcType=VARCHAR}
			</if>
			<if test="arriveDeptList != null and arriveDeptList.size() != 0">
            	and  
					(<foreach collection="arriveDeptList" item="item" separator="or">
						l.dest_org_code = #{item,jdbcType=VARCHAR}
				</foreach>)
			</if>
			and l.active = 'Y'
		</where>
	</select>
	
	<!--查询库存快递运单-->
	<select id="queryWaybillStockListForPackage" resultMap="waybillStockResultMap" 
		parameterType="com.deppon.foss.module.transfer.load.api.shared.dto.QueryWaybillForExpressPackageConditionDto">
		      select 
			  waybillNo,
	          goodsName,
	          goodsType,
	          isJoinCar,
	          packing,
	          cubage,
	          weight,
	          pieces,
	          instorageDate,
	          nextOrgCode,
	          currentDeptCode,
			  transPropertyCode,
			  transProperty,
			  seq,
			  insuranceValue,
			  waybillDate,
			  codAmount,
			  isCarLoad,
			  waybillPieces,
			  isPreciousGoods,
			  waybillNote,
			  origOrgCode,
			  arriveDept,
			  receiveOrgName,
			  isFastGoods,
			  goodsAreaCode,
			  goodsAreaType,
			  goodsAreaName,
			  consignee,
			  destination,
			  waybillFee,
			  inStockDuration 
				 from (
				select stock.waybill_no waybillNo,
							0 isPriorityGoods,
			                waybill.goods_name goodsName,
			                waybill.goods_type_code goodsType,
			                'N' isJoinCar,
			                waybill.goods_package packing,
			                pro.code transPropertyCode,
		                    pro.name transProperty,
		                    pro.seq seq,
			                round((waybill.goods_volume_total / waybill.goods_qty_total)*stock.stock_goods_qty,2) cubage,
			                round((waybill.goods_weight_total / waybill.goods_qty_total)*stock.stock_goods_qty,2) weight,
			                stock.stock_goods_qty pieces,
			                stock.in_stock_time instorageDate,
			                stock.next_org_code nextOrgCode,
			                stock.org_code currentDeptCode,
			                waybill.insurance_amount / 100 insuranceValue,
			                waybill.bill_time waybillDate,
			                waybill.cod_amount / 100 codAmount,
			                waybill.IS_WHOLE_VEHICLE isCarLoad,
			                waybill.goods_qty_total waybillPieces,
			                waybill.precious_goods isPreciousGoods,
			                waybill.inner_notes waybillNote,
			                waybill.Receive_Org_Code origOrgCode,
			                md.name arriveDept,
			                mdn.name receiveOrgName,
			                'Y' isFastGoods,
			                ga.goods_area_code goodsAreaCode,
			                ga.goods_area_type goodsAreaType,
			                ga.goods_area_name goodsAreaName,
			                waybill.Receive_Customer_Name consignee,
			                waybill.Target_Org_Code destination,
			                waybill.Total_Fee / 100 waybillFee,
			                trunc((sysdate - cast(stock.in_stock_time as date)) * 24, 1) as inStockDuration
			           from tfr.t_opt_waybill_stock stock
			           left join pkp.t_srv_waybill waybill on stock.waybill_no = waybill.waybill_no and waybill.active = 'Y'
			           left join bse.mv_dest_net md on waybill.CUSTOMER_PICKUP_ORG_CODE = md.code and md.active = 'Y'
			           left join bse.mv_dest_net mdn on waybill.RECEIVE_ORG_CODE = mdn.code  and mdn.active = 'Y'
			           left join pkp.t_srv_product pro on waybill.product_code = pro.code and pro.active = 'Y' 
			           left join bse.t_bas_goods_area ga on stock.goods_area_code = ga.goods_area_code and ga.org_code = stock.org_code and ga.active = 'Y'
		<where>
			           		and pro.levels = 3
			           		and stock.IN_STOCK_TIME between #{beginInStorageTime} and #{endInStorageTime} 
						  	and (
								<foreach collection="arriveDeptList" item="item" separator="or">
														stock.next_org_code = #{item,jdbcType=VARCHAR}
								</foreach>
						  	)
						  	and stock.ORG_CODE = #{currentDeptCode,jdbcType=VARCHAR}
						  	and (ga.goods_area_type not in (
			<foreach collection="abnormalGoodsAreaTypeList" item="item" separator=",">
								  #{item,jdbcType=VARCHAR}
			</foreach>
					  		  ) or ga.goods_area_type is null)
			<if test="transPropertyList != null and transPropertyList.size() != 0">
						  		and waybill.product_code in
						  		 (
						  		 	<foreach collection="transPropertyList" item="item" separator=",">
								  		#{item,jdbcType=VARCHAR}
									</foreach>
						  		 )
			</if>
			<if test="transType != null and transType != ''  and transType != 'ALL'">
						  		and pro.transport_type = #{transType,jdbcType=VARCHAR}
			</if>
			<if test="waybillNo != null and waybillNo != ''">
						  		and waybill.waybill_No = #{waybillNo,jdbcType=VARCHAR}
			</if>
		</where>
		)
		<!--货物件数大于0的查出来-->
		<where>
		pieces <![CDATA[>]]> 0 
		</where>
		  order by isPriorityGoods,seq,inStockDuration
	</select>
	
	<!--查询快递库存运单总数-->
	<select id="queryWaybillStockListForPackageCount" resultType="java.lang.Long" 
		parameterType="com.deppon.foss.module.transfer.load.api.shared.dto.QueryWaybillForExpressPackageConditionDto">
		      select count(*)
				 from (
				select stock.waybill_no waybillNo,
							0 isPriorityGoods,
			                waybill.goods_name goodsName,
			                waybill.goods_type_code goodsType,
			                'N' isJoinCar,
			                waybill.goods_package packing,
			                pro.code transPropertyCode,
		                    pro.name transProperty,
		                    pro.seq seq,
			                round((waybill.goods_volume_total / waybill.goods_qty_total)*stock.stock_goods_qty,2) cubage,
			                round((waybill.goods_weight_total / waybill.goods_qty_total)*stock.stock_goods_qty,2) weight,
			                stock.stock_goods_qty pieces,
			                stock.in_stock_time instorageDate,
			                stock.next_org_code nextOrgCode,
			                stock.org_code currentDeptCode,
			                waybill.insurance_amount / 100 insuranceValue,
			                waybill.bill_time waybillDate,
			                waybill.cod_amount / 100 codAmount,
			                waybill.IS_WHOLE_VEHICLE isCarLoad,
			                waybill.goods_qty_total waybillPieces,
			                waybill.precious_goods isPreciousGoods,
			                waybill.inner_notes waybillNote,
			                waybill.Receive_Org_Code origOrgCode,
			                md.name arriveDept,
			                mdn.name receiveOrgName,
			                'Y' isFastGoods,
			                ga.goods_area_code goodsAreaCode,
			                ga.goods_area_type goodsAreaType,
			                ga.goods_area_name goodsAreaName,
			                waybill.Receive_Customer_Name consignee,
			                waybill.Target_Org_Code destination,
			                waybill.Total_Fee / 100 waybillFee,
			                trunc((sysdate - cast(stock.in_stock_time as date)) * 24, 1) as inStockDuration
			           from tfr.t_opt_waybill_stock stock
			           left join pkp.t_srv_waybill waybill on stock.waybill_no = waybill.waybill_no and waybill.active = 'Y'
			           left join bse.mv_dest_net md on waybill.CUSTOMER_PICKUP_ORG_CODE = md.code and md.active = 'Y'
			           left join bse.mv_dest_net mdn on waybill.RECEIVE_ORG_CODE = mdn.code  and mdn.active = 'Y'
			           left join pkp.t_srv_product pro on waybill.product_code = pro.code and pro.active = 'Y' 
			           left join bse.t_bas_goods_area ga on stock.goods_area_code = ga.goods_area_code and ga.org_code = stock.org_code and ga.active = 'Y'
		<where>
			           		and pro.levels = 3
			           		and stock.IN_STOCK_TIME between #{beginInStorageTime} and #{endInStorageTime} 
						  	and (
								<foreach collection="arriveDeptList" item="item" separator="or">
														stock.next_org_code = #{item,jdbcType=VARCHAR}
								</foreach>
						  	)
						  	and stock.ORG_CODE = #{currentDeptCode,jdbcType=VARCHAR}
						  	and (ga.goods_area_type not in (
			<foreach collection="abnormalGoodsAreaTypeList" item="item" separator=",">
								  #{item,jdbcType=VARCHAR}
			</foreach>
					  		  ) or ga.goods_area_type is null)
			<if test="transPropertyList != null and transPropertyList.size() != 0">
						  		and waybill.product_code in
						  		 (
						  		 	<foreach collection="transPropertyList" item="item" separator=",">
								  		#{item,jdbcType=VARCHAR}
									</foreach>
						  		 )
			</if>
			<if test="transType != null and transType != ''  and transType != 'ALL'">
						  		and pro.transport_type = #{transType,jdbcType=VARCHAR}
			</if>
			<if test="waybillNo != null and waybillNo != ''">
						  		and waybill.waybill_No = #{waybillNo,jdbcType=VARCHAR}
			</if>
		</where>
		)
		<!--货物件数大于0的查出来-->
		<where>
		pieces <![CDATA[>]]> 0 
		</where>
	</select>
	
	<!--PC插入快递包明细-->
	<insert id="insertExpressPackageDetailByPc" parameterType="com.deppon.foss.module.transfer.load.api.shared.domain.ExpressPackageDetailEntity">
		insert into tfr.t_opt_package_detail
		  (ID,
		   PACKAGE_NO,
		   WAYBILL_NO,
		   TRANS_TYPE_NAME,
		   TRANS_TYPE_CODE,
		   BILLING_GOODS_QTY,
		   RECEIVE_ORG_NAME,
		   REACH_ORG_NAME,
		   WEIGHT,
		   VOLUME,
		   GOODS_NAME,
		   GOODS_PACKAGING,
		   NOTES,
		   SERIAL_NO,
		   SCAN_STATE,
		   GOODS_STATE,
		   SCAN_TIME,
		   CREATE_TIME,
		   DEVICE_NO)
		values
		  (#{id,jdbcType=VARCHAR},
		  #{packageNo,jdbcType=VARCHAR},
		  #{wayBillNo,jdbcType=VARCHAR},
		  #{transportTypeName,jdbcType=VARCHAR},
		  #{transportTypeCode,jdbcType=VARCHAR},
		  #{goodsQty,jdbcType=DECIMAL},
		  #{recieveOrgName,jdbcType=VARCHAR},
		  #{reachOrgName,jdbcType=VARCHAR},
		  #{weight,jdbcType=DECIMAL},
		  #{volume,jdbcType=DECIMAL},
		  #{goodsName,jdbcType=VARCHAR},
		  #{pack,jdbcType=VARCHAR},
		  #{notes,jdbcType=VARCHAR},
		  #{serialNo,jdbcType=VARCHAR},
		  #{scanState,jdbcType=VARCHAR},
		  #{goodsState,jdbcType=VARCHAR},
		  #{scanTime,jdbcType=TIMESTAMP},
		  #{createTime,jdbcType=TIMESTAMP},
		  #{deviceNo,jdbcType=VARCHAR})
	</insert>
	
	<!--PC插入快递包-->
	<insert id="insertExpressPackageByPc" parameterType="com.deppon.foss.module.transfer.load.api.shared.domain.ExpressPackageEntity">
			insert into tfr.t_opt_package
			  (id,
			   package_no,
			   depart_org_code,
			   depart_org_name,
			   arrive_org_code,
			   arrive_org_name,
			   create_user_name,
			   create_user_code,
			   create_time,
			   weight,
			   volume,
			   waybill_qty,
			   serial_qty,
			   end_time,
			   status,
			   express_package_type)
			values(
				#{id,jdbcType=VARCHAR},
				#{packageNo,jdbcType=VARCHAR},
				#{departOrgCode,jdbcType=VARCHAR},
				#{departOrgName,jdbcType=VARCHAR},
				#{arriveOrgCode,jdbcType=VARCHAR},
				#{arriveOrgName,jdbcType=VARCHAR},
				#{createUserName,jdbcType=VARCHAR},
				#{createUserCode,jdbcType=VARCHAR},
				#{createTime,jdbcType=TIMESTAMP},
				#{weight,jdbcType=DECIMAL},
				#{volume,jdbcType=DECIMAL},
				#{waybillQty,jdbcType=DECIMAL},
				#{goodsQty,jdbcType=DECIMAL},
				#{endTime,jdbcType=TIMESTAMP},
				#{status,jdbcType=VARCHAR},
				#{expressPackageType,jdbcType=VARCHAR}
			)
	</insert>
		
	<!--根据运单列表查询包明细-->
	<select id="queryPackageDetailByWaybills" resultMap="packageDetailResultMap" 
		parameterType="HashMap">
		select 
			d.id id,
			d. package_no packageNo,
			d.waybill_no wayBillNo,
			d.serial_no serialNo,
			d.trans_type_name transportTypeName,
			d.trans_type_code transportTypeCode,
			d.billing_goods_qty goodsQty,
			d.weight weight,
			d.volume volume,
			d.receive_org_name recieveOrgName,
			d.reach_org_name reachOrgName,
			d.goods_packaging pack,
			d.goods_name goodsName,
			d.notes notes,
			d.goods_state goodsState,
			d.scan_state scanState,
			d.device_no deviceNo,
			d.scan_time scanTime,
			d.create_time createTime
		from tfr.t_opt_package_detail d 
		left join tfr.t_opt_package p on p.package_no = d.package_no
		<where>
			p.status not in('CANCELED','CREATED_BILL','ALREADY_CANCELED')
			<if test="waybillNoList != null and waybillNoList.size() != 0">
				and d.waybill_no in
					(
					<foreach collection="waybillNoList" item="item" separator=",">
						#{item,jdbcType=VARCHAR}
					</foreach>
					)
			</if>
		</where>
		
	</select>
	
</mapper>