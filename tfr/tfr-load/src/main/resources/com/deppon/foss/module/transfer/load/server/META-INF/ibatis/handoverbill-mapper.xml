<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC 
	"-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="foss.load.handoverbill">
	<!-- 用于查询交结运单界面查询库存运单、用于查看交接单详情界面查询交接单中运单明细 -->
	<resultMap id="waybillStockResultMap"
		type="com.deppon.foss.module.transfer.load.api.shared.domain.HandOverBillDetailEntity">
		<result property="id" column="id" />
		<result property="handOverBillNo" column="handOverBillNo" />
		<result property="handOverType" column="handOverType"/>
		<result property="waybillNo" column="waybillNo" />
		<result property="transProperty" column="transProperty" />
		<result property="transPropertyCode" column="transPropertyCode" />
		<result property="goodsName" column="goodsName" />
		<result property="packing" column="packing" />
		<result property="cubage" column="cubage" />
		<result property="cubageAc" column="cubageAc" />
		<result property="weight" column="weight" />
		<result property="weightAc" column="weightAc" />
		<result property="note" column="note" />
		<result property="pieces" column="pieces" />
		<result property="instorageDate" column="instorageDate" />
		<result property="arriveDept" column="arriveDept" />
		<result property="insuranceValue" column="insuranceValue" />
		<result property="waybillDate" column="waybillDate" />
		<result property="waybillPieces" column="waybillPieces" />
		<result property="isPreciousGoods" column="isPreciousGoods" />
		<result property="waybillNote" column="waybillNote" />
		<result property="origOrgCode" column="origOrgCode" />
		<result property="receiveOrgName" column="receiveOrgName" />
		<result property="receiveOrgName" column="receiveOrgName" />
		<result property="consignee" column="consignee" />
		<result property="destination" column="destination" />
		<result property="waybillFee" column="waybillFee" />
		<result property="planArriveTime" column="planArriveTime" />
		<result property="codAmount" column="codAmount" />
		<result property="isCarLoad" column="isCarLoad" />
		<result property="isPriorityGoods" column="isPriorityGoods" />
		<result property="isJoinCar" column="isJoinCar" />
		<result property="isFastGoods" column="isFastGoods" />
		<result property="goodsAreaCode" column="goodsAreaCode" />
		<result property="goodsAreaType" column="goodsAreaType" />
		<result property="goodsAreaName" column="goodsAreaName" />
		<result property="goodsType" column="goodsType" />
		<result property="pkpOrgCode" column="pkpOrgCode" />
		<result property="pkpOrgName" column="pkpOrgName" />
	</resultMap>
	
	<resultMap id="handOverBillDetailResultMap"
		type="com.deppon.foss.module.transfer.load.api.shared.domain.HandOverBillDetailEntity">
		<result property="id" column="id" />
		<result property="handOverBillNo" column="HANDOVER_NO" />
		<result property="waybillNo" column="WAYBILL_NO"/>
		<result property="transProperty" column="TRANSPORT_TYPE" />
		<result property="pieces" column="HANDOVER_GOODS_QTY" />
		<result property="weight" column="HANDOVER_WEIGHT" />
		<result property="weightAc" column="ACTUAL_WEIGHT" />
		<result property="cubage" column="HANDOVER_VOLUME" />
		<result property="cubageAc" column="ACTUAL_VOLUME" />
		<result property="note" column="NOTES" />
		<result property="goodsName" column="GOODS_NAME" />
		<result property="packing" column="PACKING" />
		<result property="isPreciousGoods" column="BE_VALUABLE" />
		<result property="receiveOrgName" column="RECEIVE_ORG_NAME" />
		<result property="arriveDept" column="REACH_ORG_NAME" />
		<result property="consignee" column="RECEIVER_NAME" />
		<result property="destination" column="DEST_REGION_NAME" />
		<result property="waybillPieces" column="GOODS_QTY" />
		<result property="waybillFee" column="WAYBILL_FEE" />
		<result property="insuranceValue" column="DECLARATION_VALUE" />
		<result property="currencyCode" column="CURRENCY_CODE" />
		<result property="origOrgCode" column="ORIG_ORG_CODE" />
		<result property="handOverType" column="HANDOVER_TYPE" />
		<result property="codAmount" column="COD_AMOUNT" />
		<result property="isJoinCar" column="BE_JOIN_CAR" />
		<result property="isFastGoods" column="BE_FAST_GOODS" />	
		<result property="transPropertyCode" column="TRANSPORT_TYPE_CODE" />
		<!--
		<result property="cubageAc" column="CREATE_TIME" />
		<result property="arriveDept" column="IS_INIT" />
		<result property="insuranceValue" column="WAYBILL_NOTES" />
		<result property="insuranceValue" column="MODIFY_TIME" />
		-->
	</resultMap>
	
	<resultMap id="handOverBillDtoResultMap" type="com.deppon.foss.module.transfer.load.api.shared.dto.HandOverBillDetailDto" extends="waybillStockResultMap">
		<result property="receiveMethod" column="receiveMethod"/>
		<result property="receiveOrgCode" column="receiveOrgCode"/>
		<result property="receiveCustomerName" column="receiveCustomerName"/>
		<result property="receiveCustomerContact" column="receiveCustomerContact"/>
		<result property="deliveryCustomerContact" column="deliveryCustomerContact"/>
		<result property="receiveCustomerMobilephone" column="receiveCustomerMobilephone"/>
		<result property="receiveCustomerPhone" column="receiveCustomerPhone"/>
		<result property="receiveCustomerProvCode" column="receiveCustomerProvCode"/>
		<result property="receiveCustomerCityCode" column="receiveCustomerCityCode"/>
		<result property="receiveCustomerCityCode" column="receiveCustomerCityCode"/>
		<result property="receiveCustomerAddress" column="receiveCustomerAddress"/>
		<result property="goodsSize" column="goodsSize"/>
		<result property="toPayAmount" column="toPayAmount"/>
		<result property="paidMethod" column="paidMethod"/>
		<!-- 更新走货路径部分-duyi -->
		<result property="modifyDate" column="modifyDate" />
		<result property="origOrgCode" column="origOrgCode" />
		<result property="destOrgCode" column="destOrgCode" />
		<result property="beJoinCar" column="beJoinCar" />
		<result property="vehicleNo" column="vehicleNo" />
		<result property="orderNo" column="orderNo" />
		<result property="driverName" column="driverName" />
		<result property="driverPhone" column="driverPhone" />
		<result property="creatorCode" column="creatorCode" />
		<result property="goodsType" column="goodsType" />
	</resultMap>
	<!-- 用于查询交接运单界面，双击某运单，得到该运单下的流水号列表 -->
	<resultMap id="serialNoStockResultMap"
		type="com.deppon.foss.module.transfer.load.api.shared.domain.SerialNoStockEntity">
		<result property="serialNo" column="serialNo" />
		<result property="storageDept" column="storageDept" />
		<result property="waybillNo" column="waybillNo" />
		<result property="instorageDate" column="instorageDate" />
		<result property="isInStorage" column="isInStorage" />
		<result property="isJoinCar" column="isJoinCar" />
		<result property="isPreHandOver" column="isPreHandOver" />
		<result property="weight" column="weight"/>
		<result property="volumn" column="volumn"/>
		<result property="productCode" column="productCode"/>
		<result property="beScan" column="beScan"/>
	</resultMap>
	<!-- 用于查询交接单 -->
	<resultMap id="queryHandOverBillResultMap"
		type="com.deppon.foss.module.transfer.load.api.shared.dto.QueryHandOverBillDto">
		<result property="id" column="id" />
		<result property="handOverBillNo" column="handOverBillNo" />
		<result property="handOverType" column="handOverType" />
		<result property="handOverTime" column="handOverTime" />
		<result property="departDept" column="departDept" />
		<result property="departDeptCode" column="departDeptCode" />
		<result property="departTime" column="departTime" />
		<result property="arriveDept" column="arriveDept" />
		<result property="arriveDeptCode" column="arriveDeptCode" />
		<result property="arriveTime" column="arriveTime" />
		<result property="driver" column="driverCode" />
		<result property="driverName" column="driverName" />
		<result property="vehicleNo" column="vehicleNo" />
		<result property="createUserName" column="createUserName" />
		<result property="createUserCode" column="createUserCode" />
		<result property="goodsQtyTotal" column="totalPieces" />
		<result property="waybillQtyTotal" column="totalWaybill" />
		<result property="weightTotal" column="totalWeight" />
		<result property="codAmountTotal" column="totalCodAmount" />
		<result property="volumeTotal" column="totalCubage" />
		<result property="moneyTotal" column="totalMoney" />
		<result property="driverTel" column="driverTel" />
		<result property="loadEndTime" column="loadEndTime" />
		<result property="goodsType" column="goodsType" />
		<result property="modifyUserName" column="modifyUserName" />
		<result property="note" column="note" />
		<result property="isAgencyVisit" column="isAgencyVisit" />
		<result property="handOverBillState" column="handOverBillState" />
		<result property="isCreatedByPDA" column="isCreatedByPDA" />
		<result property="fastWaybillQty" column="fastWaybillQty" />
		<result property="lineName" column="lineName" />
		<result property="loadTaskNo" column="loadTaskNo" />
		<result property="truckDepartPlanDetailId" column="truckDepartPlanDetailId" />
		<result property="isCreateTaskTruck" column="isCreateTaskTruck" />
		<result property="isCarLoad" column="isCarLoad" />
		<result property="bePackage" column="bePackage" />
		<result property="waybillQtyAF" column="waybillQtyAF" />
		<result property="goodsWeightAF" column="goodsWeightAF" />
		<result property="goodsVolumeAF" column="goodsVolumeAF" />
		<result property="waybillQtyFLF" column="waybillQtyFLF" />
		<result property="goodsWeightFLF" column="goodsWeightFLF" />
		<result property="goodsVolumeFLF" column="goodsVolumeFLF" />
		<result property="waybillQtyFSF" column="waybillQtyFSF" />
		<result property="goodsWeightFSF" column="goodsWeightFSF" />
		<result property="goodsVolumeFSF" column="goodsVolumeFSF" />
		<result property="waybillQtyBGFLF" column="waybillQtyBGFLF" />
		<result property="goodsWeightBGFLF" column="goodsWeightBGFLF" />
		<result property="goodsVolumeBGFLF" column="goodsVolumeBGFLF" />
		<result property="waybillQtyBGFSF" column="waybillQtyBGFSF" />
		<result property="goodsWeightBGFSF" column="goodsWeightBGFSF" />
		<result property="goodsVolumeBGFSF" column="goodsVolumeBGFSF" />
		<result property="tranGoodsType" column="tranGoodsType"/>
		<result property="beTrailerVehicleNo" column="beTrailerVehicleNo"/>
	</resultMap>
	<!-- 用于交接单详情界面，根据交接单号、运单号查询流水号列表 -->
	<resultMap id="querySerialNoListByNosResultMap"
		type="com.deppon.foss.module.transfer.load.api.shared.dto.SerialNoLoadExceptionDto">
		<result property="handOverBillNo" column="handOverBillNo" />
		<result property="waybillNo" column="waybillNo" />
		<result property="serialNo" column="serialNo" />
		<result property="loadExceptionType" column="loadExceptionType" />
		<result property="weight" column="weight"/>
		<result property="volumn" column="volumn"/>
		<result property="productCode" column="productCode"/>
		<result property="beScan" column="beScan"/>
	</resultMap>
	<!-- 用于查看交接单详情界面获取交接单修改日志 -->
	<resultMap id="queryHandOverBillOptLogByNoResultMap" 
		type = "com.deppon.foss.module.transfer.load.api.shared.domain.HandOverBillOptLogEntity" >
		<result property="handOverBillNo" column="handOverBillNo" />
		<result property="optType" column="optType" />
		<result property="operatorName" column="operatorName" />
		<result property="optContent" column="optContent" />
		<result property="optTime" column="optTime" />
	</resultMap>
	<!-- 用于打印交接单、查询在途运单流水号、查看交接单(无PDA)详情、修改交接单(无PDA) -->
	<resultMap id="getHandOverBillSerialNoDetailsByWayBillNoResultMap" 
		type = "com.deppon.foss.module.transfer.load.api.shared.domain.HandOverBillSerialNoDetailEntity" >
		<result property="superId" column="superId" />
		<result property="waybillNo" column="waybillNo" />
		<result property="serialNo" column="serialNo" />
		<result property="origOrgCode" column="origOrgCode" />
		<result property="handOverTime" column="handOverTime" />
		<result property="handOverBillNo" column="handOverBillNo" />
		<result property="preHandOverStatus" column="preHandOverStatus" />
		<result property="isInStorage" column="isInStorage" />
		<result property="weight" column="weight"/>
		<result property="volumn" column="volumn"/>
		<result property="beScan" column="beScan"/>
		<result property="productCode" column="productCode"/>
	</resultMap>
	
	<!-- 332219 营业部交接库存对应表 -->
	<resultMap id="stockSaleResultMap" 
	    type="com.deppon.foss.module.transfer.stock.api.shared.domain.StockSaleEntity">
		<id property="id" column="id"/>
		<result property="waybillNo" column="waybill_no"/>
		<result property="serialNo" column="serial_no"/>
		<result property="inStockTime" column="in_stock_time"/>
		<result property="operatorCode" column="operator_code"/>
		<result property="operatorName" column="operator_name"/>
		<result property="deviceType" column="device_type"/>
		<result property="orgCode" column="org_code"/>
		<result property="scanTime" column="scan_time"/>
		<result property="nextOrgCode" column="next_org_code"/>
		<result property="preHandoverStatus" column="pre_handover_status"/>
		<result property="isOut" column="is_out"/>
	</resultMap>
	<!-- 332219 营业部交接运单库存对应表 -->
	<resultMap id="waybillStockSaleResultMap" 
	    type="com.deppon.foss.module.transfer.stock.api.shared.domain.WaybillStockSaleEntity" >
		<id property="id" column="id"/>
		<result property="waybillNo" column="waybill_no"/>
		<result property="stockGoodsQty" column="stock_goods_qty"/>
		<result property="goodsAreaCode" column="goods_area_code"/>
		<result property="orgCode" column="org_code"/>
		<result property="planStartTime" column="plan_start_time"/>
		<result property="lastInStockTime" column="last_in_stock_time"/>
		<result property="nextOrgCode" column="next_org_code"/>
		<result property="isOut" column="is_out"/>
		<result property="positionQty" column="position_qty"/>
	</resultMap>
	
	<!--查询交接运单界面，批量查询库存运单信息，按照必走货排序 -->
	<select id="queryWaybillStockList" resultMap="waybillStockResultMap" 
		parameterType="com.deppon.foss.module.transfer.load.api.shared.dto.QueryWaybillForHandOverBillConditionDto">
		      select 
			  waybillNo,
	          goodsName,
	          isJoinCar,
	          packing,
	          cubage,
	          weight,
	          pieces,
	          instorageDate,
	          nextOrgCode,
	          currentDeptCode,
			  transPropertyCode,
			  transProperty,
			  seq,
			  insuranceValue,
			  waybillDate,
			  codAmount,
			  isCarLoad,
			  waybillPieces,
			  isPreciousGoods,
			  waybillNote,
			  origOrgCode,
			  arriveDept,
			  receiveOrgName,
			  isFastGoods,
			  goodsAreaCode,
			  goodsAreaType,
			  goodsAreaName,
			  consignee,
			  destination,
			  waybillFee,
			  inStockDuration 
				 from (
				 /*必走货**/
				select stock.waybill_no waybillNo,
							0 isPriorityGoods,
			                waybill.goods_name goodsName,
			                'N' isJoinCar,
			                waybill.goods_package packing,
			                pro.code transPropertyCode,
		                    pro.name transProperty,
		                    pro.seq seq,
			                round((waybill.goods_volume_total / waybill.goods_qty_total)*stock.stock_goods_qty,3) cubage,
			                round((waybill.goods_weight_total / waybill.goods_qty_total)*stock.stock_goods_qty,3) weight,
			                stock.stock_goods_qty pieces,
			                stock.in_stock_time instorageDate,
			                stock.next_org_code nextOrgCode,
			                stock.org_code currentDeptCode,
			                waybill.insurance_amount / 100 insuranceValue,
			                waybill.bill_time waybillDate,
			                waybill.cod_amount / 100 codAmount,
			                waybill.IS_WHOLE_VEHICLE isCarLoad,
			                waybill.goods_qty_total waybillPieces,
			                waybill.precious_goods isPreciousGoods,
			                waybill.inner_notes waybillNote,
			                waybill.Receive_Org_Code origOrgCode,
			                md.name arriveDept,
			                mdn.name receiveOrgName,
			                'Y' isFastGoods,
			                ga.goods_area_code goodsAreaCode,
			                ga.goods_area_type goodsAreaType,
			                ga.goods_area_name goodsAreaName,
			                waybill.Receive_Customer_Name consignee,
			                waybill.Target_Org_Code destination,
			                waybill.Total_Fee / 100 waybillFee,
			                trunc((sysdate - cast(stock.in_stock_time as date)) * 24, 1) as inStockDuration
			           from tfr.t_opt_waybill_stock stock
			           left join pkp.t_srv_waybill waybill on stock.waybill_no = waybill.waybill_no and waybill.active = 'Y'
			           left join bse.mv_dest_net md on waybill.CUSTOMER_PICKUP_ORG_CODE = md.code and md.active = 'Y'
			           left join bse.mv_dest_net mdn on waybill.RECEIVE_ORG_CODE = mdn.code  and mdn.active = 'Y'
			           left join pkp.t_srv_product pro on waybill.product_code = pro.code and pro.active = 'Y' 
			           left join bse.t_bas_goods_area ga on stock.goods_area_code = ga.goods_area_code and ga.org_code = stock.org_code and ga.active = 'Y'
		<where>
		stock.plan_start_time <![CDATA[<]]> To_date(to_char(sysdate,'yyyy-mm-dd hh24:mi:ss'),'yyyy-mm-dd hh24:mi:ss')
		
			           		and pro.priority = 'FAST' and pro.levels = 3
			           		<![CDATA[ and pro.seq <3 ]]>
			           		and stock.IN_STOCK_TIME between #{beginInStorageTime} and #{endInStorageTime} 
						  	and (
			<foreach collection="arriveDeptList" item="item" separator="or">
									stock.next_org_code = #{item,jdbcType=VARCHAR}
			</foreach>
						  	)
						  	and (select count(0) from bse.t_bas_sales_department a where a.code=stock.next_org_code and a.active='Y' and a.station='Y') = 0
						  	and stock.ORG_CODE = #{currentDeptCode}
						  	and (ga.goods_area_type not in (
			<foreach collection="abnormalGoodsAreaTypeList" item="item" separator=",">
								  #{item,jdbcType=VARCHAR}
			</foreach>
					  		  ) or ga.goods_area_type is null)
			<if test="transPropertyList != null and transPropertyList.size() != 0  and !transPropertyList.get(0).equals('ALL')">
						  		and waybill.product_code in
						  		 (
						  		 	<foreach collection="transPropertyList" item="item" separator=",">
								  		#{item,jdbcType=VARCHAR}
									</foreach>
						  		 )
			</if>
			<if test="transType != null and transType != ''  and transType != 'ALL'">
						  		and pro.transport_type = #{transType}
			</if>
			<if test="goodsType != null and goodsType != ''  and goodsType != 'ALL'">
						  		and waybill.goods_type_code = #{goodsType}
			</if>
			<if test="waybillNo != null and waybillNo != ''">
						  		and waybill.waybill_No = #{waybillNo}
			</if>
		</where>
    union all

select stock.waybill_no waybillNo,
				0 isPriorityGoods,
                waybill.goods_name goodsName,
                'N' isJoinCar,
                waybill.goods_package packing,
                pro.code transPropertyCode,
                pro.name transProperty,
                pro.seq seq,
                round((waybill.goods_volume_total / waybill.goods_qty_total)*stock.stock_goods_qty,3) cubage,
                round((waybill.goods_weight_total / waybill.goods_qty_total)*stock.stock_goods_qty,3) weight,
                stock.stock_goods_qty pieces,
                stock.in_stock_time instorageDate,
                stock.next_org_code nextOrgCode,
                stock.org_code currentDeptCode,
                waybill.insurance_amount / 100 insuranceValue,
                waybill.bill_time waybillDate,
                waybill.cod_amount / 100 codAmount,
                waybill.IS_WHOLE_VEHICLE isCarLoad,
                waybill.goods_qty_total waybillPieces,
                waybill.precious_goods isPreciousGoods,
                waybill.inner_notes waybillNote,
                waybill.Receive_Org_Code origOrgCode,
                md.name arriveDept,
                mdn.name receiveOrgName,
                'N' isFastGoods,
                ga.goods_area_code goodsAreaCode,
                ga.goods_area_type goodsAreaType,
                ga.goods_area_name goodsAreaName,
                waybill.Receive_Customer_Name consignee,
                waybill.Target_Org_Code destination,
                waybill.Total_Fee / 100 waybillFee,
                trunc((sysdate - cast(stock.in_stock_time as date)) * 24, 1) as inStockDuration
           from tfr.t_opt_waybill_stock stock
           inner join pkp.t_srv_waybill waybill on stock.waybill_no = waybill.waybill_no and waybill.active = 'Y'
           left join bse.mv_dest_net md on waybill.CUSTOMER_PICKUP_ORG_CODE = md.code and md.active = 'Y'
           left join bse.mv_dest_net mdn on waybill.RECEIVE_ORG_CODE = mdn.code  and mdn.active = 'Y'
           left join pkp.t_srv_product pro on waybill.product_code = pro.code and pro.active = 'Y' 
           left join bse.t_bas_goods_area ga on stock.goods_area_code = ga.goods_area_code and ga.org_code = stock.org_code and ga.active = 'Y'
		<where>
				<![CDATA[stock.plan_start_time < To_date(to_char(sysdate-1,'yyyy-mm-dd hh24:mi:ss'),'yyyy-mm-dd hh24:mi:ss')]]>
      			and pro.priority = 'NORMAL' and pro.levels = 3
      			<![CDATA[ and pro.seq <7 ]]>
           		and stock.IN_STOCK_TIME between #{beginInStorageTime} and #{endInStorageTime} 
			  	and (
			<foreach collection="arriveDeptList" item="item" separator="or">
						stock.next_org_code = #{item,jdbcType=VARCHAR}
			</foreach>
			  	)
			  	and (select count(0) from bse.t_bas_sales_department a where a.code=stock.next_org_code and a.active='Y' and a.station='Y') = 0
			  	and stock.ORG_CODE = #{currentDeptCode}
  	           	and (ga.goods_area_type not in (
			<foreach collection="abnormalGoodsAreaTypeList" item="item" separator=",">
								  #{item,jdbcType=VARCHAR}
			</foreach>
					  		 ) or ga.goods_area_type is null)
			<if test="transPropertyList != null and transPropertyList.size() != 0  and !transPropertyList.get(0).equals('ALL')">
		  		and waybill.product_code in
		  		 (
		  		 	<foreach collection="transPropertyList" item="item" separator=",">
				  		#{item,jdbcType=VARCHAR}
					</foreach>
		  		 )
			</if>
			<if test="transType != null and transType != ''  and transType != 'ALL'">
			  		and pro.transport_type = #{transType}
			</if>
			<if test="goodsType != null and goodsType != ''  and goodsType != 'ALL'">
			  		and waybill.goods_type_code = #{goodsType}
			</if>
			<if test="waybillNo != null and waybillNo != ''">
			  		and waybill.waybill_No = #{waybillNo}
			</if>
		</where>
			
			union all
		
		 /*非必走货**/
		  select stock.waybill_no waybillNo,
		  					1 isPriorityGoods,
			                waybill.goods_name goodsName,
			                'N' isJoinCar,
			                waybill.goods_package packing,
			                pro.code transPropertyCode,
	                        pro.name transProperty,
	                        pro.seq seq,
			                round((waybill.goods_volume_total / waybill.goods_qty_total)*stock.stock_goods_qty,3) cubage,
			                round((waybill.goods_weight_total / waybill.goods_qty_total)*stock.stock_goods_qty,3)  weight,
			                stock.stock_goods_qty pieces,
			                stock.in_stock_time instorageDate,
			                stock.next_org_code nextOrgCode,
			                stock.org_code currentDeptCode,
			                waybill.insurance_amount / 100 insuranceValue,
			                waybill.bill_time waybillDate,
			                waybill.cod_amount / 100 codAmount,
			                waybill.IS_WHOLE_VEHICLE isCarLoad,
			                waybill.goods_qty_total waybillPieces,
			                waybill.precious_goods isPreciousGoods,
			                waybill.inner_notes waybillNote,
			                waybill.Receive_Org_Code origOrgCode,
			                md.name arriveDept,
			                mdn.name receiveOrgName,
			                'Y' isFastGoods,
			                ga.goods_area_code goodsAreaCode,
			                ga.goods_area_type goodsAreaType,
			                ga.goods_area_name goodsAreaName,
			                waybill.Receive_Customer_Name consignee,
			                waybill.Target_Org_Code destination,
			                waybill.Total_Fee / 100 waybillFee,
			                trunc((sysdate - cast(stock.in_stock_time as date)) * 24, 1) as inStockDuration
			           from tfr.t_opt_waybill_stock stock
			           left join pkp.t_srv_waybill waybill on stock.waybill_no = waybill.waybill_no and waybill.active = 'Y'
			           left join bse.mv_dest_net md on waybill.CUSTOMER_PICKUP_ORG_CODE = md.code and md.active = 'Y'
			           left join bse.mv_dest_net mdn on waybill.RECEIVE_ORG_CODE = mdn.code  and mdn.active = 'Y'
			           left join pkp.t_srv_product pro on waybill.product_code = pro.code and pro.active = 'Y' 
			           left join bse.t_bas_goods_area ga on stock.goods_area_code = ga.goods_area_code and ga.org_code = stock.org_code and ga.active = 'Y'
		<where>
		<![CDATA[((stock.plan_start_time >= To_date(to_char(sysdate,'yyyy-mm-dd hh24:mi:ss'),'yyyy-mm-dd hh24:mi:ss')) or 
		(stock.plan_start_time < To_date(to_char(sysdate,'yyyy-mm-dd hh24:mi:ss'),'yyyy-mm-dd hh24:mi:ss') and pro.seq >= 3))]]>
			           		and pro.priority = 'FAST' and pro.levels = 3
			           		and stock.IN_STOCK_TIME between #{beginInStorageTime} and #{endInStorageTime} 
						  	and (
			<foreach collection="arriveDeptList" item="item" separator="or">
									stock.next_org_code = #{item,jdbcType=VARCHAR}
			</foreach>
						  	)
						  	and stock.ORG_CODE = #{currentDeptCode}
						  	and (ga.goods_area_type not in (
			<foreach collection="abnormalGoodsAreaTypeList" item="item" separator=",">
								  #{item,jdbcType=VARCHAR}
			</foreach>
					  		  ) or ga.goods_area_type is null)
			<if test="transPropertyList != null and transPropertyList.size() != 0  and !transPropertyList.get(0).equals('ALL')">
						  		and waybill.product_code in
						  		 (
						  		 	<foreach collection="transPropertyList" item="item" separator=",">
								  		#{item,jdbcType=VARCHAR}
									</foreach>
						  		 )
			</if>
			<if test="transType != null and transType != ''  and transType != 'ALL'">
						  		and pro.transport_type = #{transType}
			</if>
			<if test="goodsType != null and goodsType != ''  and goodsType != 'ALL'">
						  		and waybill.goods_type_code = #{goodsType}
			</if>
			<if test="waybillNo != null and waybillNo != ''">
						  		and waybill.waybill_No = #{waybillNo}
			</if>
		</where>
    union all

select stock.waybill_no waybillNo,
				1 isPriorityGoods,
                waybill.goods_name goodsName,
                'N' isJoinCar,
                waybill.goods_package packing,
                pro.code transPropertyCode,
                pro.name transProperty,
                pro.seq seq,
                round((waybill.goods_volume_total / waybill.goods_qty_total)*stock.stock_goods_qty,3) cubage,
                round((waybill.goods_weight_total / waybill.goods_qty_total)*stock.stock_goods_qty,3) weight,
                stock.stock_goods_qty pieces,
                stock.in_stock_time instorageDate,
                stock.next_org_code nextOrgCode,
                stock.org_code currentDeptCode,
                waybill.insurance_amount / 100 insuranceValue,
                waybill.bill_time waybillDate,
                waybill.cod_amount / 100 codAmount,
                waybill.IS_WHOLE_VEHICLE isCarLoad,
                waybill.goods_qty_total waybillPieces,
                waybill.precious_goods isPreciousGoods,
                waybill.inner_notes waybillNote,
                waybill.Receive_Org_Code origOrgCode,
                md.name arriveDept,
                mdn.name receiveOrgName,
                'N' isFastGoods,
                ga.goods_area_code goodsAreaCode,
                ga.goods_area_type goodsAreaType,
                ga.goods_area_name goodsAreaName,
                waybill.Receive_Customer_Name consignee,
                waybill.Target_Org_Code destination,
                waybill.Total_Fee / 100 waybillFee,
                trunc((sysdate - cast(stock.in_stock_time as date)) * 24, 1) as inStockDuration
           from tfr.t_opt_waybill_stock stock
           left join pkp.t_srv_waybill waybill on stock.waybill_no = waybill.waybill_no and waybill.active = 'Y'
           left join bse.mv_dest_net md on waybill.CUSTOMER_PICKUP_ORG_CODE = md.code and md.active = 'Y'
           left join bse.mv_dest_net mdn on waybill.RECEIVE_ORG_CODE = mdn.code  and mdn.active = 'Y'
           left join pkp.t_srv_product pro on waybill.product_code = pro.code and pro.active = 'Y' 
           left join bse.t_bas_goods_area ga on stock.goods_area_code = ga.goods_area_code and ga.org_code = stock.org_code and ga.active = 'Y'
		<where>
		<![CDATA[((stock.plan_start_time >= To_date(to_char(sysdate-1,'yyyy-mm-dd hh24:mi:ss'),'yyyy-mm-dd hh24:mi:ss')  ) or (stock.plan_start_time < To_date(to_char(sysdate,'yyyy-mm-dd hh24:mi:ss'),'yyyy-mm-dd hh24:mi:ss') and pro.seq >= 7)
			or (stock.plan_start_time >= To_date(to_char(sysdate,'yyyy-mm-dd hh24:mi:ss'),'yyyy-mm-dd hh24:mi:ss') and pro.seq >= 7))
			]]>
      			and pro.priority = 'NORMAL' and pro.levels = 3
           		and stock.IN_STOCK_TIME between #{beginInStorageTime} and #{endInStorageTime} 
			  	and (
			<foreach collection="arriveDeptList" item="item" separator="or">
						stock.next_org_code = #{item,jdbcType=VARCHAR}
			</foreach>
			  	)
			  	and stock.ORG_CODE = #{currentDeptCode}
  	           and (ga.goods_area_type not in (
			<foreach collection="abnormalGoodsAreaTypeList" item="item" separator=",">
								  #{item,jdbcType=VARCHAR}
			</foreach>
					  		  ) or ga.goods_area_type is null)
			<if test="transPropertyList != null and transPropertyList.size() != 0  and !transPropertyList.get(0).equals('ALL')">
						  		and waybill.product_code in
						  		 (
						  		 	<foreach collection="transPropertyList" item="item" separator=",">
								  		#{item,jdbcType=VARCHAR}
									</foreach>
						  		 )
			</if>
			<if test="transType != null and transType != ''  and transType != 'ALL'">
			  		and pro.transport_type = #{transType}
			</if>
			<if test="goodsType != null and goodsType != ''  and goodsType != 'ALL'">
			  		and waybill.goods_type_code = #{goodsType}
			</if>
			<if test="waybillNo != null and waybillNo != ''">
			  		and waybill.waybill_No = #{waybillNo}
			</if>
		</where>
			/*合车表数据**/
			union all 
			
			select  tl.waybill_no waybillNo,
		        2 isPriorityGoods,
		        waybill.goods_name goodsName,
		        'Y' isJoinCar,
		        waybill.goods_package packing,
		        pro.code transPropertyCode,
		        pro.name transProperty,
		        pro.seq seq,
		        round((waybill.goods_volume_total / waybill.goods_qty_total) *
		                     (select count(*)
		                        from tfr.t_opt_together_list t 
		                        left join bse.t_bas_goods_area goo
		                             on t.new_goods_area_code = goo.goods_area_code and goo.active = 'Y' 
		                       where t.org_code = #{currentDeptCode}
		                       and (
		<foreach collection="arriveDeptList" item="item" separator="or">
										goo.arrive_region_code = #{item,jdbcType=VARCHAR}
		</foreach>
							  	)
		                       and t.waybill_no = waybill.waybill_no),
		                     2) cubage,
		        round((waybill.goods_weight_total / waybill.goods_qty_total) *
		                     (select count(*)
		                        from tfr.t_opt_together_list t 
		                        left join bse.t_bas_goods_area goo
		                             on t.new_goods_area_code = goo.goods_area_code and goo.active = 'Y' 
		                       where t.org_code = #{currentDeptCode}
		                       and (
				<foreach collection="arriveDeptList" item="item" separator="or">
												goo.arrive_region_code = #{item,jdbcType=VARCHAR}
				</foreach>
									  	)
		                       and t.waybill_no = waybill.waybill_no),
		                     2) weight,
		          (select count(*)
		                        from tfr.t_opt_together_list t 
		                        left join bse.t_bas_goods_area goo
		                             on t.new_goods_area_code = goo.goods_area_code and goo.active = 'Y' 
		                       where t.org_code = #{currentDeptCode}
		                       and (
		<foreach collection="arriveDeptList" item="item" separator="or">
										goo.arrive_region_code = #{item,jdbcType=VARCHAR}
		</foreach>
							  	)
		                       and t.waybill_no = waybill.waybill_no) pieces,
		           stock.in_stock_time instorageDate,
		           goo.arrive_region_code nextOrgCode,
		           stock.org_code currentDeptCode,
		           waybill.insurance_amount / 100 insuranceValue,
		           waybill.bill_time waybillDate,
		           waybill.cod_amount / 100 codAmount,
		           waybill.IS_WHOLE_VEHICLE isCarLoad,
		           waybill.goods_qty_total waybillPieces,
		           waybill.precious_goods isPreciousGoods,
		           waybill.inner_notes waybillNote,
		           waybill.Receive_Org_Code origOrgCode,
		           md.name arriveDept,
		           mdn.name receiveOrgName,
		           case pro.priority when 'FAST' then 'Y' else 'N' end isFastGoods,
		           ga.goods_area_code goodsAreaCode,
		           ga.goods_area_type goodsAreaType,
		           ga.goods_area_name goodsAreaName,
		           waybill.Receive_Customer_Name consignee,
		           waybill.Target_Org_Code destination,
		           waybill.Total_Fee / 100 waybillFee,
		           trunc((sysdate - cast(stock.in_stock_time as date)) * 24, 1) as inStockDuration
		from (select waybill_no,
               new_goods_area_code,
               orig_goods_area_code,
               org_code
          from (select t.waybill_no,
                       t.new_goods_area_code,
                       t.orig_goods_area_code,
                       t.org_code,
                       row_number() OVER(PARTITION BY waybill_no,NEW_GOODS_AREA_CODE order by id) as row_flag
                  from tfr.t_opt_together_list t where t.org_code = #{currentDeptCode}) temp
         where temp.row_flag = '1') tl
		left join pkp.t_srv_waybill waybill
		     on tl.waybill_no = waybill.waybill_no and waybill.active = 'Y'
		left join pkp.t_srv_product pro
		     on waybill.product_code = pro.code and pro.active = 'Y' and pro.levels = 3
		left join tfr.t_opt_waybill_stock stock
		     on tl.waybill_no = stock.waybill_no and stock.org_code = tl.org_code and stock.goods_area_code = tl.orig_goods_area_code
		left join bse.t_bas_goods_area ga
		     on ga.goods_area_code = tl.orig_goods_area_code and ga.active = 'Y' and ga.org_code = #{currentDeptCode}
		left join bse.t_bas_goods_area goo
		     on tl.new_goods_area_code = goo.goods_area_code and goo.active = 'Y'  and goo.org_code = #{currentDeptCode}
		left join bse.mv_dest_net md
		            on waybill.CUSTOMER_PICKUP_ORG_CODE = md.code
		           and md.active = 'Y'
		left join bse.mv_dest_net mdn
		            on waybill.RECEIVE_ORG_CODE = mdn.code
		           and mdn.active = 'Y'
		<where>
           		stock.IN_STOCK_TIME between #{beginInStorageTime} and #{endInStorageTime} 
			  	and (
			<foreach collection="arriveDeptList" item="item" separator="or">
						goo.arrive_region_code = #{item,jdbcType=VARCHAR}
			</foreach>
			  	)
			  	and stock.ORG_CODE = #{currentDeptCode}
			<if test="transPropertyList != null and transPropertyList.size() != 0  and !transPropertyList.get(0).equals('ALL')">
						  		and waybill.product_code in
						  		 (
						  		 	<foreach collection="transPropertyList" item="item" separator=",">
								  		#{item,jdbcType=VARCHAR}
									</foreach>
						  		 )
			</if>
			<if test="transType != null and transType != ''  and transType != 'ALL'">
			  		and pro.transport_type = #{transType}
			</if>
			<if test="goodsType != null and goodsType != ''  and goodsType != 'ALL'">
			  		and waybill.goods_type_code = #{goodsType}
			</if>
			<if test="waybillNo != null and waybillNo != ''">
			  		and waybill.waybill_No = #{waybillNo}
			</if>
		</where>
		)
		<where>
		pieces <![CDATA[>]]> 0 
		</where>
		  order by isPriorityGoods,seq,inStockDuration
	</select>
	
	<!--查询交接运单界面，获取库存运单的总量 -->
	<select id="getWaybillStockCount" resultType="Long" 
		parameterType="com.deppon.foss.module.transfer.load.api.shared.dto.QueryWaybillForHandOverBillConditionDto">
			select count(*) from (select 
			  waybillNo,
	          goodsName,
	          isJoinCar,
	          packing,
	          cubage,
	          weight,
	          pieces,
	          instorageDate,
	          nextOrgCode,
	          currentDeptCode,
			  transPropertyCode,
			  transProperty,
			  seq,
			  insuranceValue,
			  waybillDate,
			  codAmount,
			  isCarLoad,
			  waybillPieces,
			  isPreciousGoods,
			  waybillNote,
			  origOrgCode,
			  arriveDept,
			  receiveOrgName,
			  isFastGoods,
			  goodsAreaCode,
			  goodsAreaType,
			  goodsAreaName,
			  consignee,
			  destination,
			  waybillFee,
			  inStockDuration 
				 from (
				 /*必走货**/
				select stock.waybill_no waybillNo,
							0 isPriorityGoods,
			                waybill.goods_name goodsName,
			                'N' isJoinCar,
			                waybill.goods_package packing,
			                pro.code transPropertyCode,
		                    pro.name transProperty,
		                    pro.seq seq,
			                round((waybill.goods_volume_total / waybill.goods_qty_total)*stock.stock_goods_qty,3) cubage,
			                round((waybill.goods_weight_total / waybill.goods_qty_total)*stock.stock_goods_qty,3)  weight,
			                stock.stock_goods_qty pieces,
			                stock.in_stock_time instorageDate,
			                stock.next_org_code nextOrgCode,
			                stock.org_code currentDeptCode,
			                waybill.insurance_amount / 100 insuranceValue,
			                waybill.bill_time waybillDate,
			                waybill.cod_amount / 100 codAmount,
			                waybill.IS_WHOLE_VEHICLE isCarLoad,
			                waybill.goods_qty_total waybillPieces,
			                waybill.precious_goods isPreciousGoods,
			                waybill.inner_notes waybillNote,
			                waybill.Receive_Org_Code origOrgCode,
			                md.name arriveDept,
			                mdn.name receiveOrgName,
			                'Y' isFastGoods,
			                ga.goods_area_code goodsAreaCode,
			                ga.goods_area_type goodsAreaType,
			                ga.goods_area_name goodsAreaName,
			                waybill.Receive_Customer_Name consignee,
			                waybill.Target_Org_Code destination,
			                waybill.Total_Fee / 100 waybillFee,
			                trunc((sysdate - cast(stock.in_stock_time as date)) * 24, 1) as inStockDuration
			           from tfr.t_opt_waybill_stock stock
			           left join pkp.t_srv_waybill waybill on stock.waybill_no = waybill.waybill_no and waybill.active = 'Y'
			           left join bse.mv_dest_net md on waybill.CUSTOMER_PICKUP_ORG_CODE = md.code and md.active = 'Y'
			           left join bse.mv_dest_net mdn on waybill.RECEIVE_ORG_CODE = mdn.code  and mdn.active = 'Y'
			           left join pkp.t_srv_product pro on waybill.product_code = pro.code and pro.active = 'Y' 
			           left join bse.t_bas_goods_area ga on stock.goods_area_code = ga.goods_area_code and ga.org_code = stock.org_code and ga.active = 'Y'
		<where>
		stock.plan_start_time <![CDATA[<]]> To_date(to_char(sysdate,'yyyy-mm-dd hh24:mi:ss'),'yyyy-mm-dd hh24:mi:ss') 
			           		and pro.priority = 'FAST' and pro.levels = 3
			           		<![CDATA[ and pro.seq <3 ]]>
			           		and stock.IN_STOCK_TIME between #{beginInStorageTime} and #{endInStorageTime} 
						  	and (
			<foreach collection="arriveDeptList" item="item" separator="or">
									stock.next_org_code = #{item,jdbcType=VARCHAR}
			</foreach>
						  	)
						  	and (select count(0) from bse.t_bas_sales_department a where a.code=stock.next_org_code and a.active='Y' and a.station='Y') = 0
						  	and stock.ORG_CODE = #{currentDeptCode}
						  	and (ga.goods_area_type not in (
			<foreach collection="abnormalGoodsAreaTypeList" item="item" separator=",">
								  #{item,jdbcType=VARCHAR}
			</foreach>
					  		  ) or ga.goods_area_type is null)
			<if test="transPropertyList != null and transPropertyList.size() != 0  and !transPropertyList.get(0).equals('ALL')">
						  		and waybill.product_code in
						  		 (
						  		 	<foreach collection="transPropertyList" item="item" separator=",">
								  		#{item,jdbcType=VARCHAR}
									</foreach>
						  		 )
			</if>
			<if test="transType != null and transType != ''  and transType != 'ALL'">
						  		and pro.transport_type = #{transType}
			</if>
			<if test="goodsType != null and goodsType != ''  and goodsType != 'ALL'">
						  		and waybill.goods_type_code = #{goodsType}
			</if>
			<if test="waybillNo != null and waybillNo != ''">
						  		and waybill.waybill_No = #{waybillNo}
			</if>
		</where>
    union all

select stock.waybill_no waybillNo,
				0 isPriorityGoods,
                waybill.goods_name goodsName,
                'N' isJoinCar,
                waybill.goods_package packing,
                pro.code transPropertyCode,
                pro.name transProperty,
                pro.seq seq,
                round((waybill.goods_volume_total / waybill.goods_qty_total)*stock.stock_goods_qty,3) cubage,
                round((waybill.goods_weight_total / waybill.goods_qty_total)*stock.stock_goods_qty,3) weight,
                stock.stock_goods_qty pieces,
                stock.in_stock_time instorageDate,
                stock.next_org_code nextOrgCode,
                stock.org_code currentDeptCode,
                waybill.insurance_amount / 100 insuranceValue,
                waybill.bill_time waybillDate,
                waybill.cod_amount / 100 codAmount,
                waybill.IS_WHOLE_VEHICLE isCarLoad,
                waybill.goods_qty_total waybillPieces,
                waybill.precious_goods isPreciousGoods,
                waybill.inner_notes waybillNote,
                waybill.Receive_Org_Code origOrgCode,
                md.name arriveDept,
                mdn.name receiveOrgName,
                'N' isFastGoods,
                ga.goods_area_code goodsAreaCode,
                ga.goods_area_type goodsAreaType,
                ga.goods_area_name goodsAreaName,
                waybill.Receive_Customer_Name consignee,
                waybill.Target_Org_Code destination,
                waybill.Total_Fee / 100 waybillFee,
                trunc((sysdate - cast(stock.in_stock_time as date)) * 24, 1) as inStockDuration
           from tfr.t_opt_waybill_stock stock
           inner join pkp.t_srv_waybill waybill on stock.waybill_no = waybill.waybill_no and waybill.active = 'Y'
           left join bse.mv_dest_net md on waybill.CUSTOMER_PICKUP_ORG_CODE = md.code and md.active = 'Y'
           left join bse.mv_dest_net mdn on waybill.RECEIVE_ORG_CODE = mdn.code  and mdn.active = 'Y'
           left join pkp.t_srv_product pro on waybill.product_code = pro.code and pro.active = 'Y' 
           left join bse.t_bas_goods_area ga on stock.goods_area_code = ga.goods_area_code and ga.org_code = stock.org_code and ga.active = 'Y'
		<where>
				<![CDATA[stock.plan_start_time < To_date(to_char(sysdate-1,'yyyy-mm-dd hh24:mi:ss'),'yyyy-mm-dd hh24:mi:ss')]]>
      			and pro.priority = 'NORMAL' and pro.levels = 3
      			<![CDATA[ and pro.seq <7 ]]>
           		and stock.IN_STOCK_TIME between #{beginInStorageTime} and #{endInStorageTime} 
			  	and (
			<foreach collection="arriveDeptList" item="item" separator="or">
						stock.next_org_code = #{item,jdbcType=VARCHAR}
			</foreach>
			  	)
			  	and (select count(0) from bse.t_bas_sales_department a where a.code=stock.next_org_code and a.active='Y' and a.station='Y') = 0
			  	and stock.ORG_CODE = #{currentDeptCode}
  	           	and (ga.goods_area_type not in (
			<foreach collection="abnormalGoodsAreaTypeList" item="item" separator=",">
								  #{item,jdbcType=VARCHAR}
			</foreach>
					  		 ) or ga.goods_area_type is null)
			<if test="transPropertyList != null and transPropertyList.size() != 0  and !transPropertyList.get(0).equals('ALL')">
		  		and waybill.product_code in
		  		 (
		  		 	<foreach collection="transPropertyList" item="item" separator=",">
				  		#{item,jdbcType=VARCHAR}
					</foreach>
		  		 )
			</if>
			<if test="transType != null and transType != ''  and transType != 'ALL'">
			  		and pro.transport_type = #{transType}
			</if>
			<if test="goodsType != null and goodsType != ''  and goodsType != 'ALL'">
			  		and waybill.goods_type_code = #{goodsType}
			</if>
			<if test="waybillNo != null and waybillNo != ''">
			  		and waybill.waybill_No = #{waybillNo}
			</if>
		</where>
			
			union all
		
		 /*非必走货**/
		  select stock.waybill_no waybillNo,
		  					1 isPriorityGoods,
			                waybill.goods_name goodsName,
			                'N' isJoinCar,
			                waybill.goods_package packing,
			                pro.code transPropertyCode,
	                        pro.name transProperty,
	                        pro.seq seq,
			                round((waybill.goods_volume_total / waybill.goods_qty_total)*stock.stock_goods_qty,3) cubage,
			                round((waybill.goods_weight_total / waybill.goods_qty_total)*stock.stock_goods_qty,3) weight,
			                stock.stock_goods_qty pieces,
			                stock.in_stock_time instorageDate,
			                stock.next_org_code nextOrgCode,
			                stock.org_code currentDeptCode,
			                waybill.insurance_amount / 100 insuranceValue,
			                waybill.bill_time waybillDate,
			                waybill.cod_amount / 100 codAmount,
			                waybill.IS_WHOLE_VEHICLE isCarLoad,
			                waybill.goods_qty_total waybillPieces,
			                waybill.precious_goods isPreciousGoods,
			                waybill.inner_notes waybillNote,
			                waybill.Receive_Org_Code origOrgCode,
			                md.name arriveDept,
			                mdn.name receiveOrgName,
			                'Y' isFastGoods,
			                ga.goods_area_code goodsAreaCode,
			                ga.goods_area_type goodsAreaType,
			                ga.goods_area_name goodsAreaName,
			                waybill.Receive_Customer_Name consignee,
			                waybill.Target_Org_Code destination,
			                waybill.Total_Fee / 100 waybillFee,
			                trunc((sysdate - cast(stock.in_stock_time as date)) * 24, 1) as inStockDuration
			           from tfr.t_opt_waybill_stock stock
			           left join pkp.t_srv_waybill waybill on stock.waybill_no = waybill.waybill_no and waybill.active = 'Y'
			           left join bse.mv_dest_net md on waybill.CUSTOMER_PICKUP_ORG_CODE = md.code and md.active = 'Y'
			           left join bse.mv_dest_net mdn on waybill.RECEIVE_ORG_CODE = mdn.code  and mdn.active = 'Y'
			           left join pkp.t_srv_product pro on waybill.product_code = pro.code and pro.active = 'Y' 
			           left join bse.t_bas_goods_area ga on stock.goods_area_code = ga.goods_area_code and ga.org_code = stock.org_code and ga.active = 'Y'
		<where>
		<![CDATA[((stock.plan_start_time >= To_date(to_char(sysdate,'yyyy-mm-dd hh24:mi:ss'),'yyyy-mm-dd hh24:mi:ss')) or 
		(stock.plan_start_time < To_date(to_char(sysdate,'yyyy-mm-dd hh24:mi:ss'),'yyyy-mm-dd hh24:mi:ss') and pro.seq >= 3))]]> 
			           		and pro.priority = 'FAST' and pro.levels = 3
			           		and stock.IN_STOCK_TIME between #{beginInStorageTime} and #{endInStorageTime} 
						  	and (
			<foreach collection="arriveDeptList" item="item" separator="or">
									stock.next_org_code = #{item,jdbcType=VARCHAR}
			</foreach>
						  	)
						  	and stock.ORG_CODE = #{currentDeptCode}
						  	and (ga.goods_area_type not in (
			<foreach collection="abnormalGoodsAreaTypeList" item="item" separator=",">
								  #{item,jdbcType=VARCHAR}
			</foreach>
					  		  ) or ga.goods_area_type is null)
			<if test="transPropertyList != null and transPropertyList.size() != 0  and !transPropertyList.get(0).equals('ALL')">
						  		and waybill.product_code in
						  		 (
						  		 	<foreach collection="transPropertyList" item="item" separator=",">
								  		#{item,jdbcType=VARCHAR}
									</foreach>
						  		 )
			</if>
			<if test="transType != null and transType != ''  and transType != 'ALL'">
						  		and pro.transport_type = #{transType}
			</if>
			<if test="goodsType != null and goodsType != ''  and goodsType != 'ALL'">
						  		and waybill.goods_type_code = #{goodsType}
			</if>
			<if test="waybillNo != null and waybillNo != ''">
						  		and waybill.waybill_No = #{waybillNo}
			</if>
		</where>
    union all

select stock.waybill_no waybillNo,
				1 isPriorityGoods,
                waybill.goods_name goodsName,
                'N' isJoinCar,
                waybill.goods_package packing,
                pro.code transPropertyCode,
                pro.name transProperty,
                pro.seq seq,
                round((waybill.goods_volume_total / waybill.goods_qty_total)*stock.stock_goods_qty,3) cubage,
                round((waybill.goods_weight_total / waybill.goods_qty_total)*stock.stock_goods_qty,3) weight,
                stock.stock_goods_qty pieces,
                stock.in_stock_time instorageDate,
                stock.next_org_code nextOrgCode,
                stock.org_code currentDeptCode,
                waybill.insurance_amount / 100 insuranceValue,
                waybill.bill_time waybillDate,
                waybill.cod_amount / 100 codAmount,
                waybill.IS_WHOLE_VEHICLE isCarLoad,
                waybill.goods_qty_total waybillPieces,
                waybill.precious_goods isPreciousGoods,
                waybill.inner_notes waybillNote,
                waybill.Receive_Org_Code origOrgCode,
                md.name arriveDept,
                mdn.name receiveOrgName,
                'N' isFastGoods,
                ga.goods_area_code goodsAreaCode,
                ga.goods_area_type goodsAreaType,
                ga.goods_area_name goodsAreaName,
                waybill.Receive_Customer_Name consignee,
                waybill.Target_Org_Code destination,
                waybill.Total_Fee / 100 waybillFee,
                trunc((sysdate - cast(stock.in_stock_time as date)) * 24, 1) as inStockDuration
           from tfr.t_opt_waybill_stock stock
           left join pkp.t_srv_waybill waybill on stock.waybill_no = waybill.waybill_no and waybill.active = 'Y'
           left join bse.mv_dest_net md on waybill.CUSTOMER_PICKUP_ORG_CODE = md.code and md.active = 'Y'
           left join bse.mv_dest_net mdn on waybill.RECEIVE_ORG_CODE = mdn.code  and mdn.active = 'Y'
           left join pkp.t_srv_product pro on waybill.product_code = pro.code and pro.active = 'Y' 
           left join bse.t_bas_goods_area ga on stock.goods_area_code = ga.goods_area_code and ga.org_code = stock.org_code and ga.active = 'Y'
		<where>
		<![CDATA[((stock.plan_start_time >= To_date(to_char(sysdate-1,'yyyy-mm-dd hh24:mi:ss'),'yyyy-mm-dd hh24:mi:ss')) or 
		(stock.plan_start_time < To_date(to_char(sysdate,'yyyy-mm-dd hh24:mi:ss'),'yyyy-mm-dd hh24:mi:ss') and pro.seq >= 7)
		or (stock.plan_start_time >= To_date(to_char(sysdate,'yyyy-mm-dd hh24:mi:ss'),'yyyy-mm-dd hh24:mi:ss') and pro.seq >= 7))]]>
      			and pro.priority = 'NORMAL' and pro.levels = 3
           		and stock.IN_STOCK_TIME between #{beginInStorageTime} and #{endInStorageTime} 
			  	and (
			<foreach collection="arriveDeptList" item="item" separator="or">
						stock.next_org_code = #{item,jdbcType=VARCHAR}
			</foreach>
			  	)
			  	and stock.ORG_CODE = #{currentDeptCode}
  	           and (ga.goods_area_type not in (
			<foreach collection="abnormalGoodsAreaTypeList" item="item" separator=",">
								  #{item,jdbcType=VARCHAR}
			</foreach>
					  		  ) or ga.goods_area_type is null)
			<if test="transPropertyList != null and transPropertyList.size() != 0  and !transPropertyList.get(0).equals('ALL')">
						  		and waybill.product_code in
						  		 (
						  		 	<foreach collection="transPropertyList" item="item" separator=",">
								  		#{item,jdbcType=VARCHAR}
									</foreach>
						  		 )
			</if>
			<if test="transType != null and transType != ''  and transType != 'ALL'">
			  		and pro.transport_type = #{transType}
			</if>
			<if test="goodsType != null and goodsType != ''  and goodsType != 'ALL'">
			  		and waybill.goods_type_code = #{goodsType}
			</if>
			<if test="waybillNo != null and waybillNo != ''">
			  		and waybill.waybill_No = #{waybillNo}
			</if>
		</where>
			/*合车表数据**/
			union all 
			
			select  tl.waybill_no waybillNo,
		        2 isPriorityGoods,
		        waybill.goods_name goodsName,
		        'Y' isJoinCar,
		        waybill.goods_package packing,
		        pro.code transPropertyCode,
		        pro.name transProperty,
		        pro.seq seq,
		        round((waybill.goods_volume_total / waybill.goods_qty_total) *
		                     (select count(*)
		                        from tfr.t_opt_together_list t 
		                        left join bse.t_bas_goods_area goo
		                             on t.new_goods_area_code = goo.goods_area_code and goo.active = 'Y' 
		                       where t.org_code = #{currentDeptCode}
		                       and (
		<foreach collection="arriveDeptList" item="item" separator="or">
										goo.arrive_region_code = #{item,jdbcType=VARCHAR}
		</foreach>
							  	)
		                       and t.waybill_no = waybill.waybill_no),
		                     2) cubage,
		   round((waybill.goods_weight_total / waybill.goods_qty_total) *
		                     (select count(*)
		                        from tfr.t_opt_together_list t 
		                        left join bse.t_bas_goods_area goo
		                             on t.new_goods_area_code = goo.goods_area_code and goo.active = 'Y' 
		                       where t.org_code = #{currentDeptCode}
		                       and (
		<foreach collection="arriveDeptList" item="item" separator="or">
										goo.arrive_region_code = #{item,jdbcType=VARCHAR}
		</foreach>
							  	)
		                       and t.waybill_no = waybill.waybill_no),
		                     2)  weight,
		          (select count(*)
		                        from tfr.t_opt_together_list t 
		                        left join bse.t_bas_goods_area goo
		                             on t.new_goods_area_code = goo.goods_area_code and goo.active = 'Y' 
		                       where t.org_code = #{currentDeptCode}
		                       and (
		<foreach collection="arriveDeptList" item="item" separator="or">
										goo.arrive_region_code = #{item,jdbcType=VARCHAR}
		</foreach>
							  	)
		                       and t.waybill_no = waybill.waybill_no) pieces,
		           stock.in_stock_time instorageDate,
		           goo.arrive_region_code nextOrgCode,
		           stock.org_code currentDeptCode,
		           waybill.insurance_amount / 100 insuranceValue,
		           waybill.bill_time waybillDate,
		           waybill.cod_amount / 100 codAmount,
		           waybill.IS_WHOLE_VEHICLE isCarLoad,
		           waybill.goods_qty_total waybillPieces,
		           waybill.precious_goods isPreciousGoods,
		           waybill.inner_notes waybillNote,
		           waybill.Receive_Org_Code origOrgCode,
		           md.name arriveDept,
		           mdn.name receiveOrgName,
		           case pro.priority when 'FAST' then 'Y' else 'N' end isFastGoods,
		           ga.goods_area_code goodsAreaCode,
		           ga.goods_area_type goodsAreaType,
		           ga.goods_area_name goodsAreaName,
		           waybill.Receive_Customer_Name consignee,
		           waybill.Target_Org_Code destination,
		           waybill.Total_Fee / 100 waybillFee,
		           trunc((sysdate - cast(stock.in_stock_time as date)) * 24, 1) as inStockDuration
		from (select waybill_no,
               new_goods_area_code,
               orig_goods_area_code,
               org_code
          from (select t.waybill_no,
                       t.new_goods_area_code,
                       t.orig_goods_area_code,
                       t.org_code,
                       row_number() OVER(PARTITION BY waybill_no,NEW_GOODS_AREA_CODE order by id) as row_flag
                  from tfr.t_opt_together_list t where t.org_code = #{currentDeptCode}) temp
         where temp.row_flag = '1') tl
		left join pkp.t_srv_waybill waybill
		     on tl.waybill_no = waybill.waybill_no and waybill.active = 'Y'
		left join pkp.t_srv_product pro
		     on waybill.product_code = pro.code and pro.active = 'Y' and pro.levels = 3
		left join tfr.t_opt_waybill_stock stock
		     on tl.waybill_no = stock.waybill_no and stock.org_code = tl.org_code and stock.goods_area_code = tl.orig_goods_area_code
		left join bse.t_bas_goods_area ga
		     on ga.goods_area_code = tl.orig_goods_area_code and ga.active = 'Y' and ga.org_code = #{currentDeptCode}
		left join bse.t_bas_goods_area goo
		     on tl.new_goods_area_code = goo.goods_area_code and goo.active = 'Y'  and goo.org_code = #{currentDeptCode}
		left join bse.mv_dest_net md
		            on waybill.CUSTOMER_PICKUP_ORG_CODE = md.code
		           and md.active = 'Y'
		left join bse.mv_dest_net mdn
		            on waybill.RECEIVE_ORG_CODE = mdn.code
		           and mdn.active = 'Y'
		<where>
           		stock.IN_STOCK_TIME between #{beginInStorageTime} and #{endInStorageTime} 
			  	and (
			<foreach collection="arriveDeptList" item="item" separator="or">
						goo.arrive_region_code = #{item,jdbcType=VARCHAR}
			</foreach>
			  	)
			  	and stock.ORG_CODE = #{currentDeptCode}
			<if test="transPropertyList != null and transPropertyList.size() != 0  and !transPropertyList.get(0).equals('ALL')">
						  		and waybill.product_code in
						  		 (
						  		 	<foreach collection="transPropertyList" item="item" separator=",">
								  		#{item,jdbcType=VARCHAR}
									</foreach>
						  		 )
			</if>
			<if test="transType != null and transType != ''  and transType != 'ALL'">
			  		and pro.transport_type = #{transType}
			</if>
			<if test="goodsType != null and goodsType != ''  and goodsType != 'ALL'">
			  		and waybill.goods_type_code = #{goodsType}
			</if>
			<if test="waybillNo != null and waybillNo != ''">
			  		and waybill.waybill_No = #{waybillNo}
			</if>
		</where>
		)
		<where>
		pieces <![CDATA[>]]> 0 
		</where>
		  order by isPriorityGoods,seq,inStockDuration
		  )
	</select>
	
	<!--快速添加运单，根据运单号获取运单库存，包括合车表的数据 -->
	<select id="queryWaybillStockByWaybillNo" resultMap="waybillStockResultMap" 
		parameterType="com.deppon.foss.module.transfer.load.api.shared.dto.QueryWaybillForHandOverBillConditionDto">
		<!--库存运单-->
		     select stock.waybill_no waybillNo,
                 waybill.goods_name goodsName,
                 'N' isJoinCar,
                 waybill.goods_package packing,
                 pro.code transPropertyCode,
                 pro.name transProperty,
                 pro.seq seq,
                 round((waybill.goods_volume_total / waybill.goods_qty_total) *
                       stock.stock_goods_qty,
                       3) cubage,
               round((waybill.goods_weight_total / waybill.goods_qty_total) *
                       stock.stock_goods_qty,
                       3) weight,
                 stock.stock_goods_qty pieces,
                 stock.in_stock_time instorageDate,
                 stock.next_org_code nextOrgCode,
                 stock.org_code currentDeptCode,
                 waybill.insurance_amount / 100 insuranceValue,
                 waybill.bill_time waybillDate,
                 waybill.cod_amount / 100 codAmount,
                 waybill.IS_WHOLE_VEHICLE isCarLoad,
                 waybill.goods_qty_total waybillPieces,
                 waybill.precious_goods isPreciousGoods,
                 waybill.inner_notes waybillNote,
                 waybill.Receive_Org_Code origOrgCode,
                 md.name arriveDept,
                 mdn.name receiveOrgName,
                 case pro.priority when 'FAST' then 'Y' else 'N' end isFastGoods,
                 ga.goods_area_code goodsAreaCode,
                 ga.goods_area_type goodsAreaType,
                 ga.goods_area_name goodsAreaName,
                 waybill.Receive_Customer_Name consignee,
                 waybill.Target_Org_Code destination,
                 waybill.Total_Fee / 100 waybillFee 
           from tfr.t_opt_waybill_stock stock
           left join pkp.t_srv_waybill waybill
             on stock.waybill_no = waybill.waybill_no
            and waybill.active = 'Y'
           left join bse.mv_dest_net md
             on waybill.CUSTOMER_PICKUP_ORG_CODE = md.code
            and md.active = 'Y'
           left join bse.mv_dest_net mdn
             on waybill.RECEIVE_ORG_CODE = mdn.code
            and mdn.active = 'Y'
           left join pkp.t_srv_product pro
             on waybill.product_code = pro.code
            and pro.active = 'Y' and pro.levels = 3
           left join bse.t_bas_goods_area ga
             on stock.goods_area_code = ga.goods_area_code
            and ga.org_code = stock.org_code
            and ga.active = 'Y'
            and ga.goods_area_type not in (
		<foreach collection="abnormalGoodsAreaTypeList" item="item" separator=",">
								  #{item,jdbcType=VARCHAR}
		</foreach>
					  		  )
          WHERE 
		(<foreach collection="arriveDeptList" item="item" separator="or">
					stock.next_org_code = #{item,jdbcType=VARCHAR}
		</foreach>)
            and stock.ORG_CODE = #{currentDeptCode}
            and waybill.waybill_No = #{waybillNo}
        
		<!--合车表运单 -->
         union all
         select tl.waybill_no waybillNo,
                waybill.goods_name goodsName,
                'Y' isJoinCar,
                waybill.goods_package packing,
                pro.code transPropertyCode,
                pro.name transProperty,
                pro.seq seq,
                round((waybill.goods_volume_total / waybill.goods_qty_total) *
                      (select count(*)
                         from tfr.t_opt_together_list t
                         left join bse.t_bas_goods_area goo
                           on t.new_goods_area_code = goo.goods_area_code
                          and goo.active = 'Y'
                        where t.org_code = #{currentDeptCode}
                          and (
		<foreach collection="arriveDeptList" item="item" separator="or">
								goo.arrive_region_code = #{item,jdbcType=VARCHAR}
		</foreach>
						  )
                          and t.waybill_no = waybill.waybill_no),
                      2) cubage,
                  round((waybill.goods_weight_total / waybill.goods_qty_total) *
                      (select count(*)
                         from tfr.t_opt_together_list t
                         left join bse.t_bas_goods_area goo
                           on t.new_goods_area_code = goo.goods_area_code
                          and goo.active = 'Y'
                        where t.org_code = #{currentDeptCode}
                          and (
		<foreach collection="arriveDeptList" item="item" separator="or">
								goo.arrive_region_code = #{item,jdbcType=VARCHAR}
		</foreach>
						  )
                          and t.waybill_no = waybill.waybill_no),
                      2) weight,
                (select count(*)
                   from tfr.t_opt_together_list t
                   left join bse.t_bas_goods_area goo
                     on t.new_goods_area_code = goo.goods_area_code
                    and goo.active = 'Y'
                  where t.org_code = #{currentDeptCode}
                    and (
		<foreach collection="arriveDeptList" item="item" separator="or">
							goo.arrive_region_code = #{item,jdbcType=VARCHAR}
		</foreach>
					)
                    and t.waybill_no = waybill.waybill_no) pieces,
                stock.in_stock_time instorageDate,
                goo.arrive_region_code nextOrgCode,
                stock.org_code currentDeptCode,
                waybill.insurance_amount / 100 insuranceValue,
                waybill.bill_time waybillDate,
                waybill.cod_amount / 100 codAmount,
                waybill.IS_WHOLE_VEHICLE isCarLoad,
                waybill.goods_qty_total waybillPieces,
                waybill.precious_goods isPreciousGoods,
                waybill.inner_notes waybillNote,
                waybill.Receive_Org_Code origOrgCode,
                md.name arriveDept,
                mdn.name receiveOrgName,
                case pro.priority when 'FAST' then 'Y' else 'N' end isFastGoods,
                ga.goods_area_code goodsAreaCode,
                ga.goods_area_type goodsAreaType,
                ga.goods_area_name goodsAreaName,
                waybill.Receive_Customer_Name consignee,
                waybill.Target_Org_Code destination,
                waybill.Total_Fee / 100 waybillFee 
           from (select waybill_no,
                        new_goods_area_code,
                        orig_goods_area_code,
                        org_code
                   from (select t.waybill_no,
                                t.new_goods_area_code,
                                t.orig_goods_area_code,
                                t.org_code,
                                row_number() OVER(PARTITION BY waybill_no, NEW_GOODS_AREA_CODE order by id) as row_flag
                           from tfr.t_opt_together_list t
                          where t.org_code = #{currentDeptCode}) temp
                  where temp.row_flag = '1') tl
           left join pkp.t_srv_waybill waybill
             on tl.waybill_no = waybill.waybill_no
            and waybill.active = 'Y'
           left join pkp.t_srv_product pro
             on waybill.product_code = pro.code
            and pro.active = 'Y' and pro.levels = 3
           left join tfr.t_opt_waybill_stock stock
             on tl.waybill_no = stock.waybill_no
            and stock.org_code = tl.org_code
            and stock.goods_area_code = tl.orig_goods_area_code
           left join bse.t_bas_goods_area ga
             on ga.goods_area_code = tl.orig_goods_area_code
            and ga.active = 'Y'
            and ga.org_code = #{currentDeptCode}
           left join bse.t_bas_goods_area goo
             on tl.new_goods_area_code = goo.goods_area_code
            and goo.active = 'Y'
            and goo.org_code = #{currentDeptCode}
           left join bse.mv_dest_net md
             on waybill.CUSTOMER_PICKUP_ORG_CODE = md.code
            and md.active = 'Y'
           left join bse.mv_dest_net mdn
             on waybill.RECEIVE_ORG_CODE = mdn.code
            and mdn.active = 'Y'
          WHERE stock.ORG_CODE = #{currentDeptCode}
            and waybill.waybill_No = #{waybillNo}
	</select>
	
	<!--快速添加运单，根据运单号获取运单库存，去除“下一部门”过滤 -->
	<select id="queryWaybillStockByWaybillNoWithoutNextOrg" resultMap="waybillStockResultMap" 
		parameterType="com.deppon.foss.module.transfer.load.api.shared.dto.QueryWaybillForHandOverBillConditionDto">
		     select stock.waybill_no waybillNo,
                 waybill.goods_name goodsName,
                 'N' isJoinCar,
                 waybill.goods_package packing,
                 pro.code transPropertyCode,
                 pro.name transProperty,
                 pro.seq seq,
                 round((waybill.goods_volume_total / waybill.goods_qty_total) *
                       stock.stock_goods_qty,
                       3) cubage,
                 round((waybill.goods_weight_total / waybill.goods_qty_total) *
                       stock.stock_goods_qty,
                       3) weight,
                 stock.stock_goods_qty pieces,
                 stock.in_stock_time instorageDate,
                 stock.next_org_code nextOrgCode,
                 stock.org_code currentDeptCode,
                 waybill.insurance_amount / 100 insuranceValue,
                 waybill.bill_time waybillDate,
                 waybill.cod_amount / 100 codAmount,
                 waybill.IS_WHOLE_VEHICLE isCarLoad,
                 waybill.goods_qty_total waybillPieces,
                 waybill.precious_goods isPreciousGoods,
                 waybill.inner_notes waybillNote,
                 waybill.Receive_Org_Code origOrgCode,
                 md.name arriveDept,
                 mdn.name receiveOrgName,
                 case pro.priority when 'FAST' then 'Y' else 'N' end isFastGoods,
                 ga.goods_area_code goodsAreaCode,
                 ga.goods_area_type goodsAreaType,
                 ga.goods_area_name goodsAreaName,
                 waybill.Receive_Customer_Name consignee,
                 waybill.Target_Org_Code destination,
                 waybill.Total_Fee / 100 waybillFee 
           from tfr.t_opt_waybill_stock stock
           left join pkp.t_srv_waybill waybill
             on stock.waybill_no = waybill.waybill_no
            and waybill.active = 'Y'
           left join bse.mv_dest_net md
             on waybill.CUSTOMER_PICKUP_ORG_CODE = md.code
            and md.active = 'Y'
           left join bse.mv_dest_net mdn
             on waybill.RECEIVE_ORG_CODE = mdn.code
            and mdn.active = 'Y'
           left join pkp.t_srv_product pro
             on waybill.product_code = pro.code
            and pro.active = 'Y' and pro.levels = 3
           left join bse.t_bas_goods_area ga
             on stock.goods_area_code = ga.goods_area_code
            and ga.org_code = stock.org_code
            and ga.active = 'Y'
            and ga.goods_area_type not in (
		<foreach collection="abnormalGoodsAreaTypeList" item="item" separator=",">
								  #{item,jdbcType=VARCHAR}
		</foreach>
					  		  )
          WHERE stock.ORG_CODE = #{currentDeptCode}
            and waybill.waybill_No = #{waybillNo}
	</select>
	
	<!-- 用于查询交接运单界面，批量查询在途运单信息 -->
	<select id="queryEnRouteWaybillList" resultMap="waybillStockResultMap" 
		parameterType="com.deppon.foss.module.transfer.load.api.shared.dto.QueryWaybillForHandOverBillConditionDto">
		select 
		      hd.id id,
		      hd.waybill_no waybillNo,
		      hd.handover_no handOverBillNo,
		      hd.goods_name goodsName,
		      hd.packing packing,
		      hd.BE_JOIN_CAR isJoinCar,
		      taskDetail.Plan_Arrive_Time planArriveTime,
		      hd.receive_org_name receiveOrgName,
		      hd.handover_volume cubage,
		      hd.handover_weight  weight,
		      hd.handover_goods_qty pieces,
		      hd.declaration_value/100 insuranceValue,
		      hd.reach_org_name arriveDept,
		      waybill.bill_time waybillDate,
		      waybill.Receive_Customer_Name consignee,
		      waybill.cod_amount/100 codAmount,
		      waybill.IS_WHOLE_VEHICLE isCarLoad,
		      hd.dest_region_name destination,
		      waybill.product_code transPropertyCode,
      		  p.name transProperty,
		      hd.goods_qty waybillPieces,
		      hd.waybill_notes waybillNote,
		      hd.waybill_fee/100 waybillFee,
		      hd.be_valuable isPreciousGoods 
		       from tfr.t_opt_handoverbill_detail hd
		      left join tfr.t_opt_handoverbill hb
		      on hd.handover_no = hb.handover_no
		      left join pkp.t_srv_waybill waybill
		      on hd.waybill_no = waybill.waybill_no and waybill.active = 'Y'
		      left join pkp.t_srv_product p 
		      on waybill.product_code = p.code and p.active = 'Y'
		      left join tfr.T_OPT_TRUCK_TASK_BILL taskBill
		      on taskBill.Bill_No = hb.handover_no
		      left join tfr.T_OPT_TRUCK_TASK_DETAIL taskDetail
		      on taskDetail.Id = taskBill.Truck_Task_Detail_Id
		<where>
		    	hb.dest_org_code = #{currentDeptCode,jdbcType=VARCHAR} 
		    	and (hb.handoverbill_state = 20 
		          or hb.handoverbill_state = 21
		          or hb.handoverbill_state = 30) 
		        and taskDetail.Status = 'ONTHEWAY' 
<!-- 		    and waybill.customer_pickup_org_code in  -->
<!-- 			<foreach collection="arriveDeptList" item="item" separator="," close=")" open="("> -->
<!--                     	#{item} -->
<!-- 			</foreach> -->
			
				and (
				<if test="arriveDeptList != null and arriveDeptList.size() != 0 ">
					<foreach collection="arriveDeptList" item="item" separator="or">
						waybill.customer_pickup_org_code = #{item,jdbcType=VARCHAR}
					</foreach>
				</if>    
					)
			<if test="transType != null and transType != ''  and transType != 'ALL'">
		  			and p.transport_type = #{transType,jdbcType=VARCHAR}
			</if>
			<if test="waybillNo != null and waybillNo != ''">
		  			and hd.waybill_no = #{waybillNo,jdbcType=VARCHAR}
			</if>
			<if test="transPropertyList != null and transPropertyList.size() != 0  and !transPropertyList.get(0).equals('ALL')">
			  		and waybill.product_code in
			  		 	<foreach collection="transPropertyList" item="item" separator="," open="(" close=")">
					  		#{item,jdbcType=VARCHAR}
						</foreach>
			</if>    
		</where>	
	</select>
	<!-- 用于查询交接运单界面，查询在途运单条数 -->
	<select id="getEnRouteWaybillCount" resultType="Long" 
		parameterType="com.deppon.foss.module.transfer.load.api.shared.dto.QueryWaybillForHandOverBillConditionDto">
		select 
           count(*)
           from tfr.t_opt_handoverbill_detail hd
          left join tfr.t_opt_handoverbill hb
          on hd.handover_no = hb.handover_no
          left join pkp.t_srv_waybill waybill
          on hd.waybill_no = waybill.waybill_no and waybill.active = 'Y'
          left join pkp.t_srv_product p 
          on waybill.product_code = p.code and p.active = 'Y'
          left join tfr.T_OPT_TRUCK_TASK_BILL taskBill
          on taskBill.Bill_No = hb.handover_no
          left join tfr.T_OPT_TRUCK_TASK_DETAIL taskDetail
          on taskDetail.Id = taskBill.Truck_Task_Detail_Id
		<where>
          hb.dest_org_code = #{currentDeptCode} 
          and (hb.handoverbill_state = 20 
              or hb.handoverbill_state = 21
              or hb.handoverbill_state = 30) 
            and taskDetail.Status = 'ONTHEWAY' 
<!--             and waybill.customer_pickup_org_code in  -->
<!-- 			<foreach collection="arriveDeptList" item="item" separator="," close=")" open="("> -->
<!--                       #{item} -->
<!-- 			</foreach> -->
			and (
				<foreach collection="arriveDeptList" item="item" separator="or">
					waybill.customer_pickup_org_code = #{item,jdbcType=VARCHAR}
				</foreach>
				)
			<if test="transType != null and transType != ''  and transType != 'ALL'">
            and p.transport_type = #{transType}
			</if>
			<if test="waybillNo != null and waybillNo != ''">
            and hd.waybill_no = #{waybillNo}
			</if>
			<if test="transPropertyList != null and transPropertyList.size() != 0  and !transPropertyList.get(0).equals('ALL')">
						  		and waybill.product_code in
						  		 (
						  		 	<foreach collection="transPropertyList" item="item" separator=",">
								  		#{item,jdbcType=VARCHAR}
									</foreach>
						  		 )
			</if>    
		</where>
	</select>
	<!-- 查询交接运单，查询在途运单号，根据交接单号、运单号获取其下流水号列表 -->
	<select id="queryEnRouteSerialNoStockList" parameterType="HashMap" 
		resultMap="getHandOverBillSerialNoDetailsByWayBillNoResultMap">
	<![CDATA[
		select 
		waybill.id superId,
		serialNo.serial_no serialNo,
		serialNo.create_time handOverTime,
		serialNo.orig_org_code origOrgCode,
		serialNo.handoverbill_no handOverBillNo,
		serialNo.waybill_no waybillNo,
		round(nvl(bss.weight ,wb.goods_weight_total/wb.goods_qty_total),3) weight,
	    round(nvl(bss.volumn ,wb.goods_volume_total/wb.goods_qty_total),3) volumn,
	    nvl2(bss.id ,'Y','N') beScan,
	    wb.product_code productCode,
		0 isInStorage  
		from tfr.t_opt_handoverbill_serialno serialNo
		left join tfr.t_opt_handoverbill_detail waybill
		on (serialNo.Waybill_No = waybill.waybill_no 
		and waybill.Waybill_No = #{waybillNo} 
		and waybill.Handover_No = #{handOverBillNo}
		and (serialNo.pre_handover_status != 'PRE_HANDOVER'
					 or serialNo.pre_handover_status is null))
		left  JOIN pkp.t_srv_waybill wb ON wb.waybill_no= waybill.waybill_no AND wb.active='Y'
        left  JOIN tfr.t_opt_bcmach_sortscan bss on bss.waybill_no = serialNo.waybill_no 
                                                  and serialNo.serial_no=bss.serial_no 					 
	]]>
		<where>
			serialNo.Waybill_No = #{waybillNo} 
			and serialNo.Handoverbill_No = #{handOverBillNo}
			and (serialNo.pre_handover_status != 'PRE_HANDOVER'
                     or serialNo.pre_handover_status is null)
		</where>
	</select>

	<!--查询交接运单界面，双击某运单，查询本部库存的该运单的所有流水号 -->
	<select id="querySerialNoStockList" parameterType="com.deppon.foss.module.transfer.load.api.shared.dto.QuerySerialNoListForWaybillConditionDto"
		resultMap="serialNoStockResultMap">
		select /** FOSS-中转-装车-交接单-查询交接运单界面，双击某运单，查询本部库存的该运单的所有流水号 **/
			t.waybill_no waybillNo,
            t.serial_no serialNo,
            t.org_code storageDept,
            t.in_stock_time instorageDate,
            1 isInStorage,
            round(nvl(bss.weight ,wb.goods_weight_total/wb.goods_qty_total),3) weight,
            round(nvl(bss.volumn ,wb.goods_volume_total/wb.goods_qty_total),3) volumn,
            nvl2(bss.id ,'Y','N') beScan,
            wb.product_code productCode,
            case t.pre_handover_status when 
         	'PRE_HANDOVER' then 'Y' else 'N' end isPreHandOver,
            'N' isJoinCar
          from tfr.t_opt_STOCK t 
          left join bse.t_bas_goods_area ga on t.goods_area_code = ga.goods_area_code and ga.org_code = t.org_code and ga.active = 'Y'
          left  JOIN pkp.t_srv_waybill wb ON wb.waybill_no= t.waybill_no AND wb.active='Y'
          left  JOIN tfr.t_opt_bcmach_sortscan bss on bss.waybill_no = t.waybill_no   and t.serial_no=bss.serial_no 
		<where>
			t.waybill_no = #{waybillNo} 
			<if test="isQuickAdd != null">
            		and t.PRE_HANDOVER_STATUS is null 
			</if>
			<if test="nextDeptCodeList != null and nextDeptCodeList.size() != 0">
            	and  
				(<foreach collection="nextDeptCodeList" item="item" separator="or">
						t.next_org_code = #{item,jdbcType=VARCHAR}
				</foreach>)
			</if>
			and t.org_code = #{currentDeptCode} 
			and (ga.goods_area_type not in (
			<foreach collection="abnormalGoodsAreaTypeList" item="item" separator=",">
					  #{item,jdbcType=VARCHAR}
			</foreach>
			) or ga.goods_area_type is null)
		</where>
			order by t.in_stock_time 
	</select>
	
	<!--查询交接运单界面，双击某合车运单，查询本部库存的该合车运单的所有流水号 -->
	<select id="queryJoinCarSerialNoStockList" parameterType="com.deppon.foss.module.transfer.load.api.shared.dto.QuerySerialNoListForWaybillConditionDto"
		resultMap="serialNoStockResultMap">
		
			select /** FOSS-中转-装车-交接单-查询交接运单界面，双击某合车运单，查询本部库存的该合车运单的所有流水号 **/
		      tl.waybill_no waybillNo,
		      tl.serial_no serialNo,
		      tl.org_code storageDept,
		      stock.in_stock_time instorageDate,
		      round(nvl(bss.weight ,wb.goods_weight_total/wb.goods_qty_total),3) weight,
              round(nvl(bss.volumn ,wb.goods_volume_total/wb.goods_qty_total),3) volumn,
	          nvl2(bss.id ,'Y','N') beScan,
		      1 isInStorage,
		      wb.product_code productCode,
		      case stock.pre_handover_status when 
	         'PRE_HANDOVER' then 'Y' else 'N' end isPreHandOver,
		      'Y' isJoinCar
		      from tfr.t_opt_together_list tl 
		      left join tfr.t_opt_stock stock  on tl.waybill_no = stock.waybill_no and tl.serial_no = stock.serial_no
		      		 and tl.org_code = stock.org_code
		           <if test="isQuickAdd != null">
		           		and stock.PRE_HANDOVER_STATUS is null 
					</if>
		     left join bse.t_bas_goods_area ga   on tl.new_goods_area_code = ga.goods_area_code and ga.active = 'Y'
		     left  JOIN pkp.t_srv_waybill wb ON wb.waybill_no= tl.waybill_no AND wb.active='Y'
	         left  JOIN tfr.t_opt_bcmach_sortscan bss on bss.waybill_no = tl.waybill_no and tl.serial_no=bss.serial_no 
			<where>
		    	tl.waybill_no = #{waybillNo} 
		    	<if test="nextDeptCodeList != null and nextDeptCodeList.size() != 0">
			    	and 
					(<foreach collection="nextDeptCodeList" item="item" separator="or">
							ga.arrive_region_code  = #{item,jdbcType=VARCHAR}
					</foreach>)
		    	</if>
	            and tl.org_code = #{currentDeptCode}
			</where>
			
	</select>
	
	<!-- 新增交接单时，插入主表数据 -->
	<insert id="saveHandOverBillBasicInfo"
		parameterType="com.deppon.foss.module.transfer.load.api.shared.domain.HandOverBillEntity">
	<![CDATA[
		 insert into tfr.t_opt_handoverbill(
			ID,
			HANDOVER_NO,
			CREATE_TIME,
			ORIG_ORG_CODE,
			ORIG_ORG_NAME,
			DEST_ORG_CODE,
			DEST_ORG_NAME,
			DRIVER_MOBILE_PHONE,
			DRIVER_CODE,
			DRIVER_NAME,
			VEHICLE_NO,
			LOAD_FINISH_TIME,
			GOODS_TYPE,
			HANDOVER_TYPE,
			CREATE_USER_CODE,
			CREATE_USER_NAME,
			NOTES,
			GOODS_QTY_TOTAL,
			WAYBILL_QTY_TOTAL,
			WEIGHT_TOTAL,
			VOLUME_TOTAL,
			FAST_WAYBILL_QTY,
			LINE_NAME,
			LINE_VIRTUAL_CODE,
			FREQUENCY_NO,
			TRUCKDEPARTPLANDETAIL_ID,
			ISAGENCYVISIT,
			MODIFY_TIME,
			MODIFY_USER_NAME,
			MODIFY_USER_CODE,
			MONEY_TOTAL,
			HANDOVERBILL_STATE,
			BE_CREATE_BY_PDA,
			COD_AMOUNT_TOTAL,
			BE_CAR_LOAD,
			BE_CREATE_TASKTRUCK,
			CURRENCY_CODE,
			AF_GOODS_QTY,
			AF_GOODS_VOLUME,
			AF_GOODS_WEIGHT,
			FLF_GOODS_QTY,
			FLF_GOODS_VOLUME,
			FLF_GOODS_WEIGHT,
			FSF_GOODS_QTY,
			FSF_GOODS_VOLUME,
			FSF_GOODS_WEIGHT,
			BE_PACKAGE,
			transitGoods_type,
			BGFLF_GOODS_QTY,
  			BGFLF_GOODS_VOLUME,
 			BGFLF_GOODS_WEIGHT,
  			BGFSF_GOODS_QTY,
  			BGFSF_GOODS_VOLUME,
			be_Trailer_VehicleNo,
  			BGFSF_GOODS_WEIGHT
		 ) values(
		 #{id,jdbcType=VARCHAR},
		 #{handOverBillNo,jdbcType=VARCHAR},
		 #{createDate,jdbcType=TIMESTAMP},
		 #{departDeptCode,jdbcType=VARCHAR},
		 #{departDept,jdbcType=VARCHAR},
		 #{arriveDeptCode,jdbcType=VARCHAR},
		 #{arriveDept,jdbcType=VARCHAR},
		 #{driverTel,jdbcType=VARCHAR},
		 #{driver,jdbcType=VARCHAR},
		 #{driverName,jdbcType=VARCHAR},
		 #{vehicleNo,jdbcType=VARCHAR},
		 #{loadEndTime,jdbcType=TIMESTAMP},
		 #{goodsType,jdbcType=VARCHAR},
		 #{handOverType,jdbcType=VARCHAR},
		 #{createUserCode,jdbcType=VARCHAR},
		 #{createUserName,jdbcType=VARCHAR},
		 #{note,jdbcType=VARCHAR},
		 #{goodsQtyTotal,jdbcType=DECIMAL},
		 #{waybillQtyTotal,jdbcType=DECIMAL},
		 #{weightTotal,jdbcType=DECIMAL},
		 #{volumeTotal,jdbcType=DECIMAL},
		 #{fastWaybillQty,jdbcType=DECIMAL},
		 #{lineName,jdbcType=VARCHAR},
		 #{lineCode,jdbcType=VARCHAR},
		 #{frequencyNo,jdbcType=VARCHAR},
		 #{truckDepartPlanDetailId,jdbcType=VARCHAR},
		 #{isAgencyVisit,jdbcType=VARCHAR},
		 #{modifyDate,jdbcType=TIMESTAMP},
		 #{modifyUserName,jdbcType=VARCHAR},
		 #{modifyUserCode,jdbcType=VARCHAR},
		 #{moneyTotal,jdbcType=DECIMAL},
		 #{handOverBillState,jdbcType=DECIMAL},
		 #{isCreatedByPDA,jdbcType=VARCHAR},
		 #{codAmountTotal,jdbcType=DECIMAL},
		 #{isCarLoad,jdbcType=VARCHAR},
		 'N',
		 #{currencyCode,jdbcType=VARCHAR},
		 #{waybillQtyAF,jdbcType=DECIMAL},
		 #{goodsVolumeAF,jdbcType=DECIMAL},
		 #{goodsWeightAF,jdbcType=DECIMAL},
		 #{waybillQtyFLF,jdbcType=DECIMAL},
		 #{goodsVolumeFLF,jdbcType=DECIMAL},
		 #{goodsWeightFLF,jdbcType=DECIMAL},
		 #{waybillQtyFSF,jdbcType=DECIMAL},
		 #{goodsVolumeFSF,jdbcType=DECIMAL},
		 #{goodsWeightFSF,jdbcType=DECIMAL},
		 #{bePackage,jdbcType=VARCHAR},
		 #{tranGoodsType,jdbcType=VARCHAR},
		 #{waybillQtyBGFLF,jdbcType=DECIMAL},
		 #{goodsVolumeBGFLF,jdbcType=DECIMAL},
		 #{goodsWeightBGFLF,jdbcType=DECIMAL},
		 #{waybillQtyBGFSF,jdbcType=DECIMAL},
		 #{goodsVolumeBGFSF,jdbcType=DECIMAL},
		 #{beTrailerVehicleNo,jdbcType=VARCHAR},
		 #{goodsWeightBGFSF,jdbcType=DECIMAL}
		 )
	]]>
	</insert>
	<!-- 新增交接单时保存运单信息 -->
	<insert id="saveWaybillList" parameterType="java.util.List">
		begin
		<foreach collection="list" item="item" separator=";">
			insert into
			tfr.t_opt_handoverbill_detail
			(ID,
			HANDOVER_NO,
			WAYBILL_NO,
			TRANSPORT_TYPE,
			HANDOVER_GOODS_QTY,
			HANDOVER_WEIGHT,
			ACTUAL_WEIGHT,
			HANDOVER_VOLUME,
			ACTUAL_VOLUME,
			NOTES,
			GOODS_NAME,
			PACKING,
			WAYBILL_NOTES,
			BE_VALUABLE,
			RECEIVE_ORG_NAME,
			REACH_ORG_NAME,
			RECEIVER_NAME,
			DEST_REGION_NAME,
			GOODS_QTY,
			WAYBILL_FEE,
			DECLARATION_VALUE,
			CURRENCY_CODE,
			CREATE_TIME,
			MODIFY_TIME,
			ORIG_ORG_CODE,
			HANDOVER_TYPE,
			COD_AMOUNT,
			BE_JOIN_CAR,
			BE_FAST_GOODS,
			TRANSPORT_TYPE_CODE
			)
			values
			(#{item.id,jdbcType=VARCHAR},
			#{item.handOverBillNo,jdbcType=VARCHAR},
			#{item.waybillNo,jdbcType=VARCHAR},
			#{item.transProperty,jdbcType=VARCHAR},
			#{item.pieces,jdbcType=DECIMAL},
			#{item.weight,jdbcType=DECIMAL},
			#{item.weightAc,jdbcType=DECIMAL},
			#{item.cubage,jdbcType=DECIMAL},
			#{item.cubageAc,jdbcType=DECIMAL},
			#{item.note,jdbcType=VARCHAR},
			#{item.goodsName,jdbcType=VARCHAR},
			#{item.packing,jdbcType=VARCHAR},
			#{item.waybillNote,jdbcType=VARCHAR},
			#{item.isPreciousGoods,jdbcType=VARCHAR},
			#{item.receiveOrgName,jdbcType=VARCHAR},
			#{item.arriveDept,jdbcType=VARCHAR},
			#{item.consignee,jdbcType=VARCHAR},
			#{item.destination,jdbcType=VARCHAR},
			#{item.waybillPieces,jdbcType=DECIMAL},
			#{item.waybillFee,jdbcType=DECIMAL},
			#{item.insuranceValue,jdbcType=DECIMAL},
			#{item.currencyCode,jdbcType=VARCHAR},
			#{item.createDate,jdbcType=TIMESTAMP},
			#{item.modifyDate,jdbcType=TIMESTAMP},
			#{item.origOrgCode,jdbcType=VARCHAR},
			#{item.handOverType,jdbcType=VARCHAR},
			#{item.codAmount,jdbcType=DECIMAL},
			#{item.isJoinCar,jdbcType=VARCHAR},
			#{item.isFastGoods,jdbcType=VARCHAR},
			#{item.transPropertyCode,jdbcType=VARCHAR}
			)
		</foreach>
		;end;
	</insert>
	<!-- 新增交接单时保存流水号信息 -->
	<insert id="saveSerialNoList" parameterType="java.util.List">
		begin
		<foreach collection="list" item="item" separator=";">
			insert into
			tfr.t_opt_handoverbill_serialno
			(ID,
			SERIAL_NO,
			CREATE_TIME,
			ORIG_ORG_CODE,
			HANDOVERBILL_NO,
			WAYBILL_NO,
			weight,
			volumn
			)
			values
			(#{item.id,jdbcType=VARCHAR},
			#{item.serialNo,jdbcType=VARCHAR},
			#{item.handOverTime,jdbcType=TIMESTAMP},
			#{item.origOrgCode,jdbcType=VARCHAR},
			#{item.handOverBillNo,jdbcType=VARCHAR},
			#{item.waybillNo,jdbcType=VARCHAR},
			#{item.weight,jdbcType=DECIMAL},
			#{item.volumn,jdbcType=DECIMAL}
			)
		</foreach>
		;end;
	</insert>
	
	<!--单条插入交接流水号明细-->
	<insert id="addHandOveredSerialNo" parameterType="com.deppon.foss.module.transfer.load.api.shared.domain.HandOverBillSerialNoDetailEntity">
			insert into
			tfr.t_opt_handoverbill_serialno
			(ID,
			SERIAL_NO,
			CREATE_TIME,
			ORIG_ORG_CODE,
			HANDOVERBILL_NO,
			WAYBILL_NO,
			weight,
			volumn)
			values
			(#{id,jdbcType=VARCHAR},
			#{serialNo,jdbcType=VARCHAR},
			#{handOverTime,jdbcType=TIMESTAMP},
			#{origOrgCode,jdbcType=VARCHAR},
			#{handOverBillNo,jdbcType=VARCHAR},
			#{waybillNo,jdbcType=VARCHAR},
			#{weight,jdbcType=DECIMAL},
			#{volumn,jdbcType=DECIMAL}
			)
	</insert>

	<!-- 查询交接单SQL -->
	<select id="queryHandOverBillList" resultMap="queryHandOverBillResultMap"
		parameterType="com.deppon.foss.module.transfer.load.api.shared.dto.QueryHandOverBillConditionDto">
	<![CDATA[
		select 
			handoverbill.handover_no handOverBillNo,
			handoverbill.handover_type handOverType,
			handoverbill.create_time handOverTime,
			handoverbill.orig_org_name departDept,
			handoverbill.orig_org_code departDeptCode,
			vehicleTaskDetail.Actual_Depart_Time departTime,
			handoverbill.dest_org_name arriveDept,
			handoverbill.dest_org_code arriveDeptCode,
			vehicleTaskDetail.Actual_Arrive_Time arriveTime,
			handoverbill.dest_org_name agency,
			handoverbill.vehicle_no vehicleNo,
			handoverbill.waybill_qty_total totalWaybill,
			handoverbill.goods_qty_total totalPieces,
			handoverbill.volume_total totalCubage,
			handoverbill.money_total/100 totalMoney,
			handoverbill.create_user_name createUserName,
			handoverbill.create_user_code createUserCode,
			handoverbill.driver_name driverName,
			handoverbill.driver_code driver,
			handoverbill.driver_mobile_phone driverTel,
			handoverbill.weight_total totalWeight,
			handoverbill.cod_amount_total totalCodAmount,
			handoverbill.load_finish_time loadEndTime,
			handoverbill.goods_type goodsType,
			handoverbill.modify_user_name modifyUserName,
			handoverbill.notes note,
			handoverbill.isagencyvisit isAgencyVisit,
			handoverbill.BE_CAR_LOAD isCarLoad,
			handoverbill.handoverbill_state handOverBillState,
			handoverbill.be_package bePackage,
			handoverbill.BE_CREATE_BY_PDA isCreatedByPDA,
			handoverbill.transitgoods_type tranGoodsType,
			handoverbill.be_Trailer_VehicleNo beTrailerVehicleNo,
			handoverbill.BE_CREATE_TASKTRUCK isCreateTaskTruck,
			handoverbill.AF_GOODS_QTY waybillQtyAF,
			handoverbill.AF_GOODS_VOLUME goodsVolumeAF,
			handoverbill.AF_GOODS_WEIGHT goodsWeightAF,
			handoverbill.FLF_GOODS_QTY waybillQtyFLF,
			handoverbill.FLF_GOODS_VOLUME goodsVolumeFLF,
			handoverbill.FLF_GOODS_WEIGHT goodsWeightFLF,
			handoverbill.FSF_GOODS_QTY waybillQtyFSF,
			handoverbill.FSF_GOODS_VOLUME goodsVolumeFSF,
			handoverbill.FSF_GOODS_WEIGHT goodsWeightFSF,
			handoverbill.bgflf_goods_qty waybillQtyBGFLF,
       		handoverbill.bgflf_goods_volume goodsVolumeBGFLF,
       		handoverbill.bgflf_goods_weight goodsWeightBGFLF,
       		handoverbill.bgfsf_goods_qty waybillQtyBGFSF,
       		handoverbill.bgfsf_goods_volume goodsVolumeBGFSF,
       		handoverbill.bgfsf_goods_weight goodsWeightBGFSF
			 from tfr.t_opt_handoverbill handoverbill
			 left join tfr.t_opt_TRUCK_TASK_BILL vehicleTaskBill
			 on vehicleTaskBill.Bill_No = handoverbill.handover_no
			 left join tfr.t_opt_TRUCK_TASK_DETAIL vehicleTaskDetail
			 on vehicleTaskBill.Truck_Task_Detail_Id = vehicleTaskDetail.Id
	]]>
		<where>
			handoverbill.handoverbill_state != 90 
			<!-- 查询本部门出发或本部门到达的交接单 -->
			<if test="currentDept != null and currentDept != ''">
				and (handoverbill.orig_org_code = #{currentDept} 
				or (handoverbill.dest_org_code = #{currentDept} and handoverbill.handoverbill_state != 10))
			</if>
			<if test="handOverBillNo != null and handOverBillNo != ''">
				and handoverbill.handover_no = #{handOverBillNo}
			</if>
			<if test="departDept != null and departDept != ''">
				and handoverbill.orig_org_code = #{departDept}
			</if>
			<if test="arriveDept != null and arriveDept != ''">
				and handoverbill.dest_org_code = #{arriveDept}
			</if>
			<if test="handOverType == 'ALL' ">
				and handoverbill.handover_type != 'SALES_DEPARTMENT_HANDOVER'
			</if>
			<if test="handOverType != 'ALL' and handOverType != null and handOverType != ''">
				and handoverbill.handover_type = #{handOverType}
			</if>
			<if test="arriveCondition != 'ALL' and arriveCondition != null and arriveCondition != ''">
				<if test="arriveCondition == 'YES'">
					and vehicleTaskDetail.Actual_Arrive_Time is not null
				</if>
				<if test="arriveCondition == 'NO'">
					and vehicleTaskDetail.Actual_Arrive_Time is null
				</if>
			</if>
			<if test="vehicleNo != null and vehicleNo != ''">
				and handoverbill.vehicle_no = #{vehicleNo}
			</if>
			<if test=" tranGoodsType !='ALL' and tranGoodsType !=null and tranGoodsType !='' ">
				and handoverbill.transitgoods_type =#{tranGoodsType}
			</if>
			<if test="beginHandOverTime != null and beginHandOverTime != ''">
				and handoverbill.create_time >= #{beginHandOverTime}
			</if>
			<if test="endHandOverTime != null and endHandOverTime != ''">
			and handoverbill.create_time <![CDATA[<=]]>
				#{endHandOverTime}
			</if>
		<![CDATA[order by handoverbill.vehicle_no]]>
		</where>
	</select>
	<!-- 查询正单交接单SQL -->
	<select id="queryAirHandOverBillList" resultMap="queryHandOverBillResultMap"
		parameterType="com.deppon.foss.module.transfer.load.api.shared.dto.QueryHandOverBillConditionDto">
	<![CDATA[ select /**查询正单交接单（空运）**/
			 max( handoverbill.air_handover_no )   handOverBillNo, /**交单号**/
			 max( handoverbill.air_handovertype  )  handOverType, /**交单类型**/
			 max( handoverbill.create_time )        handOverTime, /**交单时间**/
			 max( handoverbill.org_name  )          departDept,
			 max( handoverbill.org_code  )          departDeptCode, /**出发部门**/
			 max( handoverbill.create_time )        departTime, /**出发时间**/ 
			 max(d.unload_start_time  )            arriveTime, /**到达时间**/
			 max( handoverbill.express_arrive_name) arriveDept,
			 max( handoverbill.express_arrive_code) arriveDeptCode,/**到达部门**/
			 max( handoverbill.express_arrive_name) agency, /**外发代理**/
			 max( handoverbill.flight_no)          vehicleNo, /**车牌号 航班号**/
			 max( handoverbill.waybill_qty_total) totalWaybill, /**总票数**/
			 max( handoverbill.goods_qty_total) totalPieces, /**总件数**/
			 max( handoverbill.handover_volume_total) totalCubage, /**总体积**/
			 sum( b.fee_total / 100 )totalMoney, /**总金额**/
			 max( handoverbill.create_user_name ) createUserName, /**制单人编号**/
			 max( handoverbill.create_user_code) createUserCode, /**制单人编号**/
			 max( handoverbill.billing_weight_total) totalWeight, /**总重量**/                                                                                                                                                                                                              
			 max( handoverbill.modify_user_name) modifyUserName,
			 '' goodsType, /**运单类型**/
			 '' transProperty, /**运输性质**/
			 0 totalCodAmount, /**代收货款总额 默认0**/
			 max( handoverbill.waybill_qty_total) waybillQtyAF, /**空运票数**/
			 max( handoverbill.handover_volume_total) goodsVolumeAF, /**空运体积**/
			 max( handoverbill.billing_weight_total) goodsWeightAF /**空运重量**/
		  from tfr.t_Opt_Air_Handoverbill handoverbill /**交单信息**/
		  left join tfr.t_opt_air_handoverbill_detail b  on b.air_handoverbill_id = handoverbill.id
		  left join tfr.t_opt_unload_bill_detail t on t.bill_no =handoverbill.air_handover_no and handoverbill.express_assign_status='ASSIGNED'
          left join tfr.t_opt_unload_task  d on t.unload_task_id =d.id
		]]>
		<where>
			handoverbill.air_handovertype = 'PACKAGE_HANDOVER' /**表示快递**/
			<!-- 查询本部门出发或本部门到达的交接单 -->
			<if test="currentDept != null and currentDept != ''">
				and (handoverbill.org_code = #{currentDept} 
				or handoverbill.express_arrive_code = #{currentDept})
			</if>
			<if test="handOverBillNo != null and handOverBillNo != ''">
				and handoverbill.air_handover_no = #{handOverBillNo}
			</if>
			<if test="departDept != null and departDept != ''">
				and handoverbill.org_code = #{departDept}
			</if>
			<if test="arriveDept != null and arriveDept != ''">
				and handoverbill.express_arrive_code = #{arriveDept}
			</if>
			<if test="vehicleNo != null and vehicleNo != ''">
				and  handoverbill.flight_no = #{vehicleNo}
			</if>
			<if test="beginHandOverTime != null and beginHandOverTime != ''">
				and handoverbill.create_time >= #{beginHandOverTime}
			</if>
			<if test="endHandOverTime != null and endHandOverTime != ''">
			and handoverbill.create_time <![CDATA[<=]]>
				#{endHandOverTime}
			</if>
		<![CDATA[group by handoverbill.air_handover_no]]>
		</where>
	</select>
	<select id="getAirHandOverBillListCount" resultType="Long"
		parameterType="com.deppon.foss.module.transfer.load.api.shared.dto.QueryHandOverBillConditionDto">
	  select /**查询正单交接单（空运）总数**/
	   count(handoverbill.air_handover_no )
       from tfr.t_Opt_Air_Handoverbill handoverbill
		<where>
			handoverbill.air_handovertype = 'PACKAGE_HANDOVER' /**表示快递**/
			<!-- 查询本部门出发或本部门到达的交接单 -->
			<if test="currentDept != null and currentDept != ''">
				and (handoverbill.org_code = #{currentDept} 
				or handoverbill.express_arrive_code = #{currentDept})
			</if>
			<if test="handOverBillNo != null and handOverBillNo != ''">
				and handoverbill.air_handover_no = #{handOverBillNo}
			</if>
			<if test="departDept != null and departDept != ''">
				and handoverbill.org_code = #{departDept}
			</if>
			<if test="arriveDept != null and arriveDept != ''">
				and handoverbill.express_arrive_code = #{arriveDept}
			</if>
			<if test="vehicleNo != null and vehicleNo != ''">
				and  handoverbill.flight_no = #{vehicleNo}
			</if>
			<if test="beginHandOverTime != null and beginHandOverTime != ''">
				and handoverbill.create_time >= #{beginHandOverTime}
			</if>
			<if test="endHandOverTime != null and endHandOverTime != ''">
			and handoverbill.create_time <![CDATA[<=]]>
				#{endHandOverTime}
			</if>
		</where>
	</select>
	<!-- 获取符合条件的交接单记录的总数 -->
	<select id="getHandOverBillListCount" resultType="Long"
		parameterType="com.deppon.foss.module.transfer.load.api.shared.dto.QueryHandOverBillConditionDto">
	<![CDATA[
		select 
				count(handover_no) 
			 from tfr.t_opt_handoverbill handoverbill
			 left join tfr.t_opt_TRUCK_TASK_BILL vehicleTaskBill
			 on vehicleTaskBill.Bill_No = handoverbill.handover_no
			 left join tfr.t_opt_TRUCK_TASK_DETAIL vehicleTaskDetail
			 on vehicleTaskBill.Truck_Task_Detail_Id = vehicleTaskDetail.Id
	]]>
		<where>
			<!-- 此处注释掉，意为查询本部门出发或本部门到达的交接单 -->
			handoverbill.handoverbill_state != 90 
			<if test="currentDept != null and currentDept != ''">
				and (handoverbill.orig_org_code = #{currentDept} 
				or (handoverbill.dest_org_code = #{currentDept} and handoverbill.handoverbill_state != 10))
			</if>
			<if test="handOverBillNo != null and handOverBillNo != ''">
				and handoverbill.handover_no = #{handOverBillNo}
			</if>
			<if test="departDept != null and departDept != ''">
				and handoverbill.orig_org_code = #{departDept}
			</if>
			<if test="arriveDept != null and arriveDept != ''">
				and handoverbill.dest_org_code = #{arriveDept}
			</if>
			<if
				test="handOverType != 'ALL' and handOverType != null and handOverType != ''">
				and handoverbill.handover_type = #{handOverType}
			</if>
			<if
				test="arriveCondition != 'ALL' and arriveCondition != null and arriveCondition != ''">
				<if test="arriveCondition == 'YES'">
					and vehicleTaskDetail.Actual_Arrive_Time is not null
				</if>
				<if test="arriveCondition == 'NO'">
					and vehicleTaskDetail.Actual_Arrive_Time is null
				</if>
			</if>
			<if test="vehicleNo != null and vehicleNo != ''">
				and handoverbill.vehicle_no = #{vehicleNo}
			</if>
			<if test=" tranGoodsType !='ALL' and tranGoodsType !=null and tranGoodsType !='' ">
				and handoverbill.transitgoods_type =#{tranGoodsType}
			</if>
			<if test="beginHandOverTime != null and beginHandOverTime != ''">
				and handoverbill.create_time >= #{beginHandOverTime}
			</if>
			<if test="endHandOverTime != null and endHandOverTime != ''">
			and handoverbill.create_time <![CDATA[<=]]>
				#{endHandOverTime}
			</if>
		</where>
	</select>
	<!-- 配载单界面，查询交接单SQL -->
	<select id="queryHandOverBillListForVehicleAssembleBill" resultMap="queryHandOverBillResultMap"
		parameterType="com.deppon.foss.module.transfer.load.api.shared.dto.QueryHandOverBillConditionDto">
	<![CDATA[
		select 
			handoverbill.handover_no handOverBillNo,
			handoverbill.create_time handOverTime,
			handoverbill.dest_org_name arriveDept,
			handoverbill.dest_org_code arriveDeptCode,
			handoverbill.be_package bePackage,
			handoverbill.vehicle_no vehicleNo,
			handoverbill.waybill_qty_total totalWaybill,
			handoverbill.goods_qty_total totalPieces,
			handoverbill.DRIVER_CODE driverCode,
			handoverbill.volume_total totalCubage,
			handoverbill.money_total/100 totalMoney,
			handoverbill.weight_total totalWeight,
			handoverbill.notes note,
			handoverbill.cod_amount_total totalCodAmount,
			handoverbill.be_car_load isCarLoad 
			 from tfr.t_opt_handoverbill handoverbill
	]]>
		<where>
				handoverbill.orig_org_code = #{currentDept} 
				and handoverbill.handover_type = 'LONG_DISTANCE_HANDOVER' 
				and handoverbill.handoverbill_state = 20 
			<if test="handOverBillNo != null and handOverBillNo != ''">
				and handoverbill.handover_no = #{handOverBillNo}
			</if>
			<if test="arriveDept != null and arriveDept != ''">
				and handoverbill.dest_org_code = #{arriveDept}
			</if>
			<if test="vehicleNo != null and vehicleNo != '' and (trailerVehicleNo ==null or trailerVehicleNo =='' )">
				and handoverbill.vehicle_no = #{vehicleNo}
			</if>
			<if test="vehicleNo != null and vehicleNo != '' and trailerVehicleNo !=null and trailerVehicleNo !='' ">
				and (handoverbill.vehicle_no = #{vehicleNo} or handoverbill.vehicle_no = #{trailerVehicleNo})
			</if>
			<if test="beginHandOverTime != null and beginHandOverTime != ''">
				and handoverbill.create_time >= #{beginHandOverTime}
			</if>
			<if test="endHandOverTime != null and endHandOverTime != ''">
			and handoverbill.create_time <![CDATA[<=]]>
				#{endHandOverTime}
			</if>
		<![CDATA[order by handoverbill.vehicle_no]]>
		</where>
	</select>
	<!-- 交接单详情界面，根据交接单号，得到该正交接单号下的所有运单 -->
	<select id="queryAirHandOverBillDetailByNo" resultMap="waybillStockResultMap" parameterType="HashMap">
	   <![CDATA[
	      select a.air_handover_no    handOverBillNo, /**交单编号**/
       d.waybill_no     waybillNo, /**运单号**/
       d.goods_qty          pieces, /**已配票数**/
       d.billing_weight       weight, /**已配重量**/
       d.volume       cubage, /**已配体积**/
       p.code               transPropertyCode,
       p.name               transProperty, /**运输性质**/
       c.goods_qty_total    waybillPieces, /**运单件数**/
       c.goods_weight_total weightAc, /**实际重量**/
       c.goods_volume_total cubageAc, /**实际体积**/
       c.goods_name         goodsName, /**货物名称**/
       c.goods_package      packing, /**包装**/
       c.inner_notes        waybillNote, /**运单备注**/
       c.precious_goods     isPreciousGoods, /**是否贵重物品**/
       md.name arriveDept,/**到达部门**/
       mdn.name receiveOrgName,/**收货部门**/
       c.Receive_Customer_Name consignee, /**收货人**/
       c.Target_Org_Code destination, /**目的站**/
       c.insurance_amount / 100 insuranceValue, /**保险价值**/
       c.goods_type_code goodsType /**运单类型**/
	  from tfr.t_opt_air_handoverbill a /**交单信息**/
	  left join tfr.t_opt_air_handoverbill_detail b  on b.air_handoverbill_id = a.id
      left join tfr.t_opt_air_waybill w on b.t_o_id=w.id
      left join tfr.t_opt_air_waybill_detail d on w.id=d.air_waybill_id
      left join pkp.t_srv_waybill c  on  d.waybill_no = c.waybill_no  and c.active = 'Y'
      left join pkp.t_srv_product p on c.product_code = p.code  and p.active = 'Y'
      left join bse.mv_dest_net md  on c.CUSTOMER_PICKUP_ORG_CODE = md.code  and md.active = 'Y'
	  left join bse.mv_dest_net mdn on c.RECEIVE_ORG_CODE = mdn.code and mdn.active = 'Y'
		]]>
		<where>
		/**表示快递**/
		  a.air_handovertype = 'PACKAGE_HANDOVER' 
		 and  a.air_handover_no = #{handOverBillNo} 
			<if test="waybillNo != null and waybillNo != ''">
				and d.waybill_no = #{waybillNo}
			</if>
		</where>
   </select>
	<!-- 交接单详情界面，根据交接单号，得到该交接单号下的所有运单 -->
	<select id="queryHandOverBillDetailByNo" resultMap="waybillStockResultMap"
		parameterType="HashMap">
	<![CDATA[
		select 
			td.handover_no handOverBillNo,
			td.waybill_no waybillNo,
			td.transport_type transProperty,
			td.TRANSPORT_TYPE_CODE transPropertyCode,
			td.handover_goods_qty pieces,
			td.handover_weight weight,
			td.actual_weight weightAc,
			td.handover_volume cubage,
			td.actual_volume cubageAc,
			td.notes note,
			td.cod_amount codAmount,
			td.goods_name goodsName,
			td.packing packing,
			td.waybill_notes waybillNote,
			td.be_valuable isPreciousGoods,
			td.receive_org_name receiveOrgName,
			td.reach_org_name arriveDept,
			td.receiver_name consignee,
			td.dest_region_name destination,
			td.goods_qty waybillPieces,
			td.declaration_value/100 insuranceValue,
			td.WAYBILL_FEE/100 waybillFee,
			waybill.is_whole_vehicle isCarLoad,
			waybill.goods_type_code goodsType,
			waybill.customer_pickup_org_code pkpOrgCode,
			waybill.customer_pickup_org_name pkpOrgName,
			td.be_fast_goods isFastGoods 
			from tfr.t_opt_handoverbill_detail td 
			left join pkp.t_srv_waybill waybill
			on td.waybill_no = waybill.waybill_no and waybill.active = 'Y' 
	]]>
		<where>
			td.handover_no = #{handOverBillNo} 
			<if test="waybillNo != null and waybillNo != ''">
				and td.waybill_no = #{waybillNo}
			</if>
		</where>
	</select>
	
	<!-- 交接单详情界面，根据交接单号，得到该交接单号下的所有运单 -->
	<select id="queryHandOverBillDetailByHandbillNo" resultMap="handOverBillDtoResultMap"
		parameterType="HashMap">
	<![CDATA[
		select 
			td.handover_no handOverBillNo,
			td.waybill_no waybillNo,
			td.handover_type handOverType,	
			td.transport_type transProperty,
			td.TRANSPORT_TYPE_CODE transPropertyCode,
			td.handover_goods_qty pieces,
			td.handover_weight weight,
			td.actual_weight weightAc,
			td.handover_volume cubage,
			td.actual_volume cubageAc,
			td.notes note,
			td.cod_amount codAmount,
			td.goods_name goodsName,
			td.packing packing,
			td.waybill_notes waybillNote,
			td.be_valuable isPreciousGoods,
			td.receive_org_name receiveOrgName,
			td.reach_org_name arriveDept,
			td.receiver_name consignee,
			td.dest_region_name destination,
			td.goods_qty waybillPieces,
			td.declaration_value/100 insuranceValue,
			td.WAYBILL_FEE/100 waybillFee,
			waybill.is_whole_vehicle isCarLoad,
			waybill.goods_type_code goodsType,
			waybill.customer_pickup_org_code pkpOrgCode,
			waybill.customer_pickup_org_name pkpOrgName,
			waybill.receive_customer_prov_code  receiveCustomerProvCode,
			waybill.receive_customer_city_code  receiveCustomerCityCode,
			waybill.receive_customer_dist_code  receiveCustomerDistCode,
			waybill.receive_customer_address    receiveCustomerAddress,
			waybill.to_pay_amount/100  toPayAmount,
			waybill.receive_customer_contact  receiveCustomerContact,
			waybill.receive_customer_mobilephone  receiveCustomerMobilephone,
			waybill.receive_customer_phone  receiveCustomerPhone,
			waybill.goods_size goodsSize,
		    waybill.delivery_customer_name deliveryCustomerName, 
		    waybill.delivery_customer_contact deliveryCustomerContact,
            waybill.receive_org_code receiveOrgCode,
			td.be_fast_goods isFastGoods 
			from tfr.t_opt_handoverbill_detail td 
			left join pkp.t_srv_waybill waybill
			on td.waybill_no = waybill.waybill_no and waybill.active = 'Y' 
	]]>
		<where>
			td.handover_no = #{handOverBillNo} 
		</where>
	</select>
	
	<!-- 根据交接单号查询出打印交接单中需要的数据  -->
	<select id="queryPrintHandOverBillDataByNo" resultMap="handOverBillDtoResultMap"
		parameterType="String">
	<![CDATA[
		select 
			td.waybill_no waybillNo,
			td.transport_type transProperty,
			td.handover_goods_qty pieces,
			td.handover_weight weight,
			td.actual_weight weightAc,
			td.handover_volume cubage,
			td.actual_volume cubageAc,
			td.notes note,
			td.goods_name goodsName,
			td.packing packing,
			td.waybill_notes waybillNote,
			td.be_valuable isPreciousGoods,
			td.receive_org_name receiveOrgName,
			td.reach_org_name arriveDept,
			td.receiver_name consignee,
			td.dest_region_name destination,
			td.goods_qty waybillPieces,
			td.declaration_value insuranceValue,
			sr.receive_method receiveMethod,
			sr.receive_customer_mobilephone receiveCustomerMobilephone,
			sr.receive_customer_phone receiveCustomerPhone,
			sr.precious_goods isPreciousGoods
			from tfr.t_opt_handoverbill_detail td
			left join pkp.t_srv_waybill sr
			on sr.waybill_no = td.waybill_no
			and sr.active = 'Y'
		where
			td.handover_no = #{handOverBillNo}
			order by td.transport_type, td.waybill_no asc
	]]>
	</select>
	<select id="queryPrintAirHandOverBillDataByNo" resultMap="handOverBillDtoResultMap"
		parameterType="String">
	select 
      td.FLIGHT_NO handOverBillNo,
      d.waybill_no waybillNo,
      p.name transProperty,
      c.product_code transPropertyCode,
      d.goods_qty pieces,
      d.billing_weight   weight,
      c.goods_weight_total weightAc,
      d.volume  cubage,
      c.goods_volume_total cubageAc,
      td.notes note,
      c.cod_amount/100 codAmount,
      c.goods_name goodsName,
      b.PACKAGE_STRUCTION packing,
      c.inner_notes  waybillNote,
      c.precious_goods isPreciousGoods,
      mdn.name receiveOrgName,
      md.name arriveDept,
      c.Receive_Customer_Name consignee,
      c.Target_Org_Code destination,
      c.goods_qty_total waybillPieces,
      c.Total_Fee / 100 insuranceValue,
      d.arrival_fee/100 waybillFee,
      c.is_whole_vehicle isCarLoad,
      c.goods_type_code goodsType,
      c.customer_pickup_org_code pkpOrgCode,
      c.customer_pickup_org_name pkpOrgName,
      c.receive_customer_prov_code  receiveCustomerProvCode,
      c.receive_customer_city_code  receiveCustomerCityCode,
      c.receive_customer_dist_code  receiveCustomerDistCode,
      c.receive_customer_address    receiveCustomerAddress,
      c.to_pay_amount/100 toPayAmount,
      c.receive_method receiveMethod,
      c.receive_customer_mobilephone receiveCustomerMobilephone,
      c.receive_customer_contact  receiveCustomerContact,
      c.receive_customer_phone receiveCustomerPhone,
      c.precious_goods isPreciousGoods
      from tfr.t_opt_air_handoverbill td /**交单信息**/
      left join tfr.t_opt_air_handoverbill_detail b  on b.air_handoverbill_id = td.id
      left join tfr.t_opt_air_waybill w on b.t_o_id=w.id
      left join tfr.t_opt_air_waybill_detail d on w.id=d.air_waybill_id
      left join pkp.t_srv_waybill c  on  d.waybill_no = c.waybill_no  and c.active = 'Y'
      left join pkp.t_srv_product p on c.product_code = p.code  and p.active = 'Y'
      left join bse.mv_dest_net md  on c.CUSTOMER_PICKUP_ORG_CODE = md.code  and md.active = 'Y'
      left join bse.mv_dest_net mdn on c.RECEIVE_ORG_CODE = mdn.code and mdn.active = 'Y'
      where td.air_handover_no = #{handOverBillNo}
	</select>
	<!-- 根据交接单号查询出打印外发清单中需要的数据  -->
	<select id="queryPrintPartialLineDataByNo" resultMap="handOverBillDtoResultMap"
		parameterType="String">
	<![CDATA[
		select 
			td.waybill_no waybillNo,
			td.transport_type transProperty,
			td.handover_goods_qty pieces,
			td.handover_weight weight,
			td.actual_weight weightAc,
			td.handover_volume cubage,
			td.actual_volume cubageAc,
			td.notes note,
			td.goods_name goodsName,
			td.packing packing,
			td.waybill_notes waybillNote,
			td.be_valuable isPreciousGoods,
			td.receive_org_name receiveOrgName,
			td.reach_org_name arriveDept,
			td.receiver_name consignee,
			td.dest_region_name destination,
			td.goods_qty waybillPieces,
			td.declaration_value insuranceValue,
			td.cod_amount codAmout,
			sr.receive_method receiveMethod,
			sr.receive_customer_mobilephone receiveCustomerMobilephone,
			sr.receive_customer_phone receiveCustomerPhone,
			sr.receive_customer_contact receiveCustomerName,
			sr.receive_org_code receiveOrgCode,
			sr.receive_customer_address receiveCustomerAddress,
			sr.to_pay_amount toPayAmount,
			sr.paid_method paidMethod
			from tfr.t_opt_handoverbill_detail td
			left join pkp.t_srv_waybill sr
			on sr.waybill_no = td.waybill_no
			and sr.active = 'Y'
		where td.handover_no = #{handOverBillNo}
			order by td.dest_region_name desc, td.waybill_no asc
	]]>
	</select>
	<!-- 打印交接单中交接单流水明细 修改交接单时使用此语句加载运单下的流水号，“是否在库”isInStorage设置为-1-->
	<select id="getHandOverBillSerialNoDetailsByWayBillNo" resultMap="getHandOverBillSerialNoDetailsByWayBillNoResultMap"
		parameterType="HashMap">
	<![CDATA[
		select 
			serialNo.serial_no serialNo,
			serialNo.create_time handOverTime,
			serialNo.orig_org_code origOrgCode,
			serialNo.handoverbill_no handOverBillNo,
			serialNo.waybill_no waybillNo,
			nvl(serialNo.Weight,nvl(bss.weight,nvl(wb.goods_weight_total/wb.goods_qty_total,0))) weight,
      		nvl(serialNo.Volumn,nvl(bss.volumn,nvl(wb.goods_volume_total/wb.goods_qty_total,0))) volumn,
      		 nvl2(bss.id ,'Y','N') beScan,
      		 wb.product_code productCode,
			-1 isInStorage 
			from tfr.t_opt_handoverbill_serialno serialNo
			left join tfr.t_opt_bcmach_sortscan bss on bss.waybill_no = serialNo.Waybill_No and bss.serial_no=serialNo.Serial_No
            left join pkp.t_srv_waybill wb on wb.waybill_no=serialNo.waybill_no and wb.active='Y'
	]]>
		<where>
			serialNo.Handoverbill_No = #{handOverBillNo}
			<if test="waybillNo != null and waybillNo != ''">
				and serialNo.Waybill_No =#{waybillNo}
			</if>
   				order by serialNo.serial_no asc
		</where>
	</select>
	<!-- 打印正交接单中交接单流水明细 修改交接单时使用此语句加载运单下的流水号，“是否在库”isInStorage设置为-1-->
	<select id="getAirHandOverBillSerialNoDetailsByWayBillNo" resultMap="getHandOverBillSerialNoDetailsByWayBillNoResultMap"
		parameterType="HashMap">
	   select serialNo.serial_no serialNo,
       serialNo.create_time handOverTime,
       serialNo.waybill_no waybillNo,
       nvl(bss.weight, nvl(wb.goods_weight_total / wb.goods_qty_total, 0)) weight,
       nvl(bss.volumn, nvl(wb.goods_volume_total / wb.goods_qty_total, 0)) volumn,
       nvl2(bss.id, 'Y', 'N') beScan,
       wb.product_code productCode,
       -1 isInStorage
	  from tfr.t_opt_air_waybill_serialno serialNo
	  left join tfr.t_opt_air_waybill_detail t on serialNo.Air_Waybill_Detail_Id=t.id
      left join tfr.t_opt_air_waybill w on t.air_waybill_id=w.id
	  left join tfr.t_opt_bcmach_sortscan bss on bss.waybill_no = serialNo.Waybill_No and bss.serial_no = serialNo.Serial_No
	  left join pkp.t_srv_waybill wb on t.waybill_no = wb.waybill_no and wb.active = 'Y'
	  <where>
	   <if test="waybillNo != null and waybillNo != ''">
		 and  t.waybill_no =#{waybillNo}
	   </if>
	   order by serialNo.serial_no asc
	  </where>
	</select>
	<!-- 交接单详情界面，双击列表中某运单号，得到流水号list -->
	<select id="queryPDAWaybillDetailByNos" resultMap="querySerialNoListByNosResultMap" 
		parameterType="HashMap">
		    select 
		    	   serialNo.Serial_No  serialNo,
			       serialNo.Handoverbill_No       handOverBillNo,
			       serialNo.Waybill_No            waybillNo,
			       nvl(serialNo.Weight,nvl(bss.weight,nvl(wb.goods_weight_total/wb.goods_qty_total,0))) weight,
		      	   nvl(serialNo.Volumn,nvl(bss.volumn,nvl(wb.goods_volume_total/wb.goods_qty_total,0))) volumn,
		      	   nvl2(bss.id ,'Y','N') beScan,
		      	   wb.product_code productCode,
			       loadSerialNoDetail.Goods_State loadExceptionType
			  from tfr.t_opt_handoverbill_serialno serialNo
        left join tfr.t_opt_handoverbill handoverbill
          on handoverbill.handover_no = serialNo.Handoverbill_No
        left join tfr.t_opt_bcmach_sortscan bss on bss.waybill_no = serialNo.Waybill_No and bss.serial_no=serialNo.Serial_No
        left join pkp.t_srv_waybill wb on wb.waybill_no=serialNo.waybill_no and wb.active='Y'
       left join tfr.t_Opt_Load_Task loadTask
          on handoverbill.load_task_no = loadTask.Task_No
         left join tfr.t_Opt_Load_Waybill_Detail loadWaybillDetail
          on loadTask.Id = loadWaybillDetail.Load_Task_Id 
          and serialNo.Waybill_No = loadWaybillDetail.Waybill_No
		<if test="waybillNo != null and waybillNo != ''">
				and loadWaybillDetail.Waybill_No = #{waybillNo}
		</if>
        left join tfr.t_Opt_Load_Serialno loadSerialNoDetail
          on loadWaybillDetail.Id = loadSerialNoDetail.Load_Waybill_Detail_Id
          and serialNo.Serial_No = loadSerialNoDetail.Serial_No
		<where>
			serialNo.Handoverbill_No = #{handOverBillNo}
			<if test="waybillNo != null and waybillNo != ''">
				and serialNo.Waybill_No =#{waybillNo}
			</if>
		</where>
	</select>
	<!-- 交接单详情界面，根据交接单号查询修改日志-->
	<select id="queryHandOverBillOptLogByNo" resultMap="queryHandOverBillOptLogByNoResultMap" 
		parameterType="String">
	<![CDATA[
		select 
			optLog.Operator_Name operatorName,
			optLog.Operate_Time optTime,
			optLog.Operate_Type optType,
			optLog.Content optContent
			 from tfr.t_opt_handover_log optLog
	]]>
		<where>
			optLog.Handover_No = #{handOverBillNo}
			order by optLog.Operate_Time
		</where>
	</select>
	<!-- 交接单详情界面，根据交接单号获取日志的总条数-->
	<select id="getHandOverBillOptLogCount" resultType="Long" 
		parameterType="String">
	<![CDATA[
		select 
			count(ID)
			 from tfr.t_opt_handover_log optLog
	]]>
		<where>
			optLog.Handover_No = #{handOverBillNo}
		</where>
	</select>
	<!-- 根据交接单号更新交接单状态 -->
	<update id="updateHandOverBillState"  parameterType = "java.util.List">
		begin
		<foreach collection="list" item="item" separator=";">
			update
			tfr.t_opt_handoverbill t
			<set>
				  t.handoverbill_state = #{item.targetState,jdbcType=DECIMAL},
				  t.modify_time=sysdate
			</set>
			<where>
				t.handover_no = #{item.handOverBillNo,jdbcType=VARCHAR} 
			</where>
		</foreach>
		;end;
	</update>
	<select id="queryAirHandOverBillByNo" parameterType = "String" resultMap = "queryHandOverBillResultMap">
	 <![CDATA[
	  select 
    hb.id id,
    hb.air_handover_no handOverBillNo,
    hb.org_Name departDept,
    hb.org_code departDeptCode,
    hb.express_arrive_name arriveDept,
    hb.express_arrive_code arriveDeptCode,/**到达部门**/
    hb.flight_no vehicleNo,
   /**hb.load_finish_time loadEndTime,**/
   'PACKAGE_HANDOVER' handOverType,
    hb.create_user_name createUserName,
    hb.notes note,
    hb.waybill_qty_total totalWaybill,
    hb.goods_qty_total totalPieces,
    hb.billing_weight_total totalWeight,
    hb.handover_volume_total totalCubage,
    hb.create_time handOverTime,
    hb.CREATE_USER_CODE createUserCode,
    hb.modify_user_name modifyUserName,
    'N' isCreatedByPDA,
    hb.waybill_qty_total waybillQtyAF,
    hb.handover_volume_total goodsVolumeAF,
    hb.billing_weight_total goodsWeightAF
    from tfr.t_opt_air_handoverbill hb 
	 ]]>
	 <where>
	   hb.air_handovertype='PACKAGE_HANDOVER'
	   and  hb.air_handover_no = #{handOverBillNo,jdbcType=VARCHAR} 
	 </where>
	</select>
	<!-- 根据交接单号获取交接单信息 -->
	<select id="queryHandOverBillByNo" parameterType = "String" resultMap = "queryHandOverBillResultMap">
	<![CDATA[
		select 
		hb.id id,
		hb.handover_no handOverBillNo,
		hb.orig_org_name departDept,
		hb.ORIG_ORG_CODE departDeptCode,
		hb.dest_org_name arriveDept,
		hb.dest_org_code arriveDeptCode,
		hb.driver_name driverName,
		hb.driver_code driver,
		hb.be_package bePackage,
		hb.driver_mobile_phone driverTel,
		hb.vehicle_no vehicleNo,
		hb.load_finish_time loadEndTime,
		hb.goods_type goodsType,
		hb.handover_type handOverType,
		hb.isagencyvisit isAgencyVisit,
		hb.create_user_name createUserName,
		hb.notes note,
		hb.handoverbill_state handOverBillState,
		hb.waybill_qty_total totalWaybill,
		hb.goods_qty_total totalPieces,
		hb.weight_total totalWeight,
		hb.volume_total totalCubage,
		hb.money_total/100 totalMoney,
		hb.fast_waybill_qty fastWaybillQty,
		hb.cod_amount_total totalCodAmount,
		hb.LINE_NAME lineName,
		hb.load_task_no loadTaskNo,
		hb.truckdepartplandetail_id truckDepartPlanDetailId,
		hb.create_time handOverTime,
		hb.CREATE_USER_CODE createUserCode,
		hb.modify_user_name modifyUserName,
		hb.be_create_by_pda isCreatedByPDA,
		hb.BE_CREATE_TASKTRUCK isCreateTaskTruck,
		hb.be_car_load isCarLoad,
		hb.transitGoods_type tranGoodsType,
		hb.be_Trailer_VehicleNo beTrailerVehicleNo,
		hb.AF_GOODS_QTY waybillQtyAF,
		hb.AF_GOODS_VOLUME goodsVolumeAF,
		hb.AF_GOODS_WEIGHT goodsWeightAF,
		hb.FLF_GOODS_QTY waybillQtyFLF,
		hb.FLF_GOODS_VOLUME goodsVolumeFLF,
		hb.FLF_GOODS_WEIGHT goodsWeightFLF,
		hb.FSF_GOODS_QTY waybillQtyFSF,
		hb.FSF_GOODS_VOLUME goodsVolumeFSF,
		hb.FSF_GOODS_WEIGHT goodsWeightFSF
		from tfr.t_opt_handoverbill hb 
	]]>
		<where>
		 		hb.handover_no = #{handOverBillNo,jdbcType=VARCHAR}
		 		and handoverbill_state != 90
		</where>
		
	</select>
	<!-- 修改交接单时，更新交接单基本信息 -->
	<update id="updateHandOverBillBasicInfo" parameterType = "com.deppon.foss.module.transfer.load.api.shared.domain.HandOverBillEntity">
		update tfr.t_opt_handoverbill t  
		set 
		<if test="truckDepartPlanDetailId != null and truckDepartPlanDetailId != ''">
					TRUCKDEPARTPLANDETAIL_ID = #{truckDepartPlanDetailId,jdbcType=VARCHAR},
		</if>
		<if test="lineName != null and lineName != ''">
					LINE_NAME = #{lineName,jdbcType=VARCHAR},
		</if>
		<if test="lineCode != null and lineCode != ''">
					LINE_VIRTUAL_CODE = #{lineCode,jdbcType=VARCHAR},
		</if>
		<if test="frequencyNo != null and frequencyNo != ''">
					FREQUENCY_NO = #{frequencyNo,jdbcType=VARCHAR},
		</if>
		<if test="driverName != null and driverName != ''">
			t.driver_name = #{driverName,jdbcType=VARCHAR},
		</if>
		<if test="driverTel != null and driverTel != ''">
			t.driver_mobile_phone = #{driverTel,jdbcType=VARCHAR},
		</if>
		<if test="driver != null and driver != ''">
			t.driver_code = #{driver,jdbcType=VARCHAR},
		</if>
		<if test="vehicleNo != null and vehicleNo != ''">
			t.vehicle_no = #{vehicleNo,jdbcType=VARCHAR},
		</if>
		<if test="goodsType != null and goodsType != ''">
			t.goods_type = #{goodsType,jdbcType=VARCHAR},
		</if>
		<if test="note != null and note != ''">
			t.notes = #{note,jdbcType=VARCHAR},
		</if>
		<if test="goodsQtyTotal != null and goodsQtyTotal != ''">
			t.goods_qty_total = #{goodsQtyTotal,jdbcType=DECIMAL},
		</if>
		<if test="waybillQtyTotal != null and waybillQtyTotal != ''">
			t.waybill_qty_total = #{waybillQtyTotal,jdbcType=DECIMAL},
		</if>
		<if test="weightTotal != null and weightTotal != ''">
			t.weight_total = #{weightTotal,jdbcType=DECIMAL},
		</if>
		<if test="volumeTotal != null and volumeTotal != ''">
			t.volume_total = #{volumeTotal,jdbcType=DECIMAL},
		</if>
		<if test="moneyTotal != null and moneyTotal != ''">
			t.money_total = #{moneyTotal,jdbcType=DECIMAL},
		</if>
		<if test="codAmountTotal != null and codAmountTotal != ''">
			t.cod_amount_total = #{codAmountTotal,jdbcType=DECIMAL},
		</if>
		<if test="fastWaybillQty != null and fastWaybillQty != ''">
			t.fast_waybill_qty = #{fastWaybillQty,jdbcType=DECIMAL},
		</if>
		<if test="loadEndTime != null and loadEndTime != ''">
			t.load_finish_time = #{loadEndTime,jdbcType=TIMESTAMP},
		</if>
		
		<if test="waybillQtyAF != null or waybillQtyAF == 0">
			t.AF_GOODS_QTY = #{waybillQtyAF,jdbcType=DECIMAL},
		</if>
		<if test="goodsWeightAF != null or goodsWeightAF == 0">
			t.AF_GOODS_WEIGHT = #{goodsWeightAF,jdbcType=DECIMAL},
		</if>
		<if test="goodsVolumeAF != null or goodsVolumeAF == 0">
			t.AF_GOODS_VOLUME = #{goodsVolumeAF,jdbcType=DECIMAL},
		</if>
		<if test="waybillQtyFLF != null or waybillQtyFLF == 0">
			t.FLF_GOODS_QTY = #{waybillQtyFLF,jdbcType=DECIMAL},
		</if>
		<if test="goodsVolumeFLF != null or goodsVolumeFLF == 0">
			t.FLF_GOODS_VOLUME = #{goodsVolumeFLF,jdbcType=DECIMAL},
		</if>
		<if test="goodsWeightFLF != null or goodsWeightFLF == 0">
			t.FLF_GOODS_WEIGHT = #{goodsWeightFLF,jdbcType=DECIMAL},
		</if>
		<if test="waybillQtyFSF != null or waybillQtyFSF == 0">
			t.FSF_GOODS_QTY = #{waybillQtyFSF,jdbcType=DECIMAL},
		</if>
		<if test="goodsVolumeFSF != null or goodsVolumeFSF == 0">
			t.FSF_GOODS_VOLUME = #{goodsVolumeFSF,jdbcType=DECIMAL},
		</if>
		<if test="goodsWeightFSF != null or goodsWeightFSF == 0">
			t.FSF_GOODS_WEIGHT = #{goodsWeightFSF,jdbcType=DECIMAL},
		</if>
		<if test="waybillQtyBGFLF != null or waybillQtyBGFLF == 0">
			t.bgflf_goods_qty = #{waybillQtyBGFLF,jdbcType=DECIMAL},
		</if>
		<if test="goodsVolumeBGFLF != null or goodsVolumeBGFLF == 0">
			t.bgflf_goods_volume = #{goodsVolumeBGFLF,jdbcType=DECIMAL},
		</if>
		<if test="goodsWeightBGFLF != null or goodsWeightBGFLF == 0">
			t.bgflf_goods_weight = #{goodsWeightBGFLF,jdbcType=DECIMAL},
		</if>
		<if test="waybillQtyBGFSF != null or waybillQtyBGFSF == 0">
			t.bgfsf_goods_qty = #{waybillQtyBGFSF,jdbcType=DECIMAL},
		</if>
		<if test="goodsVolumeBGFSF != null or goodsVolumeBGFSF == 0">
			t.bgfsf_goods_volume = #{goodsVolumeBGFSF,jdbcType=DECIMAL},
		</if>
		<if test="goodsWeightBGFSF != null or goodsWeightBGFSF == 0">
			t.bgfsf_goods_weight = #{goodsWeightFSF,jdbcType=DECIMAL},
		</if>
		<if test=" tranGoodsType !=null or tranGoodsType !=''" >
			t.transitgoods_type = #{tranGoodsType,jbdcType=VARCHAR},
		</if>
			t.modify_time = #{modifyDate,jdbcType=TIMESTAMP},
			t.modify_user_name = #{modifyUserName,jdbcType=VARCHAR},
			t.modify_user_code = #{modifyUserCode,jdbcType=VARCHAR},
			t.be_Trailer_VehicleNo=#{beTrailerVehicleNo,jdbcType=VARCHAR}
		<where>
			t.handover_no = #{handOverBillNo,jdbcType=VARCHAR}
		</where>
	</update>
	<!-- 修改交接单时，批量更新交接单内运单信息 -->
	<update id="updateWaybillList" parameterType="java.util.List">
		begin
		<foreach collection="list" item="item" separator=";">
			update
			tfr.t_opt_handoverbill_detail t
			<set>
				  t.handover_goods_qty = #{item.pieces,jdbcType=DECIMAL},
			      t.handover_weight = #{item.weight,jdbcType=DECIMAL},
			      t.actual_weight = #{item.weightAc,jdbcType=DECIMAL},
			      t.handover_volume = #{item.cubage,jdbcType=DECIMAL},
			      t.actual_volume = #{item.cubageAc,jdbcType=DECIMAL},
			      t.notes = #{item.note,jdbcType=VARCHAR},
			      t.modify_time = #{item.modifyDate,jdbcType=TIMESTAMP}
			</set>
			<where>
				t.handover_no = #{item.handOverBillNo,jdbcType=VARCHAR} 
				and t.waybill_no = #{item.waybillNo,jdbcType=VARCHAR} 
			</where>
		</foreach>
		;end;
	</update>
	<!-- 修改交接单时，批量删除交接单内运单 -->
	<delete id="deleteWaybillList"  parameterType="java.util.List">
		begin
		<foreach collection="list" item="item" separator=";">
			delete from 
			tfr.t_opt_handoverbill_detail t
			<where>
				t.handover_no = #{item.handOverBillNo,jdbcType=VARCHAR} 
				and t.waybill_no = #{item.waybillNo,jdbcType=VARCHAR} 
			</where>
		</foreach>
		;end;
	</delete>
	<!--修改配载单车牌号时，批量更新配载单下交接单的车牌号及司机信息-->
	<update  id="updateVehicleNoAndDriverInfoFromVehicleAssembleBill" 
		parameterType="com.deppon.foss.module.transfer.load.api.shared.dto.UpdateVehicleNoAndDriverInfoFromVehicleAssembleBillDto">
		update
			tfr.t_opt_handoverbill t
		<set>
				  t.DRIVER_MOBILE_PHONE = #{driverTel,jdbcType=VARCHAR},
			      t.DRIVER_CODE = #{driverCode,jdbcType=VARCHAR},
			      t.DRIVER_NAME = #{driverName,jdbcType=VARCHAR},
			      t.VEHICLE_NO = #{vehicleNo,jdbcType=VARCHAR},
			      t.MODIFY_TIME=sysdate
		</set>
		<where>
				t.HANDOVER_NO in 
			<foreach collection="handOverBillNoList" item="item" separator="," close=")" open="(">
                    	#{item}
			</foreach>
		</where>
	</update>
	<!-- 修改交接单时，批量删除交接单下的流水号 -->
	<delete id="deleteSerialNoList"  parameterType="java.util.List">
		begin
		<foreach collection="list" item="item" separator=";">
			delete from 
			tfr.t_opt_handoverbill_serialno t
			<where>
				t.handoverbill_no = #{item.handOverBillNo,jdbcType=VARCHAR} 
				and t.waybill_no = #{item.waybillNo,jdbcType=VARCHAR} 
				and t.serial_no = #{item.serialNo,jdbcType=VARCHAR} 
			</where>
		</foreach>
		;end;
	</delete>
	<!-- 记录交接单修改日志 -->
	<insert id="saveOptLogList"  parameterType="java.util.List">
		begin
		<foreach collection="list" item="item" separator=";">
			insert into
			tfr.t_opt_handover_log
			(id,
		      handoverbill_id,
		      handover_no,
		      operate_type, 
		      operator_code, 
		      operator_name, 
		      content, 
		      operate_time, 
		      handover_time 
			)
			values
			(#{item.id,jdbcType=VARCHAR},
			#{item.handOverBillID,jdbcType=VARCHAR},
			#{item.handOverBillNo,jdbcType=VARCHAR},
			#{item.optType,jdbcType=VARCHAR},
			#{item.operatorCode,jdbcType=VARCHAR},
			#{item.operatorName,jdbcType=VARCHAR},
			#{item.optContent,jdbcType=VARCHAR},
			#{item.optTime,jdbcType=TIMESTAMP},
			#{item.handOverTime,jdbcType=TIMESTAMP})
		</foreach>
		;end;
	</insert>
	<!--获取某交接单下的某流水号-->
	<select id="querySerialNoFromHandOverBill" parameterType = "com.deppon.foss.module.transfer.load.api.shared.dto.UpdateHandOverBillSerialNoPreHandOverStateDto" 
		resultMap="getHandOverBillSerialNoDetailsByWayBillNoResultMap">
		select 
			t.handoverbill_no handOverBillNo,
			t.waybill_no waybillNo,
			t.serial_no serialNo,
			t.pre_handover_status preHandOverStatus 
			from tfr.t_opt_handoverbill_serialno t 
		<where>
				where t.handoverbill_no = #{handOverBillNo}
				and t.waybill_no = #{waybillNo}
				and t.serial_no = #{serialNo}
				and t.pre_handover_status != 'PRE_HANDOVER'
		</where>
	</select>
	<!--更新交接单中某流水号的预配状态-->
	<update id="updateHandOverBillSerialNoPreHandOverState" parameterType = "com.deppon.foss.module.transfer.load.api.shared.dto.UpdateHandOverBillSerialNoPreHandOverStateDto">
		update tfr.t_opt_handoverbill_serialno t 
			set t.pre_handover_status = 'PRE_HANDOVER'
		<where>
				where t.handoverbill_no = #{handOverBillNo}
				and t.waybill_no = #{waybillNo}
				and t.serial_no = #{serialNo}
		</where>
	</update>
	<!-- 验证选择的交接单在该车牌下是否还有其他的没选择-->
	<select id="checkPrintHandOverBill" parameterType = "com.deppon.foss.module.transfer.load.api.shared.vo.HandOverBillVo" resultType="Long">
	<![CDATA[
		select count(*) from tfr.t_opt_truck_task_bill
	]]>
		<where>
		 		bill_no not in
			<if test="handOverBillNos!=null">
				<foreach collection="handOverBillNos" open="(" close=")"
					separator="," index="index" item="item">
						#{item}
				</foreach>
			</if>
		 		and truck_task_detail_id in (select truck_task_detail_id from tfr.t_opt_truck_task_bill where bill_no in
			<if test="handOverBillNos!=null">
				<foreach collection="handOverBillNos" open="(" close="))"
					separator="," index="index" item="item">
						#{item}
				</foreach>
			</if>
			<!-- 类型为交接单 -->
				and bill_type = 'HANDOVER'
		</where>
	</select>

	<!-- 根据交接单号查询出配载单号-->
	<select id="getVehicleassembleNoByHandoverNo" parameterType="String" resultType="String">
	<![CDATA[
		select 
		vehicleassemble_no 
		from 
		tfr.t_opt_vehicleassemblebill 
		where 
		id = (select vehicleassemblebill_id from tfr.t_opt_vehicleassemble_detail where handover_no = #{handoverNo} and rownum = 1)
	]]>
	</select>
	
	<insert id="insertHandoverBillPrintRecord" parameterType="com.deppon.foss.module.transfer.load.api.shared.domain.HandoverBillPrintRecordEntity" >
    insert into TFR.T_OPT_HANDOVERBILL_PRINTRECORD (ID, HANDOVER_NO, OPERATOR_CODE, 
      OPERATOR_NAME, OPERAT_TIME, ORG_CODE, 
      ORG_NAME, CREATE_TIME)
    values (#{id,jdbcType=VARCHAR}, #{handoverNo,jdbcType=VARCHAR}, #{operatorCode,jdbcType=VARCHAR}, 
      #{operatorName,jdbcType=VARCHAR}, #{operatTime,jdbcType=TIMESTAMP}, #{orgCode,jdbcType=VARCHAR}, 
      #{orgName,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP})
	</insert>
  
	<!-- 根据部门查询货件在该部门的交接单类型-->
	<select id="queryHandoverType" parameterType="map" resultType="string">
	<![CDATA[
		 SELECT 
			 H.HANDOVER_TYPE 
		  FROM 
			  TFR.T_OPT_HANDOVERBILL_SERIALNO S, 
			  TFR.T_OPT_HANDOVERBILL H
		  WHERE 
			  S.HANDOVERBILL_NO = H.HANDOVER_NO 
			  AND S.WAYBILL_NO = #{waybillNo}  
			  AND S.SERIAL_NO = #{serialNo} 
			  AND S.ORIG_ORG_CODE = #{orgCode}
	]]> 	
	</select>
	
	<!--根据到达部门code、运单号、流水号获取出发部门code-->
	<select id="querydepartDeptCodeByDestOrgCodeAndWaybillNoAndSerialNo" 
		parameterType="com.deppon.foss.module.transfer.load.api.shared.domain.HandOverBillSerialNoDetailEntity" resultType="java.lang.String">
		select hb.orig_org_code  orgCode
			from tfr.t_opt_handoverbill hb,
			tfr.t_opt_handoverbill_serialno hs
		<where>
			hb.handover_no = hs.handoverbill_no(+)
			and hb.dest_org_code = #{destOrgCode}
			and hs.waybill_no = #{waybillNo}
			and hs.serial_no = #{serialNo}
		</where>
	</select>
	
	<!--根据到达部门code、出发部门code、运单号、指定的交接单号list中匹配出交接单号，用于上报OA少货时获取交接单号-->
	<select id="queryHandOverBillNoForUnloadTaskLackGoods" 
		parameterType="com.deppon.foss.module.transfer.load.api.shared.dto.QueryHandOverBillNoForUnloadTaskLackGoodsDto" resultType="java.lang.String">
		select hb.handover_no handOverBillNo
  			from tfr.t_opt_handoverbill hb, 
  					tfr.t_opt_handoverbill_detail hd
		<where>
			hb.handover_no = hd.handover_no(+)
			and hb.orig_org_code = #{departOrgCode}
		    and hb.dest_org_code = #{destOrgCode}
		    and hd.waybill_no = #{waybillNo}
		    and hb.handover_no in 
			<foreach collection="unloadedHandOverBillNoList" item="item" separator="," close=")" open="(">
                    	#{item}
			</foreach>
		</where>
	</select>
	
	<!-- 查询运单是否需要代打木架_zyx-->
	<select id="queryWayBillPacked" resultType="Long" 
		parameterType="String">
	<![CDATA[
		select 
			count(*)
			 from tfr.t_opt_package_request_detail
	]]>
		<where>
			waybill_no = #{waybillNo}
		</where>
	</select>
	
	<!--根据运单号、到达部门code获取被交接过的流水号list -->
	<select id="queryHandOveredSerialNoListByDestOrgCodeAndWaybillNo" parameterType="com.deppon.foss.module.transfer.load.api.shared.dto.QuerySerialNoListForWaybillConditionDto"
		resultMap="serialNoStockResultMap">
		select 
			hs.waybill_no waybillNo, 
			hs.serial_no serialNo
		  from tfr.t_opt_handoverbill_serialno hs
		  left join tfr.t_opt_handoverbill hb
		    on hs.handoverbill_no = hb.handover_no and hb.handoverbill_state >= 40 and hb.handoverbill_state != 90
		<where>
			hs.waybill_no = #{waybillNo,jdbcType=VARCHAR}
			and hb.dest_org_code = #{currentDeptCode,jdbcType=VARCHAR}
		</where>
			order by hb.create_time
	</select>
	
	<!-- 查询某运单的在途记录 -->
	<select id="queryGoodsOnTheWayRecordsByWaybillNo" resultMap="waybillStockResultMap"
		parameterType="java.lang.String">
		<![CDATA[
			select 
				td.handover_no handOverBillNo,
				td.waybill_no waybillNo,
				td.handover_goods_qty pieces
				from tfr.t_opt_handoverbill_detail td 
				 left join tfr.t_opt_handoverbill h
	    			on td.handover_no = h.handover_no
		]]>
		<where>
			h.handoverbill_state in (20,21,30,40,50)
			and td.waybill_no = #{waybillNo,jdbcType=VARCHAR}
		</where>
	</select>
	
	<!-- 通过交接单号查询任务车辆状态 -->
	<select id="validateHandOverBillStateFromTruckTask" resultType="String"
		parameterType="java.lang.String">
		select td.status from tfr.t_opt_truck_task_detail td
		inner join tfr.t_opt_truck_task_bill tb on tb.truck_task_detail_id = td.id
		where tb.bill_no = #{handOverBillNo}
	</select>
	
	<!--查询待办未漂移的交接单-->
	<select id="queryToDoUnDriftedHandOverBillList" resultMap="queryHandOverBillResultMap"
		parameterType="java.util.Date">
	<![CDATA[
		select 
			h.handover_no handOverBillNo,
			h.handover_type handOverType,
			h.create_time handOverTime,
			h.orig_org_name departDept,
			h.orig_org_code departDeptCode,
			h.dest_org_name arriveDept,
			h.dest_org_code arriveDeptCode
			from tfr.t_opt_handoverbill h 
	]]>
		<where>
			h.is_init = 'N'
			and h.be_todo_drifted = 'N' 
			and h.handoverbill_state != 10 
			and h.handoverbill_state != 90
			and h.create_time <![CDATA[>=]]>#{endCreateTime}
		</where>
	</select>
	
	<!-- 更新交接单“待办是否已漂移”字段 -->
	<update id="updateHandOverBillDriftedToDo"  parameterType = "java.lang.String">
		update
		tfr.t_opt_handoverbill t
		<set>
			  t.BE_TODO_DRIFTED = 'Y',
			  t.MODIFY_TIME=sysdate
		</set>
		<where>
			t.handover_no = #{handOverBillNo} 
		</where>
	</update>
	
	<!--根据运单号查询该运单所有被交接记录，按时间排序-->
	<select id="queryHandOveredRecordsByWaybillNo" parameterType = "String" resultMap = "queryHandOverBillResultMap">
				select hb.id id,
		       hb.handover_no handOverBillNo,
		       hb.orig_org_name departDept,
		       hb.ORIG_ORG_CODE departDeptCode,
		       hb.dest_org_name arriveDept,
		       hb.dest_org_code arriveDeptCode,
		       hb.driver_name driverName,
		       hb.driver_code driver,
		       hb.driver_mobile_phone driverTel,
		       hb.vehicle_no vehicleNo,
		       hb.load_finish_time loadEndTime,
		       hb.goods_type goodsType,
		       hb.handover_type handOverType,
		       hb.isagencyvisit isAgencyVisit,
		       hb.create_user_name createUserName,
		       hb.notes note,
		       hb.handoverbill_state handOverBillState,
		       hb.waybill_qty_total totalWaybill,
		       hb.goods_qty_total totalPieces,
		       hb.weight_total totalWeight,
		       hb.volume_total totalCubage,
		       hb.money_total / 100 totalMoney,
		       hb.fast_waybill_qty fastWaybillQty,
		       hb.cod_amount_total totalCodAmount,
		       hb.LINE_NAME lineName,
		       hb.load_task_no loadTaskNo,
		       hb.truckdepartplandetail_id truckDepartPlanDetailId,
		       hb.create_time handOverTime,
		       hb.CREATE_USER_CODE createUserCode,
		       hb.modify_user_name modifyUserName,
		       hb.be_create_by_pda isCreatedByPDA,
		       hb.BE_CREATE_TASKTRUCK isCreateTaskTruck,
		       hb.be_car_load isCarLoad,
		       hb.AF_GOODS_QTY waybillQtyAF,
			   hb.AF_GOODS_VOLUME goodsVolumeAF,
			   hb.AF_GOODS_WEIGHT goodsWeightAF,
			   hb.FLF_GOODS_QTY waybillQtyFLF,
			   hb.FLF_GOODS_VOLUME goodsVolumeFLF,
		       hb.FLF_GOODS_WEIGHT goodsWeightFLF,
		       hb.FSF_GOODS_QTY waybillQtyFSF,
		       hb.FSF_GOODS_VOLUME goodsVolumeFSF,
		       hb.FSF_GOODS_WEIGHT goodsWeightFSF
		  from tfr.t_opt_handoverbill hb
		 inner join tfr.t_opt_handoverbill_detail hd
		    on hb.handover_no = hd.handover_no
		 where hd.waybill_no = #{waybillNo,jdbcType=VARCHAR}
		   and hb.handoverbill_state != 90
		 order by hb.create_time
	</select>
	
	
		<!--根据运单号查询该运单所有被交接记录（包括废单），按时间排序-->
	<select id="queryHandOveredAllRecordsByWaybillNo" parameterType = "String" resultMap = "queryHandOverBillResultMap">
				select hb.id id,
		       hb.handover_no handOverBillNo,
		       hb.orig_org_name departDept,
		       hb.ORIG_ORG_CODE departDeptCode,
		       hb.dest_org_name arriveDept,
		       hb.dest_org_code arriveDeptCode,
		       hb.driver_name driverName,
		       hb.driver_code driver,
		       hb.driver_mobile_phone driverTel,
		       hb.vehicle_no vehicleNo,
		       hb.load_finish_time loadEndTime,
		       hb.goods_type goodsType,
		       hb.handover_type handOverType,
		       hb.isagencyvisit isAgencyVisit,
		       hb.create_user_name createUserName,
		       hb.notes note,
		       hb.handoverbill_state handOverBillState,
		       hb.waybill_qty_total totalWaybill,
		       hb.goods_qty_total totalPieces,
		       hb.weight_total totalWeight,
		       hb.volume_total totalCubage,
		       hb.money_total / 100 totalMoney,
		       hb.fast_waybill_qty fastWaybillQty,
		       hb.cod_amount_total totalCodAmount,
		       hb.LINE_NAME lineName,
		       hb.load_task_no loadTaskNo,
		       hb.truckdepartplandetail_id truckDepartPlanDetailId,
		       hb.create_time handOverTime,
		       hb.CREATE_USER_CODE createUserCode,
		       hb.modify_user_name modifyUserName,
		       hb.be_create_by_pda isCreatedByPDA,
		       hb.BE_CREATE_TASKTRUCK isCreateTaskTruck,
		       hb.be_car_load isCarLoad,
		       hb.AF_GOODS_QTY waybillQtyAF,
			   hb.AF_GOODS_VOLUME goodsVolumeAF,
			   hb.AF_GOODS_WEIGHT goodsWeightAF,
			   hb.FLF_GOODS_QTY waybillQtyFLF,
			   hb.FLF_GOODS_VOLUME goodsVolumeFLF,
		       hb.FLF_GOODS_WEIGHT goodsWeightFLF,
		       hb.FSF_GOODS_QTY waybillQtyFSF,
		       hb.FSF_GOODS_VOLUME goodsVolumeFSF,
		       hb.FSF_GOODS_WEIGHT goodsWeightFSF
		  from tfr.t_opt_handoverbill hb
		 inner join tfr.t_opt_handoverbill_detail hd
		    on hb.handover_no = hd.handover_no
		 where hd.waybill_no = #{waybillNo,jdbcType=VARCHAR}
		 order by hb.create_time
	</select>
	
	<!-- 根据装车任务编号获取交接单信息, 目前装车任务编号与交接单是一对一的关系 -->
	<select id="queryHandOverBillByLoadTaskNo" parameterType="String" resultMap="queryHandOverBillResultMap">
	<![CDATA[
		select *
		  from (select id,
		               handover_no handOverBillNo,
		               vehicle_no  vehicleNo,
		               rownum      row_num
		          from tfr.t_opt_handoverbill
		         where load_task_no = #{loadTaskNo})
		 where row_num = 1
	]]>
	</select>
	
	<update id="updateHandOverbillForWaybill" parameterType="java.util.List">
		begin
		<foreach collection="list" item="item" separator=";">
			update
			tfr.t_opt_handoverbill t
			<set>
				<if test="item.weightTotal != null or item.weightTotal == 0">
					t.weight_total = #{item.weightTotal,jdbcType=DECIMAL},
				</if>
				<if test="item.volumeTotal != null or item.volumeTotal == 0">
					t.volume_total = #{item.volumeTotal,jdbcType=DECIMAL},
				</if>
				<if test="item.goodsWeightAF != null or item.goodsWeightAF == 0">
					t.AF_GOODS_WEIGHT = #{item.goodsWeightAF,jdbcType=DECIMAL},
				</if>
				<if test="item.goodsVolumeAF != null or item.goodsVolumeAF == 0">
					t.AF_GOODS_VOLUME = #{item.goodsVolumeAF,jdbcType=DECIMAL},
				</if>
				
				<if test="item.goodsVolumeFLF != null or item.goodsVolumeFLF == 0">
					t.FLF_GOODS_VOLUME = #{item.goodsVolumeFLF,jdbcType=DECIMAL},
				</if>
				<if test="item.goodsWeightFLF != null or item.goodsWeightFLF == 0">
					t.FLF_GOODS_WEIGHT = #{item.goodsWeightFLF,jdbcType=DECIMAL},
				</if>
				
				<if test="item.goodsVolumeFSF != null or item.goodsVolumeFSF == 0">
					t.FSF_GOODS_VOLUME = #{item.goodsVolumeFSF,jdbcType=DECIMAL},
				</if>
				<if test="item.goodsWeightFSF != null or item.goodsWeightFSF == 0">
					t.FSF_GOODS_WEIGHT = #{item.goodsWeightFSF,jdbcType=DECIMAL},
				</if>
					t.MODIFY_TIME=sysdate
			</set>
			<where>
				t.handover_no = #{item.handOverBillNo,jdbcType=VARCHAR} 
			</where>
		</foreach>
		;end;
	</update>
	
	<!--根据车辆任务明细ids查询对应的交接单明细信息，用于官网微信-->
	<select id="queryHandOverBillDetailByIds" resultMap="waybillStockResultMap" parameterType="java.util.List">
		select 
			hd.waybill_no waybillNo,
	       hd.handover_no handOverBillNo,
	       hd.HANDOVER_GOODS_QTY pieces,
	       hd.GOODS_QTY waybillPieces
   		from  tfr.t_opt_truck_task_bill   b 
  	 	inner join  tfr.t_opt_handoverbill_detail hd on hd.handover_no = b.bill_no 
 		where  b.bill_type = 'HANDOVER'
 			and b.truck_task_detail_id in
 			( <foreach collection="list" item="item" separator=",">
				  #{item,jdbcType=VARCHAR}
			  </foreach>
			)
	</select>
	<!--根据运单号和到达部门查询已到达件数-->
	<select id="queryWaybillCountByNoAndDept" resultType="int" parameterType="map">
		select NVL(sum(hd.handover_goods_qty),0)
  			from tfr.t_opt_handoverbill_detail hd
		 inner join tfr.t_opt_truck_task_bill tb on tb.bill_no = hd.handover_no
		 inner join tfr.t_opt_truck_task_detail td on td.id =
                                              tb.truck_task_detail_id
                                          and td.status in ('ARRIVED', 'UNLOADED')
		 where hd.waybill_no = #{waybillNo,jdbcType=VARCHAR}
		   and td.dest_org_code = #{destOrgCode,jdbcType=VARCHAR}
	</select>
	
	<!--根据运单号和到达部门查询已到达件数  -->
	<select id="queryWaybillComplement" resultType="int" parameterType="String">
		SELECT COUNT(1) FROM tfr.t_opt_complement_log
			t where t.waybill_no = #{waybillNo,jdbcType=VARCHAR} and rownum = 1
	</select>
	<!--  -->
	<resultMap id="queryHoldingStateMap"
		type="com.deppon.foss.module.transfer.load.api.shared.dto.HoldingStateDto">
		<result property="accruedState" column="accruedState" />
		<result property="tempRentalMarkNo" column="tempRentalMarkNo" />
	</resultMap>
	<!-- 查询交接单在租车标记表中的预提状态 -->
	<select id="queryHoldingState" resultMap="queryHoldingStateMap" parameterType="String">
		select tt.accrued_state accruedState,
		    tt.temprental_mark_no tempRentalMarkNo
		from TFR.T_OPT_TEMPRENTALMARK tt
			inner join TFR.T_OPT_TEMPRENTALMARK_DETAIL td on td.temprental_mark_no=tt.temprental_mark_no
			where tt.active='Y' 
			and td.bill_no=#{handOverBillNo,jdbcType=VARCHAR}
	</select>
	
	<!-- 根据运单号查询代理单号 -->
	<select id="getAgentWaybillNoByWaybillNo" resultType="String" parameterType="String">
		select s.agent_waybill_no 
		from tfr.t_opt_print_agentwaybill s
		 where s.waybill_no = #{waybillNo,jdbcType=VARCHAR}
		 and  s.serial_no = #{serialNo,jdbcType=VARCHAR}
		 and s.active ='Y'

	</select>
	
	<!-- 根据code 查询对应的外场库存的异常库区 
	<select id="queryGoodsExceptionArea" resultType="String" parameterType="String">
	    select g.goods_area_code
		  from bse.t_bas_goods_area g
		where g.org_code = #{code}
		  and g.goods_area_type = 'BSE_GOODSAREA_TYPE_EXCEPTION'
		  and g.active ='Y'
	s
	</select>-->
	
	<!-- 根据运单号,当前部门code,当前部门异常库code 更新库存 
	<update id="updateAreaCode" parameterType = "HashMap">
	   update tfr.t_opt_stock s
		 set s.goods_area_code =#{areacode}
	   where s.org_code =#{code}
		 and s.waybill_no =#{waybillNo}
	</update>-->
	
	<select id="queryHandoverBillDetailByWaybillNoAndOrgCord" resultMap="handOverBillDetailResultMap"
		parameterType="HashMap">
		select 
			 d.*
		      from tfr.t_opt_handoverbill_detail d
				left join tfr.t_opt_handoverbill h 
				on d.handover_no = h.handover_no
				where d.waybill_no=#{waybillNo,jdbcType=VARCHAR}
				<if test="origOrgCode != null and origOrgCode != ''">
					and h.orig_org_code=#{origOrgCode,jdbcType=VARCHAR}			
				</if>
				and h.handoverbill_state not in (10,90)
	</select>
	<!-- 商务专递交接单详情界面，根据交接单号，得到该交接单号下的所有运单272681 -->
	<select id="queryBusAirHandOverBillDetailByNo" resultMap="handOverBillDtoResultMap"
		parameterType="HashMap">
	<![CDATA[
		select f.AIR_HANDOVER_NO handOverBillNo,
       wd.WAYBILL_NO waybillNo, /*运单号*/
       f.AIR_HANDOVERTYPE handOverType,
       p.name transProperty, /*运输性质*/
       p.code transPropertyCode,
       h.GOODS_QTY pieces, /*件数*/
       h.GROSS_WEIGHT weight, /*毛重*/
       h.BILLING_WEIGHT weightAc, /*计费重量*/
       h.GOODS_VOLUME cubage, /*体积*/
       h.GOODS_VOLUME cubageAc,
       h.NOTES note, /*备注*/
       c.cod_amount codAmount,
       c.goods_name goodsName, /*货物名称*/
       c.goods_package packing, /*包装*/
       c.inner_notes waybillNote,
       c.precious_goods isPreciousGoods,
       c.receive_org_name receiveOrgName,
       md.name arriveDept,
       c.receive_customer_name consignee, /*收货人*/
       c.target_org_code destination, /*目的站*/
       c.goods_qty_total waybillPieces,
       c.insurance_fee/100 insuranceValue,
       h.FEE_TOTAL waybillFee, /*运费*/
       '' isCarLoad,
       c.goods_type_code goodsType, /*货物类型*/
       c.customer_pickup_org_code pkpOrgCode, /*提货网点*/
       c.customer_pickup_org_name pkpOrgName,
       c.receive_customer_prov_code receiveCustomerProvCode, /*收货省市区*/
       c.receive_customer_city_code receiveCustomerCityCode,
       c.receive_customer_dist_code receiveCustomerDistCode,
       waybill.RECEIVER_ADDRESS receiveCustomerAddress, /*收货人地址*/
       c.to_pay_amount toPayAmount,
       waybill.RECEIVER_NAME receiveCustomerContact, /*收货联系人*/
       waybill.RECEIVER_CONTACT_PHONE receiveCustomerMobilephone, /*收货人电话*/
       c.receive_customer_phone receiveCustomerPhone,
       c.goods_size goodsSize, /*货物尺寸*/
       c.delivery_customer_name deliveryCustomerName, /*发货人*/
       waybill.DEPT_REGION_CODE receiveOrgCode, /*出发部门*/
       '' isFastGoods
	  from tfr.t_opt_air_handoverbill_detail h
	  left join tfr.t_opt_air_waybill waybill on h.AIR_WAYBILL_NO = waybill.AIR_WAYBILL_NO
	  left join tfr.t_opt_air_waybill_detail wd  on waybill.ID = wd.AIR_WAYBILL_ID
	  left join tfr.t_opt_air_handoverbill f on f.id = h.AIR_HANDOVERBILL_ID
	  left join pkp.t_srv_waybill c  on wd.waybill_no = c.waybill_no  and c.active = 'Y'
	  left join pkp.t_srv_product p on c.product_code = p.code  and p.active = 'Y'
	  left join bse.mv_dest_net md  on c.CUSTOMER_PICKUP_ORG_CODE = md.code  and md.active = 'Y'
	  left join bse.mv_dest_net mdn on c.RECEIVE_ORG_CODE = mdn.code and mdn.active = 'Y'
	]]>
		<where>
			f.AIR_HANDOVER_NO = #{handOverBillNo} 
		</where>
	</select>
	
		<!-- 交接单详情界面，双击列表中商务专递的运单号，得到流水号list 272681 -->
	<select id="getBusAirHandOverBillSerialNoDetailsByWayBillNo" resultMap="getHandOverBillSerialNoDetailsByWayBillNoResultMap" 
		parameterType="HashMap">
		    select 
		    	   serialNo.SERIAL_NO  serialNo,
		    	   serialNo.CREATE_TIME handOverTime,
		    	   handoverbill.ORG_CODE origOrgCode,
			       handoverbill.AIR_HANDOVER_NO  handOverBillNo,
			       wb.WAYBILL_NO  waybillNo,
			       wb.gross_weight/wb.goods_qty weight,
      		       wb.volume/wb.goods_qty volumn,
      		       nvl2(bss.id ,'Y','N') beScan,
		      	   sw.product_code productCode,
		      	   -1 isInStorage
			from  tfr.t_opt_air_handoverbill handoverbill
        left join tfr.t_opt_air_handoverbill_detail   hb on handoverbill.ID = hb.AIR_HANDOVERBILL_ID
        left join tfr.t_opt_air_waybill waybill on waybill.AIR_WAYBILL_NO = hb.AIR_WAYBILL_NO
        left join tfr.t_opt_air_waybill_detail wb on waybill.ID = wb.AIR_WAYBILL_ID
        left join tfr.t_opt_air_waybill_serialno serialNo on wb.ID = serialNo.AIR_WAYBILL_DETAIL_ID 
        left join pkp.t_srv_waybill sw on sw.waybill_no  = wb.waybill_no and sw.active='Y'
        left join tfr.t_opt_bcmach_sortscan bss on bss.waybill_no = wb.Waybill_No and bss.serial_no=serialNo.serial_no 
		<where>
			handoverbill.AIR_HANDOVER_NO = #{handOverBillNo}
			<if test="waybillNo != null and waybillNo != ''">
				and wb.WAYBILL_NO =#{waybillNo}
			</if>
			order by serialNo.serial_no asc
		</where>
	</select>
	
	 <!-- 272681 根据装车任务编号获取交接单号, 目前装车任务编号与交接单是一对多的关系 -->
	<select id="queryHandOverBillNoByLoadTaskNo" parameterType="String" resultType="String">
	<![CDATA[
		 select wm_concat(h.handover_no)
         from tfr.t_opt_handoverbill h
		 where h.load_task_no = #{loadTaskNo}
	]]>
	</select>
	
	<!--332219 查询查询非本部门库存运单 -->
	<select id="querySaleWaybillStockList" resultMap="waybillStockResultMap" 
		parameterType="com.deppon.foss.module.transfer.load.api.shared.dto.QueryWaybillForHandOverBillConditionDto">
		  select 
	        waybillNo,
	            goodsName,
	            isJoinCar,
	            packing,
	            cubage,
	            weight,
	            pieces,
	            instorageDate,
	            nextOrgCode,
	            currentDeptCode,
	        transPropertyCode,
	        transProperty,
	        seq,
	        insuranceValue,
	        waybillDate,
	        codAmount,
	        isCarLoad,
	        waybillPieces,
	        isPreciousGoods,
	        waybillNote,
	        origOrgCode,
	        arriveDept,
	        receiveOrgName,
	        isFastGoods,
	        consignee,
	        destination,
	        waybillFee,
	        inStockDuration 
	         from (
	         /*非本部门库存货物**/
	        select stock.waybill_no waybillNo,
	              0 isPriorityGoods,
	                      waybill.goods_name goodsName,
	                      'N' isJoinCar,
	                      waybill.goods_package packing,
	                      pro.code transPropertyCode,
	                        pro.name transProperty,
	                        pro.seq seq,
	                      round((waybill.goods_volume_total / waybill.goods_qty_total)*stock.stock_goods_qty,3) cubage,
	                      round((waybill.goods_weight_total / waybill.goods_qty_total)*stock.stock_goods_qty,3) weight,
	                      stock.stock_goods_qty pieces,
	                      stock.in_stock_time instorageDate,
	                      stock.next_org_code nextOrgCode,
	                      stock.org_code currentDeptCode,
	                      waybill.insurance_amount / 100 insuranceValue,
	                      waybill.bill_time waybillDate,
	                      waybill.cod_amount / 100 codAmount,
	                      waybill.IS_WHOLE_VEHICLE isCarLoad,
	                      waybill.goods_qty_total waybillPieces,
	                      waybill.precious_goods isPreciousGoods,
	                      waybill.inner_notes waybillNote,
	                      waybill.Receive_Org_Code origOrgCode,
	                      md.name arriveDept,
	                      mdn.name receiveOrgName,
	                      'Y' isFastGoods,
	                      waybill.Receive_Customer_Name consignee,
	                      waybill.Target_Org_Code destination,
	                      waybill.Total_Fee / 100 waybillFee,
	                      trunc((sysdate - cast(stock.in_stock_time as date)) * 24, 1) as inStockDuration
	                 from tfr.t_opt_waybill_stock_sale stock
	                 left join pkp.t_srv_waybill waybill on stock.waybill_no = waybill.waybill_no and waybill.active = 'Y'
	                 left join bse.mv_dest_net md on waybill.CUSTOMER_PICKUP_ORG_CODE = md.code and md.active = 'Y'
	                 left join bse.mv_dest_net mdn on waybill.RECEIVE_ORG_CODE = mdn.code  and mdn.active = 'Y'
	                 left join pkp.t_srv_product pro on waybill.product_code = pro.code and pro.active = 'Y' 
	    <where>
	    stock.is_out = 'N' 
	                     and pro.levels = 3
	                     and stock.IN_STOCK_TIME between #{beginInStorageTime} and #{endInStorageTime} 
	                and (
	      <foreach collection="arriveDeptList" item="item" separator="or">
	                  stock.next_org_code = #{item,jdbcType=VARCHAR}
	      </foreach>
	                )
	                and (select count(0) from bse.t_bas_sales_department a where a.code=stock.next_org_code and a.active='Y' and a.station='Y') = 0
	                and stock.ORG_CODE = #{currentDeptCode}
	      <if test="transPropertyList != null and transPropertyList.size() != 0  and !transPropertyList.get(0).equals('ALL')">
	                  and waybill.product_code in
	                   (
	                     <foreach collection="transPropertyList" item="item" separator=",">
	                      #{item,jdbcType=VARCHAR}
	                  </foreach>
	                   )
	      </if>
	      <if test="transType != null and transType != ''  and transType != 'ALL'">
	                  and pro.transport_type = #{transType}
	      </if>
	      <if test="goodsType != null and goodsType != ''  and goodsType != 'ALL'">
	                  and waybill.goods_type_code = #{goodsType}
	      </if>
	      <if test="waybillNo != null and waybillNo != ''">
	                  and waybill.waybill_No = #{waybillNo}
	      </if>
	    </where>
	    )
	    <where>
	    pieces <![CDATA[>]]> 0 
	    </where>
	</select>
	
	<!--332219   查询交接运单界面，双击某合车运单，查询非本部库存的该合车运单的所有流水号 -->
	<select id="querySaleJoinCarSerialNoStockList" parameterType="com.deppon.foss.module.transfer.load.api.shared.dto.QuerySerialNoListForWaybillConditionDto"
		resultMap="serialNoStockResultMap">
		
			select /** FOSS-中转-装车-交接单-查询交接运单界面，双击某合车运单，查询非本部库存的该合车运单的所有流水号 **/
		      tl.waybill_no waybillNo,
		      tl.serial_no serialNo,
		      tl.org_code storageDept,
		      stock.in_stock_time instorageDate,
		      round(nvl(bss.weight ,wb.goods_weight_total/wb.goods_qty_total),3) weight,
              round(nvl(bss.volumn ,wb.goods_volume_total/wb.goods_qty_total),3) volumn,
	          nvl2(bss.id ,'Y','N') beScan,
		      1 isInStorage,
		      wb.product_code productCode,
		      case stock.pre_handover_status when 
	         'PRE_HANDOVER' then 'Y' else 'N' end isPreHandOver,
		      'Y' isJoinCar
		      from tfr.t_opt_together_list tl 
		      left join tfr.t_opt_stock_sale stock  on tl.waybill_no = stock.waybill_no and tl.serial_no = stock.serial_no
		      		 and tl.org_code = stock.org_code
		           <if test="isQuickAdd != null">
		           		and stock.PRE_HANDOVER_STATUS is null 
					</if>
		     left join bse.t_bas_goods_area ga   on tl.new_goods_area_code = ga.goods_area_code and ga.active = 'Y'
		     left  JOIN pkp.t_srv_waybill wb ON wb.waybill_no= tl.waybill_no AND wb.active='Y'
	         left  JOIN tfr.t_opt_bcmach_sortscan bss on bss.waybill_no = tl.waybill_no and tl.serial_no=bss.serial_no 
			<where>
		    	tl.waybill_no = #{waybillNo} 
		    	<if test="nextDeptCodeList != null and nextDeptCodeList.size() != 0">
			    	and 
					(<foreach collection="nextDeptCodeList" item="item" separator="or">
							ga.arrive_region_code  = #{item,jdbcType=VARCHAR}
					</foreach>)
		    	</if>
	            and tl.org_code = #{currentDeptCode}
			</where>
	</select>
	
	<!--332219 查询交接运单界面，双击某运单，查询非本部库存的该运单的所有流水号 -->
	<select id="querySaleSerialNoStockList" parameterType="com.deppon.foss.module.transfer.load.api.shared.dto.QuerySerialNoListForWaybillConditionDto"
		resultMap="serialNoStockResultMap">
		select /** FOSS-中转-装车-交接单-查询交接运单界面，双击某运单，查询非本部库存的该运单的所有流水号 **/
			t.waybill_no waybillNo,
            t.serial_no serialNo,
            t.org_code storageDept,
            t.in_stock_time instorageDate,
            1 isInStorage,
            round(nvl(bss.weight ,wb.goods_weight_total/wb.goods_qty_total),3) weight,
            round(nvl(bss.volumn ,wb.goods_volume_total/wb.goods_qty_total),3) volumn,
            nvl2(bss.id ,'Y','N') beScan,
            wb.product_code productCode,
            case t.pre_handover_status when 
         	'PRE_HANDOVER' then 'Y' else 'N' end isPreHandOver,
            'N' isJoinCar
          from tfr.t_opt_STOCK_sale t 
          left join bse.t_bas_goods_area ga on t.goods_area_code = ga.goods_area_code and ga.org_code = t.org_code and ga.active = 'Y'
          left  JOIN pkp.t_srv_waybill wb ON wb.waybill_no= t.waybill_no AND wb.active='Y'
          left  JOIN tfr.t_opt_bcmach_sortscan bss on bss.waybill_no = t.waybill_no   and t.serial_no=bss.serial_no 
		<where>
		    t.is_out = 'N' and
			t.waybill_no = #{waybillNo} 
			<if test="isQuickAdd != null">
            		and t.PRE_HANDOVER_STATUS is null 
			</if>
			<if test="nextDeptCodeList != null and nextDeptCodeList.size() != 0">
            	and  
				(<foreach collection="nextDeptCodeList" item="item" separator="or">
						t.next_org_code = #{item,jdbcType=VARCHAR}
				</foreach>)
			</if>
			and t.org_code = #{currentDeptCode} 
			and (ga.goods_area_type not in (
			<foreach collection="abnormalGoodsAreaTypeList" item="item" separator=",">
					  #{item,jdbcType=VARCHAR}
			</foreach>
			) or ga.goods_area_type is null)
		</where>
			order by t.in_stock_time 
	</select>
	
	<!--332219 查询非本部交接运单界面，获取库存运单的总量 -->
	<select id="getSaleWaybillStockCount" resultType="Long" 
		parameterType="com.deppon.foss.module.transfer.load.api.shared.dto.QueryWaybillForHandOverBillConditionDto">
			select count(*) from (select 
            waybillNo,
            goodsName,
            isJoinCar,
            packing,
            cubage,
            weight,
            pieces,
            instorageDate,
            nextOrgCode,
            currentDeptCode,
	        transPropertyCode,
	        transProperty,
	        seq,
	        insuranceValue,
	        waybillDate,
	        codAmount,
	        isCarLoad,
	        waybillPieces,
	        isPreciousGoods,
	        waybillNote,
	        origOrgCode,
	        arriveDept,
	        receiveOrgName,
	        isFastGoods,
	        consignee,
	        destination,
	        waybillFee,
	        inStockDuration 
	         from (
	         /*非本部门库存货物**/
	        select stock.waybill_no waybillNo,
	              0 isPriorityGoods,
	                      waybill.goods_name goodsName,
	                      'N' isJoinCar,
	                      waybill.goods_package packing,
	                      pro.code transPropertyCode,
	                        pro.name transProperty,
	                        pro.seq seq,
	                      round((waybill.goods_volume_total / waybill.goods_qty_total)*stock.stock_goods_qty,3) cubage,
	                      round((waybill.goods_weight_total / waybill.goods_qty_total)*stock.stock_goods_qty,3) weight,
	                      stock.stock_goods_qty pieces,
	                      stock.in_stock_time instorageDate,
	                      stock.next_org_code nextOrgCode,
	                      stock.org_code currentDeptCode,
	                      waybill.insurance_amount / 100 insuranceValue,
	                      waybill.bill_time waybillDate,
	                      waybill.cod_amount / 100 codAmount,
	                      waybill.IS_WHOLE_VEHICLE isCarLoad,
	                      waybill.goods_qty_total waybillPieces,
	                      waybill.precious_goods isPreciousGoods,
	                      waybill.inner_notes waybillNote,
	                      waybill.Receive_Org_Code origOrgCode,
	                      md.name arriveDept,
	                      mdn.name receiveOrgName,
	                      'Y' isFastGoods,
	                      waybill.Receive_Customer_Name consignee,
	                      waybill.Target_Org_Code destination,
	                      waybill.Total_Fee / 100 waybillFee,
	                      trunc((sysdate - cast(stock.in_stock_time as date)) * 24, 1) as inStockDuration
	                 from tfr.t_opt_waybill_stock_sale stock 
	                 left join pkp.t_srv_waybill waybill on stock.waybill_no = waybill.waybill_no and waybill.active = 'Y'
	                 left join bse.mv_dest_net md on waybill.CUSTOMER_PICKUP_ORG_CODE = md.code and md.active = 'Y'
	                 left join bse.mv_dest_net mdn on waybill.RECEIVE_ORG_CODE = mdn.code  and mdn.active = 'Y'
	                 left join pkp.t_srv_product pro on waybill.product_code = pro.code and pro.active = 'Y' 
	    <where>
	     stock.is_out = 'N' and
	    stock.plan_start_time <![CDATA[<]]> To_date(to_char(sysdate,'yyyy-mm-dd hh24:mi:ss'),'yyyy-mm-dd hh24:mi:ss')
	    
	                     and pro.priority = 'FAST' and pro.levels = 3
	                     <![CDATA[ and pro.seq <3 ]]>
	                     and stock.IN_STOCK_TIME between #{beginInStorageTime} and #{endInStorageTime} 
	                and (
	      <foreach collection="arriveDeptList" item="item" separator="or">
	                  stock.next_org_code = #{item,jdbcType=VARCHAR}
	      </foreach>
	                )
	                and (select count(0) from bse.t_bas_sales_department a where a.code=stock.next_org_code and a.active='Y' and a.station='Y') = 0
	                and stock.ORG_CODE = #{currentDeptCode}
	      <if test="transPropertyList != null and transPropertyList.size() != 0  and !transPropertyList.get(0).equals('ALL')">
	                  and waybill.product_code in
	                   (
	                     <foreach collection="transPropertyList" item="item" separator=",">
	                      #{item,jdbcType=VARCHAR}
	                  </foreach>
	                   )
	      </if>
	      <if test="transType != null and transType != ''  and transType != 'ALL'">
	                  and pro.transport_type = #{transType}
	      </if>
	      <if test="goodsType != null and goodsType != ''  and goodsType != 'ALL'">
	                  and waybill.goods_type_code = #{goodsType}
	      </if>
	      <if test="waybillNo != null and waybillNo != ''">
	                  and waybill.waybill_No = #{waybillNo}
	      </if>
	    </where>
	    )
	    <where>
	    pieces <![CDATA[>]]> 0 
	    </where>
	    )
	</select>	
	
	<update id="updateWKHandOverBillStateByNo"  parameterType = "HashMap">
		update
		TFR.T_WK_TRF_BILL  t
		<set>
			  t.HANDOVERSTATE = #{handOverBillState,jdbcType=VARCHAR},
			  t.UPDATETIME=sysdate
		</set>
		<where>
			t.HANDOVERBILLNO = #{handOverBillNo,jdbcType=VARCHAR} 
		</where>
	</update>
	
	<!--332219   快速添加运单，根据运单号获取非本部门运单库存 -->
	<select id="queryWaybillStockSaleByWaybillNo" resultMap="waybillStockResultMap" 
		parameterType="com.deppon.foss.module.transfer.load.api.shared.dto.QueryWaybillForHandOverBillConditionDto">
		<!--非本部库存运单-->
		       select stock.waybill_no waybillNo,
                 waybill.goods_name goodsName,
                 'N' isJoinCar,
                 waybill.goods_package packing,
                 pro.code transPropertyCode,
                 pro.name transProperty,
                 pro.seq seq,
                 round((waybill.goods_volume_total / waybill.goods_qty_total) *
                       stock.stock_goods_qty,
                       3) cubage,
               round((waybill.goods_weight_total / waybill.goods_qty_total) *
                       stock.stock_goods_qty,
                       3) weight,
                 stock.stock_goods_qty pieces,
                 stock.in_stock_time instorageDate,
                 stock.next_org_code nextOrgCode,
                 stock.org_code currentDeptCode,
                 waybill.insurance_amount / 100 insuranceValue,
                 waybill.bill_time waybillDate,
                 waybill.cod_amount / 100 codAmount,
                 waybill.IS_WHOLE_VEHICLE isCarLoad,
                 waybill.goods_qty_total waybillPieces,
                 waybill.precious_goods isPreciousGoods,
                 waybill.inner_notes waybillNote,
                 waybill.Receive_Org_Code origOrgCode,
                 md.name arriveDept,
                 mdn.name receiveOrgName,
                 case pro.priority when 'FAST' then 'Y' else 'N' end isFastGoods,
                 ga.goods_area_code goodsAreaCode,
                 ga.goods_area_type goodsAreaType,
                 ga.goods_area_name goodsAreaName,
                 waybill.Receive_Customer_Name consignee,
                 waybill.Target_Org_Code destination,
                 waybill.Total_Fee / 100 waybillFee 
           from tfr.t_opt_waybill_stock_sale stock
           left join pkp.t_srv_waybill waybill
             on stock.waybill_no = waybill.waybill_no
            and waybill.active = 'Y'
           left join bse.mv_dest_net md
             on waybill.CUSTOMER_PICKUP_ORG_CODE = md.code
            and md.active = 'Y'
           left join bse.mv_dest_net mdn
             on waybill.RECEIVE_ORG_CODE = mdn.code
            and mdn.active = 'Y'
           left join pkp.t_srv_product pro
             on waybill.product_code = pro.code
            and pro.active = 'Y' and pro.levels = 3
           left join bse.t_bas_goods_area ga
             on stock.goods_area_code = ga.goods_area_code
            and ga.org_code = stock.org_code
            and ga.active = 'Y'
          WHERE 
    (<foreach collection="arriveDeptList" item="item" separator="or">
          stock.next_org_code = #{item,jdbcType=VARCHAR}
    </foreach>)
            and stock.ORG_CODE = #{currentDeptCode}
            and waybill.waybill_No = #{waybillNo}
	</select>
	
	<!--快速添加运单，根据运单号获取运单在非本部的库存，去除“下一部门”过滤   332219 -->
	<select id="queryWaybillStockByWaybillSaleNoWithoutNextOrg" resultMap="waybillStockResultMap" 
		parameterType="com.deppon.foss.module.transfer.load.api.shared.dto.QueryWaybillForHandOverBillConditionDto">
		     select stock.waybill_no waybillNo,
                 waybill.goods_name goodsName,
                 'N' isJoinCar,
                 waybill.goods_package packing,
                 pro.code transPropertyCode,
                 pro.name transProperty,
                 pro.seq seq,
                 round((waybill.goods_volume_total / waybill.goods_qty_total) *
                       stock.stock_goods_qty,
                       3) cubage,
                 round((waybill.goods_weight_total / waybill.goods_qty_total) *
                       stock.stock_goods_qty,
                       3) weight,
                 stock.stock_goods_qty pieces,
                 stock.in_stock_time instorageDate,
                 stock.next_org_code nextOrgCode,
                 stock.org_code currentDeptCode,
                 waybill.insurance_amount / 100 insuranceValue,
                 waybill.bill_time waybillDate,
                 waybill.cod_amount / 100 codAmount,
                 waybill.IS_WHOLE_VEHICLE isCarLoad,
                 waybill.goods_qty_total waybillPieces,
                 waybill.precious_goods isPreciousGoods,
                 waybill.inner_notes waybillNote,
                 waybill.Receive_Org_Code origOrgCode,
                 md.name arriveDept,
                 mdn.name receiveOrgName,
                 case pro.priority when 'FAST' then 'Y' else 'N' end isFastGoods,
                 ga.goods_area_code goodsAreaCode,
                 ga.goods_area_type goodsAreaType,
                 ga.goods_area_name goodsAreaName,
                 waybill.Receive_Customer_Name consignee,
                 waybill.Target_Org_Code destination,
                 waybill.Total_Fee / 100 waybillFee 
           from tfr.t_opt_waybill_stock_sale stock
           left join pkp.t_srv_waybill waybill
             on stock.waybill_no = waybill.waybill_no
            and waybill.active = 'Y'
           left join bse.mv_dest_net md
             on waybill.CUSTOMER_PICKUP_ORG_CODE = md.code
            and md.active = 'Y'
           left join bse.mv_dest_net mdn
             on waybill.RECEIVE_ORG_CODE = mdn.code
            and mdn.active = 'Y'
           left join pkp.t_srv_product pro
             on waybill.product_code = pro.code
            and pro.active = 'Y' and pro.levels = 3
           left join bse.t_bas_goods_area ga
             on stock.goods_area_code = ga.goods_area_code
            and ga.org_code = stock.org_code
            and ga.active = 'Y'
            and ga.goods_area_type not in (
		<foreach collection="abnormalGoodsAreaTypeList" item="item" separator=",">
								  #{item,jdbcType=VARCHAR}
		</foreach>
					  		  )
          WHERE stock.ORG_CODE = #{currentDeptCode}
            and waybill.waybill_No = #{waybillNo}
	</select>
	
	<!-- 根据运单号获取最后一次的交接单详情信息 -->
	<select id="queryHandOverBillByLast"  resultMap="queryHandOverBillResultMap"
		parameterType="String">
		<![CDATA[
		SELECT 			
		    hl.handover_no handOverBillNo,
			hl.handover_type handOverType,
			hl.create_time handOverTime,
			hl.orig_org_name departDept,
			hl.orig_org_code departDeptCode,
			hl.dest_org_name arriveDept,
			hl.dest_org_code arriveDeptCode from tfr.t_opt_handoverbill hl
		WHERE hl.handover_no IN(
			SELECT handover_no from 
				(SELECT dl.handover_no FROM tfr.t_opt_handoverbill_detail dl
					WHERE dl.waybill_no = #{waybillNo,jdbcType=VARCHAR}
					ORDER BY dl.create_time DESC
				) 
				WHERE ROWNUM=1)
		 ]]>
	</select>
</mapper>