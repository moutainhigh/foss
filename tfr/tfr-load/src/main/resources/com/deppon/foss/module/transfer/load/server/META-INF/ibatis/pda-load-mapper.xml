<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC 
	"-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="tfr-load">
	<resultMap id="pdaAssignLoadTaskResultMap"
		type="com.deppon.foss.module.transfer.pda.api.shared.domain.PDAAssignLoadTaskEntity">
		<result property="deliverBillNo" column="deliverBillNo" />
		<result property="taskNo" column="taskNo" />
		<result property="vehicleNo" column="vehicleNo" />
		<result property="state" column="state" />
		<result property="platformNo" column="platformNo" />
		<result property="loadTaskType" column="loadTaskType" />
		<result property="id" column="id" />
		<result property="goodsType" column="goodsType" />
		<result property="accessPointCode" column="accessPointCode" />
		<result property="accessPointName" column="accessPointName" />
		<result property="scanQtyTotal" column="scanQtyTotal" />
		<result property="tayller" column="tayller" />
	</resultMap>
	<resultMap id="pdaGoodsSerialNoDtoResultMap"
		type="com.deppon.foss.module.transfer.pda.api.shared.dto.PDAGoodsSerialNoDto">
		<result property="stockAreaCode" column="stockAreaCode" />
		<result property="isUnPacking" column="isUnPacking" />
		<result property="serialNo" column="serialNo" />
	</resultMap> 
	<resultMap id="loadTaskSerialNoDtoResultMap"
		type="com.deppon.foss.module.transfer.load.api.shared.dto.LoadTaskSerialNoDto">
		<result property="id" column="id" />
		<result property="serialNo" column="serialNo" />
		<result property="loadTime" column="loadTime" />
		<result property="wayBillNo" column="wayBillNo" />
		<result property="loadWaybillDetailId" column="loadWaybillDetailId" />
		<result property="beLoaded" column="beLoaded" />
		<result property="scanQty" column="scanQty" />
		<result property="loadQty" column="loadQty" />
		<result property="loadWeightTotal" column="loadWeightTotal" />
		<result property="loadVolumeTotal" column="loadVolumeTotal" />
		<result property="goodsState" column="goodsState" />
		<result property="taskNo" column="taskNo" />
		<result property="taskId" column="taskId" />
		<result property="taskState" column="taskState" />
		<result property="stockQty" column="stockQty" />
		<result property="orgCode" column="orgCode" />
	</resultMap>
	<resultMap id="pdaTaskEntityResultMap"
		type="com.deppon.foss.module.transfer.load.api.shared.domain.PDATaskEntity">
		<result property="id" column="id" />
		<result property="joinTime" column="joinTime" />
		<result property="leaveTime" column="leaveTime" />
		<result property="deviceNo" column="deviceNo" />
		<result property="beCreator" column="beCreator" />
		<result property="taskType" column="taskType" />
		<result property="taskNo" column="taskNo" />
	</resultMap>
	<resultMap id="loadDestOrgEntityResultMap"
		type="com.deppon.foss.module.transfer.load.api.shared.domain.LoadDestOrgEntity">
		<result property="id" column="id" />
		<result property="loadTaskId" column="loadTaskId" />
		<result property="destOrgCode" column="destOrgCode" />
		<result property="destOrgName" column="destOrgName" />
		<result property="truckDepartPlanDetailId" column="truckDepartPlanDetailId" />
		<result property="beCreateHandOver" column="beCreateHandOver" />
	</resultMap>
	<resultMap id="oaReportClearMoreResultMap"
		type="com.deppon.foss.module.transfer.common.api.shared.dto.OaReportClearMore">
		<result property="wayBillId" column="wayBillId" />
		<result property="goodsCount" column="goodsCount" />
		<result property="haveGoodsNoReplay" column="haveGoodsNoReplay" />
	</resultMap>
	<resultMap id="loadGoodsDetailSerialDtoResultMap"
		type="com.deppon.foss.module.transfer.load.api.shared.dto.LoadGoodsDetailSerialDto">
		<result property="taskNo" column="taskNo" />
		<result property="wayBillNo" column="wayBillNo" />
		<result property="serialNo" column="serialNo" />
		<result property="weight" column="weight" />
		<result property="wayBillQty" column="wayBillQty" />
		<result property="volume" column="volume" />
		<result property="goodsName" column="goodsName" />
		<result property="stockTime" column="stockTime" />
		<result property="transportType" column="transportType" />
		<result property="transportTypeCode" column="transportTypeCode" />
		<result property="receiveOrgCode" column="receiveOrgCode" />
		<result property="receiveOrgName" column="receiveOrgName" />
		<result property="reachOrgCode" column="reachOrgCode" />
		<result property="reachOrgName" column="reachOrgName" />
		<result property="packing" column="packing" />
		<result property="bePriorityGoods" column="bePriorityGoods" />
		<result property="beJoinCar" column="beJoinCar" />
		<result property="notes" column="notes" />
		<result property="modifyState" column="modifyState" />
		<result property="isUnPacking" column="isUnPacking" />
		<result property="isValue" column="isValue" />
		<result property="isToDoList" column="isToDoList" />
		<result property="stockAreaName" column="stockAreaName" />
		<result property="stockAreaCode" column="stockAreaCode" />
		<result property="stockAreaType" column="stockAreaType" />
		<result property="modifyContent" column="modifyContent" />
		<result property="creatorCode" column="creatorCode" />
		<result property="creatorName" column="creatorName" />
		<result property="stockQty" column="stockQty" />
		<result property="operateQty" column="operateQty" />
		<result property="stationNumber" column="stationNumber" />
		<result property="receiveCustDistName" column="receiveCustDistName" />
		<result property="beSortScan" column="beSortScan" />
	</resultMap>
	<resultMap id="packagePathResultMap"
		type="com.deppon.foss.module.transfer.pda.api.shared.dto.PackagePathLoaderDto">
		<result property="objectiveOrgCode" column="OBJECTIVE_ORG_CODE" />
		<result property="objectiveOrgName" column="OBJECTIVE_ORG_NAME" />
	</resultMap>
	
	<!-- 快递产品类型类型 263072 -->
	<sql id="sqlPart_expressProductCode">
  		'PACKAGE','RCP','EPEP','DEAP'
  	</sql>
	
	 <!-- zwd 200968 2015-07-21 FOSS根据PDA传过来的运单号和当前所在转运场，查找出该运单走货路径中的下一转运场，并把结果返回给PDA。--> 
  <select id="unlockPackagePathDetail" parameterType="HashMap"  resultMap="packagePathResultMap">
   select o.code OBJECTIVE_ORG_CODE,
          o.name OBJECTIVE_ORG_NAME
         from tfr.t_opt_path_detail s
         LEFT JOIN bse.t_bas_org o
         ON s.objective_org_code = o.code
   where o.Active = 'Y'
         and s.waybill_no = #{waybillNo}
		 AND s.orig_org_code = #{orgCode}
  </select>
	<!-- 查询装车任务到达部门 -->
	<select id="queryLoadDestOrgs" parameterType="String" resultMap="loadDestOrgEntityResultMap">
		select o.id as id,
		       o.load_task_id as loadTaskId,
		       o.dest_org_name as destOrgName,
		       o.dest_org_code as destOrgCode,
		       o.truckdepartplandetail_id as truckDepartPlanDetailId,
		       o.be_create_handover as beCreateHandOver
		  from tfr.t_opt_load_dest_org o
		 where o.load_task_id = #{loadTaskId,jdbcType=VARCHAR}
	</select>
	<!-- 查询需上报差错运单 -->
	<select id="queryLoadOaReportMoreGoods" parameterType="String" resultMap="oaReportClearMoreResultMap">
		select w.waybill_no as wayBillId,
		       count(s.id) as goodsCount,
		       to_char(sum(case
		                     when s.goods_state in
		                          ('EXTRA_ALLOPATRY_ENTAINED', 'MORE_ALLOPATRY_ENTRAINED') then
		                      1
		                     else
		                      0
		                   end)) as haveGoodsNoReplay
		  from tfr.t_opt_load_waybill_detail w
		  inner join tfr.t_opt_load_serialno s on s.load_waybill_detail_id = w.id
		 where w.load_task_id = #{taskId}
		   and s.goods_state in
		       ('EXTRA_ALLOPATRY_ENTRAINED', 'MORE_ALLOPATRY_ENTRAINED',
		        'EXTRA_ENTRAINED', 'MORE_ENTRAINED')
		   <if test="bizBeginDate !=null and bizBeginDate !=''">and s.task_begin_time >= #{bizBeginDate,jdbcType=TIMESTAMP}</if>
		 group by w.waybill_no
	</select>
	<!-- 刷新派送装车运单清单 -->
	<select id="refrushNormalDeliverLoadTaskDetail" parameterType="String" resultMap="loadGoodsDetailSerialDtoResultMap">
				<![CDATA[ select t.task_no as taskNo,
		       p.loader_code as creatorCode,
		       p.loader_name as creatorName,
		       dd.waybill_no as wayBillNo,
		       s.serial_no as serialNo,
		       nvl(bss.weight,w.goods_weight_total) as weight,
		       nvl(bss.volumn,w.goods_volume_total) as volume,
           	   w.goods_qty_total as wayBillQty,
		       w.goods_name as goodsName,
		       w.goods_package as packing,
		       w.receive_org_code as receiveOrgCode,
		       w.receive_org_name as receiveOrgName,
		       w.customer_pickup_org_code as reachOrgCode,
		       w.customer_pickup_org_name as reachOrgName,
		       w.precious_goods as isValue,
		       s.in_stock_time as stockTime,
		       ws.goods_area_code as stockAreaCode,
		       dd.arrange_goods_qty as stockQty,
		       s.goods_area_name as stockAreaName,
		       area.goods_area_type as stockAreaType,
		       pp.name as transportType,
		       pp.code as transportTypeCode,
		       nvl2(bss.id,'Y','N') as beSortScan,
		       decode(r.is_packed,'N','Y','N') as isUnPacking,
		       NVL2(todo.waybill_no, 'Y', 'N') as isToDoList,
		       case
		         when case when pp.priority = 'FAST' then
		          (trunc(sysdate) - cast(ws.plan_start_time as date)) * 24 + 16
		         else
		          (trunc(sysdate) - cast(ws.plan_start_time as date)) * 24 + 40
		       end > 0 then 'Y' else 'N' end as bePriorityGoods,
           'N' as beJoinCar,
            wd.scan_qty as operateQty,
            nvl(sd.station_number,ob.station_number) as stationNumber,
            bd.name as receiveCustDistName
		  from tfr.t_opt_load_task t
		  inner join pkp.t_srv_deliverbill d on t.deliverbill_no = d.deliverbill_no and d.STATUS<>'CANCELED'
		  inner join pkp.t_srv_deliverbill_detail dd on dd.t_srv_deliverbill_id = d.id
		  left join tfr.t_opt_waybill_stock ws on dd.waybill_no = ws.waybill_no and ws.org_code = t.orig_org_code
		  left join tfr.t_opt_load_waybill_detail wd on wd.load_task_id = t.id
                                            and wd.waybill_no = dd.waybill_no
                                            and wd.scan_qty >= 0
		  inner join tfr.t_opt_loader_participation p on p.task_id = t.id
		                                            and p.be_creator = 'Y'
		  inner join pkp.t_srv_waybill w on w.waybill_no = dd.waybill_no
		                               and w.active = 'Y'
      left join bse.t_bas_district bd on w.receive_customer_dist_code = bd.code and bd.active = 'Y'
		  left join bse.t_bas_sales_department sd on sd.code = w.customer_pickup_org_code and sd.active = 'Y'
          left join bse.t_bas_outer_branch ob on ob.agent_dept_code = w.customer_pickup_org_code and ob.active = 'Y'
		  inner join pkp.t_srv_product pp on pp.code = w.product_code
		                                and pp.active = 'Y'
		  left join tfr.t_opt_stock s on s.waybill_no = ws.waybill_no
		                              and s.goods_area_code = ws.goods_area_code
		                             and s.org_code = ws.org_code
		                             and s.IS_PAKCAGE ='N'
          left join tfr.t_Opt_Bcmach_Sortscan bss on bss.waybill_no = s.waybill_no and bss.serial_no=s.serial_no   		                             
		  left join bse.t_bas_goods_area area on area.goods_area_code =
		                                         ws.goods_area_code
		                                     and area.org_code = ws.org_code
		                                     and area.active = 'Y'
		  left join tfr.t_opt_package_request_detail r on r.waybill_no =
		                                                  s.waybill_no
		                                              and r.serial_no = s.serial_no
		  left join (select wr.waybill_no, ld.serial_no, ld.handle_org_code
               from pkp.t_srv_waybillrfc wr
              inner join pkp.t_srv_labeledgood_todo ld on ld.t_srv_waybill_rfc_id =
                                                          wr.id
              where ld.is_printed = 'N') todo on todo.waybill_no = dd.waybill_no
                                    and todo.serial_no = s.serial_no
                                    and todo.handle_org_code =
                                        t.orig_org_code                                         
		 where t.task_no = #{taskNo} ]]>
		 order by dd.serial_no,s.in_stock_time
		
	</select>
	<!-- 刷新正常库区装车清单(详细) -->
	<select id="refrushNormalTransferLoadTaskDetail" parameterType="HashMap" resultMap="loadGoodsDetailSerialDtoResultMap">
			<![CDATA[select t.task_no as taskNo,
		       p.loader_code as creatorCode,
		       p.loader_name as creatorName,
		       w.waybill_no as wayBillNo,
		       s.serial_no as serialNo,
		       nvl(bss.weight,w.goods_weight_total) as weight,
      		   nvl(bss.volumn,w.goods_volume_total) as volume,
           	   w.goods_qty_total as wayBillQty,
		       w.goods_name as goodsName,
		       w.goods_package as packing,
		       w.receive_org_code as receiveOrgCode,
		       w.receive_org_name as receiveOrgName,
		       w.customer_pickup_org_code as reachOrgCode,
		       w.customer_pickup_org_name as reachOrgName,
		       w.precious_goods as isValue,
		       s.in_stock_time as stockTime,
		       ws.goods_area_code as stockAreaCode,
		       ws.STOCK_GOODS_QTY as stockQty,
		       s.goods_area_name as stockAreaName,
		       area.goods_area_type as stockAreaType,
		       nvl2(bss.id,'Y','N') as beSortScan,
		       pp.name as transportType,
		       pp.code as transportTypeCode,
		       case when tt.packing_wood = 'Y' then  decode(r.is_packed,'N','Y','N') 
               else 'N'    end              as isUnPacking,
		       NVL2(todo.waybill_no, 'Y', 'N') as isToDoList,
		       case
		         when case when pp.priority = 'FAST' then
		          (trunc(sysdate) - cast(ws.plan_start_time as date)) * 24 + 16
		         else
		          (trunc(sysdate) - cast(ws.plan_start_time as date)) * 24 + 40
		       end > 0 then 'Y' else 'N' end as bePriorityGoods,
		       'N' as beJoinCar,
		        wd.scan_qty as operateQty,
		        nvl(sd.station_number,ob.station_number) as stationNumber
		  from tfr.t_opt_waybill_stock ws
		  inner join tfr.t_opt_load_task t on t.orig_org_code = ws.org_code
		  left join bse.t_bas_transfer_center tt on tt.org_code = t.orig_org_code
                                        and tt.active = 'Y']]>
          <if test="destOrgCodes == null or destOrgCodes == ''">
		  <![CDATA[inner join tfr.t_opt_load_dest_org d on d.dest_org_code = ws.next_org_code
		                                 and d.load_task_id = t.id]]>
		  </if>
		  <![CDATA[inner join tfr.t_opt_loader_participation p on p.task_id = t.id
		                                        and p.be_creator = 'Y'
		  inner join pkp.t_srv_waybill w on w.waybill_no = ws.waybill_no
		                               and w.active = 'Y'
		  left join bse.t_bas_sales_department sd on sd.code = w.customer_pickup_org_code and sd.active = 'Y'
          left join bse.t_bas_outer_branch ob on ob.agent_dept_code = w.customer_pickup_org_code and ob.active = 'Y'
		  left join tfr.t_opt_load_waybill_detail wd on wd.load_task_id = t.id
                                            and wd.waybill_no = ws.waybill_no
                                            and wd.scan_qty >= 0
		  inner join pkp.t_srv_product pp on pp.code = w.product_code
		                                and pp.active = 'Y'
		  inner join tfr.t_opt_stock s on s.waybill_no = ws.waybill_no
		                         and s.goods_area_code = ws.goods_area_code
		                         and s.org_code = ws.org_code
		                         and s.IS_PAKCAGE ='N'
		  left join tfr.t_Opt_Bcmach_Sortscan bss on bss.waybill_no = s.waybill_no and bss.serial_no=s.serial_no                             		                         
		  left join bse.t_bas_goods_area area on area.goods_area_code =
		                                         ws.goods_area_code
		                                     and area.org_code = ws.org_code
		                                     and area.active = 'Y'
		  left join tfr.t_opt_package_request_detail r on r.waybill_no = s.waybill_no
		                                          and r.serial_no = s.serial_no
		  left join (select wr.waybill_no, ld.serial_no, ld.handle_org_code
               from pkp.t_srv_waybillrfc wr
              inner join pkp.t_srv_labeledgood_todo ld on ld.t_srv_waybill_rfc_id =
                                                          wr.id
              where ld.is_printed = 'N') todo on todo.waybill_no = w.waybill_no
                                    and todo.serial_no = s.serial_no
                                    and todo.handle_org_code =
                                        t.orig_org_code]]>
		 <where>
				t.task_no = #{taskNo}
			<if test="destOrgCodes !=null and destOrgCodes !=''"> 
			   and ws.next_org_code in 
			   <foreach 
				collection="destOrgCodes" open="(" close=")" item="item" separator="," index="index"> 
				#{item} 
			</foreach>
			</if> 
			<if test="goodsType!=null and goodsType!='' ">
			   and w.goods_type_code = #{goodsType}
			 </if>
			 <if test="isExpress!=null and isExpress!='' ">
			   	<if test="isExpress=='Yes'">
			   		and	pp.code IN(<include refid="sqlPart_expressProductCode" />)
			 	</if>
			 	<if test="isExpress=='No'">
			   		and	pp.code not IN(<include refid="sqlPart_expressProductCode" />)
			 	</if>
			 </if>
		 </where> 
		 order by bePriorityGoods desc
	</select>
	
	<!-- 刷新虚拟库存装车清单(详细) -->
	<select id="refrushSaleNormalTransferLoadTaskDetail" parameterType="HashMap" resultMap="loadGoodsDetailSerialDtoResultMap">
			<![CDATA[select t.task_no as taskNo,
		       p.loader_code as creatorCode,
		       p.loader_name as creatorName,
		       w.waybill_no as wayBillNo,
		       s.serial_no as serialNo,
		       nvl(bss.weight,w.goods_weight_total) as weight,
      		   nvl(bss.volumn,w.goods_volume_total) as volume,
           	   w.goods_qty_total as wayBillQty,
		       w.goods_name as goodsName,
		       w.goods_package as packing,
		       w.receive_org_code as receiveOrgCode,
		       w.receive_org_name as receiveOrgName,
		       w.customer_pickup_org_code as reachOrgCode,
		       w.customer_pickup_org_name as reachOrgName,
		       w.precious_goods as isValue,
		       s.in_stock_time as stockTime,
		       ws.goods_area_code as stockAreaCode,
		       ws.STOCK_GOODS_QTY as stockQty,
		       s.goods_area_name as stockAreaName,
		       area.goods_area_type as stockAreaType,
		       nvl2(bss.id,'Y','N') as beSortScan,
		       pp.name as transportType,
		       pp.code as transportTypeCode,
		       case when tt.packing_wood = 'Y' then  decode(r.is_packed,'N','Y','N') 
               else 'N'    end              as isUnPacking,
		       NVL2(todo.waybill_no, 'Y', 'N') as isToDoList,
		       case
		         when case when pp.priority = 'FAST' then
		          (trunc(sysdate) - cast(ws.plan_start_time as date)) * 24 + 16
		         else
		          (trunc(sysdate) - cast(ws.plan_start_time as date)) * 24 + 40
		       end > 0 then 'Y' else 'N' end as bePriorityGoods,
		       'N' as beJoinCar,
		        wd.scan_qty as operateQty,
		        nvl(sd.station_number,ob.station_number) as stationNumber
		  from tfr.t_opt_waybill_stock_sale ws
		  inner join tfr.t_opt_load_task t on t.orig_org_code = ws.org_code
		  left join bse.t_bas_transfer_center tt on tt.org_code = t.orig_org_code
                                        and tt.active = 'Y']]>
          <if test="destOrgCodes == null or destOrgCodes == ''">
		  <![CDATA[inner join tfr.t_opt_load_dest_org d on d.dest_org_code = ws.next_org_code
		                                 and d.load_task_id = t.id]]>
		  </if>
		  <![CDATA[inner join tfr.t_opt_loader_participation p on p.task_id = t.id
		                                        and p.be_creator = 'Y'
		  inner join pkp.t_srv_waybill w on w.waybill_no = ws.waybill_no
		                               and w.active = 'Y'
		  left join bse.t_bas_sales_department sd on sd.code = w.customer_pickup_org_code and sd.active = 'Y'
          left join bse.t_bas_outer_branch ob on ob.agent_dept_code = w.customer_pickup_org_code and ob.active = 'Y'
		  left join tfr.t_opt_load_waybill_detail wd on wd.load_task_id = t.id
                                            and wd.waybill_no = ws.waybill_no
                                            and wd.scan_qty >= 0
		  inner join pkp.t_srv_product pp on pp.code = w.product_code
		                                and pp.active = 'Y'
		  inner join tfr.t_opt_stock_sale s on s.waybill_no = ws.waybill_no
		                         and s.goods_area_code = ws.goods_area_code
		                         and s.org_code = ws.org_code
		  left join tfr.t_Opt_Bcmach_Sortscan bss on bss.waybill_no = s.waybill_no and bss.serial_no=s.serial_no                             		                         
		  left join bse.t_bas_goods_area area on area.goods_area_code =
		                                         ws.goods_area_code
		                                     and area.org_code = ws.org_code
		                                     and area.active = 'Y'
		  left join tfr.t_opt_package_request_detail r on r.waybill_no = s.waybill_no
		                                          and r.serial_no = s.serial_no
		  left join (select wr.waybill_no, ld.serial_no, ld.handle_org_code
               from pkp.t_srv_waybillrfc wr
              inner join pkp.t_srv_labeledgood_todo ld on ld.t_srv_waybill_rfc_id =
                                                          wr.id
              where ld.is_printed = 'N') todo on todo.waybill_no = w.waybill_no
                                    and todo.serial_no = s.serial_no
                                    and todo.handle_org_code =
                                        t.orig_org_code]]>
		 <where>
				t.task_no = #{taskNo}
			<if test="destOrgCodes !=null and destOrgCodes !=''"> 
			   and ws.next_org_code in 
			   <foreach 
				collection="destOrgCodes" open="(" close=")" item="item" separator="," index="index"> 
				#{item} 
			</foreach>
			</if> 
			<if test="goodsType!=null and goodsType!='' ">
			   and w.goods_type_code = #{goodsType}
			 </if>
			 <if test="isExpress!=null and isExpress!='' ">
			   	<if test="isExpress=='Yes'">
			   		and	pp.code IN(<include refid="sqlPart_expressProductCode" />)
			 	</if>
			 	<if test="isExpress=='No'">
			   		and	pp.code not IN(<include refid="sqlPart_expressProductCode" />)
			 	</if>
			 </if>
		 </where> 
		 order by bePriorityGoods desc
	</select>
	
	<!-- 刷新正常库区零担装车清单(剔除优先货、代办的清单) alfred 2016-10-5 -->
	<select id="refreshSimpleLDDetail" parameterType="HashMap" resultMap="loadGoodsDetailSerialDtoResultMap">
		<![CDATA[select /*刷新正常库区零担装车清单(剔除优先货、代办的清单) alfred 2016-10-5*/ 
					   t.task_no as taskNo,
			           p.loader_code as creatorCode,
			           p.loader_name as creatorName,
			           w.waybill_no as wayBillNo,
			           s.serial_no as serialNo,
			           w.goods_weight_total as weight,
			           w.goods_volume_total as volume,
			           w.goods_qty_total as wayBillQty,
			           w.goods_name as goodsName,
			           w.goods_package as packing,
			           w.receive_org_code as receiveOrgCode,
			           w.receive_org_name as receiveOrgName,
			           w.customer_pickup_org_code as reachOrgCode,
			           w.customer_pickup_org_name as reachOrgName,
			           w.precious_goods as isValue,
			           s.in_stock_time as stockTime,
			           ws.goods_area_code as stockAreaCode,
			           ws.STOCK_GOODS_QTY as stockQty,
			           s.goods_area_name as stockAreaName,
			           area.goods_area_type as stockAreaType,
			           pp.name as transportType,
			           pp.code as transportTypeCode,
			           case when tt.packing_wood = 'Y' then  decode(r.is_packed,'N','Y','N') 
			               else 'N'    end              as isUnPacking,
			           'N' as beJoinCar,
			            wd.scan_qty as operateQty,
			            nvl(sd.station_number,ob.station_number) as stationNumber
	      from tfr.t_opt_waybill_stock ws
	      inner join tfr.t_opt_load_task t on t.orig_org_code = ws.org_code
	      left join bse.t_bas_transfer_center tt on tt.org_code = t.orig_org_code
	                                        and tt.active = 'Y']]>
	      <if test="destOrgCodes == null or destOrgCodes == ''">
	      <![CDATA[inner join tfr.t_opt_load_dest_org d on d.dest_org_code = ws.next_org_code
	                                     and d.load_task_id = t.id]]>
	      </if>
	      <![CDATA[inner join tfr.t_opt_loader_participation p on p.task_id = t.id
	                                            and p.be_creator = 'Y'
	      inner join pkp.t_srv_waybill w on w.waybill_no = ws.waybill_no
	                                   and w.active = 'Y'
	      left join bse.t_bas_sales_department sd on sd.code = w.customer_pickup_org_code and sd.active = 'Y'
	      left join bse.t_bas_outer_branch ob on ob.agent_dept_code = w.customer_pickup_org_code and ob.active = 'Y'
	      left join tfr.t_opt_load_waybill_detail wd on wd.load_task_id = t.id
	                                            and wd.waybill_no = ws.waybill_no
	                                            and wd.scan_qty >= 0
	      inner join pkp.t_srv_product pp on pp.code = w.product_code
	                                    and pp.active = 'Y'
	      inner join tfr.t_opt_stock s on s.waybill_no = ws.waybill_no
	                             and s.goods_area_code = ws.goods_area_code
	                             and s.org_code = ws.org_code
	                             and s.IS_PAKCAGE ='N'                                                      
	      left join bse.t_bas_goods_area area on area.goods_area_code =
	                                             ws.goods_area_code
	                                         and area.org_code = ws.org_code
	                                         and area.active = 'Y'
	      left join tfr.t_opt_package_request_detail r on r.waybill_no = s.waybill_no
	                                              and r.serial_no = s.serial_no 
	                                              ]]>
	     <where>
	        t.task_no = #{taskNo}
	      <if test="destOrgCodes !=null and destOrgCodes !=''"> 
	         and ws.next_org_code in 
	         <foreach 
	        collection="destOrgCodes" open="(" close=")" item="item" separator="," index="index"> 
	        #{item} 
	      </foreach>
	      </if> 
	      <if test="goodsType!=null and goodsType!='' ">
	         and w.goods_type_code = #{goodsType}
	       </if>
	       and  pp.code not IN(<include refid="sqlPart_expressProductCode" />)
	     </where> 
	</select>
	
	<select id="refreshSaleSimpleLDDetail" parameterType="HashMap" resultMap="loadGoodsDetailSerialDtoResultMap">
		<![CDATA[select /*刷新正常库区零担装车清单(剔除优先货、代办的清单) alfred 2016-10-5*/ 
					   t.task_no as taskNo,
			           p.loader_code as creatorCode,
			           p.loader_name as creatorName,
			           w.waybill_no as wayBillNo,
			           s.serial_no as serialNo,
			           w.goods_weight_total as weight,
			           w.goods_volume_total as volume,
			           w.goods_qty_total as wayBillQty,
			           w.goods_name as goodsName,
			           w.goods_package as packing,
			           w.receive_org_code as receiveOrgCode,
			           w.receive_org_name as receiveOrgName,
			           w.customer_pickup_org_code as reachOrgCode,
			           w.customer_pickup_org_name as reachOrgName,
			           w.precious_goods as isValue,
			           s.in_stock_time as stockTime,
			           ws.goods_area_code as stockAreaCode,
			           ws.STOCK_GOODS_QTY as stockQty,
			           s.goods_area_name as stockAreaName,
			           area.goods_area_type as stockAreaType,
			           pp.name as transportType,
			           pp.code as transportTypeCode,
			           case when tt.packing_wood = 'Y' then  decode(r.is_packed,'N','Y','N') 
			               else 'N'    end              as isUnPacking,
			           'N' as beJoinCar,
			            wd.scan_qty as operateQty,
			            nvl(sd.station_number,ob.station_number) as stationNumber
	      from tfr.t_opt_waybill_stock_sale ws
	      inner join tfr.t_opt_load_task t on t.orig_org_code = ws.org_code
	      left join bse.t_bas_transfer_center tt on tt.org_code = t.orig_org_code
	                                        and tt.active = 'Y']]>
	      <if test="destOrgCodes == null or destOrgCodes == ''">
	      <![CDATA[inner join tfr.t_opt_load_dest_org d on d.dest_org_code = ws.next_org_code
	                                     and d.load_task_id = t.id]]>
	      </if>
	      <![CDATA[inner join tfr.t_opt_loader_participation p on p.task_id = t.id
	                                            and p.be_creator = 'Y'
	      inner join pkp.t_srv_waybill w on w.waybill_no = ws.waybill_no
	                                   and w.active = 'Y'
	      left join bse.t_bas_sales_department sd on sd.code = w.customer_pickup_org_code and sd.active = 'Y'
	      left join bse.t_bas_outer_branch ob on ob.agent_dept_code = w.customer_pickup_org_code and ob.active = 'Y'
	      left join tfr.t_opt_load_waybill_detail wd on wd.load_task_id = t.id
	                                            and wd.waybill_no = ws.waybill_no
	                                            and wd.scan_qty >= 0
	      inner join pkp.t_srv_product pp on pp.code = w.product_code
	                                    and pp.active = 'Y'
	      inner join tfr.t_opt_stock_sale s on s.waybill_no = ws.waybill_no
	                             and s.goods_area_code = ws.goods_area_code
	                             and s.org_code = ws.org_code
	                             and s.IS_PAKCAGE ='N'                                                      
	      left join bse.t_bas_goods_area area on area.goods_area_code =
	                                             ws.goods_area_code
	                                         and area.org_code = ws.org_code
	                                         and area.active = 'Y'
	      left join tfr.t_opt_package_request_detail r on r.waybill_no = s.waybill_no
	                                              and r.serial_no = s.serial_no 
	                                              ]]>
	     <where>
	        t.task_no = #{taskNo}
	      <if test="destOrgCodes !=null and destOrgCodes !=''"> 
	         and ws.next_org_code in 
	         <foreach 
	        collection="destOrgCodes" open="(" close=")" item="item" separator="," index="index"> 
	        #{item} 
	      </foreach>
	      </if> 
	      <if test="goodsType!=null and goodsType!='' ">
	         and w.goods_type_code = #{goodsType}
	       </if>
	       and  pp.code not IN(<include refid="sqlPart_expressProductCode" />)
	     </where> 
	</select>
	
	<!-- 刷新正常库区快递散货装车清单(剔除优先货、代办的清单) alfred 2016-10-5 -->
	<select id="refreshSimpleEXPDetail" parameterType="HashMap" resultMap="loadGoodsDetailSerialDtoResultMap">
			<![CDATA[select  /*刷新正常库区快递散货装车清单(剔除优先货、代办的清单) alfred 2016-10-5*/ 
				   t.task_no as taskNo,
		           p.loader_code as creatorCode,
		           p.loader_name as creatorName,
		           w.waybill_no as wayBillNo,
		           s.serial_no as serialNo,
		           nvl(bss.weight,w.goods_weight_total) as weight,
		           nvl(bss.volumn,w.goods_volume_total) as volume,
		           w.goods_qty_total as wayBillQty,
		           w.goods_name as goodsName,
		           w.goods_package as packing,
		           w.receive_org_code as receiveOrgCode,
		           w.receive_org_name as receiveOrgName,
		           w.customer_pickup_org_code as reachOrgCode,
		           w.customer_pickup_org_name as reachOrgName,
		           w.precious_goods as isValue,
		           s.in_stock_time as stockTime,
		           ws.goods_area_code as stockAreaCode,
		           ws.STOCK_GOODS_QTY as stockQty,
		           s.goods_area_name as stockAreaName,
		           area.goods_area_type as stockAreaType,
		           nvl2(bss.id,'Y','N') as beSortScan,
		           pp.name as transportType,
		           pp.code as transportTypeCode,
		           case when tt.packing_wood = 'Y' then  decode(r.is_packed,'N','Y','N') 
		               else 'N'    end              as isUnPacking,
		           'N' as beJoinCar,
		            wd.scan_qty as operateQty,
		            nvl(sd.station_number,ob.station_number) as stationNumber
		      from tfr.t_opt_waybill_stock ws
		      inner join tfr.t_opt_load_task t on t.orig_org_code = ws.org_code
		      left join bse.t_bas_transfer_center tt on tt.org_code = t.orig_org_code
		                                        and tt.active = 'Y']]>
		      <if test="destOrgCodes == null or destOrgCodes == ''">
		     		<![CDATA[inner join tfr.t_opt_load_dest_org d on d.dest_org_code = ws.next_org_code
		                                     and d.load_task_id = t.id]]>
		      </if>
		      <![CDATA[inner join tfr.t_opt_loader_participation p on p.task_id = t.id
		                                            and p.be_creator = 'Y'
		      inner join pkp.t_srv_waybill w on w.waybill_no = ws.waybill_no
		                                   and w.active = 'Y'
		      left join bse.t_bas_sales_department sd on sd.code = w.customer_pickup_org_code and sd.active = 'Y'
		      left join bse.t_bas_outer_branch ob on ob.agent_dept_code = w.customer_pickup_org_code and ob.active = 'Y'
		      left join tfr.t_opt_load_waybill_detail wd on wd.load_task_id = t.id
		                                            and wd.waybill_no = ws.waybill_no
		                                            and wd.scan_qty >= 0
		      inner join pkp.t_srv_product pp on pp.code = w.product_code
		                                    and pp.active = 'Y'
		      inner join tfr.t_opt_stock s on s.waybill_no = ws.waybill_no
		                             and s.goods_area_code = ws.goods_area_code
		                             and s.org_code = ws.org_code
		                             and s.IS_PAKCAGE ='N'
		      left join tfr.t_Opt_Bcmach_Sortscan bss on bss.waybill_no = s.waybill_no and bss.serial_no=s.serial_no                                                          
		      left join bse.t_bas_goods_area area on area.goods_area_code =
		                                             ws.goods_area_code
		                                         and area.org_code = ws.org_code
		                                         and area.active = 'Y'
		      left join tfr.t_opt_package_request_detail r on r.waybill_no = s.waybill_no
		                                              and r.serial_no = s.serial_no]]>
		     <where>
		        t.task_no = #{taskNo}
		      <if test="destOrgCodes !=null and destOrgCodes !=''"> 
		         and ws.next_org_code in 
		         <foreach 
		        collection="destOrgCodes" open="(" close=")" item="item" separator="," index="index"> 
		        #{item} 
		      </foreach>
		      </if> 
		      <if test="goodsType!=null and goodsType!='' ">
		         and w.goods_type_code = #{goodsType}
		       </if>
		     and  pp.code IN(<include refid="sqlPart_expressProductCode" />)
	     </where> 
	</select>
	
	
	<!-- 刷新混合包装车清单 -->
	<select id="refrushPackageTransferLoadTaskDetail" parameterType="HashMap" resultMap="loadGoodsDetailSerialDtoResultMap">
			<![CDATA[select t.task_no as taskNo,
           		p.loader_code as creatorCode,
           		p.loader_name as creatorName,
           		pc.package_no as wayBillNo,
           		pc.weight as weight,
           		pc.volume as volume,
           		pc.serial_qty as wayBillQty,
           		'包' as goodsName,
           		pc.depart_org_code as receiveOrgCode,
           		pc.depart_org_name as receiveOrgName,
           		pc.arrive_org_code as reachOrgCode,
           		pc.arrive_org_name as reachOrgName,
           		pc.create_time  as stockTime,
           		pc.serial_qty as stockQty,
           		'快递' as transportType,
           	    'Y' as bePriorityGoods
           from  tfr.t_opt_package pc 
     	   inner join tfr.t_opt_load_task t on t.orig_org_code = pc.depart_org_code
      	   left join bse.t_bas_transfer_center tt on tt.org_code = t.orig_org_code
                                        and tt.active = 'Y']]>
           <if test="destOrgCodes == null or destOrgCodes == ''">
     		 <![CDATA[inner join tfr.t_opt_load_dest_org d on d.dest_org_code = pc.arrive_org_code
                                     and d.load_task_id = t.id]]>
      	   </if>
		  <![CDATA[inner join tfr.t_opt_loader_participation p on p.task_id = t.id
		                                        and p.be_creator = 'Y']]>
		 <where>
				t.task_no = #{taskNo}
				and pc.create_time >= t.load_start_time-5 
				and pc.status = 'FINISHED'
				<![CDATA[and pc.waybill_qty>0]]>
				and (pc.express_package_type = 'NORMAL_ARRIVE' or pc.express_package_type is null)
			<if test="destOrgCodes !=null and destOrgCodes !=''"> 
			   and pc.arrive_org_code in 
			   <foreach 
				collection="destOrgCodes" open="(" close=")" item="item" separator="," index="index"> 
				#{item} 
			</foreach>
			</if> 
			
		 </where> 
		 union all
		  select  t.task_no as taskNo,
               p.loader_code as creatorCode,
               p.loader_name as creatorName,
               pc.package_no as wayBillNo,
               pc.weight as weight,
               pc.volume as volume,
               pc.serial_qty as wayBillQty,
               '包' as goodsName,
               pc.depart_org_code as receiveOrgCode,
               pc.depart_org_name as receiveOrgName,
               pc.arrive_org_code as reachOrgCode,
               pc.arrive_org_name as reachOrgName,
               pc.create_time  as stockTime,
               pc.serial_qty as stockQty,
               '快递' as transportType,
               'Y' as bePriorityGoods
           from  tfr.t_opt_package pc 
		   inner join tfr.t_opt_load_task t on t.orig_org_code = pc.depart_org_code
           inner join tfr.t_opt_loader_participation p on p.task_id = t.id
                                            and p.be_creator = 'Y'
       <where>    
        	t.task_no = #{taskNo}
            and pc.status = 'FINISHED'
            <![CDATA[and pc.waybill_qty>0]]>
            and pc.express_package_type = 'SECONDCAR_ARRIVE'
            <if test="destOrgCodes !=null and destOrgCodes !=''"> 
			   and pc.arrive_org_code in 
			   (
			   	select distinct ad.accept_point_code from bse.t_bas_acceptpointsales_dept ad 
        		where ad.sales_department_code in
        		<foreach 
				collection="destOrgCodes" open="(" close=")" item="item" separator="," index="index"> 
				#{item} 
				</foreach> 
			   )
			</if>
	 </where>     
	 <!-- 加入商务专递建包类型查询  263072 2015-10-14 08:41:30 -->   
	 union all
		  select  t.task_no as taskNo,
               p.loader_code as creatorCode,
               p.loader_name as creatorName,
               pc.package_no as wayBillNo,
               pc.weight as weight,
               pc.volume as volume,
               pc.serial_qty as wayBillQty,
               '包' as goodsName,
               pc.depart_org_code as receiveOrgCode,
               pc.depart_org_name as receiveOrgName,
               pc.arrive_org_code as reachOrgCode,
               pc.arrive_org_name as reachOrgName,
               pc.create_time  as stockTime,
               pc.serial_qty as stockQty,
               '快递' as transportType,
               'Y' as bePriorityGoods
           from  tfr.t_opt_package pc 
		   inner join tfr.t_opt_load_task t on t.orig_org_code = pc.depart_org_code
           inner join tfr.t_opt_loader_participation p on p.task_id = t.id
                                            and p.be_creator = 'Y'
       <where>    
        	t.task_no = #{taskNo}
            and pc.status = 'FINISHED'
            <![CDATA[and pc.waybill_qty>0]]>
            and pc.express_package_type ='EXPRESS_AIR'
            <if test="destOrgCodes !=null and destOrgCodes !=''"> 
			   and pc.arrive_org_code in 
        		<foreach 
				collection="destOrgCodes" open="(" close=")" item="item" separator="," index="index"> 
				#{item} 
				</foreach> 
			</if>
	 </where>                             
	</select>
	
	<!-- 刷新直达包装车清单 -->
	<select id="refrushDirectPackageTransferLoadDetail" parameterType="HashMap" resultMap="loadGoodsDetailSerialDtoResultMap">
			<![CDATA[select t.task_no as taskNo,
           		p.loader_code as creatorCode,
           		p.loader_name as creatorName,
           		pc.package_no as wayBillNo,
           		pc.weight as weight,
           		pc.volume as volume,
           		pc.serial_qty as wayBillQty,
           		'包' as goodsName,
           		pc.depart_org_code as receiveOrgCode,
           		pc.depart_org_name as receiveOrgName,
           		pc.arrive_org_code as reachOrgCode,
           		pc.arrive_org_name as reachOrgName,
           		pc.create_time  as stockTime,
           		pc.serial_qty as stockQty,
           		'快递' as transportType,
           	    'Y' as bePriorityGoods
             from tfr.t_opt_package pc
           join tfr.t_opt_package_detail dt on dt.package_no = pc.package_no  
           join tfr.t_opt_waybill_stock ws on ws.waybill_no = dt.waybill_no
           join tfr.t_opt_load_task t on t.orig_org_code = ws.org_code  
           join tfr.t_opt_package_path_detail pd on pd.package_no = pc.package_no and pd.orig_org_code = t.orig_org_code        
           left join bse.t_bas_transfer_center tt on tt.org_code = t.orig_org_code
                                        and tt.active = 'Y']]>
           <if test="destOrgCodes == null or destOrgCodes == ''">
     		 <![CDATA[inner join tfr.t_opt_load_dest_org d on d.dest_org_code = pd.objective_org_code
                                     and d.load_task_id = t.id]]>
      	   </if>
		  <![CDATA[inner join tfr.t_opt_loader_participation p on p.task_id = t.id
		                                        and p.be_creator = 'Y']]>
		 <where>
				t.task_no = #{taskNo}
				and pc.create_time >= t.load_start_time-5 
				and ( pc.express_package_type = 'THROUGH_ARRIVE' or pc.express_package_type = 'AIRTHROUGH_ARRIVE')
				and ( pc.status = 'FINISHED'  or pc.status = 'CREATED_BILL')
				<![CDATA[and pc.waybill_qty>0]]>
			<if test="destOrgCodes !=null and destOrgCodes !=''"> 
			   and pd.objective_org_code in 
			   <foreach 
				collection="destOrgCodes" open="(" close=")" item="item" separator="," index="index"> 
				#{item} 
			</foreach>
			</if> 
		 </where> 
		 order by bePriorityGoods desc
	</select>
	
	<!-- 刷新到达未卸车的装车清单 -->
	<select id="refrushNormalTransferLoadTaskDetailUnloadingNotReach" parameterType="HashMap" resultMap="loadGoodsDetailSerialDtoResultMap">
			select 
				 t.task_no as taskNo,
				 p.loader_code as creatorCode,
				 p.loader_name as creatorName,
				 ws.wayBillNo as wayBillNo,
				 ws.serialNo as serialNo,
				 nvl(ws.goods_weight_total,0) as weight,
				 nvl(ws.goods_volume_total,0) as volume,
				 ws.goods_qty_total as wayBillQty,
				 ws.goods_name as goodsName,
				 ws.goods_package as packing,
				 ws.receive_org_code as receiveOrgCode,
				 ws.receive_org_name as receiveOrgName,
				 ws.customerPickupOrgCode as reachOrgCode,
				 ws.customer_pickup_org_name as reachOrgName,
				 ws.precious_goods as isValue,
				 ws.beSortScan ,
				 '' as stockTime,
				 '' as stockAreaCode,
				 '' as stockQty,
				 '' as stockAreaName,
				 '' as stockAreaType,
				 pp.name as transportType,
				 pp.code as transportTypeCode,
				 case
					 when tt.packing_wood = 'Y' then
						decode(r.is_packed, 'N', 'Y', 'N')
					 else
						'N'
				 end as isUnPacking,
				 case
					 when ws.productCode = 'FLF' then
						'1'
					 else 
						'2'
				 end as goodsCodeDesc,
				 
				 NVL2(todo.waybill_no, 'Y', 'N') as isToDoList,
				 'N' as bePriorityGoods,
				 'N' as beJoinCar,
				 wd.scan_qty as operateQty,
				 nvl(sd.station_number, ob.station_number) as stationNumber
			from (
					SELECT 
						 w.WAYBILL_NO               AS wayBillNo,
						 hs.serial_no               AS serialNo,
						 hd.handover_goods_qty      AS goodQty,
						 h.dest_org_code			AS origOrgCode,
						 w.customer_pickup_org_code	AS customerPickupOrgCode,
						 w.product_code             AS productCode,
						 nvl(bss.weight,w.goods_weight_total) as goods_weight_total,
      		   			 nvl(bss.volumn,w.goods_volume_total) as goods_volume_total,
						 w.goods_qty_total 			AS goods_qty_total,
						 w.goods_name 				AS goods_name,
						 w.goods_package 			AS goods_package,
						 w.receive_org_code 		AS receive_org_code,
						 w.receive_org_name 		AS receive_org_name,
						 w.customer_pickup_org_name AS customer_pickup_org_name,
						 w.precious_goods 			AS precious_goods,
						 nvl2(bss.id,'Y','N')       AS beSortScan
						FROM   tfr.t_opt_handoverbill_detail hd
						LEFT   JOIN tfr.t_opt_handoverbill h
						ON     h.handover_no = hd.handover_no
						AND h.dest_org_code = #{origOrgCode}
						LEFT JOIN tfr.t_opt_handoverbill_serialno hs
						ON  hs.handoverbill_no = hd.handover_no
						AND hs.waybill_no = hd.waybill_no
						left join tfr.t_Opt_Bcmach_Sortscan bss  
						   on bss.waybill_no = hs.waybill_no 
						   and bss.serial_no=hs.serial_no
						left   join pkp.t_srv_waybill w
						ON     w.waybill_no = hd.waybill_no
							   AND w.active='Y'
						LEFT JOIN 
							pkp.t_srv_actual_freight f
						ON 
							f.waybill_no = w.waybill_no
						AND 
							f.status = 'EFFECTIVE'
						LEFT   JOIN tfr.t_opt_truck_task_bill b
						ON     b.bill_no = hd.handover_no
						LEFT   JOIN tfr.t_opt_truck_task_detail d
						ON     d.id = b.truck_task_detail_id
								<![CDATA[
							   AND d.status <> 'CANCLED'
								]]>
					  <where>
						 h.handoverbill_state IN 
							<foreach collection="handoverbillStateList" close=")" open="(" item="handoverbillState" separator=",">
								#{handoverbillState}
							</foreach>
						AND (
							<foreach collection="arriveDeptList" item="arriveDeptListItem" separator="or">
								w.CUSTOMER_PICKUP_ORG_CODE = #{arriveDeptListItem,jdbcType=VARCHAR}
							</foreach>
						)
						AND NOT EXISTS(
							SELECT
								stock.waybill_no AS waybillNo 
							FROM tfr.t_opt_stock stock 
							WHERE 
								stock.org_code = #{origOrgCode}
							AND
								stock.waybill_no = w.WAYBILL_NO
						)
						AND h.be_car_load='N'
						AND d.actual_arrive_time >= (sysdate - 3)
						 <if test="goodsType!=null and goodsType!='' ">
						   and w.goods_type_code = #{goodsType}
						 </if>
					 </where>
					 order by d.actual_arrive_time desc) ws
			inner  join tfr.t_opt_load_task t
			on     t.orig_org_code = ws.origOrgCode
			left   join bse.t_bas_transfer_center tt
			on     tt.org_code = t.orig_org_code
						 and tt.active = 'Y'
						 
			inner  join tfr.t_opt_loader_participation p
			on     p.task_id = t.id
						 and p.be_creator = 'Y'
						 
			left   join bse.t_bas_sales_department sd
			on     sd.code = ws.customerPickupOrgCode
						 and sd.active = 'Y'
			left   join bse.t_bas_outer_branch ob
			on     ob.agent_dept_code = ws.customerPickupOrgCode
						 and ob.active = 'Y'
			left   join tfr.t_opt_load_waybill_detail wd
			on     wd.load_task_id = t.id
						 and wd.waybill_no = ws.wayBillNo
						 and wd.scan_qty >= 0
			inner  join pkp.t_srv_product pp
			on     pp.code = ws.productCode
						 and pp.active = 'Y'
			left   join tfr.t_opt_package_request_detail r
			on     r.waybill_no = ws.wayBillNo
						 and r.serial_no = ws.serialNo
			left   join (select wr.waybill_no, ld.serial_no, ld.handle_org_code
									 from   pkp.t_srv_waybillrfc wr
									 inner  join pkp.t_srv_labeledgood_todo ld
									 on     ld.t_srv_waybill_rfc_id = wr.id
									 where  ld.is_printed = 'N') todo
			on     todo.waybill_no = ws.wayBillNo
						 and todo.serial_no = ws.serialNo
						 and todo.handle_org_code = t.orig_org_code
			where
			    t.task_no = #{taskNo}
			    <if test="isExpress!=null and isExpress!=''">
			   		<if test="isExpress=='Yes'">
			   			and	pp.code IN(<include refid="sqlPart_expressProductCode" />)
			 		</if>
			 		<if test="isExpress=='No'">
			   			and	pp.code not IN(<include refid="sqlPart_expressProductCode" />)
			 		</if>
			 	</if>  
			order by goodsCodeDesc
	</select>
	<!-- 刷新合车库区装车清单 -->
	<select id="refrushTogetherTransferLoadTaskDetail" parameterType="HashMap" resultMap="loadGoodsDetailSerialDtoResultMap">
				<![CDATA[select t.task_no as taskNo,
			       lp.loader_code as creatorCode,
			       lp.loader_name as creatorName,
			       tc.waybill_no as wayBillNo,
			       tc.serial_no as serialNo,
			       ws.goods_area_code as stockAreaCode,
			       area.goods_area_name as stockAreaName,
			       area.goods_area_type as stockAreaType,
			       pp.name as transportType,
			       pp.code as transportTypeCode,
			       W.Goods_Weight_Total     as  Weight,
       			   W.Goods_Volume_Total     as  Volume,
           		   w.goods_qty_total as wayBillQty,
			       w.goods_name as goodsName,
			       w.goods_package as packing,
			       w.receive_org_code as receiveOrgCode,
			       w.receive_org_name as receiveOrgName,
			       w.customer_pickup_org_code as reachOrgCode,
			       w.customer_pickup_org_name as reachOrgName,
			       w.precious_goods as isValue,
			       ws.in_stock_time as stockTime,
			       ws.STOCK_GOODS_QTY as stockQty,
			       --NVL2(bss.id,'Y','N') as beSortScan,
			       NVL2(todo.waybill_no, 'Y', 'N') as isToDoList,
			       'N' as bePriorityGoods,
			       'Y' as beJoinCar,
		           wd.scan_qty as operateQty,
		           nvl(sd.station_number,ob.station_number) as stationNumber
			  from tfr.t_opt_together_list tc
			  left join bse.t_bas_goods_area g on g.goods_area_code =
			                                      tc.new_goods_area_code
			                                  and tc.org_code = g.org_code
			                                  and g.active = 'Y'
			 -- left join tfr.t_opt_bcmach_sortscan bss on bss.waybill_no=tc.waybill_no and bss.serial_no = tc.serial_no                                                                                			                                  
			  inner join tfr.t_opt_load_task t on t.orig_org_code = tc.org_code
			  left join bse.t_bas_transfer_center tt on tt.org_code = t.orig_org_code
                                        and tt.active = 'Y'
			  left join tfr.t_opt_load_waybill_detail wd on wd.load_task_id = t.id
                                            and wd.waybill_no = tc.waybill_no
                                            and wd.scan_qty >= 0]]>
             <if test="destOrgCodes == null or destOrgCodes == ''">
			  inner join tfr.t_opt_load_dest_org d on d.load_task_id = t.id
			                                 and d.dest_org_code = g.arrive_region_code
			 </if>
			  <![CDATA[inner join tfr.t_opt_loader_participation lp on lp.task_id = t.id
			                                         and lp.be_creator = 'Y'
			  inner join tfr.t_opt_waybill_stock ws on ws.waybill_no = tc.waybill_no
			                                  and ws.org_code = tc.org_code
			                                  and ws.goods_area_code =
			                                      tc.orig_goods_area_code]]>
			                                <if test="destOrgCodes == null or destOrgCodes == ''">
			                                  <![CDATA[and ws.next_org_code <> d.dest_org_code]]>
			                                  </if>
			  <![CDATA[left join bse.t_bas_goods_area area on area.goods_area_code =
			                                         ws.goods_area_code
			                                     and area.org_code = ws.org_code
			                                     and area.active = 'Y'
			  left join tfr.t_opt_package_request_detail p on p.waybill_no = tc.waybill_no
			                                          and p.serial_no = tc.serial_no
			  inner join pkp.t_srv_waybill w on w.waybill_no = tc.waybill_no
			                               and w.active = 'Y'
			  left join bse.t_bas_sales_department sd on sd.code = w.customer_pickup_org_code and sd.active = 'Y'
			  left join bse.t_bas_outer_branch ob on ob.agent_dept_code = w.customer_pickup_org_code and ob.active = 'Y'
			  inner join pkp.t_srv_product pp on pp.code = w.product_code
			                                and pp.active = 'Y'
			  left join (select wr.waybill_no, ld.serial_no, ld.handle_org_code
               from pkp.t_srv_waybillrfc wr
              inner join pkp.t_srv_labeledgood_todo ld on ld.t_srv_waybill_rfc_id =
                                                          wr.id
              where ld.is_printed = 'N') todo on todo.waybill_no = tc.waybill_no
                                    and todo.serial_no = tc.serial_no
                                    and todo.handle_org_code =
                                        t.orig_org_code]]>
			<where>
					t.task_no = #{taskNo}
				<if test="destOrgCodes !=null and destOrgCodes !=''"> 
				 and g.arrive_region_code in 
				   <foreach 
					collection="destOrgCodes" open="(" close=")" item="item" separator="," index="index"> 
					#{item} 
				   </foreach>
				 and ws.next_org_code not in
				  <foreach 
					collection="destOrgCodes" open="(" close=")" item="item" separator="," index="index"> 
					#{item} 
				  </foreach>
				</if>
				<if test="isExpress!=null and isExpress!=''">
			   			and	pp.code not IN(<include refid="sqlPart_expressProductCode" />)
			 	</if>  
			 </where> 
			 order by bePriorityGoods desc
	</select>
	
	<!-- 刷新合车库区装车清单(剔除优先货、代办的清单) -->
	<select id="refreshTogetherSimpleDetail" parameterType="HashMap" resultMap="loadGoodsDetailSerialDtoResultMap">
		<![CDATA[select /*刷新合车库区装车清单(剔除优先货、代办的清单) alfred 2016-10-5*/
			     t.task_no as taskNo,
	             lp.loader_code as creatorCode,
	             lp.loader_name as creatorName,
	             tc.waybill_no as wayBillNo,
	             tc.serial_no as serialNo,
	             ws.goods_area_code as stockAreaCode,
	             area.goods_area_name as stockAreaName,
	             area.goods_area_type as stockAreaType,
	             pp.name as transportType,
	             pp.code as transportTypeCode,
	             W.Goods_Weight_Total     as  Weight,
	             W.Goods_Volume_Total     as  Volume,
	             w.goods_qty_total as wayBillQty,
	             w.goods_name as goodsName,
	             w.goods_package as packing,
	             w.receive_org_code as receiveOrgCode,
	             w.receive_org_name as receiveOrgName,
	             w.customer_pickup_org_code as reachOrgCode,
	             w.customer_pickup_org_name as reachOrgName,
	             w.precious_goods as isValue,
	             ws.in_stock_time as stockTime,
	             ws.STOCK_GOODS_QTY as stockQty,
	             'Y' as beJoinCar,
	             wd.scan_qty as operateQty,
	             nvl(sd.station_number,ob.station_number) as stationNumber
	        from tfr.t_opt_together_list tc
	        left join bse.t_bas_goods_area g on g.goods_area_code =
	                                            tc.new_goods_area_code
	                                        and tc.org_code = g.org_code
	                                        and g.active = 'Y'                                                                                                                    
	        inner join tfr.t_opt_load_task t on t.orig_org_code = tc.org_code
	        left join bse.t_bas_transfer_center tt on tt.org_code = t.orig_org_code
	                                        and tt.active = 'Y'
	        left join tfr.t_opt_load_waybill_detail wd on wd.load_task_id = t.id
	                                            and wd.waybill_no = tc.waybill_no
	                                            and wd.scan_qty >= 0]]>
	        <if test="destOrgCodes == null or destOrgCodes == ''">
	        	inner join tfr.t_opt_load_dest_org d on d.load_task_id = t.id
	                                       and d.dest_org_code = g.arrive_region_code
	       	</if>
	        <![CDATA[inner join tfr.t_opt_loader_participation lp on lp.task_id = t.id
	                                               and lp.be_creator = 'Y'
	        inner join tfr.t_opt_waybill_stock ws on ws.waybill_no = tc.waybill_no
	                                        and ws.org_code = tc.org_code
	                                        and ws.goods_area_code =
	                                            tc.orig_goods_area_code]]>
	                                      <if test="destOrgCodes == null or destOrgCodes == ''">
	                                        	<![CDATA[and ws.next_org_code <> d.dest_org_code]]>
	                                      </if>
	        <![CDATA[left join bse.t_bas_goods_area area on area.goods_area_code =
	                                               ws.goods_area_code
	                                           and area.org_code = ws.org_code
	                                           and area.active = 'Y'
	        left join tfr.t_opt_package_request_detail p on p.waybill_no = tc.waybill_no
	                                                and p.serial_no = tc.serial_no
	        inner join pkp.t_srv_waybill w on w.waybill_no = tc.waybill_no
	                                     and w.active = 'Y'
	        left join bse.t_bas_sales_department sd on sd.code = w.customer_pickup_org_code and sd.active = 'Y'
	        left join bse.t_bas_outer_branch ob on ob.agent_dept_code = w.customer_pickup_org_code and ob.active = 'Y'
	        inner join pkp.t_srv_product pp on pp.code = w.product_code
	                                      and pp.active = 'Y']]>
	       <where>
	          t.task_no = #{taskNo}
	        <if test="destOrgCodes !=null and destOrgCodes !=''"> 
		         and g.arrive_region_code in 
		           <foreach 
		          collection="destOrgCodes" open="(" close=")" item="item" separator="," index="index"> 
		          #{item} 
		           </foreach>
		         and ws.next_org_code not in
		          <foreach 
		          collection="destOrgCodes" open="(" close=")" item="item" separator="," index="index"> 
		          #{item} 
		          </foreach>
	        </if>
	        and  pp.code not IN(<include refid="sqlPart_expressProductCode" />)
	       </where> 
	</select>
	
	<!-- 刷新多货装车清单 -->
	<select id="refrushMoreGoodsLoadTaskDetail" parameterType="HashMap" resultMap="loadGoodsDetailSerialDtoResultMap">
				<![CDATA[  select t.task_no                  as taskNo,
                   p.loader_code              as creatorCode,
                   p.loader_name              as creatorName,
                   w.waybill_no               as wayBillNo,
                   ss.serial_no                as serialNo,
                   nvl(bss.weight ,w.goods_weight_total) as weight,
       			   nvl(bss.volumn,w.goods_volume_total) as volume,
                   w.goods_qty_total          as wayBillQty,
                   w.goods_name               as goodsName,
                   w.goods_package            as packing,
                   w.receive_org_code         as receiveOrgCode,
                   w.receive_org_name            as receiveOrgName,
                   w.customer_pickup_org_code as reachOrgCode,
                   w.customer_pickup_org_name              as reachOrgName,
                   w.precious_goods           as isValue,
                   pp.name as transportType,
                   pp.code as transportTypeCode,
                   'N' as isUnPacking,
                   'N' as bePriorityGoods,
                   'N' as beJoinCar,
                    nvl2(bss.id,'Y','N') as beSortScan,
                   wd.scan_qty as operateQty,
                   NVL2(todo.waybill_no, 'Y', 'N') as isToDoList,
                   nvl(sd.station_number,ob.station_number) as stationNumber,
                   bd.name as receiveCustDistName
              from tfr.t_opt_load_task t
             inner join tfr.t_opt_loader_participation p on p.task_id = t.id
						                                            and p.be_creator = 'Y'
						  left join tfr.t_opt_load_waybill_detail wd on wd.load_task_id = t.id
						                                            and wd.scan_qty >= 0
						  left join tfr.t_opt_load_serialno ss on ss.load_waybill_detail_id = wd.id
						  left join tfr.t_Opt_Bcmach_Sortscan bss on bss.waybill_no=wd.waybill_no and bss.serial_no=ss.serial_no
						 inner join pkp.t_srv_waybill w on w.waybill_no = wd.waybill_no
						                               and w.active = 'Y'
             left join bse.t_bas_district bd on w.receive_customer_dist_code = bd.code and bd.active = 'Y'                           
						 left join bse.t_bas_sales_department sd on sd.code = w.customer_pickup_org_code and sd.active = 'Y'
						 left join bse.t_bas_outer_branch ob on ob.agent_dept_code = w.customer_pickup_org_code and ob.active = 'Y'
						 inner join pkp.t_srv_product pp on pp.code = w.product_code
                                and pp.active = 'Y'
                         left join (select wr.waybill_no, ld.serial_no, ld.handle_org_code
			               from pkp.t_srv_waybillrfc wr
			              inner join pkp.t_srv_labeledgood_todo ld on ld.t_srv_waybill_rfc_id =
			                                                          wr.id
			              where ld.is_printed = 'N') todo on todo.waybill_no = wd.waybill_no
			                                    and todo.serial_no = ss.serial_no
			                                    and todo.handle_org_code =
			                                        t.orig_org_code
		 where t.task_no = #{taskNo} and ss.goods_state not in('CANCELED','NOT_LOADING') ]]>
		 <if test="isExpress!=null and isExpress!=''">
			   		<if test="isExpress=='Yes'">
			   			and	pp.code IN(<include refid="sqlPart_expressProductCode" />)
			 		</if>
			 		<if test="isExpress=='No'">
			   			and	pp.code not IN(<include refid="sqlPart_expressProductCode" />)
			 		</if>
			 	</if>  
		  and wd.package_no is null
	</select>
	
	<!-- 刷新多货装车包清单 -->
	<select id="refrushMorePackageLoadDetail" parameterType="String" resultMap="loadGoodsDetailSerialDtoResultMap">
				<![CDATA[ select t.task_no as taskNo,
            p.loader_code as creatorCode,
            p.loader_name as creatorName,
            wd.waybill_no as wayBillNo,
            pk.weight as weight,
            pk.volume as volume,
            pk.serial_qty as wayBillQty,
            '快递包' as goodsName,
            '包' as packing,
            pk.depart_org_code as receiveOrgCode,
            pk.depart_org_name as receiveOrgName,
            pk.arrive_org_code as reachOrgCode,
            pk.arrive_org_name as reachOrgName,
            '快递' as transportType,
            'N' as isUnPacking,
            'N' as bePriorityGoods,
            'N' as beJoinCar,
            wd.scan_qty as operateQty
       from tfr.t_opt_load_task t
      inner join tfr.t_opt_loader_participation p on p.task_id = t.id
                                                 and p.be_creator = 'Y'
       left join tfr.t_opt_load_waybill_detail wd on wd.load_task_id = t.id
                                                 and wd.scan_qty >= 0
      inner join tfr.t_opt_package pk on pk.package_no = wd.waybill_no
      where t.task_no = #{taskNo} and wd.package_no is not null]]>
	</select>

	<!-- 确认、打回派送单:根据派送单号更新装车任务状态 -->
	<update id="updateLoadTaskStateByDeliverBillNo" parameterType="HashMap">
		update tfr.t_opt_load_task t set t.task_state=#{state}
		 <if test="beCreateGapRep !=null and beCreateGapRep !=''">
			, t.be_create_gaprep=#{beCreateGapRep}
		 </if>
		 <![CDATA[,t.load_end_time =to_date(#{loadEndTime,jdbcType=VARCHAR},'yyyy-mm-dd hh24:mi:ss')]]>
		 where t.deliverbill_no=#{deliverBillNo} and t.task_state = 'FINISHED' <!-- 装车任务状态为已完成才能确认、打回 -->
	</update>
	<!--根据派送单号查询装车任务 -->
	<select id="queryLoadTaskByDeliverBillNo" parameterType="HashMap" resultMap="foss.load.loadtask.loadTaskResultMap">
		<![CDATA[
				select t.task_no as taskNo,
				t.id as id,
				t.load_way as loadWay,
				t.orig_org_code as origOrgCode,
				t.platform_id as platformId,
				to_char(t.load_end_time,'yyyy-mm-dd hh24:mi:ss') as loadEndTime
				from tfr.t_opt_load_task t 
		]]>
		<where>t.deliverbill_no=#{deliverBillNo}
		<if test="state !=null and state !=''">
			and t.task_state=#{state}
		</if>
		</where>
	</select>
	<!--根据派送单号、运单号，返回最新的装车任务流水号列表 -->
	<select id="queryLastLoadSerialNos" parameterType="HashMap" resultType="String">
		select s.serial_no
			  from (select tt.id
			          from tfr.t_opt_load_task tt
			         where tt.deliverbill_no = #{deliverNo}
			           <![CDATA[and tt.task_state <> 'CANCELED'
			           and rownum <= 1
			         order by tt.load_start_time desc) t
			  left join tfr.t_opt_load_waybill_detail w on t.id = w.load_task_id
			  left join tfr.t_opt_load_serialno s on s.load_waybill_detail_id = w.id]]>
			 where w.waybill_no = #{wayBillNo} and s.be_loaded ='Y'
			 order by s.serial_no asc
	</select>
	<!--根据派送单号、运单号，返回最新的装车任务流水号列表 -->
	<select id="queryDeliverStockQty" parameterType="HashMap" resultType="int">
		select dd.arrange_goods_qty
			  from pkp.t_srv_deliverbill_detail dd
			  inner join pkp.t_srv_deliverbill d on d.id = dd.t_srv_deliverbill_id <![CDATA[and d.STATUS<>'CANCELED']]>
			  inner join tfr.t_opt_load_task t on t.deliverbill_no = d.deliverbill_no
			 where dd.waybill_no = #{wayBillNo}
			   and t.task_no = #{taskNo}
	</select>
	<!--根据派送单号、运单号，返回最新的装车任务流水号列表 -->
	<select id="queryDeliverBillOrgCodeByDeliverBillNo" parameterType="String" resultType="String">
		select d.create_org_code from pkp.t_srv_deliverbill d where d.deliverbill_no = #{deliverBillNo} <![CDATA[and d.STATUS<>'CANCELED']]>
	</select>
	<!--查询合车到达部门 -->
	<select id="queryTogetherDestOrgCodes" parameterType="HashMap" resultType="String">
		<![CDATA[
				select g.arrive_region_code
				  from tfr.t_opt_together_list t
				  left join bse.t_bas_goods_area g on  g.goods_area_code =
				                                      t.new_goods_area_code and  t.org_code = g.org_code
				 where g.active = 'Y'
				   and t.waybill_no = #{wayBillNo}
				   and t.serial_no = #{serialNo}
				   and t.org_code = #{orgCode}
		]]>
	</select>
	<!-- 查询已分配派送装车任务:任务状态为未开始、执行中 -->
	<select id="pda_queryAssignedLoadTask" parameterType="HashMap" resultMap="pdaAssignLoadTaskResultMap">
	<![CDATA[select d.deliverbill_no as deliverBillNo,
       nvl(t.task_state, 'UNSTART') as state,
       d.vehicle_no as vehicleNo,
       t.task_no as taskNo,
       t.platform_no as platformNo,
       'DELIVER_LOAD' as loadTaskType
	  from tfr.t_opt_de_load_assign_task d
	  left join tfr.t_opt_load_task t on t.deliverbill_no = d.deliverbill_no and t.task_state<>'CANCELED'
	  ]]>
	  <where>
	  d.task_state in ('UNSTART','PROCESSING')
	  and d.BE_CANCELLED = 'N'
	  and (t.task_state is null or t.task_state in('LOADING','FINISHED'))
	  and d.loader_code=#{loaderCode}
	  <if test="queryTimeEnd !=null and queryTimeEnd !=''"><![CDATA[and d.create_time <= #{queryTimeEnd}]]></if>
	  <if test="queryTimeBegin !=null and queryTimeBegin !=''"><![CDATA[and d.create_time >= #{queryTimeBegin}]]></if>
	  <!-- <if test="loaderOrgCode !=null and loaderOrgCode !=''"><![CDATA[and d.load_org_code=#{loaderOrgCode}]]></if> -->
	  </where>
	</select>
	
	<!-- 根据装车任务表的taskNo查找装车运单明细表中已装车件数小于运单表的货物总件数的运单号信息 -->
	<select id="queryWayBill" parameterType="java.lang.String" resultType="java.lang.String" >
	select   p.waybill_no
	  from pkp.t_srv_waybill p 
    left join  tfr.t_opt_load_waybill_detail tw on tw.waybill_no = p.waybill_no 
    left join tfr.t_opt_load_task tt on tt.id = tw.load_task_id
	 where  tt.task_no = #{taskNo}
   and p.goods_qty_total<![CDATA[>]]> tw.load_qty
	</select> 
	
	<!-- 查询未完成中转装车任务 -->
	<select id="pda_queryUnfinishedLoadTask" parameterType="HashMap" resultMap="pdaAssignLoadTaskResultMap">
	<![CDATA[select t.task_no as taskNo,
	 		t.task_state as state,
	  		t.vehicle_no as vehicleNo,
	  		t.platform_no as platformNo,
       		t.task_type as loadTaskType,
       		t.id as id
			  from tfr.t_opt_load_task t
			 inner join tfr.t_opt_loader_participation p on p.task_id = t.id
			                                            and p.be_creator = 'Y'
			 where t.task_state = 'LOADING'
			   and t.task_type not in('DELIVER_LOAD','EXPRESS_DRIVER_LOAD','EXPRESS_CONNECTION_LOAD')
			   and p.loader_code = #{loaderCode}]]>
	  <if test="queryTransportTimeEnd !=null and queryTransportTimeEnd !=''"><![CDATA[and t.load_start_time <= #{queryTransportTimeEnd}]]></if>
	  <if test="queryTransportTimeBegin !=null and queryTransportTimeBegin !=''"><![CDATA[and t.load_start_time >= #{queryTransportTimeBegin}]]></if>
	</select>
	
	<!-- 插入装车任务 -->
	<insert id="insertLoadTask" parameterType="com.deppon.foss.module.transfer.load.api.shared.domain.LoadTaskEntity">
		insert into tfr.t_opt_load_task t
		  (id,
		   task_type,
		   task_no,
		   vehicle_no,
		   platform_id,
		   platform_no,
		   load_start_time,
		   LOAD_END_TIME,
		   task_state,
		   line,
		   orig_org_name,
		   orig_org_code,
		   be_create_gaprep,
		   goods_type,
		   deliverbill_no,
		   LOAD_ORG_NAMES,
		   LOADER_QTY,
		   LOAD_WAY,
		   transitGoods_type,
		   LOAD_SOURCE,
		   submit_total_count,
		   error_msg,
		   send_type,
		   device_no)
		values
		  (
		  #{id,jdbcType=VARCHAR},
		  #{taskType,jdbcType=VARCHAR},
		  #{taskNo,jdbcType=VARCHAR},
		  #{vehicleNo,jdbcType=VARCHAR},
		  #{platformId,jdbcType=VARCHAR},
		  #{platformNo,jdbcType=VARCHAR},
		  to_date(#{loadStartTime,jdbcType=VARCHAR},'yyyy-mm-dd hh24:mi:ss'),
		  to_date(#{loadEndTime,jdbcType=VARCHAR},'yyyy-mm-dd hh24:mi:ss'),
		  #{state,jdbcType=VARCHAR},
		  #{line,jdbcType=VARCHAR},
		  #{origOrgName,jdbcType=VARCHAR},
		  #{origOrgCode,jdbcType=VARCHAR},
		  #{beCreateGapRep,jdbcType=VARCHAR},
		  #{goodsType,jdbcType=VARCHAR},
		  #{deliverBillNo,jdbcType=VARCHAR},
		  #{destOrgNames,jdbcType=VARCHAR},
		  #{loaderQty,jdbcType=DECIMAL},
		  #{loadWay,jdbcType=VARCHAR},
		  #{transitGoodsType,jdbcType=VARCHAR},
		  #{loadSource,jdbcType=DECIMAL},
		  #{submitTotalCount,jdbcType=VARCHAR},
		  #{errorMsg,jdbcType=VARCHAR},
		  #{sendType,jdbcType=DECIMAL},
		  #{device_no,jdbcType=VARCHAR})
	</insert>
	
	<!-- 插入装车任务到达部门 -->
	<insert id="insertLoadDestOrg" parameterType="java.util.List" >
		begin 
		<foreach collection="list" item="item" separator=";">
			insert into tfr.t_opt_load_dest_org
				  (id,
				   load_task_id,
				   dest_org_name,
				   dest_org_code,
				   truckdepartplandetail_id,
				   be_create_handover,
				   create_time)
				values(	
				#{item.id,jdbcType=VARCHAR},
				#{item.loadTaskId,jdbcType=VARCHAR},
				#{item.destOrgName,jdbcType=VARCHAR},
				#{item.destOrgCode,jdbcType=VARCHAR},
				#{item.truckDepartPlanDetailId,jdbcType=VARCHAR},
				#{item.beCreateHandOver,jdbcType=VARCHAR},
				#{item.createDate,jdbcType=TIMESTAMP}
				)
		</foreach>
		;end;
	</insert>
	<!-- 插入装车理货员 -->
	<insert id="insertLoadLoader" parameterType="java.util.List" >
		begin 
		<foreach collection="list" item="item" separator=";">
			insert into tfr.t_opt_loader_participation
				  (id,
				   loader_name,
				   loader_code,
				   load_org_code,
				   load_org_name,
				   join_time,
				   leave_time,
				   be_creator,
				   task_type,
				   task_id,
				   flag)
				values(	
					#{item.id,jdbcType=VARCHAR},
			   	#{item.loaderName,jdbcType=VARCHAR},
			   	#{item.loaderCode,jdbcType=VARCHAR},
			   	#{item.loadOrgCode,jdbcType=VARCHAR},
			   	#{item.loadOrgName,jdbcType=VARCHAR},
			   	#{item.joinTime,jdbcType=TIMESTAMP},
			   	#{item.leaveTime,jdbcType=TIMESTAMP},
			   	#{item.beCreator,jdbcType=VARCHAR},
			   	#{item.taskType,jdbcType=VARCHAR},
			   	#{item.taskId,jdbcType=VARCHAR},
			   	#{item.flag,jdbcType=VARCHAR}
				)
		</foreach>
		;end;
	</insert>
	
	<!-- 插入装车PDA -->
	<insert id="insertPDATask" parameterType="com.deppon.foss.module.transfer.load.api.shared.domain.PDATaskEntity">
		insert into tfr.t_opt_pda_task(
	  		 device_no,
	  		 join_time,
	  		 be_creator,
	  		 task_type,
	  		 task_no,
	  		 leave_time,
	  		 id
	  		)
		values
		  (
		  #{deviceNo,jdbcType=VARCHAR},
		  #{joinTime,jdbcType=TIMESTAMP},
		  #{beCreator,jdbcType=VARCHAR},
		  #{taskType,jdbcType=VARCHAR},
		  #{taskNo,jdbcType=VARCHAR},
		  to_date('2099-01-01 00:00:00','yyyy-mm-dd hh24:mi:ss'),
		  #{id,jdbcType=VARCHAR}
		  )
	</insert>
	<!-- 提交装车任务、修改参与人数、取消任务：更新装车任务 -->
	<update id="updateLoadTask" parameterType="HashMap" >
		update tfr.t_opt_load_task t
			/* 模块:装车操作,上线日期:2017-04-18*/
		   set 
		   <if test="loadEndTime != null and loadEndTime != ''">
		   		t.load_end_time = to_date(#{loadEndTime,jdbcType=VARCHAR}, 'yyyy-mm-dd hh24:mi:ss'),
		   </if>
		   <if test="state != null and state != ''">
		       t.task_state    = #{state,jdbcType=VARCHAR},
		    </if>
		    <if test="loaderQty != null and loaderQty != ''">
		    	t.LOADER_QTY = #{loaderQty,jdbcType=DECIMAL},
		    </if>
		    <if test="deliverBillNo != null and deliverBillNo != ''">
		    	t.deliverbill_no = #{deliverBillNo,jdbcType=VARCHAR},
		    </if>
		    <if test="loadSource != null and loadSource != ''">
		    	t.load_source = #{loadSource,jdbcType=DECIMAL},
		    </if>
		    <if test="submitTotalCount != null and submitTotalCount != ''">
		    	t.submit_total_count = #{submitTotalCount,jdbcType=DECIMAL},
		    </if>
		    <if test="vehicleNo != null and vehicleNo !=''">
				t.vehicle_No = #{vehicleNo,jdbcType=VARCHAR},
			</if>
			<if test="line != null and line !=''">
				t.line=#{line,jdbcType=VARCHAR},				
			</if>
			    t.error_msg = #{errorMsg,jdbcType=VARCHAR}
		 where t.task_no = #{taskNo}
	</update>
	
	<!-- 提交装车任务时：根据装车任务更新理货员 -->
	<update id="updateLoaderParticipationByLoadTask" parameterType="HashMap" >
		update tfr.t_opt_loader_participation p
		       set p.leave_time = #{endTime,jdbcType=TIMESTAMP}
		       where p.task_id = #{id} and p.leave_time is null
	</update>
	
	<!-- 删除理货员时：根据理货员更新理货员 -->
	<update id="updateLoaderParticipationByLoader" parameterType="java.util.List" >
				begin 
		<foreach collection="list" item="item" separator=";">
			 update tfr.t_opt_loader_participation p
		       set 
		       <if test="item.leaveTime != null and item.leaveTime != ''">
		       p.leave_time = #{item.leaveTime,jdbcType=TIMESTAMP},
		       </if>
		       <if test="item.joinTime != null and item.joinTime != ''">
		       p.join_time =  #{item.joinTime,jdbcType=TIMESTAMP},
		       </if>
		       p.id = #{item.id}
		       where p.id = #{item.id}
		</foreach>
		;end;
	</update>
	
	<!-- 更新pdaTask:leaveTime -->
	<update id="updatePDATaskEntity" parameterType="HashMap" >
		update tfr.t_opt_pda_task p set p.leave_time=#{leaveTime} 
		<where>
			p.task_no=#{taskNo}
			<if test="deviceNo != null and deviceNo != ''">
				and p.device_no=#{deviceNo} 
			</if>
			and p.leave_time >= sysdate
		</where> 
	</update>
	
	<!-- 根据任务编号查询装车任务 -->
	<select id="queryLoadTaskByTaskNo" parameterType="String" resultMap="foss.load.loadtask.loadTaskResultMap">
		select t.id as id,
	     t.task_no as taskNo,
	     t.platform_id as platformId,
	     t.platform_no as platformNo,
	     t.task_type as taskType,
	     t.task_state as state,
	     t.goods_type as goodsType,
	     t.deliverbill_no as deliverBillNo,
	     t.vehicle_no as vehicleNo,
	     to_char(t.load_start_time,'yyyy-mm-dd hh24:mi:ss') as loadStartTime,
	     to_char(t.load_end_time,'yyyy-mm-dd hh24:mi:ss') as loadEndTime,
	     t.orig_org_code as origOrgCode,
	     t.orig_org_name as origOrgName,
	     t.submit_total_count as submitTotalCount,
	     t.error_msg as errorMsg
      from tfr.t_opt_load_task t
		 where t.task_no = #{taskNo}
	</select>
		<!-- 根据任务编号查询装车任务 -->
	<select id="queryLoadTaskByTaskNoForUpdate" parameterType="String" resultMap="foss.load.loadtask.loadTaskResultMap">
		select t.id as id,
	     t.task_no as taskNo,
	     t.platform_id as platformId,
	     t.platform_no as platformNo,
	     t.task_type as taskType,
	     t.task_state as state,
	     t.deliverbill_no as deliverBillNo,
	     t.vehicle_no as vehicleNo,
	     to_char(t.load_start_time,'yyyy-mm-dd hh24:mi:ss') as loadStartTime,
	     to_char(t.load_end_time,'yyyy-mm-dd hh24:mi:ss') as loadEndTime,
	     t.orig_org_code as origOrgCode,
	     t.orig_org_name as origOrgName
      from tfr.t_opt_load_task t
		 where t.task_no = #{taskNo}
		 and t.task_state = 'LOADING'
	     for update nowait
	</select>
	<!-- 根据装车任务id查询装车到达部门 -->
	<select id="queryLoadDestOrgCodesById" parameterType="String" resultType = "String">
		select org.dest_org_code from tfr.t_opt_load_dest_org org where org.load_task_id = #{id}
	</select>
	<!-- 根据装车任务id，包号查询装车运单明细 -->
	<select id="queryLoadWaybillDetailEntityByWayBillNo" parameterType="HashMap" resultMap="foss.load.loadtask.loadWaybillDetailResultMap">
		select id,
	       load_task_id,
	       stock_qty,
	       scan_qty,
	       load_qty,
	       waybill_no,
	       notes,
	       transport_type,
	       goods_name,
	       pack,
	       receive_org_name,
	       reach_org_name,
	       task_begin_time,
	       orig_org_code,
	       be_join_car,
	       load_weight_total,
       	   load_volume_total
	  from tfr.t_opt_load_waybill_detail 
	 where load_task_id = #{loadTaskId}
	   and waybill_no = #{waybillNo}
	   <!-- for update wait 5 -->
	</select>
	
    <!-- zwd 200968 20150417 根据装车任务id，包号查询装车运单明细 -->
	<select id="queryLoadWaybillDetailEntityByPackageNo" parameterType="HashMap" resultMap="foss.load.loadtask.loadWaybillDetailResultMap">
		select id,
	       load_task_id,
	       stock_qty,
	       scan_qty,
	       load_qty,
	       waybill_no,
	       notes,
	       transport_type,
	       goods_name,
	       pack,
	       receive_org_name,
	       reach_org_name,
	       task_begin_time,
	       orig_org_code,
	       be_join_car,
	       load_weight_total,
       	   load_volume_total
	  from tfr.t_opt_load_waybill_detail 
	 where load_task_id = #{loadTaskId}
	   and PACKAGE_NO = #{waybillNo}
	   <!-- for update wait 5 -->
	</select>
	
	<!--更新包扫描运单明细 zwd 200968 20150417-->
 
  <update id='updatePackageWayBillEntity' parameterType="HashMap">
    update tfr.t_opt_load_waybill_detail w
       set 
           w.SCAN_QTY = #{scanQty,jdbcType=DECIMAL},
           w.LOAD_QTY = #{loadQty,jdbcType=DECIMAL},
           w.LOAD_WEIGHT_TOTAL = #{loadWeightTotal,jdbcType=DECIMAL},
           w.LOAD_VOLUME_TOTAL =#{loadVolumeTotal,jdbcType=DECIMAL},
           w.modify_time =  #{modifyDate,jdbcType=TIMESTAMP}
     where w.id = #{id,jdbcType=VARCHAR}
         <![CDATA[and w.modify_time<=#{modifyDate,jdbcType=TIMESTAMP} ]]>
  </update>
  
	
	<!-- 根据流水号、装车运单明细id查询装车流水号id -->
	<select id="queryLoadSerialNoEntityBySerialNo" parameterType="HashMap" resultMap="foss.load.loadtask.loadSerialNoResultMap">
		select id,
		       load_waybill_detail_id,
		       be_loaded,
		       scan_state,
		       goods_state,
		       load_time,
		       create_time,
		       device_no,
		       serial_no,
		       task_begin_time,
		       orig_org_code
		  from tfr.t_opt_load_serialno 
		 where load_waybill_detail_id = #{loadWaybillDetailId}
		   and serial_no = #{serialNo}
		   <!-- for update wait 5 -->
	</select>
	<!-- 根据运单号，流水号查询货件数 -->
	<select id="queryValidLabeledCount" parameterType="HashMap" resultType="int">
		select nvl(count(l.id),0)
		  from pkp.t_srv_labeled_good l
		 where l.waybill_no = #{wayBillNo}
		   and l.serial_no = #{serialNo}
		   and l.active = #{active}
	</select>
	<!-- 查询运单签收状态 -->
	<select id="queryWayBillSignedState" parameterType="String" resultType="int">
		<![CDATA[select nvl(count(ast.id),0)
				  from pkp.t_srv_arrivesheet ast
				  join pkp.t_srv_sign_detail sd on ast.arrivesheet_no = sd.arrivesheet_no
				 where ast.waybill_no = #{wayBillNo}
				   and sd.serial_no = #{serialNo}
				   and ast.active = #{active}
				]]>
	</select>
	<!-- 查询多货：未预配、多货 -->
	<select id="queryGoodsByGoodsStates" parameterType="HashMap" resultMap="loadTaskSerialNoDtoResultMap">
		select s.id as id,
	       s.load_waybill_detail_id as loadWaybillDetailId,
	       s.be_loaded as beLoaded,
	       s.scan_state as scanState,
	       s.goods_state as goodsState,
	       s.load_time as loadTime,
	       s.create_time as createTime,
	       s.device_no as deviceNo,
	       s.serial_no as serialNo,
	       s.task_begin_time as taskBeginTime,
	       s.orig_org_code as origOrgCode,
	       w.scan_qty as scanQty,
	       w.load_qty as loadQty,
	       w.load_weight_total as loadWeightTotal,
	       w.load_volume_total as loadVolumeTotal,
	       w.waybill_no as wayBillNo,
	       w.STOCK_QTY  as stockQty
	  from tfr.t_opt_load_serialno s
	  left join tfr.t_opt_load_waybill_detail w on w.id = s.load_waybill_detail_id
	 where s.goods_state in 
		 	<foreach 
				collection="goodsStates" open="(" close=")" item="item" separator="," index="index"> 
				#{item} 
			</foreach>
	   and w.load_task_id = #{taskId}
	</select>
	<!-- 查询装车出库货物-->
	<select id="queryOutStockGoods" parameterType="HashMap" resultMap="loadTaskSerialNoDtoResultMap">
		<![CDATA[select w.waybill_no as wayBillNo, s.serial_no as serialNo , t.orig_org_code as orgCode
			  from tfr.t_opt_load_waybill_detail w
			 inner join tfr.t_opt_load_task t on t.id = w.load_task_id
			 inner join tfr.t_opt_load_serialno s on s.load_waybill_detail_id = w.id
			 inner join tfr.t_opt_stock st on st.waybill_no = w.waybill_no
			                              and st.serial_no = s.serial_no
			                              and st.org_code = t.orig_org_code
			 where s.be_loaded = #{beLoaded}
			   and w.load_task_id = #{taskId}
			  ]]>     
	</select>
	<!-- 查询装车虚拟出库货物-->
	<select id="querySaleOutStockGoods" parameterType="HashMap" resultMap="loadTaskSerialNoDtoResultMap">
		<![CDATA[select w.waybill_no as wayBillNo, s.serial_no as serialNo, t.orig_org_code as orgCode
			  from tfr.t_opt_load_waybill_detail w
			 inner join tfr.t_opt_load_task t on t.id = w.load_task_id
			 inner join tfr.t_opt_load_serialno s on s.load_waybill_detail_id = w.id
			 inner join tfr.t_opt_stock_sale st on st.waybill_no = w.waybill_no
			                              and st.serial_no = s.serial_no
			                              and st.org_code = t.orig_org_code
			 where s.be_loaded = #{beLoaded}
			   and w.load_task_id = #{taskId}
			  ]]>     
	</select>
	<!-- 查询已装车货物-->
	<select id="queryLoadedGoods" parameterType="HashMap" resultMap="loadTaskSerialNoDtoResultMap">
		select w.waybill_no as wayBillNo, s.serial_no as serialNo
			  from tfr.t_opt_load_waybill_detail w
			 inner join tfr.t_opt_load_task t on t.id = w.load_task_id
			 inner join tfr.t_opt_load_serialno s on s.load_waybill_detail_id = w.id
			 where s.be_loaded = #{beLoaded}
			   and w.load_task_id = #{taskId}
	</select>
	<!-- 查询pda -->
	<select id="queryPDATask" parameterType="HashMap" resultMap="pdaTaskEntityResultMap">
			select p.id  as id,
		       p.device_no as deviceNo,
		       p.join_time as joinTime,
		       p.leave_time as leaveTime,
		       p.be_creator as beCreator,
		       p.task_type as taskType,
		       p.task_no as taskNo
		  from tfr.t_opt_pda_task p
		  <where>
		  <if test="taskNo != null and taskNo != ''">
		  		 p.task_no = #{taskNo}
		  </if>
		  <if test="taskType != null and taskType != ''">
		  		 and p.task_type = #{taskType}
		  </if>
		   <if test="beCreator != null and beCreator != ''">
		  		 and p.be_creator = #{beCreator}
		   </if>
		  </where>
	</select>
	<!-- 根据任务编号查询未提交任务PDA数 -->
	<select id="queryUnSubmitPDAQty" parameterType="String" resultType="int">
			select nvl(sum(NVL2(p.leave_time,0,1)),0) from tfr.t_opt_pda_task p where p.task_no=#{taskNo}
	</select>
	<!-- 根据任务id查询扫描件数 -->
	<select id="queryScanSerialNoQTYByTaskId" parameterType="String"  resultType="int">
			select nvl(sum(w.scan_qty),0) from tfr.t_opt_load_waybill_detail w where w.load_task_id = #{taskId}
	</select>
	<!-- 查询少货运单 -->
	<select id="queryDeliverLoadLackWayBill" parameterType="HashMap" resultMap="deliverLoadGapReportWayBillResultMap">
			select dd.waybill_no as wayBillNo,
		       dd.arrange_goods_qty - wd.scan_qty as lackGoodsQty,
		       p.name as transportType,
		       wd.id as loadWayBillDetailId,
		       w.goods_name as goodsName,
		       w.goods_package as pack,
		       w.customer_pickup_org_name as reachOrgName,
		       w.receive_org_name as receiveOrgName,
		       dd.arrange_goods_qty as planLoadQty,
		       wd.stock_qty as stockQty,
		       wd.scan_qty as scanQty,
		       wd.load_qty as loadQty,
		       wd.load_weight_total as loadWeightTotal,
		       wd.load_volume_total as loadVolumeTotal
		  from pkp.t_srv_deliverbill_detail dd
		  inner join pkp.t_srv_waybill w on w.waybill_no = dd.waybill_no and w.active='Y'
		  inner join pkp.t_srv_deliverbill d on dd.t_srv_deliverbill_id = d.id <![CDATA[and d.STATUS<>'CANCELED']]>
		  inner join tfr.t_opt_load_task t on t.deliverbill_no = d.deliverbill_no
		  inner join pkp.t_srv_product p on p.code = dd.transport_type and p.active = 'Y'
		  left join tfr.t_opt_load_waybill_detail wd on wd.load_task_id = t.id and wd.waybill_no = dd.waybill_no
		  left join tfr.t_opt_load_serialno s on s.load_waybill_detail_id = wd.id
		 where <![CDATA[dd.arrange_goods_qty > nvl(wd.load_qty,0)]]> 
		   and t.task_no = #{taskNo}
	</select>
	<!-- 查询少货流水号 -->
	<select id="queryDeliverLoadLackSerial" parameterType="HashMap" resultMap="foss.load.loadtask.loadSerialNoResultMap">
			<![CDATA[select serial_no as SERIAL_NO,id as ID,goods_state as GOODS_STATE
			  from (select serial_no,id,goods_state from (select s.serial_no as serial_no,s.id as id,s.goods_state as goods_state
			          from tfr.t_opt_load_serialno s
			         where s.load_waybill_detail_id = #{loadWayBillDetailId}
			           and s.goods_state in (#{goodsType},#{goodsType1})
			           order by s.goods_state desc)
			        union all
			        select stock.serial_no as serial_no,'' as id,'' as goods_state 
			          from tfr.t_opt_stock stock
			         where stock.org_code = #{origOrgCode}
			           and stock.waybill_no = #{wayBillNo}
			           and not exists (select id
			                  from tfr.t_opt_load_serialno s
			                 where s.load_waybill_detail_id = #{loadWayBillDetailId}
			                   and s.serial_no = stock.serial_no))
			 where rownum <= #{rowNum}]]>
	</select>
	<!-- 查询少货流水号 -->
	<select id="queryScanedUnloadSerialNos" parameterType="HashMap" resultMap="foss.load.loadtask.loadSerialNoResultMap">
			<![CDATA[select s.serial_no as SERIAL_NO,s.id as ID,s.goods_state as GOODS_STATE
			          from tfr.t_opt_load_serialno s
			         where s.load_waybill_detail_id = #{loadWayBillDetailId}
			           and s.goods_state in ('CANCELED','NOT_LOADING')
			           order by s.goods_state desc
			 ]]>
	</select>
	<!-- 查询少货流水号 -->
	<select id="queryStockUnloadSerialNos" parameterType="HashMap" resultMap="foss.load.loadtask.loadSerialNoResultMap">
			<![CDATA[select stock.serial_no as SERIAL_NO
			          from tfr.t_opt_stock stock
			         where stock.org_code = #{origOrgCode}
			           and stock.waybill_no = #{wayBillNo}
			           and not exists (select id
			                  from tfr.t_opt_load_serialno s
			                 where s.load_waybill_detail_id = #{loadWayBillDetailId}
			                   and s.serial_no = stock.serial_no)
			 		  and rownum <= #{rowNum}
			 ]]>
	</select>
	<!-- 查询装车任务明细 -->
	<select id="queryLoadTaskSerialNoDtoByCondition" parameterType="HashMap" resultMap="loadTaskSerialNoDtoResultMap">
		select t.task_no  as taskNo,
			   t.id as taskId,
			   t.task_state as taskState
			   <if test="wayBillNo != null and wayBillNo != ''">
			   ,
			   w.id                as loadWaybillDetailId,
		       w.load_qty          as loadQty,
		       w.scan_qty          as scanQty,
		       w.load_weight_total as loadWeightTotal,
		       w.load_volume_total as loadVolumeTotal
		       </if>
		       <if test="serialNo != null and serialNo != ''">
		       ,s.id                as id,
		       s.goods_state       as goodsState,
		       s.be_loaded         as beLoaded,
		       s.LOAD_TIME         as loadTime
		       </if>
		  from tfr.t_opt_load_task t
		  <if test="wayBillNo != null and wayBillNo != ''">
		  left join tfr.t_opt_load_waybill_detail w on t.id = w.load_task_id
		  </if>
		  <if test="serialNo != null and serialNo != ''">
		  left join tfr.t_opt_load_serialno s on w.id = s.load_waybill_detail_id
		  </if>
		  <where>
		   <if test="taskNo != null and taskNo != ''">
			   t.task_no = #{taskNo}
		   </if>
		   <if test="taskState != null and taskState != ''">
			   and t.task_state = #{taskState}
		   </if>
		   <if test="wayBillNo != null and wayBillNo != ''">
			   and w.waybill_no = #{wayBillNo}
		   </if>
		   <if test="serialNo != null and serialNo != ''">
			   and s.serial_no = #{serialNo}
		   </if>
		   <if test="goodsState != null and goodsState != ''">
		   	   and s.goods_state = #{goodsState}
		   </if>
			   and rownum = 1
		   </where>
	</select>
	
	<!-- 更新装车运单明细 -->
	<update id="updateLoadTaskWayBillDetail" parameterType="HashMap">
		update tfr.t_opt_load_waybill_detail w
		   set 
		   <if test="notes != null and notes != ''">
		   		w.NOTES = #{notes},
		   </if>
		   	   w.stock_qty = #{stockQty,jdbcType=DECIMAL},
		   	   w.scan_qty = w.scan_qty + #{scanQty,jdbcType=DECIMAL},
		       w.load_qty = w.load_qty + #{loadQty,jdbcType=DECIMAL},
		       w.load_weight_total = w.load_weight_total + #{loadWeightTotal,jdbcType=DECIMAL},
		       w.load_volume_total = w.load_volume_total + #{loadVolumeTotal,jdbcType=DECIMAL},
		    w.id = #{id}
		 where w.id = #{id}
	</update>
	<!-- 更新装车运单明细 -->
	<update id="updateLoadTaskWayBillDetailAdd" parameterType="HashMap">
		update tfr.t_opt_load_waybill_detail w
		   set 
		   <if test="notes != null and notes != ''">
		   		w.NOTES = #{notes},
		   </if>
		   	   w.scan_qty = #{scanQty,jdbcType=DECIMAL},
		       w.load_qty = w.load_qty+1,
		       w.load_weight_total = w.load_weight_total+#{loadWeightTotal,jdbcType=DECIMAL},
		       w.load_volume_total = w.load_volume_total+#{loadVolumeTotal,jdbcType=DECIMAL}
		 where w.id = #{id}
	</update>
	
	<!-- 更新装车流水号信息 -->
	<update id="updateLoadTaskSerialNo" parameterType="HashMap">
		update tfr.t_opt_load_serialno s set 
		 <if test="deviceNo != null and deviceNo != ''">
		   s.device_no=#{deviceNo},
		   </if>
		 <if test="scanState != null and scanState != ''">
		   s.scan_state=#{scanState},
		   </if>
		 <if test="beLoaded != null and beLoaded != ''">
		   s.be_loaded=#{beLoaded},
		   </if>
		 <if test="createTime != null and createTime != ''">
		   s.create_time=#{createTime,jdbcType=TIMESTAMP},
		   </if>
		 <if test="loadTime != null and loadTime != ''">
		   s.load_time=#{loadTime,jdbcType=TIMESTAMP},
		   </if>
		   s.goods_state = #{goodsState}
    	where s.id = #{id}
	</update>
	
	<!-- 批量更新装车流水号信息  zwd 200968 2015-05-22-->
  <update id="updateLoadTaskSerialNoNew" parameterType="com.deppon.foss.module.transfer.load.api.shared.domain.LoadSerialNoEntity">
    update tfr.t_opt_load_serialno s set 
		 <if test="deviceNo != null and deviceNo != ''">
		   s.device_no=#{deviceNo},
		   </if>
		 <if test="scanState != null and scanState != ''">
		   s.scan_state=#{scanState},
		   </if>
		 <if test="beLoaded != null and beLoaded != ''"> 
		   s.be_loaded=#{beLoaded},
		   </if>
		 <if test="createTime != null and createTime != ''">
		   s.create_time=#{createTime,jdbcType=TIMESTAMP},
		   </if>
		 <if test="loadTime != null and loadTime != ''">
		   s.load_time=#{loadTime,jdbcType=TIMESTAMP},
		   </if>
		   s.goods_state = #{goodsState}
    	where s.load_waybill_detail_id = #{loadWaybillDetailId}
    	and <![CDATA[(s.load_time < #{loadTime,jdbcType=TIMESTAMP} or s.load_time is null)]]>
	</update>
	
	
	<!-- 删除装车运单明细 -->
	<delete id="deleteLoadTaskWayBillDetail" parameterType="string">
		delete tfr.t_opt_load_waybill_detail where id=#{id}
	</delete>
	
	<!-- 删除装车流水号明细 -->
	<delete id="deleteLoadTaskSerialNo" parameterType="string">
		delete tfr.t_opt_load_serialno where id=#{id}
	</delete>
	<!--插入装车运单明细记录 -->
	<insert id="insertLoadWayBillDetailEntity" 
		parameterType="com.deppon.foss.module.transfer.load.api.shared.domain.LoadWaybillDetailEntity" >
		insert into tfr.t_opt_load_waybill_detail
		  (id,
		   load_task_id,
		   stock_qty,
		   scan_qty,
		   load_qty,
		   waybill_no,
		   notes,
		   transport_type,
		   goods_name,
		   pack,
		   receive_org_name,
		   reach_org_name,
		   task_begin_time,
		   orig_org_code,
		   be_join_car,
		   LOAD_WEIGHT_TOTAL,
   		   LOAD_VOLUME_TOTAL,
   		   modify_time,
   		   package_no)
		values
		  (#{id,jdbcType=VARCHAR},
		  #{loadTaskId,jdbcType=VARCHAR},
		  #{stockQty,jdbcType=DECIMAL},
		  #{scanQty,jdbcType=DECIMAL},
		  #{loadQty,jdbcType=DECIMAL},
		  #{waybillNo,jdbcType=VARCHAR},
		  #{notes,jdbcType=VARCHAR},
		  #{transportType,jdbcType=VARCHAR},
		  #{goodsName,jdbcType=VARCHAR},
		  #{pack,jdbcType=VARCHAR},
		  #{receiveOrgName,jdbcType=VARCHAR},
		  #{reachOrgName,jdbcType=VARCHAR},
		  #{taskBeginTime,jdbcType=TIMESTAMP},
		  #{origOrgCode,jdbcType=VARCHAR},
		  #{beJoinCar,jdbcType=VARCHAR},
		  #{loadWeightTotal,jdbcType=DECIMAL},
		  #{loadVolumeTotal,jdbcType=DECIMAL},
		  #{modifyDate,jdbcType=TIMESTAMP},
		  #{packageNo,jdbcType=VARCHAR}
		  )
	</insert>
	<!--插入装车流水号明细记录 -->
	<insert id="insertLoadSerialNoEntity" 
		parameterType="com.deppon.foss.module.transfer.load.api.shared.domain.LoadSerialNoEntity" >
		insert into tfr.t_opt_load_serialno
		  (id,
		   load_waybill_detail_id,
		   be_loaded,
		   scan_state,
		   goods_state,
		   load_time,
		   create_time,
		   device_no,
		   serial_no,
		   task_begin_time,
		   orig_org_code)
		values
		  (#{id,jdbcType=VARCHAR},
		  #{loadWaybillDetailId,jdbcType=VARCHAR},
		  #{beLoaded,jdbcType=VARCHAR},
		  #{scanState,jdbcType=VARCHAR},
		  #{goodsState,jdbcType=VARCHAR},
		  #{loadTime,jdbcType=TIMESTAMP},
		  #{createTime,jdbcType=TIMESTAMP},
		  #{deviceNo,jdbcType=VARCHAR},
		  #{serialNo,jdbcType=VARCHAR},
		  #{taskBeginTime,jdbcType=TIMESTAMP},
		  #{origOrgCode,jdbcType=VARCHAR}
		  )
	</insert>
	<!-- 查询理货员 -->
	<select id="queryLoaderParticipation" parameterType="HashMap" resultMap="foss.load.loadtask.loaderParticipationResultMap">
		select l.loader_code, l.leave_time, l.join_time,l.id
			  from tfr.t_opt_loader_participation l
			 where l.task_id = #{taskId}
			   and l.loader_code = #{loaderCode} 
			   and l.flag = #{flag}
	</select>	
	<!-- 开单非库存流水号 -->
	<select id="queryLabeledGoodsNotInStock" parameterType="HashMap" resultMap="pdaGoodsSerialNoDtoResultMap">
		select l.serial_no as serialNo
			  from pkp.t_srv_labeled_good l
			 where l.waybill_no = #{wayBillNo}
			   and l.active = 'Y'
			   and not exists (select s.id
			          from tfr.t_opt_stock s
			         where s.waybill_no = l.waybill_no
			           and s.serial_no = l.serial_no
			           and s.org_code = #{orgCode})
	</select>
	<!-- 查询库存流水号 -->
	<select id="queryStockSerialNos" parameterType="HashMap" resultMap="pdaGoodsSerialNoDtoResultMap">
			select s.serial_no as serialNo 
			  from tfr.t_opt_stock s
			 where s.waybill_no = #{wayBillNo}
			   and s.org_code = #{orgCode}
			   <if test="goodsAreaCode != null and goodsAreaCode != ''">
			  	 and s.goods_area_code = #{goodsAreaCode}
			   </if>
			   <![CDATA[and rownum < ]]>#{needLoadQty}
			   order by s.in_stock_time
	</select>
	<!-- 根据运单号查询库存中为包装流水号 -->
	<select id="queryUnpackStockSerialNos" parameterType="HashMap" resultMap="pdaGoodsSerialNoDtoResultMap">
			select p.serial_no as serialNo 
			  from tfr.t_opt_package_request_detail p
			 inner join tfr.t_opt_stock s on s.waybill_no = p.waybill_no
			                             and s.serial_no = p.serial_no
			 where p.is_packed = 'N'
			   and s.org_code = #{orgCode}
			   and p.waybill_no = #{wayBillNo}
	</select>
	<!-- 查询是否未包装 -->
	<select id="queryBeNeedPack" parameterType="HashMap" resultType="String">
			select d.is_packed
			  from tfr.t_opt_package_require r
			  left join tfr.t_opt_package_request_detail d on r.waybill_no =
			                                                  d.waybill_no
			 where d.waybill_no = #{wayBillNo}
			   and d.serial_no = #{serialNo}
			   <if test="orgCode != null and orgCode != ''">
			   and r.package_org_code = #{orgCode}
			   </if>
			   and d.is_packed='N'
	</select>
	<!-- 查询是否未包装 -->
	<select id="stockQtyIsBiggerThanLoadQty" parameterType="HashMap" resultType="int">
			select nvl(arrange_goods_qty, 0) - nvl(w.load_qty, 0)
			  from pkp.t_srv_deliverbill d
			  inner join pkp.t_srv_deliverbill_detail dd on d.id =
			                                               dd.t_srv_deliverbill_id
			  left join tfr.t_opt_load_waybill_detail w on w.waybill_no = dd.waybill_no and w.load_task_id = #{taskId}
			 where 
			   dd.waybill_no = #{wayBillNo}
			   and d.deliverbill_no = #{deliverBillNo}
			   <![CDATA[and d.STATUS<>'CANCELED']]>
	</select>
	<!-- 查询运单库存件数 -->
	<select id="queryWayBillStockQty" parameterType="HashMap" resultType="int">
			select nvl(sum(ws.stock_goods_qty),0) from tfr.t_opt_waybill_stock ws where ws.waybill_no = #{wayBillNo} and ws.org_code = #{orgCode}
	</select>
	<!-- 查询运单排单件数 -->
	<select id="queryDeliverArrangeQty" parameterType="HashMap" resultType="int">
			select nvl(sum(dd.arrange_goods_qty),0) from pkp.t_srv_deliverbill d
				inner join pkp.t_srv_deliverbill_detail dd on dd.t_srv_deliverbill_id = d.id
				where d.deliverbill_no = #{deliverBillNo} and dd.waybill_no = #{wayBillNo}
				<![CDATA[and d.STATUS<>'CANCELED']]>
	</select>
	<!-- 根据装车任务好查询装车交接单号 -->
	<select id="queryHandOverBillNoByTaskNo" parameterType="HashMap" resultType="String">
			select h.handover_no from tfr.t_opt_handoverbill h where h.load_task_no = #{loadTaskNo}
			and h.handover_no not like 'B%' and h.handover_no not like 'KYB%'
	</select>
	
	<!-- 更新待补录的装卸任务明细重量体积 -->
	<update id="updateMakeUpPDAloadAndUnload" parameterType="HashMap">
		begin
		update tfr.t_opt_load_waybill_detail w
		   set 
		   w.load_weight_total = w.load_qty*#{averageWeight,jdbcType=DECIMAL},
		   w.load_volume_total = w.load_qty*#{averageVolume,jdbcType=DECIMAL}
		 where w.waybill_no = #{wayBillNo};
		 
		 update  tfr.t_opt_unload_waybill_detail ud 
		 	set 
		 	ud.unload_weight_total = ud.operation_goods_qty*#{averageWeight,jdbcType=DECIMAL},
			ud.unload_volume_total = ud.operation_goods_qty*#{averageVolume,jdbcType=DECIMAL}
			where ud.waybill_no =#{wayBillNo};
		end; 
	</update>
	
	<!-- 查询理货员 -->
	<select id="queryLoaderByTaskID" parameterType="String" resultMap="foss.load.loadtask.loaderParticipationResultMap">
		select *
			  from (select p.id            as id,
			               p.loader_name   as loaderName,
			               p.loader_code   as loaderCode,
			               p.load_org_code as loadOrgCode,
			               p.load_org_name as loadOrgName,
			               p.join_time     as joinTime,
			               p.leave_time    as leaveTime,
			               p.be_creator    as beCreator,
			               p.task_type     as taskType,
			               p.task_id       as taskId,
			               rownum          row_num
			          from tfr.t_opt_loader_participation p
			         where p.task_id = #{taskId}
			           and p.be_creator = 'Y'
               )
			 where row_num = 1
	</select>
	<!-- 根据扫描时间更新包装车运单明细 -->
	<update id="updatePackageWayBillQTYByScanTime" parameterType="HashMap">
		 update tfr.t_opt_load_waybill_detail w
		   set 
		   	   w.scan_qty = #{loadWayBill.scanQty,jdbcType=DECIMAL},
		       w.load_qty = #{loadWayBill.loadQty,jdbcType=DECIMAL},
          	   w.modify_time = #{loadWayBill.modifyDate,jdbcType=TIMESTAMP}
		 where w.id = #{loadWayBill.id,jdbcType=VARCHAR}
         and  <![CDATA[w.modify_time<#{scanTime,jdbcType=TIMESTAMP}]]>
	</update>	
	
	<!-- 根据装车任务id查询包号 -->
	<select id="queryLoadPackageNoById" parameterType="String" resultType = "String">
		select distinct d.package_no from tfr.t_opt_load_waybill_detail d
		where d.load_task_id = #{loadTaskId}
			and d.package_no is not null
			and d.load_qty>=1
	</select>
	
	<!--包生成交接单存储过程  -->
    <select id="createPackageHandoverBill" parameterType="map" statementType="CALLABLE">
        {CALL TFR.Pro_Handover_Bypackage_new(#{ taskNo,mode=IN,jdbcType=VARCHAR},
        										#{packageNo,mode=IN,jdbcType=VARCHAR},
        										#{length,mode=IN,jdbcType=INTEGER},	
						        				#{isDirectPackage,mode=IN,jdbcType=VARCHAR},
						        				#{handoverNo,mode=OUT,jdbcType=VARCHAR},
						        				#{exceptionInfo,mode=OUT,jdbcType=VARCHAR}
						        				)}
    </select>
    
  	<!-- 插入派送装车运单退回 -->
	<insert id="insertLoadWaybillReturn" parameterType="com.deppon.foss.module.transfer.pda.api.shared.dto.PDAWaybillReturnDto">
		insert into tfr.t_opt_load_waybill_return
		  (id,
		   load_task_no,
		   waybill_no,
		   return_reason,
		   transport_type,
		   stock_qty,
		   operate_qty)
		values
		  (
		  sys_guid(),
		  #{LoadTaskNo,jdbcType=VARCHAR},
		  #{waybillNo,jdbcType=VARCHAR},
		  #{returnReason,jdbcType=VARCHAR},
		  #{transportType,jdbcType=VARCHAR},
		  #{stockQty,jdbcType=DECIMAL},
		  #{operateQty,jdbcType=DECIMAL})
	</insert>
    
    
	<select id="beExistPickHandover" parameterType="java.util.List" resultType="int">
			SELECT /**查询交接单是否存在*/ count(1)
		    FROM TFR.T_OPT_PICK_HANDOVER P
		   WHERE P.LOAD_TASK_NO IN 
 		<foreach 
			collection="list" open="(" close=")" item="item" separator="," index="index"> 
			#{item}
		</foreach>
	</select>	
	
	
	<select id="selectBaseLineDestOrgCode" parameterType="String" resultType="String">
		SELECT /**查询营业部所属的始发外场*/ line.DEST_ORG_CODE
	    FROM bse.t_bas_line line
	    WHERE line.ORIG_ORG_CODE = #{consigneeDeptCode,jdbcType=VARCHAR}
	   		  and line.LINE_SORT='BSE_LINE_SORT_SOURCE' 
	   		  and line.IS_DEFAULT='Y' 
	   		  and line.active='Y' 
	   		  and line.trans_type='TRANS_VEHICLE'
	</select>
    
    <insert id="addLTLHandoverBill" parameterType="com.deppon.foss.module.transfer.pda.api.shared.domain.CreateDeliveryReceiptEntity">
		insert into TFR.T_OPT_PICK_HANDOVER(
			ID,
		   	HANDOVER_NO,
		   	HANDOVER_TYPE,
		   	DRIVER_CODE,
		   	VEHICLE_NO,
		   	WAYBILL_QTY,
		   	GOODS_QTY_TOTAL,
		  	WEIGHT_TOTAL,
		   	VOLUME_TOTAL,
		   	CREATE_TIME,
		   	MODIFY_TIME,
		   	ASSIGN_STATE,
		   	ARRIVE_DATE,
		   	DEST_ORG_CODE,
		   	LOAD_TASK_NO)
		values
		(
	  		SYS_GUID(), 
         	#{handOverNo,jdbcType=VARCHAR},
         	#{handOverType,jdbcType=VARCHAR},
         	#{driverCode,jdbcType=VARCHAR},
         	#{truckCode,jdbcType=VARCHAR},
         	#{totalVotes,jdbcType=INTEGER},
         	#{totalPieces,jdbcType=INTEGER},
         	#{totalWeight,jdbcType=DECIMAL},
         	#{totalVolume,jdbcType=DECIMAL},
         	#{creationTime,jdbcType=TIMESTAMP},
         	#{submissionTime,jdbcType=VARCHAR},
        	#{assignState,jdbcType=VARCHAR},
         	SYSDATE,
         	#{consigneeDeptCode,jdbcType=VARCHAR},
         	#{taskCode,jdbcType=VARCHAR})
    </insert>
    <insert id="addLTLHandoverBillDetail" parameterType="com.deppon.foss.module.transfer.pda.api.shared.domain.WaybillInfoEntity">
		insert into TFR.T_OPT_PICK_HANDOVER_DETAIL(
			ID,
			HANDOVER_NO,
			WAYBILL_NO,
			GOODS_QTY,
			PACKAGE_REMARK,
			CREATE_TIME)
		values
		(
	  		SYS_GUID(), 
         	#{handOverNo,jdbcType=VARCHAR},
         	#{wblCode,jdbcType=VARCHAR},
         	#{pieces,jdbcType=VARCHAR},
         	#{packageRemark,jdbcType=VARCHAR},
         	SYSDATE)
    </insert>
    <insert id="addLTLHandoverSerialNo" parameterType="com.deppon.foss.module.transfer.pda.api.shared.domain.WaybillInfoEntity">
		insert into TFR.T_OPT_PICK_HANDOVER_SERIALNO(
			ID,
			HANDOVER_NO,
			SERAIL_NO,
			WAYBILL_NO,
			CREATE_TIME)
		values
		(
	  		SYS_GUID(), 
         	#{handOverNo,jdbcType=VARCHAR},
         	#{serailNo,jdbcType=VARCHAR},
         	#{wblCode,jdbcType=VARCHAR},
         	SYSDATE)
    </insert>
    
    <!-- 根据运单查询零担电子运单交接单信息 -->
    <select id="queryLTLPackHandoverbill" parameterType="String" resultType="com.deppon.foss.module.transfer.pda.api.shared.domain.CreateDeliveryReceiptEntity">
    	SELECT 
    	t.ID as id,
		   	t.HANDOVER_NO as handOverNo,
		   	t.HANDOVER_TYPE as handOverType,
		   	t.DRIVER_CODE as driverCode,
		   	t.VEHICLE_NO as truckCode,
		   	t.WAYBILL_QTY as totalVotes,
		   	t.GOODS_QTY_TOTAL as totalPieces,
		  	t.WEIGHT_TOTAL as totalWeight,
		   	t.VOLUME_TOTAL as totalVolume,
		   	t.CREATE_TIME as creationTime,
		   	t.MODIFY_TIME as submissionTime,
		   	t.MODIFY_TIME as modifyTime,
		   	t.ASSIGN_STATE as assignState,
		   	t.LOAD_TASK_NO as taskCode
    	FROM TFR.T_OPT_PICK_HANDOVER t
    	INNER JOIN TFR.T_OPT_PICK_HANDOVER_DETAIL d
    	ON t.HANDOVER_NO = d.HANDOVER_NO
    	WHERE d.WAYBILL_NO=#{wblCode,jdbcType=VARCHAR}
    	and t.HANDOVER_TYPE='CREATE_PDA_BSE_PIC'
    </select>
    
    <!-- 根据运单查询零担电子运单交接单详情信息 -->
    <select id="queryLTLPackHandoverbillDetail" parameterType="String" resultType="com.deppon.foss.module.transfer.pda.api.shared.domain.WaybillInfoEntity"> 
    	SELECT 
    	d.ID,
			d.HANDOVER_NO as handOverNo,
			d.WAYBILL_NO as wblCode,
			d.GOODS_QTY as pieces,
			d.PACKAGE_REMARK as packageRemark,
			d.CREATE_TIME as scanTime
    	FROM TFR.T_OPT_PICK_HANDOVER t
    	INNER JOIN TFR.T_OPT_PICK_HANDOVER_DETAIL d
    	ON t.HANDOVER_NO = d.HANDOVER_NO
    	WHERE d.WAYBILL_NO=#{wblCode}
    </select>
    
    
    <!--二程接驳，司机装车装车列表合并为一条交接单  -->
    <insert id="addPickHandoverBill" parameterType="HashMap">
		 begin
		 /**二程接驳，司机装车装车列表合并为一条交接单**/
		 	INSERT INTO TFR.T_OPT_PICK_HANDOVER
			  (ID,
			   HANDOVER_NO,
			   HANDOVER_TYPE,
			   LOAD_TASK_NO,
			   VEHICLE_NO,
			   WAYBILL_QTY,
			   GOODS_QTY_TOTAL,
			   WEIGHT_TOTAL,
			   VOLUME_TOTAL,
			   CREATE_USER_CODE,
			   CREATE_TIME,
			   ASSIGN_STATE,
			   DEST_ORG_CODE,
			   MODIFY_TIME)
		  SELECT SYS_GUID() ,
		         #{handOverNo,jdbcType=VARCHAR},
		         #{handOverType,jdbcType=VARCHAR},
		         #{loadTaskNos,jdbcType=VARCHAR},
		         MAX(P.VEHICLE_NO),
		         SUM(P.WAYBILL_QTY),
		         SUM(P.GOODS_QTY_TOTAL),
		         SUM(P.WEIGHT_TOTAL),
		         SUM(P.VOLUME_TOTAL),
		         MAX(P.CREATE_USER_CODE),
		         SYSDATE,
		         'UNASSIGN',
		         MAX(P.DEST_ORG_CODE),
		         SYSDATE
		    FROM TFR.T_OPT_PICK_HANDOVER P
		   WHERE P.LOAD_TASK_NO IN 
 				 <foreach 
					collection="taskNos" open="(" close=")" item="item" separator="," index="index"> 
					#{item} 
				 </foreach>;
				 
		 insert into tfr.t_opt_pick_handover_detail
			  (ID, HANDOVER_NO, WAYBILL_NO, GOODS_QTY, CREATE_TIME, MODIFY_TIME)
			  SELECT sys_guid(), #{handOverNo,jdbcType=VARCHAR}, d.waybill_no, d.goods_qty, SYSDATE, SYSDATE
			    FROM tfr.t_opt_pick_handover_detail d
			    JOIN tfr.t_opt_pick_handover h ON h.handover_no = d.handover_no
			   WHERE h.LOAD_TASK_NO IN 
				 <foreach 
					collection="taskNos" open="(" close=")" item="item" separator="," index="index"> 
					#{item} 
				 </foreach>;

		 insert into TFR.T_OPT_PICK_HANDOVER_SERIALNO
			  (ID, HANDOVER_NO, SERAIL_NO, WAYBILL_NO, CREATE_TIME)
			  SELECT SYS_GUID(), #{handOverNo,jdbcType=VARCHAR}, S.SERAIL_NO, S.WAYBILL_NO, SYSDATE
			    FROM TFR.T_OPT_PICK_HANDOVER_SERIALNO S
			    JOIN TFR.T_OPT_PICK_HANDOVER H ON H.HANDOVER_NO = S.HANDOVER_NO
			   WHERE h.load_task_no IN  
			   	 <foreach 
					collection="taskNos" open="(" close=")" item="item" separator="," index="index"> 
					#{item} 
				 </foreach>;
				 
		 update tfr.t_opt_pick_handover  p set p.bill_valid = '0' where p.load_task_no in
		 	 <foreach 
					collection="taskNos" open="(" close=")" item="item" separator="," index="index"> 
					#{item} 
				 </foreach>; 	 	 
		 end;
	</insert>

	<!-- 根据接驳点编码查询接驳点名称-->
	<select id="queryAccessPointName" parameterType="String" resultType="String">
	<![CDATA[
		select /**二程接驳-根据接驳点编码查询接驳点名称**/
		 p.name
  		from bse.t_bas_access_point p
 		where p.code = #{pointCode,jdbcType=VARCHAR}
   			and p.active = 'Y'
   			and rownum = 1
	]]>
	</select>	
	<!-- 根据任务号查询出运单号 与子母件单号比对 hongwy 218427  设置取出最小单号（判断有无结果即可）-->
	<select id="queryWayBillNos" parameterType="String" resultMap="foss.load.loadtask.loadTaskResultMap">
	select min(rd.parent_waybill_no) waybillNo from pkp.t_srv_waybill_relate_detail rd where rd.waybill_no in
		 (select wd.waybill_no
		  from tfr.t_Opt_Load_Waybill_Detail wd
		  left join tfr.t_opt_load_task t
		    on wd.load_task_id = t.id
	where t.task_no = #{taskNo})
 
	</select>

	
	<!-- 查询运单最后的入库时间 -->
	<select id="queryLastInstockTime" parameterType="java.lang.String" resultType="java.util.Date">
	<![CDATA[
		select s.in_stock_time from tfr.t_opt_stock s where s.waybill_no=#{waybillNo} and rownum<2 order by s.in_stock_time desc
	]]>
	</select>
	<!-- 查询运单专车时间 -->
	<select id="queryLoadTime" parameterType="java.lang.String" resultType="java.util.Date">
		<![CDATA[
		select k.load_start_time from 
		(select * from tfr.T_OPT_LOAD_TASK t left join tfr.T_OPT_LOAD_WAYBILL_DETAIL w on t.Id=w.load_task_id order by t.load_start_time desc) k 
		where k.waybill_no=#{waybillNo} and rownum<2
		]]>
	</select>

	
	<!-- 判断某运单是不是在派送装车任务中 -->
	<select id="judgeIfIsDeliverLoad" parameterType="java.lang.String" resultType="int">
		 select count(*)
                  from tfr.T_OPT_LOAD_TASK t
                  left join tfr.T_OPT_LOAD_WAYBILL_DETAIL w
                    on t.Id = w.load_task_id
                 where t.task_type = 'DELIVER_LOAD'
                   and t.task_state in ( 'SUBMITED','FINISHED')
                   and w.scan_qty > 0
                   and w.load_qty > 0
                   and w.waybill_no=#{waybillNo}
	</select>

<!-- 根据运单号查询在库存中没有 -->
	<select id="queryWaybillInStock" parameterType="java.lang.String" resultType="java.lang.String">
	   select s.serial_no from tfr.T_OPT_STOCK s where s.waybill_no=#{waybillNo}
	</select>
	<!-- 根据运单查询库存中的个数 -->
	<select id="waybillNoQtyInStock" parameterType="java.lang.String" resultType="int">
		select count(s.waybill_no) from tfr.t_opt_stock s where s.waybill_no=#{waybillNo}
	</select>
	<!-- 根据运单号查询已装车的运单的流水号 -->
	<select id="loadWaybillQty" parameterType="java.lang.String" resultType="int">
		select count(k.serial_no) from 
		(select * from tfr.T_OPT_LOAD_TASK t left join tfr.T_OPT_LOAD_WAYBILL_DETAIL w 
		on t.Id=w.load_task_id left join tfr.T_OPT_LOAD_SERIALNO f 
		on f.load_waybill_detail_id=w.id where t.task_type='DELIVER_LOAD' and t.task_state in ( 'SUBMITED','FINISHED') and w.load_qty>0 and  w.load_qty>0)k
            where k.waybill_no=#{waybillNo}
	</select>
    
    <!-- 根据已有单号查询是否有重复单号 -->
    <select id ="queryTaskNos" parameterType="java.lang.String" resultType="java.lang.String" >
         select t.task_no from tfr.t_opt_load_task t where t.task_no = #{taskNo}
    </select>
    
    <!-- 根据装车任务编号查询所有运单号信息 -->
	<select id="queryWayBillNoList" parameterType="java.lang.String" resultType="java.lang.String" >
		 	select wd.waybill_no from tfr.t_opt_load_waybill_detail wd 
		left join tfr.t_opt_load_task t on wd.load_task_id = t.id
	 	where t.task_no = #{taskNo}
	</select>
	
	<!-- 查询装车虚拟出库货物-->
<!-- 	<select id="querySaleOutStockGoods" parameterType="HashMap" resultMap="loadTaskSerialNoDtoResultMap">
		<![CDATA[select w.waybill_no as wayBillNo, s.serial_no as serialNo, t.orig_org_code as orgCode
			  from tfr.t_opt_load_waybill_detail w
			 inner join tfr.t_opt_load_task t on t.id = w.load_task_id
			 inner join tfr.t_opt_load_serialno s on s.load_waybill_detail_id = w.id
			 inner join tfr.t_opt_stock_sale st on st.waybill_no = w.waybill_no
			                              and st.serial_no = s.serial_no
			                              and st.org_code = t.orig_org_code
			 where s.be_loaded = #{beLoaded}
			   and w.load_task_id = #{taskId}
			  ]]>     
	</select> -->
</mapper>