<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="foss.load.loaderworkload" >
  <resultMap id="LoaderWorkloadResultMap" 
  		type="com.deppon.foss.module.transfer.load.api.shared.domain.LoaderWorkloadEntity" >
    <id column="id" property="id" />
    <result column="loaderCode" property="loaderCode" />
    <result column="loaderName" property="loaderName" />
    <result column="loaderOrgCode" property="loaderOrgCode" />
    <result column="loaderOrgName" property="loaderOrgName" />
    <result column="loadOrgCode" property="loadOrgCode" />
    <result column="loadOrgName" property="loadOrgName" />
    <result column="orgName" property="orgName" />
    <result column="orgCode" property="orgCode" />
    <result column="handleType" property="handleType" />
    <result column="taskType" property="taskType" />
    <result column="handoverNo" property="handoverNo" />
    <result column="vehicleNo" property="vehicleNo" />
    <result column="taskNo" property="taskNo" />
    <result column="taskId" property="taskId" />
    <result column="joinTime" property="joinTime" />
    <result column="leaveTime" property="leaveTime" />
    <result column="weight" property="weight" />
    <result column="waybillQty" property="waybillQty" />
    <result column="goodsQty" property="goodsQty" />
    <result column="volume" property="volume" />
    <result column="notes" property="notes" />
    <result column="adjusterCode" property="adjusterCode" />
    <result column="adjusterName" property="adjusterName" />
    <result column="adjustTime" property="adjustTime" />
    <result column="adjustOrgCode" property="adjustOrgCode" />
    <result column="adjustOrgName" property="adjustOrgName" />
    <result column="goodsType" property="goodsType" />
    <result column="expressOrLd" property="expressOrLd" />
  </resultMap>

  <resultMap id="LoaderWorkloadDtoResultMap" 
  		type="com.deppon.foss.module.transfer.load.api.shared.dto.LoaderWorkloadDto"
  		extends="LoaderWorkloadResultMap" >
    <result column="taskBeginTime" property="taskBeginTime" />
    <result column="taskEndTime" property="taskEndTime" />
    <result column="joinDate" property="joinDate" />
    <result column="taskPersonCount" property="taskPersonCount" />
    <result column="loadWeight" property="loadWeight" />
    <result column="unloadWeight" property="unloadWeight" />
    <result column="totWeight" property="totWeight" />
    <result column="loadWaybillQty" property="loadWaybillQty" />
    <result column="unloadWaybillQty" property="unloadWaybillQty" />
    <result column="totWaybillQty" property="totWaybillQty" />
    <result column="loadGoodsQty" property="loadGoodsQty" />
    <result column="unloadGoodsQty" property="unloadGoodsQty" />
    <result column="totGoodsQty" property="totGoodsQty" />
    <result column="taskType" property="taskType" />
    <result column="dataSource" property="dataSource"/>
    <result column="taskEndTime" property="taskEndTime"/>
    <result column="volumeTotal" property="volumeTotal"/>
    <result column="weightTotal" property="weightTotal"/>
    <result column="goodsQtyTotal" property="goodsQtyTotal"/>
  </resultMap>
  
  <resultMap id="LoaderWorkloadDetailDtoResultMap" 
  		type="com.deppon.foss.module.transfer.load.api.shared.dto.LoaderWorkloadDetailDto"
  		extends="LoaderWorkloadResultMap" >
    <result column="id" property="id" />
    <result column="vehicleNo" property="vehicleNo" />
    <result column="taskNo" property="taskNo" />
    <result column="handleType" property="handleType" />
    <result column="taskType" property="taskType" />
    <result column="taskBeginDate" property="taskBeginDate" />
    <result column="totWeight" property="totWeight" />
    <result column="totWaybillQty" property="totWaybillQty" />
    <result column="totGoodsQty" property="totGoodsQty" />
    <result column="taskEndTime" property="taskEndTime" />
    <result column="orgCode" property="orgCode" />
    <result column="goodsType" property="goodsType" />
  </resultMap>
  
  <resultMap id="unloadTaskResultMap" type="com.deppon.foss.module.transfer.load.api.shared.domain.UnloadTaskEntity" >
    <id column="id" property="id" />
    <result column="unloadTaskNo" property="unloadTaskNo" />
    <result column="vehicleNo" property="vehicleNo" />
    <result column="platformNo" property="platformNo" />
    <result column="platformId" property="platformId" />
    <result column="unloadStartTime" property="unloadStartTime" />
    <result column="unloadEndTime" property="unloadEndTime" />
    <result column="taskState" property="taskState" />
    <result column="unloadType" property="unloadType" />
    <result column="unloadWay" property="unloadWay" />
    <result column="unloadOrgCode" property="unloadOrgCode" />
    <result column="unloadOrgName" property="unloadOrgName" />
    <result column="beException" property="beException" />
    <result column="exceptionNotes" property="exceptionNotes" />
    <result column="planCompleteTime" property="planCompleteTime" />
    <result column="beScanInstock" property="beScanInstock" />
  </resultMap>
 <!--差错货量扣除Map-->
   <resultMap id="ErrorVolumeDeductionDtoResultMap" type="com.deppon.foss.module.transfer.load.api.shared.dto.ErrorVolumeDeductionDto" >
	<id column="id" property="id" />
	<id column="errorId" property="errorId" />
	<id column="waybillNo" property="waybillNo" />
	<id column="respEmpCode" property="respEmpCode" />
	<id column="respEmpName" property="respEmpName" />
	<id column="respDeptCode" property="respDeptCode" />
	<id column="respDeptName" property="respDeptName" />
	<id column="weight" property="weight" />
	<id column="delTime" property="delTime" />
  </resultMap>
  <!-- 装卸车工作量_个人统计查询 -->
  <select id="queryPersonCount" parameterType="com.deppon.foss.module.transfer.load.api.shared.dto.LoaderWorkloadDto" resultMap="LoaderWorkloadDtoResultMap">
	<![CDATA[
		select
	      lw.id
	      , to_char(tt.load_end_time, 'yyyy-mm-dd') joinDate
	      , lw.loader_name loaderName
	      , lw.loader_code loaderCode
	      , lw.org_name orgName
	      , lw.loader_org_name loaderOrgName
	      , lw.task_type taskType
	      , lw.handover_no handoverNo
	      , lw.vehicle_no vehicleNo
	      , lw.task_no taskNo
	      , tt.load_start_time taskBeginTime
	      , tt.load_end_time taskEndTime
	      , lw.join_time joinTime
	      , lw.leave_time leaveTime
	      , lw.weight weight
	      , lw.waybill_qty waybillQty
	      , lw.goods_qty goodsQty
	      , lw.notes notes
	      , lw.goods_type goodsType
	    from 
	      tfr.t_opt_loader_workload lw
	    inner join tfr.t_opt_load_task tt on tt.task_no = lw.task_no and lw.handle_type='LOAD' and lw.express_or_ld = 'LD'
    ]]>
    <include refid="queryPersonCountWhere"/>
     union all 
	   <![CDATA[ select
	      lw.id
	      , to_char(tt.unload_end_time, 'yyyy-mm-dd') joinDate
	      , lw.loader_name loaderName
	      , lw.loader_code loaderCode
	      , lw.org_name orgName
	      , lw.loader_org_name loaderOrgName
	      , lw.task_type taskType
	      , lw.handover_no handoverNo
	      , lw.vehicle_no vehicleNo
	      , lw.task_no taskNo
	      , tt.unload_start_time taskBeginTime
	      , tt.unload_end_time taskEndTime
	      , lw.join_time joinTime
	      , lw.leave_time leaveTime
	      , lw.weight weight
	      , lw.waybill_qty waybillQty
	      , lw.goods_qty goodsQty
	      , lw.notes notes
	      , lw.goods_type goodsType
	    from 
	      tfr.t_opt_loader_workload lw
	    inner join tfr.t_opt_unload_task  tt on tt.unload_task_no = lw.task_no and lw.handle_type='UNLOAD'and lw.express_or_ld = 'LD'
     ]]>
    	<include refid="queryPersonCountWhere1"/>
  </select>
   <!-- 装卸车工作量_个人统计查询(快递)-->
  <select id="queryPersonCountExpress" parameterType="com.deppon.foss.module.transfer.load.api.shared.dto.LoaderWorkloadDto" resultMap="LoaderWorkloadDtoResultMap">
	<![CDATA[
		select
	      lw.id
	      , to_char(tt.load_end_time, 'yyyy-mm-dd') joinDate
	      , lw.loader_name loaderName
	      , lw.loader_code loaderCode
	      , lw.org_name orgName
	      , lw.loader_org_name loaderOrgName
	      , lw.handle_type handleType
	      , lw.task_type taskType
	      , lw.handover_no handoverNo
	      , lw.vehicle_no vehicleNo
	      , lw.task_no taskNo
	      , tt.load_start_time taskBeginTime
	      , tt.load_end_time taskEndTime
	      , lw.join_time joinTime
	      , lw.leave_time leaveTime
	      , lw.weight weight
	      , lw.waybill_qty waybillQty
	      , lw.goods_qty goodsQty
	      , lw.notes notes
	      , lw.goods_type goodsType
	      , lw.expressCount expressCount
	   	  , lw.a_type_count acount
	      , lw.b_type_count bcount
	    from 
	      tfr.t_opt_loader_workload lw
	    inner join tfr.t_opt_load_task tt on tt.task_no = lw.task_no and lw.handle_type='LOAD'  and lw.express_or_ld='EXPRESS'
    ]]>
    <include refid="queryPersonCountWhere"/>
     union all 
	   <![CDATA[ select
	      lw.id
	      , to_char(tt.unload_end_time, 'yyyy-mm-dd') joinDate
	      , lw.loader_name loaderName
	      , lw.loader_code loaderCode
	      , lw.org_name orgName
	      , lw.loader_org_name loaderOrgName
	      , lw.handle_type handleType
	      , lw.task_type taskType
	      , lw.handover_no handoverNo
	      , lw.vehicle_no vehicleNo
	      , lw.task_no taskNo
	      , tt.unload_start_time taskBeginTime
	      , tt.unload_end_time taskEndTime
	      , lw.join_time joinTime
	      , lw.leave_time leaveTime
	      , lw.weight weight
	      , lw.waybill_qty waybillQty
	      , lw.goods_qty goodsQty
	      , lw.notes notes
	      , lw.goods_type goodsType
	      , lw.expressCount expressCount
	      , lw.a_type_count acount
	      , lw.b_type_count bcount
	    from 
	      tfr.t_opt_loader_workload lw
	    inner join tfr.t_opt_unload_task  tt on tt.unload_task_no = lw.task_no and lw.handle_type='UNLOAD' and lw.express_or_ld='EXPRESS'
     ]]>
    	<include refid="queryPersonCountWhere1"/>
  </select>
    
   <select id="queryPersonCountSummary" parameterType="com.deppon.foss.module.transfer.load.api.shared.dto.LoaderWorkloadDto" resultMap="LoaderWorkloadDtoResultMap">
	<![CDATA[
		select 
        sum(loadWeight) loadWeight
      , sum(unloadWeight) unloadWeight
      , sum(loadWaybillQty) loadWaybillQty
      , sum(unloadWaybillQty) unloadWaybillQty
      , sum(loadGoodsQty) loadGoodsQty
      , sum(unloadGoodsQty) unloadGoodsQty
      , goodsType goodsType
    from
      (select
          lw.goods_type goodsType
        , lw.weight loadWeight
        , 0  unloadWeight
        , lw.waybill_qty loadWaybillQty
        , 0 unloadWaybillQty
        , lw.goods_qty loadGoodsQty
        , 0  unloadGoodsQty
        from 
          tfr.t_opt_loader_workload lw
        inner join tfr.t_Opt_Load_Task tt on tt.task_no =lw.task_no and lw.handle_type='LOAD' and lw.express_or_ld = 'LD'
        ]]>
         <include refid="queryPersonCountWhere"/>
       union all 
        <![CDATA[
          select
              lw.goods_type goodsType
            , 0 loadWeight
            , lw.weight  unloadWeight
            , 0 loadWaybillQty
            , lw.waybill_qty unloadWaybillQty
            , 0 loadGoodsQty
            , lw.goods_qty  unloadGoodsQty
          from 
            tfr.t_opt_loader_workload lw
          inner join tfr.t_opt_unload_task tt on tt.unload_task_no =lw.task_no and lw.handle_type='UNLOAD' and lw.express_or_ld = 'LD'
          ]]>
          <include refid="queryPersonCountWhere1"/>
   	 )
		group by goodsType
  
  </select>
  
  
  <select id="queryPersonCountSummaryExpress" parameterType="com.deppon.foss.module.transfer.load.api.shared.dto.LoaderWorkloadDto" resultMap="LoaderWorkloadDtoResultMap">
	<![CDATA[
		select 
        sum(loadWeight) loadWeight
      , sum(unloadWeight) unloadWeight
      , sum(loadWaybillQty) loadWaybillQty
      , sum(unloadWaybillQty) unloadWaybillQty
      , sum(loadGoodsQty) loadGoodsQty
      , sum(unloadGoodsQty) unloadGoodsQty
      , goodsType goodsType
    from
      (select
          lw.goods_type goodsType
        , lw.weight loadWeight
        , 0  unloadWeight
        , lw.waybill_qty loadWaybillQty
        , 0 unloadWaybillQty
        , lw.goods_qty loadGoodsQty
        , 0  unloadGoodsQty
        from 
          tfr.t_opt_loader_workload lw
        inner join tfr.t_Opt_Load_Task tt on tt.task_no =lw.task_no and lw.handle_type='LOAD' and lw.express_or_ld ='EXPRESS'
        ]]>
         <include refid="queryPersonCountWhere"/>
       union all 
        <![CDATA[
          select
              lw.goods_type goodsType
            , 0 loadWeight
            , lw.weight  unloadWeight
            , 0 loadWaybillQty
            , lw.waybill_qty unloadWaybillQty
            , 0 loadGoodsQty
            , lw.goods_qty  unloadGoodsQty
          from 
            tfr.t_opt_loader_workload lw
          inner join tfr.t_opt_unload_task tt on tt.unload_task_no =lw.task_no and lw.handle_type='UNLOAD' and lw.express_or_ld ='EXPRESS'
          ]]>
          <include refid="queryPersonCountWhere1"/>
   	 )
		group by goodsType
  
  </select>

  <!-- 装卸车工作量_个人统计查询获取总记录数 -->
  <select id="getTotCountPersonCount" parameterType="com.deppon.foss.module.transfer.load.api.shared.dto.LoaderWorkloadDto" resultType="Long">
		<![CDATA[
		select
		  count(id)
		from (
          select lw.id
          from   tfr.t_opt_loader_workload lw
          inner join tfr.t_opt_load_task tt on tt.task_no=lw.task_no  and lw.handle_type ='LOAD' and lw.express_or_ld = 'LD'
         ]]>
          <include refid="queryPersonCountWhere"/>
         
          union all 
       <![CDATA[    
          select lw.id
          from   tfr.t_opt_loader_workload lw
          inner join tfr.t_opt_unload_task tt on tt.unload_task_no=lw.task_no  and lw.handle_type ='UNLOAD' and lw.express_or_ld = 'LD'
          ]]>
          <include refid="queryPersonCountWhere1"/>
    )
  </select>
  <!-- 装卸车工作量_个人统计查询获取总记录数（快递） -->
  <select id="getTotCountPersonCountExpress" parameterType="com.deppon.foss.module.transfer.load.api.shared.dto.LoaderWorkloadDto" resultType="Long">
		<![CDATA[
		select
		  count(id)
		from (
          select lw.id
          from   tfr.t_opt_loader_workload lw
          inner join tfr.t_opt_load_task tt on tt.task_no=lw.task_no  and lw.handle_type ='LOAD' and lw.express_or_ld = 'EXPRESS'
         ]]>
          <include refid="queryPersonCountWhere"/>
         
          union all 
       <![CDATA[    
          select lw.id
          from   tfr.t_opt_loader_workload lw
          inner join tfr.t_opt_unload_task tt on tt.unload_task_no=lw.task_no  and lw.handle_type ='UNLOAD' and lw.express_or_ld = 'EXPRESS'
          ]]>
          <include refid="queryPersonCountWhere1"/>
    )
  </select>
  <sql id="queryPersonCountWhere">
		<where>
			<if test="handoverNo !=null and handoverNo != '' ">	
				and lw.handover_no = #{handoverNo}
			</if>
			<if test="handleType !=null and handleType != '' and handleType != 'ALL' ">	
				and lw.handle_type = #{handleType}
			</if>
			<if test="vehicleNo !=null and vehicleNo != '' ">	
				and lw.vehicle_no = #{vehicleNo}
			</if>
			<if test="loaderCode !=null and loaderCode != '' ">	
				and lw.loader_code = #{loaderCode}
			</if>
			<choose> 
		            <when test="taskType !=null and taskType != '' and taskType == 'OTHER' ">  
		                AND lw.task_type not in ('SHORT_DISTANCE_LOAD','LONG_DISTANCE_LOAD')   
		            </when >  
					<when test="taskType !=null and taskType != '' and taskType == 'ALL' ">    
		            </when > 
		            <otherwise>  
		                AND lw.task_type = #{taskType}   
		            </otherwise > 
		    </choose>
			<if test="loaderOrgCodes !=null">	
			and lw.loader_org_code in
			<foreach 
				collection="loaderOrgCodes" open="(" close=")" item="item" separator="," index="index"> 
				#{item} 
			</foreach>
			</if>
			<if test="beginDate!=null and beginDate!=''">
				<![CDATA[and tt.load_end_time >= to_date(#{beginDate}, 'yyyy-mm-dd hh24:mi:ss')]]>
			</if>
			<if test="endDate!=null and endDate!=''">
				<![CDATA[and tt.load_end_time <= to_date(#{endDate}, 'yyyy-mm-dd hh24:mi:ss')]]>
			</if>
		</where>
  </sql>

  <sql id="queryPersonCountWhere1">
		<where>
			<if test="handoverNo !=null and handoverNo != '' ">	
				and lw.handover_no = #{handoverNo}
			</if>
			<if test="handleType !=null and handleType != '' and handleType != 'ALL' ">	
				and lw.handle_type = #{handleType}
			</if>
			<if test="vehicleNo !=null and vehicleNo != '' ">	
				and lw.vehicle_no = #{vehicleNo}
			</if>
			<if test="loaderCode !=null and loaderCode != '' ">	
				and lw.loader_code = #{loaderCode}
			</if>
		    <choose>  
					<when test="taskType !=null and taskType != '' and taskType == 'ALL' ">  
		            </when > 
		            <when test="taskType !=null and taskType != '' and taskType == 'OTHER' ">  
		                AND lw.task_type not in ('SHORT_DISTANCE','LONG_DISTANCE')   
		            </when >  
		            <otherwise>  
		                AND lw.task_type = #{taskType}   
		            </otherwise > 
		    </choose>
		    
			<if test="loaderOrgCodes !=null">	
			and lw.loader_org_code in
			<foreach 
				collection="loaderOrgCodes" open="(" close=")" item="item" separator="," index="index"> 
				#{item} 
			</foreach>
			</if>
			<if test="beginDate!=null and beginDate!=''">
				<![CDATA[and tt.unload_end_time >= to_date(#{beginDate}, 'yyyy-mm-dd hh24:mi:ss')]]>
			</if>
			<if test="endDate!=null and endDate!=''">
				<![CDATA[and tt.unload_end_time <= to_date(#{endDate}, 'yyyy-mm-dd hh24:mi:ss')]]>
			</if>
		</where>
  </sql>
  <!-- 装卸车工作量_队统计查询 -->
  <select id="queryTeamCount" parameterType="com.deppon.foss.module.transfer.load.api.shared.dto.LoaderWorkloadDto" resultMap="LoaderWorkloadDtoResultMap">
	<![CDATA[
		select
      joinDate
      , count(distinct attendance) taskPersonCount
      , handleType
      , taskType
      , sum(loadWeight) loadWeight
      , sum(unloadWeight) unloadWeight
      , sum(loadWaybillQty) loadWaybillQty
      , sum(unloadWaybillQty) unloadWaybillQty
      , sum(loadGoodsQty) loadGoodsQty
      , sum(unloadGoodsQty) unloadGoodsQty
    from
      (  ]]>
      
      <![CDATA[
      	select 
        to_char(tt.load_end_time, 'yyyy-mm-dd') joinDate
        , lw.loader_code attendance
        , lw.handle_type handleType
        , lw.task_type taskType
        , lw.weight  loadWeight
        , 0  unloadWeight
        , lw.waybill_qty loadWaybillQty
        , 0 unloadWaybillQty
        , lw.goods_qty  loadGoodsQty
        , 0 unloadGoodsQty
      from 
        tfr.t_opt_loader_workload lw 
      inner  join tfr.t_opt_load_task tt on tt.task_no=lw.task_no and  lw.handle_type='LOAD' and lw.express_or_ld = 'LD'
       ]]>
        <include refid="queryTeamCountWhere"/>
        
      union all
     <![CDATA[  
      select 
        to_char(tt.unload_end_time, 'yyyy-mm-dd') joinDate
        , lw.loader_code attendance
        , lw.handle_type handleType
        , lw.task_type taskType
        , 0  loadWeight
        , lw.weight  unloadWeight
        , 0 loadWaybillQty
        , lw.waybill_qty unloadWaybillQty
        , 0  loadGoodsQty
        , lw.goods_qty unloadGoodsQty
      from 
        tfr.t_opt_loader_workload lw 
      inner  join tfr.t_opt_unload_task tt on tt.unload_task_no=lw.task_no and  lw.handle_type='UNLOAD' and lw.express_or_ld = 'LD'
      ]]>
       <include refid="queryTeamCountWhere1"/>
    <![CDATA[
		    )
		group by joinDate, handleType, taskType
    ]]>
  </select>

  
   <!-- 装卸车工作量_队统计查询(快递) -->
  <select id="queryTeamCountExpress" parameterType="com.deppon.foss.module.transfer.load.api.shared.dto.LoaderWorkloadDto" resultMap="LoaderWorkloadDtoResultMap">
	<![CDATA[
		select
      joinDate
      , count(distinct attendance) taskPersonCount
      , handleType
      , taskType
      , sum(loadWeight) loadWeight
      , sum(unloadWeight) unloadWeight
      , sum(loadWaybillQty) loadWaybillQty
      , sum(unloadWaybillQty) unloadWaybillQty
      , sum(loadGoodsQty) loadGoodsQty
      , sum(unloadGoodsQty) unloadGoodsQty
    from
      (  ]]>
      
      <![CDATA[
      	select 
        to_char(tt.load_end_time, 'yyyy-mm-dd') joinDate
        , lw.loader_code attendance
        , lw.handle_type handleType
        , lw.task_type taskType
        , lw.weight  loadWeight
        , 0  unloadWeight
        , lw.waybill_qty loadWaybillQty
        , 0 unloadWaybillQty
        , lw.goods_qty  loadGoodsQty
        , 0 unloadGoodsQty
      from 
        tfr.t_opt_loader_workload lw 
      inner  join tfr.t_opt_load_task tt on tt.task_no=lw.task_no and  lw.handle_type='LOAD' and lw.express_or_ld='EXPRESS'
       ]]>
        <include refid="queryTeamCountWherea"/>
        
      union all
     <![CDATA[  
      select 
        to_char(tt.unload_end_time, 'yyyy-mm-dd') joinDate
        , lw.loader_code attendance
        , lw.handle_type handleType
        , lw.task_type taskType
        , 0  loadWeight
        , lw.weight  unloadWeight
        , 0 loadWaybillQty
        , lw.waybill_qty unloadWaybillQty
        , 0  loadGoodsQty
        , lw.goods_qty unloadGoodsQty
      from 
        tfr.t_opt_loader_workload lw 
      inner  join tfr.t_opt_unload_task tt on tt.unload_task_no=lw.task_no and  lw.handle_type='UNLOAD' and lw.express_or_ld='EXPRESS'
      ]]>
       <include refid="queryTeamCountWhereaa"/>
    <![CDATA[
		    )
		group by joinDate, handleType, taskType
    ]]>
  </select>

  <!-- 装卸车工作量_队统计查询合计 -->
  <select id="queryTeamCountSummary" parameterType="com.deppon.foss.module.transfer.load.api.shared.dto.LoaderWorkloadDto" resultMap="LoaderWorkloadDtoResultMap">
	<![CDATA[
		select
        sum(taskPersonCount) taskPersonCount
      , sum(loadWeight) loadWeight
      , sum(unloadWeight) unloadWeight
      , sum(loadWaybillQty) loadWaybillQty
      , sum(unloadWaybillQty) unloadWaybillQty
      , sum(loadGoodsQty) loadGoodsQty
      , sum(unloadGoodsQty) unloadGoodsQty
    from
      (select
      joinDate
      , count(distinct attendance) taskPersonCount
      , handleType
      , taskType
      , sum(loadWeight) loadWeight
      , sum(unloadWeight) unloadWeight
      , sum(loadWaybillQty) loadWaybillQty
      , sum(unloadWaybillQty) unloadWaybillQty
      , sum(loadGoodsQty) loadGoodsQty
      , sum(unloadGoodsQty) unloadGoodsQty
    from
      (]]>
     <![CDATA[ 
      select 
        to_char(tt.load_end_time, 'yyyy-mm-dd') joinDate
        , lw.loader_code attendance
        , lw.handle_type handleType
        , lw.task_type taskType
        , lw.weight loadWeight
        , 0 unloadWeight
        , lw.waybill_qty  loadWaybillQty
        , 0  unloadWaybillQty
        , lw.goods_qty  loadGoodsQty
        , 0  unloadGoodsQty
      from 
        tfr.t_opt_loader_workload lw 
        inner join tfr.t_Opt_Load_Task tt on tt.task_no=lw.task_no and lw.handle_type='LOAD' and lw.express_or_ld = 'LD'
        ]]>
        <include refid="queryTeamCountWhere"/>
        union all 
       <![CDATA[  
        select 
          to_char(tt.unload_end_time, 'yyyy-mm-dd') joinDate
          , lw.loader_code attendance
          , lw.handle_type handleType
          , lw.task_type taskType
          , 0 loadWeight
          , lw.weight unloadWeight
          , 0  loadWaybillQty
          , lw.waybill_qty  unloadWaybillQty
          , 0  loadGoodsQty
          , lw.goods_qty  unloadGoodsQty
        from 
          tfr.t_opt_loader_workload lw 
          inner join tfr.t_Opt_Unload_Task  tt on tt.unload_task_no =lw.task_no and lw.handle_type='UNLOAD' and lw.express_or_ld = 'LD'
  		 ]]>
        <include refid="queryTeamCountWhere1"/>
	    
    <![CDATA[
        	)
    	group by joinDate, handleType, taskType)
    ]]>
  </select>
  
  <!-- 装卸车工作量_队统计查询合计 (快递)-->
  <select id="queryTeamCountSummaryExpress" parameterType="com.deppon.foss.module.transfer.load.api.shared.dto.LoaderWorkloadDto" resultMap="LoaderWorkloadDtoResultMap">
	<![CDATA[
		select
        sum(taskPersonCount) taskPersonCount
      , sum(loadWeight) loadWeight
      , sum(unloadWeight) unloadWeight
      , sum(loadWaybillQty) loadWaybillQty
      , sum(unloadWaybillQty) unloadWaybillQty
      , sum(loadGoodsQty) loadGoodsQty
      , sum(unloadGoodsQty) unloadGoodsQty
    from
      (select
      joinDate
      , count(distinct attendance) taskPersonCount
      , handleType
      , taskType
      , sum(loadWeight) loadWeight
      , sum(unloadWeight) unloadWeight
      , sum(loadWaybillQty) loadWaybillQty
      , sum(unloadWaybillQty) unloadWaybillQty
      , sum(loadGoodsQty) loadGoodsQty
      , sum(unloadGoodsQty) unloadGoodsQty
    from
      (]]>
     <![CDATA[ 
      select 
        to_char(tt.load_end_time, 'yyyy-mm-dd') joinDate
        , lw.loader_code attendance
        , lw.handle_type handleType
        , lw.task_type taskType
        , lw.weight loadWeight
        , 0 unloadWeight
        , lw.waybill_qty  loadWaybillQty
        , 0  unloadWaybillQty
        , lw.goods_qty  loadGoodsQty
        , 0  unloadGoodsQty
      from 
        tfr.t_opt_loader_workload lw 
        inner join tfr.t_Opt_Load_Task tt on tt.task_no=lw.task_no and lw.handle_type='LOAD' and lw.express_or_ld='EXPRESS'
        ]]>
        <include refid="queryTeamCountWhereS"/>
        union all 
       <![CDATA[  
        select 
          to_char(tt.unload_end_time, 'yyyy-mm-dd') joinDate
          , lw.loader_code attendance
          , lw.handle_type handleType
          , lw.task_type taskType
          , 0 loadWeight
          , lw.weight unloadWeight
          , 0  loadWaybillQty
          , lw.waybill_qty  unloadWaybillQty
          , 0  loadGoodsQty
          , lw.goods_qty  unloadGoodsQty
        from 
          tfr.t_opt_loader_workload lw 
          inner join tfr.t_Opt_Unload_Task  tt on tt.unload_task_no =lw.task_no and lw.handle_type='UNLOAD' and lw.express_or_ld='EXPRESS'
  		 ]]>
        <include refid="queryTeamCountWhere1SS"/>
	    
    <![CDATA[
        	)
    	group by joinDate, handleType, taskType)
    ]]>
  </select>

  <select id="getTotCountTeamCount" parameterType="com.deppon.foss.module.transfer.load.api.shared.dto.LoaderWorkloadDto" resultType="Long">
		<![CDATA[
		select
        count(joinDate) 
    from
      (select
      joinDate
      , count(distinct attendance) taskPersonCount
      , handleType
      , taskType
      , sum(loadWeight) loadWeight
      , sum(unloadWeight) unloadWeight
      , sum(loadWaybillQty) loadWaybillQty
      , sum(unloadWaybillQty) unloadWaybillQty
      , sum(loadGoodsQty) loadGoodsQty
      , sum(unloadGoodsQty) unloadGoodsQty
    from
      (
      ]]>
      
      <![CDATA[
      select 
        to_char(tt.load_end_time, 'yyyy-mm-dd') joinDate
        , lw.loader_code attendance
        , lw.handle_type handleType
        , lw.task_type taskType
        , lw.weight loadWeight
        , 0 unloadWeight
        , lw.waybill_qty  loadWaybillQty
        , 0  unloadWaybillQty
        , lw.goods_qty  loadGoodsQty
        , 0  unloadGoodsQty
      from 
        tfr.t_opt_loader_workload lw 
        inner join tfr.t_Opt_Load_Task tt on tt.task_no=lw.task_no and lw.handle_type='LOAD' and lw.express_or_ld = 'LD'
        ]]>
        <include refid="queryTeamCountWhere"/>
        union all 
         <![CDATA[
        select 
          to_char(tt.unload_end_time, 'yyyy-mm-dd') joinDate
          , lw.loader_code attendance
          , lw.handle_type handleType
          , lw.task_type taskType
          , 0 loadWeight
          , lw.weight unloadWeight
          , 0  loadWaybillQty
          , lw.waybill_qty  unloadWaybillQty
          , 0  loadGoodsQty
          , lw.goods_qty  unloadGoodsQty
        from 
          tfr.t_opt_loader_workload lw 
          inner join tfr.t_Opt_Unload_Task  tt on tt.unload_task_no =lw.task_no and lw.handle_type='UNLOAD' and lw.express_or_ld = 'LD' ]]>
		 <include refid="queryTeamCountWhere1"/>
    <![CDATA[
        	)
    	group by joinDate, handleType, taskType)
    ]]>
  </select>
  <sql id="queryTeamCountWhere">
		<where>
			and lw.loader_org_code in
			<foreach 
				collection="loaderOrgCodes" open="(" close=")" item="item" separator="," index="index"> 
				#{item} 
			</foreach>
			<if test="taskType !=null and taskType != '' and taskType != 'ALL' ">	
				and lw.task_type = #{taskType}
			</if>
			<if test="beginDate!=null and beginDate!=''">
				<![CDATA[and tt.load_end_time >= to_date(#{beginDate}, 'yyyy-mm-dd hh24:mi:ss')]]>
			</if>
			<if test="endDate!=null and endDate!=''">
				<![CDATA[and tt.load_end_time <= to_date(#{endDate}, 'yyyy-mm-dd hh24:mi:ss')]]>
			</if>
		</where>
  </sql>
  <sql id="queryTeamCountWhereS">
		<where>
			and lw.loader_org_code in
			<foreach 
				collection="loaderOrgCodes" open="(" close=")" item="item" separator="," index="index"> 
				#{item} 
			</foreach>
			 <choose> 
		            <when test="taskType !=null and taskType != '' and taskType == 'OTHER' ">  
		                AND lw.task_type not in ('SHORT_DISTANCE_LOAD','LONG_DISTANCE_LOAD')   
		            </when >  
					<when test="taskType !=null and taskType != '' and taskType == 'ALL' ">    
		            </when > 
		            
		            <otherwise>  
		                AND lw.task_type = #{taskType}   
		            </otherwise > 
		    </choose>
			<if test="beginDate!=null and beginDate!=''">
				<![CDATA[and tt.load_end_time >= to_date(#{beginDate}, 'yyyy-mm-dd hh24:mi:ss')]]>
			</if>
			<if test="endDate!=null and endDate!=''">
				<![CDATA[and tt.load_end_time <= to_date(#{endDate}, 'yyyy-mm-dd hh24:mi:ss')]]>
			</if>
		</where>
  </sql>
  
   <sql id="queryTeamCountWherea">
		<where>
			and lw.loader_org_code in
			<foreach 
				collection="loaderOrgCodes" open="(" close=")" item="item" separator="," index="index"> 
				#{item} 
			</foreach>
		    <choose> 
		             <when test="taskType !=null and taskType != '' and taskType == 'OTHER' ">  
		                AND lw.task_type not in ('SHORT_DISTANCE_LOAD','LONG_DISTANCE_LOAD')   
		            </when >  
					<when test="taskType !=null and taskType != '' and taskType == 'ALL' ">    
		            </when > 
		            
		            <otherwise>  
		                AND lw.task_type = #{taskType}   
		            </otherwise > 
		    </choose>
			<if test="beginDate!=null and beginDate!=''">
				<![CDATA[and tt.load_end_time >= to_date(#{beginDate}, 'yyyy-mm-dd hh24:mi:ss')]]>
			</if>
			<if test="endDate!=null and endDate!=''">
				<![CDATA[and tt.load_end_time <= to_date(#{endDate}, 'yyyy-mm-dd hh24:mi:ss')]]>
			</if>
		</where>
  </sql>
  
    <sql id="queryTeamCountWhereaa">
		<where>
			and lw.loader_org_code in
			<foreach 
				collection="loaderOrgCodes" open="(" close=")" item="item" separator="," index="index"> 
				#{item} 
			</foreach>
			<choose>  
					<when test="taskType !=null and taskType != '' and taskType == 'ALL' ">  
		                 
		            </when > 
		            <when test="taskType !=null and taskType != '' and taskType == 'OTHER' ">  
		                AND lw.task_type not in ('SHORT_DISTANCE','LONG_DISTANCE')   
		            </when >  
		            <otherwise>  
		                AND lw.task_type = #{taskType}   
		            </otherwise > 
		    </choose>
			<if test="beginDate!=null and beginDate!=''">
				<![CDATA[and tt.unload_end_time >= to_date(#{beginDate}, 'yyyy-mm-dd hh24:mi:ss')]]>
			</if>
			<if test="endDate!=null and endDate!=''">
				<![CDATA[and tt.unload_end_time <= to_date(#{endDate}, 'yyyy-mm-dd hh24:mi:ss')]]>
			</if>
		</where>
  </sql>
  
   <sql id="queryTeamCountWhere1">
		<where>
			and lw.loader_org_code in
			<foreach 
				collection="loaderOrgCodes" open="(" close=")" item="item" separator="," index="index"> 
				#{item} 
			</foreach>
			<if test="taskType !=null and taskType != '' and taskType != 'ALL' ">	
				and lw.task_type = #{taskType}
			</if>
			<if test="beginDate!=null and beginDate!=''">
				<![CDATA[and tt.unload_end_time >= to_date(#{beginDate}, 'yyyy-mm-dd hh24:mi:ss')]]>
			</if>
			<if test="endDate!=null and endDate!=''">
				<![CDATA[and tt.unload_end_time <= to_date(#{endDate}, 'yyyy-mm-dd hh24:mi:ss')]]>
			</if>
		</where>
  </sql>
  <sql id="queryTeamCountWhere1SS">
		<where>
			and lw.loader_org_code in
			<foreach 
				collection="loaderOrgCodes" open="(" close=")" item="item" separator="," index="index"> 
				#{item} 
			</foreach>
			<choose>  
					<when test="taskType !=null and taskType != '' and taskType == 'ALL' ">  
		                 
		            </when > 
		            <when test="taskType !=null and taskType != '' and taskType == 'OTHER' ">  
		                AND lw.task_type not in ('SHORT_DISTANCE','LONG_DISTANCE')   
		            </when >  
		            <otherwise>  
		                AND lw.task_type = #{taskType}   
		            </otherwise > 
		    </choose>
			<if test="beginDate!=null and beginDate!=''">
				<![CDATA[and tt.unload_end_time >= to_date(#{beginDate}, 'yyyy-mm-dd hh24:mi:ss')]]>
			</if>
			<if test="endDate!=null and endDate!=''">
				<![CDATA[and tt.unload_end_time <= to_date(#{endDate}, 'yyyy-mm-dd hh24:mi:ss')]]>
			</if>
		</where>
  </sql>
   <!-- 装卸车工作量_明细查询 -->
  <select id="queryLoaderWorkloadDetail" parameterType="com.deppon.foss.module.transfer.load.api.shared.dto.LoaderWorkloadDetailDto" resultMap="LoaderWorkloadDetailDtoResultMap">
	<![CDATA[
		select vehicleNo, taskNo, sum(totWeight) totWeight, sum(totWaybillQty) totWaybillQty, sum(totGoodsQty) totGoodsQty, taskType, taskBeginDate, goodsType from (
	 ]]>
  	<![CDATA[
	   select max(vehicleNo) as vehicleNo,
       max(taskNo)as taskNo,
       max(handleType)as handleType,
       max(taskType) as taskType ,
       max(taskBeginDate) as taskBeginDate,
       max(goodsType) as goodsType,
       max(notes) as notes ,
       sum(decode(isExpress, 'N', weight, 0)) as totWeight,
       count(decode(isExpress,'N',waybillNo,'')) as totWaybillQty,
       sum(decode(isExpress, 'N', qty, 0)) as totGoodsQty
      from (select distinct unload.vehicle_no vehicleNo,
                         unload.unload_task_no taskNo,
                         workload.handle_type handleType,
                         workload.task_type taskType,
                         to_char(unload.unload_start_time, 'yyyy-mm-dd') taskBeginDate,
                         workload.goods_type goodsType,
                         decode(pwb.product_code,
                                'RCP',
                                'Y',
                                'PACKAGE',
                                'Y',
                                'EPEP',
                                'Y',
                                'DEAP',
                                'Y',
                                'N') as isExpress,
                         detail.unload_weight_total as weight,
                         detail.waybill_no waybillNo,
                         detail.operation_goods_qty as qty,
                         workload.notes notes
           from tfr.t_opt_unload_waybill_detail detail
           left join pkp.t_srv_waybill pwb
             on detail.waybill_no = pwb.waybill_no
            and pwb.active = 'Y'
           left join tfr.t_opt_unload_task unload
             on unload.id = detail.unload_task_id
           left join tfr.t_opt_loader_workload workload
             on unload.id = workload.task_id
			where workload.express_or_ld = 'LD'
		]]>
		<if test="vehicleNo!=null and vehicleNo!=''">
			<![CDATA[and unload.vehicle_no = #{vehicleNo}]]>
		</if>
	    <if test="taskNo!=null and taskNo!=''">
			<![CDATA[and unload.unload_task_no = #{taskNo}]]>
		</if>
	    <if test="taskType!=null and taskType!='' and taskType != 'ALL'">
	    	<![CDATA[and unload.unload_type = #{taskType}]]>
		</if>
		<if test="orgCode !=null and orgCode!=''">	
			<![CDATA[and unload.UNLOAD_ORG_CODE = #{orgCode}]]>
			
		</if>
	    <if test="taskBeginDate!=null and taskBeginDate!=''">
			<![CDATA[and unload.unload_start_time >= to_date(#{beginDate}, 'yyyy-mm-dd hh24:mi:ss')]]>
			<![CDATA[and unload.unload_start_time <= to_date(#{endDate}, 'yyyy-mm-dd hh24:mi:ss')]]>
		</if>
)
     group by taskNo, vehicleNo, taskType, taskBeginDate, goodsType
 
		union all

		<![CDATA[
		select max(vehicleNo) as vehicleNo,
       max(taskNo)as taskNo,
       max(handleType)as handleType,
       max(taskType) as taskType ,
       max(taskBeginDate) as taskBeginDate,
       max(goodsType) as goodsType,
       max(notes) as notes ,
       sum(decode(isExpress, 'N', weight, 0)) as totWeight,
       count(decode(isExpress,'N',waybillNo,'')) as totWaybillQty,
       sum(decode(isExpress, 'N', qty, 0)) as totGoodsQty
  from (select distinct load.vehicle_no vehicleNo,
                         load.task_no taskNo,
                         workload.handle_type handleType,
                         workload.task_type taskType,
                         to_char(load.load_start_time, 'yyyy-mm-dd') taskBeginDate,
                         workload.goods_type goodsType,
                         decode(pwb.product_code,
                                'RCP',
                                'Y',
                                'PACKAGE',
                                'Y',
                                'EPEP',
                                'Y',
                                'DEAP',
                                'Y',
                                'N') as isExpress,
                         detail.load_weight_total as weight,
                         detail.waybill_no waybillNo,
                         detail.LOAD_QTY as qty,
                         workload.notes notes
           from tfr.t_opt_load_waybill_detail detail
           left join pkp.t_srv_waybill pwb
             on detail.waybill_no = pwb.waybill_no
            and pwb.active = 'Y'
           left join tfr.t_opt_load_task load
             on load.id = detail.load_task_id
           left join tfr.t_opt_loader_workload workload
             on load.id = workload.task_id
			where workload.express_or_ld = 'LD'
	    ]]>
	    <if test="vehicleNo!=null and vehicleNo!=''">
			<![CDATA[and load.vehicle_no = #{vehicleNo}]]>
		</if>
	    <if test="taskNo!=null and taskNo!=''">
			<![CDATA[and load.task_no = #{taskNo}]]>
		</if>
	    <if test="taskType!=null and taskType!='' and taskType != 'ALL'">
			<![CDATA[and load.task_type = #{taskType}]]>
		</if>
		<if test="orgCode !=null and orgCode!=''">	
			<![CDATA[and load.ORIG_ORG_CODE = #{orgCode}]]>
			
		</if>
		<if test="taskBeginDate!=null and taskBeginDate!=''">
			<![CDATA[and load.load_start_time >= to_date(#{beginDate}, 'yyyy-mm-dd hh24:mi:ss')]]>
			<![CDATA[and load.load_start_time <= to_date(#{endDate}, 'yyyy-mm-dd hh24:mi:ss')]]>
		</if>
		)
		   group by taskNo, vehicleNo, taskType, taskBeginDate, goodsType
    <![CDATA[
    	) group by taskNo, vehicleNo, taskType, taskBeginDate, goodsType
    ]]>
  </select>
  <!-- 装卸车工作量_明细查询 -->
  <select id="queryLoaderWorkloadDetailExpress" parameterType="com.deppon.foss.module.transfer.load.api.shared.dto.LoaderWorkloadDetailDto" resultMap="LoaderWorkloadDetailDtoResultMap">
	<![CDATA[
		select vehicleNo, taskNo, sum(totWeight) totWeight, sum(totWaybillQty) 
           totWaybillQty, sum(totGoodsQty) totGoodsQty,handleType,taskType, taskBeginDate, goodsType from (
	 ]]>
  	<![CDATA[
	   select max(vehicleNo) as vehicleNo,
       max(taskNo)as taskNo,
       max(handleType)as handleType,
       max(taskType) as taskType ,
       max(taskBeginDate) as taskBeginDate,
       max(goodsType) as goodsType,
       max(notes) as notes ,
       sum(decode(isExpress, 'Y', weight, 0)) as totWeight,
       count(decode(isExpress,'Y',waybillNo,'')) as totWaybillQty,
       sum(decode(isExpress, 'Y', qty, 0)) as totGoodsQty
      from (select distinct unload.vehicle_no vehicleNo,
                         unload.unload_task_no taskNo,
                         workload.handle_type handleType,
                         workload.task_type taskType,
                         to_char(unload.unload_start_time, 'yyyy-mm-dd') taskBeginDate,
                         workload.goods_type goodsType,
                         decode(pwb.product_code,
                                'RCP',
                                'Y',
                                'PACKAGE',
                                'Y',
                                'EPEP',
                                'Y',
                                'DEAP',
                                'Y',
                                'N') as isExpress,
                         detail.unload_weight_total as weight,
                         detail.waybill_no waybillNo,
                         detail.operation_goods_qty as qty,
                         workload.notes notes
           from tfr.t_opt_unload_waybill_detail detail
           left join pkp.t_srv_waybill pwb
             on detail.waybill_no = pwb.waybill_no
            and pwb.active = 'Y'
           left join tfr.t_opt_unload_task unload
             on unload.id = detail.unload_task_id
           left join tfr.t_opt_loader_workload workload
             on unload.id = workload.task_id
			where workload.express_or_ld = 'EXPRESS'
		]]>
		<if test="vehicleNo!=null and vehicleNo!=''">
			<![CDATA[and unload.vehicle_no = #{vehicleNo}]]>
		</if>
	    <if test="taskNo!=null and taskNo!=''">
			<![CDATA[and unload.unload_task_no = #{taskNo}]]>
		</if>
	    <if test="taskType!=null and taskType!='' and taskType != 'ALL'">
	    	<![CDATA[and unload.unload_type = #{taskType}]]>
		</if>
		<if test="orgCode !=null and orgCode!=''">	
			<![CDATA[and unload.UNLOAD_ORG_CODE = #{orgCode}]]>
			
		</if>
	    <if test="taskBeginDate!=null and taskBeginDate!=''">
			<![CDATA[and unload.unload_start_time >= to_date(#{beginDate}, 

'yyyy-mm-dd hh24:mi:ss')]]>
			<![CDATA[and unload.unload_start_time <= to_date(#{endDate}, 

'yyyy-mm-dd hh24:mi:ss')]]>
		</if>
)
     group by taskNo, vehicleNo, handleType, taskType, taskBeginDate, goodsType

 <!-- 悟空装车工作量 -->  
 union all
  	<![CDATA[select max(loadWK.vehicle_no) as vehicleNo,
       max(loadWK.task_no)as taskNo,
       max(wl.handle_type)as handleType,
       max(loadWK.task_type) as taskType ,
       max(to_char(loadWK.load_start_time, 'yyyy-mm-dd')) as taskBeginDate,
       max(loadWK.goods_type) as goodsType,
       max(wl.notes) as notes ,
       max(wl.weight_total) as totWeight,
       max(wl.goods_qty_total) as totWaybillQty,
       max(wl.goods_qty_total) as totGoodsQty
       from tfr.t_opt_loader_workload wl
       left join tfr.t_opt_load_task loadWK on loadWK.task_no=wl.task_no and wl.handle_type='LOAD'
       where wl.data_source='WUKONG' and wl.express_or_ld = 'EXPRESS'
 	 ]]>
 	 <if test="vehicleNo!=null and vehicleNo!=''">
			<![CDATA[and loadWK.vehicle_no = #{vehicleNo}]]>
		</if>
	    <if test="taskNo!=null and taskNo!=''">
			<![CDATA[and loadWK.task_no = #{taskNo}]]>
		</if>
	    <if test="taskType!=null and taskType!='' and taskType != 'ALL'">
	    	<![CDATA[and loadWK.task_type = #{taskType}]]>
		</if>
		<if test="orgCode !=null and orgCode!=''">	
			<![CDATA[and loadWK.ORIG_ORG_CODE = #{orgCode}]]>
			
		</if>
	    <if test="taskBeginDate!=null and taskBeginDate!=''">
			<![CDATA[and loadWK.load_start_time >= to_date(#{beginDate}, 'yyyy-mm-dd hh24:mi:ss')]]>
			<![CDATA[and loadWK.load_start_time <= to_date(#{endDate}, 'yyyy-mm-dd hh24:mi:ss')]]>
		</if>
		group by loadWK.task_no, loadWK.vehicle_no, wl.handle_type, loadWK.task_type, loadWK.load_start_time
		<!-- 悟空卸车工作量 -->


		union all

		<![CDATA[select max(unloadWK.vehicle_no) as vehicleNo,
       max(unloadWK.unload_task_no)as taskNo,
       max(lw.handle_type)as handleType,
       max(unloadWK.unload_type) as taskType ,
       max(to_char(unloadWK.unload_start_time, 'yyyy-mm-dd')) as taskBeginDate,
       max(lw.goods_type) as goodsType,
       max(lw.notes) as notes ,
       max(lw.weight_total) as totWeight,
       max(lw.goods_qty_total) as totWaybillQty,
       max(lw.goods_qty_total) as totGoodsQty
       from tfr.t_opt_loader_workload lw
       inner join tfr.t_opt_unload_task unloadWK on unloadWK.unload_task_no=lw.task_no and lw.handle_type='UNLOAD'
       where lw.data_source='WUKONG' and lw.express_or_ld = 'EXPRESS'
       ]]>
        <if test="vehicleNo!=null and vehicleNo!=''">
			<![CDATA[and unloadWK.vehicle_no = #{vehicleNo}]]>
		</if>
	    <if test="taskNo!=null and taskNo!=''">
			<![CDATA[and unloadWK.unload_task_no = #{taskNo}]]>
		</if>
	    <if test="taskType!=null and taskType!='' and taskType != 'ALL'">
	    	<![CDATA[and unloadWK.unload_type = #{taskType}]]>
		</if>
		<if test="orgCode !=null and orgCode!=''">	
			<![CDATA[and unloadWK.UNLOAD_ORG_CODE = #{orgCode}]]>
			
		</if>
	    <if test="taskBeginDate!=null and taskBeginDate!=''">
			<![CDATA[and unloadWK.unload_start_time >= to_date(#{beginDate}, 'yyyy-mm-dd hh24:mi:ss')]]>
			<![CDATA[and unloadWK.unload_start_time <= to_date(#{endDate}, 'yyyy-mm-dd hh24:mi:ss')]]>
		</if>
		
    	group by unloadWK.unload_task_no, unloadWK.vehicle_no, lw.handle_type, unloadWK.unload_type, unloadWK.unload_start_time
    	
	
		union all


		<![CDATA[
		select max(vehicleNo) as vehicleNo,
       max(taskNo)as taskNo,
       max(handleType)as handleType,
       max(taskType) as taskType ,
       max(taskBeginDate) as taskBeginDate,
       max(goodsType) as goodsType,
       max(notes) as notes ,
       sum(decode(isExpress, 'Y', weight, 0)) as totWeight,
       count(decode(isExpress,'Y',waybillNo,'')) as totWaybillQty,
       sum(decode(isExpress, 'Y', qty, 0)) as totGoodsQty
  from (select distinct load.vehicle_no vehicleNo,
                         load.task_no taskNo,
                         workload.handle_type handleType,
                         workload.task_type taskType,
                         to_char(load.load_start_time, 'yyyy-mm-dd') taskBeginDate,
                         workload.goods_type goodsType,
                         decode(pwb.product_code,
                                'RCP',
                                'Y',
                                'PACKAGE',
                                'Y',
                                'EPEP',
                                'Y',
                                'DEAP',
                                'Y',
                                'N') as isExpress,
                         detail.load_weight_total as weight,
                         detail.waybill_no waybillNo,
                         detail.LOAD_QTY as qty,
                         workload.notes notes
           from tfr.t_opt_load_waybill_detail detail
           left join pkp.t_srv_waybill pwb
             on detail.waybill_no = pwb.waybill_no
            and pwb.active = 'Y'
           left join tfr.t_opt_load_task load
             on load.id = detail.load_task_id
           left join tfr.t_opt_loader_workload workload
             on load.id = workload.task_id
			where workload.express_or_ld = 'EXPRESS'
	    ]]>
	    <if test="vehicleNo!=null and vehicleNo!=''">
			<![CDATA[and load.vehicle_no = #{vehicleNo}]]>
		</if>
	    <if test="taskNo!=null and taskNo!=''">
			<![CDATA[and load.task_no = #{taskNo}]]>
		</if>
	    <if test="taskType!=null and taskType!='' and taskType != 'ALL'">
			<![CDATA[and load.task_type = #{taskType}]]>
		</if>
		<if test="orgCode !=null and orgCode!=''">	
			<![CDATA[and load.ORIG_ORG_CODE = #{orgCode}]]>
			
		</if>
		<if test="taskBeginDate!=null and taskBeginDate!=''">
			<![CDATA[and load.load_start_time >= to_date(#{beginDate}, 

'yyyy-mm-dd hh24:mi:ss')]]>
			<![CDATA[and load.load_start_time <= to_date(#{endDate}, 

'yyyy-mm-dd hh24:mi:ss')]]>
		</if>
		)
		   group by taskNo, vehicleNo, handleType, taskType, taskBeginDate, goodsType
    <![CDATA[
    	) group by taskNo, vehicleNo, handleType,taskType, taskBeginDate, goodsType
    ]]>
  </select>
  
  <!-- 装卸车工作量_明细查询获取总记录数 -->
  <select id="getTotCount" parameterType="com.deppon.foss.module.transfer.load.api.shared.dto.LoaderWorkloadDetailDto" resultType="Long">
  	<![CDATA[
  		select count(vehicleNo) from (
  	]]>
  	<![CDATA[
		select vehicleNo, taskNo, sum(totWeight) totWeight, sum(totWaybillQty) totWaybillQty, sum(totGoodsQty) totGoodsQty, taskType, taskBeginDate, goodsType from (
	  ]]>
  	<![CDATA[
	  select max(vehicleNo) as vehicleNo,
       max(taskNo)as taskNo,
       max(handleType)as handleType,
       max(taskType) as taskType ,
       max(taskBeginDate) as taskBeginDate,
       max(goodsType) as goodsType,
       max(notes) as notes ,
       sum(decode(isExpress, 'N', weight, 0)) as totWeight,
       count(decode(isExpress,'N',waybillNo,'')) as totWaybillQty,
       sum(decode(isExpress, 'N', qty, 0)) as totGoodsQty
      from (select distinct unload.vehicle_no vehicleNo,
                         unload.unload_task_no taskNo,
                         workload.handle_type handleType,
                         workload.task_type taskType,
                         to_char(unload.unload_start_time, 'yyyy-mm-dd') taskBeginDate,
                         workload.goods_type goodsType,
                         decode(pwb.product_code,
                                'RCP',
                                'Y',
                                'PACKAGE',
                                'Y',
                                'EPEP',
                                'Y',
                                'DEAP',
                                'Y',
                                'N') as isExpress,
                         detail.unload_weight_total as weight,
                         detail.waybill_no waybillNo,
                         detail.operation_goods_qty as qty,
                         workload.notes notes
           from tfr.t_opt_unload_waybill_detail detail
           left join pkp.t_srv_waybill pwb
             on detail.waybill_no = pwb.waybill_no
            and pwb.active = 'Y'
           left join tfr.t_opt_unload_task unload
             on unload.id = detail.unload_task_id
           left join tfr.t_opt_loader_workload workload
             on unload.id = workload.task_id
			where workload.express_or_ld = 'LD'
		]]>
		<if test="vehicleNo!=null and vehicleNo!=''">
			<![CDATA[and unload.vehicle_no = #{vehicleNo}]]>
		</if>
	    <if test="taskNo!=null and taskNo!=''">
			<![CDATA[and unload.unload_task_no = #{taskNo}]]>
		</if>
	    <if test="taskType!=null and taskType!='' and taskType != 'ALL'">
			<![CDATA[and unload.unload_type = #{taskType}]]>
		</if>
		<if test="orgCode !=null and orgCode!=''">	
			<![CDATA[and unload.UNLOAD_ORG_CODE = #{orgCode}]]>
			
		</if>
	    <if test="taskBeginDate!=null and taskBeginDate!=''">
			<![CDATA[and unload.unload_start_time >= to_date(#{beginDate}, 'yyyy-mm-dd hh24:mi:ss')]]>
			<![CDATA[and unload.unload_start_time <= to_date(#{endDate}, 'yyyy-mm-dd hh24:mi:ss')]]>
		</if>
) 
		union all

		<![CDATA[
			select max(vehicleNo) as vehicleNo,
       max(taskNo)as taskNo,
       max(handleType)as handleType,
       max(taskType) as taskType ,
       max(taskBeginDate) as taskBeginDate,
       max(goodsType) as goodsType,
       max(notes) as notes ,
       sum(decode(isExpress, 'N', weight, 0)) as totWeight,
       count(decode(isExpress,'N',waybillNo,'')) as totWaybillQty,
       sum(decode(isExpress, 'N', qty, 0)) as totGoodsQty
  from (select distinct load.vehicle_no vehicleNo,
                         load.task_no taskNo,
                         workload.handle_type handleType,
                         workload.task_type taskType,
                         to_char(load.load_start_time, 'yyyy-mm-dd') taskBeginDate,
                         workload.goods_type goodsType,
                         decode(pwb.product_code,
                                'RCP',
                                'Y',
                                'PACKAGE',
                                'Y',
                                'EPEP',
                                'Y',
                                'DEAP',
                                'Y',
                                'N') as isExpress,
                         detail.load_weight_total as weight,
                         detail.waybill_no waybillNo,
                         detail.LOAD_QTY as qty,
                         workload.notes notes
           from tfr.t_opt_load_waybill_detail detail
           left join pkp.t_srv_waybill pwb
             on detail.waybill_no = pwb.waybill_no
            and pwb.active = 'Y'
           left join tfr.t_opt_load_task load
             on load.id = detail.load_task_id
           left join tfr.t_opt_loader_workload workload
             on load.id = workload.task_id
			where workload.express_or_ld = 'LD'
	    ]]>
	    <if test="vehicleNo!=null and vehicleNo!=''">
			<![CDATA[and load.vehicle_no = #{vehicleNo}]]>
		</if>
	    <if test="taskNo!=null and taskNo!=''">
			<![CDATA[and load.task_no = #{taskNo}]]>
		</if>
	    <if test="taskType!=null and taskType!='' and taskType != 'ALL'">
		    <![CDATA[and load.task_type = #{taskType}]]>
		</if>
		<if test="orgCode !=null and orgCode!=''">	
			<![CDATA[and load.ORIG_ORG_CODE = #{orgCode}]]>
			
		</if>
		<if test="taskBeginDate!=null and taskBeginDate!=''">
			<![CDATA[and load.load_start_time >= to_date(#{beginDate}, 'yyyy-mm-dd hh24:mi:ss')]]>
			<![CDATA[and load.load_start_time <= to_date(#{endDate}, 'yyyy-mm-dd hh24:mi:ss')]]>
		</if>
		)
    <![CDATA[
    	) group by taskNo, vehicleNo, taskType, taskBeginDate, goodsType
    ]]>
    <![CDATA[
    	)
    ]]>
  </select>

  <!-- 装卸车工作量_统计明细查询合计行 -->
  <select id="querySummaryDetail" parameterType="com.deppon.foss.module.transfer.load.api.shared.dto.LoaderWorkloadDetailDto" resultMap="LoaderWorkloadDetailDtoResultMap">
  	<![CDATA[
  		select sum(totWeight) totWeight, sum(totWaybillQty) totWaybillQty, sum(totGoodsQty) totGoodsQty from (
  		]]>
  	<![CDATA[
	   select max(vehicleNo) as vehicleNo,
       max(taskNo)as taskNo,
       max(handleType)as handleType,
       max(taskType) as taskType ,
       max(taskBeginDate) as taskBeginDate,
       max(goodsType) as goodsType,
       max(notes) as notes ,
       sum(decode(isExpress, 'N', weight, 0)) as totWeight,
       count(decode(isExpress,'N',waybillNo,'')) as totWaybillQty,
       sum(decode(isExpress, 'N', qty, 0)) as totGoodsQty
      from (select distinct unload.vehicle_no vehicleNo,
                         unload.unload_task_no taskNo,
                         workload.handle_type handleType,
                         workload.task_type taskType,
                         to_char(unload.unload_start_time, 'yyyy-mm-dd') taskBeginDate,
                         workload.goods_type goodsType,
                         decode(pwb.product_code,
                                'RCP',
                                'Y',
                                'PACKAGE',
                                'Y',
                                'EPEP',
                                'Y',
                                'DEAP',
                                'Y',
                                'N') as isExpress,
                         detail.unload_weight_total as weight,
                         detail.waybill_no waybillNo,
                         detail.operation_goods_qty as qty,
                         workload.notes notes
           from tfr.t_opt_unload_waybill_detail detail
           left join pkp.t_srv_waybill pwb
             on detail.waybill_no = pwb.waybill_no
            and pwb.active = 'Y'
           left join tfr.t_opt_unload_task unload
             on unload.id = detail.unload_task_id
           left join tfr.t_opt_loader_workload workload
             on unload.id = workload.task_id
			where workload.express_or_ld = 'LD'
		]]>
		<if test="vehicleNo!=null and vehicleNo!=''">
			<![CDATA[and unload.vehicle_no = #{vehicleNo}]]>
		</if>
	    <if test="taskNo!=null and taskNo!=''">
			<![CDATA[and unload.unload_task_no = #{taskNo}]]>
		</if>
	    <if test="taskType!=null and taskType!='' and taskType != 'ALL'">
		    <![CDATA[and unload.unload_type = #{taskType}]]>
		</if>
		<if test="orgCode !=null and orgCode!=''">	
			<![CDATA[and unload.UNLOAD_ORG_CODE = #{orgCode}]]>
			
		</if>
	    <if test="taskBeginDate!=null and taskBeginDate!=''">
			<![CDATA[and unload.unload_start_time >= to_date(#{beginDate}, 'yyyy-mm-dd hh24:mi:ss')]]>
			<![CDATA[and unload.unload_start_time <= to_date(#{endDate}, 'yyyy-mm-dd hh24:mi:ss')]]>
		</if>
)
       
		union all
	
		<![CDATA[
			select max(vehicleNo) as vehicleNo,
       max(taskNo)as taskNo,
       max(handleType)as handleType,
       max(taskType) as taskType ,
       max(taskBeginDate) as taskBeginDate,
       max(goodsType) as goodsType,
       max(notes) as notes ,
       sum(decode(isExpress, 'N', weight, 0)) as totWeight,
       count(decode(isExpress,'N',waybillNo,'')) as totWaybillQty,
       sum(decode(isExpress, 'N', qty, 0)) as totGoodsQty
  from (select distinct load.vehicle_no vehicleNo,
                         load.task_no taskNo,
                         workload.handle_type handleType,
                         workload.task_type taskType,
                         to_char(load.load_start_time, 'yyyy-mm-dd') taskBeginDate,
                         workload.goods_type goodsType,
                         decode(pwb.product_code,
                                'RCP',
                                'Y',
                                'PACKAGE',
                                'Y',
                                'EPEP',
                                'Y',
                                'DEAP',
                                'Y',
                                'N') as isExpress,
                         detail.load_weight_total as weight,
                         detail.waybill_no waybillNo,
                         detail.LOAD_QTY as qty,
                         workload.notes notes
           from tfr.t_opt_load_waybill_detail detail
           left join pkp.t_srv_waybill pwb
             on detail.waybill_no = pwb.waybill_no
            and pwb.active = 'Y'
           left join tfr.t_opt_load_task load
             on load.id = detail.load_task_id
           left join tfr.t_opt_loader_workload workload
             on load.id = workload.task_id
			where workload.express_or_ld = 'LD'
	    ]]>
	    <if test="vehicleNo!=null and vehicleNo!=''">
			<![CDATA[and load.vehicle_no = #{vehicleNo}]]>
		</if>
	    <if test="taskNo!=null and taskNo!=''">
			<![CDATA[and load.task_no = #{taskNo}]]>
		</if>
	    <if test="taskType!=null and taskType!='' and taskType != 'ALL'">
			<![CDATA[and load.task_type = #{taskType}]]>
		</if>
		<if test="orgCode !=null and orgCode!=''">	
			<![CDATA[and load.ORIG_ORG_CODE = #{orgCode}]]>
			
		</if>
		<if test="taskBeginDate!=null and taskBeginDate!=''">
			<![CDATA[and load.load_start_time >= to_date(#{beginDate}, 'yyyy-mm-dd hh24:mi:ss')]]>
			<![CDATA[and load.load_start_time <= to_date(#{endDate}, 'yyyy-mm-dd hh24:mi:ss')]]>
		</if>
 )
    <![CDATA[
    	)
    ]]>
  </select>
  <!-- 装卸车工作量_统计明细查询合计行(快递) -->
 <select id="querySummaryDetailExpress" parameterType="com.deppon.foss.module.transfer.load.api.shared.dto.LoaderWorkloadDetailDto" resultMap="LoaderWorkloadDetailDtoResultMap">
  	<![CDATA[
  		select sum(totWeight) totWeight, sum(totWaybillQty) totWaybillQty, sum(totGoodsQty) totGoodsQty from (
  		]]>
  	<![CDATA[
	   select max(vehicleNo) as vehicleNo,
       max(taskNo)as taskNo,
       max(handleType)as handleType,
       max(taskType) as taskType ,
       max(taskBeginDate) as taskBeginDate,
       max(goodsType) as goodsType,
       max(notes) as notes ,
       sum(decode(isExpress, 'Y', weight, 0)) as totWeight,
       count(decode(isExpress,'Y',waybillNo,'')) as totWaybillQty,
       sum(decode(isExpress, 'Y', qty, 0)) as totGoodsQty
      from (select distinct unload.vehicle_no vehicleNo,
                         unload.unload_task_no taskNo,
                         workload.handle_type handleType,
                         workload.task_type taskType,
                         to_char(unload.unload_start_time, 'yyyy-mm-dd') taskBeginDate,
                         workload.goods_type goodsType,
                         decode(pwb.product_code,
                                'RCP',
                                'Y',
                                'PACKAGE',
                                'Y',
                                'EPEP',
                                'Y',
                                'DEAP',
                                'Y',
                                'N') as isExpress,
                         detail.unload_weight_total as weight,
                         detail.waybill_no waybillNo,
                         detail.operation_goods_qty as qty,
                         workload.notes notes
           from tfr.t_opt_unload_waybill_detail detail
           left join pkp.t_srv_waybill pwb
             on detail.waybill_no = pwb.waybill_no
            and pwb.active = 'Y'
           left join tfr.t_opt_unload_task unload
             on unload.id = detail.unload_task_id
           left join tfr.t_opt_loader_workload workload
             on unload.id = workload.task_id
			where workload.express_or_ld = 'EXPRESS'
		]]>
		<if test="vehicleNo!=null and vehicleNo!=''">
			<![CDATA[and unload.vehicle_no = #{vehicleNo}]]>
		</if>
	    <if test="taskNo!=null and taskNo!=''">
			<![CDATA[and unload.unload_task_no = #{taskNo}]]>
		</if>
	    <if test="taskType!=null and taskType!='' and taskType != 'ALL'">
		    <![CDATA[and unload.unload_type = #{taskType}]]>
		</if>
		<if test="orgCode !=null and orgCode!=''">	
			<![CDATA[and unload.UNLOAD_ORG_CODE = #{orgCode}]]>
			
		</if>
	    <if test="taskBeginDate!=null and taskBeginDate!=''">
			<![CDATA[and unload.unload_start_time >= to_date(#{beginDate}, 'yyyy-mm-dd hh24:mi:ss')]]>
			<![CDATA[and unload.unload_start_time <= to_date(#{endDate}, 'yyyy-mm-dd hh24:mi:ss')]]>
		</if>
)
       
		union all
	
		<![CDATA[
			select max(vehicleNo) as vehicleNo,
       max(taskNo)as taskNo,
       max(handleType)as handleType,
       max(taskType) as taskType ,
       max(taskBeginDate) as taskBeginDate,
       max(goodsType) as goodsType,
       max(notes) as notes ,
       sum(decode(isExpress, 'Y', weight, 0)) as totWeight,
       count(decode(isExpress,'Y',waybillNo,'')) as totWaybillQty,
       sum(decode(isExpress, 'Y', qty, 0)) as totGoodsQty
  from (select distinct load.vehicle_no vehicleNo,
                         load.task_no taskNo,
                         workload.handle_type handleType,
                         workload.task_type taskType,
                         to_char(load.load_start_time, 'yyyy-mm-dd') taskBeginDate,
                         workload.goods_type goodsType,
                         decode(pwb.product_code,
                                'RCP',
                                'Y',
                                'PACKAGE',
                                'Y',
                                'EPEP',
                                'Y',
                                'DEAP',
                                'Y',
                                'N') as isExpress,
                         detail.load_weight_total as weight,
                         detail.waybill_no waybillNo,
                         detail.LOAD_QTY as qty,
                         workload.notes notes
           from tfr.t_opt_load_waybill_detail detail
           left join pkp.t_srv_waybill pwb
             on detail.waybill_no = pwb.waybill_no
            and pwb.active = 'Y'
           left join tfr.t_opt_load_task load
             on load.id = detail.load_task_id
           left join tfr.t_opt_loader_workload workload
             on load.id = workload.task_id
			where workload.express_or_ld = 'EXPRESS'
	    ]]>
	    <if test="vehicleNo!=null and vehicleNo!=''">
			<![CDATA[and load.vehicle_no = #{vehicleNo}]]>
		</if>
	    <if test="taskNo!=null and taskNo!=''">
			<![CDATA[and load.task_no = #{taskNo}]]>
		</if>
	    <if test="taskType!=null and taskType!='' and taskType != 'ALL'">
			<![CDATA[and load.task_type = #{taskType}]]>
		</if>
		<if test="orgCode !=null and orgCode!=''">	
			<![CDATA[and load.ORIG_ORG_CODE = #{orgCode}]]>
			
		</if>
		<if test="taskBeginDate!=null and taskBeginDate!=''">
			<![CDATA[and load.load_start_time >= to_date(#{beginDate}, 'yyyy-mm-dd hh24:mi:ss')]]>
			<![CDATA[and load.load_start_time <= to_date(#{endDate}, 'yyyy-mm-dd hh24:mi:ss')]]>
		</if>
 )
    <![CDATA[
    	)
    ]]>
  </select>
 <!--根据任务编号查询出当前任务的工作量 -->
  <select id="queryLoaderWorksByTaskNo" parameterType="java.lang.String" 
		resultMap="LoaderWorkloadDtoResultMap">
		<![CDATA[
			select 
			  lw.id id
			  , lw.loader_name loaderName
			  , lw.loader_code loaderCode
			  , lw.loader_org_code loaderOrgCode
			  , lw.loader_org_name loaderOrgName
			  , lw.waybill_qty waybillQty
			  , lw.weight weight
			  , lw.join_time joinTime
			  , lw.leave_time leaveTime
			  , lw.notes notes
			  , lw.goods_type goodsType
			from
			tfr.t_opt_loader_workload lw
			where
			lw.task_no = #{taskNo}
			and express_or_ld = 'LD'
		]]>
  </select>
  
  <!--根据任务编号查询出当前任务的工作量 （快递）-->
  <select id="queryLoaderWorksByTaskNoExpress" parameterType="java.lang.String" 
		resultMap="LoaderWorkloadDtoResultMap">
		<![CDATA[
			select 
			  lw.id id
			  , lw.loader_name loaderName
			  , lw.loader_code loaderCode
			  , lw.loader_org_code loaderOrgCode
			  , lw.loader_org_name loaderOrgName
			  , lw.waybill_qty waybillQty
			  , lw.weight weight
			  , lw.join_time joinTime
			  , lw.leave_time leaveTime
			  , lw.notes notes
			  , lw.goods_type goodsType
			  , lw.goods_qty  goodsQty
		
			from
			tfr.t_opt_loader_workload lw
			where
			lw.task_no = #{taskNo}
			and express_or_ld = 'EXPRESS'
		]]>
  </select>
  <!--根据装卸车工作量TaskNo获取装卸车工作量信息 -->
  <select id="getLoaderWorkloadByTaskNo" parameterType="java.lang.String" 
		resultMap="LoaderWorkloadResultMap">
		<![CDATA[
			select 
			  id id
			  , loader_code loaderCode
			  , loader_name loaderName
			  , load_org_code loadOrgCode
			  , load_org_name loadOrgName
			  , handle_type handleType
			  , task_type taskType
			  , task_no taskNo
			  , task_id taskId
			  , join_time joinTime
			  , leave_time leaveTime
			  , weight weight
			  , waybill_qty waybillQty
			  , goods_qty goodsQty
			  , volume volume
			  , notes notes
			  , adjuster_code adjusterCode
			  , adjuster_name adjusterName
			  , adjust_time adjustTime
			  , adjust_org_code adjustOrgCode
			  , adjust_org_name adjustOrgName
			  , org_code orgCode
			  , org_name orgName
			  , loader_org_code loaderOrgCode
			  , loader_org_name loaderOrgName
			  , goods_type goodsType
			  , express_or_ld expressOrLd
			from 
			  tfr.t_opt_loader_workload
			where
			  task_no = #{taskNo}
			  and express_or_ld = 'LD'
		]]>
  </select>
  <!--根据装卸车工作量TaskNo获取装卸车工作量信息(快递) -->
  <select id="getLoaderWorkloadByTaskNoExpress" parameterType="java.lang.String" 
		resultMap="LoaderWorkloadResultMap">
		<![CDATA[
			select 
			  id id
			  , loader_code loaderCode
			  , loader_name loaderName
			  , load_org_code loadOrgCode
			  , load_org_name loadOrgName
			  , handle_type handleType
			  , task_type taskType
			  , task_no taskNo
			  , task_id taskId
			  , join_time joinTime
			  , leave_time leaveTime
			  , weight weight
			  , waybill_qty waybillQty
			  , goods_qty goodsQty
			  , volume volume
			  , notes notes
			  , adjuster_code adjusterCode
			  , adjuster_name adjusterName
			  , adjust_time adjustTime
			  , adjust_org_code adjustOrgCode
			  , adjust_org_name adjustOrgName
			  , org_code orgCode
			  , org_name orgName
			  , loader_org_code loaderOrgCode
			  , loader_org_name loaderOrgName
			  , goods_type goodsType
			  , express_or_ld expressOrLd
			from 
			  tfr.t_opt_loader_workload
			where
			  task_no = #{taskNo}
			  and express_or_ld = 'EXPRESS'
		]]>
  </select>

  <!--根据装卸车工作量ID获取装卸车工作量信息 -->
  <select id="queryLoaderWorksById" parameterType="java.lang.String" 
		resultMap="LoaderWorkloadResultMap">
		<![CDATA[
			select 
			  id id
			  , loader_code loaderCode
			  , loader_name loaderName
			  , load_org_code loadOrgCode
			  , load_org_name loadOrgName
			  , handle_type handleType
			  , task_type taskType
			  , task_no taskNo
			  , task_id taskId
			  , join_time joinTime
			  , leave_time leaveTime
			  , weight weight
			  , waybill_qty waybillQty
			  , goods_qty goodsQty
			  , volume volume
			  , data_source  dataSource
        	  , task_end_time_WK taskEndTimeWK
        	  , weight_total  weightTotal
        	  , volume_total  volumeTotal
        	  , goods_qty_total  goodsQtyTotal
			  , notes notes
			  , adjuster_code adjusterCode
			  , adjuster_name adjusterName
			  , adjust_time adjustTime
			  , adjust_org_code adjustOrgCode
			  , adjust_org_name adjustOrgName
			  , org_code orgCode
			  , org_name orgName
			  , loader_org_code loaderOrgCode
			  , loader_org_name loaderOrgName
			from 
			  tfr.t_opt_loader_workload
			where
			  id = #{id}
			  and express_or_ld = 'LD'
		]]>
  </select>
<!--根据装卸车工作量ID获取装卸车工作量信息(快递) -->
  <select id="queryLoaderWorksByIdExpress" parameterType="java.lang.String" 
		resultMap="LoaderWorkloadResultMap">
		<![CDATA[
			select 
			  id id
			  , loader_code loaderCode
			  , loader_name loaderName
			  , load_org_code loadOrgCode
			  , load_org_name loadOrgName
			  , handle_type handleType
			  , task_type taskType
			  , task_no taskNo
			  , task_id taskId
			  , join_time joinTime
			  , leave_time leaveTime
			  , weight weight
			  , waybill_qty waybillQty
			  , goods_qty goodsQty
			  , volume volume
			  , notes notes
			  , adjuster_code adjusterCode
			  , adjuster_name adjusterName
			  , adjust_time adjustTime
			  , adjust_org_code adjustOrgCode
			  , adjust_org_name adjustOrgName
			  , org_code orgCode
			  , org_name orgName
			  , loader_org_code loaderOrgCode
			  , loader_org_name loaderOrgName
			from 
			  tfr.t_opt_loader_workload
			where
			  id = #{id}
			  and express_or_ld = 'EXPRESS'
		]]>
  </select>
<!--根据卸车任务号查询卸车任务 -->
  <select id="getUnloadTaskByUnloadTaskNo" parameterType="java.lang.String" 
		resultMap="unloadTaskResultMap">
		<![CDATA[
			select id,
		       unload_task_no unloadTaskNo,
		       vehicle_no vehicleNo,
		       platform_no platformNo,
		       platform_id platformId,
		       unload_start_time unloadStartTime,
		       unload_end_time unloadEndTime,
		       task_state taskState,
		       unload_type unloadType,
		       unload_way unloadWay,
		       unload_org_code unloadOrgCode,
		       unload_org_name unloadOrgName,
		       be_exception beException,
		       exception_notes exceptionNotes,
		       plan_complete_time planComplete,
		       be_scan_instock beScanInstock,
		       be_created_gaprep beCreatedGaprep,
		       be_create_workload beCreateWorkload
		  from tfr.t_opt_unload_task
		 where unload_task_no = #{taskNO}
		]]>
  </select>
 
  
  <insert id="saveLoaderWork" parameterType="com.deppon.foss.module.transfer.load.api.shared.domain.LoaderWorkloadEntity" >
    insert into TFR.T_OPT_LOADER_WORKLOAD (ID, LOADER_CODE, LOADER_NAME, 
      LOADER_ORG_CODE, LOADER_ORG_NAME,
      LOAD_ORG_CODE, LOAD_ORG_NAME, ORG_CODE, ORG_NAME, HANDLE_TYPE, 
      TASK_TYPE, TASK_NO, TASK_ID, 
      JOIN_TIME, LEAVE_TIME, WEIGHT, 
      WAYBILL_QTY, GOODS_QTY, VOLUME, 
      NOTES, ADJUSTER_CODE, ADJUSTER_NAME, 
      ADJUST_TIME, ADJUST_ORG_CODE, ADJUST_ORG_NAME, GOODS_TYPE,EXPRESS_OR_LD
      )
    values (#{id, jdbcType=VARCHAR}, #{loaderCode, jdbcType=VARCHAR}, #{loaderName, jdbcType=VARCHAR}, #{loaderOrgCode, jdbcType=VARCHAR}, #{loaderOrgName, jdbcType=VARCHAR},
      #{loadOrgCode, jdbcType=VARCHAR}, #{loadOrgName, jdbcType=VARCHAR}, #{orgCode, jdbcType=VARCHAR}, #{orgName, jdbcType=VARCHAR}, #{handleType, jdbcType=VARCHAR}, 
      #{taskType, jdbcType=VARCHAR}, #{taskNo, jdbcType=VARCHAR}, #{taskId, jdbcType=VARCHAR}, 
      #{joinTime, jdbcType=TIMESTAMP}, #{leaveTime, jdbcType=TIMESTAMP}, #{weight, jdbcType=DECIMAL}, 
      #{waybillQty, jdbcType=INTEGER}, #{goodsQty, jdbcType=INTEGER}, #{volume, jdbcType=DECIMAL}, 
      #{notes, jdbcType=VARCHAR}, #{adjusterCode, jdbcType=VARCHAR}, #{adjusterName, jdbcType=VARCHAR}, 
      #{adjustTime, jdbcType=TIMESTAMP}, #{adjustOrgCode, jdbcType=VARCHAR}, #{adjustOrgName, jdbcType=VARCHAR},
      #{goodsType, jdbcType=VARCHAR},#{expressOrLd, jdbcType=VARCHAR}
      )
  </insert>
   <insert id="saveLoaderWorkExpress" parameterType="com.deppon.foss.module.transfer.load.api.shared.domain.LoaderWorkloadEntity" >
    insert into TFR.T_OPT_LOADER_WORKLOAD (ID, LOADER_CODE, LOADER_NAME, 
      LOADER_ORG_CODE, LOADER_ORG_NAME,
      LOAD_ORG_CODE, LOAD_ORG_NAME, ORG_CODE, ORG_NAME, HANDLE_TYPE, 
      TASK_TYPE, TASK_NO, TASK_ID, 
      JOIN_TIME, LEAVE_TIME, WEIGHT, 
      WAYBILL_QTY, GOODS_QTY, VOLUME, 
      NOTES, ADJUSTER_CODE, ADJUSTER_NAME, 
      ADJUST_TIME, ADJUST_ORG_CODE, ADJUST_ORG_NAME, GOODS_TYPE,EXPRESS_OR_LD
      )
    values (#{id, jdbcType=VARCHAR}, #{loaderCode, jdbcType=VARCHAR}, #{loaderName, jdbcType=VARCHAR}, #{loaderOrgCode, jdbcType=VARCHAR}, #{loaderOrgName, jdbcType=VARCHAR},
      #{loadOrgCode, jdbcType=VARCHAR}, #{loadOrgName, jdbcType=VARCHAR}, #{orgCode, jdbcType=VARCHAR}, #{orgName, jdbcType=VARCHAR}, #{handleType, jdbcType=VARCHAR}, 
      #{taskType, jdbcType=VARCHAR}, #{taskNo, jdbcType=VARCHAR}, #{taskId, jdbcType=VARCHAR}, 
      #{joinTime, jdbcType=TIMESTAMP}, #{leaveTime, jdbcType=TIMESTAMP}, #{weight, jdbcType=DECIMAL}, 
      #{waybillQty, jdbcType=INTEGER}, #{goodsQty, jdbcType=INTEGER}, #{volume, jdbcType=DECIMAL}, 
      #{notes, jdbcType=VARCHAR}, #{adjusterCode, jdbcType=VARCHAR}, #{adjusterName, jdbcType=VARCHAR}, 
      #{adjustTime, jdbcType=TIMESTAMP}, #{adjustOrgCode, jdbcType=VARCHAR}, #{adjustOrgName, jdbcType=VARCHAR},
      #{goodsType, jdbcType=VARCHAR},#{expressOrLd, jdbcType=VARCHAR}
      )
  </insert>
  <insert id="saveLoaderWorkWK" parameterType="com.deppon.foss.module.transfer.load.api.shared.domain.LoaderWorkloadEntity">
  insert into TFR.T_OPT_LOADER_WORKLOAD (
  ID, LOADER_CODE, LOADER_NAME, 
      LOADER_ORG_CODE, LOADER_ORG_NAME,
      LOAD_ORG_CODE, LOAD_ORG_NAME, ORG_CODE, ORG_NAME, HANDLE_TYPE, 
      TASK_TYPE, TASK_NO, TASK_ID, 
      JOIN_TIME, LEAVE_TIME, WEIGHT, 
      WAYBILL_QTY, GOODS_QTY, VOLUME, 
      NOTES, ADJUSTER_CODE, ADJUSTER_NAME, 
      ADJUST_TIME, ADJUST_ORG_CODE, ADJUST_ORG_NAME, GOODS_TYPE,EXPRESS_OR_LD,
       datasource,taskendtimeWK,volumeTotal,weightTotal,goodsQtyTotal
      )
    values (#{id, jdbcType=VARCHAR}, #{loaderCode, jdbcType=VARCHAR}, #{loaderName, jdbcType=VARCHAR}, #{loaderOrgCode, jdbcType=VARCHAR}, #{loaderOrgName, jdbcType=VARCHAR},
      #{loadOrgCode, jdbcType=VARCHAR}, #{loadOrgName, jdbcType=VARCHAR}, #{orgCode, jdbcType=VARCHAR}, #{orgName, jdbcType=VARCHAR}, #{handleType, jdbcType=VARCHAR}, 
      #{taskType, jdbcType=VARCHAR}, #{taskNo, jdbcType=VARCHAR}, #{taskId, jdbcType=VARCHAR}, 
      #{joinTime, jdbcType=TIMESTAMP}, #{leaveTime, jdbcType=TIMESTAMP}, #{weight, jdbcType=DECIMAL}, 
      #{waybillQty, jdbcType=INTEGER}, #{goodsQty, jdbcType=INTEGER}, #{volume, jdbcType=DECIMAL}, 
      #{notes, jdbcType=VARCHAR}, #{adjusterCode, jdbcType=VARCHAR}, #{adjusterName, jdbcType=VARCHAR}, 
      #{adjustTime, jdbcType=TIMESTAMP}, #{adjustOrgCode, jdbcType=VARCHAR}, #{adjustOrgName, jdbcType=VARCHAR},
      #{goodsType, jdbcType=VARCHAR},#{expressOrLd, jdbcType=VARCHAR},#{dataSource, jdbcType=VARCHAR},
		      							#{taskEndTimeWK, jdbcType=TIMESTAMP},
		      							#{volumeTotal, jdbcType=DECIMAL},
		      							#{weightTotal, jdbcType=DECIMAL},
		      							#{goodsQtyTotal, jdbcType=INTEGER}
      )
 
  </insert>
  <update id="modifyLoaderWork" parameterType="com.deppon.foss.module.transfer.load.api.shared.domain.LoaderWorkloadEntity" >
    update TFR.T_OPT_LOADER_WORKLOAD
       SET WEIGHT = #{weight,jdbcType=DECIMAL},
        WAYBILL_QTY = #{waybillQty,jdbcType=DECIMAL},
        GOODS_QTY=#{goodsQty,jdbcType=DECIMAL},
        ADJUSTER_CODE = #{adjusterCode,jdbcType=VARCHAR},
        ADJUSTER_NAME = #{adjusterName,jdbcType=VARCHAR},
        ADJUST_TIME = #{adjustTime,jdbcType=TIMESTAMP},
        ADJUST_ORG_CODE = #{adjustOrgCode,jdbcType=VARCHAR},
        ADJUST_ORG_NAME = #{adjustOrgName,jdbcType=VARCHAR}
    where ID = #{id,jdbcType=VARCHAR}
  </update>
   <update id="modifyLoaderWorkWK" parameterType="com.deppon.foss.module.transfer.load.api.shared.domain.LoaderWorkloadEntity" >
    update TFR.T_OPT_LOADER_WORKLOAD
       SET WEIGHT = #{weight,jdbcType=DECIMAL},
        WAYBILL_QTY = #{waybillQty,jdbcType=DECIMAL},
        GOODS_QTY=#{goodsQty,jdbcType=DECIMAL},
        ADJUSTER_CODE = #{adjusterCode,jdbcType=VARCHAR},
        ADJUSTER_NAME = #{adjusterName,jdbcType=VARCHAR},
        ADJUST_TIME = #{adjustTime,jdbcType=TIMESTAMP},
        ADJUST_ORG_CODE = #{adjustOrgCode,jdbcType=VARCHAR},
        ADJUST_ORG_NAME = #{adjustOrgName,jdbcType=VARCHAR}
    where ID = #{id,jdbcType=VARCHAR}
  </update>
  
  <update id="updateByPrimaryKey" parameterType="com.deppon.foss.module.transfer.load.api.shared.domain.LoaderWorkloadEntity" >
    update TFR.T_OPT_LOADER_WORKLOAD
    set LOADER_CODE = #{loaderCode,jdbcType=VARCHAR},
      LOADER_NAME = #{loaderName,jdbcType=VARCHAR},
      LOAD_ORG_CODE = #{loadOrgCode,jdbcType=VARCHAR},
      LOAD_ORG_NAME = #{loadOrgName,jdbcType=VARCHAR},
      HANDLE_TYPE = #{handleType,jdbcType=VARCHAR},
      TASK_TYPE = #{taskType,jdbcType=VARCHAR},
      TASK_NO = #{taskNo,jdbcType=VARCHAR},
      T_O_ID = #{taskId,jdbcType=VARCHAR},
      JOIN_TIME = #{joinTime,jdbcType=TIMESTAMP},
      LEAVE_TIME = #{leaveTime,jdbcType=TIMESTAMP},
      WEIGHT = #{weight,jdbcType=DECIMAL},
      WAYBILL_QTY = #{waybillQty,jdbcType=DECIMAL},
      GOODS_QTY = #{goodsQty,jdbcType=DECIMAL},
      VOLUME = #{volume,jdbcType=DECIMAL},
      NOTES = #{notes,jdbcType=VARCHAR},
      ADJUSTER_CODE = #{adjusterCode,jdbcType=VARCHAR},
      ADJUSTER_NAME = #{adjusterName,jdbcType=VARCHAR},
      ADJUST_TIME = #{adjustTime,jdbcType=TIMESTAMP},
      ADJUST_ORG_CODE = #{adjustOrgCode,jdbcType=VARCHAR},
      ADJUST_ORG_NAME = #{adjustOrgName,jdbcType=VARCHAR}
    where ID = #{id,jdbcType=VARCHAR}
  </update>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from TFR.T_OPT_LOADER_WORKLOAD
    where ID = #{id,jdbcType=VARCHAR}
  </delete>
  
  	<!-- 根据运单查询需要重新计算工作量的装车任务-->
	<select id="queryReCreateWorkLoadLoadTask" resultMap="LoaderWorkloadDetailDtoResultMap" parameterType="String"> 
		 select t.id as id, t.vehicle_no vehicleNo,
           max(t.task_no) as taskNo,
           max(t.task_type) as taskType,
           'LOAD' as handleType,
           max(to_char(t.load_start_time,'yyyy-mm-dd hh24:mi:ss')) as taskBeginDate,
           max(to_char(t.load_end_time,'yyyy-mm-dd hh24:mi:ss')) as taskEndTime,
		       max(t.orig_org_code) as orgCode,
		       sum(d.load_qty) as totGoodsQty,
		       max(t.goods_type) as goodsType
		  from tfr.t_opt_load_task t
		  left join tfr.t_opt_load_waybill_detail d on d.load_task_id = t.id
		 <where> t.load_way = 'PDA'
		    and ((t.task_state = 'FINISHED' and
			       t.task_type in
			       ('PARTIALLINE_LOAD',
                   'LONG_DISTANCE_LOAD',
                   'SHORT_DISTANCE_LOAD',
                   'SC_EXPRESS',
                   'EXPRESS_PICK',
                   'EXPRESS_CONNECTION_LOAD','LDP_LOAD','DIVISION_LOAD')) or
			       (t.task_state = 'SUBMITED' and t.task_type = 'DELIVER_LOAD'))
		    and  d.waybill_no=#{waybillNo,jdbcType=VARCHAR}
		 </where>
	       group by t.id, t.vehicle_no
	</select>
	
	<!-- 根据运单查询需要重新计算工作量的卸车任务-->
	<select id="queryReCreateWorkLoadUnLoadTask" resultMap="LoaderWorkloadDetailDtoResultMap" parameterType="String"> 
			select t.id as id, t.vehicle_no vehicleNo,
	           max(t.unload_task_no) as taskNo,
	           max(t.unload_type) as taskType,
	           'UNLOAD' as handleType,
	           max(to_char(t.unload_start_time,'yyyy-mm-dd hh24:mi:ss')) as taskBeginDate,
	           max(to_char(t.unload_end_time,'yyyy-mm-dd hh24:mi:ss')) as taskEndTime,
	            max(t.unload_org_code) as orgCode,
	            sum(w.operation_goods_qty) as totGoodsQty
	      from tfr.t_opt_unload_task t
	      left join tfr.t_opt_unload_waybill_detail w on w.unload_task_id = t.id
	     <where> 
	       t.task_state = 'FINISHED'
	       and t.unload_type in ('DELIVER','LONG_DISTANCE','SHORT_DISTANCE','BUSINESS_AIR','SC_EXPRESS','EXPRESS_PICK','DIVISION')
	      and w.waybill_no=#{waybillNo,jdbcType=VARCHAR}
	      </where>
	         group by t.id, t.vehicle_no
	     
	</select>
	
	<!-- 根据任务号删除原有的工作量数据-->
	<delete id="deleteOldWorkLoadLoadTask"  parameterType="String"> 
		delete from tfr.t_opt_loader_workload lw where lw.task_no=#{taskNo,jdbcType=VARCHAR} and lw.data_source is null
	</delete>
	
	<!--添加差错扣除货量-->
	 <insert id="addErrorVolumnDeduction" parameterType="com.deppon.foss.module.transfer.load.api.shared.dto.ErrorVolumeDeductionDto" >
	 	insert into tfr.t_opt_error_volume_deduction(
			  id            ,
			  errorid       ,
			  waybill_no    ,
			  respemp_code  ,
			  respemp_name  ,
			  respdept_code ,
			  respdept_name ,
			  weight        ,
			  deltime 		,
			  create_time
		) values(#{id,jdbcType=VARCHAR},#{errorId,jdbcType=VARCHAR},#{waybillNo,jdbcType=VARCHAR}
		,#{respEmpCode,jdbcType=VARCHAR},#{respEmpName,jdbcType=VARCHAR},#{respDeptCode,jdbcType=VARCHAR}
		,#{respDeptName,jdbcType=VARCHAR},#{weight,jdbcType=DECIMAL},#{delTime,jdbcType=TIMESTAMP},sysdate)
	 </insert>
	 <!---根据查询条件查询差错扣除货量-->
	 <select id="queryErrorVolumeDeductionList" resultMap="ErrorVolumeDeductionDtoResultMap" parameterType="String"> 
    select 
        id     id       ,
        errorid     errorId  ,
        waybill_no  waybillNo  ,
        respemp_code respEmpCode ,
        respemp_name respEmpName ,
        respdept_code respDeptCode ,
        respdept_name respDeptName,
        weight      weight  ,
        deltime delTime
       from  tfr.t_opt_error_volume_deduction vd  
       <where>
       		1 =1 
	       	<if test="respEmpCode !=null and respEmpCode != '' ">	
					and vd.respemp_code = #{respEmpCode,jdbcType=VARCHAR}
			</if>
			<if test = "unifiedCodes !=null and unifiedCodes.size > 0 ">
				and vd.respdept_code in
				<foreach collection="unifiedCodes" open="(" close=")" item="item" separator="," index="index"> 
					 #{item,jdbcType=VARCHAR}
				</foreach>
			</if>
			<if test="beginDate !=null and beginDate != '' ">	
					<![CDATA[and vd.deltime >= #{beginDate,jdbcType=TIMESTAMP}]]>
			</if>
			<if test="endDate !=null and endDate != '' ">	
	      			<![CDATA[and vd.deltime <= #{endDate,jdbcType=TIMESTAMP}]]>
			</if>
		</where>
	</select>
</mapper>