<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC 
	"-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="tfr-unload" >
	<resultMap id="pdaAssignUnloadBillResultMap"
			type="com.deppon.foss.module.transfer.pda.api.shared.domain.PDAAssignUnloadBillEntity">
			<result property="billNo" column="billNo" />
			<result property="taskNo" column="taskNo" />
			<result property="vehicleNo" column="vehicleNo" />
			<result property="state" column="state" />
			<result property="platformNo" column="platformNo" />
			<result property="platformVirtualCode" column="platformVirtualCode" />
			<result property="unloadOrderType" column="unloadOrderType" />
	</resultMap>
	
	<resultMap id="pdaAssignSCUnloadBillResultMap" type="com.deppon.foss.module.transfer.pda.api.shared.domain.SCPDAAssignUnloadTaskEntity">
	        <result property="state" column="state" /> 
	        <result property="billNo" column="billNo" />
	        <result property="vehicleNo" column="vehicleNo" />
	        <result property="connectionPoint" column="connectionPoint" />
	        <result property="waybillQtyTotal" column="waybillQtyTotal" />
	        <result property="goodsQtyTotal" column="goodsQtyTotal" />
	        <result property="taskNo" column="taskNo"/>
	</resultMap>
	
	<resultMap id="unloadBillDetailDtoResultMap"
			type="com.deppon.foss.module.transfer.unload.api.shared.dto.UnloadBillDetailDto">
			<result property="billState" column="billState" />
			<result property="businessType" column="businessType" />
			<result property="billNo" column="billNo" />
			<result property="billType" column="billType" />
			<result property="weight" column="weight" />
			<result property="volume" column="volume" />
			<result property="waybillTotal" column="waybillTotal" />
			<result property="pieces" column="pieces" />
			<result property="origOrgCode" column="origOrgCode" />
			<result property="destOrgCode" column="destOrgCode" />
	</resultMap>
	<resultMap id="unloadGoodsSerialDetailDtoResultMap"
		type="com.deppon.foss.module.transfer.unload.api.shared.dto.UnloadGoodsSerialDetailDto">
		<result property="taskNo" column="taskNo" />
		<result property="wayBillNo" column="wayBillNo" />
		<result property="serialNo" column="serialNo" />
		<result property="weight" column="weight" />
		<result property="wayBillQty" column="wayBillQty" />
		<result property="volume" column="volume" />
		<result property="goodsName" column="goodsName" />
		<result property="stockTime" column="stockTime" />
		<result property="transportType" column="transportType" />
		<result property="receiveOrgCode" column="receiveOrgCode" />
		<result property="receiveOrgName" column="receiveOrgName" />
		<result property="reachOrgCode" column="reachOrgCode" />
		<result property="reachOrgName" column="reachOrgName" />
		<result property="packing" column="packing" />
		<result property="modifyState" column="modifyState" />
		<result property="isUnPacking" column="isUnPacking" />
		<result property="isValue" column="isValue" />
		<result property="isToDoList" column="isToDoList" />
		<result property="modifyContent" column="modifyContent" />
		<result property="beContraband" column="beContraband" />
		<result property="origOrgCode" column="origOrgCode" />
		<result property="destOrgCode" column="destOrgCode" />
		<result property="billNo" column="billNo" />
		<result property="operateQty" column="operateQty" />
		<result property="handOverQty" column="handOverQty" />
		<result property="stationNumber" column="stationNumber" />
		<result property="packageRemark" column="packageRemark" />
		<result property="handoverNo" column="handoverNo" />
	</resultMap>
	<resultMap id="unloadSerialNoDetailEntityResultMap"
			type="com.deppon.foss.module.transfer.unload.api.shared.domain.UnloadSerialNoDetailEntity">
			<result property="id" column="id" />
			<result property="unloadWaybillDetailId" column="unloadWaybillDetailId" />
			<result property="scanStatus" column="scanStatus" />
			<result property="goodsStatus" column="goodsStatus" />
			<result property="optTime" column="optTime" />
			<result property="deviceNo" column="deviceNo" />
			<result property="deviceId" column="deviceId" />
			<result property="serialNo" column="serialNo" />
			<result property="taskCreateTime" column="taskCreateTime" />
			<result property="createOrgCode" column="createOrgCode" />
	</resultMap>
	<resultMap id="unloadScanSerialNoDetailDtoResultMap" 
		type="com.deppon.foss.module.transfer.unload.api.shared.dto.UnloadSerialNoDetailDto" extends="unloadSerialNoDetailEntityResultMap">
			<result property="wayBillNo" column="wayBillNo" />
			<result property="billNo" column="billNo" />
			<result property="handOverQty" column="handOverQty" />
			<result property="optGoodsQty" column="optGoodsQty" />
			<result property="scanGoodsQty" column="scanGoodsQty" />
			<result property="weight" column="weight" />
			<result property="volume" column="volume" />
			<!-- zwd 200968  运单生效状态 - YES NO  -->
			<result property="waybillStatus" column="waybillStatus" /> 
	</resultMap>
		<resultMap id="loaderParticipationResultMap" type="com.deppon.foss.module.transfer.load.api.shared.domain.LoaderParticipationEntity" >
    	<id column="ID" property="id" jdbcType="VARCHAR" />
	    <result column="LOADER_NAME" property="loaderName" jdbcType="VARCHAR" />
	    <result column="LOADER_CODE" property="loaderCode" jdbcType="VARCHAR" />
	    <result column="LOAD_ORG_CODE" property="loadOrgCode" jdbcType="VARCHAR" />
	    <result column="LOAD_ORG_NAME" property="loadOrgName" jdbcType="VARCHAR" />
	    <result column="JOIN_TIME" property="joinTime" jdbcType="TIMESTAMP" />
	    <result column="LEAVE_TIME" property="leaveTime" jdbcType="TIMESTAMP" />
	    <result column="BE_CREATOR" property="beCreator" jdbcType="CHAR" />
	    <result column="TASK_TYPE" property="taskType" jdbcType="VARCHAR" />
	    <result column="TASK_ID" property="taskId" jdbcType="VARCHAR" />
	    <result column="FLAG" property="flag" jdbcType="VARCHAR" />
	</resultMap>
	
	<resultMap id="expressPackageDetailEntityResultMap"
		type="com.deppon.foss.module.transfer.load.api.shared.domain.ExpressPackageDetailEntity">
		<result property="id" column="id" />
		<result property="packageNo" column="package_no" />
		<result property="wayBillNo" column="waybill_no" />
		<result property="serialNo" column="serial_no" />
		<result property="transportTypeName" column="trans_type_name" />
		<result property="transportTypeCode" column="trans_type_code" />
		<result property="goodsQty" column="billing_goods_qty" />
		<result property="weight" column="weight" />
		<result property="volume" column="volume" />
		<result property="recieveOrgName" column="receive_org_name" />
		<result property="reachOrgName" column="reach_org_name" />
		<result property="pack" column="GOODS_PACKAGING" />
		<result property="goodsName" column="goods_name" />
		<result property="notes" column="notes" />
		<result property="goodsState" column="goods_state" />
		<result property="scanState" column="scan_state" />
		<result property="deviceNo" column="device_no" />
		<result property="scanTime" column="scan_time" />
		<result property="createTime" column="create_time" />
	</resultMap>
	<resultMap id="InOutStockEntityResultMap" type="com.deppon.foss.module.transfer.unload.api.shared.dto.PDAUnloadAsyncBillMsgDto" >
		<result property="id" column="id"/>
		<result property="wayBillNo" column="wayBillNo" />
		<result property="serialNo" column="serialNo" />
		<result property="operatorCode" column="operatorCode"/>
		<result property="operatorName" column="operatorName"/>
		<result property="inStockType" column="inStockType"/>
		<result property="orgCode" column="orgCode"/>
		<result property="bePackage" column="bePackage"/>
		<result property="jobId" column="jobId"/>
		<result property="billNo" column="billNo"/>
	</resultMap>
	<resultMap id="UnloadSealResultMap" type="com.deppon.foss.module.transfer.load.api.shared.domain.SealEntity" >
    <id column="ID" property="id" jdbcType="VARCHAR" />
    <result column="T_TRUCK_TASK_DETAIL_ID" property="truckTaskDetailId" jdbcType="VARCHAR" />
    <result column="VEHICLE_NO" property="vehicleNo" />
    <result column="SEAL_TYPE" property="sealType" />
    <result column="SEAL_STATE" property="sealState" />
    <result column="SEALER_CODE" property="sealerCode" />
    <result column="SEALER_NAME" property="sealerName" />
    <result column="SEALD_ORG_CODE" property="sealdOrgCode" />
    <result column="SEALD_ORG_NAME" property="sealdOrgName" />
    <result column="SEAL_TIME" property="sealTime" />
    <result column="CHECKER_USER" property="checkerUser" />
    <result column="CHECKER_CODE" property="checkerCode" />
    <result column="CHECK_ORG_CODE" property="checkOrgCode" />
    <result column="CHECK_ORG_NAME" property="checkOrgName" />
    <result column="CHECK_TIME" property="checkTime" />
    <result column="OPERATE_TIME" property="operateTime" />
    <result column="SEAL_ORG_MEMO" property="sealOrgMemo" />
    <result column="CHECK_ORG_MEMO" property="checkOrgMemo" />
    <result column="OA_ERROR_NO" property="oaErrorNo" />
    <result column="PDA_DEVICE_NO" property="pdaDeviceNo" />
    <result column="TRUCK_DEPART_ID" property="truckDepartId" />
    <result column="IS_TRANSIENT_STATE" property="isTransientState" />
  </resultMap>
  
  <resultMap id="unloadSerialDetailMap" type="com.deppon.foss.module.transfer.unload.api.shared.dto.UnloadSerialDetaiDto" >
    <result column="UNLOAD_TIME" property="unloadTime" />
    <result column="SERIAL_NO" property="serialNo" />
  </resultMap>
	<!-- 查询卸车车辆中到达部门不为部门的单据 -->
	<select id="queryUnArriveBillInVehicle" parameterType="HashMap" resultMap="arriveBillResultMap">
			select b.bill_no as billNo,
				   b.bill_type as billType
			  from tfr.t_opt_truck_task_bill b
			 inner join tfr.t_opt_truck_task_detail d on d.id = b.truck_task_detail_id
			 where d.dest_org_code not in 
				<foreach 
						collection="orgCodes" open="(" close=")" item="item" separator="," index="index"> 
						#{item} 
				</foreach>
			   and exists (select *
			          from tfr.t_opt_truck_task_detail dd
			         inner join tfr.t_opt_truck_task_bill bb on dd.id =
			                                                    bb.truck_task_detail_id
			         where dd.truck_task_id = d.truck_task_id
			           and bb.bill_no in 
				<foreach 
						collection="unloadBills" open="(" close=")" item="item" separator="," index="index"> 
						#{item} 
				</foreach>
					)
			   <![CDATA[and b.assign_state <> 'UNLOADED']]>
	</select>
	<!-- 查询货物是否在交接单中 -->
	<select id="queryGoodsBeInHandOverBill" parameterType="HashMap" resultType="Long">
		select count(hs.id)
		  from tfr.t_opt_handoverbill_serialno hs
		 where hs.handoverbill_no in 
				<foreach 
						collection="billNos" open="(" close=")" item="item" separator="," index="index"> 
						#{item} 
				</foreach>
		   and hs.waybill_no = #{wayBillNo}
		   and hs.serial_no = #{serialNo}
	</select>
	<!-- 查询货物是否在配载单中 -->
	<select id="queryGoodsBeInAssembleBill" parameterType="HashMap" resultType="Long">
		select count(hs.id)
			  from tfr.t_opt_vehicleassemblebill v
			 inner join tfr.t_opt_vehicleassemble_detail vd on vd.vehicleassemblebill_id = v.id
			 inner join tfr.t_opt_handoverbill_serialno hs on hs.handoverbill_no =
			                                                  vd.handover_no
			 where v.vehicleassemble_no in 
			 	<foreach 
						collection="billNos" open="(" close=")" item="item" separator="," index="index"> 
						#{item} 
				</foreach>
			   and hs.waybill_no = #{wayBillNo}
			   and hs.serial_no = #{serialNo}
	</select>
	<!--查询货物是否在接送货单据中 -->
	<select id="queryGoodsBeInPickUpBill" parameterType="HashMap" resultMap="unloadBillDetailDtoResultMap">
		select b.bill_no as billNo,
		       hd.goods_qty as pieces
		  from tfr.t_opt_unload_task t
		 inner join tfr.t_opt_unload_bill_detail b on b.unload_task_id = t.id
		 inner join pkp.t_srv_stay_handover h on h.handovertask_no = b.bill_no
		 inner join pkp.t_srv_stay_handoverdetail hd on hd.t_srv_stay_handover_id = h.id
		 inner join pkp.t_srv_stay_handoverserial hs on hs.t_srv_stay_handoverdetail_id =
		                                                hd.id
		 where t.unload_task_no = #{taksNo}
		   and hd.waybill_no = #{wayBillNo}
		   and hs.serailno = #{serialNo}
	</select>
	<!--根据货物查询接送货单据 -->
	<select id="queryPickUpBillByGoods" parameterType="HashMap" resultMap="unloadBillDetailDtoResultMap">
		select h.handovertask_no as billNo,
		       hd.goods_qty as pieces
		  from pkp.t_srv_stay_handover h 
		 inner join pkp.t_srv_stay_handoverdetail hd on hd.t_srv_stay_handover_id = h.id
		 inner join pkp.t_srv_stay_handoverserial hs on hs.t_srv_stay_handoverdetail_id =
		                                                hd.id
		 where h.handovertask_no in 
		       <foreach 
						collection="billNos" open="(" close=")" item="item" separator="," index="index"> 
						#{item} 
				</foreach>
		   and hd.waybill_no = #{wayBillNo}
		   and hs.serailno = #{serialNo}
		   order by h.CREATE_TIME desc
	</select>
	<!--zwd 200968 查询快递集中卸货单据 -->
	<select id="queryEwayBillByGoods" parameterType="HashMap" resultMap="unloadBillDetailDtoResultMap">
	select 
	 aw.handover_no as billNo, 
	 awd.goods_qty as pieces
	 from TFR.T_OPT_PICK_HANDOVER aw
	 join TFR.T_OPT_PICK_HANDOVER_DETAIL awd
	 on awd.handover_no = aw.handover_no
	 left join TFR.T_OPT_PICK_HANDOVER_SERIALNO ws
	 on ws.handover_no = awd.handover_no and awd.waybill_no=ws.waybill_no
	 where aw.handover_no in 
	 <foreach collection = "billNos" open = "(" close = ")" item = "item" separator = ","
	   index = "index" > 
	   #{item}
	 </foreach>
	and awd.waybill_no = #{wayBillNo}
	and ws.serail_no = #{serialNo}
	order by aw.create_time desc
	</select>
	<!--根据货物查询航空正单单据 -->
	<select id="queryAirBillByGoods" parameterType="HashMap" resultMap="unloadBillDetailDtoResultMap">
		  select aw.air_waybill_no as billNo, 
             awd.goods_qty as pieces
        from tfr.t_opt_air_waybill aw
        join tfr.t_opt_air_waybill_detail awd on awd.air_waybill_id = aw.id
        left join tfr.t_opt_air_waybill_serialno ws on ws.air_waybill_detail_id =
                                                       awd.id
       where aw.air_waybill_no in 
        <foreach 
				collection="billNos" open="(" close=")" item="item" separator="," index="index"> 
				#{item} 
		</foreach>
         and awd.waybill_no =
         and ws.serial_no =
       order by aw.create_time desc
	</select>
	<!--根据货物查询交接单 -->
	<select id="queryHandOverBillByGoods" parameterType="HashMap" resultMap="unloadBillDetailDtoResultMap">
		   select hd.handover_no as billNo,
	       hd.handover_goods_qty as pieces,
	       h.orig_org_code       as origOrgCode,
	       h.dest_org_code       as destOrgCode
		  from tfr.t_opt_handoverbill h
		 inner join tfr.t_opt_handoverbill_detail hd on h.handover_no =
		                                                hd.handover_no
		 inner join tfr.t_opt_handoverbill_serialno hs on hd.handover_no =
		                                                  hs.handoverbill_no
		                                              and hd.waybill_no =
		                                                  hs.waybill_no
		 where h.handover_no in
		       <foreach 
						collection="billNos" open="(" close=")" item="item" separator="," index="index"> 
						#{item} 
				</foreach>
		   and hd.waybill_no = #{wayBillNo}
		   and hs.serial_no = #{serialNo}
		   order by hs.CREATE_TIME desc
	</select>
	<!--根据货物查询配载单 -->
	<select id="queryAssembleBillByGoods" parameterType="HashMap" resultMap="unloadBillDetailDtoResultMap">
		 <![CDATA[select serial.billNo as billNo,
		       count(serial.rn) as pieces,
		       max(serial.origOrgCode) as origOrgCode,
		       max(serial.destOrgCode) as destOrgCode
		  from (select row_number() over(partition by v.vehicleassemble_no, h.waybill_no, h.serial_no order by h.create_time desc) rn,
		               v.vehicleassemble_no as billNo,
		               h.waybill_no as wayBillNo,
		               h.serial_no as serialNo,
		               v.orig_org_code as origOrgCode,
		               v.dest_org_code as destOrgCode
		          from tfr.t_opt_vehicleassemblebill v
		         inner join tfr.t_opt_vehicleassemble_detail vd on vd.vehicleassemblebill_id = v.id
		         inner join tfr.t_opt_handoverbill_serialno h on h.handoverbill_no =
		                                                         vd.handover_no]]>
		         where v.vehicleassemble_no in 
				<foreach 
						collection="billNos" open="(" close=")" item="item" separator="," index="index"> 
						#{item} 
				</foreach>
		           and h.waybill_no = #{wayBillNo}
		           and exists (select '1'
		                  from tfr.t_opt_vehicleassemble_detail vd  
		                  inner join tfr.t_opt_handoverbill_serialno hs on hs.handoverbill_no = vd.handover_no
		                 where  hs.waybill_no = #{wayBillNo}
		                   and hs.serial_no = #{serialNo}
		                   and vd.vehicleassemblebill_id = v.id)) serial
		 <![CDATA[where serial.rn < 2
		 group by serial.billNo
		 order by serial.billNo desc]]>
	</select>
	<!-- 根据运单号查询交接、装卸车情况 -->
	<select id="pda_queryAssignUnloadTask" parameterType="HashMap" resultMap="pdaAssignUnloadBillResultMap">
			<![CDATA[select distinct (a.bill_no) as billNo,
			                a.state as state,
			                a.vehicle_no as vehicleNo,
			                a.platform_no as platformNo,
			                a.platform_id as platformVirtualCode,
			                (select unload_task_no from tfr.t_opt_unload_task where id = taskd.unload_task_id) as taskNo,
			                NVL(tb.bill_type, h.handover_type) as unloadOrderType
					  from tfr.t_opt_unload_assign_task a
				      left join tfr.t_opt_unload_bill_detail taskd on taskd.bill_no = a.bill_no
                                and exists (select id from tfr.t_opt_unload_task t where t.task_state ='UNLOADING' and t.id = taskd.unload_task_id)
					  left join tfr.t_opt_truck_task_bill tb on tb.bill_no = a.bill_no
					  left join pkp.t_srv_stay_handover h on h.handovertask_no = a.bill_no
					 where (a.state = 'UNSTART' or a.state = 'PROCESSING')
					   and a.be_canceled = 'N'
							   and a.loader_code = #{loaderCode}
							   and a.load_org_code = #{loadOrgCode}]]>
	</select>
	
	<!-- 根据车牌号查询二程接驳卸车任务 -->
	<select id="pda_queryAssignSCUnloadTask" parameterType="HashMap" resultMap="pdaAssignSCUnloadBillResultMap">
	  
     select 
            c.assign_state as state,
            c.connection_bill_no  as billNo,
            c.vehicle_no as vehicleNo,
            c.waybill_qty_total as waybillQtyTotal,
            c.goods_qty_total as goodsQtyTotal,
            c.dest_org_name as connectionPoint,
            t.unload_task_no as taskNo 
	from tfr.t_opt_connectionbill c
		    left join tfr.t_opt_unload_bill_detail b
		    on b.bill_no = c.connection_bill_no
		    left join tfr.t_opt_unload_task t
		    on t.id = b.unload_task_id  and t.unload_type = 'SC_EXPRESS'
    where c.vehicle_no = #{vehicleNo}
            and (c.connectionbill_state = 30 or c.connectionbill_state = 40 )
            and c.assign_state !='UNLOADED'
	
	</select>
	
	<!--根据扫描之后 状态更新(二程接驳卸车)  --> 
	<update id="pda_updateUnloadScanState" parameterType="String" >
	    update 
	       tfr.t_opt_connectionbill c
	    set 
	       c.ASSIGN_STATE='UNLOADING'
	    where
	       c.connection_bill_no = #{billNo} 
	
	</update> 
	<!-- 根据卸车任务编号查询卸车任务 -->
	<select id="queryUnloadTaskByTaskNo" parameterType="String" resultMap="foss.unload.unloadtaskquery.BaseResultMap">
			<![CDATA[select t.id as id,
				       t.unload_task_no as unloadTaskNo,
				       t.vehicle_no as vehicleNo,
				       t.platform_no as platformNo,
				       t.platform_id as platformId,
				       t.unload_start_time as unloadStartTime,
				       t.unload_end_time as unloadEndTime,
				       t.task_state as taskState,
				       t.unload_type as unloadType,
				       t.unload_way as unloadWay,
				       t.unload_org_code as unloadOrgCode,
				       t.unload_org_name as unloadOrgName,
				       t.be_exception as beException,
				       t.exception_notes as exceptionNotes,
				       t.plan_complete_time as planCompleteTime,
				       t.BE_SCAN_INSTOCK as beScanInstock
				  from tfr.t_opt_unload_task t
				 where t.unload_task_no = #{taskNo}]]>
	</select>
	<!-- 根据单据编号查询单据 -->
	<select id="queryUnloadBillsByBillNo" parameterType="java.util.List" resultMap="unloadBillDetailDtoResultMap">
			<![CDATA[select tb.bill_no as billNo,
				       max(tb.bill_type) as billType,
				       max(tb.assign_state) as billState,
				       max(td.business_type) as businessType,
				       decode(max(tb.bill_type) ， 'HANDOVER' ，sum(nvl(ho.weight_total,wk.TOTALWEIGHT))
				              ，sum(vh.weight_total)) as weight,
				       decode(max(tb.bill_type) ， 'HANDOVER' ，sum(nvl(ho.volume_total,wk.TOTALVOLUMN))
				              ，sum(vh.volume_total)) as volume,
				       decode(max(tb.bill_type) ， 'HANDOVER' ，sum(nvl(ho.goods_qty_total,wk.TOTALQTY))
				              ，sum(vh.goods_qty_total)) as pieces,
				       decode(max(tb.bill_type) ， 'HANDOVER' ，sum(nvl(ho.waybill_qty_total,wk.TOTALQTY))
				              ，sum(vh.waybill_qty_total)) as waybillTotal
				  from tfr.t_opt_truck_task_bill tb
				  left join tfr.t_opt_truck_task_detail td on td.id = tb.truck_task_detail_id
				  left join tfr.t_opt_handoverbill ho on ho.handover_no = tb.bill_no
				                                 and tb.bill_type = 'HANDOVER'
				  left join tfr.t_wk_trf_bill wk
    					on wk.HANDOVERBILLNO = tb.bill_no
   						and tb.bill_type = 'HANDOVER'                           
				  left join tfr.t_opt_vehicleassemblebill v on v.vehicleassemble_no =
				                                           tb.bill_no
				                                       and tb.bill_type = 'VEHICLEASSEMBLE'
				  left join tfr.t_opt_vehicleassemble_detail vd on vd.vehicleassemblebill_id = v.id
				  left join tfr.t_opt_handoverbill vh on vh.handover_no = vd.handover_no]]>
		<where>
			tb.bill_no in
			<foreach collection="list" open="(" close=")" item="item"
				separator="," index="index">
				#{item}
			</foreach>
			and tb.bill_level = '1'
		</where>
		group by tb.bill_no
		union all
		select sh.handovertask_no as billNo,
		'PICKUP' as billType,
		max(sh.assign_state) as billState,
		'DELIVER' as businessType,
		max(sh.weight_total) as weight,
		max(sh.volume_total) as volume,
		max(sh.goods_qty_total) as pieces,
		count(shd.waybill_no) as waybillTotal
		from pkp.t_srv_stay_handover sh
		left join pkp.t_srv_stay_handoverdetail shd on shd.t_srv_stay_handover_id
		=
		sh.id
		<where>
			sh.handovertask_no in
			<foreach collection="list" open="(" close=")" item="item"
				separator="," index="index">
				#{item}
			</foreach>
		</where>
		group by sh.handovertask_no
		union all
		<!-- 263072 商务专递查询已分配卸车任务，分配状态取正单交接单表信息 -->
		Select t1.Air_Handover_No As Billno ,t2.Billtype,t1.Express_Assign_Status As Billstate,
		t2.Businesstype,t2.Weight,t2.Volume,t2.Pieces,t2.Waybilltotal
		 From 
			(Select Ahd.Air_Waybill_No,Ah.Express_Assign_Status,ah.Air_Handover_No
		          From Tfr.t_Opt_Air_Handoverbill_Detail Ahd
		          Join Tfr.t_Opt_Air_Handoverbill Ah
		            On Ahd.Air_Handoverbill_Id = Ah.Id
				 <where>
						ah.Air_Handover_No in
						<foreach collection="list" open="(" close=")" item="item"
							separator="," index="index">
							#{item}
						</foreach>
					</where>
				 )t1
		 Join (
		Select w.Air_Waybill_No,
		       'AIRBILL' As Billtype,
		       'BUSINESS_AIR' As Businesstype,
		       Max(w.Billing_Weight) As Weight,
		       Max(w.Volume) As Volume,
		       Max(w.Goods_Qty) As Pieces,
		       Count(Wd.Waybill_No) As Waybilltotal
		  From Tfr.t_Opt_Air_Waybill w
		  Left Join Tfr.t_Opt_Air_Waybill_Detail Wd
		    On Wd.Air_Waybill_Id = w.Id
		 Where w.Air_Waybill_No In
		       (Select Ahd.Air_Waybill_No
		          From Tfr.t_Opt_Air_Handoverbill_Detail Ahd
		          Join Tfr.t_Opt_Air_Handoverbill Ah
		            On Ahd.Air_Handoverbill_Id = Ah.Id
		          <where>
						ah.Air_Handover_No in
						<foreach collection="list" open="(" close=")" item="item"
							separator="," index="index">
							#{item}
						</foreach>
					</where>
				 )
		 Group By w.Air_Waybill_No)t2 On t1.Air_Waybill_No=t2.Air_Waybill_No
		 
		  union all
		<!--快递空运 -->
		select wk.handoverbillno as billNo,
		'AIRBILL' as billType,
		(case
        when max(wk.handoverstate)='ASSINGED'
        then 'ASSIGNED'
        end ) as billState,
		'BUSINESS_AIR' as businessType,
		max(wk.AIRLIFTTOTALWEIGHT) as weight,
		max(wk.AIRLIFTTOTALVOLUMN) as volume,
		max(wk.AIRLIFTTOTALQTY) as pieces,
		count(wk.AIRLIFTTOTALQTY) as waybillTotal
		from tfr.t_wk_trf_bill wk
		<where>
		 wk.handoverbillno in 
		 <foreach collection = "list" open = "(" close = ")" item = "item" 
		 separator = "," index = "index" > 
		 #{item} 
		 </foreach > 
		 and wk.HANDOVERTYPE ='AIR_TRANS_HANDOVER'
		</where>
	    group by wk.handoverbillno
	    
		union all
		<!-- zwd 200968 快递集中卸货 -->
		select w.handover_no as billNo,
		'EWAYBILL' as billType,
		max(w.assign_state) as billState,
		'EXPRESS_PICK' as businessType,
		max(w.weight_total) as weight,
		max(w.volume_total) as volume,
		max(w.goods_qty_total) as pieces,
		count(wd.goods_qty) as waybillTotal
		from TFR.T_OPT_PICK_HANDOVER w
		left join TFR.T_OPT_PICK_HANDOVER_DETAIL wd
		on wd.handover_no = w.handover_no
		<where>
		 w.handover_no in 
		 <foreach collection = "list" open = "(" close = ")" item = "item" 
		 separator = "," index = "index" > 
		 #{item} 
		 </foreach > 
 		and w.handover_type != 'CREATE_PDA_BSE_PIC'
		</where>
 		group by w.handover_no
		union all
		<!-- sjl 20160524 零担电子面单卸货 -->
		select w.handover_no as billNo,
       		'CREATE_PDA_BSE_PIC' as billType,
       		max(w.assign_state) as billState,
       		'ELECTRANSPORT' as businessType,
       		max(w.weight_total) as weight,
       		max(w.volume_total) as volume,
       		max(w.goods_qty_total) as pieces,
       		count(wd.goods_qty) as waybillTotal
  		from TFR.T_OPT_PICK_HANDOVER w
  		left join TFR.T_OPT_PICK_HANDOVER_DETAIL wd
    	on wd.handover_no = w.handover_no
		<where>
			w.handover_no in 
			<foreach collection = "list" open = "(" close = ")" item = "item" 
		 		separator = "," index = "index" > 
		 		#{item} 
			</foreach >
 		and w.handover_type='CREATE_PDA_BSE_PIC'
		</where>
 		group by w.handover_no
	    
	</select>
	<!--根据任务ID查询单据 -->
	<select id="queryUnloadBillsByTaskId" parameterType="String" resultMap="unloadBillDetailDtoResultMap">
			<![CDATA[select t.id as id,
				       t.unload_task_id as unloadTaskId,
				       t.bill_no as billNo,
				       t.bill_type as billType,
				       t.weight as weight,
				       t.volume as volume,
				       t.waybilltotal as waybillTotal,
				       t.pieces as pieces
				  from tfr.t_opt_unload_bill_detail t
				 where t.unload_task_id = #{taskId}]]>
	</select>
	
	
	<!--根据配载单查询包交接单 -->
	<select id="queryHandoverByNO" parameterType="String" resultMap="unloadBillDetailDtoResultMap">
			<![CDATA[ SELECT h.id as id,
            h.handover_no  as billNo,
            'HANDOVER' as billType,
            h.weight_total as weight,
            h.volume_total as volume,
            h.waybill_qty_total as waybillTotal
              from tfr.t_opt_vehicleassemblebill v 
            JOIN tfr.t_opt_vehicleassemble_detail d ON d.vehicleassemblebill_id = v.id
            JOIN tfr.t_opt_handoverbill h ON h.handover_no = d.handover_no
            WHERE v.vehicleassemble_no = #{vehicleassembleNo} 
            AND (h.handover_no LIKE 'B%' or h.handover_no LIKE 'KYB%') ]]>
	</select>
	
	<!--查询封签 -->
	<select id="querySeal" parameterType="HashMap" resultMap="UnloadSealResultMap">
			<![CDATA[select s.id as id,
				       s.t_truck_task_detail_id as truckTaskDetailId,
				       s.vehicle_no as vehicleNo,
				       s.seal_type as sealType,
				       s.seal_state as sealState,
				       s.seal_time as sealTime
				  from tfr.t_opt_seal s
				 where s.vehicle_no = #{vehicleNo}
				   and s.seal_state = #{sealState}
				   and s.seal_type <> #{sealType}]]>
	</select>
	<!--通过单据编号查询封签 -->
	<select id="querySealByBillNo" parameterType="HashMap" resultMap="UnloadSealResultMap">
			  SELECT s.id as id,
				       s.t_truck_task_detail_id as truckTaskDetailId,
				       s.vehicle_no as vehicleNo,
				       s.seal_type as sealType,
				       s.seal_state as sealState,
				       s.seal_time as sealTime 
           			 FROM tfr.t_opt_seal s 
          			 JOIN tfr.t_opt_truck_task_detail d ON d.truck_task_id = s.t_truck_task_detail_id
         			 JOIN  tfr.t_opt_truck_task_bill b ON b.truck_task_detail_id = d.id
          			 WHERE 
          			 <if test="billNos.size()!=0">
          			 b.bill_no in
					<foreach 
						collection="billNos" open="(" close=")" item="item" separator="," index="index"> 
						#{item} 
					</foreach>
					<![CDATA[AND]]>
					</if>
           			  s.vehicle_no = #{vehicleNo}
           			<![CDATA[ and s.seal_type <> #{sealType}
           			 ORDER BY s.seal_time DESC]]>
	</select>
	<!--根据任务ID查询理货员 -->
	<select id="queryLoaderByTaskId" parameterType="HashMap" resultMap="loaderParticipationResultMap">
			<![CDATA[ select p.id as id,
				        p.loader_name as loaderName,
				        p.loader_code as loaderCode,
				        p.load_org_code as loadOrgCode,
				        p.load_org_name as loadOrgName,
				        p.join_time as joinTime,
				        p.leave_time as leaveTime,
				        p.be_creator as beCreator,
				        p.task_type as taskType,
				        p.task_id as taskId,
				        p.flag as flag
				   from tfr.t_opt_loader_participation p]]>
				  where p.task_id = #{taskId}
				  <if test="beCreator != null and beCreator !=''">
				    and p.be_creator = #{beCreator}
				  </if>
	</select>
	<!--更新已分配卸车任务状态-->
	<update id='updateAssignUnloadTaskState' parameterType="java.util.List">
		begin 
		<foreach collection="list" item="item" separator=";" index="index"> 
			update tfr.t_opt_unload_assign_task t
			   set 
			   <if test="item.unloadStartTime != null and item.unloadStartTime !=''">
			   		t.UNLOAD_BEGIN_TIME = #{item.unloadStartTime,jdbcType=TIMESTAMP},
			   </if>
			   <if test="item.unloadEndTime != null and item.unloadEndTime !=''">
			   		t.UNLOAD_END_TIME = #{item.unloadEndTime,jdbcType=TIMESTAMP},
			   </if>
			   t.state = #{item.state}
			 where t.bill_no = #{item.billNo}
			   and t.be_canceled = #{item.beCanceled}
		</foreach>
		;end;
	</update>
	<!--根据状态更新已分配卸车任务状态-->
	<update id='updateAssignUnloadTaskStateByState' parameterType="java.util.List">
			update tfr.t_opt_unload_assign_task t
			   set 
			   <if test="unloadTask.unloadStartTime != null and unloadTask.unloadStartTime !=''">
			   		t.UNLOAD_BEGIN_TIME = #{unloadTask.unloadStartTime,jdbcType=TIMESTAMP},
			   </if>
			   <if test="unloadTask.unloadEndTime != null and unloadTask.unloadEndTime !=''">
			   		t.UNLOAD_END_TIME = #{unloadTask.unloadEndTime,jdbcType=TIMESTAMP},
			   </if>
			   t.state = #{unloadTask.state}
			 where t.bill_no = #{unloadTask.billNo}
			   and t.be_canceled = #{unloadTask.beCanceled}
			   and t.state = #{beforeState}
	</update>
	
	<!--根据状态更新已分配卸车任务状态(商务专递  263072)-->
	<update id='updateAssignUnloadTaskStateByStateForDEAP' parameterType="java.util.List">
			update tfr.t_opt_unload_assign_task t
			   set 
			   <if test="unloadTask.unloadStartTime != null and unloadTask.unloadStartTime !=''">
			   		t.UNLOAD_BEGIN_TIME = #{unloadTask.unloadStartTime,jdbcType=TIMESTAMP},
			   </if>
			   <if test="unloadTask.unloadEndTime != null and unloadTask.unloadEndTime !=''">
			   		t.UNLOAD_END_TIME = #{unloadTask.unloadEndTime,jdbcType=TIMESTAMP},
			   </if>
			   t.state = #{unloadTask.state}
			 where t.bill_no  In (Select ah.Air_Handover_No  from tfr.t_Opt_Air_Handoverbill ah 
			 Where ah.Id In (Select ahd.Air_Handoverbill_Id From tfr.t_Opt_Air_Handoverbill_Detail 
			 ahd Where ahd.Air_Waybill_No=#{unloadTask.billNo}))
			   and t.be_canceled = #{unloadTask.beCanceled}
			   and t.state = #{beforeState}
	</update>
	
	<!--根据状态更新二程接驳卸车任务状态 -->
	<update id='pda_updateAssignSCUnloadTaskState' parameterType="java.util.Map">
	  
	      update tfr.t_opt_connectionbill c
	        set 
			   c.assign_state=#{billAssignState},
  			   c.connectionbill_state=#{connectionBillState}
  	        where c.connection_bill_no in (
		   <foreach collection=" billNoList " item="item" separator=",">
		      #{item}
		   </foreach>	
		)  
	  
	</update>
		<!--查询卸车交接单-->
	<select id="queryUnloadGoodsDetail" parameterType="HashMap" resultMap="unloadGoodsSerialDetailDtoResultMap">
			<![CDATA[select 
		       decode(r.is_packed,'N','Y','N') as isUnPacking,
			   NVL2(todo.waybill_no, 'Y', 'N') as isToDoList,
		       NVL2(c.id, 'Y', 'N') as beContraband
		  from  pkp.t_srv_waybill w 
		  left join tfr.t_opt_contraband c on c.waybill_no = w.waybill_no and c.process_result<>'NO_CONTRABAND'
		  left join tfr.t_opt_package_request_detail r on r.waybill_no =
				                                                  w.waybill_no
				                                              and r.serial_no = #{serialNo}
		  left join (select wr.waybill_no, ld.serial_no, ld.handle_org_code
               from pkp.t_srv_waybillrfc wr
              inner join pkp.t_srv_labeledgood_todo ld on ld.t_srv_waybill_rfc_id =
                                                          wr.id
              ) todo on todo.waybill_no = w.waybill_no
                                    and todo.serial_no = #{serialNo}
          ]]>
		 <where> w.waybill_no = #{wayBillNo}
		 </where>
	</select>
	<!--查询卸车交接单-->
	<select id="queryHandOverUnloadDetail" parameterType="HashMap" resultMap="unloadGoodsSerialDetailDtoResultMap">
			<![CDATA[select h.handover_no as billNo,
		       h.orig_org_code as origOrgCode,
		       h.dest_org_code as destOrgCode,
		       hd.waybill_no as wayBillNo,
		       hd.be_valuable as isValue,
		       hd.receive_org_name as receiveOrgName,
		       w.receive_org_code as receiveOrgCode,
		       w.customer_pickup_org_name as reachOrgName,
		       w.customer_pickup_org_code as reachOrgCode,
		       w.goods_weight_total as weight,
		       w.goods_volume_total as volume,
           	   w.goods_qty_total as wayBillQty,
		       hd.goods_name as goodsName,
		       hs.serial_no as serialNo,
		       hd.transport_type as transportType,
		       hd.packing as packing,
		       decode(r.is_packed,'N','Y','N') as isUnPacking,
			   NVL2(todo.waybill_no, 'Y', 'N') as isToDoList,
		       NVL2(c.id, 'Y', 'N') as beContraband,
		       wd.OPERATION_GOODS_QTY as operateQty,
		       nvl(sd.station_number,ob.station_number) as stationNumber
		  from tfr.t_opt_handoverbill h
		  inner join tfr.t_opt_handoverbill_detail hd on hd.handover_no = h.handover_no
		  left join tfr.t_opt_unload_waybill_detail wd on wd.waybill_no = hd.waybill_no 
		  													and wd.UNLOAD_TASK_ID=#{taskId} 
		  													and wd.bill_no = h.handover_no
		  													and wd.OPERATION_GOODS_QTY >= 0
		  inner join pkp.t_srv_waybill w on w.waybill_no = hd.waybill_no and w.active='Y'
		  left join bse.t_bas_sales_department sd on sd.code = w.customer_pickup_org_code and sd.active = 'Y'
          left join bse.t_bas_outer_branch ob on ob.agent_dept_code = w.customer_pickup_org_code and ob.active = 'Y'
		  left join tfr.t_opt_contraband c on c.waybill_no = w.waybill_no and c.process_result<>'NO_CONTRABAND'
		  inner join tfr.t_opt_handoverbill_serialno hs on hs.handoverbill_no =
		                                              h.handover_no  and hs.waybill_no = hd.waybill_no
		  left join tfr.t_opt_package_request_detail r on r.waybill_no =
				                                                  hd.waybill_no
				                                              and r.serial_no = hs.serial_no
		  left join (select wr.waybill_no, ld.serial_no, ld.handle_org_code
               from pkp.t_srv_waybillrfc wr
              inner join pkp.t_srv_labeledgood_todo ld on ld.t_srv_waybill_rfc_id =
                                                          wr.id
              ) todo on todo.waybill_no = hd.waybill_no
                                    and todo.serial_no = hs.serial_no
                                    ]]>
		 <where> h.handover_no in 
			<foreach 
						collection="bills" open="(" close=")" item="item" separator="," index="index"> 
						#{item.billNo} 
			</foreach>
		 </where>
	</select>
	<!--查询卸车配载单-->
	<select id="queryAssembleUnloadDetail" parameterType="HashMap" resultMap="unloadGoodsSerialDetailDtoResultMap">
			<![CDATA[select serial.*,
       w.receive_org_code as receiveOrgCode,
       w.customer_pickup_org_code as reachOrgCode,
       w.goods_weight_total as weight,
       w.goods_volume_total as volume,
       w.goods_qty_total as wayBillQty,
       decode(r.is_packed, 'N', 'Y', 'N') as isUnPacking,
       NVL2(todo.waybill_no, 'Y', 'N') as isToDoList,
       NVL2(c.id, 'Y', 'N') as beContraband,
       wd.OPERATION_GOODS_QTY as operateQty,
       nvl(sd.station_number,ob.station_number) as stationNumber
  from (select row_number() over(partition by v.vehicleassemble_no, hd.waybill_no, hs.serial_no order by hs.create_time desc) rn,
               v.vehicleassemble_no as billNo,
               hd.waybill_no as wayBillNo,
               hs.serial_no as serialNo,
               hd.be_valuable as isValue,
               hd.receive_org_name as receiveOrgName,
               hd.packing as packing,
               v.orig_org_code as origOrgCode,
               v.dest_org_code as destOrgCode,
               hd.reach_org_name as reachOrgName,
               hd.goods_name as goodsName,
               hd.transport_type as transportType
          from tfr.t_opt_vehicleassemblebill v
         inner join tfr.t_opt_vehicleassemble_detail vd on vd.vehicleassemblebill_id = v.id
         inner join tfr.t_opt_handoverbill ho on ho.handover_no =
                                                 vd.handover_no
         inner join tfr.t_opt_handoverbill_detail hd on hd.handover_no =
                                                        ho.handover_no
         inner join tfr.t_opt_handoverbill_serialno hs on hs.handoverbill_no =
                                                          ho.handover_no
                                                      and hs.waybill_no =
                                                          hd.waybill_no]]>
          where ho.handover_no not like ('B%') and ho.handover_no not like ('KYB%')) serial
  <![CDATA[left join tfr.t_opt_unload_waybill_detail wd on wd.waybill_no =
                                                  serial.wayBillNo
                                              and wd.UNLOAD_TASK_ID = #{taskId}
                                              and wd.bill_no =  serial.billNo
                                              and wd.OPERATION_GOODS_QTY >= 0
 inner join pkp.t_srv_waybill w on w.waybill_no = serial.wayBillNo
                               and w.active = 'Y'
 left join bse.t_bas_sales_department sd on sd.code = w.customer_pickup_org_code and sd.active = 'Y'
 left join bse.t_bas_outer_branch ob on ob.agent_dept_code = w.customer_pickup_org_code and ob.active = 'Y'
  left join tfr.t_opt_contraband c on c.waybill_no = w.waybill_no
                                  and c.process_result <> 'NO_CONTRABAND'
  left join tfr.t_opt_package_request_detail r on r.waybill_no =
                                                  serial.wayBillNo
                                              and r.serial_no =
                                                  serial.serialNo
  left join (select wr.waybill_no, ld.serial_no, ld.handle_org_code
               from pkp.t_srv_waybillrfc wr
              inner join pkp.t_srv_labeledgood_todo ld on ld.t_srv_waybill_rfc_id =
                                                          wr.id
              ) todo on todo.waybill_no = serial.wayBillNo
                                    and todo.serial_no = serial.serialNo]]>
		 <where> serial.billNo in 
			<foreach 
						collection="bills" open="(" close=")" item="item" separator="," index="index"> 
						#{item.billNo} 
			</foreach>
			<![CDATA[and serial.rn<2]]>
		 </where>
	</select>
	<!-- 查询卸车接送货单据-->
	<select id="queryPickUpUnloadDetail" parameterType="HashMap" resultMap="unloadGoodsSerialDetailDtoResultMap">
			<![CDATA[select h.handovertask_no as billNo,
					   t.UNLOAD_ORG_CODE as origOrgCode,
			           t.UNLOAD_ORG_CODE as destOrgCode,
				       hd.waybill_no as wayBillNo,
				       w.precious_goods as isValue,
				       w.receive_org_name as receiveOrgName,
				       w.receive_org_code as receiveOrgCode,
				       w.customer_pickup_org_name as reachOrgName,
				       w.customer_pickup_org_code as reachOrgCode,
				       w.goods_weight_total as weight,
				       w.goods_volume_total as volume,
				       w.goods_qty_total as wayBillQty,
				       w.goods_name as goodsName,
				       hs.serailno as serialNo,
				       PP.NAME as transportType,
				       w.goods_package as packing,
				       decode(w.pending_type,'PDA_PENDING',nvl2(rr.id,'Y','N'),decode(r.is_packed,'N','Y','N')) as isUnPacking,
				       NVL2(todo.waybill_no, 'Y', 'N') as isToDoList,
				       NVL2(c.id, 'Y', 'N') as beContraband,
		               wd.OPERATION_GOODS_QTY as operateQty,
		               nvl(sd.station_number,ob.station_number) as stationNumber,
		               hd.package_remark  packageRemark 
				  from pkp.t_srv_stay_handover h
				  inner join pkp.t_srv_stay_handoverdetail hd on hd.t_srv_stay_handover_id = h.id
				  left join pkp.t_srv_stay_handoverserial hs on hs.t_srv_stay_handoverdetail_id =
				                                                hd.id
				  left join tfr.t_opt_unload_task t on t.id=#{taskId}
				  left join tfr.t_opt_unload_waybill_detail wd on wd.waybill_no = hd.waybill_no 
		  													and wd.UNLOAD_TASK_ID=t.id 
		  													and wd.OPERATION_GOODS_QTY >= 0
		  													and wd.bill_no = h.handovertask_no
				  inner join pkp.t_srv_waybill w on w.waybill_no = hd.waybill_no
				                               and w.active = 'Y'
				  left join bse.t_bas_sales_department sd on sd.code = w.customer_pickup_org_code and sd.active = 'Y'
				  left join bse.t_bas_outer_branch ob on ob.agent_dept_code = w.customer_pickup_org_code and ob.active = 'Y'
				  left JOIN PKP.T_SRV_PRODUCT PP ON PP.CODE = W.PRODUCT_CODE AND PP.ACTIVE='Y'
				  left join tfr.t_opt_contraband c on c.waybill_no = w.waybill_no
				                                  and c.process_result <> 'NO_CONTRABAND'
				  left join pkp.t_srv_wooden_requirements_pg rr on rr.waybill_no = hd.waybill_no and rr.active='Y'
				  left join tfr.t_opt_package_request_detail r on r.waybill_no =
				                                                  hd.waybill_no
				                                              and r.serial_no =
				                                                  hs.serailno
				  left join (select wr.waybill_no, ld.serial_no, ld.handle_org_code
	               from pkp.t_srv_waybillrfc wr
	              inner join pkp.t_srv_labeledgood_todo ld on ld.t_srv_waybill_rfc_id =
	                                                          wr.id
	              ) todo on todo.waybill_no = hd.waybill_no
	                                    and todo.serial_no = hs.serailno]]>
		 <where>  h.handovertask_no in 
			<foreach 
						collection="bills" open="(" close=")" item="item" separator="," index="index"> 
						#{item.billNo} 
			</foreach>
		 </where>
	</select>
	
	<!-- 查询电子面单单据-->
	<select id="queryELookGoodsDetail" parameterType="HashMap" resultMap="unloadGoodsSerialDetailDtoResultMap">
			<![CDATA[select h.handover_no as billNo,
					   t.UNLOAD_ORG_CODE as origOrgCode,
			           t.UNLOAD_ORG_CODE as destOrgCode,
				       hd.waybill_no as wayBillNo,
				       w.precious_goods as isValue,
				       w.receive_org_name as receiveOrgName,
				       w.receive_org_code as receiveOrgCode,
				       w.customer_pickup_org_name as reachOrgName,
				       w.customer_pickup_org_code as reachOrgCode,
				       w.goods_weight_total as weight,
				       w.goods_volume_total as volume,
				       w.goods_qty_total as wayBillQty,
				       w.goods_name as goodsName,
				       hs.serail_no as serialNo,
				       PP.NAME as transportType,
				       w.goods_package as packing,
				       decode(w.pending_type,'PDA_PENDING',
				       nvl2(rr.id,'Y','N'),
				       decode(r.is_packed,'N','Y','N')) as isUnPacking,
				       NVL2(todo.waybill_no, 'Y', 'N') as isToDoList,
				       NVL2(c.id, 'Y', 'N') as beContraband,
		               wd.OPERATION_GOODS_QTY as operateQty,
		               nvl(sd.station_number,ob.station_number) as stationNumber,
		               hd.package_remark  packageRemark 
				  from TFR.T_OPT_PICK_HANDOVER h
				  inner join tfr.t_opt_pick_handover_detail hd on hd.handover_no = h.handover_no
				  left join TFR.T_OPT_PICK_HANDOVER_SERIALNO hs on hs.handover_no = hd.handover_no and hs.waybill_no = hd.waybill_no
				  left join tfr.t_opt_unload_task t on t.id=#{taskId}
				  left join tfr.t_opt_unload_waybill_detail wd on wd.waybill_no = hd.waybill_no 
		  													and wd.UNLOAD_TASK_ID=t.id 
		  													and wd.OPERATION_GOODS_QTY >= 0
		  													and wd.bill_no = h.handover_no
				  inner join pkp.t_srv_waybill w on w.waybill_no = hd.waybill_no
				                               and w.active = 'Y'
				  left join bse.t_bas_sales_department sd on sd.code = w.customer_pickup_org_code and sd.active = 'Y'
				  left join bse.t_bas_outer_branch ob on ob.agent_dept_code = w.customer_pickup_org_code and ob.active = 'Y'
				  left JOIN PKP.T_SRV_PRODUCT PP ON PP.CODE = W.PRODUCT_CODE AND PP.ACTIVE='Y'
				  left join tfr.t_opt_contraband c on c.waybill_no = w.waybill_no
				                                  and c.process_result <> 'NO_CONTRABAND'
				  left join pkp.t_srv_wooden_requirements_pg rr on rr.waybill_no = hd.waybill_no and rr.active='Y'
				  left join tfr.t_opt_package_request_detail r on r.waybill_no =
				                                                  hd.waybill_no
				                                              and r.serial_no =
				                                                  hs.serail_no
				  left join (select wr.waybill_no, ld.serial_no, ld.handle_org_code
	               from pkp.t_srv_waybillrfc wr
	              inner join pkp.t_srv_labeledgood_todo ld on ld.t_srv_waybill_rfc_id =
	                                                          wr.id
	              ) todo on todo.waybill_no = hd.waybill_no
	                                    and todo.serial_no = hs.serail_no]]>
		 <where>  h.handover_no in 
			<foreach 
						collection="bills" open="(" close=")" item="item" separator="," index="index"> 
						#{item.billNo} 
			</foreach>
		 </where>
	</select>
	<!--查询卸车包信息-->
	<select id="queryPackageUnloadDetail" parameterType="HashMap" resultMap="unloadGoodsSerialDetailDtoResultMap">
			<![CDATA[select p.package_no as billNo,
            			p.depart_org_code as origOrgCode,
            			p.arrive_org_code as destOrgCode,
            			p.package_no as wayBillNo,
            			p.depart_org_code as receiveOrgCode,
            			p.depart_org_name as receiveOrgName,
            			p.arrive_org_code as reachOrgCode,
            			p.arrive_org_name as reachOrgName,
            			p.weight as weight,
            			p.volume as volume,
            			p.serial_qty as wayBillQty,
            			'快递包' as goodsName,
            			'快递' as transportType,
            			'N' as isToDoList,
            			'N' as beContraband
       				from tfr.t_Opt_Package p]]>
		 <where> p.package_no in 
			<foreach 
						collection="list" open="(" close=")" item="item" separator="," index="index"> 
						#{item.billNo} 
			</foreach>
		 </where>
	</select>
	
	<!--查询交接单中卸车包信息-->
	<select id="queryPackageHandUnloadDetail" parameterType="HashMap" resultMap="unloadGoodsSerialDetailDtoResultMap">
			<![CDATA[ select h.handover_no as billNo,
               h.orig_org_code  as origOrgCode,
               h.dest_org_code as destOrgCode,
               h.handover_no as wayBillNo,
               h.orig_org_code as receiveOrgCode,
               h.orig_org_name as receiveOrgName,
               h.dest_org_code as reachOrgCode,
               h.dest_org_name as reachOrgName,
               h.weight_total as weight,
               h.volume_total as volume,
               h.goods_qty_total as wayBillQty,
               '快递包' as goodsName,
               '快递' as transportType,
               'N' as isToDoList,
               'N' as beContraband
                 from tfr.t_opt_handoverbill h]]>
		 <where> (h.handover_no like 'B%' or  h.handover_no like 'KYB%')
		 	and h.handover_no in 
			<foreach 
						collection="list" open="(" close=")" item="item" separator="," index="index"> 
						#{item.billNo} 
			</foreach>
		 </where>
	</select>
	
	<!--查询配载单中卸车包信息-->
	<select id="queryPackageAssembleDetail" parameterType="HashMap" resultMap="unloadGoodsSerialDetailDtoResultMap">
			<![CDATA[ select v.vehicleassemble_no as billNo,
                      h.orig_org_code as origOrgCode,
                      h.dest_org_code as destOrgCode,
                      h.handover_no as wayBillNo,
                      h.orig_org_code as receiveOrgCode,
                      h.orig_org_name as receiveOrgName,
                      h.dest_org_code as reachOrgCode,
                      h.dest_org_name as reachOrgName,
                      h.weight_total as weight,
                      h.volume_total as volume,
                      h.goods_qty_total as wayBillQty,
                      '快递包' as goodsName,
                      '快递' as transportType,
                      'N' as isToDoList,
                      'N' as beContraband
                 from tfr.t_opt_vehicleassemblebill v
                 join tfr.t_opt_vehicleassemble_detail d on d.vehicleassemblebill_id = v.id
                 join tfr.t_opt_handoverbill h on h.handover_no =
                                                  d.handover_no]]>
		 <where> (h.handover_no like 'B%' or h.handover_no like 'KYB%')
		         and v.vehicleassemble_no in 
			<foreach 
						collection="list" open="(" close=")" item="item" separator="," index="index"> 
						#{item.billNo} 
			</foreach>
		 </where>
	</select>


	<!-- 查询航空正单单据-->
	<select id="queryAirUnloadDetail" parameterType="HashMap" resultMap="unloadGoodsSerialDetailDtoResultMap">
			<![CDATA[ select aw.air_waybill_no as billNo,
           				t.UNLOAD_ORG_CODE as origOrgCode,
           				t.UNLOAD_ORG_CODE as destOrgCode,
           				awd.waybill_no as wayBillNo,
           				w.precious_goods as isValue,
           				w.receive_org_name as receiveOrgName,
           				w.receive_org_code as receiveOrgCode,
           				w.customer_pickup_org_name as reachOrgName,
           				w.customer_pickup_org_code as reachOrgCode,
           				w.goods_weight_total as weight,
           				w.goods_volume_total as volume,
           				w.goods_qty_total as wayBillQty,
           				w.goods_name as goodsName,
           				ws.serial_no as serialNo,
           				PP.NAME as transportType,
           				w.goods_package as packing,
           				decode(w.pending_type,
                  			'PDA_PENDING',
                  			nvl2(rr.id, 'Y', 'N'),
                  		decode(r.is_packed, 'N', 'Y', 'N')) as isUnPacking,
           				NVL2(todo.waybill_no, 'Y', 'N') as isToDoList,
           				NVL2(c.id, 'Y', 'N') as beContraband,
           				wd.OPERATION_GOODS_QTY as operateQty,
           				nvl(sd.station_number, ob.station_number) as stationNumber
      				from tfr.t_opt_air_waybill aw
      				join tfr.t_opt_air_waybill_detail awd on awd.air_waybill_id = aw.id
      				left join tfr.t_opt_air_waybill_serialno ws on ws.air_waybill_detail_id =
                                                     awd.id
      				left join tfr.t_opt_unload_task t on t.id = #{taskId}
      				left join tfr.t_opt_unload_waybill_detail wd on wd.waybill_no =awd.waybill_no
                                                  and wd.UNLOAD_TASK_ID = t.id
                                                  and wd.OPERATION_GOODS_QTY >= 0
                                                  and wd.bill_no =
                                                      aw.air_waybill_no
     				inner join pkp.t_srv_waybill w on w.waybill_no = awd.waybill_no
                                   and w.active = 'Y'
      				left join bse.t_bas_sales_department sd on sd.code =
                                                 w.customer_pickup_org_code
                                             and sd.active = 'Y'
      				left join bse.t_bas_outer_branch ob on ob.agent_dept_code =
                                             w.customer_pickup_org_code
                                         and ob.active = 'Y'
      				left JOIN PKP.T_SRV_PRODUCT PP ON PP.CODE = W.PRODUCT_CODE
                                    AND PP.ACTIVE = 'Y'
      				left join tfr.t_opt_contraband c on c.waybill_no = w.waybill_no
                                      and c.process_result <>
                                          'NO_CONTRABAND'
      				left join pkp.t_srv_wooden_requirements_pg rr on rr.waybill_no =
                                                       awd.waybill_no
                                                   and rr.active = 'Y'
      				left join tfr.t_opt_package_request_detail r on r.waybill_no =
                                                      awd.waybill_no
                                                  and r.serial_no =
                                                      ws.serial_no
      				left join (select wr.waybill_no, ld.serial_no, ld.handle_org_code
                      from pkp.t_srv_waybillrfc wr
                  	inner join pkp.t_srv_labeledgood_todo ld on ld.t_srv_waybill_rfc_id =
                                                              wr.id) todo on todo.waybill_no =
                                                                             awd.waybill_no
                                                                         and todo.serial_no = ws.serial_no]]>
		 <where>  aw.air_waybill_no in 
			<foreach 
						collection="bills" open="(" close=")" item="item" separator="," index="index"> 
						#{item.billNo} 
			</foreach>
		 </where>
	</select>
	
	<!-- 查询航空正单交接单单据  263072  商务专递 -->
	<select id="queryAirHandoverUnloadDetail" parameterType="HashMap" resultMap="unloadGoodsSerialDetailDtoResultMap">
			<![CDATA[ select Ah.Air_Handover_No As Billno,
           				t.UNLOAD_ORG_CODE as origOrgCode,
           				t.UNLOAD_ORG_CODE as destOrgCode,
           				awd.waybill_no as wayBillNo,
           				w.precious_goods as isValue,
           				w.receive_org_name as receiveOrgName,
           				w.receive_org_code as receiveOrgCode,
           				w.customer_pickup_org_name as reachOrgName,
           				w.customer_pickup_org_code as reachOrgCode,
           				w.goods_weight_total as weight,
           				w.goods_volume_total as volume,
           				w.goods_qty_total as wayBillQty,
           				w.goods_name as goodsName,
           				ws.serial_no as serialNo,
           				PP.NAME as transportType,
           				w.goods_package as packing,
           				decode(w.pending_type,
                  			'PDA_PENDING',
                  			nvl2(rr.id, 'Y', 'N'),
                  		decode(r.is_packed, 'N', 'Y', 'N')) as isUnPacking,
           				NVL2(todo.waybill_no, 'Y', 'N') as isToDoList,
           				NVL2(c.id, 'Y', 'N') as beContraband,
           				wd.OPERATION_GOODS_QTY as operateQty,
           				nvl(sd.station_number, ob.station_number) as stationNumber
      				from 
      					Tfr.t_Opt_Air_Handoverbill_Detail Ahd
					  Join Tfr.t_Opt_Air_Handoverbill Ah
					    On Ahd.Air_Handoverbill_Id = Ah.Id
					   And Ah.Air_Handovertype = 'PACKAGE_HANDOVER'
					   And Ah.Express_Assign_Status = 'ASSIGNED'
					   And Ah.Express_Unload_Status = 'UNLOADING'
      				Join tfr.t_opt_air_waybill aw on  Ahd.Air_Waybill_No = Aw.Air_Waybill_No
      				join tfr.t_opt_air_waybill_detail awd on awd.air_waybill_id = aw.id
      				left join tfr.t_opt_air_waybill_serialno ws on ws.air_waybill_detail_id =
                                                     awd.id
      				left join tfr.t_opt_unload_task t on t.id = #{taskId}
      				left join tfr.t_opt_unload_waybill_detail wd on wd.waybill_no =awd.waybill_no
                                                  and wd.UNLOAD_TASK_ID = t.id
                                                  and wd.OPERATION_GOODS_QTY >= 0
                                                  and wd.bill_no =
                                                      aw.air_waybill_no
     				inner join pkp.t_srv_waybill w on w.waybill_no = awd.waybill_no
                                   and w.active = 'Y'
      				left join bse.t_bas_sales_department sd on sd.code =
                                                 w.customer_pickup_org_code
                                             and sd.active = 'Y'
      				left join bse.t_bas_outer_branch ob on ob.agent_dept_code =
                                             w.customer_pickup_org_code
                                         and ob.active = 'Y'
      				left JOIN PKP.T_SRV_PRODUCT PP ON PP.CODE = W.PRODUCT_CODE
                                    AND PP.ACTIVE = 'Y'
      				left join tfr.t_opt_contraband c on c.waybill_no = w.waybill_no
                                      and c.process_result <>
                                          'NO_CONTRABAND'
      				left join pkp.t_srv_wooden_requirements_pg rr on rr.waybill_no =
                                                       awd.waybill_no
                                                   and rr.active = 'Y'
      				left join tfr.t_opt_package_request_detail r on r.waybill_no =
                                                      awd.waybill_no
                                                  and r.serial_no =
                                                      ws.serial_no
      				left join (select wr.waybill_no, ld.serial_no, ld.handle_org_code
                      from pkp.t_srv_waybillrfc wr
                  	inner join pkp.t_srv_labeledgood_todo ld on ld.t_srv_waybill_rfc_id =
                                                              wr.id) todo on todo.waybill_no =
                                                                             awd.waybill_no
                                                                         and todo.serial_no = ws.serial_no]]>
		 <where>  Ah.Air_Handover_No in 
			<foreach 
						collection="bills" open="(" close=")" item="item" separator="," index="index"> 
						#{item.billNo} 
			</foreach>
		 </where>
	</select>
	<!-- zwd 200968 查询快递集中卸货单据-->
	<select id="queryEwaybillUnloadDetail" parameterType="HashMap" resultMap="unloadGoodsSerialDetailDtoResultMap">
		 <![CDATA[
				 select aw.handover_no as billNo,
		       t.UNLOAD_ORG_CODE as origOrgCode,
		       t.UNLOAD_ORG_CODE as destOrgCode,
		       awd.waybill_no as wayBillNo,
		       w.precious_goods as isValue,
		       w.receive_org_name as receiveOrgName,
		       w.receive_org_code as receiveOrgCode,
		       w.customer_pickup_org_name as reachOrgName,
		       w.customer_pickup_org_code as reachOrgCode,
		       w.goods_weight_total as weight,
		       w.goods_volume_total as volume,
		       w.goods_qty_total as wayBillQty,
		       w.goods_name as goodsName,
		       ws.serail_no as serialNo,
		       PP.NAME as transportType,
		       w.goods_package as packing,
		       decode(w.pending_type,
		              'PDA_PENDING',
		              nvl2(rr.id, 'Y', 'N'),
		              decode(r.is_packed, 'N', 'Y', 'N')) as isUnPacking,
		       NVL2(todo.waybill_no, 'Y', 'N') as isToDoList,
		       NVL2(c.id, 'Y', 'N') as beContraband,
		       wd.OPERATION_GOODS_QTY as operateQty,
		       nvl(sd.station_number, ob.station_number) as stationNumber,
		       case af.status
		         when 'UNACTIVE' then
		          'NO'
		         when 'EWAYBILL_ACTIVE_FAIL' then
		          'NO'
		         when 'EWAYBILL_PRE_ACTIVE' then
		          'NO'
		         else
		          'YES'
		       end waybillStatus   
		  from TFR.T_OPT_PICK_HANDOVER aw
		  join TFR.T_OPT_PICK_HANDOVER_DETAIL awd
		    on awd.handover_no = aw.handover_no
		  left join TFR.T_OPT_PICK_HANDOVER_SERIALNO ws
		    on ws.handover_no = awd.handover_no and awd.waybill_no=ws.waybill_no
		  left join tfr.t_opt_unload_task t
		    on t.id =  #{taskId}
		  left join tfr.t_opt_unload_waybill_detail wd
		    on wd.waybill_no = awd.waybill_no
		   and wd.UNLOAD_TASK_ID = t.id
		   and wd.OPERATION_GOODS_QTY >= 0
		   and wd.bill_no = aw.handover_no
		  left join pkp.t_srv_waybill w
		    on w.waybill_no = awd.waybill_no
		   and w.active = 'Y'
		  left join bse.t_bas_sales_department sd
		    on sd.code = w.customer_pickup_org_code
		   and sd.active = 'Y'
		  left join bse.t_bas_outer_branch ob
		    on ob.agent_dept_code = w.customer_pickup_org_code
		   and ob.active = 'Y'
		  left JOIN PKP.T_SRV_PRODUCT PP
		    ON PP.CODE = W.PRODUCT_CODE
		   AND PP.ACTIVE = 'Y'
		  left join tfr.t_opt_contraband c
		    on c.waybill_no = w.waybill_no
		   and c.process_result <> 'NO_CONTRABAND'
		  left join pkp.t_srv_wooden_requirements_pg rr
		    on rr.waybill_no = awd.waybill_no
		   and rr.active = 'Y'
		  left join tfr.t_opt_package_request_detail r
		    on r.waybill_no = awd.waybill_no
		   and r.serial_no = ws.serail_no
		  left join (select wr.waybill_no, ld.serial_no, ld.handle_org_code
		               from pkp.t_srv_waybillrfc wr
		              inner join pkp.t_srv_labeledgood_todo ld
		                 on ld.t_srv_waybill_rfc_id = wr.id) todo
		    on todo.waybill_no = awd.waybill_no
		   and todo.serial_no = ws.serail_no
		  left join pkp.t_srv_actual_freight af
		    on af.waybill_no = awd.waybill_no
		   and af.waybill_type = 'EWAYBILL']]>
		    <where> 
		      aw.handover_no in 
		       <foreach collection = "bills" open = "(" close = ")" item = "item" separator = ","
		         index = "index" > 
		         #{item.billNo} 
		       </foreach > 
    		</where>
 	</select>
	
	<!--查询卸车多货包货物-->
	<select id="queryUnloadMorePackageGoods" parameterType="String" resultMap="unloadGoodsSerialDetailDtoResultMap">
			<![CDATA[select distinct wd.package_no as billNo,
                   wd.package_no as wayBillNo,
                   p.depart_org_code as origOrgCode,
            	   p.arrive_org_code as destOrgCode,
                   p.depart_org_name as receiveOrgName,
                   p.depart_org_code as receiveOrgCode,
                   p.arrive_org_name as reachOrgName,
                   p.arrive_org_code as reachOrgCode,
                   p.weight as weight,
                   p.volume as volume,
                   p.serial_qty as wayBillQty,
                   '快递包' as goodsName,
                   '快递' as transportType,
                   p.serial_qty as operateQty,
            	   'N' as isToDoList,
            	   'N' as beContraband
              from tfr.t_opt_unload_task t
             inner join tfr.t_opt_unload_waybill_detail wd on wd.unload_task_id = t.id
             inner join tfr.t_opt_unload_serialno s on s.unload_waybill_detail_id = wd.id
             inner join tfr.t_opt_package p on p.package_no = wd.package_no]]>
		 <where> t.unload_task_no = #{taskNo}
		  			and s.goods_state in ('MORE_ENTRAINED', 'MORE_ALLOPATRY_ENTRAINED','MORE')
   				   and wd.package_no is not null
		 </where>
	</select>
	
	
	<!--查询卸车多货货物-->
	<select id="queryUnloadMoreGoods" parameterType="String" resultMap="unloadGoodsSerialDetailDtoResultMap">
			<![CDATA[select wd.bill_no as billNo,
                  wd.waybill_no as wayBillNo,
            w.precious_goods as isValue,
            w.receive_org_name as receiveOrgName,
            w.receive_org_code as receiveOrgCode,
            w.customer_pickup_org_name as reachOrgName,
            w.customer_pickup_org_code as reachOrgCode,
            w.goods_weight_total as weight,
            w.goods_volume_total as volume,
            w.goods_qty_total as wayBillQty,
            w.goods_name as goodsName,
            s.serial_no as serialNo,
            p.name as transportType,
            w.goods_package as packing,
            NVL2(todo.waybill_no, 'Y', 'N') as isToDoList,
            NVL2(c.id, 'Y', 'N') as beContraband,
            wd.OPERATION_GOODS_QTY as operateQty,
            nvl(sd.station_number,ob.station_number) as stationNumber
       from tfr.t_opt_unload_task t
      inner join tfr.t_opt_unload_waybill_detail wd on t.id = wd.unload_task_id
      inner join tfr.t_opt_unload_serialno s on s.unload_waybill_detail_id =
                                                wd.id
      inner join pkp.t_srv_waybill w on w.waybill_no = wd.waybill_no
                                    and w.active = 'Y'
      left join bse.t_bas_sales_department sd on sd.code = w.customer_pickup_org_code and sd.active = 'Y'
	  left join bse.t_bas_outer_branch ob on ob.agent_dept_code = w.customer_pickup_org_code and ob.active = 'Y'
       inner join pkp.t_srv_product p on p.code = w.product_code and p.active='Y'
       left join tfr.t_opt_contraband c on c.waybill_no = w.waybill_no
                                       and c.process_result <> 'NO_CONTRABAND'
       left join tfr.t_opt_package_request_detail r on r.waybill_no =
                                                       wd.waybill_no
                                                   and r.serial_no =
                                                       s.serial_no
       left join (select wr.waybill_no, ld.serial_no, ld.handle_org_code
               from pkp.t_srv_waybillrfc wr
              inner join pkp.t_srv_labeledgood_todo ld on ld.t_srv_waybill_rfc_id =
                                                          wr.id
              ) todo on todo.waybill_no = wd.waybill_no
                                    and todo.serial_no = s.serial_no]]>
		 <where> t.unload_task_no = #{taskNo}
   				 and s.goods_state in ('MORE_ENTRAINED', 'MORE_ALLOPATRY_ENTRAINED','MORE') and wd.package_no is null
		 </where>
	</select>
	<!--根据任务ID查询扫描记录条数 -->
	<select id="queryScanSerialNoQTYByTaskId" parameterType="String" resultType="int">
			<![CDATA[ select count(s.id)
						  from tfr.t_opt_unload_serialno s
						  left join tfr.t_opt_unload_waybill_detail w on w.id =
						                                             s.unload_waybill_detail_id
						 where w.unload_task_id = #{taskId}
						   and s.GOODS_STATE <> 'CANCELED'
						]]>
	</select>
	<!--更新卸车任务-->
	<update id='updateUnloadTask' parameterType="HashMap">
		update tfr.t_opt_unload_task t
		   set 
		   <if test="unloadEndTime != null and unloadEndTime !=''">t.unload_end_time = #{unloadEndTime,jdbcType=TIMESTAMP},</if>
		   <if test="beException != null and beException !=''">t.be_exception    = #{beException},</if>
		   <if test="exceptionNotes != null and exceptionNotes !=''">t.exception_notes = #{exceptionNotes},</if>
		       t.task_state = #{taskState}
		 where t.id = #{id}
	</update>
	<!--查询任务车辆中未结束卸车的有效单据数 -->
	<select id="queryUnfinishUnloadedValideBillQty" parameterType="String" resultType="int">
			<![CDATA[ select count(b.id)
						  from tfr.t_opt_truck_task_detail d
						  left join tfr.t_opt_truck_task_bill b on b.truck_task_detail_id = d.id
						 where d.id = #{truckTaskDetailId}
						   and b.bill_level = '1'
						   and b.assign_state <>'UNLOADED'
												]]>
	</select>
	<!--查询未完成卸车的任务车辆明细记录条数-->
	<select id="queryUnfinishUnloadedTruckTaskDetailQty" parameterType="String" resultType="int">
			<![CDATA[ select count(d.id)
						  from tfr.t_opt_truck_task t
						  left join tfr.t_opt_truck_task_detail d on d.truck_task_id = t.id
						 where t.id = #{truckTaskId}
						   and d.status in ('UNDEPART', 'ONTHEWAY', 'ARRIVED')
												]]>
	</select>
	<!--修改任务车辆明细状态-->
	<update id='updateTruckTaskDetailState' parameterType="HashMap">
		update tfr.t_opt_truck_task_detail t set t.status = #{state},t.modify_time = sysdate where t.id = #{id}
	</update>
	<!--修改任务车辆状态-->
	<update id='updateTruckTaskState' parameterType="HashMap">
		update tfr.t_opt_truck_task t set t.status = #{state},t.MODIFY_TIME=sysdate where t.id = #{id}
	</update>
	<!--查询卸车交接单中流水号:交接单号、运单号、流水号-->
	<select id="queryHandOverUnloadSerialDetail" parameterType="HashMap" resultMap="unloadGoodsSerialDetailDtoResultMap">
			<![CDATA[select h.handover_no as billNo, hs.waybill_no as wayBillNo, hs.serial_no as serialNo,
						h.orig_org_code as origOrgCode,h.dest_org_code as destOrgCode,
						hd.handover_goods_qty as handOverQty,
						hd.handover_no as handoverNo
						    from tfr.t_opt_handoverbill h
							  inner join tfr.t_opt_handoverbill_detail hd on hd.handover_no = h.handover_no
							  inner join tfr.t_opt_handoverbill_serialno hs on hs.handoverbill_no =
                                                  h.handover_no and hs.waybill_no = hd.waybill_no]]>
		 <where> h.handover_no in 
			<foreach 
						collection="list" open="(" close=")" item="item" separator="," index="index"> 
						#{item.billNo} 
			</foreach>
		 </where>
	</select>
	<!--查询卸车配载单中流水号：配载单号、运单号、流水号-->
	<select id="queryAssembleUnloadSerialDetail" parameterType="HashMap" resultMap="unloadGoodsSerialDetailDtoResultMap">
			 select t.billNo billNo,
       		 t.wayBillNo wayBillNo,
      		 t.serialNo serialNo,
       		 t.origOrgCode origOrgCode,
      		 t.destOrgCode destOrgCode,
       		 count(t.serialNo) over(partition by t.billNo, t.wayBillNo) handOverQty,
             max(t.handoverNo) as handoverNo
	     from (<![CDATA[select v.vehicleassemble_no  as billNo,
					       hs.waybill_no         as wayBillNo,
					       hs.serial_no          as serialNo,
					       max(v.orig_org_code)       as origOrgCode,
					       max(v.dest_org_code)       as destOrgCode,
					       sum(hd.handover_goods_qty) as handOverQty,
                 		   hd.handover_no as handoverNo
					       from tfr.t_opt_vehicleassemblebill v
						  inner join tfr.t_opt_vehicleassemble_detail vd on vd.vehicleassemblebill_id = v.id
						  inner join tfr.t_opt_handoverbill h on h.handover_no = vd.handover_no
						  inner join tfr.t_opt_handoverbill_detail hd on hd.handover_no = h.handover_no
						  inner join tfr.t_opt_handoverbill_serialno hs on hs.handoverbill_no =
                                                  h.handover_no and hs.waybill_no = hd.waybill_no]]>
		 <where> v.vehicleassemble_no in 
			<foreach 
						collection="list" open="(" close=")" item="item" separator="," index="index"> 
						#{item.billNo} 
			</foreach>
			group by v.vehicleassemble_no,hs.waybill_no,hs.serial_no,hd.handover_no
		 </where>) t
		 GROUP BY  t.billNo,t.wayBillNo,t.serialNo, t.origOrgCode, t.destOrgCode
	</select>
	<!--查询卸车接送货单据：单据编号、运单号、流水号-->
	<select id="queryPickUpUnloadSerialDetail" parameterType="HashMap" resultMap="unloadGoodsSerialDetailDtoResultMap">
			<![CDATA[select h.handovertask_no as billNo,
				       hd.waybill_no     as wayBillNo,
				       hs.serailno    as serialNo,
				       hd.goods_qty as handOverQty
				  from pkp.t_srv_stay_handover h
				  inner join pkp.t_srv_stay_handoverdetail hd on hd.t_srv_stay_handover_id = h.id
				  inner join pkp.t_srv_stay_handoverserial hs on hs.t_srv_stay_handoverdetail_id =
				                                                hd.id]]>
		 <where> h.handovertask_no in 
			<foreach 
						collection="list" open="(" close=")" item="item" separator="," index="index"> 
						#{item.billNo} 
			</foreach>
		 </where>
	</select>
	
	<!--zwd 200968  查询快递集中卸货单据：单据编号、运单号、流水号 -->
	<select id="queryEWayUnloadSerialDetail" parameterType="HashMap" resultMap="unloadGoodsSerialDetailDtoResultMap">
			<![CDATA[select aw.handover_no as billNo,
                            awd.waybill_no as wayBillNo,
                            ws.serail_no   as serialNo,
                            awd.goods_qty  as handOverQty
                         from TFR.T_OPT_PICK_HANDOVER aw
                         join TFR.T_OPT_PICK_HANDOVER_DETAIL awd on awd.handover_no = aw.handover_no
                         left join TFR.T_OPT_PICK_HANDOVER_SERIALNO ws on ws.handover_no = awd.handover_no and awd.waybill_no=ws.waybill_no]]>
		 <where> aw.handover_no  in 
			<foreach 
						collection="list" open="(" close=")" item="item" separator="," index="index"> 
						#{item.billNo} 
			</foreach>
		 </where>
	</select>
	
	<!--查询卸车航空正单单据：单据编号、运单号、流水号-->
	<select id="queryAirUnloadSerialDetail" parameterType="HashMap" resultMap="unloadGoodsSerialDetailDtoResultMap">
			<![CDATA[ select ah.Air_Handover_No as billNo,
         				awd.waybill_no    as wayBillNo,
         				ws.serial_no      as serialNo,
         				awd.goods_qty     as handOverQty
    				from tfr.t_opt_air_waybill aw
   					inner join tfr.t_opt_air_waybill_detail awd on awd.air_waybill_id =aw.id
   					inner join tfr.t_opt_air_waybill_serialno ws on ws.air_waybill_detail_id = awd.id
                    Left Join  tfr.t_Opt_Air_Handoverbill_Detail ahd
		            On aw.Air_Waybill_No  = ahd.Air_Waybill_No
		            Left Join        tfr.t_Opt_Air_Handoverbill ah 
		            On ahd.AIR_HANDOVERBILL_ID=ah.Id                                        
                                                   ]]>
		 <where>  ah.Air_Handover_No in 
			<foreach 
						collection="list" open="(" close=")" item="item" separator="," index="index"> 
						#{item.billNo} 
			</foreach>
		 </where>
	</select>
	
	<!-- 查询二程接驳单据：单据编号、运单号、流水号  hwy 218427 -->
	<select id="querySCUnloadSerialDetail" parameterType="HashMap" resultMap="unloadGoodsSerialDetailDtoResultMap">
           <![CDATA[ select c.connection_bill_no as billNo, 
					     cd.waybill_no as wayBillNo,
					     cs.serial_no as serialNo,
					     cd.goods_qty as handOverQty
					 from tfr.t_opt_connectionbill c
					 join tfr.t_opt_connectionbill_detail cd on c.connection_bill_no = cd.connectionbill_no
					 left join tfr.t_opt_connectionbill_serialno cs on cs.connectionbill_no = cd.connectionbill_no
					 and cd.waybill_no = cs.waybill_no ]]>
					 
			<where >  c.connection_bill_no in 
				<foreach 
						collection="list" open="(" close=")" item="item" separator="," index="index"> 
						#{item.billNo} 
			    </foreach>
		    </where>
	</select>
	<!--查询卸车扫描记录-->
	<select id="queryUnloadScanSerialDetailByTaskId" parameterType="String" resultMap="unloadScanSerialNoDetailDtoResultMap">
			<![CDATA[select s.id as id,
							s.unload_time as optTime,
							d.bill_no as billNo, 
							d.waybill_no as wayBillNo,
							s.serial_no as serialNo,
							s.goods_state as goodsStatus,
							d.HANDOVER_GOODS_QTY as handOverQty,
							d.OPERATION_GOODS_QTY as optGoodsQty,
							d.SCAN_GOODS_QTY as scanGoodsQty,
							d.UNLOAD_WEIGHT_TOTAL as weight,
							d.UNLOAD_VOLUME_TOTAL as volume,
							d.id as unloadWaybillDetailId,
							d.waybill_status as waybillStatus
						  from tfr.t_opt_unload_waybill_detail d 
						  left join tfr.t_opt_unload_serialno s on s.unload_waybill_detail_id = d.id
						 where d.unload_task_id = #{taskId}]]>
	</select>
	<!-- 插入扫描流水号-->
	<insert id="insertUnloadSerialNoEntity"  parameterType="HashMap">
			insert into tfr.T_OPT_UNLOAD_SERIALNO
			  (ID,
			   UNLOAD_WAYBILL_DETAIL_ID,
			   SCAN_STATE,
			   GOODS_STATE,
			   UNLOAD_TIME,
			   CREATE_TIME,
			   DEVICE_NO,
			   DEVICE_ID,
			   SERIAL_NO,
			   TASK_BEGIN_TIME,
			   UNLOAD_ORG_CODE)
			values
				(#{id,jdbcType=VARCHAR},
				#{unloadWaybillDetailId,jdbcType=VARCHAR},
				#{scanStatus,jdbcType=VARCHAR},
				#{goodsStatus,jdbcType=VARCHAR},
				#{optTime,jdbcType=TIMESTAMP},
				#{createDate,jdbcType=TIMESTAMP},
				#{deviceNo,jdbcType=DECIMAL},
				#{deviceId,jdbcType=VARCHAR},
				#{serialNo,jdbcType=VARCHAR},
				SYSDATE,
				#{createOrgCode,jdbcType=VARCHAR})
	</insert>
	<!--插入扫描运单明细-->
	<insert id="insertUnloadWayBillEntity"  parameterType="HashMap">
			insert into tfr.t_opt_unload_waybill_detail
			  (ID,
			   UNLOAD_TASK_ID,
			   BILL_NO,
			   WAYBILL_NO,
			   OPERATION_GOODS_QTY,
			   SCAN_GOODS_QTY,
			   ORIG_ORG_CODE,
			   DEST_ORG_CODE,
			   GOODS_NAME,
			   PACK,
			   TRANSPORT_TYPE,
			   TASK_BEGIN_TIME,
			   UNLOAD_ORG_CODE,
			   unload_weight_total,
			   unload_volume_total,
			   HANDOVER_GOODS_QTY,
			   modify_time,
			   CREATE_TIME,
			   package_no)
			values
				(#{id,jdbcType=VARCHAR},
				#{unloadTaskId,jdbcType=VARCHAR},
				#{billNo,jdbcType=VARCHAR},
				#{waybillNo,jdbcType=VARCHAR},
				#{operationGoodsQty,jdbcType=DECIMAL},
				#{scanGoodsQty,jdbcType=DECIMAL},
				#{origOrgCode,jdbcType=VARCHAR},
				#{destOrgCode,jdbcType=VARCHAR},
				#{goodsName,jdbcType=VARCHAR},
				#{pack,jdbcType=VARCHAR},
				#{transportType,jdbcType=VARCHAR},
				#{taskBeginTime,jdbcType=TIMESTAMP},
				#{unloadOrgCode,jdbcType=VARCHAR},
				#{unloadWeightTotal,jdbcType=DECIMAL},
				#{unloadVolumeTotal,jdbcType=DECIMAL},
				#{handOverPieces,jdbcType=DECIMAL},
				#{modifyDate,jdbcType=TIMESTAMP},
				#{createDate,jdbcType=TIMESTAMP},
				#{packageNo,jdbcType=VARCHAR}
				)
	</insert>
	<!--更新扫描运单明细-->
	<update id='updateUnloadWayBillEntity' parameterType="HashMap">
			update tfr.t_opt_unload_waybill_detail w
		   set 
		   	   w.scan_goods_qty = w.scan_goods_qty + #{scanGoodsQty,jdbcType=DECIMAL},
		       w.unload_weight_total = w.unload_weight_total + #{unloadWeightTotal,jdbcType=DECIMAL},
		       w.unload_volume_total = w.unload_volume_total + #{unloadVolumeTotal,jdbcType=DECIMAL},
		       w.operation_goods_qty = w.operation_goods_qty + #{operationGoodsQty,jdbcType=DECIMAL},
		       w.HANDOVER_GOODS_QTY = #{handOverPieces,jdbcType=DECIMAL}
		       where w.id = #{id}
	</update>
	<!--更新扫描运单明细-->
	<update id='newUpdateUnloadWayBillEntity' parameterType="HashMap">
			update tfr.t_opt_unload_waybill_detail w
		   set 
		   	   w.scan_goods_qty = w.scan_goods_qty + #{wayBillEntity.scanGoodsQty,jdbcType=DECIMAL},
		       w.unload_weight_total = w.unload_weight_total + #{wayBillEntity.unloadWeightTotal,jdbcType=DECIMAL},
		       w.unload_volume_total = w.unload_volume_total + #{wayBillEntity.unloadVolumeTotal,jdbcType=DECIMAL},
		       w.operation_goods_qty = w.operation_goods_qty + #{wayBillEntity.operationGoodsQty,jdbcType=DECIMAL},
		       w.HANDOVER_GOODS_QTY = #{wayBillEntity.handOverPieces,jdbcType=DECIMAL},
		       w.modify_time =  #{wayBillEntity.modifyDate,jdbcType=TIMESTAMP}
		       where w.id = #{wayBillEntity.id}
	</update>
	
	<!--更新扫描流水号-->
	<update id='updateUnloadSerialNoEntity' parameterType="HashMap">
			update tfr.t_opt_unload_serialno s
			   set 
			   	   <if test="scanStatus != null and scanStatus !=''">s.scan_state = #{scanStatus},</if>
			       <if test="optTime != null and optTime !=''">s.unload_time = #{optTime,jdbcType=TIMESTAMP},</if>
			       <if test="deviceNo != null and deviceNo !=''">s.device_no = #{deviceNo},</if>
			       <if test="goodsStatus != null and goodsStatus !=''">s.goods_state = #{goodsStatus}</if>
			 where s.id = #{id}
	</update>
	
	<!--重写更新扫描流水号-->
	<update id='newUpdateUnloadSerialNoEntity' parameterType="HashMap">
			update tfr.t_opt_unload_serialno s
			   set 
			   	   <if test="scanStatus != null and scanStatus !=''">s.scan_state = #{scanStatus},</if>
			       <if test="optTime != null and optTime !=''">s.unload_time = #{optTime,jdbcType=TIMESTAMP},</if>
			       <if test="deviceNo != null and deviceNo !=''">s.device_no = #{deviceNo},</if>
			       <if test="goodsStatus != null and goodsStatus !=''">s.goods_state = #{goodsStatus}</if>
			 where s.id = #{id} and <![CDATA[ s.unload_time< #{optTime,jdbcType=TIMESTAMP}]]>  
	</update>
	
	<!--查询卸车运单明细-->
	<select id="queryUnloadWayBillDetail" parameterType="HashMap" resultMap="foss.unload.unloadtaskquery.unloadWaybillDetailResultMap">
			<![CDATA[select w.id as id,
					       w.unload_task_id as unloadTaskId, 
					       w.bill_no as billNo,
					       w.waybill_no as waybillNo,
					       w.operation_goods_qty as operationGoodsQty,
					       w.scan_goods_qty as scanGoodsQty,
					       w.orig_org_code as origOrgCode,
					       w.dest_org_code as destOrgCode,
					       w.goods_name as goodsName,
					       w.pack as pack,
					       w.transport_type as transportType,
					       w.task_begin_time as taskBeginTime,
					       w.unload_weight_total as unloadWeightTotal,
					       w.unload_volume_total as unloadVolumeTotal,
					       w.unload_org_code as unloadOrgCode,
					       w.HANDOVER_GOODS_QTY as handOverPieces,
                           w.waybill_status as waybillStatus
					  from tfr.t_opt_unload_waybill_detail w ]]>
					 <where> 
					   <if test="billNo != null and billNo !=''">w.bill_no = #{billNo}</if>
					   <if test="unloadTaskId != null and unloadTaskId !=''">and w.unload_task_id = #{unloadTaskId}</if>
					   <if test="waybillNo != null and waybillNo !=''">and w.waybill_no = #{waybillNo}</if>
					   <if test="id != null and id !=''">and w.id = #{id}</if>
					   <![CDATA[and rownum <= 1]]>
					  </where>
					 <!--  for update wait 5 -->
					  
	</select>
	<!--查询卸车流水号明细-->
	<select id="queryUnloadSerialNoEntity" parameterType="HashMap" resultMap="unloadSerialNoDetailEntityResultMap">
			<![CDATA[select s.id as id,
				       s.unload_waybill_detail_id as unloadWaybillDetailId,
				       s.scan_state as scanStatus,
				       s.goods_state as goodsStatus,
				       s.unload_time as optTime,
				       s.device_no as deviceNo,
				       s.serial_no as serialNo,
				       s.task_begin_time as taskCreateTime,
				       s.unload_org_code as createOrgCode
				  from tfr.t_opt_unload_serialno s
				 where s.unload_waybill_detail_id = #{unloadWaybillDetailId}
				   and s.serial_no = #{serialNo}]]>
				  <!--  for update wait 5 -->
	</select>
	<!--根据卸车任务ID获取卸车任务创建人-->
	<select id="getLoaderParticipationByTaskId" parameterType="String" resultMap="loaderParticipationResultMap">
		<![CDATA[
			select *
			  from (select p.id            as id,
			               p.loader_name   as loaderName,
			               p.loader_code   as loaderCode,
			               p.load_org_code as loadOrgCode,
			               p.load_org_name as loadOrgName,
			               p.join_time     as joinTime,
			               p.leave_time    as leaveTime,
			               p.be_creator    as beCreator,
			               p.task_type     as taskType,
			               p.task_id       as taskId,
			               p.flag          as flag,
			               rownum          row_num
			          from tfr.t_opt_loader_participation p
			         where p.task_id = #{taskId}
			           and p.be_creator = 'Y')
			 where row_num = 1
		]]>
	</select>
	<!--删除更换标签-->
	<delete id="deleteChangeLabelGoodsEntity" parameterType="HashMap">
			<![CDATA[delete tfr.t_opt_changelabel_goods c]]>
					 <where> 
					 	<if test="billNo != null and billNo !=''">c.bill_no = #{billNo}</if>
					    and c.waybill_no = #{waybillNo}
					    and c.serial_no = #{serialNo}
					    and c.discover_tache = #{discoverTache}
					    and c.handle_status = #{handleStatus}
					    and c.org_code = #{orgCode}
					 </where> 
	</delete>
	<!--插入更换标签-->
	<insert id="insertChangeLabelGoodsEntity" parameterType="HashMap">
			insert into tfr.t_opt_changelabel_goods
			  (id,
			   bill_no,
			   waybill_no,
			   serial_no,
			   change_reason,
			   discover_time,
			   discover_tache,
			   handle_status,
			   org_name,
			   org_code)
			values
			  (
			  #{id,jdbcType=VARCHAR},
			  #{billNo,jdbcType=VARCHAR},
			  #{waybillNo,jdbcType=VARCHAR},
			  #{serialNo,jdbcType=VARCHAR},
			  #{changeReason,jdbcType=VARCHAR},
			  #{discoverTime,jdbcType=TIMESTAMP},
			  #{discoverTache,jdbcType=VARCHAR},
			  #{handleStatus,jdbcType=VARCHAR},
			  #{orgName,jdbcType=VARCHAR},
			  #{orgCode,jdbcType=VARCHAR}
			  )
	</insert>
	<insert id="insertUnloadBillDetails" parameterType="java.util.List" >
		begin 
		<foreach collection="list" item="item" separator=";">
			insert into tfr.T_OPT_UNLOAD_BILL_DETAIL
				  (ID,
				   UNLOAD_TASK_ID,
				   BILL_NO,
				   BILL_TYPE,
				   WEIGHT,
				   VOLUME,
				   WAYBILLTOTAL,
				   PIECES,
				   create_time,
				   modify_time)
				values(	
					#{item.id,jdbcType=VARCHAR},
				   	#{item.unloadTaskId,jdbcType=VARCHAR},
				   	#{item.billNo,jdbcType=VARCHAR},
				   	#{item.billType,jdbcType=VARCHAR},
				   	#{item.weight,jdbcType=DECIMAL},
				   	#{item.volume,jdbcType=DECIMAL},
				   	#{item.waybillTotal,jdbcType=DECIMAL},
				   	#{item.pieces,jdbcType=DECIMAL},
				   	#{item.createDate,jdbcType=TIMESTAMP},
				   	#{item.modifyDate,jdbcType=TIMESTAMP}
				)
		</foreach>
		;end;
	</insert>
	
	<!--查询包运单明细，去除重复运单号记录-->
	<select id="queryScanPackageDetails" resultMap="expressPackageDetailEntityResultMap" 
		parameterType="HashMap">
			select distinct
				  <!--  pd.id, -->
             	   pd.package_no,
             	   pd.waybill_no,
                   pd.trans_type_name,
                   pd.trans_type_code,
                   pd.billing_goods_qty,
                   pd.receive_org_name,
			       pd.reach_org_name,
			       pd.weight,
			       pd.volume,
			       pd.goods_name,
			       pd.goods_packaging,
			      <!--  pd.scan_state,
			       pd.scan_time, 
			       pd.goods_state,
			       pd.create_time,-->
			       pd.device_no
			  from tfr.t_opt_package_detail pd
			 <where> 
			   pd.package_no = #{packNo}
			   <![CDATA[and pd.goods_state <> 'CANCELED']]>
			 </where>
	</select>
	
	<!--查询包中某个运单的流水号-->
	<select id="queryPackageSerialNo" resultType="java.lang.String" 
		parameterType="HashMap">
			select pd.serial_no
			  from tfr.t_opt_package_detail pd
			 <where> 
			   pd.package_no = #{packageNo,jdbcType=VARCHAR}
			   and pd.waybill_no = #{waybillNo,jdbcType=VARCHAR}
			   <![CDATA[and pd.goods_state <> 'CANCELED']]>
			 </where>
	</select>
	<!--批量插入流水号-->
	<insert id="insertUnloadSerialNos" parameterType="java.util.List" >
		begin 
		<foreach collection="list" item="item" separator=";">
			insert into tfr.T_OPT_UNLOAD_SERIALNO
			  (ID,
			   UNLOAD_WAYBILL_DETAIL_ID,
			   SCAN_STATE,
			   GOODS_STATE,
			   UNLOAD_TIME,
			   CREATE_TIME,
			   DEVICE_NO,
			   DEVICE_ID,
			   SERIAL_NO,
			   TASK_BEGIN_TIME,
			   UNLOAD_ORG_CODE)
			values
				(#{item.id,jdbcType=VARCHAR},
				#{item.unloadWaybillDetailId,jdbcType=VARCHAR},
				#{item.scanStatus,jdbcType=VARCHAR},
				#{item.goodsStatus,jdbcType=VARCHAR},
				#{item.optTime,jdbcType=TIMESTAMP},
				#{item.createDate,jdbcType=TIMESTAMP},
				#{item.deviceNo,jdbcType=DECIMAL},
				#{item.deviceId,jdbcType=VARCHAR},
				#{item.serialNo,jdbcType=VARCHAR},
				SYSDATE,
				#{item.createOrgCode,jdbcType=VARCHAR})
		</foreach>
		;end;
	</insert>
	
	<!--查询卸车明细中是否对这包号进行扫描-->
	<select id="queryIsPackageScan" resultMap="foss.unload.unloadtaskquery.unloadWaybillDetailResultMap" 
		parameterType="HashMap">
			select d.id as id,
				  d.waybill_no as waybillNo
  			   from tfr.t_opt_unload_waybill_detail d
 			   where d.unload_task_id =#{taskid,jdbcType=VARCHAR}
       		     and d.package_no =#{packageNo,jdbcType=VARCHAR}
	</select>
	
	<!--更新包扫描运单明细-->
	<update id='updatePackageWayBillEntity' parameterType="HashMap">
		update tfr.t_opt_unload_waybill_detail w
		   set 
		   	   w.scan_goods_qty = #{scanGoodsQty,jdbcType=DECIMAL},
		   	   w.operation_goods_qty = #{operationGoodsQty,jdbcType=DECIMAL},
		       w.unload_weight_total = #{unloadWeightTotal,jdbcType=DECIMAL},
		       w.unload_volume_total =#{unloadVolumeTotal,jdbcType=DECIMAL},
		       w.modify_time =  #{modifyDate,jdbcType=TIMESTAMP}
		 where w.id = #{id,jdbcType=VARCHAR}
		     <![CDATA[and w.modify_time<=#{modifyDate,jdbcType=TIMESTAMP} ]]>
	</update>
	
	<!--查询包中某个运单明细，去除重复运单号记录-->
	<select id="queryPackageDetailsByWaybill" resultMap="expressPackageDetailEntityResultMap" 
		parameterType="HashMap">
			select distinct pd.id,
             	   pd.package_no,
             	   pd.waybill_no,
                   pd.trans_type_name,
                   pd.trans_type_code,
                   pd.billing_goods_qty,
                   pd.receive_org_name,
			       pd.reach_org_name,
			       pd.weight,
			       pd.volume,
			       pd.goods_name,
			       pd.goods_packaging,
			       pd.scan_state,
			       pd.scan_time,
			       pd.goods_state,
			       pd.create_time,
			       pd.device_no
			  from tfr.t_opt_package_detail pd
			 <where> 
			   pd.package_no = #{packageNo}
			   and pd.waybill_no = #{waybillNo}
			   <![CDATA[and pd.goods_state <> 'CANCELED']]>
			 </where>
	</select>
	
	<!--批量更新包中某个运单的流水号-->
	<update id='updateUnloadPackageSerialNo' parameterType="HashMap">
			update tfr.t_opt_unload_serialno s
			   set 
			   	   <if test="scanStatus != null and scanStatus !=''">s.scan_state = #{scanStatus},</if>
			       <if test="optTime != null and optTime !=''">s.unload_time = #{optTime,jdbcType=TIMESTAMP},</if>
			       <if test="deviceNo != null and deviceNo !=''">s.device_no = #{deviceNo},</if>
			       <if test="goodsStatus != null and goodsStatus !=''">s.goods_state = #{goodsStatus}</if>
			 where s.unload_waybill_detail_id= #{unloadWaybillDetailId} and <![CDATA[ s.unload_time< #{optTime,jdbcType=TIMESTAMP}]]>  
	</update>
	<!-- 插入卸车扫描相关信息到异步表 -->
	<insert id="insertUnloadAsyncMsg"  parameterType="java.util.List">
		begin 
		<foreach collection="list" item="item" separator=";">
		insert into tfr.t_opt_pdaunload_msg (
			id              ,
			task_no                      ,
			bill_no                      ,
			waybill_no                   ,
			serial_no                    ,
			OPERATOR_CODE                ,
			OPERATOR_NAME                ,
			ORG_CODE                     ,
			in_stock_type                ,
			create_time                  ,
			be_Package                   ,
			job_id                    
			) 
		values (
			#{item.id,jdbcType=VARCHAR},
			#{item.taskNo,jdbcType=VARCHAR},
			#{item.billNo,jdbcType=VARCHAR},
			#{item.wayBillNo,jdbcType=VARCHAR},
			#{item.serialNo,jdbcType=VARCHAR},
			#{item.operatorCode,jdbcType=VARCHAR},
			#{item.operatorName,jdbcType=VARCHAR},
			#{item.orgCode,jdbcType=VARCHAR},
			#{item.inStockType,jdbcType=VARCHAR},
			#{item.createTime,jdbcType=TIMESTAMP},
			#{item.bePackage,jdbcType=VARCHAR},
			#{item.jobId,jdbcType=VARCHAR}
			)
		</foreach>
		;end;
	</insert>
	
	<!--删除已经入库成功的运单信息  -->
	<delete id="deleteUnloadAsyncMsg" parameterType="java.lang.String" >
		delete  from tfr.t_opt_pdaunload_msg amg where amg.id=#{id,jdbcType=VARCHAR}
	</delete>
	<!-- 更新卸车运单入库表中的jobId -->
	<update id="upateUnloadMsgForJob" parameterType="HashMap">
		update  tfr.t_Opt_Pdaunload_Msg mg set mg.job_id=#{jobId,jdbcType=VARCHAR}
		  where  exists (
		          select waybill_no from tfr.t_Opt_Pdaunload_Msg mg1 
		          where mg1.job_id='N/A' and mg.waybill_no=mg1.waybill_no 
		          and  not exists 
		            (
		                SELECT mg2.waybill_no FROM TFR.t_Opt_Pdaunload_Msg mg2 
		                where mg2.waybill_no = mg1.waybill_no and mg2.job_id !='N/A'
		            )
		)
		 and rownum <![CDATA[ <= ]]> #{dataLimit}
	</update>
	<!-- 查询入库运单集合 -->
	<select id="queryInStockMsg" parameterType="java.lang.String" resultMap="InOutStockEntityResultMap">
		select
			id              		   id,
			waybill_no                 waybillNo,
			serial_no                  serialNo,
			OPERATOR_CODE              operatorCode,
			OPERATOR_NAME              operatorName,
			ORG_CODE                   orgCode,
			in_stock_type              inStockType,
			be_Package                 bePackage ,
			bill_no                    billNo,  
			job_Id					   jobId
		from tfr.t_opt_pdaunload_msg amg
		where 
		   amg.job_id = #{jobId,jdbcType=VARCHAR}
		   
		order by waybill_no,ORG_CODE,serial_no,create_time desc
	</select>
	<!-- 更新jobid -->
	<update id="updateUnloadAsyncBillJobId" parameterType ="com.deppon.foss.module.transfer.unload.api.shared.dto.PDAUnloadAsyncBillMsgDto">
		update  tfr.t_Opt_Pdaunload_Msg mg set mg.job_id = #{jobId,jdbcType=VARCHAR} where mg.id=#{id,jdbcType=VARCHAR}
	</update>
	<!-- 更新站位符 -->
	<update id="reSetUnloadInstockMsg" parameterType="HashMap">
	   update tfr.t_Opt_Pdaunload_Msg mg set mg.job_id =#{jobId,jdbcType=VARCHAR} where mg.job_id != 'N/A'
	</update>
	
<select id="querySCUnloadBillsByBillNo" parameterType="java.util.List" resultMap="unloadBillDetailDtoResultMap">	   		
    
   select
	    c.connection_bill_no as billNo,
	    'SCBILL' as billType,
	    c.ASSIGN_STATE as billState,
	    'SC_EXPRESS' as businessType,
	    c.weight_total as weight,
		c.volume_total as volume,
		c.goods_qty_total as pieces,
		c.waybill_qty_total as waybillTotal
  from tfr.t_opt_connectionbill c
  where 
    
        c.assign_state='UNASSIGN'
       and c.connectionbill_state != 90
       and  c.connection_bill_no in 
     <foreach collection = "list" open = "(" close = ")" item = "item" separator = "," > 
		         #{item} 
	 </foreach > 
</select>

<!--  
<update id = "updateSCArrivalTime"  parameterType="java.util.List">
     update tfr.t_opt_connectionbill c
       set c.arrive_date = systimestamp
    where c.connection_bill_no = #{billNo} 
      
</update>-->
	<!-- hwy 218427查询二程接驳卸货单据-->
	<select id="querySCbillUnloadDetail" parameterType="HashMap" resultMap="unloadGoodsSerialDetailDtoResultMap">
		 <![CDATA[
             select
         c.connection_bill_no as billNo,
         t.UNLOAD_ORG_CODE as origOrgCode,
         t.UNLOAD_ORG_CODE as destOrgCode,
         cd.waybill_no as wayBillNo,
         cd.be_valuable as isValue,
         cd.receive_org_name as receiveOrgName,
         w.receive_org_code as receiveOrgCode,
         w.customer_pickup_org_code as reachOrgCode,
         w.customer_pickup_org_name as reachOrgName,
         cd.handover_weight as weight,
         cd.handover_volume as volume,
         cd.handover_goods_qty as wayBillQty,
         w.goods_name as goodsName,
         ser.serial_no as serialNo,
         cd.transport_type as transportType,
         w.goods_package as packing,
         decode(w.pending_type,
                  'PDA_PENDING',
                  nvl2(rr.id, 'Y', 'N'),
                  decode(r.is_packed, 'N', 'Y', 'N')) as isUnPacking,
         NVL2(todo.waybill_no, 'Y', 'N') as isToDoList,
         NVL2(tc.id, 'Y', 'N') as beContraband,
         wd.OPERATION_GOODS_QTY as operateQty,
         nvl(sd.station_number, ob.station_number) as stationNumber
        
       from tfr.t_opt_unload_task t
         left join tfr.t_opt_unload_bill_detail td on t.id=td.unload_task_id
	     left join  tfr.t_opt_connectionbill c on td.bill_no=c.connection_bill_no  and c.connectionbill_state !=90
	     left join tfr.t_opt_connectionbill_detail cd on  cd.connectionbill_no=c.connection_bill_no
	     left join tfr.t_opt_connectionbill_serialno ser on ser.waybill_no=cd.waybill_no and ser.connectionbill_no=c.connection_bill_no
	     left join pkp.t_srv_waybill w on w.waybill_no=cd.waybill_no  and w.active='Y'
	     left join pkp.t_srv_wooden_requirements_pg rr on rr.waybill_no = cd.waybill_no and rr.active = 'Y'
	     left join tfr.t_opt_package_request_detail r on r.waybill_no = cd.waybill_no and r.serial_no = ser.serial_no
	     left join tfr.t_opt_contraband tc on tc.waybill_no = w.waybill_no  and tc.process_result <> 'NO_CONTRABAND'
	     left join (select wr.waybill_no, ld.serial_no, ld.handle_org_code
                 from pkp.t_srv_waybillrfc wr
                     inner join pkp.t_srv_labeledgood_todo ld
                     on ld.t_srv_waybill_rfc_id = wr.id) todo  on todo.waybill_no = cd.waybill_no and todo.serial_no =ser.serial_no
         left join tfr.t_opt_unload_waybill_detail wd on wd.waybill_no = cd.waybill_no       
                 and wd.UNLOAD_TASK_ID = t.id
                 and wd.OPERATION_GOODS_QTY >= 0
                 and wd.bill_no = cd.connectionbill_no
         left join bse.t_bas_sales_department sd on sd.code = w.customer_pickup_org_code and sd.active = 'Y'
		 left join bse.t_bas_outer_branch ob on ob.agent_dept_code = w.customer_pickup_org_code and ob.active = 'Y'
		 ]]>
         
         where 
         t.id=#{taskId}
         and      
		    c.connection_bill_no in
		       <foreach collection = "bills" open = "(" close = ")" item = "item" separator = ","
		         index = "index" > 
		         #{item.billNo} 
		       </foreach > 
    		
 	</select>
 	
 	<update id="updateSCbillUnloadState"  parameterType="java.util.Map" > 
 	    update
		   tfr.t_opt_connectionbill c
		set 
		   c.assign_state='UNLOADING',
		   c.connectionbill_state= 40,
		   c.arrival_operator = #{loaderCode},
		   c.arrive_date=systimestamp
		where
		   c.connection_bill_no
		   in 
        (
	        select bd.bill_no from tfr.t_opt_unload_task t 
			 left join tfr.t_opt_unload_bill_detail bd on bd.unload_task_id = t.id 
			 where t.unload_task_no = #{taskNo}
		 )
		and  c.connectionbill_state !=90
 	 </update>
 	 
 	<!-- 根据二程接驳卸车任务编号查询卸车任务  218427 hwy-->
	<select id="querySCUnloadTaskByTaskNo" parameterType="String" resultMap="foss.unload.unloadtaskquery.BaseResultMap">
			<![CDATA[select t.id as id,
				       t.unload_task_no as unloadTaskNo,
				       t.vehicle_no as vehicleNo,
				       t.platform_no as platformNo,
				       t.platform_id as platformId,
				       t.unload_start_time as unloadStartTime,
				       t.unload_end_time as unloadEndTime,
				       t.task_state as taskState,
				       'SC_EXPRESS' as unloadType,
				       t.unload_way as unloadWay,
				       t.unload_org_code as unloadOrgCode,
				       t.unload_org_name as unloadOrgName,
				       t.be_exception as beException,
				       t.exception_notes as exceptionNotes,
				       t.plan_complete_time as planCompleteTime,
				       t.BE_SCAN_INSTOCK as beScanInstock
				  from tfr.t_opt_unload_task t
				 where t.unload_task_no = #{taskNo}]]>
	</select>
	
	<!-- 根据运单号 查询到达营业网点Code 218427 hwy -->
	<select id="querySCUnloadOrgCode" parameterType="String" resultType="String">
	     select w.customer_pickup_org_code from pkp.t_srv_waybill w 
         where w.active = 'Y'
         and w.waybill_no=#{waybillNo,jdbcType=VARCHAR}
    </select>
    
    <!-- 通过运单号查询所有卸车流水信息(流水、时间) 311396 wwb -->
	<select id="queryUnloadSerialDetailByWaybillNo" parameterType="String" resultMap="unloadSerialDetailMap">
	    select s.serial_no,s.unload_time
	    from tfr.t_opt_unload_serialno s
		left join tfr.t_opt_unload_waybill_detail d on s.unload_waybill_detail_id = d.id
		where d.waybill_no = #{waybillNo,jdbcType=VARCHAR}
		<![CDATA[and s.GOODS_STATE <> 'CANCELED']]>
    </select>
</mapper>