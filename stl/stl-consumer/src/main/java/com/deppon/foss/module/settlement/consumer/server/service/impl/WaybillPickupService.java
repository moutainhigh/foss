/**
 * Copyright 2013 STL TEAM
 */
/*******************************************************************************
 * Copyright 2013 STL TEAM
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * PROJECT NAME	: stl-consumer
 * 
 * FILE PATH        	: src/main/java/com/deppon/foss/module/settlement/consumer/server/service/impl/WaybillPickupService.java
 * 
 * FILE NAME        	: WaybillPickupService.java
 * 
 * AUTHOR			: FOSS结算系统开发组
 * 
 * HOME PAGE		: http://www.deppon.com
 * 
 * COPYRIGHT		: Copyright (c) 2012  Deppon All Rights Reserved.
 * 
 * 
 * 修订记录 
 日期 	修订内容 	修订人员 	版本号 
 2012-04-27 	创建版 	黄小波	V0.1
 2012-06-19	新增相关业务用例、用例描叙、用例条件，操作步骤、业务规则、扩展步骤、数据元素、非功能性统计	李琴	V0.5
 2012-07-11	新增非现金小票应收单，修改业务用例、用例描叙、业务规则、扩展步骤、数据元素	李琴	V0.6
 2012-07-23	0.6版本改为0.9版本	李琴	V0.9
 2012-12-3	增加业务完结计数规则描述	黄小波	V1.2

 1.	SUC-17 生成应收单（接送货）
 1.1	相关业务用例
 BUC_FOSS_4.7.10.20_010自动生成_出发运费应收单
 BUC_FOSS_4.7.10.20_020自动生成_到付运费应收单
 BUC_FOSS_4.7.50.30_010自动生成_代收货款应收单
 BUC_FOSS_4.7.10.30_020小票收入-非现金小票
 1.2	用例描述
 1.司机接货后，客户在营业部、派送部、接货开单组进行开单提交运单后，调用此接口，根据客户选择的支付运费的欠款方式（临欠、月结）和客户是否在公司办理代收货款业务，而生成相应财务单据的应收单。将生成应收账款挂在相应的部门和客户名义下，并扣除客户可用信用额度，同时在收入部门确认收入；
 2.因业务原因需要开具小票单据，如用户派送改自提、客户开通会员收取的会员卡费，自己自提该派送增加的费用、仓储费、加收送货费、包装费、放空费、卖废品和其他费用等，如果客户有权限（可能月结或者临欠）非现金业务的小票时,调用此接口生成非现金小票应收单。
 3.偏线操作人员确认需要收取偏线代理费用开的小票，或者其他应收款开的小票单据调用接口生成小票应收单
 4.月结客户允许开欠款小票，生成对应的小票应收单；
 5.应收应付查询，参与系统用例报表《DP-FOSS-结算系统用例-应收应付查询-V0.1.xls》
 6.到付清单查询，参见系统用例报表《DP-FOSS-结算系统用例-到付款清查明细表-V0.1.xls》
 7、1、仅限来自原单据为运单的应收单，增加有效版本的应收单时，或有效版本的应收单未核销金额由0更新为非0时，增加业务计数；
 1.3	8、来源单据为运单的应收单，未核销金额由非0更改0时，对有效版本的应收进行红冲时减少业务完结计数；用例条件
 条件类型	描述	引用系统用例
 前置条件	1	始发欠款金额大于0
 2	到付运费大于0 
 3	代收货款大于0 
 4	存在小票非现金类（月结、临时欠款）单据	1.SUC-439-提交运单（接送货小组）
 2.SUC-2 -新增小票信息
 3.SU-74查询_管理客户应收账款
 4.SUC-741 查询/受理变更申请
 5.SUC-542 查询/审核变更申请
 后置条件	1.	有始发欠款生成始发应收单
 2.	有到付运费生成到付应收单
 3.	有代收货款生成代收货款应收单
 4.	小票提交成功，生成对应的小票应收单	
 1.4	操作用户角色
 操作用户	描述
 无	无
 1.5	界面要求
 1.5.1	表现方式
 接口
 1.5.2	界面原型
 无
 1.5.3	界面描述
 无
 1.6	操作步骤
 1.6.1	运单校验
 序号	基本步骤	相关数据	补充步骤
 1		检验传入的单号	运单或小票	1.根据传入的单号长度判断，是小票还是运单。
 2. 如果是运单，判读运单是否真实存在。规则参考SR1；不符合规则参考扩展事件1a
 3. 如果是小票，判断小票是否真实存在。规则参考SR1；不符合规则参考扩展事件1a
 2		校验传入的是运单或者小票有没有重复调用接口	运单或小票	1.校验传入运单和小票，对应的应收单编号是否存在重复。规则参考SR2，不符合规则参考扩展事件3a
 3		如果传入的是运单号校验运单的付款方式、金额的有效性	运单或小票	1.先检验运单的付款方式是否正确
 校验规则参考SR3；不符合规则参考扩展事件 4a
 2.先校验运单公开价运费、保价费总额是否等于总额，校验规则参考SR3，不符合规则，参见5a
 4		如果传入的小票单号，需要校验付款方式、金额有效性	小票	1.	先校验小票的付款方式是否正确和传入金额是否有效参见扩展步骤10a
 2.	校验小票的金额是否填入有无参见扩展步骤11a
 5		如果运单始发付款方式为月结	运单	1.校验运单客户是否有月结资格。业务规则参考SR4，不符合规则参考扩展事件6a；
 6		如果运单始发付款方式为月结、临时欠款，校验客户是否存在超期欠款	运单	1.校验客户是否存在超期欠款，引用用例（SU-74查询_管理客户应收账款），请参见业务规则参考SR5，不符合规则参考扩展事件7a；
 7		如果运单始发付款方式为月结、临时欠款时，校验客户的可用信用额度	运单	1.校验用户可用信用额度，规则参考SR6，不符合规则参考扩展事件7a；
 8		校验部门信息	运单	1.校验部门信息，业务规则参考SR7，不符合规则参考扩展事件8a；

 1.6.2	生成应收单
 序号	基本步骤	相关数据	补充步骤
 1		如果运单始发付款方式为临欠、月结，运费全额给始发部门，生成始发运费应收单、扣减客户可用信用额度	输入：运单
 输出：应收单	1、如果客户应收运费全额始发部门，根据欠款生成始发运费应收单，业务规则参考SR9；
 2、扣减客户可用信用额度，业务规则参考SR8
 2		如果运单的到付运费大于0时，生成到付运费应收单	输入：运单
 输出：应收单	1、	如果客户应收运费全部到付，生成到付应收单，业务规则参考SR10；
 2、	扣减客户可用信用额度，业务规则参考SR8
 3、	催款部门业务规则，参见SR15
 3		如果客户应收运费在始发部门支付部分，部分运费在到付时，生成始发运费、到付运费应收单	输入：运单
 输出：应收单	1.	始发部门生成始发运费应收单，业务规则参考SR11
 2.	到付运费所在到付部门生成到付运费应收单，业务规则参考SR12
 3.	扣减客户可用信用额度，业务规则参考SR8
 4.	催款部门业务规则，参见SR15
 4		如果运单的代收货款金额大于0时，生成代收货款应收单	输入：运单
 输出：应收单	1.	业务规则参考SR13；
 2.	催款部门业务规则，参见SR15
 5		如果传入的是小票	输入：小票
 输出：小票应收单	1.业务规则参考SR14
 6		如果运单的付款方式为“网上支付”，始发应收运费大于0，且到付运费等于0	输入：运单
 输出：应收单	1、根据客户应收运费全额生成始发应收单，欠款方式为“网上支付”，业务规则参考SR19
 7		如果运单的付款方式为“网上支付”，始发应收运费大于0，且到付运费大于0	输入：运单
 输出：应收单	1、参考业务规则SR11，及SR12

 序号	扩展事件	相关数据	备注
 1a		如果运单号不正确。
 异常消息	提示“运单号不正确！“，将获得校验的异常信息进行抛出，然后回滚相关操作；
 2a		如果小票单号不正确	异常消息	提示：“小票单号不正确！”，将获取的异常信息进行抛出，然后回滚相关操作；
 3a		如果存在重复调用。	异常消息	提示，“接口重复调用”将获得校验的异常信息进行抛出，然后回滚相关操作；
 4a		如果运单付款方式校验不通过。
 异常消息	提示“运单的付款方式校验不通过！”并异常信息进行抛出，然后回滚相关操作；
 5a		如果运单的金额，校验不通过。 	异常信息	提示“运单的金额填写错误！并异常信息进行抛出，然后回滚相关操作；“
 6a		如果返回结果存在没有月结资格。	异常消息	提示“该用户，没有月结资格”将获得校验的异常信息进行抛出，然后回滚相关操作；
 7a		如果返回结果存在超期欠款。
 异常消息	提示“编号为：用户存在超期欠款！”将获得校验的异常信息进行抛出，然后回滚相关操作；
 8a		如果客户的可用额度小于欠款金额。 
 异常消息	提示“客户可用额度欠款余额！”。将获得校验的异常信息进行抛出，然后回滚相关操作；
 9a		运单的部门、业务日期校验不通过。
 异常消息	提示“运单的部门和业务日期错误！”将获得校验的异常信息进行抛出，然后回滚相关操作；
 10a		如果小票付款方式校验不通过。	异常信息	提示“运单的付款方式校验不通过！”并异常信息进行抛出，然后回滚相关操作；
 11a		校验小票的金额，是否填写错误，是否大于0，输入是否超过两位小数		1.	提示“小票的金额，不能小于0填写错误！并异常信息进行抛出，然后回滚相关操作；“
 2.	提示，小票的金额输入错误，不能超过两位小数
 12a		如果付款付款方式为“网上支付”，且始发应收运费为0		3.	提示“付款方式为网上支付，始发应收运费不能为0”；

 1.7	业务规则
 序号	描述
 SR1		调用运单单号校验接口，判断单号是否符合运单单号或者小票规则是否真实存在，如果运单单号不符合规则并真实不存在，提示“单号不正确”，该操作结束；；
 SR2		1.将运单编码作为参数，查询作为来源运单编码查询应收单,判断是否存在对应的应收单个数是否大于1，存在则提示“该运单已经生成过相应的应收单，禁止重复调用”，该操作结束；
 2. 将小票编码作为参数，查询作为来源小票编码查询非现金应收单,判断是否存在对应的应收单个数是否大于1，存在则提示“该运单已经生成过非现金相关的应收单，禁止重复调用”，该操作结束；
 SR3		1、	如果运单的付款方式为到付，并且到付运费小于等于0时，提示“付款方式为到付，但是到付运费小于等于0”，该操作结束；
 2、	如果运单的付款方式为月结、临欠，并且预收金额（应收金额）小于等于0，提示“付款方式为临欠或月结，但是预收金额小于等于0“，该操作结束；
 3、	如果运单的付款方式为现付时，提示“付款方式为现付，不允许调用本接口”，该操作结束；如果付款方式为到付，预收金额必须等于0，否则提示“该运单的付款方式为到付，但预付金额不等于0”，该操作结束。
 如果运单的总运费不等于公开价运费运费、送货费、包装手续费、代收货款手续费、保价费、（其他费用-优惠费用）之和时，提示“总运费与运单明细之和不相等”，该操作结束；
 SR4		参见系统用例 SU-74查询_管理客户应收账款 判断客户是否存在月结资格，结果为false，则提示“该客户为非月结客户，不可以月结” 该操作结束
 SR5		参见系统用例 SU-74查询_管理客户应收账款，判断客户是否存在超期如果的结果为true，则提示“该客户存在超期欠款的业务，不可以继续欠款”，该操作结束；
 SR6		根据运单的发货客户编码，SU-74查询_管理客户应收账款,获得客户的可用额度；
 1、如果可用额度大于0，则将可用额度与预付金额进行比较，如果可用额度小于预付款金额时，抛出异常“该客户的可用额度不够，不可以继续欠款”，该操作结束；
 2、如果可用额度小于等于0，提示“该客户的可用额度小于等于0，不允许欠款”，该操作结束；
 SR7		1、运单的收货部门、接货部门、到达部门、录入部门其中一项为空时，提示“部门信息不完整”，该操作结束；
 SR8		1、参见系统用例 SU-74查询_管理客户应收账款,传递客户编码，应收单处理类型、生成、欠款金额调用接口扣减客户信用额度；
 SR9		1、	到付运费为0，始发应收等于应收总额，生成始发应收单
 应收总额：运单的预收总额；
 已收金额:0;
 未收金额：运单的预收总额；
 付款方式：运单的付款方式；
 结算客户：运单发货客户； 
 业务日期：运单的收货日期
 记账日期：服务器当前日期
 确认收入日期：空
 公布价运费：运单的运费；
 送货费：运单的送货费；
 包装手续费;运单的包装手续费；
 代收货款手续费：运单的代收货款手续费；
 保价费：运单的保价费；
 其他费用：运单的其他费用之和；
 优惠费用：优惠费用
 应收部门：运单的收货部门;
 收入部门：运单的收货部门；
 催款部门：始发部门；
 确定收入日期:签收日期；
 SR10		1、	到付运费大于0 并且到付款>大于代收货款，预付金额等于 0，生成到付运费应收单
 应收总额：运单的到付总额 – 代收货款；
 已收金额:0;
 未收金额：运单的到付总额 – 代收货款金额；
 付款方式：到付；
 结算客户：到付客户 
 业务日期：运单的收货日期
 记账日期：服务器当前日期
 确认收入日期：空；
 总运费：总运费
 公布价运费：运单的运费；
 送货费：运单的送货费；
 包装手续费;运单的包装手续费；
 代收货款手续费：运单的代收货款手续费；
 保价费：运单的保价费；
 其他费用：运单的其他费用之和；
 优惠费用：优惠费用
 应收部门：运单的到达部门;
 收入部门：运单的收货部门；
 催款部门：到达部门；
 确定收入日期:签收日期；
 SR11		1、	预付金额大于0并且（到付总额-代收货款） 大于0，部分付款，即部分始发欠款，对始发应收部分进行拆分，生成始发应收单；
 应收总额：预付金额；
 应收已收金额:0;
 应收未收金额：预付金额
 应收付款方式：运费付款方式；
 结算客户：运单发货客户； 
 业务日期：运单的开单收货日期
 记账日期：服务器当前日期
 总运费：总运费
 运费：运单的运费 × （运单的预付总额/（总运费））；
 送货费：运单的送货费 × （运单的预付总额/（总运费））；
 包装手续费;运单的包装手续费 × （运单的预付总额/（总运费））；
 代收货款手续费：运单的代收货款手续费 × （运单的预付总额/（总运费））；
 保价费：运单的保价费 × （运单的预付总额/（总运费））；
 其他费用：运单的预付总额 –运费 – 送货费 – 包装手续费 – 代收货款手续费 – 保价费
 优惠费用：优惠费用
 收入部门：运单的收货部门；
 催款部门：始发部门；
 确定收入日期:签收日期
 SR12		1、	预付金额大于0并且到付运费大于0（部分到付），对到达应收运费部分进行拆分，生成到付运费应收单
 应收总额：运单的预付总额；
 应收已收金额:0;
 应收未收金额：运单的预付总额；
 应收付款方式：运单的付款方式；
 结算客户：到付客户； 
 业务日期：运单的开单收货日期
 记账日期：服务器当前日期
 应收运费（到达运费）：总运费-（预付运费+代收货款）或者到付金额-代收货款；
 应收送货费：运单的送货费 –始发送货费；
 应收包装手续费;运单的包装手续费 -始发包装手续费；
 应收代收货款手续费：运单的代收货款手续费 –始发代收货款手续费；
 应收保价费：运单的保价费–始发保价费；
 应收其他费用：运单的其他费用-始发其他费用；
 优惠费用：优惠费用
 应收部门：运单的到达部门；
 收入部门：运单的收货部门
 催款部门：到达部门；
 确定收入日期:签收日期；
 SR13		1、	代收货款大于0，生成代收货款应收单；
 应收总额：代收货款金额；
 应收已收金额:0;
 应收未收金额：代收货款金额；
 应收付款方式：到付； 
 结算客户：到付客户； 
 业务日期：运单的开单收货日期
 记账日期：服务器当前日期
 确认收入日期：空
 运费：0；
 送货费：0；
 包装手续费;0；
 代收货款手续费：0；
 保价费：0；
 其他费用：0；
 优惠费用：优惠费用
 应收部门：运单的到达部门;
 收入部门：空；
 催款部门：到达部门
 SR14		1、	小票单号：单据上小票的编码
 2、	收入公司：开票所属公司
 3、	客户名称：客户名称
 4、	付款方式：月结
 5、	收入部门：收入部门
 6、	收入金额：小票金额
 7、	收款类型：小票的收费来源
 8、	运单号：如果关联运单，填写运单号
 SR15		从Foss综合去动态读取，Foss维护异地调货的客户名称，以及催款部门编码。

 1.8	数据元素
 1.8.1	运单信息（输入）

 收入部门编号	系统提供	数字		20	否	
 收入部门名称	收货部门	文本		50	是	
 到达部门编号	系统提供	数字		15	是	
 到达部门名称	到达部门名称	文本		30	是	
 运单单号	运单单号	数字型		10	否	
 应收单号	应收单号	数字类型		10	否	
 小票单号	小票单号	数字		8	否	
 支付方式	客户的付款方式	枚举		44	是	临欠、月结、网上支付
 派送方式	运单的派送方式	枚举		10	是	
 客户编码	发货客户编码	数字		20	是	
 客户名称	发货客户名称	文本		30	是	
 产品类型	产品类型	枚举		44	是	精准汽运（长途）\精准卡航\ 精准汽运（短途）\精准城运\ 汽运偏线 \精准空运
 预付金额	始发已付运费金额	数字		10，2	是	
 到付金额	由到达部门收取的运费金额	数字		10，2	是	
 代收货款金额	代收货款金额	数字		10，2	是	
 公布价运费	运费	数字		10，2	是	
 优惠费用	给客户的优惠，包含打折优惠券等	数字		10，2	是	
 送货费	送货费	数字		10，2	是	
 包装手续费	包装手续费	数字		10，2	是	
 增值服务费	增值服务费	数字		10,2	是	
 代收货款手续费	代收款手续费	数字		10，2	是	
 保价费	保价费	数字		10，2	是	
 其他费用	其他费用之和	数字		10，2	是	
 业务日期	运单的开单日期	日期		8	是	
 录入部门编码	运单录入部门	数字		44	是	
 录入部门名称	运单录入部门名称	字符		200	是	
 录入人	运单录入人名称	字符		44	是	
 单据来源	来源运单，来源小票	字符		44	是	
 记账日期	记账日期	日期		10	是	


 1.8.2	非现金小票应收单（输入）
 字段名称 	说明 	输入限制	输入项提示文本	长度	是否必填	备注
 小票单号	小票单号	数字型字符		8	是	无
 收入部门名称	部门名称	字符		20	是	无
 收入部门编码	部门所属子公司名称	字符		20	是	无
 运单单号	运单号	数字型字符		8	是	无
 客户编号	客户编号	数字型字符		20	是	无
 客户名称	客户名称	字符		50	是	无
 客户类型	客户，代理	数字		10		1.代表客户
 2.代表代理
 收款方式	付款方式	字符		20	是	无
 收款部门编码	收款部门编码	字符		20		无
 收款部门	收款部门	字符		50		无
 收入类别	收入类型	字符		15	是	无
 金额	应收金额	数字		10	是	金额为大于0 的整数
 录入人员	录入人姓名	字符		10	是	无
 录入时间	录入时间	日期		10	是	无
 录入部门	录入部门	字符		20	是	无
 创建时间	创建时间	日期		10	是	无
 更新时间	更新时间	日期		10	是	无
 来源单据类型	来源小票	数字		1	是	1.	代表运单
 2.	代表小票
 收款类别	小票的收款类别					3.	仓储费、接货费、送货费、废品、开票税金、返货费
 记账日期	记账日期	日期		10	是	无
 收款事项	收款来源、营业员、偏线操作员、收银员					1.	收款来源、营业员、偏线操作员、收银员

 1.8.3	应收单信息（输出）
 字段名称 	说明 (来源)	输出限制（类型，限制）	长度	是否必填	备注
 应收单号	系统产生	数字	20	是	
 运单单号	运单单号	数字	20	是	目前8位
 收入部门编码	收入部门编码	数字	20	是	
 收入部门名称	收入部门名称	字符	50	是	冗余字段
 催款部门编码	催款部门编码	数字	20	是	
 催款部门名称	催款部门名称	字符	50	是	从Foss综合去动态读取，Foss维护异地调货的客户名称，以及催款部门编码。
 到达部门编码	送货部门编码	数字	20	是	
 到达部门名称	送货部门名称	字符	50	是	
 支付方式	运单的付款方式	枚举	44	是	临欠、月结、网上支付
 客户编码	客户编码	数字	20	是	
 客户名称	发货客户名称	文本	20	是	
 产品类型	运单的产品类型	枚举	44	是	
 总运费	总运费	数字	10，2	是	参考核算规则
 已收款金额	已收款金额	数字	10,2	是	起始 0
 未收款金额	未收款金额	数字	10,2	是	
 公布价运费	运费	数字	10，2	是	参考核算规则
 送货费	送货费	数字	10，2	是	参考核算规则
 包装手续费	包装手续费	数字	10，2	是	参考核算规则
 代收货款手续费	代收货款手续费	数字	10，2	是	参考核算规则
 保价费	保价费	数字	10，2	是	参考核算规则
 其他费用	其他费用	数字	10，2	是	参考核算规则
 增值费用	增值费用	数字	10,2	是	
 优惠费用	优惠费用	数字	10,2	是	
 业务日期	运单的开单时间	日期	8	是	
 记账日期	记账日期	日期	8	是	
 版本号	版本号	整数	4	是	起始值1
 是否有效	应收单是否有效	布尔	1	是	默认值true，可简写T
 是否作废	当货物仍在收货部门仓库，若客户不发货或者发货人信息错误，需要作废运单	布尔	1	是	默认值false，可简写F
 是否红冲	当作废运单时，需要产生一条对应的红单，红冲生成的应收单	布尔	1	是	默认值false，可简写F
 是否初始化	初始化	布尔	1	是	默认值false 简写 F
 录入人	运单开单人	文本	44	是	
 录入部门	录入部门	字符	50	是	
 录入时间	当前系统服务器时间	日期	10	是	
 签收时间	运单签收时间	日期	10	是	
 来源单据编号	来源单据编号	数字	44	是	
 来源单据类别	来源运单、网上订单、来源小票	枚举	44	是	
 单据生成方式	人工录入、系统生成	枚举	44	是	
 单据创建日期	单据生成日期	日期	10	是	
 单据更新日期	单据更新日期	日期	10	是	

 1.8.4	非现金小票（输出）
 字段名称 	说明 	输入限制	输入项提示文本	长度	是否必填	备注
 部门名称	部门名称	字符		20	是	无
 所属子公司名称	部门所属子公司名称	字符		20	是	无
 客户名称	客户名称	字符		50	是	无
 客户编号	客户编号	编码		20	是	无
 小票编号	小票单号	编码		20	是	无
 金额	应收金额	数字		10	是	小票应收金额
 付款方式	付款方式	字符		  15	是	无
 版本号	小票对应的版本号	数字		10	是	无
 是否有效	标记该应收单是否有效	字符		10	是	无
 是否红单	标记该条应收单是否是红冲单据	字符		10	是	无
 是否初始化	标志该条应收单记录是否初始化	字符		10	是	无
 录入人员	制单人名称	字符		20	是	无
 录入时间	录入时间	日期		6	是	无
 单据子类型	单据对应子类型	字符		30	是	无
 业务日期	应收单发生的业务日期	日期		6	是	无
 记账日期	小票应收单的会计日期	日期		6	是	无
 录入人	单据制作人	字符		30	是	无
 录入日期	制单日期	日期		6	是	无
 产品类型	单据所对应货物的产品类型	字符		30	是	无
 创建时间	创建时间	日期		10	是	无
 更新时间	更新时间	日期		10	是	无
 来源单据类型	1.来源运单2.来源小票	数字		1	是	无
 收款类别	小票的收款类别			1	是	仓储费、接货费、送货费、废品、开票税金、返货费
 收款事项	收款来源、营业员、偏线操作员、收银员			20	是	收款来源、营业员、偏线操作员、收银员
 来源单据类别	来源运单、网上订单、来源小票	枚举	44	是		

 1.9	非功能性需求
 使用量	1.全网每月产生的应收单总量，截止到今年三月份2400238笔/月，部门最大使用量 52310/月，预计每年以60%速度增长  。
 2.小票的2000票/天
 2012年全网估计用户数	无
 响应要求（如果与全系统要求 不一致的话）	开单后异步生成，开单后响应5秒内响应
 使用时间段	00：00-24：00
 高峰使用时间段	14：00-18：00



 1.10	接口描述：
 接口名称 	对方系统（外部系统或内部其他模块）	接口描述
 无	无	无


 修订记录 
 日期 	修订内容 	修订人员 	版本号 
 2012-04-21 	创建版本	黄小波	V0.1
 2012-06-19	修改用例描叙，增加引用接送货系统用例条件，添加操作步骤，扩充步骤，数据元素，非功能性需求等	李琴	V0.5
 2012-07-11	修改  添加小票生成规则，数据元素等	李琴	V0.6
 2012-07-23	0.6版本改为0.9版本	李琴	V0.9
 2012-09-14	0.9版本存在文字描叙的错误	李琴	V1.0
 2012-10-12	1、SR3中提到"小票的预付金额大于0"，但小票界面的付款方式是选择的，没有预付金额这个字段，需要修改规则为："小票的付款方式为预付"
 2、设计上没有交账部门，那个收款就由那个部门缴款，故删除	李琴	V1.0

 1.	SUC-10生成现金收款单（接货开单）
 1.1	相关业务用例
 BUC_FOSS_4.7.10.10_010  现金与刷卡-接货开单
 BUC_FOSS_4.7.10.30_010  小票收入
 1.2	用例描述
 1.司机接到客户货物后或者客户直接在营业部、派送部（送货给客户时，客户要求发货，目前货量比较少）、接货开单查询组进行系统开单，并收取客户运输服务费，如果客户付款方式是现金（现金或者银行卡），在运单提交时调用此接口，生成财务单据现金收款单，以便后续统计进入财务报表；
 2.作为运单的补充的其它营业外收入，主要是营业部、派送部开的以现金（银行卡和现金）的小票单据,调用 此接口生成财务单据小票应收单。以便后续统计进入财务报表；
 3.查询现金收银报表，参见系统用例报表《DP-FOSS-结算系统用例-现金收入报表-V0.1.xls》
 1.3	用例条件
 条件类型	描述	引用系统用例
 前置条件	1	传入运单号，付款方式为现金或银行卡并且预付金额大于0。
 2	传入小票单号，付款方式为现金或者银行卡，并且金额大于0
 1.SUC-439-提交运单（接送货小组）
 2.SUC-17 生成应收单（接送货）
 3.SUC-2 -新增小票信息
 4.SUC-741查询/受理变更申请
 5.SUC-542 查询/审核变更申请
 后置条件	1.	生成现金收款单	
 1.4	操作用户角色
 操作用户	描述
 无	无
 1.5	界面要求
 1.5.1	表现方式
 接口
 1.5.2	界面原型
 无
 1.5.3	界面描述
 无
 1.6	操作步骤
 1.6.1	校验参数
 序号	基本步骤	相关数据	补充步骤
 1		校验单号是否正确	运单或小票	1.	检验传入单号，根据单据类型和长度，判读是运单还是小票号
 2.	如果是运单，校验运单单号是否真实存在有效， 扩展事件1a
 3.	如果是小票，校验小票，校验小票是否真实存在,扩展事件请参考1a
 2		校验是否重复调用接口	运单或小票	1.根据传入是运单还是小票，校验运单号和小票号对应是否重复生成现金收款单，参见扩展步骤2a。
 3		获取运单或者小票付款方式	运单或小票	1.先验证运单或者小票是否作废，参见-扩展步骤3a。
 2.校验运单付款方式是否正确，参考-扩展步骤4a。
 4		校验金额类字段是否正确	运单或小票	1.	如果是运单校验运金额单个字段有效性，参见扩展步骤5a。
 2.	如果是运单校验运单金额等内部数据有效性，参见扩展步骤6a。
 3.	如果是小票，校验小票的金额字段是否有效5a。
 5		校验发货客户编号和姓名	运单或小票	1.用户编码和姓名不能为空 7a
 6		校验产品类型有效性	运单或小票	1.	校验产品运输类型不能为空，如果不是，参见扩展步骤8a
 2.	产品类型为精准汽运（长途）、精准卡航、精准汽运（短途）、精准城运、 汽运偏线 、精准空运中一中。如果不是参见扩展步骤9a

 1.6.2	生成现金收款单

 序号	基本步骤	相关数据	补充步骤
 7		如果客户选择全额现金现付	输入：开单后，调用接口时传入参数，信息来源运单或小票
 输出：现金收款单	如果客户全额现付，参考业务规则SR1

 8		如果客户部分现付（到付大于0）	输入：开单后，调用接口时传入参数，信息来源运单
 输出：现金收款单	如果客户部分现付，业务规则参见SR2
 9		生成现金收款单		1.	根据单据类型来源运单或者来源小票生成对应的现金收款单



 序号	扩展事件	相关数据	备注
 1a		根据输入的运单和小票单号，调用运单校验接口，校验运单号是否存在。如果不存在。	异常消息	1．	如果传入是运单号，提示：“输入运单号不存在，不能继续执行操作！”操作终止。参考业务规则SR4
 2．	如果传入的是小票单据，提示“输入小票单号不存在，不能继续执行操作！” 操作终止。参考业务规则SR4
 2a		如果出入运单和小票编号对应的现金收款单编号，存在重复调用	异常消息	提示：“现金收款单，已经存在不能重复生成！操作终止“参考业务规则SR4
 3a		运单和小票记录是不是作废。	异常消息	1．	如果运单已经作废，提示：“该运单已经被作废，不能继续执行操作！” 参考业务规则SR4
 2．	如果小票已经作废，提示:“该运单已经被作废，不能继续执行操作！” 参考业务规则SR4
 4a		运单始发付款方式不是现金和银行卡（非临欠或者月结）。	异常消息	提示:“运单和小票的付款方式不正确，付款方式必须为现金或银行卡，不能继续执行相关操作” 参考业务规则SR4
 5a		小票的金额有效性	异常消息	判断小票金额是否为大于0等，不合法，提示:“小票的金额不正确”
 6a		校验运单金额，预付、到付、公布价运费、送货费、包装费、代收货款手续费、保价费，其它费用，优惠费用单个字段的有效性，其中任意一项为空或者小于0.	异常消息	提示“运单部分字段金额不正确，不能继续操作”操作终止。参考业务规则SR4
 7a		校验运单内部金额是否正确。如果运单的（预付+到付-代收货款）不等于（公布价运费、送货费、包装费、代收货款手续费、保价费、（其他费用-优惠费用）之和时	异常消息	提示“明细之和不等于总运费，不能继续操作”，该操作结束；参考业务规则SR4
 8a		产品运输类型不能为空	异常信息	提示：“产品运输类型不能为空！”
 9a		产品类型是否有效	异常信息	提示：“产品类型不正确”，生成操作，提示异常！

 1.7	业务规则
 序号	描述
 SR1		a)	如果运单的到付金额等于0，执行下列转换规则
 b)	现金收款单 ： 运单
 c)	现金总额：预付金额
 d)	公布价运费： 公布价运费；
 e)	送货费：送货费
 f)	包装手续费：包装手续费
 g)	代收货款手续费：代收货款手续费
 h)	保价费：保价费
 i)	其他费用：其它费用之和
 j)	收入部门：收货部门
 k)	收款客户：运单的发货客户
 SR2		a)	如果运单的到付金额大于0，并且预付金额大于0 ，执行下列转换规则
 b)	现金收款单 运单 
 c)	现金总额：运单预付金额
 d)	公布价运费：运单公布价运费 × (现付/（总运费））；
 e)	送货费：运单送货费  ×  (现付/（总运费））；
 f)	包装手续费：运单包装手续费  ×(现付/（总运费））；
 g)	代收货款手续费：运单代收货款手续费  × (现付/（总运费））；
 h)	保价费：运单保价费  ×  (现付/（总运费））；
 i)	其他费用：运单预付运费金额-公布价运费-送货费-运单包装手续费-代收货款手续费-保价费；
 j)	收入部门：运单的收货部门
 m)收款客户：运单的发货客户

 SR3		a)	如果小票的付款方式为预付，小票的支付现金金额大于0，执行以下转换规则
 b)	现金收款单：小票
 c)	现金总额：收入金额
 d)	收入公司：小票收入公司
 e)	收入部门：收入部门
 f)	收入人：收银员名称
 g)	收银时间：收银时间
 h)	收款类别：收银员、小票操作员 
 i)	收款事项：进仓费、放空费
 SR4	如果接口在执行过程中遇到异常信息，将异常信息抛出，然后对操作进行回滚。

 1.8	数据元素
 1.8.1	运单信息（输入）
 字段名称 	说明 (来源)	输入限制	提示信息	长度	是否必填	备注
 收入部门	收货部门	外键	无	44	是	
 收入公司	收货部门所属公司	外键	无	44	是	
 运单单号	开单运单单号	数字型字符	无	10	是	目前为8位
 收款方式	运单的付款方式	枚举	无	44	是	现金、银行卡
 派送方式	运单的派送方式	枚举	无	44	是	自提\送货上门
 客户编码	开单发货的客户编码	字符串	无	20	是	
 客户名称	开单发货的客户名称	字符串	无	200	是	
 产品类型	产品类型	枚举	无	44	是	精准汽运（长途）\精准卡航\ 精准汽运（短途）\精准城运\ 汽运偏线 \精准空运
 总运费	运单总运费	数字	无	10，2	是	
 公布价运费	运费	数字	无	10，2	是	
 送货费	送货费	数字	无	10，2	是	
 包装费	运单包装手续费	数字	无	10，2	是	
 代收货款手续费	运单代收收款手续费	数字	无	10，2	是	
 保价费	运单保价费	数字	无	10，2	是	
 其他费用	运单其它费用之和	数字	无	10，2	是	
 增值服务费	送货费+包装费+保价费+代收手续费+其他费用和	数字	无	10,2	是	
 优惠费率	优惠总合计，包括折扣、优惠券之类					
 预付金额	运单的预付金额	数字	无	10,2	是	
 到付金额	运单的到付金额	数字	无	10,2	是	
 业务日期	运单的开单时间	日期	无	8	是	
 到达部门编号	到达部门编号	文本	无	20	是	
 到达部门名称	到达部门名称	文本	无	50	是	
 录入部门编码	运单开单部门	外键	无	44	是	
 录入部门名称	运单开单名称	字符	无	200	是	
 录入人	运单录入人	外键	无	44	是	
 来源单据类型	现金收款单	字符	无	20	是	1．来源运单、2。来源小票
 记账日期	记账日期	日期	无	10	是	
 收银日期	收银日期	日期	无	10	是	
 确定收入日期	确定收入日期	日期	无	10	否	

 1.8.2	小票信息（输入）
 字段名称 	说明 	输入限制	输入项提示文本	长度	是否必填	备注
 小票单号	小票单号	数字型字符		8	是	无
 收入部门名称	部门名称	字符		20	是	无
 收入部门编码	部门所属子公司名称	字符		20	是	无
 运单单号	运单号	数字型字符		8	是	无
 客户编号	客户编号	数字型字符		20	是	无
 客户名称	客户名称	字符		50	是	无
 客户类型	客户，代理	数字		10		1.代表客户
 2.代表代理
 收款方式	付款方式	字符		20	是	无
 收款部门编码	收款部门编码	字符		20		无
 收款部门	收款部门	字符		50		无
 收入类别	收入类型	字符		15	是	无
 金额	应付金额	数字		10	是	金额为大于0 的整数
 录入人员	录入人姓名	字符		10	是	无
 录入时间	录入时间	日期		10	是	无
 录入部门	录入部门	字符		20	是	无
 创建时间	创建时间	日期		10	是	无
 更新时间	更新时间	日期		10	是	无
 记账日期	记账日期	日期		10	是	无
 来源单据类型	来源小票	数字		1	是	1.	代表运单
 2.	代表运单

 1.8.3	现金收款单信息（运单输出）
 字段名称 	说明 (来源)	输入限制	提示信息	长度	是否必填	备注
 现金收款单号	系统生成	字符	无	20	是	
 收入部门编码	收入部门编码	外键	无	44	是	
 收入部门名称	收入部门名称	字符	无	100	是	
 运单单号	运单单号	数字型字符	无	10	是	
 收款方式	运单的始发付款方式	枚举	无	44	是	现金、银行卡
 客户编码	运单客户编号	字符	无	200	是	
 客户名称	运单客户名称	字符	无	200	是	
 产品类型	运单的产品类型	枚举	无	44	是	精准汽运（长途）\精准卡航\ 精准汽运（短途）\精准城运\ 汽运偏线 \精准空运
 总运费	运单的预付金额	数字	无	10，2	是	
 公布价运费	运费	数字	无	10，2	是	
 送货费	送货费	数字	无	10，2	是	
 包装手续费	包装手续费	数字	无	10，2	是	
 代收货款手续费	代收货款手续费	数字	无	10，2	是	
 保价费	保价费	数字	无	10，2	是	
 其他费用	其他费用	数字	无	10，2	是	
 优惠费用	优惠费用	数字	无	10,2	是	
 业务日期	运单的开单时间	日期	无	8	是	
 单据状态	提交	枚举	无	44	是	
 版本号	版本号	整数	无	4	是	版本为1
 是否有效	是否有效	布尔	无	1	是	版本标记，默认为true
 是否作废	现金收款单是否作废	布尔	无	1	是	默认为false
 是否红冲	是否做过红冲	布尔	无	1	是	是否为红冲单，默认为false
 是否初始化	是否初始化	布尔	无	1	是	
 到达部门编号	到达部门编号	文本	无	20	是	
 到达部门名称	到达部门名称	文本	无	40	是	
 录入部门编号	运单录入部门编号	外键	无	44	是	
 录入部门名称	运单录入部门名称	字符	无	200	是	
 录入人名称	运单开单人名称	字符	无	44	是	
 录入日期	当前服务器时间	日期	无	8	是	
 来源单据编码	来源单据编码	数字	无	44	是	
 收银日期	收银确认操作日期	日期	无	11	否	
 来源单据类别	来源运单，网上订单	枚举	无	44	是	
 确定收入日期	运单签收日期	日期	无	10	是	
 来源单据类型	1.来源运单	数字	无	44	是	
 创建日期	创建日期	日期	无	10	是	
 更新日期	更新日期	日期	无	10	是	
 记账日期	记账日期	日期	无	10	是	

 1.8.4	现金收款单（小票输出）
 字段名称 	说明 	输入限制	输入项提示文本	长度	是否必填	备注
 部门名称	部门名称	字符		20	是	无
 所属子公司名称	部门所属子公司名称	字符		20	是	无
 客户名称	客户名称	字符		50	是	无
 客户编号	客户编号	编码		20	是	无
 小票编号	小票单号	编码		20	是	无
 金额	应收金额	数字		10	是	小票应收金额
 付款方式	付款方式	字符		  15	是	无
 版本号	小票对应的版本号	数字		10	是	无
 是否有效	标记该应收单是否有效	字符		10	是	无
 是否红单	标记该条应收单是否是红冲单据	字符		10	是	无
 是否初始化	标志该条应收单记录是否初始化	字符		10	是	无
 录入人员	制单人名称	字符		20	是	无
 录入时间	录入时间	日期		6	是	无
 单据子类型	单据对应子类型	字符		30	是	无
 业务日期	应收单发生的业务日期	日期		6	是	无
 记账日期	小票应收单的会计日期	日期		6	是	无
 录入人	单据制作人	字符		30	是	无
 录入日期	制单日期	日期		6	是	无
 产品类型	单据所对应货物的产品类型	字符		30	是	无
 创建时间	创建时间	日期		10	是	无
 更新时间	更新时间	日期		10	是	无
 来源单据类型	1.来源运单2.来源小票	数字		1	是	无

 1.9	非功能性需求
 使用量	现在处理的运单约为80000单/天
 2012年全网估计用户数	10000人
 响应要求（如果与全系统要求 不一致的话）	异步请求生成，可以再5秒之内响应
 使用时间段	7×24小时
 高峰使用时间段	全天

 1.10	接口描述：
 接口名称 	对方系统（外部系统或内部其他模块）	接口描述
 无	无	无

 修订记录 
 日期 	修订内容 	修订人员 	版本号 
 2012-04-26 	创建版本	黄小波	V0.1
 2012-07-20	添加相关业务用例、用例描叙、用例条件、操作步骤、业务规则、数据元素	李琴	V0.5
 2012-07-23	0.5变更为0.9	李琴	V0.9
 2012-10-17
 修改SR3相关描述。
 保轶
 V1.01

 2012-12-13	如果偏线外发单已经做了中转处理，则该外发单不再限制运单变更。
 保轶	V1.11
 2013-02-03	仓储费保管费	保轶	V1.11

 1.	SUC-14-红冲现金收款单
 1.1	相关业务用例
 BUC_FOSS_4.7.10.10_020 现金与刷卡-红冲现金收款单
 BUC_FOSS_4.7.70.10_010  （变更运单）
 BUC_FOSS_4.7.10.30_030   红冲小票
 1.2	用例描述
 1.营业部、派送部、接货开单查询组营业员已经完成系统开单，客户要求放弃服务停止发货，或者营业部、派送部、接货开单查询组检查发现金额相关信息错误收银员需要修改纠正错误现金单据信息
 2. 营业部在检查小票单据时发现小票数据信息与实际情况不一致，需要对其进行红冲，由营业部经理对小票进行作废处理
 1.3	用例条件
 条件类型	描述	引用系统用例
 前置条件	1.	运单存在对应的现金收款单；
 2.	小票存在对应的现金收款单
 3.	不存在未受理的更改单	1.	SUC-543 作废运单
 2.	SUC-542 查询/审核变更申请
 3.	SUC-513中止运单
 后置条件	1.红冲开单时生成的现金收款单	
 1.4	操作用户角色
 操作用户	描述
 无	无
 1.5	界面要求
 1.5.1	表现方式
 接口
 1.5.2	界面原型
 无
 1.5.3	界面描述
 无
 1.6	操作步骤
 1.6.1	校验参数
 序号	基本步骤	相关数据	补充步骤
 1	校验单据编码与单据类别	红冲现金收款单参数	1.	如果单据类别为“运单”时，执行规则SR1；校验不通过参考扩展事件1a
 2.	如果单据类别为“小票”，执行规则SR2校验不通过参考扩展事件1a
 2	校验传入的运单和小票，对应的应收单单据。    	红冲现金收款单	1.查找运单和小票是否有相应的现金收款单。扩展规则参见-2a
 2.获取运单和小票对应现金收款单的状态是否有效。扩展规则参见3a
 3.获取运单对应的现金收款单是否为红单。如果为红单则提示用户，参见业务规则SR3。扩展步骤为3a

 3	校验传入的部门编码是否为空	红冲现金收款单参数	1.执行规则参考SR4；校验不通过参考扩展事件3a；
 1.6.2	红冲现金收款单
 序号	基本步骤	相关数据	补充步骤
 1、		根据单号、单据类别、收入部门获得有效版本的现金收款单	红冲现金收款单参数	规则参考：SR5，如果无法获取相应扩展事件1a
 2、		判断能否进行红冲	现金收款单
 小票收款单	规则参考：SR6，不能红冲参考扩展事件1a
 3、		生成红冲版本的现金收款单	现金收款单
 小票收款单	规则参考：SR7
 4、		将先前有效版本的现金收款单更改为无效	现金收款单	

 序号	扩展事件	相关数据	补充步骤
 1a		校验不通过，抛出异常	红冲现金收款单参数	将异常消息抛出，并终止相关的操作；
 2a		运单对应现金收款单号，没有找到或者为空	红冲现金收款单参数	提示没有找到“没有运单编号为：’12345’”对应现金收款单“
 3a		运单对应现金收款单，是红单	红冲现金收款单参数	提示“红单的现金收款单不能做红冲“：


 1.7	业务规则
 序号	描述
 SR1	校验运单校验规则运单长度是否正确，运单是否真实存在，如果运单单号不正确提示信息“运单号不正确”，该操作结束；如果运票不存在，提示“运单号不存在”
 SR2	判断小票号长度是否正确，如果小票单号不正确，则提示“小票单号不正确”，该操作结束；如果小票不存在，提示“运单号不存在”
 SR3	红单不能再次红冲。

 SR4	判断收入部门是否为空，如果收入部门不为空，操作继续；否则提示信息“收入部门不正确，不允许为空”，该操作结束；
 SR5	根据“红冲现金收款单参数”，有效版本的查询现金收款单，如果返回的结果不为空，操作继续；否则提示信息“不存在对应有效版本的现金收款单”，并跳转到SR7；
 SR6	1、	判断现金收款单的记账日期与当前记账期间时间差，如果时间差超过30天（时间差，可配置在Foss基础资料中维护），则提示“超出结算业务红冲的最大时间范围，该操作不允许继续”，该操作结束；
 2、如果来源单据类别为运单，并且运单对应的结算单据进行了下列操作，则不允许对现金收款单进行红冲：
 2.1运单对应的应收单、应付单已核销，提示“对应的应收单、应付单已经核销，不能进行红冲”；
 2.2 运单对应的客户对账单已确认、核销、付款、还款，提示“对应的客户对账单已经进行确认操作，不能进行红冲”；
 2.3 运单存在始发运费应收单或到付运费应收单，客户在网上营业厅进行了支付锁定，提示“客户在网上已经将运单进行了锁定,不能进行红冲”；
 2.4 代收货款应付单的支付状态为资金部冻结、汇款中、已汇款之一，提示“该运单的代收货款应付单已经被资金部锁定或准备汇款或已经汇款，不能进行红冲”；
 2.5偏线外发反馈已录入、专线到付运费已经货款结清,提示“存在对应的偏线外发反馈录入单或专线到付运费已经货款结清，不能进行红冲操作”。如果偏线外发单已经做了中转处理，则该外发单不再限制运单变更。
 2.6专线、空运、偏线业务已经签收，提示“该单已经被签收，不能进行红冲”；
 2.7如果传入运单的存在对应服务补救、理赔申请、坏账申请，并且对应的处理状态为申请中或者处理已完结，提示“该单存在相应的服务补救、理赔申请、坏账申请，不能进行红冲”；
 SR7	1、生成新的红冲现金收款单，红冲现金收款单内容除记账日期、金额类字段、版本、有效标识、红冲标识、制作人之外，内容与有效的现金收款字段保持一致，
 2、如果原有效版的记账日期不为空，则记账日期为服务器当前日期，否则记账日期保持为空；
 3、金额类字段包括有总运费、公布价运费、增值服务费（送货费、包装手续费、代收货款手续费、保价费、其他费用<营业员可根据业务需要填入公司现有业务如保管费等>）、优惠运费、等字段；
 4、红冲现金收款单：金额类字段 = 有效版本的现金收款单金额字段 * -1(即取反);
 5、红冲现金收款单有效标识为否,红单标识为是,版本 = 有效版本的现金收款单版本 + 1；

 1.8	数据元素
 1.8.1	红冲现金收款单参数、小票(输入)
 字段名称	说明	输入限制	长度	输入提示	是否必填	备注
 运单号	运单号	字符	10	无	是	
 小票单号	小票单号	字符	10	无	否	如果传入小票单号不为空
 收入部门	收货部门	字符	29	无	是	
 1.8.2	现金收款单、小票(输出)
 字段名称	说明	输入限制	长度	输出提示	是否必填	备注
 收入部门编码	收货部门名称	外键	44	无	是	采用uuid进行外键关联
 收入部门名称	收货部门名称	字符	100	无	是	冗余字段
 收款部门编号	收款部门编号	字符		无		
 收款部门名称	收款部门名称	字符		无		
 运单单号	运单单号	数字	10	无	是	目前为8位
 小票单号	小票单号	数字	10	无	否	
 收款方式	收款方式	枚举	44	无	是	现金、银行卡
 产品类型	目前六种产品类型	枚举	44	无	是	
 总运费	总金额	数字	10，2	无	否	
 公布价运费	运费	数字	10，2	无	否	
 优惠运费	优惠运费	数字	10，2	无	否	
 送货费	送货费	数字	10，2	无	否	
 包装手续费	包装手续费	数字	10，2	无	否	
 代收货款手续费	代收手续费	数字	10，2	无	否	
 保价费	保价费	数字	10，2	无	否	
 其他费用	其它费用	数字	10，2	无	否	
 金额	小票收入金额	数字	10，2	无	否	
 收入类型	小票收入类型	字符				
 收入款项名称	小票收入款项	字符	50	无	否	保管费、放空费
 业务日期	收款单的发货日期	日期	10	无	是	
 创建人	创建人	字符	50	无	否	
 创建日期	创建日期	日期	10	无	否	
 变更人	变更人	字符	50	无	否	
 变更日期	变更日期	日期	10	无	否	
 记账日期	记账日期	日期	10	无	是	
 单据状态	提交	枚举	44	无	是	
 版本号	版本号	整数	4	无	是	第一次调用本接口，版本为1
 是否有效	是否有效	布尔	1	无	是	
 是否作废	false	布尔	1	无	是	作废后不可以还可以红冲
 是否红冲	是否红冲	布尔	1	无	是	红冲后状态为true，默认为false
 是否初始化	是否为初始化	布尔	1	无	是	默认为False
 录入部门编码	制单部门编码	数字	44	无	是	
 录入人	现金收款单录入部门名称	字符	200	无	是	
 录入名称	现金收款单录入名称	外键	44	无	是	
 录入时间	当前服务器时间	日期	10	无	是	
 来源单据编号	单据来源编号	字符	44	无	是	
 到达部门	到达部门	字符	50	无	是	
 来源单据类别	现金收款单	枚举	44	无	是	
 锁定时间	网上支付时，应收单锁定截止的日期	日期	10	无	否	


 1.9	非功能性需求
 使用量	目前80000/天，预计每年增加60%
 2012年全网估计用户数	10000人
 响应要求（如果与全系统要求 不一致的话）	高并发，必须保证5s完成响应
 使用时间段	7×24小时
 高峰使用时间段	14：00-18：00

 1.10	接口描述：
 接口名称 	对方系统（外部系统或内部其他模块）	接口描述
 无	无	无


 修订记录 
 日期 	修订内容 	修订人员 	版本号 
 2012-04-26 	创建版本	黄小波	V0.1
 2012-07-20	添加相关业务用例、用例描叙、用例条件、操作步骤、业务规则、数据元素	李琴	V0.5
 2012-07-23	0.5变更为0.9	李琴	V0.9
 2012-10-17
 修改SR3相关描述。
 保轶
 V1.01

 2012-12-13	如果偏线外发单已经做了中转处理，则该外发单不再限制运单变更。
 保轶	V1.11
 2013-02-03	仓储费保管费	保轶	V1.11

 1.	SUC-14-红冲现金收款单
 1.1	相关业务用例
 BUC_FOSS_4.7.10.10_020 现金与刷卡-红冲现金收款单
 BUC_FOSS_4.7.70.10_010  （变更运单）
 BUC_FOSS_4.7.10.30_030   红冲小票
 1.2	用例描述
 1.营业部、派送部、接货开单查询组营业员已经完成系统开单，客户要求放弃服务停止发货，或者营业部、派送部、接货开单查询组检查发现金额相关信息错误收银员需要修改纠正错误现金单据信息
 2. 营业部在检查小票单据时发现小票数据信息与实际情况不一致，需要对其进行红冲，由营业部经理对小票进行作废处理
 1.3	用例条件
 条件类型	描述	引用系统用例
 前置条件	1.	运单存在对应的现金收款单；
 2.	小票存在对应的现金收款单
 3.	不存在未受理的更改单	1.	SUC-543 作废运单
 2.	SUC-542 查询/审核变更申请
 3.	SUC-513中止运单
 后置条件	1.红冲开单时生成的现金收款单	
 1.4	操作用户角色
 操作用户	描述
 无	无
 1.5	界面要求
 1.5.1	表现方式
 接口
 1.5.2	界面原型
 无
 1.5.3	界面描述
 无
 1.6	操作步骤
 1.6.1	校验参数
 序号	基本步骤	相关数据	补充步骤
 1	校验单据编码与单据类别	红冲现金收款单参数	1.	如果单据类别为“运单”时，执行规则SR1；校验不通过参考扩展事件1a
 2.	如果单据类别为“小票”，执行规则SR2校验不通过参考扩展事件1a
 2	校验传入的运单和小票，对应的应收单单据。    	红冲现金收款单	1.查找运单和小票是否有相应的现金收款单。扩展规则参见-2a
 2.获取运单和小票对应现金收款单的状态是否有效。扩展规则参见3a
 3.获取运单对应的现金收款单是否为红单。如果为红单则提示用户，参见业务规则SR3。扩展步骤为3a

 3	校验传入的部门编码是否为空	红冲现金收款单参数	1.执行规则参考SR4；校验不通过参考扩展事件3a；
 1.6.2	红冲现金收款单
 序号	基本步骤	相关数据	补充步骤
 1、		根据单号、单据类别、收入部门获得有效版本的现金收款单	红冲现金收款单参数	规则参考：SR5，如果无法获取相应扩展事件1a
 2、		判断能否进行红冲	现金收款单
 小票收款单	规则参考：SR6，不能红冲参考扩展事件1a
 3、		生成红冲版本的现金收款单	现金收款单
 小票收款单	规则参考：SR7
 4、		将先前有效版本的现金收款单更改为无效	现金收款单	

 序号	扩展事件	相关数据	补充步骤
 1a		校验不通过，抛出异常	红冲现金收款单参数	将异常消息抛出，并终止相关的操作；
 2a		运单对应现金收款单号，没有找到或者为空	红冲现金收款单参数	提示没有找到“没有运单编号为：’12345’”对应现金收款单“
 3a		运单对应现金收款单，是红单	红冲现金收款单参数	提示“红单的现金收款单不能做红冲“：


 1.7	业务规则
 序号	描述
 SR1	校验运单校验规则运单长度是否正确，运单是否真实存在，如果运单单号不正确提示信息“运单号不正确”，该操作结束；如果运票不存在，提示“运单号不存在”
 SR2	判断小票号长度是否正确，如果小票单号不正确，则提示“小票单号不正确”，该操作结束；如果小票不存在，提示“运单号不存在”
 SR3	红单不能再次红冲。

 SR4	判断收入部门是否为空，如果收入部门不为空，操作继续；否则提示信息“收入部门不正确，不允许为空”，该操作结束；
 SR5	根据“红冲现金收款单参数”，有效版本的查询现金收款单，如果返回的结果不为空，操作继续；否则提示信息“不存在对应有效版本的现金收款单”，并跳转到SR7；
 SR6	1、	判断现金收款单的记账日期与当前记账期间时间差，如果时间差超过30天（时间差，可配置在Foss基础资料中维护），则提示“超出结算业务红冲的最大时间范围，该操作不允许继续”，该操作结束；
 2、如果来源单据类别为运单，并且运单对应的结算单据进行了下列操作，则不允许对现金收款单进行红冲：
 2.1运单对应的应收单、应付单已核销，提示“对应的应收单、应付单已经核销，不能进行红冲”；
 2.2 运单对应的客户对账单已确认、核销、付款、还款，提示“对应的客户对账单已经进行确认操作，不能进行红冲”；
 2.3 运单存在始发运费应收单或到付运费应收单，客户在网上营业厅进行了支付锁定，提示“客户在网上已经将运单进行了锁定,不能进行红冲”；
 2.4 代收货款应付单的支付状态为资金部冻结、汇款中、已汇款之一，提示“该运单的代收货款应付单已经被资金部锁定或准备汇款或已经汇款，不能进行红冲”；
 2.5偏线外发反馈已录入、专线到付运费已经货款结清,提示“存在对应的偏线外发反馈录入单或专线到付运费已经货款结清，不能进行红冲操作”。如果偏线外发单已经做了中转处理，则该外发单不再限制运单变更。
 2.6专线、空运、偏线业务已经签收，提示“该单已经被签收，不能进行红冲”；
 2.7如果传入运单的存在对应服务补救、理赔申请、坏账申请，并且对应的处理状态为申请中或者处理已完结，提示“该单存在相应的服务补救、理赔申请、坏账申请，不能进行红冲”；
 SR7	1、生成新的红冲现金收款单，红冲现金收款单内容除记账日期、金额类字段、版本、有效标识、红冲标识、制作人之外，内容与有效的现金收款字段保持一致，
 2、如果原有效版的记账日期不为空，则记账日期为服务器当前日期，否则记账日期保持为空；
 3、金额类字段包括有总运费、公布价运费、增值服务费（送货费、包装手续费、代收货款手续费、保价费、其他费用<营业员可根据业务需要填入公司现有业务如保管费等>）、优惠运费、等字段；
 4、红冲现金收款单：金额类字段 = 有效版本的现金收款单金额字段 * -1(即取反);
 5、红冲现金收款单有效标识为否,红单标识为是,版本 = 有效版本的现金收款单版本 + 1；

 1.8	数据元素
 1.8.1	红冲现金收款单参数、小票(输入)
 字段名称	说明	输入限制	长度	输入提示	是否必填	备注
 运单号	运单号	字符	10	无	是	
 小票单号	小票单号	字符	10	无	否	如果传入小票单号不为空
 收入部门	收货部门	字符	29	无	是	
 1.8.2	现金收款单、小票(输出)
 字段名称	说明	输入限制	长度	输出提示	是否必填	备注
 收入部门编码	收货部门名称	外键	44	无	是	采用uuid进行外键关联
 收入部门名称	收货部门名称	字符	100	无	是	冗余字段
 收款部门编号	收款部门编号	字符		无		
 收款部门名称	收款部门名称	字符		无		
 运单单号	运单单号	数字	10	无	是	目前为8位
 小票单号	小票单号	数字	10	无	否	
 收款方式	收款方式	枚举	44	无	是	现金、银行卡
 产品类型	目前六种产品类型	枚举	44	无	是	
 总运费	总金额	数字	10，2	无	否	
 公布价运费	运费	数字	10，2	无	否	
 优惠运费	优惠运费	数字	10，2	无	否	
 送货费	送货费	数字	10，2	无	否	
 包装手续费	包装手续费	数字	10，2	无	否	
 代收货款手续费	代收手续费	数字	10，2	无	否	
 保价费	保价费	数字	10，2	无	否	
 其他费用	其它费用	数字	10，2	无	否	
 金额	小票收入金额	数字	10，2	无	否	
 收入类型	小票收入类型	字符				
 收入款项名称	小票收入款项	字符	50	无	否	保管费、放空费
 业务日期	收款单的发货日期	日期	10	无	是	
 创建人	创建人	字符	50	无	否	
 创建日期	创建日期	日期	10	无	否	
 变更人	变更人	字符	50	无	否	
 变更日期	变更日期	日期	10	无	否	
 记账日期	记账日期	日期	10	无	是	
 单据状态	提交	枚举	44	无	是	
 版本号	版本号	整数	4	无	是	第一次调用本接口，版本为1
 是否有效	是否有效	布尔	1	无	是	
 是否作废	false	布尔	1	无	是	作废后不可以还可以红冲
 是否红冲	是否红冲	布尔	1	无	是	红冲后状态为true，默认为false
 是否初始化	是否为初始化	布尔	1	无	是	默认为False
 录入部门编码	制单部门编码	数字	44	无	是	
 录入人	现金收款单录入部门名称	字符	200	无	是	
 录入名称	现金收款单录入名称	外键	44	无	是	
 录入时间	当前服务器时间	日期	10	无	是	
 来源单据编号	单据来源编号	字符	44	无	是	
 到达部门	到达部门	字符	50	无	是	
 来源单据类别	现金收款单	枚举	44	无	是	
 锁定时间	网上支付时，应收单锁定截止的日期	日期	10	无	否	


 1.9	非功能性需求
 使用量	目前80000/天，预计每年增加60%
 2012年全网估计用户数	10000人
 响应要求（如果与全系统要求 不一致的话）	高并发，必须保证5s完成响应
 使用时间段	7×24小时
 高峰使用时间段	14：00-18：00

 1.10	接口描述：
 接口名称 	对方系统（外部系统或内部其他模块）	接口描述
 无	无	无


 修订记录 
 日期 	修订内容 	修订人员 	版本号 
 2012-4-21	创建版 	王智梅	V0.1
 2012-6-11	根据内部审查修改	王智梅	V0.1
 2012-6-26	根据审核修改	武江涛	V0.1
 2012-7-17	统一编码修改	武江涛	V0.5
 2012-7-24	版本升级，修改版本号	武江涛	V0.9
 2013-02-25	根据ISSUE-1529，增加按照来源单号查询	王学敏	V1.2
 2013-3-5	增加按单号查询，数据权限描述	武江涛	V1.2

 1.	SUC-12 查询现金收款单
 1.1	相关业务用例
 BUC_FOSS_4.7.10.10_010  现金与刷卡-接货开单
 BUC_FOSS_4.7.10.30_010  小票收入

 1.2	用例描述
 收银员根据记账日期、业务日期、运单号、客户名称（编码）、单据状态查询出现金收款单信息，查询出的现金收款单可以导出。
 1.3	用例条件
 条件类型	描述	引用系统用例
 前置条件		
 后置条件	1.	在界面显示查询的现金收款单	
 1.4	操作用户角色
 操作用户	描述
 收银员	查询本部门的现金收款单数据
 会计	查询管辖范围内部门的现金收款单数据
 1.5	界面要求
 1.5.1	表现方式
 Web
 1.5.2	界面原型
 按日期查询界面

 按运单号查询界面

 按来源单号查询界面

 现金收款单明细界面

 1.5.3	界面描述
 查询条件界面
 	页面初始化组件描述：
 1.	当选择按业务日期查询时，开始日期和结束日期是指运单业务时间；当选择按记账日期查询时，开始时间和结束时间是指现金收款单的记账日期；系统默认选择按业务日期查询，页面初始化时系统自动提供默认值为当前用户登录日期，用户也可以通过选择、直接修改的方式修改日期数据；
 2.	有效版本：初始化时默认为“全部”； 
 3.	付款方式：初始化时默认为“全部”；
 4.	单据状态：初始化时默认为“全部”；
 5.	收款部门：若登录用户角色是收银员，收款部门默认为登录人所在部门；若登录用户角色是会计，收款部门默认为空；
 6.	运单号：初始化时组件中显示“请输入一个或10个内的多个运单号，单号之间用半角逗号隔开”；
 7.	来源单号：同上
 	页面输入组件描述：
 1.	收款部门：公共选择框；
 2.	收入部门：公共选择框；
 3.	客户信息：公共选择框；
 4.	运单号：输入框，用户可输入一个或多个运单号进行查询，单号之间用输入法半角状态逗号隔开；
 	是否有效版本以下拉列表形式显示，内容为：
 	是
 	否
 	付款方式以下拉列表形式显示，在数据字典维护，内容为：
 	现金
 	银行卡
 	单据状态以下拉列表形式显示，在数据字典维护，内容为：
 	提交
 	收银确认
 	查询条件界面提供以下按钮：
 	查询：点此按钮，根据查询条件查询出结果，现金收款单列表界面显示查询结果
 	重置：点此按钮将查询条件还原为初始化状态
 	按来源单号查询：
 需要能够支持按照运单号和小票单号来查询。
 现金收款单列表界面
 	页面初始化组件描述：
 1.	金额：查询结果金额合计，系统自动对查询出的数据进行金额合计计算，并显示在每一页的左下角；
 2.	条数：查询结果条数合计； 
 	每页最大显示条数以下拉列表形式显示，内容为：
 	500
 	1000
 	5000
 	页面表格组件功能描述：
 1.	页面初始化时，不显示查询结果集；
 2.	用户可以对查询出的结果通过多选框选择一条或者多条记录，可以通过点击结果集列表左上角第一个多选框，实现对结果集信息的全选和清空操作；
 3.	用户可以分别通过业务日期、记账日期、付款方式、单据状态、收款部门、收入部门升序或者降序排列；
 4.	用户可以自定义显示结果集中的数据列；
 5.	结果集分页，且用户可选择每页最多显示条数，结果集的宽和高长度固定，横向和竖向以滚动条的形式显示
 	列表界面提供以下按钮：
 	导出：点此按钮可以导出选中的服务补救申请，未选择时默认为导出界面中所有记录
 	查看明细 ：点此按钮可弹出查看该条记录的详细信息对话框
 	现金收款单明细界面
 界面中的组件与数据元素现金收款单列表信息（输出数据）一致
 1.6	操作步骤
 1.6.1	查询
 序号	基本步骤	相关数据	补充步骤
 1	页面初始化	付款方式、单据状态、收款部门信息	1.	系统默认选择按业务日期查询界面
 2.	调用综合管理子系统查询出现金和银行卡两种付款类型填充付款类型下拉列表
 3.	调用综合管理子系统查询出提交和收银确认两种单据状态填充单据状态下拉列表
 参见业务规则SR1
 2	选择按业务日期/记账日期查询	现金收款单信息	
 3	选择是否有效版本	现金收款单信息	
 4	选择开始日期及结束日期		参见业务规则SR2
 5	选择收货部门	公共选择框（部门）	参见业务规则SR3
 6	选择收入部门和客户信息	公共选择框（部门、客户）	
 7	选择付款方式和单据状态		
 8	输入运单号或来源单号		1.	系统自动忽略运单号前后的空格；
 2.	检查输入运单号格式合法性
 参见业务规则SR4
 9	点击“查询”按钮	现金收款单信息	1.	系统检查查询条件必填项是否已填
 2.	系统根据选择的查询条件查询数据，并显示在现金收款单列表界面；
 3.	查询出记录后，原查询条件不清空，可用于下一次查询；
 参见业务规则SR5
 10	点击“重置”按钮		将查询界面所有已填入和选择的查询条件变为初始化状态
 1.6.2	查看明细
 序号	基本步骤	相关数据	补充步骤
 10	点击 “查看明细”按钮	现金收款单信息	1.弹出该条记录的详细信息界面（参见现金收款单明细界面），该界面包含了该条记录所有信息
 1.6.3	导出
 序号	基本步骤	相关数据	补充步骤
 11	选中一条或多条记录	现金收款单信息	选中的记录首行的选择框 打钩，同时该条记录标记颜色
 12	点击“导出”按钮	现金收款单信息	1.	调用导出数据接口，导出已选择的现金收款单信息，未选择默认为导出查询出的所有信息
 参见业务规则SR6
 1.6.4	扩展事件
 序号	扩展事件	相关数据	备注
 4a	日期为空		失去焦点时输入框附近显示红色字体提示“请选择查询日期”
 4b	开始日期大于结束日期		提示“开始日期不能大于结束日期!”
 4c	开始日期与结束日期相差大于31天		提示“开始日期与结束日期之间不能大于31天，请从新选择日期！”
 8a	运单号为空		失去焦点时输入框附近显示红色字体提示“请至少输入一个运单号”
 8b	当输入的运单号个数超过10个时，不能再进行输入		提示“你好，输入的预收单号数量不能超过10个！”
 9b	查询结果为空		弹出提示“无符合条件的数据”

 1.7	业务规则
 序号	描述
 SR1	1.系统初始化的开始时间和结束时间默认相差0天；
 SR2	1.	日期范围最大不超过31天
 SR3	1.	收银员不能查询除本部门以外部门的现金收款单数据；会计可查询所管辖范围内部门的数据；
 2.	会计选择部门时可多选；
 SR4	1.	输入的运单号的个数不能超过10个且不能为空；
 2.	查询增加数据权限控制，只能查询出（应收部门/收入部门/始发部门为）当前登录用户客户可操作的营业部数据
 SR5	1.	用户可自定义显示字段和隐藏字段；
 SR6	1.	导出的数据以EXCEL表格的形式显示
 2.	若用户已选择了一条或多条记录（在记录的复选框中打钩），则导出的是用户所选择的记录；若用户未选择任何记录，则无论是否分页，导出的是查询出的所有记录；

 1.8	数据元素
 1.8.1	查询条件（输入信息）
 字段名称	说明 	输入限制	输入项提示文本	长度	是否必填	备注
 按业务日期查询	单选框	默认+手动选择	开单日期	6	否	按业务日期查询和按记账日期查询，只能选其一
 按记账日期查询	单选框	手动选择	现金收款单最新变动日期	6	否	
 有效版本	下拉选择框	手动选择	选择时只查询有效版本，不选查询所有	6	否	选择时只查询有效版本数据，不选时查询有效和无效版本数据
 开始日期		手动选择		6	是	
 结束日期		手动选择		6	是	
 收款部门	公共选择框	默认+手动选择		50	否	可多选
 收入部门	公共选择框	手动选择			否	可多选
 客户信息	公共选择框	手动选择		50	否	
 付款方式	综合管理数据字典	手动选择		10	否	付款方式：现金、银行卡
 单据状态	综合管理数据字典	手动选择		10	否	单据状态：提交、收银确认
 运单号		手动输入		100	是	

 1.8.2	现金收款单信息（输出元素）
 字段名称 	说明 	输出限制	输入项提示文本	长度	是否必填	备注
 单据编号	单据编号	系统获取		20	是	
 运单号	运单号	系统获取		20	是	
 客户名称	客户名称	系统获取		100	是	
 客户编码	客户编码	系统获取		20	是	默认界面隐藏此字段
 收入部门	收入部门	系统获取		100	是	
 收入部门编码	收入部门编码	系统获取		20	是	默认界面隐藏此字段
 收款部门	开单部门	系统获取		100	是	
 收款部门编码	开单部门编码	系统获取		20	是	默认界面隐藏此字段
 收入部门所属子公司	收入部门所属子公司	系统获取		100	是	
 收入部门所属子公司编码	收入部门所属子公司编码	系统获取		20	是	默认界面隐藏此字段
 收款部门所属子公司	收款部门所属子公司	系统获取		100	是	
 收款部门所属子公司编码	收款部门所属子公司编码	系统获取		20	是	默认界面隐藏此字段
 单据状态	现金收款单的单据状态	系统获取		20	是	提交、收银确认
 金额	开单现金/银行卡金额	系统获取		10	是	
 单据子类型	“现金收款单”	系统获取		20	是	
 付款方式	付款方式	系统获取		20	是	现金或银行卡
 运费	货物运费	系统获取		10	是	
 接货费收入	接货费	系统获取		6	是	
 送货费	送货费	系统获取		6	是	
 包装收入	包装费	系统获取		6	是	
 代收货款手续费收入	代收货款手续费	系统获取		6	是	
 保价收入	保险费	系统获取		6	是	
 其他	其他费用	系统获取		6	是	
 小票	小票收入	系统获取		6	是	
 产品类型	运单运输性质	系统获取		20	是	包括：精准空运、精准卡航、精准城运、精准汽运（长途）、精准汽运（短途）、汽运偏线
 版本号	现金收款单的版本号	系统获取		2	是	
 是否有效版本	版本标记	系统获取		2	是	
 是否红单	是否为红冲单	系统获取		2	是	
 业务日期	运单业务日期	系统获取		10	是	
 记账日期	现金收款单最新变动日期	系统获取		10	是	
 制单人	运单开单人	系统获取		20	是	
 制单人工号		系统获取		10	是	默认界面隐藏此字段
 收银员	收银确认人姓名	系统获取		10	否	默认界面隐藏此字段
 收银员工号		系统获取		10	是	默认界面隐藏此字段
 收银日期	收银确认日期	系统获取		6	否	默认界面隐藏此字段
 是否初始化数据	数据是否来源于初始化	系统获取		2	是	默认界面隐藏此字段
 备注	备注说明	系统获取		100	是	默认界面隐藏此字段

 1.9	非功能性需求
 使用量	目前每天产生的现金收款单总量约为40000笔，每年以60%的速度增长
 2012年全网估计用户数	收银员总数量约2236名(截止2012.4.12，其增长速度与网点增长速度成正比)
 目前检查会计数量为约为300人
 响应要求（如果与全系统要求 不一致的话）	查询在3秒内响应；
 使用时间段	正常上班时间（9:30-21:30）
 高峰使用时间段	收银员每天盘点期间（16:00-21:30）

 1.10	接口描述：
 接口名称 	对方系统（外部系统或内部其他模块）	接口描述
 查询部门信息接口	FOSS-综合管理子系统	根据当前登录用户查询出部门信息
 查询客户信息接口	FOSS-综合管理子系统	根据输入的字符模糊查询出客户名称和编码

 修订记录
 日期 	修订内容 	修订人员 	版本号 
 2012-05-08	创建版	李琴	V0.1 
 2012-05-17	修改版，用户评审后，部门信息修改，界面调整	李琴	V0.5
 2012-07-25	0.5变更为0.9版	李琴	V0.9
 2013-01-08	修改单号显示、日期显示TAB顺序；查询无记录时不弹出窗口	朱唯	V1.11
 2013-1-21	修改数据元素描述，去掉签收状态	黄小波	V1.2
 2013-02-03	仓储费保管费	保轶	V1.2
 2013-02-25	根据ISSUE-1529，增加按照来源单号查询	王学敏	V1.2
 2013-3-5
 增加查询条件中“部门”数据数据权限描述
 武江涛
 V1.3


 1.	SUC-20查询应收单
 1.1	相关业务用例
 BUC_FOSS_4.7.10.20_010  出发运费应收单
 BUC_FOSS_4.7.10.20_020  到付运费应收单
 BUC_FOSS_4.7.50.30_010  生成代收货款应收单
 BUC_FOSS_4.7.10.30_020  小票收入-非现金小票
 1.2	用例描述
 用户可以查询运单开单时产生应收单和非现金小票应收单、代收货款应收单的信息，可以通过单号和日期查询，可以通过日期、签收状态、是否有效、客户编码等查询某一阶段的应收单信息。并根据查询结果进行导出操作。
 1.3	用例条件
 条件类型	描述	引用用例
 前置条件	无	无
 后置条件	1、	按查询条件，显示查询结果列表	无

 1.4	操作用户角色
 操作用户	描述
 营业员	营业员、营业经理可查询、并根据查询结果报表导出
 收银员	收银员、收银经理可查询、并根据查询结果报表导出
 会计	会计、会计经理可查询、并根据查询结果报表导出

 1.5	界面要求
 1.5.1	表现方式
 1.5.2	界面原型

 	按单号查询应收单

 	按日期查询应收单

 	按来源单号查询

 1.5.3	界面描述
 	页面初始化组件
 1.	日期类型：单选按钮。 有业务日期/记账日期两项。
 结束日期：下拉框。必填项，开始日期和结束日期。用户可以选择按业务日期和记账日期查询，默认业务日期和记账日期查询范围前后限制为一个月。系统默认查询截止到当天0点0分0秒开始截止到当天23点59分59秒之内的信息。
 2.	单据子类型：始发运费应收单/到达运费应收单/代收货款应收单/空运其它应收单/小票应收单/到达偏线代理应收单/空运中转代理应收。
 3.	“部门”修改为：“应收部门”：下拉框。从数据字典中获取到相应的信息。默认当前登录者所属部门
 增加“收入部门”：下拉框，从数据字典中获取到相应的信息。
 4.	大区：输入框，业务发生部门所属大区名称。
 5.	小区：输入框，业务发生部门所属小区名称。
 6.	单据来源 下拉框。从数据字典获取到信息，目前有三种:全部/运单/小票，默认选择全部 
 7.	客户名称：公共组件，从数据字段获取数据，根据用户编码和名称查询。
 8.	是否有效，默认选择“有效”。从数据字典获取到信息，状态有：全部/有效/无效。
 9.	是否签收，默认选择“全部”。从数据字典获取到信息，状态有：全部/未签收/已签收
 	页面输入组件描叙
 1.	用户可输入单号，应收单号查询，单号最大支持10个，运单之间用半角“，”隔开。
 2.	按照日期类型，用户可根据需要按照会计时间或者是业务时间来查询，默认情况选中业务时间，开始日期和结束日期是必填项并且相差不超过30天。
 3.	客户或者代理信息，用户输入客户名称和编号或者代理名称和编号可以用来查询。支持模糊查询，用户可以根据输入名字自动匹配到相应的名称。默认无
 	查询应收单列表描叙：
 1.	应收单列表，页面初始化时，页面不显示，当条件满足时，查询出相应的数据。
 2.	查询列表时，右下角，自动统计总金额，当前页面总金额，已核销金额，未核销金额，应付运费金额等。
 3.	用户可以自动以选择显示取消哪些列名。
 4.	鼠标悬停在应收单号时，在光标处提示“查看明细”，用户点击查看明细可进入，显示该应收单详细信息信息。
 5.	此查询需要提供分页  50/100/150/200.
 	按照来源单号查询
 应收单需要支持按照外发反馈录入编号、配载编号查询
 界面说明
 二、应收单查询界面按钮：
 	查询 
 	重置
 	导出 
 	查询明细
 1.6	操作步骤
 	查询
 序号	基本步骤	相关数据	补充步骤
 1.		页面初始化。 	应收单	初始化信息，请参见 SR1
 2.		可自由选择按照日期类型按照业务日期或者会计时间，输入开始日期和结束日期。	应收单	日期输入限制，请参见SR2
 3.		用户可以输入应收单号或者运单号进行查询	应收单	请参见业务规则-SR3
 4.		输入客户名称或编码	应收单	1、	用户在输入客户信息时系统自动调用综合管理查询客户信息接口根据客户类型模糊查询出与用户输入字符类似的全部客户信息

 5.		可选择来源单据、是否红单、是否有效	应收单	
 6.		点击查询按钮	应收单	查询应收单列表不为空，扩展事件 “5a”
 	导出
 序号	基本步骤	相关数据	补充步骤
 1．	用户可以输入查询条件	应收单	1.输入查询条件
 2.	点击查询	应收单	1.通过查询出来的结果，进行导出
 点击“导出”	应收单	用户可根据可以导出查询出来的数据，当查询列表不为空时，点击导出进行导出。（按页面显示字段导出）

 	查看明细
 序号	基本步骤	相关数据	补充步骤
 1	用户可选择一条或者多条应收单查看明细 	应收单明细	当查询列表不为空时，用户可以通过复选框查看多条（不超过5条）明细，显示方式以对话框的方式。扩充事件，见5a

 1.7	扩展事件
 序号	扩展事件	相关数据	备注
 1a		当输入的应收单号或应付单号个数超过10个时，进行输入单号过多提示	应收单	当用户所输入的应收单号超过10个点击查询时，应收单输入框左下角，用红色自提显示“输入单号已超过10个，请修改后重新查询”；
 提示时，不需要清空用户输入内容。
 2a		查询点击重置	应收单	请参见 3a
 3a		当筛选不到结果时,提示没有符合条件的单据	应收单	查询结果集显示“查询结果为空”

 4a		点击“重置”按钮，页面查询条件数值恢复页面初始化状态	应收单	清空文本框，下拉恢复初始选中项
 5a		当查询列表不为空时，选择一条查看明细 	应收单	应收单号，加上链接，当用户选择一条数据，鼠标悬停在该记录上时，光标旁边提示“点击可查看明细”用户点击后，以弹出框的形式显示这条记录。 
 1.8	业务规则
 序号	描述
 SR1		1.	单号不能同时不空。输入应收单号按照应收单号查，输入运单号根据运单号查，如果为空提示错误.“请输入单号！”
 SR2		1、	开始时间和结束时间最大相差不超过30天
 SR3		1、	输入的应收单号和运单号个数不能超过10个，运单和应收单号之间用半角的“，”进行分割。
 2、	查询增加数据权限控制，只能查询出（应收部门/收入部门/始发部门为）当前登录用户客户可操作的营业部数据

 1.9	数据元素
 1.9.1	查询信息界面（输入）
 字段名称 	说明 	输入限制	输入项提示文本	长度	是否必填	备注

 业务日期	业务日期，如果是运单指的是收货时间。如果是其它指的是开单时间。	单选	无	6	否	无	业务日期和记账日期默认会选择一个。
 记账日期	会计日记指的记账开始时间。	单选	无	6	否	无
 开始日期	业务日期或者会计日期查起止日期	日期	无	10	是	根据用户选择，会计时间查询还是业务时间查询
 结束日期	业务日期或者记账日期查起止日期	日期	无	10	是	
 单据来源	开单来源小票，运单	下拉列表	无	20	否	
 是否有效	是否有效	下拉列表	无	4	否	
 运单编号	运点编号	文本	无	6	是	无
 客户名称	客户或代理名称	文本	无	100	否	无
 客户编号	客户或代理编号	文本	无	50	否	无
 应收单号	应收单号	文本	单号之间用逗号分隔	200	是	最多输入10个单号
 产品类型	产品类型	下拉列表	无	100	是	精准汽运（长途）\精准卡航\ 精准汽运（短途）\精准城运\ 汽运偏线 \精准空运
 大区名称	大区名称	输入框	无	50	否	无
 小区名称	小区名称	输入框	无	50	否	无

 1.9.2	应收单信息界面（运单输出）
 字段名称 	说明 (来源)	输出限制（类型，限制）	输出项提示文本	长度	是否必填	备注
 业务日期	运单的开单时间	无	无	8	是	
 记账日期	记账日期	无	无	10	是	
 收入部门名称	收入部门名称	无	无	100	是	
 收入部门编码	收入部门编码	无	无	50	是	
 收入公司名称	部门所属子公司	无	无	50	是	
 运单单号	运单单号	无	无	10	是	
 客户名称	客户名称	无	无	200	是	
 客户编码	客户编码	无	无	50	是	
 支付方式	运单的付款方式	无	无	50	是	临欠、月结、网上支付
 总运费	总运费	无	无	10	是	
 已收款金额	已收款金额	无	无	10	是	
 未收款金额	未收款金额	无	无	10	是	
 公布价运费	公布价运费	无	无	10	是	
 送货费	送货费	无	无	10	是	
 包装手续费	包装手续费	无	无	10	是	
 代收货款手续费	代收货款手续费	无	无	10	是	
 保价费	保价费	无	无	10	是	
 其他费用	其他费用	无	无	10	是	
 产品类型	产品类型	无	无	20	是	精准汽运（长途）\精准卡航\ 精准汽运（短途）\精准城运\ 汽运偏线 \精准空运
 版本号	默认为1，后面逐步累加	无	无	4	是	
 是否有效	是否有效	无	无	1	是	
 是否红冲	是否有效	无	无	1	是	
 是否初始化	是否从ERP导入	无	无	1	是	
 制单部门名称	运单录入名称	无	无	200	是	
 制单人	录入人	无	无	50	是	
 制单时间	当前服务器时间	无	无	8	是	
 来源单据编码	来源单据编码	无	无	50	是	
 来源单据类别	来源运单、来源小票	无	无	50	是	
 催款部门	催款部门	无	无	50	是	如果是到付金额大于0，催款部门就是到达部门，如果始发金额大于0，催款部门就是始发部门
 签收日期	签收日期	无	无	10	否	不显示








 到达部门	到达部门	无	无	20	否	运单有，运单签收时用于确认始发应收，小票没有
 大区名称	大区名称	无	无	50	否	
 小区名称	小区名称	无	无	50	否	
 1.9.3	小票（非现金）输出
 字段名称 	说明 	输入限制	输入项提示文本	长度	是否必填	备注
 部门名称	部门名称	字符	无	20	是	无
 所属子公司名称	部门所属子公司名称	字符	无	20	是	无
 客户名称	客户名称	字符	无	50	是	无
 客户编号	客户编号	编码	无	20	是	无
 小票编号	小票单号	编码	无	20	是	无
 金额	应收金额	数字	无	10	是	小票应收金额
 支付方式	支付方式	字符	无	  15	是	临欠、月结、网上支付
 版本号	小票对应的版本号	数字	无	10	是	无
 是否有效	标记该应收单是否有效	字符	无	10	是	无
 是否红单	标记该条应收单是否是红冲单据	字符	无	10	是	无
 是否初始化	标志该条应收单记录是否初始化	字符	无	10	是	无
 录入人员	制单人名称	字符	无	20	是	无
 录入时间	录入时间	日期	无	6	是	无
 单据子类型	单据对应子类型	字符	无	30	是	无
 业务日期	应收单发生的业务日期	日期	无	6	是	无
 记账日期	小票应收单的会计日期	日期	无	6	是	无
 录入人	单据制作人	字符	无	30	是	无
 录入日期	制单日期	日期	无	6	是	无
 产品类型	单据所对应货物的产品类型	字符	无	30	是	无
 创建时间	创建时间	日期	无	10	是	无
 更新时间	更新时间	日期	无	10	是	无
 来源单据类型	1.来源运单2.来源小票	数字	无	1	是	无
 收款类别	小票的收款类别	字符	无	1	是	仓储费、送货费、废品、开票税金、返货费
 收款事项	收款来源、营业员、偏线操作员、收银员	字符	无	20	是	收款来源、营业员、偏线操作员、收银员
 来源单据类别	来源运单、网上订单、来源小票	字符	无	50	是	无
 大区名称	大区名称	字符	无	50	是	无
 小区名称	小区名称	字符	无	50	是	无

 1.10	非功能性需求
 使用量	目前，全公司每月2400238笔，部门最大52310笔
 2012年全网估计用户数	30000
 响应要求（如果与全系统要求 不一致的话）	查询一般3s完成响应
 使用时间段	00：00-24：00
 高峰使用时间段	14：00-18：00



 1.11	接口描述：
 接口名称 	对方系统（外部系统或内部其他模块）	接口描述
 客户信息和代理信息	综合管理部门	根据用户输入或者选择客户名称调出客户的编码和名称

 修订记录 
 日期 	修订内容 	修订人员 	版本号 
 2012-04-27 	创建版 	黄小波	V0.1
 2012-06-19	新增相关业务用例、用例描叙、用例条件，操作步骤、业务规则、扩展步骤、数据元素、非功能性统计	李琴	V0.5
 2012-07-11	新增非现金小票应收单，修改业务用例、用例描叙、业务规则、扩展步骤、数据元素	李琴	V0.6
 2012-07-23	0.6版本改为0.9版本	李琴	V0.9
 2012-12-3	增加业务完结计数规则描述	黄小波	V1.2

 1.	SUC-17 生成应收单（接送货）
 1.1	相关业务用例
 BUC_FOSS_4.7.10.20_010自动生成_出发运费应收单
 BUC_FOSS_4.7.10.20_020自动生成_到付运费应收单
 BUC_FOSS_4.7.50.30_010自动生成_代收货款应收单
 BUC_FOSS_4.7.10.30_020小票收入-非现金小票
 1.2	用例描述
 1.司机接货后，客户在营业部、派送部、接货开单组进行开单提交运单后，调用此接口，根据客户选择的支付运费的欠款方式（临欠、月结）和客户是否在公司办理代收货款业务，而生成相应财务单据的应收单。将生成应收账款挂在相应的部门和客户名义下，并扣除客户可用信用额度，同时在收入部门确认收入；
 2.因业务原因需要开具小票单据，如用户派送改自提、客户开通会员收取的会员卡费，自己自提该派送增加的费用、仓储费、加收送货费、包装费、放空费、卖废品和其他费用等，如果客户有权限（可能月结或者临欠）非现金业务的小票时,调用此接口生成非现金小票应收单。
 3.偏线操作人员确认需要收取偏线代理费用开的小票，或者其他应收款开的小票单据调用接口生成小票应收单
 4.月结客户允许开欠款小票，生成对应的小票应收单；
 5.应收应付查询，参与系统用例报表《DP-FOSS-结算系统用例-应收应付查询-V0.1.xls》
 6.到付清单查询，参见系统用例报表《DP-FOSS-结算系统用例-到付款清查明细表-V0.1.xls》
 7、1、仅限来自原单据为运单的应收单，增加有效版本的应收单时，或有效版本的应收单未核销金额由0更新为非0时，增加业务计数；
 1.3	8、来源单据为运单的应收单，未核销金额由非0更改0时，对有效版本的应收进行红冲时减少业务完结计数；用例条件
 条件类型	描述	引用系统用例
 前置条件	1	始发欠款金额大于0
 2	到付运费大于0 
 3	代收货款大于0 
 4	存在小票非现金类（月结、临时欠款）单据	1.SUC-439-提交运单（接送货小组）
 2.SUC-2 -新增小票信息
 3.SU-74查询_管理客户应收账款
 4.SUC-741 查询/受理变更申请
 5.SUC-542 查询/审核变更申请
 后置条件	1.	有始发欠款生成始发应收单
 2.	有到付运费生成到付应收单
 3.	有代收货款生成代收货款应收单
 4.	小票提交成功，生成对应的小票应收单	
 1.4	操作用户角色
 操作用户	描述
 无	无
 1.5	界面要求
 1.5.1	表现方式
 接口
 1.5.2	界面原型
 无
 1.5.3	界面描述
 无
 1.6	操作步骤
 1.6.1	运单校验
 序号	基本步骤	相关数据	补充步骤
 1		检验传入的单号	运单或小票	1.根据传入的单号长度判断，是小票还是运单。
 2. 如果是运单，判读运单是否真实存在。规则参考SR1；不符合规则参考扩展事件1a
 3. 如果是小票，判断小票是否真实存在。规则参考SR1；不符合规则参考扩展事件1a
 2		校验传入的是运单或者小票有没有重复调用接口	运单或小票	1.校验传入运单和小票，对应的应收单编号是否存在重复。规则参考SR2，不符合规则参考扩展事件3a
 3		如果传入的是运单号校验运单的付款方式、金额的有效性	运单或小票	1.先检验运单的付款方式是否正确
 校验规则参考SR3；不符合规则参考扩展事件 4a
 2.先校验运单公开价运费、保价费总额是否等于总额，校验规则参考SR3，不符合规则，参见5a
 4		如果传入的小票单号，需要校验付款方式、金额有效性	小票	1.	先校验小票的付款方式是否正确和传入金额是否有效参见扩展步骤10a
 2.	校验小票的金额是否填入有无参见扩展步骤11a
 5		如果运单始发付款方式为月结	运单	1.校验运单客户是否有月结资格。业务规则参考SR4，不符合规则参考扩展事件6a；
 6		如果运单始发付款方式为月结、临时欠款，校验客户是否存在超期欠款	运单	1.校验客户是否存在超期欠款，引用用例（SU-74查询_管理客户应收账款），请参见业务规则参考SR5，不符合规则参考扩展事件7a；
 7		如果运单始发付款方式为月结、临时欠款时，校验客户的可用信用额度	运单	1.校验用户可用信用额度，规则参考SR6，不符合规则参考扩展事件7a；
 8		校验部门信息	运单	1.校验部门信息，业务规则参考SR7，不符合规则参考扩展事件8a；

 1.6.2	生成应收单
 序号	基本步骤	相关数据	补充步骤
 1		如果运单始发付款方式为临欠、月结，运费全额给始发部门，生成始发运费应收单、扣减客户可用信用额度	输入：运单
 输出：应收单	1、如果客户应收运费全额始发部门，根据欠款生成始发运费应收单，业务规则参考SR9；
 2、扣减客户可用信用额度，业务规则参考SR8
 2		如果运单的到付运费大于0时，生成到付运费应收单	输入：运单
 输出：应收单	1、	如果客户应收运费全部到付，生成到付应收单，业务规则参考SR10；
 2、	扣减客户可用信用额度，业务规则参考SR8
 3、	催款部门业务规则，参见SR15
 3		如果客户应收运费在始发部门支付部分，部分运费在到付时，生成始发运费、到付运费应收单	输入：运单
 输出：应收单	1.	始发部门生成始发运费应收单，业务规则参考SR11
 2.	到付运费所在到付部门生成到付运费应收单，业务规则参考SR12
 3.	扣减客户可用信用额度，业务规则参考SR8
 4.	催款部门业务规则，参见SR15
 4		如果运单的代收货款金额大于0时，生成代收货款应收单	输入：运单
 输出：应收单	1.	业务规则参考SR13；
 2.	催款部门业务规则，参见SR15
 5		如果传入的是小票	输入：小票
 输出：小票应收单	1.业务规则参考SR14
 6		如果运单的付款方式为“网上支付”，始发应收运费大于0，且到付运费等于0	输入：运单
 输出：应收单	1、根据客户应收运费全额生成始发应收单，欠款方式为“网上支付”，业务规则参考SR19
 7		如果运单的付款方式为“网上支付”，始发应收运费大于0，且到付运费大于0	输入：运单
 输出：应收单	1、参考业务规则SR11，及SR12

 序号	扩展事件	相关数据	备注
 1a		如果运单号不正确。
 异常消息	提示“运单号不正确！“，将获得校验的异常信息进行抛出，然后回滚相关操作；
 2a		如果小票单号不正确	异常消息	提示：“小票单号不正确！”，将获取的异常信息进行抛出，然后回滚相关操作；
 3a		如果存在重复调用。	异常消息	提示，“接口重复调用”将获得校验的异常信息进行抛出，然后回滚相关操作；
 4a		如果运单付款方式校验不通过。
 异常消息	提示“运单的付款方式校验不通过！”并异常信息进行抛出，然后回滚相关操作；
 5a		如果运单的金额，校验不通过。 	异常信息	提示“运单的金额填写错误！并异常信息进行抛出，然后回滚相关操作；“
 6a		如果返回结果存在没有月结资格。	异常消息	提示“该用户，没有月结资格”将获得校验的异常信息进行抛出，然后回滚相关操作；
 7a		如果返回结果存在超期欠款。
 异常消息	提示“编号为：用户存在超期欠款！”将获得校验的异常信息进行抛出，然后回滚相关操作；
 8a		如果客户的可用额度小于欠款金额。 
 异常消息	提示“客户可用额度欠款余额！”。将获得校验的异常信息进行抛出，然后回滚相关操作；
 9a		运单的部门、业务日期校验不通过。
 异常消息	提示“运单的部门和业务日期错误！”将获得校验的异常信息进行抛出，然后回滚相关操作；
 10a		如果小票付款方式校验不通过。	异常信息	提示“运单的付款方式校验不通过！”并异常信息进行抛出，然后回滚相关操作；
 11a		校验小票的金额，是否填写错误，是否大于0，输入是否超过两位小数		1.	提示“小票的金额，不能小于0填写错误！并异常信息进行抛出，然后回滚相关操作；“
 2.	提示，小票的金额输入错误，不能超过两位小数
 12a		如果付款付款方式为“网上支付”，且始发应收运费为0		3.	提示“付款方式为网上支付，始发应收运费不能为0”；

 1.7	业务规则
 序号	描述
 SR1		调用运单单号校验接口，判断单号是否符合运单单号或者小票规则是否真实存在，如果运单单号不符合规则并真实不存在，提示“单号不正确”，该操作结束；；
 SR2		1.将运单编码作为参数，查询作为来源运单编码查询应收单,判断是否存在对应的应收单个数是否大于1，存在则提示“该运单已经生成过相应的应收单，禁止重复调用”，该操作结束；
 2. 将小票编码作为参数，查询作为来源小票编码查询非现金应收单,判断是否存在对应的应收单个数是否大于1，存在则提示“该运单已经生成过非现金相关的应收单，禁止重复调用”，该操作结束；
 SR3		1、	如果运单的付款方式为到付，并且到付运费小于等于0时，提示“付款方式为到付，但是到付运费小于等于0”，该操作结束；
 2、	如果运单的付款方式为月结、临欠，并且预收金额（应收金额）小于等于0，提示“付款方式为临欠或月结，但是预收金额小于等于0“，该操作结束；
 3、	如果运单的付款方式为现付时，提示“付款方式为现付，不允许调用本接口”，该操作结束；如果付款方式为到付，预收金额必须等于0，否则提示“该运单的付款方式为到付，但预付金额不等于0”，该操作结束。
 如果运单的总运费不等于公开价运费运费、送货费、包装手续费、代收货款手续费、保价费、（其他费用-优惠费用）之和时，提示“总运费与运单明细之和不相等”，该操作结束；
 SR4		参见系统用例 SU-74查询_管理客户应收账款 判断客户是否存在月结资格，结果为false，则提示“该客户为非月结客户，不可以月结” 该操作结束
 SR5		参见系统用例 SU-74查询_管理客户应收账款，判断客户是否存在超期如果的结果为true，则提示“该客户存在超期欠款的业务，不可以继续欠款”，该操作结束；
 SR6		根据运单的发货客户编码，SU-74查询_管理客户应收账款,获得客户的可用额度；
 1、如果可用额度大于0，则将可用额度与预付金额进行比较，如果可用额度小于预付款金额时，抛出异常“该客户的可用额度不够，不可以继续欠款”，该操作结束；
 2、如果可用额度小于等于0，提示“该客户的可用额度小于等于0，不允许欠款”，该操作结束；
 SR7		1、运单的收货部门、接货部门、到达部门、录入部门其中一项为空时，提示“部门信息不完整”，该操作结束；
 SR8		1、参见系统用例 SU-74查询_管理客户应收账款,传递客户编码，应收单处理类型、生成、欠款金额调用接口扣减客户信用额度；
 SR9		1、	到付运费为0，始发应收等于应收总额，生成始发应收单
 应收总额：运单的预收总额；
 已收金额:0;
 未收金额：运单的预收总额；
 付款方式：运单的付款方式；
 结算客户：运单发货客户； 
 业务日期：运单的收货日期
 记账日期：服务器当前日期
 确认收入日期：空
 公布价运费：运单的运费；
 送货费：运单的送货费；
 包装手续费;运单的包装手续费；
 代收货款手续费：运单的代收货款手续费；
 保价费：运单的保价费；
 其他费用：运单的其他费用之和；
 优惠费用：优惠费用
 应收部门：运单的收货部门;
 收入部门：运单的收货部门；
 催款部门：始发部门；
 确定收入日期:签收日期；
 SR10		1、	到付运费大于0 并且到付款>大于代收货款，预付金额等于 0，生成到付运费应收单
 应收总额：运单的到付总额 – 代收货款；
 已收金额:0;
 未收金额：运单的到付总额 – 代收货款金额；
 付款方式：到付；
 结算客户：到付客户 
 业务日期：运单的收货日期
 记账日期：服务器当前日期
 确认收入日期：空；
 总运费：总运费
 公布价运费：运单的运费；
 送货费：运单的送货费；
 包装手续费;运单的包装手续费；
 代收货款手续费：运单的代收货款手续费；
 保价费：运单的保价费；
 其他费用：运单的其他费用之和；
 优惠费用：优惠费用
 应收部门：运单的到达部门;
 收入部门：运单的收货部门；
 催款部门：到达部门；
 确定收入日期:签收日期；
 SR11		1、	预付金额大于0并且（到付总额-代收货款） 大于0，部分付款，即部分始发欠款，对始发应收部分进行拆分，生成始发应收单；
 应收总额：预付金额；
 应收已收金额:0;
 应收未收金额：预付金额
 应收付款方式：运费付款方式；
 结算客户：运单发货客户； 
 业务日期：运单的开单收货日期
 记账日期：服务器当前日期
 总运费：总运费
 运费：运单的运费 × （运单的预付总额/（总运费））；
 送货费：运单的送货费 × （运单的预付总额/（总运费））；
 包装手续费;运单的包装手续费 × （运单的预付总额/（总运费））；
 代收货款手续费：运单的代收货款手续费 × （运单的预付总额/（总运费））；
 保价费：运单的保价费 × （运单的预付总额/（总运费））；
 其他费用：运单的预付总额 –运费 – 送货费 – 包装手续费 – 代收货款手续费 – 保价费
 优惠费用：优惠费用
 收入部门：运单的收货部门；
 催款部门：始发部门；
 确定收入日期:签收日期
 SR12		1、	预付金额大于0并且到付运费大于0（部分到付），对到达应收运费部分进行拆分，生成到付运费应收单
 应收总额：运单的预付总额；
 应收已收金额:0;
 应收未收金额：运单的预付总额；
 应收付款方式：运单的付款方式；
 结算客户：到付客户； 
 业务日期：运单的开单收货日期
 记账日期：服务器当前日期
 应收运费（到达运费）：总运费-（预付运费+代收货款）或者到付金额-代收货款；
 应收送货费：运单的送货费 –始发送货费；
 应收包装手续费;运单的包装手续费 -始发包装手续费；
 应收代收货款手续费：运单的代收货款手续费 –始发代收货款手续费；
 应收保价费：运单的保价费–始发保价费；
 应收其他费用：运单的其他费用-始发其他费用；
 优惠费用：优惠费用
 应收部门：运单的到达部门；
 收入部门：运单的收货部门
 催款部门：到达部门；
 确定收入日期:签收日期；
 SR13		1、	代收货款大于0，生成代收货款应收单；
 应收总额：代收货款金额；
 应收已收金额:0;
 应收未收金额：代收货款金额；
 应收付款方式：到付； 
 结算客户：到付客户； 
 业务日期：运单的开单收货日期
 记账日期：服务器当前日期
 确认收入日期：空
 运费：0；
 送货费：0；
 包装手续费;0；
 代收货款手续费：0；
 保价费：0；
 其他费用：0；
 优惠费用：优惠费用
 应收部门：运单的到达部门;
 收入部门：空；
 催款部门：到达部门
 SR14		1、	小票单号：单据上小票的编码
 2、	收入公司：开票所属公司
 3、	客户名称：客户名称
 4、	付款方式：月结
 5、	收入部门：收入部门
 6、	收入金额：小票金额
 7、	收款类型：小票的收费来源
 8、	运单号：如果关联运单，填写运单号
 SR15		从Foss综合去动态读取，Foss维护异地调货的客户名称，以及催款部门编码。

 1.8	数据元素
 1.8.1	运单信息（输入）

 收入部门编号	系统提供	数字		20	否	
 收入部门名称	收货部门	文本		50	是	
 到达部门编号	系统提供	数字		15	是	
 到达部门名称	到达部门名称	文本		30	是	
 运单单号	运单单号	数字型		10	否	
 应收单号	应收单号	数字类型		10	否	
 小票单号	小票单号	数字		8	否	
 支付方式	客户的付款方式	枚举		44	是	临欠、月结、网上支付
 派送方式	运单的派送方式	枚举		10	是	
 客户编码	发货客户编码	数字		20	是	
 客户名称	发货客户名称	文本		30	是	
 产品类型	产品类型	枚举		44	是	精准汽运（长途）\精准卡航\ 精准汽运（短途）\精准城运\ 汽运偏线 \精准空运
 预付金额	始发已付运费金额	数字		10，2	是	
 到付金额	由到达部门收取的运费金额	数字		10，2	是	
 代收货款金额	代收货款金额	数字		10，2	是	
 公布价运费	运费	数字		10，2	是	
 优惠费用	给客户的优惠，包含打折优惠券等	数字		10，2	是	
 送货费	送货费	数字		10，2	是	
 包装手续费	包装手续费	数字		10，2	是	
 增值服务费	增值服务费	数字		10,2	是	
 代收货款手续费	代收款手续费	数字		10，2	是	
 保价费	保价费	数字		10，2	是	
 其他费用	其他费用之和	数字		10，2	是	
 业务日期	运单的开单日期	日期		8	是	
 录入部门编码	运单录入部门	数字		44	是	
 录入部门名称	运单录入部门名称	字符		200	是	
 录入人	运单录入人名称	字符		44	是	
 单据来源	来源运单，来源小票	字符		44	是	
 记账日期	记账日期	日期		10	是	


 1.8.2	非现金小票应收单（输入）
 字段名称 	说明 	输入限制	输入项提示文本	长度	是否必填	备注
 小票单号	小票单号	数字型字符		8	是	无
 收入部门名称	部门名称	字符		20	是	无
 收入部门编码	部门所属子公司名称	字符		20	是	无
 运单单号	运单号	数字型字符		8	是	无
 客户编号	客户编号	数字型字符		20	是	无
 客户名称	客户名称	字符		50	是	无
 客户类型	客户，代理	数字		10		1.代表客户
 2.代表代理
 收款方式	付款方式	字符		20	是	无
 收款部门编码	收款部门编码	字符		20		无
 收款部门	收款部门	字符		50		无
 收入类别	收入类型	字符		15	是	无
 金额	应收金额	数字		10	是	金额为大于0 的整数
 录入人员	录入人姓名	字符		10	是	无
 录入时间	录入时间	日期		10	是	无
 录入部门	录入部门	字符		20	是	无
 创建时间	创建时间	日期		10	是	无
 更新时间	更新时间	日期		10	是	无
 来源单据类型	来源小票	数字		1	是	1.	代表运单
 2.	代表小票
 收款类别	小票的收款类别					3.	仓储费、接货费、送货费、废品、开票税金、返货费
 记账日期	记账日期	日期		10	是	无
 收款事项	收款来源、营业员、偏线操作员、收银员					1.	收款来源、营业员、偏线操作员、收银员

 1.8.3	应收单信息（输出）
 字段名称 	说明 (来源)	输出限制（类型，限制）	长度	是否必填	备注
 应收单号	系统产生	数字	20	是	
 运单单号	运单单号	数字	20	是	目前8位
 收入部门编码	收入部门编码	数字	20	是	
 收入部门名称	收入部门名称	字符	50	是	冗余字段
 催款部门编码	催款部门编码	数字	20	是	
 催款部门名称	催款部门名称	字符	50	是	从Foss综合去动态读取，Foss维护异地调货的客户名称，以及催款部门编码。
 到达部门编码	送货部门编码	数字	20	是	
 到达部门名称	送货部门名称	字符	50	是	
 支付方式	运单的付款方式	枚举	44	是	临欠、月结、网上支付
 客户编码	客户编码	数字	20	是	
 客户名称	发货客户名称	文本	20	是	
 产品类型	运单的产品类型	枚举	44	是	
 总运费	总运费	数字	10，2	是	参考核算规则
 已收款金额	已收款金额	数字	10,2	是	起始 0
 未收款金额	未收款金额	数字	10,2	是	
 公布价运费	运费	数字	10，2	是	参考核算规则
 送货费	送货费	数字	10，2	是	参考核算规则
 包装手续费	包装手续费	数字	10，2	是	参考核算规则
 代收货款手续费	代收货款手续费	数字	10，2	是	参考核算规则
 保价费	保价费	数字	10，2	是	参考核算规则
 其他费用	其他费用	数字	10，2	是	参考核算规则
 增值费用	增值费用	数字	10,2	是	
 优惠费用	优惠费用	数字	10,2	是	
 业务日期	运单的开单时间	日期	8	是	
 记账日期	记账日期	日期	8	是	
 版本号	版本号	整数	4	是	起始值1
 是否有效	应收单是否有效	布尔	1	是	默认值true，可简写T
 是否作废	当货物仍在收货部门仓库，若客户不发货或者发货人信息错误，需要作废运单	布尔	1	是	默认值false，可简写F
 是否红冲	当作废运单时，需要产生一条对应的红单，红冲生成的应收单	布尔	1	是	默认值false，可简写F
 是否初始化	初始化	布尔	1	是	默认值false 简写 F
 录入人	运单开单人	文本	44	是	
 录入部门	录入部门	字符	50	是	
 录入时间	当前系统服务器时间	日期	10	是	
 签收时间	运单签收时间	日期	10	是	
 来源单据编号	来源单据编号	数字	44	是	
 来源单据类别	来源运单、网上订单、来源小票	枚举	44	是	
 单据生成方式	人工录入、系统生成	枚举	44	是	
 单据创建日期	单据生成日期	日期	10	是	
 单据更新日期	单据更新日期	日期	10	是	

 1.8.4	非现金小票（输出）
 字段名称 	说明 	输入限制	输入项提示文本	长度	是否必填	备注
 部门名称	部门名称	字符		20	是	无
 所属子公司名称	部门所属子公司名称	字符		20	是	无
 客户名称	客户名称	字符		50	是	无
 客户编号	客户编号	编码		20	是	无
 小票编号	小票单号	编码		20	是	无
 金额	应收金额	数字		10	是	小票应收金额
 付款方式	付款方式	字符		  15	是	无
 版本号	小票对应的版本号	数字		10	是	无
 是否有效	标记该应收单是否有效	字符		10	是	无
 是否红单	标记该条应收单是否是红冲单据	字符		10	是	无
 是否初始化	标志该条应收单记录是否初始化	字符		10	是	无
 录入人员	制单人名称	字符		20	是	无
 录入时间	录入时间	日期		6	是	无
 单据子类型	单据对应子类型	字符		30	是	无
 业务日期	应收单发生的业务日期	日期		6	是	无
 记账日期	小票应收单的会计日期	日期		6	是	无
 录入人	单据制作人	字符		30	是	无
 录入日期	制单日期	日期		6	是	无
 产品类型	单据所对应货物的产品类型	字符		30	是	无
 创建时间	创建时间	日期		10	是	无
 更新时间	更新时间	日期		10	是	无
 来源单据类型	1.来源运单2.来源小票	数字		1	是	无
 收款类别	小票的收款类别			1	是	仓储费、接货费、送货费、废品、开票税金、返货费
 收款事项	收款来源、营业员、偏线操作员、收银员			20	是	收款来源、营业员、偏线操作员、收银员
 来源单据类别	来源运单、网上订单、来源小票	枚举	44	是		

 1.9	非功能性需求
 使用量	1.全网每月产生的应收单总量，截止到今年三月份2400238笔/月，部门最大使用量 52310/月，预计每年以60%速度增长  。
 2.小票的2000票/天
 2012年全网估计用户数	无
 响应要求（如果与全系统要求 不一致的话）	开单后异步生成，开单后响应5秒内响应
 使用时间段	00：00-24：00
 高峰使用时间段	14：00-18：00



 1.10	接口描述：
 接口名称 	对方系统（外部系统或内部其他模块）	接口描述
 无	无	无


 修订记录 
 日期 	修订内容 	修订人员 	版本号 
 2012-04-21 	创建版本	黄小波	V0.1
 2012-06-19	修改用例描叙，增加引用接送货系统用例条件，添加操作步骤，扩充步骤，数据元素，非功能性需求等	李琴	V0.5
 2012-07-11	修改  添加小票生成规则，数据元素等	李琴	V0.6
 2012-07-23	0.6版本改为0.9版本	李琴	V0.9
 2012-09-14	0.9版本存在文字描叙的错误	李琴	V1.0
 2012-10-12	1、SR3中提到"小票的预付金额大于0"，但小票界面的付款方式是选择的，没有预付金额这个字段，需要修改规则为："小票的付款方式为预付"
 2、设计上没有交账部门，那个收款就由那个部门缴款，故删除	李琴	V1.0

 1.	SUC-10生成现金收款单（接货开单）
 1.1	相关业务用例
 BUC_FOSS_4.7.10.10_010  现金与刷卡-接货开单
 BUC_FOSS_4.7.10.30_010  小票收入
 1.2	用例描述
 1.司机接到客户货物后或者客户直接在营业部、派送部（送货给客户时，客户要求发货，目前货量比较少）、接货开单查询组进行系统开单，并收取客户运输服务费，如果客户付款方式是现金（现金或者银行卡），在运单提交时调用此接口，生成财务单据现金收款单，以便后续统计进入财务报表；
 2.作为运单的补充的其它营业外收入，主要是营业部、派送部开的以现金（银行卡和现金）的小票单据,调用 此接口生成财务单据小票应收单。以便后续统计进入财务报表；
 3.查询现金收银报表，参见系统用例报表《DP-FOSS-结算系统用例-现金收入报表-V0.1.xls》
 1.3	用例条件
 条件类型	描述	引用系统用例
 前置条件	1	传入运单号，付款方式为现金或银行卡并且预付金额大于0。
 2	传入小票单号，付款方式为现金或者银行卡，并且金额大于0
 1.SUC-439-提交运单（接送货小组）
 2.SUC-17 生成应收单（接送货）
 3.SUC-2 -新增小票信息
 4.SUC-741查询/受理变更申请
 5.SUC-542 查询/审核变更申请
 后置条件	1.	生成现金收款单	
 1.4	操作用户角色
 操作用户	描述
 无	无
 1.5	界面要求
 1.5.1	表现方式
 接口
 1.5.2	界面原型
 无
 1.5.3	界面描述
 无
 1.6	操作步骤
 1.6.1	校验参数
 序号	基本步骤	相关数据	补充步骤
 1		校验单号是否正确	运单或小票	1.	检验传入单号，根据单据类型和长度，判读是运单还是小票号
 2.	如果是运单，校验运单单号是否真实存在有效， 扩展事件1a
 3.	如果是小票，校验小票，校验小票是否真实存在,扩展事件请参考1a
 2		校验是否重复调用接口	运单或小票	1.根据传入是运单还是小票，校验运单号和小票号对应是否重复生成现金收款单，参见扩展步骤2a。
 3		获取运单或者小票付款方式	运单或小票	1.先验证运单或者小票是否作废，参见-扩展步骤3a。
 2.校验运单付款方式是否正确，参考-扩展步骤4a。
 4		校验金额类字段是否正确	运单或小票	1.	如果是运单校验运金额单个字段有效性，参见扩展步骤5a。
 2.	如果是运单校验运单金额等内部数据有效性，参见扩展步骤6a。
 3.	如果是小票，校验小票的金额字段是否有效5a。
 5		校验发货客户编号和姓名	运单或小票	1.用户编码和姓名不能为空 7a
 6		校验产品类型有效性	运单或小票	1.	校验产品运输类型不能为空，如果不是，参见扩展步骤8a
 2.	产品类型为精准汽运（长途）、精准卡航、精准汽运（短途）、精准城运、 汽运偏线 、精准空运中一中。如果不是参见扩展步骤9a

 1.6.2	生成现金收款单

 序号	基本步骤	相关数据	补充步骤
 7		如果客户选择全额现金现付	输入：开单后，调用接口时传入参数，信息来源运单或小票
 输出：现金收款单	如果客户全额现付，参考业务规则SR1

 8		如果客户部分现付（到付大于0）	输入：开单后，调用接口时传入参数，信息来源运单
 输出：现金收款单	如果客户部分现付，业务规则参见SR2
 9		生成现金收款单		1.	根据单据类型来源运单或者来源小票生成对应的现金收款单



 序号	扩展事件	相关数据	备注
 1a		根据输入的运单和小票单号，调用运单校验接口，校验运单号是否存在。如果不存在。	异常消息	1．	如果传入是运单号，提示：“输入运单号不存在，不能继续执行操作！”操作终止。参考业务规则SR4
 2．	如果传入的是小票单据，提示“输入小票单号不存在，不能继续执行操作！” 操作终止。参考业务规则SR4
 2a		如果出入运单和小票编号对应的现金收款单编号，存在重复调用	异常消息	提示：“现金收款单，已经存在不能重复生成！操作终止“参考业务规则SR4
 3a		运单和小票记录是不是作废。	异常消息	1．	如果运单已经作废，提示：“该运单已经被作废，不能继续执行操作！” 参考业务规则SR4
 2．	如果小票已经作废，提示:“该运单已经被作废，不能继续执行操作！” 参考业务规则SR4
 4a		运单始发付款方式不是现金和银行卡（非临欠或者月结）。	异常消息	提示:“运单和小票的付款方式不正确，付款方式必须为现金或银行卡，不能继续执行相关操作” 参考业务规则SR4
 5a		小票的金额有效性	异常消息	判断小票金额是否为大于0等，不合法，提示:“小票的金额不正确”
 6a		校验运单金额，预付、到付、公布价运费、送货费、包装费、代收货款手续费、保价费，其它费用，优惠费用单个字段的有效性，其中任意一项为空或者小于0.	异常消息	提示“运单部分字段金额不正确，不能继续操作”操作终止。参考业务规则SR4
 7a		校验运单内部金额是否正确。如果运单的（预付+到付-代收货款）不等于（公布价运费、送货费、包装费、代收货款手续费、保价费、（其他费用-优惠费用）之和时	异常消息	提示“明细之和不等于总运费，不能继续操作”，该操作结束；参考业务规则SR4
 8a		产品运输类型不能为空	异常信息	提示：“产品运输类型不能为空！”
 9a		产品类型是否有效	异常信息	提示：“产品类型不正确”，生成操作，提示异常！

 1.7	业务规则
 序号	描述
 SR1		a)	如果运单的到付金额等于0，执行下列转换规则
 b)	现金收款单 ： 运单
 c)	现金总额：预付金额
 d)	公布价运费： 公布价运费；
 e)	送货费：送货费
 f)	包装手续费：包装手续费
 g)	代收货款手续费：代收货款手续费
 h)	保价费：保价费
 i)	其他费用：其它费用之和
 j)	收入部门：收货部门
 k)	收款客户：运单的发货客户
 SR2		a)	如果运单的到付金额大于0，并且预付金额大于0 ，执行下列转换规则
 b)	现金收款单 运单 
 c)	现金总额：运单预付金额
 d)	公布价运费：运单公布价运费 × (现付/（总运费））；
 e)	送货费：运单送货费  ×  (现付/（总运费））；
 f)	包装手续费：运单包装手续费  ×(现付/（总运费））；
 g)	代收货款手续费：运单代收货款手续费  × (现付/（总运费））；
 h)	保价费：运单保价费  ×  (现付/（总运费））；
 i)	其他费用：运单预付运费金额-公布价运费-送货费-运单包装手续费-代收货款手续费-保价费；
 j)	收入部门：运单的收货部门
 m)收款客户：运单的发货客户

 SR3		a)	如果小票的付款方式为预付，小票的支付现金金额大于0，执行以下转换规则
 b)	现金收款单：小票
 c)	现金总额：收入金额
 d)	收入公司：小票收入公司
 e)	收入部门：收入部门
 f)	收入人：收银员名称
 g)	收银时间：收银时间
 h)	收款类别：收银员、小票操作员 
 i)	收款事项：进仓费、放空费
 SR4	如果接口在执行过程中遇到异常信息，将异常信息抛出，然后对操作进行回滚。

 1.8	数据元素
 1.8.1	运单信息（输入）
 字段名称 	说明 (来源)	输入限制	提示信息	长度	是否必填	备注
 收入部门	收货部门	外键	无	44	是	
 收入公司	收货部门所属公司	外键	无	44	是	
 运单单号	开单运单单号	数字型字符	无	10	是	目前为8位
 收款方式	运单的付款方式	枚举	无	44	是	现金、银行卡
 派送方式	运单的派送方式	枚举	无	44	是	自提\送货上门
 客户编码	开单发货的客户编码	字符串	无	20	是	
 客户名称	开单发货的客户名称	字符串	无	200	是	
 产品类型	产品类型	枚举	无	44	是	精准汽运（长途）\精准卡航\ 精准汽运（短途）\精准城运\ 汽运偏线 \精准空运
 总运费	运单总运费	数字	无	10，2	是	
 公布价运费	运费	数字	无	10，2	是	
 送货费	送货费	数字	无	10，2	是	
 包装费	运单包装手续费	数字	无	10，2	是	
 代收货款手续费	运单代收收款手续费	数字	无	10，2	是	
 保价费	运单保价费	数字	无	10，2	是	
 其他费用	运单其它费用之和	数字	无	10，2	是	
 增值服务费	送货费+包装费+保价费+代收手续费+其他费用和	数字	无	10,2	是	
 优惠费率	优惠总合计，包括折扣、优惠券之类					
 预付金额	运单的预付金额	数字	无	10,2	是	
 到付金额	运单的到付金额	数字	无	10,2	是	
 业务日期	运单的开单时间	日期	无	8	是	
 到达部门编号	到达部门编号	文本	无	20	是	
 到达部门名称	到达部门名称	文本	无	50	是	
 录入部门编码	运单开单部门	外键	无	44	是	
 录入部门名称	运单开单名称	字符	无	200	是	
 录入人	运单录入人	外键	无	44	是	
 来源单据类型	现金收款单	字符	无	20	是	1．来源运单、2。来源小票
 记账日期	记账日期	日期	无	10	是	
 收银日期	收银日期	日期	无	10	是	
 确定收入日期	确定收入日期	日期	无	10	否	

 1.8.2	小票信息（输入）
 字段名称 	说明 	输入限制	输入项提示文本	长度	是否必填	备注
 小票单号	小票单号	数字型字符		8	是	无
 收入部门名称	部门名称	字符		20	是	无
 收入部门编码	部门所属子公司名称	字符		20	是	无
 运单单号	运单号	数字型字符		8	是	无
 客户编号	客户编号	数字型字符		20	是	无
 客户名称	客户名称	字符		50	是	无
 客户类型	客户，代理	数字		10		1.代表客户
 2.代表代理
 收款方式	付款方式	字符		20	是	无
 收款部门编码	收款部门编码	字符		20		无
 收款部门	收款部门	字符		50		无
 收入类别	收入类型	字符		15	是	无
 金额	应付金额	数字		10	是	金额为大于0 的整数
 录入人员	录入人姓名	字符		10	是	无
 录入时间	录入时间	日期		10	是	无
 录入部门	录入部门	字符		20	是	无
 创建时间	创建时间	日期		10	是	无
 更新时间	更新时间	日期		10	是	无
 记账日期	记账日期	日期		10	是	无
 来源单据类型	来源小票	数字		1	是	1.	代表运单
 2.	代表运单

 1.8.3	现金收款单信息（运单输出）
 字段名称 	说明 (来源)	输入限制	提示信息	长度	是否必填	备注
 现金收款单号	系统生成	字符	无	20	是	
 收入部门编码	收入部门编码	外键	无	44	是	
 收入部门名称	收入部门名称	字符	无	100	是	
 运单单号	运单单号	数字型字符	无	10	是	
 收款方式	运单的始发付款方式	枚举	无	44	是	现金、银行卡
 客户编码	运单客户编号	字符	无	200	是	
 客户名称	运单客户名称	字符	无	200	是	
 产品类型	运单的产品类型	枚举	无	44	是	精准汽运（长途）\精准卡航\ 精准汽运（短途）\精准城运\ 汽运偏线 \精准空运
 总运费	运单的预付金额	数字	无	10，2	是	
 公布价运费	运费	数字	无	10，2	是	
 送货费	送货费	数字	无	10，2	是	
 包装手续费	包装手续费	数字	无	10，2	是	
 代收货款手续费	代收货款手续费	数字	无	10，2	是	
 保价费	保价费	数字	无	10，2	是	
 其他费用	其他费用	数字	无	10，2	是	
 优惠费用	优惠费用	数字	无	10,2	是	
 业务日期	运单的开单时间	日期	无	8	是	
 单据状态	提交	枚举	无	44	是	
 版本号	版本号	整数	无	4	是	版本为1
 是否有效	是否有效	布尔	无	1	是	版本标记，默认为true
 是否作废	现金收款单是否作废	布尔	无	1	是	默认为false
 是否红冲	是否做过红冲	布尔	无	1	是	是否为红冲单，默认为false
 是否初始化	是否初始化	布尔	无	1	是	
 到达部门编号	到达部门编号	文本	无	20	是	
 到达部门名称	到达部门名称	文本	无	40	是	
 录入部门编号	运单录入部门编号	外键	无	44	是	
 录入部门名称	运单录入部门名称	字符	无	200	是	
 录入人名称	运单开单人名称	字符	无	44	是	
 录入日期	当前服务器时间	日期	无	8	是	
 来源单据编码	来源单据编码	数字	无	44	是	
 收银日期	收银确认操作日期	日期	无	11	否	
 来源单据类别	来源运单，网上订单	枚举	无	44	是	
 确定收入日期	运单签收日期	日期	无	10	是	
 来源单据类型	1.来源运单	数字	无	44	是	
 创建日期	创建日期	日期	无	10	是	
 更新日期	更新日期	日期	无	10	是	
 记账日期	记账日期	日期	无	10	是	

 1.8.4	现金收款单（小票输出）
 字段名称 	说明 	输入限制	输入项提示文本	长度	是否必填	备注
 部门名称	部门名称	字符		20	是	无
 所属子公司名称	部门所属子公司名称	字符		20	是	无
 客户名称	客户名称	字符		50	是	无
 客户编号	客户编号	编码		20	是	无
 小票编号	小票单号	编码		20	是	无
 金额	应收金额	数字		10	是	小票应收金额
 付款方式	付款方式	字符		  15	是	无
 版本号	小票对应的版本号	数字		10	是	无
 是否有效	标记该应收单是否有效	字符		10	是	无
 是否红单	标记该条应收单是否是红冲单据	字符		10	是	无
 是否初始化	标志该条应收单记录是否初始化	字符		10	是	无
 录入人员	制单人名称	字符		20	是	无
 录入时间	录入时间	日期		6	是	无
 单据子类型	单据对应子类型	字符		30	是	无
 业务日期	应收单发生的业务日期	日期		6	是	无
 记账日期	小票应收单的会计日期	日期		6	是	无
 录入人	单据制作人	字符		30	是	无
 录入日期	制单日期	日期		6	是	无
 产品类型	单据所对应货物的产品类型	字符		30	是	无
 创建时间	创建时间	日期		10	是	无
 更新时间	更新时间	日期		10	是	无
 来源单据类型	1.来源运单2.来源小票	数字		1	是	无

 1.9	非功能性需求
 使用量	现在处理的运单约为80000单/天
 2012年全网估计用户数	10000人
 响应要求（如果与全系统要求 不一致的话）	异步请求生成，可以再5秒之内响应
 使用时间段	7×24小时
 高峰使用时间段	全天

 1.10	接口描述：
 接口名称 	对方系统（外部系统或内部其他模块）	接口描述
 无	无	无

 修订记录 
 日期 	修订内容 	修订人员 	版本号 
 2012-04-26 	创建版本	黄小波	V0.1
 2012-07-20	添加相关业务用例、用例描叙、用例条件、操作步骤、业务规则、数据元素	李琴	V0.5
 2012-07-23	0.5变更为0.9	李琴	V0.9
 2012-10-17
 修改SR3相关描述。
 保轶
 V1.01

 2012-12-13	如果偏线外发单已经做了中转处理，则该外发单不再限制运单变更。
 保轶	V1.11
 2013-02-03	仓储费保管费	保轶	V1.11

 1.	SUC-14-红冲现金收款单
 1.1	相关业务用例
 BUC_FOSS_4.7.10.10_020 现金与刷卡-红冲现金收款单
 BUC_FOSS_4.7.70.10_010  （变更运单）
 BUC_FOSS_4.7.10.30_030   红冲小票
 1.2	用例描述
 1.营业部、派送部、接货开单查询组营业员已经完成系统开单，客户要求放弃服务停止发货，或者营业部、派送部、接货开单查询组检查发现金额相关信息错误收银员需要修改纠正错误现金单据信息
 2. 营业部在检查小票单据时发现小票数据信息与实际情况不一致，需要对其进行红冲，由营业部经理对小票进行作废处理
 1.3	用例条件
 条件类型	描述	引用系统用例
 前置条件	1.	运单存在对应的现金收款单；
 2.	小票存在对应的现金收款单
 3.	不存在未受理的更改单	1.	SUC-543 作废运单
 2.	SUC-542 查询/审核变更申请
 3.	SUC-513中止运单
 后置条件	1.红冲开单时生成的现金收款单	
 1.4	操作用户角色
 操作用户	描述
 无	无
 1.5	界面要求
 1.5.1	表现方式
 接口
 1.5.2	界面原型
 无
 1.5.3	界面描述
 无
 1.6	操作步骤
 1.6.1	校验参数
 序号	基本步骤	相关数据	补充步骤
 1	校验单据编码与单据类别	红冲现金收款单参数	1.	如果单据类别为“运单”时，执行规则SR1；校验不通过参考扩展事件1a
 2.	如果单据类别为“小票”，执行规则SR2校验不通过参考扩展事件1a
 2	校验传入的运单和小票，对应的应收单单据。    	红冲现金收款单	1.查找运单和小票是否有相应的现金收款单。扩展规则参见-2a
 2.获取运单和小票对应现金收款单的状态是否有效。扩展规则参见3a
 3.获取运单对应的现金收款单是否为红单。如果为红单则提示用户，参见业务规则SR3。扩展步骤为3a

 3	校验传入的部门编码是否为空	红冲现金收款单参数	1.执行规则参考SR4；校验不通过参考扩展事件3a；
 1.6.2	红冲现金收款单
 序号	基本步骤	相关数据	补充步骤
 1、		根据单号、单据类别、收入部门获得有效版本的现金收款单	红冲现金收款单参数	规则参考：SR5，如果无法获取相应扩展事件1a
 2、		判断能否进行红冲	现金收款单
 小票收款单	规则参考：SR6，不能红冲参考扩展事件1a
 3、		生成红冲版本的现金收款单	现金收款单
 小票收款单	规则参考：SR7
 4、		将先前有效版本的现金收款单更改为无效	现金收款单	

 序号	扩展事件	相关数据	补充步骤
 1a		校验不通过，抛出异常	红冲现金收款单参数	将异常消息抛出，并终止相关的操作；
 2a		运单对应现金收款单号，没有找到或者为空	红冲现金收款单参数	提示没有找到“没有运单编号为：’12345’”对应现金收款单“
 3a		运单对应现金收款单，是红单	红冲现金收款单参数	提示“红单的现金收款单不能做红冲“：


 1.7	业务规则
 序号	描述
 SR1	校验运单校验规则运单长度是否正确，运单是否真实存在，如果运单单号不正确提示信息“运单号不正确”，该操作结束；如果运票不存在，提示“运单号不存在”
 SR2	判断小票号长度是否正确，如果小票单号不正确，则提示“小票单号不正确”，该操作结束；如果小票不存在，提示“运单号不存在”
 SR3	红单不能再次红冲。

 SR4	判断收入部门是否为空，如果收入部门不为空，操作继续；否则提示信息“收入部门不正确，不允许为空”，该操作结束；
 SR5	根据“红冲现金收款单参数”，有效版本的查询现金收款单，如果返回的结果不为空，操作继续；否则提示信息“不存在对应有效版本的现金收款单”，并跳转到SR7；
 SR6	1、	判断现金收款单的记账日期与当前记账期间时间差，如果时间差超过30天（时间差，可配置在Foss基础资料中维护），则提示“超出结算业务红冲的最大时间范围，该操作不允许继续”，该操作结束；
 2、如果来源单据类别为运单，并且运单对应的结算单据进行了下列操作，则不允许对现金收款单进行红冲：
 2.1运单对应的应收单、应付单已核销，提示“对应的应收单、应付单已经核销，不能进行红冲”；
 2.2 运单对应的客户对账单已确认、核销、付款、还款，提示“对应的客户对账单已经进行确认操作，不能进行红冲”；
 2.3 运单存在始发运费应收单或到付运费应收单，客户在网上营业厅进行了支付锁定，提示“客户在网上已经将运单进行了锁定,不能进行红冲”；
 2.4 代收货款应付单的支付状态为资金部冻结、汇款中、已汇款之一，提示“该运单的代收货款应付单已经被资金部锁定或准备汇款或已经汇款，不能进行红冲”；
 2.5偏线外发反馈已录入、专线到付运费已经货款结清,提示“存在对应的偏线外发反馈录入单或专线到付运费已经货款结清，不能进行红冲操作”。如果偏线外发单已经做了中转处理，则该外发单不再限制运单变更。
 2.6专线、空运、偏线业务已经签收，提示“该单已经被签收，不能进行红冲”；
 2.7如果传入运单的存在对应服务补救、理赔申请、坏账申请，并且对应的处理状态为申请中或者处理已完结，提示“该单存在相应的服务补救、理赔申请、坏账申请，不能进行红冲”；
 SR7	1、生成新的红冲现金收款单，红冲现金收款单内容除记账日期、金额类字段、版本、有效标识、红冲标识、制作人之外，内容与有效的现金收款字段保持一致，
 2、如果原有效版的记账日期不为空，则记账日期为服务器当前日期，否则记账日期保持为空；
 3、金额类字段包括有总运费、公布价运费、增值服务费（送货费、包装手续费、代收货款手续费、保价费、其他费用<营业员可根据业务需要填入公司现有业务如保管费等>）、优惠运费、等字段；
 4、红冲现金收款单：金额类字段 = 有效版本的现金收款单金额字段 * -1(即取反);
 5、红冲现金收款单有效标识为否,红单标识为是,版本 = 有效版本的现金收款单版本 + 1；

 1.8	数据元素
 1.8.1	红冲现金收款单参数、小票(输入)
 字段名称	说明	输入限制	长度	输入提示	是否必填	备注
 运单号	运单号	字符	10	无	是	
 小票单号	小票单号	字符	10	无	否	如果传入小票单号不为空
 收入部门	收货部门	字符	29	无	是	
 1.8.2	现金收款单、小票(输出)
 字段名称	说明	输入限制	长度	输出提示	是否必填	备注
 收入部门编码	收货部门名称	外键	44	无	是	采用uuid进行外键关联
 收入部门名称	收货部门名称	字符	100	无	是	冗余字段
 收款部门编号	收款部门编号	字符		无		
 收款部门名称	收款部门名称	字符		无		
 运单单号	运单单号	数字	10	无	是	目前为8位
 小票单号	小票单号	数字	10	无	否	
 收款方式	收款方式	枚举	44	无	是	现金、银行卡
 产品类型	目前六种产品类型	枚举	44	无	是	
 总运费	总金额	数字	10，2	无	否	
 公布价运费	运费	数字	10，2	无	否	
 优惠运费	优惠运费	数字	10，2	无	否	
 送货费	送货费	数字	10，2	无	否	
 包装手续费	包装手续费	数字	10，2	无	否	
 代收货款手续费	代收手续费	数字	10，2	无	否	
 保价费	保价费	数字	10，2	无	否	
 其他费用	其它费用	数字	10，2	无	否	
 金额	小票收入金额	数字	10，2	无	否	
 收入类型	小票收入类型	字符				
 收入款项名称	小票收入款项	字符	50	无	否	保管费、放空费
 业务日期	收款单的发货日期	日期	10	无	是	
 创建人	创建人	字符	50	无	否	
 创建日期	创建日期	日期	10	无	否	
 变更人	变更人	字符	50	无	否	
 变更日期	变更日期	日期	10	无	否	
 记账日期	记账日期	日期	10	无	是	
 单据状态	提交	枚举	44	无	是	
 版本号	版本号	整数	4	无	是	第一次调用本接口，版本为1
 是否有效	是否有效	布尔	1	无	是	
 是否作废	false	布尔	1	无	是	作废后不可以还可以红冲
 是否红冲	是否红冲	布尔	1	无	是	红冲后状态为true，默认为false
 是否初始化	是否为初始化	布尔	1	无	是	默认为False
 录入部门编码	制单部门编码	数字	44	无	是	
 录入人	现金收款单录入部门名称	字符	200	无	是	
 录入名称	现金收款单录入名称	外键	44	无	是	
 录入时间	当前服务器时间	日期	10	无	是	
 来源单据编号	单据来源编号	字符	44	无	是	
 到达部门	到达部门	字符	50	无	是	
 来源单据类别	现金收款单	枚举	44	无	是	
 锁定时间	网上支付时，应收单锁定截止的日期	日期	10	无	否	


 1.9	非功能性需求
 使用量	目前80000/天，预计每年增加60%
 2012年全网估计用户数	10000人
 响应要求（如果与全系统要求 不一致的话）	高并发，必须保证5s完成响应
 使用时间段	7×24小时
 高峰使用时间段	14：00-18：00

 1.10	接口描述：
 接口名称 	对方系统（外部系统或内部其他模块）	接口描述
 无	无	无


 修订记录 
 日期 	修订内容 	修订人员 	版本号 
 2012-04-26 	创建版本	黄小波	V0.1
 2012-07-20	添加相关业务用例、用例描叙、用例条件、操作步骤、业务规则、数据元素	李琴	V0.5
 2012-07-23	0.5变更为0.9	李琴	V0.9
 2012-10-17
 修改SR3相关描述。
 保轶
 V1.01

 2012-12-13	如果偏线外发单已经做了中转处理，则该外发单不再限制运单变更。
 保轶	V1.11
 2013-02-03	仓储费保管费	保轶	V1.11

 1.	SUC-14-红冲现金收款单
 1.1	相关业务用例
 BUC_FOSS_4.7.10.10_020 现金与刷卡-红冲现金收款单
 BUC_FOSS_4.7.70.10_010  （变更运单）
 BUC_FOSS_4.7.10.30_030   红冲小票
 1.2	用例描述
 1.营业部、派送部、接货开单查询组营业员已经完成系统开单，客户要求放弃服务停止发货，或者营业部、派送部、接货开单查询组检查发现金额相关信息错误收银员需要修改纠正错误现金单据信息
 2. 营业部在检查小票单据时发现小票数据信息与实际情况不一致，需要对其进行红冲，由营业部经理对小票进行作废处理
 1.3	用例条件
 条件类型	描述	引用系统用例
 前置条件	1.	运单存在对应的现金收款单；
 2.	小票存在对应的现金收款单
 3.	不存在未受理的更改单	1.	SUC-543 作废运单
 2.	SUC-542 查询/审核变更申请
 3.	SUC-513中止运单
 后置条件	1.红冲开单时生成的现金收款单	
 1.4	操作用户角色
 操作用户	描述
 无	无
 1.5	界面要求
 1.5.1	表现方式
 接口
 1.5.2	界面原型
 无
 1.5.3	界面描述
 无
 1.6	操作步骤
 1.6.1	校验参数
 序号	基本步骤	相关数据	补充步骤
 1	校验单据编码与单据类别	红冲现金收款单参数	1.	如果单据类别为“运单”时，执行规则SR1；校验不通过参考扩展事件1a
 2.	如果单据类别为“小票”，执行规则SR2校验不通过参考扩展事件1a
 2	校验传入的运单和小票，对应的应收单单据。    	红冲现金收款单	1.查找运单和小票是否有相应的现金收款单。扩展规则参见-2a
 2.获取运单和小票对应现金收款单的状态是否有效。扩展规则参见3a
 3.获取运单对应的现金收款单是否为红单。如果为红单则提示用户，参见业务规则SR3。扩展步骤为3a

 3	校验传入的部门编码是否为空	红冲现金收款单参数	1.执行规则参考SR4；校验不通过参考扩展事件3a；
 1.6.2	红冲现金收款单
 序号	基本步骤	相关数据	补充步骤
 1、		根据单号、单据类别、收入部门获得有效版本的现金收款单	红冲现金收款单参数	规则参考：SR5，如果无法获取相应扩展事件1a
 2、		判断能否进行红冲	现金收款单
 小票收款单	规则参考：SR6，不能红冲参考扩展事件1a
 3、		生成红冲版本的现金收款单	现金收款单
 小票收款单	规则参考：SR7
 4、		将先前有效版本的现金收款单更改为无效	现金收款单	

 序号	扩展事件	相关数据	补充步骤
 1a		校验不通过，抛出异常	红冲现金收款单参数	将异常消息抛出，并终止相关的操作；
 2a		运单对应现金收款单号，没有找到或者为空	红冲现金收款单参数	提示没有找到“没有运单编号为：’12345’”对应现金收款单“
 3a		运单对应现金收款单，是红单	红冲现金收款单参数	提示“红单的现金收款单不能做红冲“：


 1.7	业务规则
 序号	描述
 SR1	校验运单校验规则运单长度是否正确，运单是否真实存在，如果运单单号不正确提示信息“运单号不正确”，该操作结束；如果运票不存在，提示“运单号不存在”
 SR2	判断小票号长度是否正确，如果小票单号不正确，则提示“小票单号不正确”，该操作结束；如果小票不存在，提示“运单号不存在”
 SR3	红单不能再次红冲。

 SR4	判断收入部门是否为空，如果收入部门不为空，操作继续；否则提示信息“收入部门不正确，不允许为空”，该操作结束；
 SR5	根据“红冲现金收款单参数”，有效版本的查询现金收款单，如果返回的结果不为空，操作继续；否则提示信息“不存在对应有效版本的现金收款单”，并跳转到SR7；
 SR6	1、	判断现金收款单的记账日期与当前记账期间时间差，如果时间差超过30天（时间差，可配置在Foss基础资料中维护），则提示“超出结算业务红冲的最大时间范围，该操作不允许继续”，该操作结束；
 2、如果来源单据类别为运单，并且运单对应的结算单据进行了下列操作，则不允许对现金收款单进行红冲：
 2.1运单对应的应收单、应付单已核销，提示“对应的应收单、应付单已经核销，不能进行红冲”；
 2.2 运单对应的客户对账单已确认、核销、付款、还款，提示“对应的客户对账单已经进行确认操作，不能进行红冲”；
 2.3 运单存在始发运费应收单或到付运费应收单，客户在网上营业厅进行了支付锁定，提示“客户在网上已经将运单进行了锁定,不能进行红冲”；
 2.4 代收货款应付单的支付状态为资金部冻结、汇款中、已汇款之一，提示“该运单的代收货款应付单已经被资金部锁定或准备汇款或已经汇款，不能进行红冲”；
 2.5偏线外发反馈已录入、专线到付运费已经货款结清,提示“存在对应的偏线外发反馈录入单或专线到付运费已经货款结清，不能进行红冲操作”。如果偏线外发单已经做了中转处理，则该外发单不再限制运单变更。
 2.6专线、空运、偏线业务已经签收，提示“该单已经被签收，不能进行红冲”；
 2.7如果传入运单的存在对应服务补救、理赔申请、坏账申请，并且对应的处理状态为申请中或者处理已完结，提示“该单存在相应的服务补救、理赔申请、坏账申请，不能进行红冲”；
 SR7	1、生成新的红冲现金收款单，红冲现金收款单内容除记账日期、金额类字段、版本、有效标识、红冲标识、制作人之外，内容与有效的现金收款字段保持一致，
 2、如果原有效版的记账日期不为空，则记账日期为服务器当前日期，否则记账日期保持为空；
 3、金额类字段包括有总运费、公布价运费、增值服务费（送货费、包装手续费、代收货款手续费、保价费、其他费用<营业员可根据业务需要填入公司现有业务如保管费等>）、优惠运费、等字段；
 4、红冲现金收款单：金额类字段 = 有效版本的现金收款单金额字段 * -1(即取反);
 5、红冲现金收款单有效标识为否,红单标识为是,版本 = 有效版本的现金收款单版本 + 1；

 1.8	数据元素
 1.8.1	红冲现金收款单参数、小票(输入)
 字段名称	说明	输入限制	长度	输入提示	是否必填	备注
 运单号	运单号	字符	10	无	是	
 小票单号	小票单号	字符	10	无	否	如果传入小票单号不为空
 收入部门	收货部门	字符	29	无	是	
 1.8.2	现金收款单、小票(输出)
 字段名称	说明	输入限制	长度	输出提示	是否必填	备注
 收入部门编码	收货部门名称	外键	44	无	是	采用uuid进行外键关联
 收入部门名称	收货部门名称	字符	100	无	是	冗余字段
 收款部门编号	收款部门编号	字符		无		
 收款部门名称	收款部门名称	字符		无		
 运单单号	运单单号	数字	10	无	是	目前为8位
 小票单号	小票单号	数字	10	无	否	
 收款方式	收款方式	枚举	44	无	是	现金、银行卡
 产品类型	目前六种产品类型	枚举	44	无	是	
 总运费	总金额	数字	10，2	无	否	
 公布价运费	运费	数字	10，2	无	否	
 优惠运费	优惠运费	数字	10，2	无	否	
 送货费	送货费	数字	10，2	无	否	
 包装手续费	包装手续费	数字	10，2	无	否	
 代收货款手续费	代收手续费	数字	10，2	无	否	
 保价费	保价费	数字	10，2	无	否	
 其他费用	其它费用	数字	10，2	无	否	
 金额	小票收入金额	数字	10，2	无	否	
 收入类型	小票收入类型	字符				
 收入款项名称	小票收入款项	字符	50	无	否	保管费、放空费
 业务日期	收款单的发货日期	日期	10	无	是	
 创建人	创建人	字符	50	无	否	
 创建日期	创建日期	日期	10	无	否	
 变更人	变更人	字符	50	无	否	
 变更日期	变更日期	日期	10	无	否	
 记账日期	记账日期	日期	10	无	是	
 单据状态	提交	枚举	44	无	是	
 版本号	版本号	整数	4	无	是	第一次调用本接口，版本为1
 是否有效	是否有效	布尔	1	无	是	
 是否作废	false	布尔	1	无	是	作废后不可以还可以红冲
 是否红冲	是否红冲	布尔	1	无	是	红冲后状态为true，默认为false
 是否初始化	是否为初始化	布尔	1	无	是	默认为False
 录入部门编码	制单部门编码	数字	44	无	是	
 录入人	现金收款单录入部门名称	字符	200	无	是	
 录入名称	现金收款单录入名称	外键	44	无	是	
 录入时间	当前服务器时间	日期	10	无	是	
 来源单据编号	单据来源编号	字符	44	无	是	
 到达部门	到达部门	字符	50	无	是	
 来源单据类别	现金收款单	枚举	44	无	是	
 锁定时间	网上支付时，应收单锁定截止的日期	日期	10	无	否	


 1.9	非功能性需求
 使用量	目前80000/天，预计每年增加60%
 2012年全网估计用户数	10000人
 响应要求（如果与全系统要求 不一致的话）	高并发，必须保证5s完成响应
 使用时间段	7×24小时
 高峰使用时间段	14：00-18：00

 1.10	接口描述：
 接口名称 	对方系统（外部系统或内部其他模块）	接口描述
 无	无	无


 修订记录 
 日期 	修订内容 	修订人员 	版本号 
 2012-4-21	创建版 	王智梅	V0.1
 2012-6-11	根据内部审查修改	王智梅	V0.1
 2012-6-26	根据审核修改	武江涛	V0.1
 2012-7-17	统一编码修改	武江涛	V0.5
 2012-7-24	版本升级，修改版本号	武江涛	V0.9
 2013-02-25	根据ISSUE-1529，增加按照来源单号查询	王学敏	V1.2
 2013-3-5	增加按单号查询，数据权限描述	武江涛	V1.2

 1.	SUC-12 查询现金收款单
 1.1	相关业务用例
 BUC_FOSS_4.7.10.10_010  现金与刷卡-接货开单
 BUC_FOSS_4.7.10.30_010  小票收入

 1.2	用例描述
 收银员根据记账日期、业务日期、运单号、客户名称（编码）、单据状态查询出现金收款单信息，查询出的现金收款单可以导出。
 1.3	用例条件
 条件类型	描述	引用系统用例
 前置条件		
 后置条件	1.	在界面显示查询的现金收款单	
 1.4	操作用户角色
 操作用户	描述
 收银员	查询本部门的现金收款单数据
 会计	查询管辖范围内部门的现金收款单数据
 1.5	界面要求
 1.5.1	表现方式
 Web
 1.5.2	界面原型
 按日期查询界面

 按运单号查询界面

 按来源单号查询界面

 现金收款单明细界面

 1.5.3	界面描述
 查询条件界面
 	页面初始化组件描述：
 1.	当选择按业务日期查询时，开始日期和结束日期是指运单业务时间；当选择按记账日期查询时，开始时间和结束时间是指现金收款单的记账日期；系统默认选择按业务日期查询，页面初始化时系统自动提供默认值为当前用户登录日期，用户也可以通过选择、直接修改的方式修改日期数据；
 2.	有效版本：初始化时默认为“全部”； 
 3.	付款方式：初始化时默认为“全部”；
 4.	单据状态：初始化时默认为“全部”；
 5.	收款部门：若登录用户角色是收银员，收款部门默认为登录人所在部门；若登录用户角色是会计，收款部门默认为空；
 6.	运单号：初始化时组件中显示“请输入一个或10个内的多个运单号，单号之间用半角逗号隔开”；
 7.	来源单号：同上
 	页面输入组件描述：
 1.	收款部门：公共选择框；
 2.	收入部门：公共选择框；
 3.	客户信息：公共选择框；
 4.	运单号：输入框，用户可输入一个或多个运单号进行查询，单号之间用输入法半角状态逗号隔开；
 	是否有效版本以下拉列表形式显示，内容为：
 	是
 	否
 	付款方式以下拉列表形式显示，在数据字典维护，内容为：
 	现金
 	银行卡
 	单据状态以下拉列表形式显示，在数据字典维护，内容为：
 	提交
 	收银确认
 	查询条件界面提供以下按钮：
 	查询：点此按钮，根据查询条件查询出结果，现金收款单列表界面显示查询结果
 	重置：点此按钮将查询条件还原为初始化状态
 	按来源单号查询：
 需要能够支持按照运单号和小票单号来查询。
 现金收款单列表界面
 	页面初始化组件描述：
 1.	金额：查询结果金额合计，系统自动对查询出的数据进行金额合计计算，并显示在每一页的左下角；
 2.	条数：查询结果条数合计； 
 	每页最大显示条数以下拉列表形式显示，内容为：
 	500
 	1000
 	5000
 	页面表格组件功能描述：
 1.	页面初始化时，不显示查询结果集；
 2.	用户可以对查询出的结果通过多选框选择一条或者多条记录，可以通过点击结果集列表左上角第一个多选框，实现对结果集信息的全选和清空操作；
 3.	用户可以分别通过业务日期、记账日期、付款方式、单据状态、收款部门、收入部门升序或者降序排列；
 4.	用户可以自定义显示结果集中的数据列；
 5.	结果集分页，且用户可选择每页最多显示条数，结果集的宽和高长度固定，横向和竖向以滚动条的形式显示
 	列表界面提供以下按钮：
 	导出：点此按钮可以导出选中的服务补救申请，未选择时默认为导出界面中所有记录
 	查看明细 ：点此按钮可弹出查看该条记录的详细信息对话框
 	现金收款单明细界面
 界面中的组件与数据元素现金收款单列表信息（输出数据）一致
 1.6	操作步骤
 1.6.1	查询
 序号	基本步骤	相关数据	补充步骤
 1	页面初始化	付款方式、单据状态、收款部门信息	1.	系统默认选择按业务日期查询界面
 2.	调用综合管理子系统查询出现金和银行卡两种付款类型填充付款类型下拉列表
 3.	调用综合管理子系统查询出提交和收银确认两种单据状态填充单据状态下拉列表
 参见业务规则SR1
 2	选择按业务日期/记账日期查询	现金收款单信息	
 3	选择是否有效版本	现金收款单信息	
 4	选择开始日期及结束日期		参见业务规则SR2
 5	选择收货部门	公共选择框（部门）	参见业务规则SR3
 6	选择收入部门和客户信息	公共选择框（部门、客户）	
 7	选择付款方式和单据状态		
 8	输入运单号或来源单号		1.	系统自动忽略运单号前后的空格；
 2.	检查输入运单号格式合法性
 参见业务规则SR4
 9	点击“查询”按钮	现金收款单信息	1.	系统检查查询条件必填项是否已填
 2.	系统根据选择的查询条件查询数据，并显示在现金收款单列表界面；
 3.	查询出记录后，原查询条件不清空，可用于下一次查询；
 参见业务规则SR5
 10	点击“重置”按钮		将查询界面所有已填入和选择的查询条件变为初始化状态
 1.6.2	查看明细
 序号	基本步骤	相关数据	补充步骤
 10	点击 “查看明细”按钮	现金收款单信息	1.弹出该条记录的详细信息界面（参见现金收款单明细界面），该界面包含了该条记录所有信息
 1.6.3	导出
 序号	基本步骤	相关数据	补充步骤
 11	选中一条或多条记录	现金收款单信息	选中的记录首行的选择框 打钩，同时该条记录标记颜色
 12	点击“导出”按钮	现金收款单信息	1.	调用导出数据接口，导出已选择的现金收款单信息，未选择默认为导出查询出的所有信息
 参见业务规则SR6
 1.6.4	扩展事件
 序号	扩展事件	相关数据	备注
 4a	日期为空		失去焦点时输入框附近显示红色字体提示“请选择查询日期”
 4b	开始日期大于结束日期		提示“开始日期不能大于结束日期!”
 4c	开始日期与结束日期相差大于31天		提示“开始日期与结束日期之间不能大于31天，请从新选择日期！”
 8a	运单号为空		失去焦点时输入框附近显示红色字体提示“请至少输入一个运单号”
 8b	当输入的运单号个数超过10个时，不能再进行输入		提示“你好，输入的预收单号数量不能超过10个！”
 9b	查询结果为空		弹出提示“无符合条件的数据”

 1.7	业务规则
 序号	描述
 SR1	1.系统初始化的开始时间和结束时间默认相差0天；
 SR2	1.	日期范围最大不超过31天
 SR3	1.	收银员不能查询除本部门以外部门的现金收款单数据；会计可查询所管辖范围内部门的数据；
 2.	会计选择部门时可多选；
 SR4	1.	输入的运单号的个数不能超过10个且不能为空；
 2.	查询增加数据权限控制，只能查询出（应收部门/收入部门/始发部门为）当前登录用户客户可操作的营业部数据
 SR5	1.	用户可自定义显示字段和隐藏字段；
 SR6	1.	导出的数据以EXCEL表格的形式显示
 2.	若用户已选择了一条或多条记录（在记录的复选框中打钩），则导出的是用户所选择的记录；若用户未选择任何记录，则无论是否分页，导出的是查询出的所有记录；

 1.8	数据元素
 1.8.1	查询条件（输入信息）
 字段名称	说明 	输入限制	输入项提示文本	长度	是否必填	备注
 按业务日期查询	单选框	默认+手动选择	开单日期	6	否	按业务日期查询和按记账日期查询，只能选其一
 按记账日期查询	单选框	手动选择	现金收款单最新变动日期	6	否	
 有效版本	下拉选择框	手动选择	选择时只查询有效版本，不选查询所有	6	否	选择时只查询有效版本数据，不选时查询有效和无效版本数据
 开始日期		手动选择		6	是	
 结束日期		手动选择		6	是	
 收款部门	公共选择框	默认+手动选择		50	否	可多选
 收入部门	公共选择框	手动选择			否	可多选
 客户信息	公共选择框	手动选择		50	否	
 付款方式	综合管理数据字典	手动选择		10	否	付款方式：现金、银行卡
 单据状态	综合管理数据字典	手动选择		10	否	单据状态：提交、收银确认
 运单号		手动输入		100	是	

 1.8.2	现金收款单信息（输出元素）
 字段名称 	说明 	输出限制	输入项提示文本	长度	是否必填	备注
 单据编号	单据编号	系统获取		20	是	
 运单号	运单号	系统获取		20	是	
 客户名称	客户名称	系统获取		100	是	
 客户编码	客户编码	系统获取		20	是	默认界面隐藏此字段
 收入部门	收入部门	系统获取		100	是	
 收入部门编码	收入部门编码	系统获取		20	是	默认界面隐藏此字段
 收款部门	开单部门	系统获取		100	是	
 收款部门编码	开单部门编码	系统获取		20	是	默认界面隐藏此字段
 收入部门所属子公司	收入部门所属子公司	系统获取		100	是	
 收入部门所属子公司编码	收入部门所属子公司编码	系统获取		20	是	默认界面隐藏此字段
 收款部门所属子公司	收款部门所属子公司	系统获取		100	是	
 收款部门所属子公司编码	收款部门所属子公司编码	系统获取		20	是	默认界面隐藏此字段
 单据状态	现金收款单的单据状态	系统获取		20	是	提交、收银确认
 金额	开单现金/银行卡金额	系统获取		10	是	
 单据子类型	“现金收款单”	系统获取		20	是	
 付款方式	付款方式	系统获取		20	是	现金或银行卡
 运费	货物运费	系统获取		10	是	
 接货费收入	接货费	系统获取		6	是	
 送货费	送货费	系统获取		6	是	
 包装收入	包装费	系统获取		6	是	
 代收货款手续费收入	代收货款手续费	系统获取		6	是	
 保价收入	保险费	系统获取		6	是	
 其他	其他费用	系统获取		6	是	
 小票	小票收入	系统获取		6	是	
 产品类型	运单运输性质	系统获取		20	是	包括：精准空运、精准卡航、精准城运、精准汽运（长途）、精准汽运（短途）、汽运偏线
 版本号	现金收款单的版本号	系统获取		2	是	
 是否有效版本	版本标记	系统获取		2	是	
 是否红单	是否为红冲单	系统获取		2	是	
 业务日期	运单业务日期	系统获取		10	是	
 记账日期	现金收款单最新变动日期	系统获取		10	是	
 制单人	运单开单人	系统获取		20	是	
 制单人工号		系统获取		10	是	默认界面隐藏此字段
 收银员	收银确认人姓名	系统获取		10	否	默认界面隐藏此字段
 收银员工号		系统获取		10	是	默认界面隐藏此字段
 收银日期	收银确认日期	系统获取		6	否	默认界面隐藏此字段
 是否初始化数据	数据是否来源于初始化	系统获取		2	是	默认界面隐藏此字段
 备注	备注说明	系统获取		100	是	默认界面隐藏此字段

 1.9	非功能性需求
 使用量	目前每天产生的现金收款单总量约为40000笔，每年以60%的速度增长
 2012年全网估计用户数	收银员总数量约2236名(截止2012.4.12，其增长速度与网点增长速度成正比)
 目前检查会计数量为约为300人
 响应要求（如果与全系统要求 不一致的话）	查询在3秒内响应；
 使用时间段	正常上班时间（9:30-21:30）
 高峰使用时间段	收银员每天盘点期间（16:00-21:30）

 1.10	接口描述：
 接口名称 	对方系统（外部系统或内部其他模块）	接口描述
 查询部门信息接口	FOSS-综合管理子系统	根据当前登录用户查询出部门信息
 查询客户信息接口	FOSS-综合管理子系统	根据输入的字符模糊查询出客户名称和编码

 修订记录
 日期 	修订内容 	修订人员 	版本号 
 2012-05-08	创建版	李琴	V0.1 
 2012-05-17	修改版，用户评审后，部门信息修改，界面调整	李琴	V0.5
 2012-07-25	0.5变更为0.9版	李琴	V0.9
 2013-01-08	修改单号显示、日期显示TAB顺序；查询无记录时不弹出窗口	朱唯	V1.11
 2013-1-21	修改数据元素描述，去掉签收状态	黄小波	V1.2
 2013-02-03	仓储费保管费	保轶	V1.2
 2013-02-25	根据ISSUE-1529，增加按照来源单号查询	王学敏	V1.2
 2013-3-5
 增加查询条件中“部门”数据数据权限描述
 武江涛
 V1.3


 1.	SUC-20查询应收单
 1.1	相关业务用例
 BUC_FOSS_4.7.10.20_010  出发运费应收单
 BUC_FOSS_4.7.10.20_020  到付运费应收单
 BUC_FOSS_4.7.50.30_010  生成代收货款应收单
 BUC_FOSS_4.7.10.30_020  小票收入-非现金小票
 1.2	用例描述
 用户可以查询运单开单时产生应收单和非现金小票应收单、代收货款应收单的信息，可以通过单号和日期查询，可以通过日期、签收状态、是否有效、客户编码等查询某一阶段的应收单信息。并根据查询结果进行导出操作。
 1.3	用例条件
 条件类型	描述	引用用例
 前置条件	无	无
 后置条件	1、	按查询条件，显示查询结果列表	无

 1.4	操作用户角色
 操作用户	描述
 营业员	营业员、营业经理可查询、并根据查询结果报表导出
 收银员	收银员、收银经理可查询、并根据查询结果报表导出
 会计	会计、会计经理可查询、并根据查询结果报表导出

 1.5	界面要求
 1.5.1	表现方式
 1.5.2	界面原型

 	按单号查询应收单

 	按日期查询应收单

 	按来源单号查询

 1.5.3	界面描述
 	页面初始化组件
 1.	日期类型：单选按钮。 有业务日期/记账日期两项。
 结束日期：下拉框。必填项，开始日期和结束日期。用户可以选择按业务日期和记账日期查询，默认业务日期和记账日期查询范围前后限制为一个月。系统默认查询截止到当天0点0分0秒开始截止到当天23点59分59秒之内的信息。
 2.	单据子类型：始发运费应收单/到达运费应收单/代收货款应收单/空运其它应收单/小票应收单/到达偏线代理应收单/空运中转代理应收。
 3.	“部门”修改为：“应收部门”：下拉框。从数据字典中获取到相应的信息。默认当前登录者所属部门
 增加“收入部门”：下拉框，从数据字典中获取到相应的信息。
 4.	大区：输入框，业务发生部门所属大区名称。
 5.	小区：输入框，业务发生部门所属小区名称。
 6.	单据来源 下拉框。从数据字典获取到信息，目前有三种:全部/运单/小票，默认选择全部 
 7.	客户名称：公共组件，从数据字段获取数据，根据用户编码和名称查询。
 8.	是否有效，默认选择“有效”。从数据字典获取到信息，状态有：全部/有效/无效。
 9.	是否签收，默认选择“全部”。从数据字典获取到信息，状态有：全部/未签收/已签收
 	页面输入组件描叙
 1.	用户可输入单号，应收单号查询，单号最大支持10个，运单之间用半角“，”隔开。
 2.	按照日期类型，用户可根据需要按照会计时间或者是业务时间来查询，默认情况选中业务时间，开始日期和结束日期是必填项并且相差不超过30天。
 3.	客户或者代理信息，用户输入客户名称和编号或者代理名称和编号可以用来查询。支持模糊查询，用户可以根据输入名字自动匹配到相应的名称。默认无
 	查询应收单列表描叙：
 1.	应收单列表，页面初始化时，页面不显示，当条件满足时，查询出相应的数据。
 2.	查询列表时，右下角，自动统计总金额，当前页面总金额，已核销金额，未核销金额，应付运费金额等。
 3.	用户可以自动以选择显示取消哪些列名。
 4.	鼠标悬停在应收单号时，在光标处提示“查看明细”，用户点击查看明细可进入，显示该应收单详细信息信息。
 5.	此查询需要提供分页  50/100/150/200.
 	按照来源单号查询
 应收单需要支持按照外发反馈录入编号、配载编号查询
 界面说明
 二、应收单查询界面按钮：
 	查询 
 	重置
 	导出 
 	查询明细
 1.6	操作步骤
 	查询
 序号	基本步骤	相关数据	补充步骤
 1.		页面初始化。 	应收单	初始化信息，请参见 SR1
 2.		可自由选择按照日期类型按照业务日期或者会计时间，输入开始日期和结束日期。	应收单	日期输入限制，请参见SR2
 3.		用户可以输入应收单号或者运单号进行查询	应收单	请参见业务规则-SR3
 4.		输入客户名称或编码	应收单	1、	用户在输入客户信息时系统自动调用综合管理查询客户信息接口根据客户类型模糊查询出与用户输入字符类似的全部客户信息

 5.		可选择来源单据、是否红单、是否有效	应收单	
 6.		点击查询按钮	应收单	查询应收单列表不为空，扩展事件 “5a”
 	导出
 序号	基本步骤	相关数据	补充步骤
 1．	用户可以输入查询条件	应收单	1.输入查询条件
 2.	点击查询	应收单	1.通过查询出来的结果，进行导出
 点击“导出”	应收单	用户可根据可以导出查询出来的数据，当查询列表不为空时，点击导出进行导出。（按页面显示字段导出）

 	查看明细
 序号	基本步骤	相关数据	补充步骤
 1	用户可选择一条或者多条应收单查看明细 	应收单明细	当查询列表不为空时，用户可以通过复选框查看多条（不超过5条）明细，显示方式以对话框的方式。扩充事件，见5a

 1.7	扩展事件
 序号	扩展事件	相关数据	备注
 1a		当输入的应收单号或应付单号个数超过10个时，进行输入单号过多提示	应收单	当用户所输入的应收单号超过10个点击查询时，应收单输入框左下角，用红色自提显示“输入单号已超过10个，请修改后重新查询”；
 提示时，不需要清空用户输入内容。
 2a		查询点击重置	应收单	请参见 3a
 3a		当筛选不到结果时,提示没有符合条件的单据	应收单	查询结果集显示“查询结果为空”

 4a		点击“重置”按钮，页面查询条件数值恢复页面初始化状态	应收单	清空文本框，下拉恢复初始选中项
 5a		当查询列表不为空时，选择一条查看明细 	应收单	应收单号，加上链接，当用户选择一条数据，鼠标悬停在该记录上时，光标旁边提示“点击可查看明细”用户点击后，以弹出框的形式显示这条记录。 
 1.8	业务规则
 序号	描述
 SR1		1.	单号不能同时不空。输入应收单号按照应收单号查，输入运单号根据运单号查，如果为空提示错误.“请输入单号！”
 SR2		1、	开始时间和结束时间最大相差不超过30天
 SR3		1、	输入的应收单号和运单号个数不能超过10个，运单和应收单号之间用半角的“，”进行分割。
 2、	查询增加数据权限控制，只能查询出（应收部门/收入部门/始发部门为）当前登录用户客户可操作的营业部数据

 1.9	数据元素
 1.9.1	查询信息界面（输入）
 字段名称 	说明 	输入限制	输入项提示文本	长度	是否必填	备注

 业务日期	业务日期，如果是运单指的是收货时间。如果是其它指的是开单时间。	单选	无	6	否	无	业务日期和记账日期默认会选择一个。
 记账日期	会计日记指的记账开始时间。	单选	无	6	否	无
 开始日期	业务日期或者会计日期查起止日期	日期	无	10	是	根据用户选择，会计时间查询还是业务时间查询
 结束日期	业务日期或者记账日期查起止日期	日期	无	10	是	
 单据来源	开单来源小票，运单	下拉列表	无	20	否	
 是否有效	是否有效	下拉列表	无	4	否	
 运单编号	运点编号	文本	无	6	是	无
 客户名称	客户或代理名称	文本	无	100	否	无
 客户编号	客户或代理编号	文本	无	50	否	无
 应收单号	应收单号	文本	单号之间用逗号分隔	200	是	最多输入10个单号
 产品类型	产品类型	下拉列表	无	100	是	精准汽运（长途）\精准卡航\ 精准汽运（短途）\精准城运\ 汽运偏线 \精准空运
 大区名称	大区名称	输入框	无	50	否	无
 小区名称	小区名称	输入框	无	50	否	无

 1.9.2	应收单信息界面（运单输出）
 字段名称 	说明 (来源)	输出限制（类型，限制）	输出项提示文本	长度	是否必填	备注
 业务日期	运单的开单时间	无	无	8	是	
 记账日期	记账日期	无	无	10	是	
 收入部门名称	收入部门名称	无	无	100	是	
 收入部门编码	收入部门编码	无	无	50	是	
 收入公司名称	部门所属子公司	无	无	50	是	
 运单单号	运单单号	无	无	10	是	
 客户名称	客户名称	无	无	200	是	
 客户编码	客户编码	无	无	50	是	
 支付方式	运单的付款方式	无	无	50	是	临欠、月结、网上支付
 总运费	总运费	无	无	10	是	
 已收款金额	已收款金额	无	无	10	是	
 未收款金额	未收款金额	无	无	10	是	
 公布价运费	公布价运费	无	无	10	是	
 送货费	送货费	无	无	10	是	
 包装手续费	包装手续费	无	无	10	是	
 代收货款手续费	代收货款手续费	无	无	10	是	
 保价费	保价费	无	无	10	是	
 其他费用	其他费用	无	无	10	是	
 产品类型	产品类型	无	无	20	是	精准汽运（长途）\精准卡航\ 精准汽运（短途）\精准城运\ 汽运偏线 \精准空运
 版本号	默认为1，后面逐步累加	无	无	4	是	
 是否有效	是否有效	无	无	1	是	
 是否红冲	是否有效	无	无	1	是	
 是否初始化	是否从ERP导入	无	无	1	是	
 制单部门名称	运单录入名称	无	无	200	是	
 制单人	录入人	无	无	50	是	
 制单时间	当前服务器时间	无	无	8	是	
 来源单据编码	来源单据编码	无	无	50	是	
 来源单据类别	来源运单、来源小票	无	无	50	是	
 催款部门	催款部门	无	无	50	是	如果是到付金额大于0，催款部门就是到达部门，如果始发金额大于0，催款部门就是始发部门
 签收日期	签收日期	无	无	10	否	不显示








 到达部门	到达部门	无	无	20	否	运单有，运单签收时用于确认始发应收，小票没有
 大区名称	大区名称	无	无	50	否	
 小区名称	小区名称	无	无	50	否	
 1.9.3	小票（非现金）输出
 字段名称 	说明 	输入限制	输入项提示文本	长度	是否必填	备注
 部门名称	部门名称	字符	无	20	是	无
 所属子公司名称	部门所属子公司名称	字符	无	20	是	无
 客户名称	客户名称	字符	无	50	是	无
 客户编号	客户编号	编码	无	20	是	无
 小票编号	小票单号	编码	无	20	是	无
 金额	应收金额	数字	无	10	是	小票应收金额
 支付方式	支付方式	字符	无	  15	是	临欠、月结、网上支付
 版本号	小票对应的版本号	数字	无	10	是	无
 是否有效	标记该应收单是否有效	字符	无	10	是	无
 是否红单	标记该条应收单是否是红冲单据	字符	无	10	是	无
 是否初始化	标志该条应收单记录是否初始化	字符	无	10	是	无
 录入人员	制单人名称	字符	无	20	是	无
 录入时间	录入时间	日期	无	6	是	无
 单据子类型	单据对应子类型	字符	无	30	是	无
 业务日期	应收单发生的业务日期	日期	无	6	是	无
 记账日期	小票应收单的会计日期	日期	无	6	是	无
 录入人	单据制作人	字符	无	30	是	无
 录入日期	制单日期	日期	无	6	是	无
 产品类型	单据所对应货物的产品类型	字符	无	30	是	无
 创建时间	创建时间	日期	无	10	是	无
 更新时间	更新时间	日期	无	10	是	无
 来源单据类型	1.来源运单2.来源小票	数字	无	1	是	无
 收款类别	小票的收款类别	字符	无	1	是	仓储费、送货费、废品、开票税金、返货费
 收款事项	收款来源、营业员、偏线操作员、收银员	字符	无	20	是	收款来源、营业员、偏线操作员、收银员
 来源单据类别	来源运单、网上订单、来源小票	字符	无	50	是	无
 大区名称	大区名称	字符	无	50	是	无
 小区名称	小区名称	字符	无	50	是	无

 1.10	非功能性需求
 使用量	目前，全公司每月2400238笔，部门最大52310笔
 2012年全网估计用户数	30000
 响应要求（如果与全系统要求 不一致的话）	查询一般3s完成响应
 使用时间段	00：00-24：00
 高峰使用时间段	14：00-18：00



 1.11	接口描述：
 接口名称 	对方系统（外部系统或内部其他模块）	接口描述
 客户信息和代理信息	综合管理部门	根据用户输入或者选择客户名称调出客户的编码和名称


 *
 ******************************************************************************/

package com.deppon.foss.module.settlement.consumer.server.service.impl;

import com.deppon.foss.framework.shared.util.string.StringUtil;
import com.deppon.foss.module.base.baseinfo.api.server.service.ICustomerService;
import com.deppon.foss.module.base.baseinfo.api.server.service.IExpressPartSalesDeptService;
import com.deppon.foss.module.base.baseinfo.api.server.service.IOrgAdministrativeInfoService;
import com.deppon.foss.module.base.baseinfo.api.server.service.ISaleDepartmentService;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.BankEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.CusBargainEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.OrgAdministrativeInfoEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.domain.SaleDepartmentEntity;
import com.deppon.foss.module.base.baseinfo.api.shared.dto.CustomerDto;
import com.deppon.foss.module.base.baseinfo.api.shared.dto.ExpressPartSalesDeptResultDto;
import com.deppon.foss.module.base.dict.api.server.service.IConfigurationParamsService;
import com.deppon.foss.module.base.dict.api.shared.define.ConfigurationParamsConstants;
import com.deppon.foss.module.base.dict.api.shared.define.DictionaryValueConstants;
import com.deppon.foss.module.base.dict.api.shared.domain.ConfigurationParamsEntity;
import com.deppon.foss.module.base.dict.api.shared.domain.DataDictionaryEntity;
import com.deppon.foss.module.base.dict.api.shared.domain.DataDictionaryValueEntity;
import com.deppon.foss.module.base.dict.api.util.DictUtil;
import com.deppon.foss.module.frameworkimpl.shared.domain.CurrentInfo;
import com.deppon.foss.module.pickup.pricing.api.shared.define.PricingConstants.ProductEntityConstants;
import com.deppon.foss.module.pickup.waybill.api.server.service.IWaybillManagerService;
import com.deppon.foss.module.pickup.waybill.shared.domain.WaybillEntity;
import com.deppon.foss.module.settlement.common.api.server.dao.IGreenHandWrapWriteoffDao;
import com.deppon.foss.module.settlement.common.api.server.service.IBillBadAccountService;
import com.deppon.foss.module.settlement.common.api.server.service.IBillCashCollectionService;
import com.deppon.foss.module.settlement.common.api.server.service.IBillPayableService;
import com.deppon.foss.module.settlement.common.api.server.service.IBillReceivableService;
import com.deppon.foss.module.settlement.common.api.server.service.ICUBCGrayService;
import com.deppon.foss.module.settlement.common.api.server.service.ICustomerBargainService;
import com.deppon.foss.module.settlement.common.api.server.service.IFossToFinsRemitCommonService;
import com.deppon.foss.module.settlement.common.api.server.service.IFreightDiscountService;
import com.deppon.foss.module.settlement.common.api.server.service.IGreenHandWrapWriteoffService;
import com.deppon.foss.module.settlement.common.api.server.service.IPODService;
import com.deppon.foss.module.settlement.common.api.server.service.ISettlementCommonService;
import com.deppon.foss.module.settlement.common.api.server.service.IStatementOfAccountService;
import com.deppon.foss.module.settlement.common.api.server.service.IWSCManageService;
import com.deppon.foss.module.settlement.common.api.shared.define.SettlementConstants;
import com.deppon.foss.module.settlement.common.api.shared.define.SettlementDictionaryConstants;
import com.deppon.foss.module.settlement.common.api.shared.define.SettlementNoRuleEnum;
import com.deppon.foss.module.settlement.common.api.shared.domain.BillBadAccountEntity;
import com.deppon.foss.module.settlement.common.api.shared.domain.BillCashCollectionEntity;
import com.deppon.foss.module.settlement.common.api.shared.domain.BillPayableEntity;
import com.deppon.foss.module.settlement.common.api.shared.domain.BillReceivableEntity;
import com.deppon.foss.module.settlement.common.api.shared.domain.GreenHandWrapWriteoffEntity;
import com.deppon.foss.module.settlement.common.api.shared.domain.PODEntity;
import com.deppon.foss.module.settlement.common.api.shared.domain.RequestGreenHandWrapEntity;
import com.deppon.foss.module.settlement.common.api.shared.domain.WSCEntity;
import com.deppon.foss.module.settlement.common.api.shared.dto.BillPayableConditionDto;
import com.deppon.foss.module.settlement.common.api.shared.dto.BillReceivableConditionDto;
import com.deppon.foss.module.settlement.common.api.shared.dto.CUBCCodAuditRequestDto;
import com.deppon.foss.module.settlement.common.api.shared.dto.CUBCCodAuditResultDto;
import com.deppon.foss.module.settlement.common.api.shared.dto.CUBCGrayRequestDto;
import com.deppon.foss.module.settlement.common.api.shared.dto.CUBCGrayResultDto;
import com.deppon.foss.module.settlement.common.api.shared.dto.CubcGrayRequestEntity;
import com.deppon.foss.module.settlement.common.api.shared.dto.CubcGrayResponseEntity;
import com.deppon.foss.module.settlement.common.api.shared.dto.DebitDto;
import com.deppon.foss.module.settlement.common.api.shared.dto.VestBatchResult;
import com.deppon.foss.module.settlement.common.api.shared.exception.CUBCGrayException;
import com.deppon.foss.module.settlement.common.api.shared.exception.SettlementException;
import com.deppon.foss.module.settlement.common.server.util.HttpClientUtils;
import com.deppon.foss.module.settlement.common.server.util.SettlementUtil;
import com.deppon.foss.module.settlement.consumer.api.server.dao.IInvoiceRegisterDao;
import com.deppon.foss.module.settlement.consumer.api.server.service.*;
import com.deppon.foss.module.settlement.consumer.api.shared.domain.*;
import com.deppon.foss.module.settlement.consumer.api.shared.dto.CodAuditDto;
import com.deppon.foss.module.settlement.consumer.api.shared.dto.MergeWaybillDto;
import com.deppon.foss.module.settlement.consumer.api.shared.dto.WaybillFeeDto;
import com.deppon.foss.module.settlement.consumer.api.shared.dto.WaybillPickupInfoDto;
import com.deppon.foss.module.settlement.consumer.api.shared.dto.WaybillPickupWriteBackDto;
import com.deppon.foss.module.transfer.partialline.api.server.service.IExternalBillService;
import com.deppon.foss.util.NumberUtils;
import com.deppon.foss.util.UUIDUtils;
import com.deppon.foss.util.define.FossConstants;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.time.DateUtils;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.springframework.beans.BeanUtils;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * ***************备注**********************
 * 
 * ①收入部门取运单上的收货部门  receiveOrgCode
 * ②到达部门取运单上的最终配载部门 lastLoadOrgCode
 * ③收款部门取运单上的创建部门  createOrgCode
 * ④对于集中接送货开单的营业部发更改的，现金收款单红单、新蓝单的收款部门都是营业部 createOrgCode
 * 
 * 
 * ****************************************
 */

/**
 * 运单开单服务，供接送货调用
 * 
 * @author ibm-zhuwei
 * @date 2012-10-25 上午10:37:48
 */
public class WaybillPickupService implements IWaybillPickupService {
	
	private String queryCodAuditListUrl;
	public void setQueryCodAuditListUrl(String queryCodAuditListUrl) {
		this.queryCodAuditListUrl = queryCodAuditListUrl;
	}
	
	private String grayByWaybillNoUrl;
	public void setGrayByWaybillNoUrl(String grayByWaybillNoUrl) {
		this.grayByWaybillNoUrl = grayByWaybillNoUrl;
	}
	
	private static final String SERVICE_CODE = "com.deppon.foss.module.settlement.consumer.server.service.impl.WaybillPickupService";

	private ICUBCGrayService cUBCGrayService;
	
	public void setcUBCGrayService(ICUBCGrayService cUBCGrayService) {
		this.cUBCGrayService = cUBCGrayService;
	}

	private static final Logger logger = LogManager
			.getLogger(WaybillPickupService.class);

	/**
     * 运单状态服务
     */
    private IWaybillApplyStatusService waybillApplyStatusService;
    /**
     * 运单详细服务
     */
    private IWaybillDetailService waybillDetailService;
    /**
     * 合并运单服务
     */
    private IMergeWaybillService mergeWaybillService;
	/**
	 * 结算通用服务
	 */
	private ISettlementCommonService settlementCommonService;

	/**
	 * 现金收款单服务
	 */
	private IBillCashCollectionService billCashCollectionService;

	/**
	 * 应收单服务
	 */
	private IBillReceivableService billReceivableService;
	
	/**
	 * FOSS到财务第三方支付
	 */
	private IFossToFinsRemitCommonService fossToFinsRemitCommonService;

	/**
	 * 应付单服务
	 */
	private IBillPayableService billPayableService;

	/**
	 * 客户信用额度服务
	 */
	private ICustomerBargainService customerBargainService;

	/**
	 * 代收货款服务
	 */
	private IBillPayCODService billPayCODService;

	/**
	 * 代收货款通用服务
	 */
	private ICodCommonService codCommonService;

	/**
	 * 对账单服务
	 */
	private IStatementOfAccountService statementOfAccountService;

	/**
	 * 组织信息服务
	 */
	private IOrgAdministrativeInfoService orgAdministrativeInfoService;

	/**
	 * 系统配置参数服务
	 */
	private IConfigurationParamsService configurationParamsService;

	/**
	 * 坏账服务
	 */
	private IBillBadAccountService billBadAccountService;

	/**
	 * 综合管理-客户信息Service
	 */
	private ICustomerService customerService;

	/** 代收货款出发申请服务. */
	private ISalesPayCODService salesPayCODService;

	/**
	 * 财务签收记录Service，开单默认插入一条数据，便于后续凭证数据使用
	 */
	private IPODService podService;

    /**
     * 接送货偏线service,始发更改时判断是否存在有效的偏线外发单
     * */
	private IExternalBillService externalBillService;
	/**
	 * 保留小数位
	 */
	private static final int DIVDE_NUMBER = 0;
	
	/**
	 * 快递代理点部映射
	 */
	private IExpressPartSalesDeptService expressPartSalesDeptService;
	
	/**
	 * 运单服务类
	 */
	private IWaybillManagerService waybillManagerService;
	
	//private IDiscountManagementService discountManagementService;
	
	/**
	 * 零担折扣
	 */
	private IFreightDiscountService freightDiscountService;
	
	/** 插入代收货款审核表 */
	private ICodAuditService codAuditService;
	
	/**
	 * 灰名单服务
	 */
	private IGrayCustomerService grayCustomerService;
	
	/**
	 * 注入
	 * @param billReceivableEntityDao
	 */
	private IGreenHandWrapWriteoffDao greenHandWrapWriteoffDao;
	
	private ISaleDepartmentService saleDepartmentService;
	
	/**
	 * 注入裹裹核销应收单的接口service
	 */
	private IGreenHandWrapWriteoffService greenHandWrapWriteoffService;
    /**
     * POS刷卡相关
     */
	private IWSCManageService wscManageService;
	
	/**
	 * 快递对接FOSS,JOB定时执行service 
	 * @author 326181
	 */
	private IEcsFossErrorLogJobService ecsFossErrorLogJobService;
    	/**
	 * 实际承运表
	 */
	//private IActualFreightDao actualFreightDao;
	
	/** 配合发票，查询运单及小票接口Dao. */ 
	private IInvoiceRegisterDao invoiceRegisterDao; 
	



    public void setWscManageService(IWSCManageService wscManageService) {
        this.wscManageService = wscManageService;
    }

    public void setGreenHandWrapWriteoffService(
			IGreenHandWrapWriteoffService greenHandWrapWriteoffService) {
		this.greenHandWrapWriteoffService = greenHandWrapWriteoffService;
	}

	/**
	 * 新增运单
	 * 
	 * @author ibm-zhuwei
	 * @date 2012-10-25 上午10:38:17
	 */
	@Override
	public void addWaybill(WaybillPickupInfoDto waybill, CurrentInfo currentInfo) {

		logger.info("开始新增运单：" + waybill.getWaybillNo());

		// TODO 异地调货标志，获取CRM客户

		// 验证运单输入参数合法性
		this.validAddedWaybillParam(waybill, currentInfo);

		// TODO 性能很差
		// 验证运单数据合法性
		// 取消验证
		// this.validAddedWaybillData(waybill.getWaybillNo());

		// 处理新增运单
		this.handleAddedWaybillNew(waybill,null, currentInfo, null);

		logger.info("结束新增运单：" + waybill.getWaybillNo());
	}

	/**
	 * 在财务签收流水表中，默认插入一条默认记录便于后续统计未签收的运单信息
	 * 
	 * @author 099995-foss-wujiangtao
	 * @date 2013-2-21 下午5:48:01
	 * @param waybill
	 * @param currentInfo
	 */
	private void addPODEntity(WaybillPickupInfoDto waybill,
			CurrentInfo currentInfo, Date date) {
		// 2013-02-20日凭证设计方案：在财务签收流水表中，默认插入一条默认记录便于后续统计未签收的运单信息
		PODEntity pod = new PODEntity();
		pod.setId(UUIDUtils.getUUID());

		// 运单号
		pod.setWaybillNo(waybill.getWaybillNo());

		// 开单时间
		pod.setPodDate(date);

		// 类型：开单
		pod.setPodType(SettlementDictionaryConstants.POD_ENTITY__POD_TYPE__BILLING);
		this.podService.addPOD(pod, currentInfo);

	}
	
	/**
	 * 在财务签收流水表中，默认插入一条默认记录便于后续统计未签收的运单信息,开单id取至悟空传的运单id，保证一个运单只开单一次
	 * 避免同一个运单重复调结算接口生成财务单据
	 * @author foss-231434-bieyexiong
	 * @date 2016-10-9
	 * @param waybill
	 * @param currentInfo
	 */
	private void addPODEntityEcs(WaybillPickupInfoDto waybill,
			CurrentInfo currentInfo, Date date) {
		// 2013-02-20日凭证设计方案：在财务签收流水表中，默认插入一条默认记录便于后续统计未签收的运单信息
		PODEntity pod = new PODEntity();
		pod.setId(waybill.getId());

		// 运单号
		pod.setWaybillNo(waybill.getWaybillNo());

		// 开单时间
		pod.setPodDate(date);

		// 类型：开单
		pod.setPodType(SettlementDictionaryConstants.POD_ENTITY__POD_TYPE__BILLING);
		this.podService.addPOD(pod, currentInfo);

	}

	/**
	 * 作废运单
	 * 
	 * @author ibm-zhuwei
	 * @date 2012-10-25 上午10:38:52
	 */
	@Override
	public void cancelWaybill(String waybillNo, CurrentInfo currentInfo) {

		logger.info("开始作废运单：" + waybillNo);
        /**
         * add by wuhao 322906 20161111
         * DN201603300013新增发票合并运单优化需求
         * 作废运单时，合并运单金额修改
         */
        mergeWaybillChange(waybillNo);

        this.handleCanceledWaybill(waybillNo,null,null,null, currentInfo);

		logger.info("结束作废运单：" + waybillNo);
	}

	/**
	 * 更改运单
	 * 
	 * @author ibm-zhuwei
	 * @date 2012-10-25 上午10:39:15
	 */
	@Override
	public void modifyWaybill(WaybillPickupInfoDto oldWaybill,
			WaybillPickupInfoDto newWaybill, CurrentInfo currentInfo) {

		logger.info("开始更改运单：" + oldWaybill.getWaybillNo());	
		//判断原始单据是否可以受理更改单
        canmodify(oldWaybill.getWaybillNo());		
		OrgAdministrativeInfoEntity collectionOrgEntity = null;
		if (FossConstants.YES.equals(newWaybill.getPickupCentralized())
				|| (SettlementUtil.isPackageProductCode(oldWaybill.getProductCode()) 
				&& !oldWaybill.getCreateOrgCode().equals(oldWaybill.getReceiveOrgCode()))) {
			//BUG-26676
			collectionOrgEntity = orgAdministrativeInfoService
					.queryOrgAdministrativeInfoByCode(newWaybill.getModifyOrgCode());
			
			if(collectionOrgEntity == null){
				throw new SettlementException("收款部门实体不能为空");
			}
		}
		WaybillPickupWriteBackDto dto = null;
		if(SettlementDictionaryConstants.SOURCE_SYSTEM_ECS.equals(newWaybill.getSourceSystem())){
		// 作废运单，返回红冲的单据，在新增时读取单据类型、客户等信息
			dto = this.handleCanceledWaybill(oldWaybill.getWaybillNo(),currentInfo);
		}else{
			// 作废运单，返回红冲的单据，在新增时读取单据类型、客户等信息
			dto = this.handleCanceledWaybill(oldWaybill.getWaybillNo(),oldWaybill.getReceiveOrgCode(),oldWaybill.getProductCode(),
					collectionOrgEntity, currentInfo);
		}

		// 验证新增运单
		this.validAddedWaybillParam(newWaybill, currentInfo);

		// 处理新增运单
		this.handleAddedWaybill(newWaybill,oldWaybill, currentInfo, dto);
		
		//start 269044-zhurongrong 2016-05-09
		//先判断该客户是否在灰名单中，不在的话需判断是否添加进去，在的话，需要更新最久欠款日期
		//更改付款方式由非月结为月结
		if(SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__CREDIT.equals(newWaybill.getPaidMethod())
				&& !(SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__CREDIT.equals(oldWaybill.getPaidMethod()))) {
			//存放待处理客户编码集合
			List<String> customerCodeList = new ArrayList<String>();
			//添加客户编码
			customerCodeList.add(newWaybill.getDeliveryCustomerCode());
			try{
				//调用判断时候修改灰名单接口
				grayCustomerService.updateGrayCustomerToECS(customerCodeList);
			} catch (Exception e) {
				//打印异常
				logger.info("调用悟空更改灰名单接口异常" + e.getMessage());
			}
		}
		//将付款方式由月结改成其他
		else if(SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__CREDIT.equals(oldWaybill.getPaidMethod())
				&& !(SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__CREDIT.equals(newWaybill.getPaidMethod()))) {
			//先判断该客户是否在灰名单中，在的话，是否拉出来，不在的话直接pass
			GrayCustomerEntity grayCustomerEntity = grayCustomerService
					.queryGrayCustomerByCustomerCode(newWaybill.getDeliveryCustomerCode());
			//存放待处理客户编码集合
			List<String> customerCodeList = new ArrayList<String>();
			//添加客户编码
			customerCodeList.add(newWaybill.getDeliveryCustomerCode());
			if(grayCustomerEntity != null) {
				try{
					//调用判断时候修改灰名单接口
					grayCustomerService.updateGrayCustomerToECS(customerCodeList);
				} catch (Exception e) {
					//打印异常
					logger.info("调用悟空更改灰名单接口异常" + e.getMessage());
				}
			}
		}
		//end
        /**
         * add by wuhao 322906 20160629
         * DN201603300013新增发票合并运单优化需求
         */
        mergeWaybillChange(oldWaybill, newWaybill);
		logger.info("结束更改运单：" + oldWaybill.getWaybillNo());
	}
 /**
  * add by wuhao 322906 20161111
  * DN201603300013新增发票合并运单优化需求
  * 作废运单，合并运单金额修改，运单明细表中运单需要删除
  * 即金额减少，当运单所在的合并运单未开具发票，合并运单中的金额需要修改
  */
 @Transactional
 public void mergeWaybillChange(String waybillNo){
  try{
   String mergeWaybillNo = waybillDetailService.queryMergeWaybillNoByWaybillNo(waybillNo);
   if(StringUtils.isNotBlank(mergeWaybillNo)){
    //合并运单信息
    MergeWaybillDto mergeWaybillDto = mergeWaybillService.queryMergeWaybillByMergeWaybillNo(mergeWaybillNo);
    //运单信息
    WaybillDetailEntity waybillDetailEntity = waybillDetailService.queryWaybillDetailByWaybillNo(waybillNo);

    BigDecimal historyPrePayAmount = mergeWaybillDto.getPrePayAmount();
    BigDecimal historyToPayAmount = mergeWaybillDto.getToPayAmount();
    //合并运单
    MergeWaybillEntity mergeWaybillEntity = new MergeWaybillEntity();
    mergeWaybillEntity.setMergeWaybillNo(mergeWaybillNo);

     WaybillApplyStatusEntity entity = waybillApplyStatusService.queryByBillNo(mergeWaybillNo);
     if(entity==null || "N".equals(entity.getStatus())) {//判断运单所在的合并运单是否未开具发票
      mergeWaybillEntity.setPrePayAmount(historyPrePayAmount.subtract(waybillDetailEntity.getPrePayAmount()));
      mergeWaybillEntity.setToPayAmount(historyToPayAmount.subtract(waybillDetailEntity.getToPayAmount()));
      logger.info("作废运单金额："+waybillDetailEntity.getPrePayAmount()+"合并运单金额："+mergeWaybillEntity.getPrePayAmount());
      //删除运单明细
      waybillDetailService.delete(waybillNo);
      mergeWaybillService.updateMergeWaybill(mergeWaybillEntity);
     }
    }
  }catch (Exception e){
   logger.error("作废运单时，合并运单金额修改失败...");
  }

 }
 /**
  * add by wuhao 322906 20160629
  * DN201603300013新增发票合并运单优化需求
  * 运单发更改时，
  * 1,如果金额增加，无论运单所在的合并运单是否已经申请开具发票，运单和合并运单中的金额需要修改
  * 2，如果金额减少，当运单所在的合并运单未开具发票，则运单和 合并运单中的金额需要修改
  */
 @Transactional
 public void mergeWaybillChange(WaybillPickupInfoDto oldWaybill, WaybillPickupInfoDto newWaybill){
  try{
   //判断运单是否在合并运单中（获取该运单对应的合并运单号）
   String mergeWaybillNo = waybillDetailService.queryMergeWaybillNoByWaybillNo(newWaybill.getWaybillNo());
   if(StringUtils.isNotBlank(mergeWaybillNo)){
    MergeWaybillDto mergeWaybillDto = mergeWaybillService.queryMergeWaybillByMergeWaybillNo(mergeWaybillNo);

    BigDecimal historyPrePayAmount = mergeWaybillDto.getPrePayAmount();
    BigDecimal historyToPayAmount = mergeWaybillDto.getToPayAmount();

    MergeWaybillEntity mergeWaybillEntity = new MergeWaybillEntity();
    mergeWaybillEntity.setMergeWaybillNo(mergeWaybillNo);

    WaybillDetailEntity waybillDetailEntity =new WaybillDetailEntity();
    waybillDetailEntity.setToPayAmount(newWaybill.getToPayAmount());
    waybillDetailEntity.setPrePayAmount(newWaybill.getPrePayAmount());
    waybillDetailEntity.setWaybillNo(oldWaybill.getWaybillNo());

    if(newWaybill.getPrePayAmount().compareTo(oldWaybill.getPrePayAmount())==1
            || newWaybill.getToPayAmount().compareTo(oldWaybill.getToPayAmount())==1){//金额增加
     mergeWaybillEntity.setPrePayAmount(historyPrePayAmount.add(newWaybill.getPrePayAmount().subtract(oldWaybill.getPrePayAmount())));
     mergeWaybillEntity.setToPayAmount(historyToPayAmount.add(newWaybill.getToPayAmount().subtract(oldWaybill.getToPayAmount())));
     //修改运单详细和合并运单中的金额
     waybillDetailService.updateWaybillDetail(waybillDetailEntity);
     mergeWaybillService.updateMergeWaybill(mergeWaybillEntity);
    }
    if(newWaybill.getPrePayAmount().compareTo(oldWaybill.getPrePayAmount())==-1
            || newWaybill.getToPayAmount().compareTo(oldWaybill.getToPayAmount())==-1){//金额减少

     WaybillApplyStatusEntity entity = waybillApplyStatusService.queryByBillNo(mergeWaybillNo);
     if(entity==null || "N".equals(entity.getStatus())){//判断运单所在的合并运单是否未开具发票
      mergeWaybillEntity.setPrePayAmount(historyPrePayAmount.subtract(oldWaybill.getPrePayAmount().subtract(newWaybill.getPrePayAmount())));
      mergeWaybillEntity.setToPayAmount(historyToPayAmount.subtract(oldWaybill.getToPayAmount().subtract(newWaybill.getToPayAmount())));
      waybillDetailService.updateWaybillDetail(waybillDetailEntity);
      mergeWaybillService.updateMergeWaybill(mergeWaybillEntity);
     }
    }
   }
  }catch (Exception e){
   logger.error("运单更改时，已经合并运单金额修改失败...");
   //throw new SettlementException("运单更改时，已经合并运单金额修改失败:"+e.getMessage());
  }
 }
	
	/**
	 * 判断是否能够受理更改单
	 *  @author lianghaisheng
	 *  @date 2013-08-15 上午10:39:47
	 * */
	private void canmodify(String waybillNo){
		
		//判断是否存在非中转外发单，如果存在不允许受理更改单 BUG-50890 
		externalBillService.validateIsExistExternalBill(waybillNo);
		
		//根据应收单单据子类型是否能够发更改
		BillReceivableConditionDto billReceivableConditionDto = new BillReceivableConditionDto(waybillNo);
		billReceivableConditionDto
				.setBillTypes(new String[] {
						SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__DESTINATION_PARTIAL_LINE,
						SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__AIR_AGENCY,
						SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__AIR_AGENCY_COD,
						SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__DESTINATION_LAND_STOWAGE,
						SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__LAND_STOWAGE_AGENCY_COD});
		List<BillReceivableEntity> billReceives = billReceivableService
				.queryBillReceivableByCondition(billReceivableConditionDto);
		//如果存在偏线到达应收，或者空运代收货款应收、空运到达应收不能受理更改单
	    if(CollectionUtils.isNotEmpty(billReceives)){
	    	for(BillReceivableEntity billReceivable : billReceives){
	    		//如果存在偏线到达代理应收单则说明存在非中专的外发单，不允许受理始发更改单
	    		if(SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__DESTINATION_PARTIAL_LINE
	    				.equals(billReceivable.getBillType())){
	    			throw new SettlementException("运单已录入偏线外发单，不能受理更改，请先作废外发单或修改为中转外发后再受理更改！");
	    		}else if(SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__AIR_AGENCY
	    				.equals(billReceivable.getBillType())
	    				||SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__AIR_AGENCY_COD
	    				.equals(billReceivable.getBillType())){
	    			throw new SettlementException("运单已合票，不能受理更改，请先将运单从合票清单中移出后再受理更改！");
	    		}else if(SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__DESTINATION_LAND_STOWAGE
	    				.equals(billReceivable.getBillType())
	    				||SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__LAND_STOWAGE_AGENCY_COD
	    				.equals(billReceivable.getBillType())){
	    			throw new SettlementException("运单已录入快递代理外发单，不能受理更改，请先作废快递代理外发单或修改为中转外发后再受理更改！");
	    		}
	    	}
	    }		
		
	}
	
	/**
	 * 判断能否更改
	 * 
	 * @author ibm-zhuwei
	 * @date 2012-10-25 上午10:39:47
	 */
	@Override
	public void canChange(String waybillNo) {
		// MANA-386 整车取消收款核销后不能发更改的限制 by lufeifei
		// 查询运单，主要用来判断整车是否已经首款核销
		WaybillEntity waybillEntity = waybillManagerService.queryWaybillBasicByNo(waybillNo);
		if(waybillEntity == null){
			throw new SettlementException("查询运单失败");
		}
		// 是否整车：是-Y 否-N
		String isWholeVehicle = waybillEntity.getIsWholeVehicle();
		
		// 接送货已经对偏线外发反馈已录入进行了校验
		//ISSUE-3260 对外发单限制 
		 externalBillService.validateIsExistExternalBill(waybillNo);		
		
		Date now = new Date();

		// 运单对应的应收单已核销或部分核销
		// 运单存在始发运费应收单或到付运费应收单，客户在网上营业厅进行了支付锁定
		List<String> statementBillNos = new ArrayList<String>(); // 对账单号集合
		List<BillReceivableEntity> listR = billReceivableService
				.queryBillReceivableByCondition(new BillReceivableConditionDto(
						waybillNo));
		if (listR != null) {
			for (BillReceivableEntity e : listR) {
                //取消合伙人奖罚类应收校验，允许起草更改单 by 243921
				if(!SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__WOODEN_OTEHR_RECEIVABLE.equals(e.getBillType())
                    && !SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__PARTNER__PENALTY.equals(e.getBillType())
                    && !SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__PARTNER__TRAIN_FEE.equals(e.getBillType())
                    && !SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__PARTNER_ERROR_RECEIVABLE.equals(e.getBillType())
                    && !SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__PARTNER_OTHER_FEE_RECEIVABLE.equals(e.getBillType())){
					if (StringUtils.isNotEmpty(e.getStatementBillNo())
							&& !SettlementConstants.DEFAULT_BILL_NO.equals(e
									.getStatementBillNo())) {
						statementBillNos.add(e.getStatementBillNo());
					}
					// MANA-386 整车取消收款核销后不能发更改的限制 by lufeifei
					if(!"Y".equals(isWholeVehicle)){
						if (e.getUnverifyAmount().compareTo(e.getAmount()) < 0) {
							throw new SettlementException("对应的应收单已经核销，不能进行发更改操作");
                        }
					}
					if (e.getUnlockDateTime() != null
							&& now.before(e.getUnlockDateTime())) {
						throw new SettlementException("客户在网上已经将运单进行了锁定,不能进行发更改操作");
					}
				}
			}
		}

		// 运单对应的应付单已核销或部分核销
		// 运单存在对应服务补救、理赔申请、坏账申请，并且对应的处理状态为申请中或者处理已完结
		List<BillPayableEntity> listP = billPayableService
				.queryBillPayableByCondition(new BillPayableConditionDto(
						waybillNo));
		if (listP != null) {
			for (BillPayableEntity e : listP) {
                //取消合伙人奖罚类应付校验，允许起草更改单 by 243921
				if(!SettlementDictionaryConstants.BILL_PAYABLE__BILL_TYPE__WOODEN_PAYABLE.equals(e.getBillType())
						&& !SettlementDictionaryConstants.BILL_PAYABLE__BILL_TYPE__WOODEN_OTEHR_PAYABLE.equals(e.getBillType())
                        && !SettlementDictionaryConstants.BILL_PAYABLE__BILL_TYPE__PARTNER__LTL_ERROR.equals(e.getBillType())
                        && !SettlementDictionaryConstants.BILL_PAYABLE__BILL_TYPE__PARTNER__BONUS.equals(e.getBillType())
                        && !SettlementDictionaryConstants.BILL_PAYABLE__BILL_TYPE__PARTNER_OTHER_PAYABLE.equals(e.getBillType())){
					if (StringUtils.isNotEmpty(e.getStatementBillNo())
							&& !SettlementConstants.DEFAULT_BILL_NO.equals(e
									.getStatementBillNo())) {
						statementBillNos.add(e.getStatementBillNo());
					}
					// MANA-386 整车取消首款核销后不能发更改的限制 by lufeifei
					if(!"Y".equals(isWholeVehicle)){
						if (e.getUnverifyAmount().compareTo(e.getAmount()) < 0) { // 存在核销操作
							throw new SettlementException("对应的应付单已经核销，不能进行发更改操作");
						}
					}
					// 校验服务补救、理赔申请；坏账校验在应收单是否核销中校验
					if (SettlementDictionaryConstants.BILL_PAYABLE__BILL_TYPE__CLAIM
							.equals(e.getBillType())
							|| SettlementDictionaryConstants.BILL_PAYABLE__BILL_TYPE__COMPENSATION
									.equals(e.getBillType())) {
						throw new SettlementException("该单存在相应的服务补救、理赔申请，不能进行发更改操作");
					}
				}
			}
		}

		// 运单对应的客户对账单已确认、核销、付款、还款
		List<String> statementNos = statementOfAccountService
				.queryConfirmStatmentOfAccount(statementBillNos);
		if (CollectionUtils.isNotEmpty(statementNos)) {
			throw new SettlementException("该单存在相应的客户对账单已确认、核销、付款、还款，不能进行发更改操作");
		}

		// 代收货校验
		CODEntity codEntity = codCommonService.queryByWaybill(waybillNo);

		if (codEntity != null
				&& FossConstants.ACTIVE.equals(codEntity.getActive())) {

			// 代收货款应付单的支付状态为资金部冻结、汇款中、已汇款之一
			List<String> status = new ArrayList<String>();
			status.add(SettlementDictionaryConstants.COD__STATUS__FUND_FREEZE);
			status.add(SettlementDictionaryConstants.COD__STATUS__RETURNING);
			status.add(SettlementDictionaryConstants.COD__STATUS__RETURN_FAILURE_APPLICATION);
			status.add(SettlementDictionaryConstants.COD__STATUS__NEGATIVE_RETURN_SUCCESS);
			status.add(SettlementDictionaryConstants.COD__STATUS__RETURNED);

			if (status.contains(codEntity.getStatus())) {
				throw new SettlementException(
						"代收货款对应的状态为资金部冻结或者是汇款中时无法红冲现金收款单，不能进行发更改操作 ");
			}

		}
		
		
		/**
		 * @author 218392 zhangyongxue 2016-07-12 15:16:26
		 * 长期未退款代收货款，如果被短期冻结或者长期冻结，那么冻结状态期间，不允许运单更改
		 */
		CodAuditDto codAuditDto = new CodAuditDto();
		List<String> waybillListNo = new ArrayList<String>();
		waybillListNo.add(waybillNo);
		codAuditDto.setWaybillNos(waybillListNo);
		//代收货款审核灰度   353654 ------------------------ start
        String vestSystemCode = null;
        try {
        	ArrayList<String> arrayList = new ArrayList<String>();
        	arrayList.add(waybillNo);
        	CubcGrayRequestEntity requestDto = new CubcGrayRequestEntity(arrayList,
        			SettlementDictionaryConstants.BILL_RECEIVABLE__SOURCE_BILL_TYPE__WAYBILL,SERVICE_CODE+".canChange",
        			SettlementConstants.TYPE_FOSS);
        	CubcGrayResponseEntity response = (CubcGrayResponseEntity)HttpClientUtils.postMethod(requestDto, new CubcGrayResponseEntity(),grayByWaybillNoUrl);
        	List<VestBatchResult> list = response.getVestBatchResult();
        	vestSystemCode = list.get(0).getVestSystemCode();		
		} catch (Exception e) {
			logger.info("灰度分流失败,"+"运单号："+waybillNo);
			throw new CUBCGrayException("系统繁忙,灰度分流失败,请稍后重试！");
		}
        if(SettlementConstants.TYPE_FOSS.equals(vestSystemCode)){
        	List<CodAuditEntity> codAuditEntityList = codAuditService.queryCodAuditByCondition(codAuditDto);
    		if(CollectionUtils.isNotEmpty(codAuditEntityList)){
    			CodAuditEntity codAuditEntity = codAuditEntityList.get(0);
    			//判断是否是SSL SLL
    			if((SettlementDictionaryConstants.SETTLE_SHORT_LOCK.equals(codAuditEntity.getLockStatus()))
    					||(SettlementDictionaryConstants.SETTLE_LONG_LOCK.equals(codAuditEntity.getLockStatus()))){
    				throw new SettlementException("此单据已被冻结(或长期冻结)，如需操作，请联系资金复核组进行解冻!");
    			}
    		}
        }
        if(SettlementConstants.TYPE_CUBC.equals(vestSystemCode)){
				CUBCCodAuditRequestDto requestDto = new CUBCCodAuditRequestDto();
				requestDto.setWaybillNo(waybillListNo);
				CUBCCodAuditResultDto resultDto = null;
				try {
					resultDto = (CUBCCodAuditResultDto)HttpClientUtils.postMethod(requestDto,new CUBCCodAuditResultDto(),queryCodAuditListUrl);
				} catch (Exception e) {
					logger.error("调用CUBC代收货款审核接口连接异常...");
					throw new SettlementException("服务器正忙,CUBC代收货款审核失败,请稍后重试");
				}
				if(resultDto != null){
					if(StringUtils.isNotBlank(resultDto.getMeg())){
						logger.error("调用CUBC代收货款审核接口失败，异常信息：" + resultDto.getMeg());
						throw new SettlementException(resultDto.getMeg());	
					}
					List<com.deppon.foss.module.settlement.common.api.shared.dto.CodAuditDto> auditList = resultDto.getCodAuditList();
					if(CollectionUtils.isNotEmpty(auditList)){
						com.deppon.foss.module.settlement.common.api.shared.dto.CodAuditDto codAuditDto1 = auditList.get(0);
						if(codAuditDto1 != null){
							//判断是否是SSL SLL
			    			if((SettlementDictionaryConstants.SETTLE_SHORT_LOCK.equals(codAuditDto1.getLockStatus()))
			    					||(SettlementDictionaryConstants.SETTLE_LONG_LOCK.equals(codAuditDto1.getLockStatus()))){
			    				throw new SettlementException("此单据已被冻结(或长期冻结)，如需操作，请联系资金复核组进行解冻!");
			    			}
						}
					}else{
						logger.info("CUBC,单号："+waybillNo+"没有进入代收货款支付审核！");
					}
				}
			
        }
        //代收货款审核灰度   353654 ------------------------ start
        
		// 坏账校验
		int i = billBadAccountService.queryByWaybillNO(waybillNo);
		if (i > 0) {
			throw new SettlementException("坏账申请审批完成，不能进行发更改操作");
		}

	}

	/**
	 * 通过运单信息生成现金收款单
	 * 
	 * @author ibm-zhuwei
	 * @date 2012-10-25 下午2:14:39
	 */
	private BillCashCollectionEntity getBillCashCollectoin(
			WaybillPickupInfoDto waybill, CurrentInfo currentInfo,
			WaybillFeeDto prePayFeeDto, Date date) {

		BillCashCollectionEntity entity = new BillCashCollectionEntity();

		entity.setId(UUIDUtils.getUUID());
		entity.setCashCollectionNo(settlementCommonService
				.getSettlementNoRule(SettlementNoRuleEnum.XS1)); // 现金收款单号
		entity.setActive(FossConstants.ACTIVE); // 是否有效
		entity.setIsRedBack(SettlementDictionaryConstants.SETTLEMENT__IS_RED_BACK__NO); // 是否红冲
		entity.setIsInit(FossConstants.NO); // 是否初始化
		entity.setVersionNo(FossConstants.INIT_VERSION_NO); // 初始化版本号
		entity.setCreateTime(date); // 创建时间
		entity.setModifyTime(date); // 修改时间
		entity.setAccountDate(date); // 记账日期
		entity.setBusinessDate(waybill.getBillTime()); // 业务日期
		entity.setStatus(SettlementDictionaryConstants.BILL_CASH_COLLECTION__STATUS__SUBMIT); // 单据状态
		entity.setPaymentType(waybill.getPaidMethod()); // 支付方式

		entity.setSourceBillType(SettlementDictionaryConstants.BILL_CASH_COLLECTION__SOURCE_BILL_TYPE__WAYBILL); // 来源单据类型
		entity.setSourceBillNo(waybill.getWaybillNo()); // 来源单据单号
		entity.setWaybillNo(waybill.getWaybillNo()); // 运单号
		entity.setWaybillId(waybill.getId()); // 运单ID
		entity.setProductCode(waybill.getProductCode()); // 产品类型
		entity.setProductId(waybill.getProductId()); // 产品Id
		entity.setBillType(SettlementDictionaryConstants.BILL_CASH_COLLECTION__BILL_TYPE__CASH_COLLECTION); // 单据类型

		entity.setCustomerCode(waybill.getDeliveryCustomerCode()); // 始发客户编码
		entity.setCustomerName(waybill.getDeliveryCustomerName()); // 始发客户名称

		// 当集中接货业务时，缴款部门是接送货组
		entity.setCreateOrgCode(waybill.getCreateOrgCode()); // 录入部门编码
		entity.setCreateOrgName(currentInfo.getCurrentDeptName()); // 录入部门名称

		// 当集中接货业务时，缴款部门是车队；非集中接送货为营业部；该部门负责缴款
		entity.setCollectionOrgCode(waybill.getCollectionOrgCode()); // 收款部门编码
		entity.setCollectionOrgName(waybill.getCollectionOrgName());
		entity.setCollectionCompanyCode(waybill.getCollectionCompanyCode()); // 收款部门所属子公司
		entity.setCollectionCompanyName(waybill.getCollectionCompanyName());

		// 运单的揽货部门、小票的收入部门
		entity.setGeneratingOrgCode(waybill.getReceiveOrgCode()); // 收入部门编码
		entity.setGeneratingOrgName(waybill.getReceiveOrgName());
		entity.setGeneratingCompanyCode(waybill.getReceiveSubsidiaryCode()); // 收入部门所属子公司编码
		entity.setGeneratingCompanyName(waybill.getReceiveSubsidiaryName());
		//快递代理 出发部门获取开单部门
		if(SettlementUtil.isPackageProductCode(waybill.getProductCode())){
			entity.setOrigOrgCode(waybill.getCreateOrgCode()); // 出发部门编码
			entity.setOrigOrgName(waybill.getCreateUserDeptName());
		}else{
			entity.setOrigOrgCode(waybill.getReceiveOrgCode()); // 出发部门编码
			entity.setOrigOrgName(waybill.getReceiveOrgName());
		}
		
		entity.setDestOrgCode(waybill.getLastLoadOrgCode()); // 到达部门编码
		entity.setDestOrgName(waybill.getLastLoadOrgName());

		entity.setCurrencyCode(waybill.getCurrencyCode()); // 币种

		// 金额
		entity.setAmount(prePayFeeDto.getTotalFee()); // 现金总额：预付金额
		entity.setTransportFee(prePayFeeDto.getTransportFee()); // 公布价运费
		entity.setPickupFee(prePayFeeDto.getPickupFee()); // 接货费
		entity.setDeliveryGoodsFee(prePayFeeDto.getDeliveryGoodsFee()); // 送货费
		entity.setPackagingFee(prePayFeeDto.getPackagingFee()); // 包装手续费
		entity.setCodFee(prePayFeeDto.getCodFee()); // 代收货款费
		entity.setInsuranceFee(prePayFeeDto.getInsuranceFee()); // 保价费
		entity.setOtherFee(prePayFeeDto.getOtherFee()); // 其他费用
		entity.setValueAddFee(prePayFeeDto.getValueAddFee()); // 增值费用
		entity.setPromotionsFee(prePayFeeDto.getPromotionsFee()); // 优惠费用
		
		entity.setPosSerialNum(waybill.getPosSerialNum());//POS串号
		entity.setBatchNo(waybill.getBatchNo());//银行交易流水号
		
		//如果为包裹，则需要设置出发部门和到达部门对应的快递代理  --默认取当前部门对应的映射
		if(SettlementUtil.isPackageProductCode(waybill.getProductCode())){
			//调用综合接口去查询快递代理点部
			ExpressPartSalesDeptResultDto origExpressDept = expressPartSalesDeptService.queryExpressPartSalesDeptBySalesCodeAndTime(waybill.getReceiveOrgCode(),date);
			//判断是否为空
			if(origExpressDept==null){
				throw new SettlementException("开单为德邦快递代理，其收入部门对应的快递代理点部不存在！");
			//如果快递代理点部存在，则获取快递代理点部门
			}else if(StringUtils.isNotBlank(origExpressDept.getPartCode())){
				entity.setExpressOrigOrgCode(origExpressDept.getPartCode());
				entity.setExpressOrigOrgName(origExpressDept.getPartName());
			//如果快递代理点部不存在，且不是试点城市，则获取对应出发部门
			}else{
				entity.setExpressOrigOrgCode(entity.getOrigOrgCode());
				entity.setExpressOrigOrgName(entity.getOrigOrgName());
			}
			
			//到达部门快递代理点部需要判断如果当前部门为自由网点，则需要进行映射，反正虚拟网点则直接获取
			if(FossConstants.NO.equals(waybill.getIsSelfStation())){
				entity.setExpressDestOrgCode(waybill.getLastLoadOrgCode());
				entity.setExpressDestOrgName(waybill.getLastLoadOrgName());
			}else{
				//设置到达部门映射
				ExpressPartSalesDeptResultDto destExpressDept = expressPartSalesDeptService.queryExpressPartSalesDeptBySalesCodeAndTime(waybill.getLastLoadOrgCode(),date);
				if(destExpressDept==null ){
					throw new SettlementException("开单为德邦快递代理，其最终配载部门对应的快递代理点部不存在！");
				}else if(StringUtils.isNotBlank(destExpressDept.getPartCode())){
					entity.setExpressDestOrgCode(destExpressDept.getPartCode());
					entity.setExpressDestOrgName(destExpressDept.getPartName());
				}else{
					entity.setExpressDestOrgCode(entity.getDestOrgCode());
					entity.setExpressDestOrgName(entity.getDestOrgName());
				}
			}
		
		}
	  
		//设置现金收款单的发票标记
		entity.setInvoiceMark(waybill.getInvoiceMark());
		

		return entity;
	}

	/**
	 * 通过运单信息生成到付应收单
	 * 
	 * @author ibm-zhuwei
	 * @date 2012-10-25 下午2:28:56
	 */
	/***
	 * 通过运单信息生成到付应收单
	 * 
	 * @author 099995-foss-wujiangtao
	 * @date 2013-3-14 下午5:02:31
	 * @param waybill
	 * @param date
	 * @param writeBackBillReceivableCOD
	 * @param writeBackBillReceivableDest
	 *            //到达运费应收单，如果为：空运到达运费应收单，
	 * 
	 *            2013-03-14日 更改处理在和大票时，运单没有代收货款应收单，只有到付运费应收单，
	 *            发更改之后，有了代收货款，那么生成的代收货款必须为代收货款应收单
	 * @return
	 */
	private BillReceivableEntity buildBillReceivableCOD(
			WaybillPickupInfoDto waybill, Date date,
			BillReceivableEntity writeBackBillReceivableCOD,
			BillReceivableEntity writeBackBillReceivableDest) {

		BillReceivableEntity entity = buildBillReceivable(waybill, date);

		// 到付，到达应收
		entity.setReceivableNo(settlementCommonService
				.getSettlementNoRule(SettlementNoRuleEnum.YS6)); // 应收单号
		entity.setPaymentType(SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__FREIGHT_COLLECT); // 付款方式
		entity.setBillType(SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__COD_RECEIVABLE); // 单据子类型

		// 应收部门：到达部门
		entity.setReceivableOrgCode(waybill.getLastLoadOrgCode()); // 应收部门编码
		entity.setReceivableOrgName(waybill.getLastLoadOrgName());
		// 催款部门：到达部门
		entity.setDunningOrgCode(waybill.getLastLoadOrgCode());
		entity.setDunningOrgName(waybill.getLastLoadOrgName());

		// 代收货款（属于增值业务）收入部门为空
		entity.setGeneratingOrgCode(null);
		entity.setGeneratingOrgName(null);
		entity.setGeneratingComCode(null);
		entity.setGeneratingComName(null);

		// 客户、发货客户、收货客户
		// 客户编码不为空则不能做到付签收转临欠月结
		entity.setCustomerCode(null); // 设置客户编码为空
		entity.setCustomerName(null);

		// 应收金额
		entity.setAmount(waybill.getCodAmount()); // 代收货款金额
		entity.setUnverifyAmount(entity.getAmount()); // 未核销金额
		entity.setVerifyAmount(BigDecimal.ZERO); // 已核销金额

		entity.setPaymentType(SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__FREIGHT_COLLECT); // 付款方式

		// 对于做过合票业务的单据，需要保留红单单据类型、客户信息
		if (writeBackBillReceivableCOD != null) {
			entity.setBillType(writeBackBillReceivableCOD.getBillType());
			entity.setCustomerCode(writeBackBillReceivableCOD.getCustomerCode());
			entity.setCustomerName(writeBackBillReceivableCOD.getCustomerName());
		}
		// 空运到达运费应收单
		else if (writeBackBillReceivableDest != null
				&& SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__AIR_AGENCY
						.equals(writeBackBillReceivableDest.getBillType())) {
			// 到达应收单不为空，且类型为：空运到达运费应收单
			entity.setBillType(SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__AIR_AGENCY_COD);// //
																										 // 空运代理代收货款应收
			entity.setCustomerCode(writeBackBillReceivableDest
					.getCustomerCode());// 应收单挂空运代理上
			entity.setCustomerName(writeBackBillReceivableDest
					.getCustomerName());// 应收单挂空运代理上
		}
		
		entity.setInvoiceMark(SettlementDictionaryConstants.SETTLEMENT_INVOICE_MARK_TWO);//代收货款应收单发票标记
        //代收货款的统一结算为否
        entity.setUnifiedSettlement(FossConstants.NO);
		return entity;
	}

	/**
	 * 通过运单信息生成到付应收单
	 * 
	 * @author IBM-zhuwei
	 * @date 2013-3-14 下午5:37:02
	 * @param waybill
	 * @param toPayFeeDto
	 * @param date
	 * @param writeBackBillReceivableDest
	 * @param writeBackBillReceivableCod
	 * 
	 *            运单在进入合大票前，只有代收货款，没有到付运费，进入合大票之后，代收货款应收单类型：空运代理代收货款应收单
	 *            合大票之后，发更改付款方式到付，存在到付金额，根据空运代理代收货款应收单设置到付运费应收单类型
	 * @return
	 */
	private BillReceivableEntity buildBillReceivableDest(
			WaybillPickupInfoDto waybill, WaybillFeeDto toPayFeeDto, Date date,
			BillReceivableEntity writeBackBillReceivableDest,
			BillReceivableEntity writeBackBillReceivableCod) {

		BillReceivableEntity entity = buildBillReceivable(waybill, date);

		// 到付，到达应收
		entity.setReceivableNo(settlementCommonService
				.getSettlementNoRule(SettlementNoRuleEnum.YS2)); // 应收单号
		entity.setPaymentType(SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__FREIGHT_COLLECT); // 付款方式
		entity.setBillType(SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__DESTINATION_RECEIVABLE); // 单据子类型

		// 应收部门：到达部门
		entity.setReceivableOrgCode(waybill.getLastLoadOrgCode()); // 应收部门编码
		entity.setReceivableOrgName(waybill.getLastLoadOrgName());
		// 催款部门：到达部门
		entity.setDunningOrgCode(waybill.getLastLoadOrgCode()); // 催款部门
		entity.setDunningOrgName(waybill.getLastLoadOrgName());

		// 结算客户：到付客户
		// 客户编码不为空则不能做到付签收转临欠月结
		entity.setCustomerCode(null); // 设置客户编码为空
		entity.setCustomerName(null);

		// 应收金额
		entity.setAmount(toPayFeeDto.getTotalFee()); // 到付金额
		entity.setUnverifyAmount(entity.getAmount()); // 未核销金额
		entity.setVerifyAmount(BigDecimal.ZERO); // 已核销金额

		entity.setTransportFee(toPayFeeDto.getTransportFee()); // 公布价运费
		entity.setPickupFee(toPayFeeDto.getPickupFee()); // 接货费
		entity.setDeliveryGoodsFee(toPayFeeDto.getDeliveryGoodsFee()); // 送货费
		entity.setPackagingFee(toPayFeeDto.getPackagingFee()); // 包装手续费
		entity.setCodFee(toPayFeeDto.getCodFee()); // 代收货款费
		entity.setInsuranceFee(toPayFeeDto.getInsuranceFee()); // 保价费
		entity.setOtherFee(toPayFeeDto.getOtherFee()); // 其他费用
		entity.setValueAddFee(toPayFeeDto.getValueAddFee()); // 增值费用
		entity.setPromotionsFee(toPayFeeDto.getPromotionsFee()); // 优惠费用

		// 对于做过合票业务的单据，需要保留红单单据类型、客户信息
		if (writeBackBillReceivableDest != null) {
			entity.setBillType(writeBackBillReceivableDest.getBillType());
			entity.setCustomerCode(writeBackBillReceivableDest
					.getCustomerCode());
			entity.setCustomerName(writeBackBillReceivableDest
					.getCustomerName());
		} else if (writeBackBillReceivableCod != null
				&& SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__AIR_AGENCY_COD
						.equals(writeBackBillReceivableCod.getBillType())) {
			entity.setBillType(SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__AIR_AGENCY);// 空运到达代理应收
			entity.setCustomerCode(writeBackBillReceivableCod.getCustomerCode());
			entity.setCustomerName(writeBackBillReceivableCod.getCustomerName());
		}
      
		entity.setInvoiceMark(waybill.getInvoiceMark());//发票标记

        //到达统一结算
        if (FossConstants.YES.equals(waybill.getDestUnifiedSettlement())
                &&!ProductEntityConstants.PRICING_PRODUCT_AIR_FREIGHT.equals(waybill.getProductCode())
                &&!ProductEntityConstants.PRICING_PRODUCT_PARTIAL_LINE.equals(waybill.getProductCode())) {
            //到达部门的合同编码和到达催款部门
            OrgAdministrativeInfoEntity orgEntity =orgAdministrativeInfoService
                    .queryOrgAdministrativeInfoByUnifiedCodeNoCache(waybill.getDestContractUnifiedCode());
            OrgAdministrativeInfoEntity duningOrgEntity =  orgAdministrativeInfoService
                    .queryOrgAdministrativeInfoByUnifiedCodeNoCache(waybill.getDestUnifiedDuningCode());
            if (orgEntity == null
                    || duningOrgEntity == null) {
                throw new SettlementException("到达应收,到达统一结算的合同部门编码或催款部门为空");
            } else {
                entity.setUnifiedSettlement(waybill.getDestUnifiedSettlement());
                //合同部门
                entity.setContractOrgCode(orgEntity.getCode());
                entity.setContractOrgName(orgEntity.getName());
                //应收部门
                entity.setReceivableOrgCode(orgEntity.getCode());
                entity.setReceivableOrgName(orgEntity.getName());
                //催款部门
                entity.setDunningOrgCode(duningOrgEntity.getCode());
                entity.setDunningOrgName(duningOrgEntity.getName());
            }
        } else {
            entity.setUnifiedSettlement(FossConstants.NO);
        }
        return entity;
    }

	/**
	 * 通过运单信息生成始发应收单
	 * 
	 * @author ibm-zhuwei
	 * @date 2012-10-25 下午3:24:19
	 */
	private BillReceivableEntity buildBillReceivableOrig(
			WaybillPickupInfoDto waybill, WaybillFeeDto prePayFeeDto, Date date) {

		BillReceivableEntity entity = buildBillReceivable(waybill, date);

		entity.setReceivableNo(settlementCommonService
				.getSettlementNoRule(SettlementNoRuleEnum.YS1)); // 应收单号
		entity.setBillType(SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__ORIGIN_RECEIVABLE); // 单据子类型
		entity.setPaymentType(waybill.getPaidMethod()); // 付款方式

		// 结算客户：始发客户
		entity.setCustomerCode(waybill.getDeliveryCustomerCode()); // 客户编码
		entity.setCustomerName(waybill.getDeliveryCustomerName());

		// 应收部门：始发部门
		entity.setReceivableOrgCode(waybill.getReceiveOrgCode()); // 应收部门编码
		entity.setReceivableOrgName(waybill.getReceiveOrgName());
		// 催款部门：始发部门
		entity.setDunningOrgCode(waybill.getReceiveOrgCode()); // 催款部门
		entity.setDunningOrgName(waybill.getReceiveOrgName());

		// 应收金额
		entity.setAmount(prePayFeeDto.getTotalFee()); // 始发应收金额
		entity.setUnverifyAmount(entity.getAmount()); // 未核销金额
		entity.setVerifyAmount(BigDecimal.ZERO); // 已核销金额

		entity.setTransportFee(prePayFeeDto.getTransportFee()); // 公布价运费
		entity.setPickupFee(prePayFeeDto.getPickupFee()); // 接货费
		entity.setDeliveryGoodsFee(prePayFeeDto.getDeliveryGoodsFee()); // 送货费
		entity.setPackagingFee(prePayFeeDto.getPackagingFee()); // 包装手续费
		entity.setCodFee(prePayFeeDto.getCodFee()); // 代收货款费
		entity.setInsuranceFee(prePayFeeDto.getInsuranceFee()); // 保价费
		entity.setOtherFee(prePayFeeDto.getOtherFee()); // 其他费用
		entity.setValueAddFee(prePayFeeDto.getValueAddFee()); // 增值费用
		entity.setPromotionsFee(prePayFeeDto.getPromotionsFee()); // 优惠费用
		
		entity.setInvoiceMark(waybill.getInvoiceMark());//发票标记
        //始发应收合同部门
        if(FossConstants.YES.equals(waybill.getOrigUnifiedSettlement())){
            //到达部门的合同编码和到达催款部门
            OrgAdministrativeInfoEntity orgEntity =orgAdministrativeInfoService
                    .queryOrgAdministrativeInfoByUnifiedCodeNoCache(waybill.getOrigContractUnifiedCode());
            OrgAdministrativeInfoEntity duningOrgEntity =  orgAdministrativeInfoService
                    .queryOrgAdministrativeInfoByUnifiedCodeNoCache(waybill.getOrigUnifiedDuningCode());
            if (orgEntity == null
                    || duningOrgEntity == null) {
                throw new SettlementException("始发应收,始发统一结算的合同部门编码或催款部门为空");
            } else {
                entity.setUnifiedSettlement(waybill.getOrigUnifiedSettlement());
                //合同部门
                entity.setContractOrgCode(orgEntity.getCode());
                entity.setContractOrgName(orgEntity.getName());
                //应收部门
                entity.setReceivableOrgCode(orgEntity.getCode());
                entity.setReceivableOrgName(orgEntity.getName());
                //催款部门
                entity.setDunningOrgCode(duningOrgEntity.getCode());
                entity.setDunningOrgName(duningOrgEntity.getName());
            }
        }else{
            entity.setUnifiedSettlement(FossConstants.NO);
        }
		return entity;
	}

	/**
	 * 通过运单信息生成应收单
	 * 
	 * @author ibm-zhuwei
	 * @date 2012-10-25 下午3:21:51
	 */
	private BillReceivableEntity buildBillReceivable(
			WaybillPickupInfoDto waybill, Date date) {
		BillReceivableEntity entity = new BillReceivableEntity();

		// 财务单据信息
		entity.setId(UUIDUtils.getUUID()); // ID
		entity.setActive(FossConstants.ACTIVE); // 是否有效
		entity.setIsRedBack(SettlementDictionaryConstants.SETTLEMENT__IS_RED_BACK__NO); // 是否红单
		entity.setIsInit(FossConstants.NO); // 是否初始化
		entity.setVersionNo(FossConstants.INIT_VERSION_NO); // 初始化版本号
		entity.setBusinessDate(waybill.getBillTime()); // 业务日期
		entity.setAccountDate(date); // 记账日期

		entity.setCreateType(SettlementDictionaryConstants.SETTLEMENT__CREATE_TYPE__AUTO); // 系统生成方式
		entity.setApproveStatus(SettlementDictionaryConstants.BILL_RECEIVABLE__APPROVE_STATUS__AUDIT_AGREE); // 审核状态
		entity.setWaybillId(waybill.getId()); // 运单ID
		entity.setWaybillNo(waybill.getWaybillNo()); // 运单号
		entity.setSourceBillNo(waybill.getWaybillNo()); // 来源单据单号
		entity.setSourceBillType(SettlementDictionaryConstants.BILL_RECEIVABLE__SOURCE_BILL_TYPE__WAYBILL); // 来源单据类型

		// 发货客户、收获客户
		entity.setDeliveryCustomerCode(waybill.getDeliveryCustomerCode()); // 发货客户
		entity.setDeliveryCustomerName(waybill.getDeliveryCustomerName());
		//收货联系人   --2013-05-18 因为官网需要收货联系人，与许明明讨论收货人结算也用不到，故而此处存储收货联系人
		entity.setReceiveCustomerCode(waybill.getReceiveCustomerCode()); // 收货客户
		entity.setReceiveCustomerName(waybill.getReceiveCustomerContact());//此处获取收货联系人---配合官网

		// 收入部门：收货部门
		entity.setGeneratingOrgCode(waybill.getReceiveOrgCode()); // 收入部门
		entity.setGeneratingOrgName(waybill.getReceiveOrgName());
		entity.setGeneratingComCode(waybill.getReceiveSubsidiaryCode()); // 收入子公司
		entity.setGeneratingComName(waybill.getReceiveSubsidiaryName());

		//快递代理 出发部门获取开单部门
		if(SettlementUtil.isPackageProductCode(waybill.getProductCode())){
			entity.setOrigOrgCode(waybill.getCreateOrgCode()); // 出发部门编码
			entity.setOrigOrgName(waybill.getCreateUserDeptName());
		}else{
			entity.setOrigOrgCode(waybill.getReceiveOrgCode()); // 出发部门编码
			entity.setOrigOrgName(waybill.getReceiveOrgName());
		}
		entity.setDestOrgCode(waybill.getLastLoadOrgCode()); // 到达部门
		entity.setDestOrgName(waybill.getLastLoadOrgName());

		// 开单相关信息
		entity.setReceiveMethod(waybill.getReceiveMethod()); // 提货方式
		entity.setProductCode(waybill.getProductCode()); // 产品类型
		entity.setProductId(waybill.getProductId()); // 产品ID
		entity.setCurrencyCode(waybill.getCurrencyCode()); // 币种

		// 以下冗余信息，对账单需要
		entity.setGoodsName(waybill.getGoodsName()); // 货物名称
		if (waybill.getGoodsQtyTotal() != null) { // 货物总件数
			entity.setGoodsQtyTotal(NumberUtils.createBigDecimal(String
					.valueOf(waybill.getGoodsQtyTotal())));
		}
		entity.setGoodsVolumeTotal(waybill.getGoodsVolumeTotal()); // 货物总体积
		
		//空运取计费重量，否则取总重量
		if (ProductEntityConstants.PRICING_PRODUCT_AIR_FREIGHT.equals(waybill.getProductCode())) {
			entity.setBillWeight(waybill.getBillWeight()); // 计费重量
		} else {
			entity.setBillWeight(waybill.getGoodsWeightTotal());
		}
		
		entity.setReceiveMethod(waybill.getReceiveMethod()); // 提货方式
		entity.setCustomerPickupOrgCode(waybill.getCustomerPickupOrgCode()); // 提货网点
		entity.setTargetOrgCode(waybill.getTargetOrgCode()); // 目的站
		//如果为包裹，则需要设置出发部门和到达部门对应的快递代理  --默认取当前部门对应的映射
		if(SettlementUtil.isPackageProductCode(waybill.getProductCode())){
			//调用综合接口去查询快递代理点部
			ExpressPartSalesDeptResultDto origExpressDept = expressPartSalesDeptService.queryExpressPartSalesDeptBySalesCodeAndTime(waybill.getReceiveOrgCode(),date);
			//判断是否为空
			if(origExpressDept==null){
				throw new SettlementException("开单为德邦快递代理，其收入部门对应的快递代理点部不存在！");
			//如果快递代理点部存在，则获取快递代理点部门
			}else if(StringUtils.isNotBlank(origExpressDept.getPartCode())){
				entity.setExpressOrigOrgCode(origExpressDept.getPartCode());
				entity.setExpressOrigOrgName(origExpressDept.getPartName());
			//如果快递代理点部不存在，且不是试点城市，则获取对应出发部门
			}else{
				entity.setExpressOrigOrgCode(entity.getOrigOrgCode());
				entity.setExpressOrigOrgName(entity.getOrigOrgName());
			}
			//到达部门快递代理点部需要判断如果当前部门为自由网点，则需要进行映射，反正虚拟网点则直接获取
			if(FossConstants.NO.equals(waybill.getIsSelfStation())){
				entity.setExpressDestOrgCode(waybill.getLastLoadOrgCode());
				entity.setExpressDestOrgName(waybill.getLastLoadOrgName());
			}else{
				//设置到达部门映射
				ExpressPartSalesDeptResultDto destExpressDept = expressPartSalesDeptService.queryExpressPartSalesDeptBySalesCodeAndTime(waybill.getLastLoadOrgCode(),date);
				if(destExpressDept==null ){
					throw new SettlementException("开单为德邦快递代理，其最终配载部门对应的快递代理点部不存在！");
				}else if(StringUtils.isNotBlank(destExpressDept.getPartCode())){
					entity.setExpressDestOrgCode(destExpressDept.getPartCode());
					entity.setExpressDestOrgName(destExpressDept.getPartName());
				}else{
					entity.setExpressDestOrgCode(entity.getDestOrgCode());
					entity.setExpressDestOrgName(entity.getDestOrgName());
				}
			}	
		}
		return entity;
	}

	/**
	 * 通过运单信息生成装卸费应付单
	 * 
	 * @author ibm-zhuwei
	 * @date 2012-10-25 下午3:35:04
	 */
	private BillPayableEntity buildBillPayableSF(WaybillPickupInfoDto waybill,
			Date date) {

		BillPayableEntity entity = buildBillPayable(waybill, date);

		entity.setPayableNo(settlementCommonService
				.getSettlementNoRule(SettlementNoRuleEnum.YF2)); // 应付单号
		entity.setBillType(SettlementDictionaryConstants.BILL_PAYABLE__BILL_TYPE__SERVICE_FEE); // 单据子类型

		// 应付金额
		entity.setAmount(waybill.getServiceFee()); // 应付装卸费
		entity.setVerifyAmount(BigDecimal.ZERO); // 已核销金额
		entity.setUnverifyAmount(entity.getAmount()); // 未核销金额

		// 联系人名称--接送货前端文本框手动填写的
		entity.setCustomerContactName(waybill.getDeliveryCustomerContact());

		// 联系人电话---发货客户手机号码不为空，设置为手机号码，要么设置为运单的发货客户电话
		entity.setCustomerPhone(StringUtils.isNotEmpty(waybill
				.getDeliveryCustomerMobilephone()) ? waybill
				.getDeliveryCustomerMobilephone() : waybill
				.getDeliveryCustomerPhone());
		
	   entity.setInvoiceMark(waybill.getInvoiceMark());//装卸费发票标记
       //装卸费统一结算
       if(FossConstants.YES.equals(waybill.getOrigUnifiedSettlement())){
           OrgAdministrativeInfoEntity orgEntity =orgAdministrativeInfoService
                   .queryOrgAdministrativeInfoByUnifiedCodeNoCache(waybill.getOrigContractUnifiedCode());
           if(orgEntity == null){
               throw new SettlementException("生成劳务费，始发统一结算的合同部门为空");
           }else{
       		/**
       		 * @author 218392 zhangyongxue
       		 * @date 2016-06-01 09:39:20
       		 * 整车项目：始发统一结算、合同部门名称、编码均是整车传送过来的，不再用FOSS的基础资料，所以这块就没必要再访问FOSS数据库查询，
       		 * 防止查询结果为空覆盖已传递过来的值；
       		 * 
       		 */
        	   if(!StringUtil.isEmpty(waybill.getBusinessId())){
        		   entity.setUnifiedSettlement(waybill.getOrigUnifiedSettlement());//始发统一结算
        		   entity.setContractOrgCode(waybill.getContractOrgCode());//合同部门编码
        		   entity.setContractOrgName(waybill.getContractOrgName());//合同名称
        		   entity.setPayableOrgCode(waybill.getContractOrgCode());//应付部门
        		   entity.setPayableOrgName(waybill.getContractOrgName());//应付部门名称
        	   }else{
                   entity.setUnifiedSettlement(waybill.getOrigUnifiedSettlement());
                   entity.setContractOrgCode(orgEntity.getCode());
                   entity.setContractOrgName(orgEntity.getName());
                   entity.setPayableOrgCode(orgEntity.getCode());
                   entity.setPayableOrgName(orgEntity.getName());
        	   }
        	   

           }
       }else{
           entity.setUnifiedSettlement(FossConstants.NO);
       }
		
		return entity;
	}

	/**
	 * 通过运单信息生成代收货款应付单
	 * 
	 * @author ibm-zhuwei
	 * @date 2012-10-25 下午3:35:04
	 */
	private BillPayableEntity buildBillPayableCOD(WaybillPickupInfoDto waybill,
			Date date) {

		BillPayableEntity entity = buildBillPayable(waybill, date);

		entity.setCodType(waybill.getRefundType());
		entity.setPayableNo(settlementCommonService
				.getSettlementNoRule(SettlementNoRuleEnum.YF1)); // 应付单号
		entity.setBillType(SettlementDictionaryConstants.BILL_PAYABLE__BILL_TYPE__ACCOUNT_PAYABLE_COD); // 单据子类型

		// 应付金额
		entity.setAmount(waybill.getCodAmount()); // 应付代收货款
		entity.setVerifyAmount(BigDecimal.ZERO); // 已核销金额
		entity.setUnverifyAmount(entity.getAmount()); // 未核销金额
		
		entity.setInvoiceMark(SettlementDictionaryConstants.SETTLEMENT_INVOICE_MARK_TWO);//代收货款应付单发票标记

		return entity;
	}

	/**
	 * 通过运单信息生成应付单
	 * 
	 * @author ibm-zhuwei
	 * @date 2012-10-25 下午3:35:04
	 */
	private BillPayableEntity buildBillPayable(WaybillPickupInfoDto waybill,
			Date date) {

		BillPayableEntity entity = new BillPayableEntity();

		// ID,应付单号,运单号,运单ID,生成方式,付款方
		entity.setId(UUIDUtils.getUUID());
		entity.setWaybillNo(waybill.getWaybillNo());
		entity.setWaybillId(waybill.getId());
		entity.setCreateType(SettlementDictionaryConstants.SETTLEMENT__CREATE_TYPE__AUTO);
		entity.setPayerType(SettlementDictionaryConstants.BILL_PAYABLE__PAYER_TYPE__ORIGIN);

		// 默认已审核，未冻结
		entity.setApproveStatus(SettlementDictionaryConstants.BILL_PAYABLE__APPROVE_STATUS__AUDIT_AGREE); // 审核状态
		entity.setFrozenStatus(SettlementDictionaryConstants.BILL_PAYABLE__FROZEN_STATUS__NOT_FROZEN); // 冻结状态
		entity.setPayableType(null);
		entity.setEffectiveStatus(SettlementDictionaryConstants.BILL_PAYABLE__EFFECTIVE_STATUS__NO); // 生效状态

		// 应付单单据信息
		entity.setSourceBillNo(waybill.getWaybillNo()); // 来源单据号
		entity.setSourceBillType(SettlementDictionaryConstants.BILL_PAYABLE__SOURCE_BILL_TYPE__WAYBILL); // 来源单据类型
		entity.setPayStatus(SettlementDictionaryConstants.BILL_PAYABLE__PAY_STATUS__NO); // 支付状态
		entity.setActive(FossConstants.YES); // 是否有效
		entity.setIsRedBack(SettlementDictionaryConstants.SETTLEMENT__IS_RED_BACK__NO); // 是否红单
		entity.setIsInit(FossConstants.NO); // 是否初始化
		entity.setVersionNo(FossConstants.INIT_VERSION_NO); // 版本号

		// 设置应付单部门编码、名称、子公司编码、名称
		entity.setPayableOrgCode(waybill.getReceiveOrgCode());
		entity.setPayableOrgName(waybill.getReceiveOrgName());
		entity.setPayableComCode(waybill.getReceiveSubsidiaryCode());
		entity.setPayableComName(waybill.getReceiveSubsidiaryName());

		//BUGKD-1646 start
		//快递代理 出发部门获取开单部门
		/*if(ProductEntityConstants.PRICING_PRODUCT_EXPRESS_PACKAGE.equals(waybill.getProductCode())){
			entity.setOrigOrgCode(waybill.getCreateOrgCode()); // 出发部门编码
			entity.setOrigOrgName(waybill.getCreateUserDeptName());
		}else{
			entity.setOrigOrgCode(waybill.getReceiveOrgCode()); // 出发部门编码
			entity.setOrigOrgName(waybill.getReceiveOrgName());
		}*/
		//BUGKD-1646 代收货款应付单的始发部门信息应该取收货部门信息，而不是开单部门。
		entity.setOrigOrgCode(waybill.getReceiveOrgCode()); // 出发部门编码
		entity.setOrigOrgName(waybill.getReceiveOrgName());
		//BUGKD-1646 end

		// 到达部门名称、到达部门编码
		entity.setDestOrgCode(waybill.getLastLoadOrgCode());
		entity.setDestOrgName(waybill.getLastLoadOrgName());

		// 设置出发（应付）客户编码、名称
		entity.setCustomerCode(waybill.getDeliveryCustomerCode());
		entity.setCustomerName(waybill.getDeliveryCustomerName());
		entity.setCustomerContact(waybill.getReceiveCustomerContact());
		entity.setCustomerContactName(waybill.getReceiveCustomerContact());
		entity.setCustomerPhone(waybill.getReceiveCustomerMobilephone());

		// 设置币种、会计日期、业务日期
		entity.setCurrencyCode(waybill.getCurrencyCode());
		entity.setAccountDate(date);
		entity.setBusinessDate(waybill.getBillTime());

		// 设置日期
		entity.setEffectiveDate(null); // 生效日期
		entity.setCreateTime(date); // 创建时间
		entity.setModifyTime(date); // 修改时间

		// 运输性质
		entity.setProductCode(waybill.getProductCode());
		entity.setProductId(waybill.getProductId());
		
		//如果为包裹，则需要设置出发部门和到达部门对应的快递代理  --默认取当前部门对应的映射
		if(SettlementUtil.isPackageProductCode(waybill.getProductCode())){
			//调用综合接口去查询快递代理点部
			ExpressPartSalesDeptResultDto origExpressDept = expressPartSalesDeptService.queryExpressPartSalesDeptBySalesCodeAndTime(waybill.getReceiveOrgCode(),date);
			//判断是否为空
			if(origExpressDept==null){
				throw new SettlementException("开单为德邦快递代理，其收入部门对应的快递代理点部不存在！");
			//如果快递代理点部存在，则获取快递代理点部门
			}else if(StringUtils.isNotBlank(origExpressDept.getPartCode())){
				entity.setExpressOrigOrgCode(origExpressDept.getPartCode());
				entity.setExpressOrigOrgName(origExpressDept.getPartName());
			//如果快递代理点部不存在，且不是试点城市，则获取对应出发部门
			}else{
				entity.setExpressOrigOrgCode(entity.getOrigOrgCode());
				entity.setExpressOrigOrgName(entity.getOrigOrgName());
			}
			//到达部门快递代理点部需要判断如果当前部门为自有网点，则需要进行映射，反正虚拟网点则直接获取
			if(FossConstants.NO.equals(waybill.getIsSelfStation())){
				entity.setExpressDestOrgCode(waybill.getLastLoadOrgCode());
				entity.setExpressDestOrgName(waybill.getLastLoadOrgName());
			}else{
				//设置到达部门映射
				ExpressPartSalesDeptResultDto destExpressDept = expressPartSalesDeptService.queryExpressPartSalesDeptBySalesCodeAndTime(waybill.getLastLoadOrgCode(),date);
				if(destExpressDept==null ){
					throw new SettlementException("开单为德邦快递代理，其最终配载部门对应的快递代理点部不存在！");
				//如果快递代理点部存在，则获取快递代理点部门
				}else if(StringUtils.isNotBlank(destExpressDept.getPartCode())){
					entity.setExpressDestOrgCode(destExpressDept.getPartCode());
					entity.setExpressDestOrgName(destExpressDept.getPartName());
				//如果快递代理点部不存在，且不是试点城市，则获取对应到达部门	
				}else{
					entity.setExpressDestOrgCode(entity.getDestOrgCode());
					entity.setExpressDestOrgName(entity.getDestOrgName());
				}
			}
		}

		return entity;
	}

	// public static void main(String[] args) {
	// WaybillPickupService service = new WaybillPickupService();
	// WaybillEntity waybill = new WaybillEntity();
	// waybill.setTotalFee(new BigDecimal("98"));
	// waybill.setCodAmount(BigDecimal.ZERO);
	// waybill.setPrePayAmount(new BigDecimal("45"));
	// waybill.setToPayAmount(new BigDecimal("53"));
	//
	// waybill.setTransportFee(new BigDecimal("90"));
	// waybill.setPromotionsFee(BigDecimal.ZERO);
	// waybill.setPickupFee(BigDecimal.ZERO);
	// waybill.setDeliveryGoodsFee(BigDecimal.ZERO);
	// waybill.setPackageFee(BigDecimal.ZERO);
	// waybill.setCodFee(BigDecimal.ZERO);
	// waybill.setInsuranceFee(new BigDecimal("8"));
	//
	// WaybillFeeDto prePayFeeDto = new WaybillFeeDto();
	// WaybillFeeDto toPayFeeDto = new WaybillFeeDto();
	// service.splitWaybillFee(waybill, prePayFeeDto, toPayFeeDto);
	//
	// System.out
	// .println(String
	// .format("transportFee:%s,deliverGoodsFee:%s,pickupFee:%s,codFee:%s,packageFee:%s,insuranceFee:%s,otherFee:%s",
	// waybill.getTransportFee(),
	// waybill.getDeliveryGoodsFee(),
	// waybill.getPickupFee(), waybill.getCodFee(),
	// waybill.getPackageFee(),
	// waybill.getInsuranceFee(),
	// waybill.getOtherFee()));
	//
	// System.out
	// .println(String
	// .format("transportFee:%s,deliverGoodsFee:%s,pickupFee:%s,codFee:%s,packageFee:%s,insuranceFee:%s,otherFee:%s",
	// prePayFeeDto.getTransportFee(),
	// prePayFeeDto.getDeliveryGoodsFee(),
	// prePayFeeDto.getPickupFee(),
	// prePayFeeDto.getCodFee(),
	// prePayFeeDto.getPackagingFee(),
	// prePayFeeDto.getInsuranceFee(),
	// prePayFeeDto.getOtherFee()));
	//
	// System.out
	// .println(String
	// .format("transportFee:%s,deliverGoodsFee:%s,pickupFee:%s,codFee:%s,packageFee:%s,insuranceFee:%s,otherFee:%s",
	// toPayFeeDto.getTransportFee(),
	// toPayFeeDto.getDeliveryGoodsFee(),
	// toPayFeeDto.getPickupFee(),
	// toPayFeeDto.getCodFee(),
	// toPayFeeDto.getPackagingFee(),
	// toPayFeeDto.getInsuranceFee(),
	// toPayFeeDto.getOtherFee()));
	// }

	/**
	 * 金额拆分
	 * 
	 * @author ibm-zhuwei
	 * @date 2012-11-2 下午5:08:43
	 */
	private void splitWaybillFee(WaybillEntity waybill		,
			WaybillFeeDto prePayFeeDto, WaybillFeeDto toPayFeeDto) {

		BigDecimal totalFee = waybill.getTotalFee().subtract(
				waybill.getCodAmount()); // 总金额（去除代收货款）
		BigDecimal prePayAmount = waybill.getPrePayAmount(); // 预付金额

		BigDecimal toPayAmount = waybill.getToPayAmount().subtract( // 到付
				waybill.getCodAmount()); // 到付金额（去除代收货款）

		if (prePayAmount.compareTo(BigDecimal.ZERO) == 0) { // 预付金额等于0

			toPayFeeDto.setTotalFee(toPayAmount); // 现金总额
			toPayFeeDto.setTransportFee(waybill.getTransportFee()); // 公布价运费
			toPayFeeDto.setPickupFee(waybill.getPickupFee()); // 接货费
			toPayFeeDto.setDeliveryGoodsFee(waybill.getDeliveryGoodsFee()); // 送货费
			toPayFeeDto.setPackagingFee(waybill.getPackageFee()); // 包装手续费
			toPayFeeDto.setCodFee(waybill.getCodFee()); // 代收货款费
			toPayFeeDto.setInsuranceFee(waybill.getInsuranceFee()); // 保价费
			toPayFeeDto.setOtherFee(waybill.getOtherFee()); // 其他费用
			toPayFeeDto.setValueAddFee(waybill.getValueAddFee()); // 增值费用
			toPayFeeDto.setPromotionsFee(waybill.getPromotionsFee()); // 优惠费用

		} else if (toPayAmount.compareTo(BigDecimal.ZERO) == 0) { // 到付金额等于0

			prePayFeeDto.setTotalFee(prePayAmount); // 现金总额
			prePayFeeDto.setTransportFee(waybill.getTransportFee()); // 公布价运费
			prePayFeeDto.setPickupFee(waybill.getPickupFee()); // 接货费
			prePayFeeDto.setDeliveryGoodsFee(waybill.getDeliveryGoodsFee()); // 送货费
			prePayFeeDto.setPackagingFee(waybill.getPackageFee()); // 包装手续费
			prePayFeeDto.setCodFee(waybill.getCodFee()); // 代收货款费
			prePayFeeDto.setInsuranceFee(waybill.getInsuranceFee()); // 保价费
			prePayFeeDto.setOtherFee(waybill.getOtherFee()); // 其他费用
			prePayFeeDto.setValueAddFee(waybill.getValueAddFee()); // 增值费用
			prePayFeeDto.setPromotionsFee(waybill.getPromotionsFee()); // 优惠费用

		} else {

			prePayFeeDto.setTotalFee(prePayAmount);
			toPayFeeDto.setTotalFee(toPayAmount);

			// 公布价运费：运单公布价运费 × (现付/（总运费））；
			// 接货费：运单接货费 × (现付/（总运费））；
			// 送货费：运单送货费 × (现付/（总运费））；
			// 包装手续费：运单包装手续费 ×(现付/（总运费））；
			// 代收货款手续费：运单代收货款手续费 × (现付/（总运费））；
			// 保价费：运单保价费 × (现付/（总运费））；
			BigDecimal transportFee = waybill.getTransportFee();
			BigDecimal promotionsFee = waybill.getPromotionsFee();
			BigDecimal pickupFee = waybill.getPickupFee();
			BigDecimal deliveryGoodsFee = waybill.getDeliveryGoodsFee();
			BigDecimal packageFee = waybill.getPackageFee();
			BigDecimal codFee = waybill.getCodFee();
			BigDecimal insuranceFee = waybill.getInsuranceFee();

			// 费用精确两位，统一向下取整
			transportFee = transportFee.multiply(prePayAmount).divide(totalFee,
					DIVDE_NUMBER, BigDecimal.ROUND_FLOOR);
			promotionsFee = promotionsFee.multiply(prePayAmount).divide(
					totalFee, DIVDE_NUMBER, BigDecimal.ROUND_FLOOR);
			pickupFee = pickupFee.multiply(prePayAmount).divide(totalFee,
					DIVDE_NUMBER, BigDecimal.ROUND_FLOOR);
			deliveryGoodsFee = deliveryGoodsFee.multiply(prePayAmount).divide(
					totalFee, DIVDE_NUMBER, BigDecimal.ROUND_FLOOR);
			packageFee = packageFee.multiply(prePayAmount).divide(totalFee,
					DIVDE_NUMBER, BigDecimal.ROUND_FLOOR);
			codFee = codFee.multiply(prePayAmount).divide(totalFee,
					DIVDE_NUMBER, BigDecimal.ROUND_FLOOR);
			insuranceFee = insuranceFee.multiply(prePayAmount).divide(totalFee,
					DIVDE_NUMBER, BigDecimal.ROUND_FLOOR);

			// 除其他费外增值费：接货费+送货费+运单包装手续费+代收货款手续费+保价费
			BigDecimal noOtherValueFee = NumberUtils.sum(pickupFee,
					deliveryGoodsFee, packageFee, codFee, insuranceFee);

			// 其他费用：运单预付运费金额-公布价运费-接货费-送货费-运单包装手续费-代收货款手续费-保价费
			// 公布价费用包含了优惠费用
			BigDecimal otherFee = prePayAmount.subtract(transportFee).subtract(
					noOtherValueFee);

			// 增值费用：接货费+送货费+运单包装手续费+代收货款手续费+保价费+其他费
			BigDecimal valueAddFee = noOtherValueFee.add(otherFee);

			prePayFeeDto.setTotalFee(prePayAmount);
			prePayFeeDto.setTransportFee(transportFee);
			prePayFeeDto.setPickupFee(pickupFee);
			prePayFeeDto.setDeliveryGoodsFee(deliveryGoodsFee);
			prePayFeeDto.setPackagingFee(packageFee);
			prePayFeeDto.setCodFee(codFee);
			prePayFeeDto.setInsuranceFee(insuranceFee);
			prePayFeeDto.setOtherFee(otherFee);
			prePayFeeDto.setValueAddFee(valueAddFee);
			prePayFeeDto.setPromotionsFee(promotionsFee);

			transportFee = waybill.getTransportFee();
			promotionsFee = waybill.getPromotionsFee();
			pickupFee = waybill.getPickupFee();
			deliveryGoodsFee = waybill.getDeliveryGoodsFee();
			packageFee = waybill.getPackageFee();
			codFee = waybill.getCodFee();
			insuranceFee = waybill.getInsuranceFee();

			// 费用精确两位，统一向下取整
			transportFee = transportFee.multiply(toPayAmount).divide(totalFee,
					DIVDE_NUMBER, BigDecimal.ROUND_FLOOR);
			promotionsFee = promotionsFee.multiply(toPayAmount).divide(
					totalFee, DIVDE_NUMBER, BigDecimal.ROUND_FLOOR);
			pickupFee = pickupFee.multiply(toPayAmount).divide(totalFee,
					DIVDE_NUMBER, BigDecimal.ROUND_FLOOR);
			deliveryGoodsFee = deliveryGoodsFee.multiply(toPayAmount).divide(
					totalFee, DIVDE_NUMBER, BigDecimal.ROUND_FLOOR);
			packageFee = packageFee.multiply(toPayAmount).divide(totalFee,
					DIVDE_NUMBER, BigDecimal.ROUND_FLOOR);
			codFee = codFee.multiply(toPayAmount).divide(totalFee,
					DIVDE_NUMBER, BigDecimal.ROUND_FLOOR);
			insuranceFee = insuranceFee.multiply(toPayAmount).divide(totalFee,
					DIVDE_NUMBER, BigDecimal.ROUND_FLOOR);

			// 除其他费外增值费：接货费+送货费+运单包装手续费+代收货款手续费+保价费
			noOtherValueFee = NumberUtils.sum(pickupFee, deliveryGoodsFee,
					packageFee, codFee, insuranceFee);

			// 其他费用：运单预付运费金额-公布价运费-接货费-送货费-运单包装手续费-代收货款手续费-保价费
			// 公布价费用包含了优惠费用
			otherFee = toPayAmount.subtract(transportFee).subtract(
					noOtherValueFee);

			// 增值费用：接货费+送货费+运单包装手续费+代收货款手续费+保价费+其他费
			valueAddFee = noOtherValueFee.add(otherFee);

			toPayFeeDto.setTotalFee(toPayAmount);
			toPayFeeDto.setTransportFee(transportFee);
			toPayFeeDto.setPickupFee(pickupFee);
			toPayFeeDto.setDeliveryGoodsFee(deliveryGoodsFee);
			toPayFeeDto.setPackagingFee(packageFee);
			toPayFeeDto.setCodFee(codFee);
			toPayFeeDto.setInsuranceFee(insuranceFee);
			toPayFeeDto.setOtherFee(otherFee);
			toPayFeeDto.setValueAddFee(valueAddFee);
			toPayFeeDto.setPromotionsFee(promotionsFee);
		}

	}

	/**
	 * 验证新增运单合法性
	 * 
	 * @author ibm-zhuwei
	 * @date 2012-11-5 上午10:58:44
	 */
	private void validAddedWaybillParam(WaybillPickupInfoDto waybill,
			CurrentInfo currentInfo) {

		// 接送货校验 1) 运单是否合法 2)运单是否存在或重复或作废 3)产品类型必须正确

		// 校验产品类型为空
		if (StringUtils.isEmpty(waybill.getProductCode())
				|| StringUtils.isEmpty(waybill.getProductId())) {
			throw new SettlementException("产品类型不能为空");
		}

		// 校验运单的收货部门、接货部门、到达部门、录入部门为空
		if (StringUtils.isEmpty(waybill.getCreateOrgCode())
				|| StringUtils.isEmpty(waybill.getReceiveOrgCode())
				|| StringUtils.isEmpty(waybill.getLastLoadOrgCode())) {
			throw new SettlementException("部门信息不完整");
		}

		// 开单付款方式不能为电汇或支票
		if (SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__TELEGRAPH_TRANSFER
				.equals(waybill.getPaidMethod())
				|| SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__NOTE
						.equals(waybill.getPaidMethod())) {
			throw new SettlementException("开单付款方式不能为支票或电汇！");
		}

		// 校验运单金额，预付、到付、公布价运费、送货费、包装费、代收货款手续费、保价费，其它费用，优惠费用单个字段的有效性，其中任意一项为空或者小于0
		if (waybill.getTotalFee() == null
				|| waybill.getTotalFee().compareTo(BigDecimal.ZERO) < 0
				|| waybill.getPrePayAmount() == null
				|| waybill.getPrePayAmount().compareTo(BigDecimal.ZERO) < 0
				|| waybill.getToPayAmount() == null
				|| waybill.getToPayAmount().compareTo(BigDecimal.ZERO) < 0
				|| waybill.getCodAmount() == null
				|| waybill.getCodAmount().compareTo(BigDecimal.ZERO) < 0
				|| waybill.getTransportFee() == null
				|| waybill.getTransportFee().compareTo(BigDecimal.ZERO) < 0
				|| waybill.getPickupFee() == null
				|| waybill.getPickupFee().compareTo(BigDecimal.ZERO) < 0
				|| waybill.getDeliveryGoodsFee() == null
				|| waybill.getDeliveryGoodsFee().compareTo(BigDecimal.ZERO) < 0
				|| waybill.getPackageFee() == null
				|| waybill.getPackageFee().compareTo(BigDecimal.ZERO) < 0
				|| waybill.getCodFee() == null
				|| waybill.getCodFee().compareTo(BigDecimal.ZERO) < 0
				|| waybill.getInsuranceFee() == null
				|| waybill.getInsuranceFee().compareTo(BigDecimal.ZERO) < 0
				|| waybill.getOtherFee() == null
				//ISSUE-2816
				//|| waybill.getOtherFee().compareTo(BigDecimal.ZERO) < 0
				|| waybill.getValueAddFee() == null
				//ISSUE-2816
				//|| waybill.getValueAddFee().compareTo(BigDecimal.ZERO) < 0
				|| waybill.getPromotionsFee() == null
				|| waybill.getPromotionsFee().compareTo(BigDecimal.ZERO) < 0) {
			logger.info("运单部分字段金额不正确，不能继续操作："+"总金额："+waybill.getTotalFee()+"，预付款："+waybill.getPrePayAmount()+
					"，到付："+waybill.getToPayAmount()+"，代收："+waybill.getCodAmount() +"，运费："+waybill.getTransportFee()+"，接货费："+waybill.getPickupFee()+"，送货费："+waybill.getDeliveryGoodsFee()+
					"，包装费："+waybill.getPackageFee()+",代收费："+waybill.getCodFee()+"，保费："+waybill.getInsuranceFee()+"，其他费用："+waybill.getOtherFee()+"，增值费："+waybill.getValueAddFee()+"，优惠金额："+waybill.getPromotionsFee());
			throw new SettlementException("运单部分字段金额不正确，不能继续操作");
		}

		// 校验运单内部金额是否正确。如果运单的（预付+到付-代收货款）不等于（公布价运费、接货费、送货费、包装费、代收货款手续费、保价费、其他费用之和时
		// 公布价运费已经包含了优惠费用，不再扣减
		BigDecimal totalTransFee = waybill.getTotalFee().subtract(
				waybill.getCodAmount());
		BigDecimal totalTransFee1 = waybill.getPrePayAmount()
				.add(waybill.getToPayAmount()).subtract(waybill.getCodAmount());
		BigDecimal totalTransFee2 = NumberUtils.sum(waybill.getTransportFee(),
				waybill.getPickupFee(), waybill.getDeliveryGoodsFee(),
				waybill.getPackageFee(), waybill.getCodFee(),
				waybill.getInsuranceFee(), waybill.getOtherFee());

		if (totalTransFee.compareTo(totalTransFee1) != 0
				|| totalTransFee.compareTo(totalTransFee2) != 0) {
			throw new SettlementException("明细之和不等于总运费，不能继续操作");
		}

		// 开单时，装卸费/运费总金额最高百分比；如果高于设定值，则不允许开单
		/*
		 * BUG:BUG-22525
		if (waybill.getServiceFee() != null
				&& waybill.getServiceFee().compareTo(BigDecimal.ZERO) > 0) {
			// String ratio =
			// configurationParamsService.queryConfValueByCode(ConfigurationParamsConstants.STL_SERVICE_FEE_RATIO);

			ConfigurationParamsEntity conf = configurationParamsService
					.queryConfigurationParamsByOrgCode(
							DictionaryConstants.SYSTEM_CONFIG_PARM__STL,
							ConfigurationParamsConstants.STL_SERVICE_FEE_RATIO,
							FossConstants.ROOT_ORG_CODE);
			String ratio = conf.getConfValue();

			// 运单的公布价运费乘以比例
			if (waybill.getServiceFee().compareTo(
					waybill.getTransportFee().multiply(
							NumberUtils.createBigDecimal(ratio))) > 0) {
				throw new SettlementException("装卸费比例超过设置比例，不能继续操作！");
			}
		}*/

		// 确定开单时代收货款金额的最大值和最小值限制
		if (waybill.getCodAmount() != null
				&& waybill.getCodAmount().compareTo(BigDecimal.ZERO) > 0) {
			
			//默认获取零担的代收货款上下限配置参数
			String codMaxParam = ConfigurationParamsConstants.STL_COD_MAX_AMOUNT;
			String codMinParam = ConfigurationParamsConstants.STL_COD_MIN_AMOUNT;
			
			//如果为快递，则获取快递的代收货款上下线
			if(SettlementUtil.isPackageProductCode(waybill.getProductCode())){
				codMaxParam = ConfigurationParamsConstants.STL_PACKAGE_COD_MAX_AMOUNT;
				codMinParam = ConfigurationParamsConstants.STL_PACKAGE_COD_MIN_AMOUNT;
			}
			String maxAmount = configurationParamsService
					.queryConfValueByCode(codMaxParam);
			String minAmount = configurationParamsService
					.queryConfValueByCode(codMinParam);

			if (waybill.getCodAmount().compareTo(
					NumberUtils.createBigDecimal(maxAmount)) > 0) {
				throw new SettlementException("代收货款金额超过最大值：" + maxAmount
						+ "，不能继续操作！");
			}
			if (waybill.getCodAmount().compareTo(
					NumberUtils.createBigDecimal(minAmount)) < 0) {
				throw new SettlementException("代收货款金额低于最小值：" + minAmount
						+ "，不能继续操作！");
			}
		}
		
		// 校验发票标记是否合法
		if (StringUtil.isEmpty(waybill.getInvoiceMark())) {
			throw new SettlementException("没有发票标记");
		}
		// 判断发票标记是否在
		else if (!SettlementDictionaryConstants.SETTLEMENT_INVOICE_MARK_ONE
				.equals(waybill.getInvoiceMark())
				&& !SettlementDictionaryConstants.SETTLEMENT_INVOICE_MARK_TWO
						.equals(waybill.getInvoiceMark())) {
           throw new SettlementException("发票标记不在范围之内："+waybill.getInvoiceMark());
		}
	}

	/**
	 * 优化运单开单，新建运单新增接口
	 * 
	 * @author ddw
	 * @date 2012-11-5 上午11:06:35
	 */
	private void handleAddedWaybillNew(WaybillPickupInfoDto waybill,WaybillPickupInfoDto oldWaybill,
			CurrentInfo currentInfo, WaybillPickupWriteBackDto dto) {

		// 由于到达应收单和代收货款应收单在空运合票时单据类型和客户信息发生变化
		// 这些蓝单的信息取自红单
		BillReceivableEntity writeBackBillReceivableDest = null; // 到达应收单
		BillReceivableEntity writeBackBillReceivableCod = null; // 代收货款应收单
		if (dto != null && CollectionUtils.isNotEmpty(dto.getWriteBackBillReceivables())) {
			for (BillReceivableEntity entity : dto.getWriteBackBillReceivables()) {
				if (SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__DESTINATION_RECEIVABLE
						.equals(entity.getBillType())
						|| SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__DESTINATION_PARTIAL_LINE
								.equals(entity.getBillType())
						|| SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__AIR_AGENCY
								.equals(entity.getBillType())
						|| SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__DESTINATION_LAND_STOWAGE
								.equals(entity.getBillType())) {
					writeBackBillReceivableDest = entity;
				} else if (SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__COD_RECEIVABLE
						.equals(entity.getBillType())
						|| SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__AIR_AGENCY_COD
								.equals(entity.getBillType())
						|| SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__LAND_STOWAGE_AGENCY_COD
								.equals(entity.getBillType())) {
					writeBackBillReceivableCod = entity;
				}
			}
		}

		/**
		 * @author 218392 zhangyongxue
		 * @date 2016-05-28 13:02:20
		 * 整车项目：（1）子公司编码、子公司名称均是整车传送过来的，不再用FOSS的基础资料，所以这块就没必要再访问FOSS数据库查询，
		 * 防止查询结果为空覆盖已传递过来的值；
		 * 
		 */
	if(StringUtil.isEmpty(waybill.getBusinessId())){ // begin @218392	

		// 通过综合接口获取部门、子公司信息
		OrgAdministrativeInfoEntity origOrgEntity = orgAdministrativeInfoService
				.queryOrgAdministrativeInfoByCodeToPkp(waybill.getReceiveOrgCode()); // 出发部门
		OrgAdministrativeInfoEntity destOrgEntity = orgAdministrativeInfoService
				.queryOrgAdministrativeInfoByCodeToPkp(waybill.getLastLoadOrgCode()); // 到达部门

		// 当集中接货业务时，缴款部门是车队；非集中接送货为营业部；该部门负责缴款
		//BUG-26676
		String collectionOrgCode = waybill.getModifyOrgCode();
		OrgAdministrativeInfoEntity collectionOrgEntity = orgAdministrativeInfoService
				.queryOrgAdministrativeInfoByCodeToPkp(collectionOrgCode);

		// 设置始发部门名称、子公司编码、子公司名称
		waybill.setReceiveOrgName(origOrgEntity.getName());
		waybill.setReceiveSubsidiaryCode(origOrgEntity.getSubsidiaryCode());
		waybill.setReceiveSubsidiaryName(origOrgEntity.getSubsidiaryName());
		// 设置到达部门名称、子公司编码、子公司名称
		waybill.setLastLoadOrgName(destOrgEntity.getName());
		waybill.setLastLoadSubsidiaryCode(destOrgEntity.getSubsidiaryCode());
		waybill.setLastLoadSubsidiaryName(destOrgEntity.getSubsidiaryName());
		// 设置收款部门名称、子公司编码、子公司名称
		waybill.setCollectionOrgCode(collectionOrgCode);
		waybill.setCollectionOrgName(collectionOrgEntity.getName());
		waybill.setCollectionCompanyCode(collectionOrgEntity.getSubsidiaryCode());
		waybill.setCollectionCompanyName(collectionOrgEntity.getSubsidiaryName());
	}	//end @218392	

		String paymentType = waybill.getPaidMethod(); // 付款方式
		BigDecimal prePayAmount = waybill.getPrePayAmount(); // 预付金额（包括现金和欠款）
		BigDecimal toPayAmount = waybill.getToPayAmount().subtract(waybill.getCodAmount()); // 到付金额（去除代收货款）

		BillCashCollectionEntity billCashCollectionEntity = null; // 现金收款单
		BillReceivableEntity billReceivableOrig = null; // 始发应收单
		BillReceivableEntity billReceivableDest = null; // 到付应收单
		BillReceivableEntity billReceivableCod = null; // 代收货款应收单
		BillPayableEntity billPayableSF = null; // 应付装卸费
		BillPayableEntity billPayableCOD = null; // 应付代收货款

		WaybillFeeDto prePayFeeDto = new WaybillFeeDto(); // 预付费用分摊
		WaybillFeeDto toPayFeeDto = new WaybillFeeDto(); // 到付费用分摊

		splitWaybillFee(waybill, prePayFeeDto, toPayFeeDto); // 金额拆分

		// 会计时间为分区键，开单时保证各个单据的时间保持一致
		Date now = new Date();
		// 付款时存在情况有：部分预付，部分到付，此时预付必须都是现金支付；不存在以下情况：部分现付，部分临欠
		
		/*
		 * modify by 269044-zhurongrong 2016-11-04
		 * 合伙人空运需求：即使预付金额大于0，也不生成始发的任何单据，始发单据由合伙人调结算接口生成，到达应收单由接送货直接调我们接口生成
		 * 两个限制条件：合伙人部门开单，运输性质是空运
		 */
		if (prePayAmount.compareTo(BigDecimal.ZERO) > 0
				&& toPayAmount.compareTo(BigDecimal.ZERO) == 0
				&& !(isPartnerDept(waybill.getReceiveOrgCode()) 
						&& ProductEntityConstants.PRICING_PRODUCT_AIR_FREIGHT.equals(waybill.getProductCode()))) { // 1)全部预付

			if (SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__CASH
					.equals(paymentType)
					|| SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__CARD
							.equals(paymentType)) { // 使用现金、银行卡付款

				billCashCollectionEntity = this.getBillCashCollectoin(waybill,
						currentInfo, prePayFeeDto, now);
				billCashCollectionService.addBillCashCollection(
						billCashCollectionEntity, currentInfo);

			} else if (SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__CREDIT
					.equals(paymentType)
					|| SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__DEBT
							.equals(paymentType)) { // 月结、临欠
				
				/**
				 * @author 218392 zhangyongxue
				 * @date 2016-06-02 20:02:26
				 * vts整车项目：开单临欠月结，客户合同基础资料均取自于VTS本系统，不再使用FOSS基础资料校验，
				 * 			所以对于整车来说这段校验去掉，但是信用额度还是要扣减的只是合同信息不再使用FOSS结算
				 */
			if(StringUtil.isEmpty(waybill.getBusinessId())){ // begin @218392 张永雪	 V0.1
				
				//判断更改后付款方式
				String oldPaymentType = oldWaybill == null? "":oldWaybill.getPaidMethod();
				//判断是否存在超期临时欠款应收账款
				if(SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__DEBT
						.equals(paymentType)&&!SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__DEBT
						.equals(oldPaymentType)){
					canDebit(waybill.getDeliveryCustomerCode(),waybill.getReceiveOrgCode());
				}

				//发更改时，额度算差额度
				BigDecimal debitAmount = prePayAmount;
				
				// DEFECT-669 添加付款方式判断
				if(oldWaybill != null
						&&oldWaybill.getPaidMethod().equals( waybill.getPaidMethod() )){
					debitAmount = prePayAmount.subtract(oldWaybill.getPrePayAmount());
				}
				
				//modify by 269044-zhurongrong 悟空系统要求：在开单时已经经过灰名单的校验，所以无需再次校验能否开月结
				//运单号不为悟空的单号的时候
				if(!SettlementDictionaryConstants.SOURCE_SYSTEM_ECS.equals(waybill.getSourceSystem())) {
					// 判断能否欠款 ；包括超期欠款和信用额度余额欠款
					DebitDto debitDto = customerBargainService.isBeBebt(
							waybill.getDeliveryCustomerCode(),
							waybill.getReceiveOrgCode(), paymentType, debitAmount);
					
					if (debitDto == null) { // 每个客户和部门都必须有信用额度
						throw new SettlementException("找不到信用额度配置，不能执行此操作");
					} else if (!debitDto.isBeBebt()) { // 客户不能欠款，不能执行操作
						throw new SettlementException(debitDto.getMessage());
					}
				}//end
			}// end @218392 张永雪	 V0.1
				

				// 欠款费用，扣减客户信用额度
				BigDecimal debtFee = waybill.getPrePayAmount();
				customerBargainService.updateUsedAmount(
                        waybill.getDeliveryCustomerCode(),
                        waybill.getReceiveOrgCode(), paymentType, debtFee,
                        currentInfo);

				// 生成应收单信息
				billReceivableOrig = this.buildBillReceivableOrig(waybill,
						prePayFeeDto, now);

				billReceivableService.addBillReceivable(billReceivableOrig,	currentInfo);
				
			} else if (SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__ONLINE
					.equals(paymentType)) { // 网上支付

				// 网上支付类似于始发应收，但不扣减信用额度
				// 生成应收单信息
				billReceivableOrig = this.buildBillReceivableOrig(waybill, prePayFeeDto, now);

				billReceivableService.addBillReceivable(billReceivableOrig,	currentInfo);
			} else {
				throw new SettlementException("付款方式有误，不能执行此操作");
			}

		} else if (prePayAmount.compareTo(BigDecimal.ZERO) == 0
				&& toPayAmount.compareTo(BigDecimal.ZERO) > 0) { // 2)全部到付

			if (SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__FREIGHT_COLLECT
					.equals(paymentType)) {
				//2016-11-23  update by 231434 FOSS与悟空判断合伙人逻辑分开，悟空单由悟空传是否合伙人
				//ddw,判断到达部门是否为合伙人，如果是合伙人则在PTP系统生成应收单
				if(!SettlementDictionaryConstants.SOURCE_SYSTEM_ECS.equals(waybill.getSourceSystem()) && 
						(!isPartnerDept(waybill.getLastLoadOrgCode()) || FossConstants.YES.equals(waybill.getIsWholeVehicle()))){
					billReceivableDest = this.buildBillReceivableDest(waybill,
							toPayFeeDto, now, writeBackBillReceivableDest,
							writeBackBillReceivableCod);

					billReceivableService.addBillReceivable(billReceivableDest, currentInfo);
				}else if(SettlementDictionaryConstants.SOURCE_SYSTEM_ECS.equals(waybill.getSourceSystem())
							&& !FossConstants.YES.equals(waybill.getIsPtp())){
					//来源系统是悟空并且不是合伙人生成到达应收单
					billReceivableDest = this.buildBillReceivableDest(waybill,
							toPayFeeDto, now, writeBackBillReceivableDest,
							writeBackBillReceivableCod);

					billReceivableService.addBillReceivable(billReceivableDest, currentInfo);
				}
			} else {
				throw new SettlementException("付款方式有误，不能执行此操作");
			}

		} else if (prePayAmount.compareTo(BigDecimal.ZERO) > 0
				&& toPayAmount.compareTo(BigDecimal.ZERO) > 0) { // 3)部分预付，部分到付

			/*
			 * modify by 269044-zhurongrong 2016-11-04
			 * 合伙人空运需求：即使预付金额大于0，也不生成始发的任何单据，始发单据由合伙人调结算接口生成，到达应收单由接送货直接调我们接口生成
			 * 两个限制条件：合伙人部门开单，运输性质是空运
			 */
			if(!(isPartnerDept(waybill.getReceiveOrgCode()) 
					&& ProductEntityConstants.PRICING_PRODUCT_AIR_FREIGHT.equals(waybill.getProductCode()))) {
				// 预付处理
				if (SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__CASH
						.equals(paymentType)
						|| SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__CARD
								.equals(paymentType)) { // 使用现金、银行卡付款

					billCashCollectionEntity = this.getBillCashCollectoin(waybill,
							currentInfo, prePayFeeDto, now);
					billCashCollectionService.addBillCashCollection(
							billCashCollectionEntity, currentInfo);

				} else if (SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__FREIGHT_COLLECT
						.equals(paymentType)) { // 到付

					billCashCollectionEntity = this.getBillCashCollectoin(waybill,
							currentInfo, prePayFeeDto, now);
					// 现金收款单中的支付方式只能是现金或者银行卡
					billCashCollectionEntity
							.setPaymentType(SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__CASH);
					billCashCollectionService.addBillCashCollection(
							billCashCollectionEntity, currentInfo);

				} else if (SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__CREDIT
						.equals(paymentType)
						|| SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__DEBT
								.equals(paymentType)) { // 月结、临欠
					
					/**
					* @author 218392 zhangyongxue
					* @date 2016-06-02 20:02:26
					* vts整车项目：开单临欠月结，客户合同基础资料均取自于VTS本系统，不再使用FOSS基础资料校验，
					* 			所以对于整车来说这段校验去掉，但是信用额度还是要扣减的只是合同信息不再使用FOSS结算
					*/
					if(StringUtil.isEmpty(waybill.getBusinessId())){ // begin @218392 张永雪V0.2
						//判断更改后付款方式
						String oldPaymentType = oldWaybill == null? "":oldWaybill.getPaidMethod();
						//判断是否存在超期临时欠款应收账款
						if(SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__DEBT
								.equals(paymentType)&&!SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__DEBT
								.equals(oldPaymentType)){
							canDebit(waybill.getDeliveryCustomerCode(),waybill.getReceiveOrgCode());
						}
					}
					//发更改时，额度算差额度
					
					// DEFECT-669 添加相同付款方式的判断
					BigDecimal debitAmount = prePayAmount;
					if(oldWaybill != null &&
							oldWaybill.getPaidMethod().equals(waybill.getPaidMethod())){
						debitAmount = prePayAmount.subtract(oldWaybill.getPrePayAmount());
					}
					
					
					
					
				/**
				 * @author 218392 zhangyongxue
				 * @date 2016-06-14 09:28:26
				 * vts整车项目：开单临欠月结，客户合同基础资料均取自于VTS本系统，不再使用FOSS基础资料校验，
				 * 			所以对于整车来说这段校验去掉，但是信用额度还是要扣减的只是合同信息不再使用FOSS结算
				 * 只有VTS整车，BusinessId才有值
				 * 
				 * modify by 269044-zhurongrong 悟空系统同上
				 */
				if(StringUtil.isEmpty(waybill.getBusinessId()) // begin @218392 张永雪	 
						&& (!SettlementDictionaryConstants.SOURCE_SYSTEM_ECS.equals(waybill.getSourceSystem()))){ 
					// 判断能否欠款 ；包括超期欠款和信用额度余额欠款
					DebitDto debitDto = customerBargainService.isBeBebt(
							waybill.getDeliveryCustomerCode(),
							waybill.getReceiveOrgCode(), paymentType, debitAmount);
					if (debitDto == null) { // 每个客户和部门都必须有信用额度
						throw new SettlementException("找不到信用额度配置，不能执行此操作");
					} else if (!debitDto.isBeBebt()) { // 客户不能欠款，不能执行操作
						throw new SettlementException(debitDto.getMessage());
					}
				}// end @218392 zhangyongxue

					// 欠款费用，扣减客户信用额度
					BigDecimal debtFee = waybill.getPrePayAmount();
					//DEFECT-669  使用预付金额添加已使用额度
					customerBargainService.updateUsedAmount(
	                        waybill.getDeliveryCustomerCode(),
	                        waybill.getReceiveOrgCode(), paymentType, debtFee,
	                        currentInfo);

					billReceivableOrig = this.buildBillReceivableOrig(waybill,
							prePayFeeDto, now);

					billReceivableService.addBillReceivable(billReceivableOrig,	currentInfo);
				} else {
					throw new SettlementException("付款方式有误，不能执行此操作");
				}
			}
			//2016-11-23  update by 231434 FOSS与悟空判断合伙人逻辑分开，悟空单由悟空传是否合伙人
			//ddw,判断到达部门是否为合伙人，如果是合伙人则在PTP系统生成应收单
			if(!SettlementDictionaryConstants.SOURCE_SYSTEM_ECS.equals(waybill.getSourceSystem()) &&
					!isPartnerDept(waybill.getLastLoadOrgCode()) || FossConstants.YES.equals(waybill.getIsWholeVehicle())){
				// 到付处理
				billReceivableDest = this.buildBillReceivableDest(waybill,
						toPayFeeDto, now, writeBackBillReceivableDest,
						writeBackBillReceivableCod);
				//判断是否为快递
				billReceivableService.addBillReceivable(billReceivableDest,	currentInfo);
				
			}else if(SettlementDictionaryConstants.SOURCE_SYSTEM_ECS.equals(waybill.getSourceSystem())
						&& !FossConstants.YES.equals(waybill.getIsPtp())){
				// 到付处理
				billReceivableDest = this.buildBillReceivableDest(waybill,
						toPayFeeDto, now, writeBackBillReceivableDest,
						writeBackBillReceivableCod);
				//判断是否为快递
				billReceivableService.addBillReceivable(billReceivableDest,	currentInfo);
			}
		}

		// 代收货款金额大于0，则生成代收货款
		if (waybill.getCodAmount() != null
				&& waybill.getCodAmount().compareTo(BigDecimal.ZERO) > 0) {

			// 处理开代收款生成应付单前验证
			validateHandleCod(waybill);
			//2016-11-23  update by 231434 FOSS与悟空判断合伙人逻辑分开，悟空单由悟空传是否合伙人
			//ddw,判断到达部门是否为合伙人，如果是合伙人则在PTP系统生成应收单
			if(!SettlementDictionaryConstants.SOURCE_SYSTEM_ECS.equals(waybill.getSourceSystem()) &&
					!isPartnerDept(waybill.getLastLoadOrgCode()) || FossConstants.YES.equals(waybill.getIsWholeVehicle())){
				// 生成代收货款应收单
				billReceivableCod = buildBillReceivableCOD(waybill, now,
						writeBackBillReceivableCod, writeBackBillReceivableDest);
				billReceivableService.addBillReceivable(billReceivableCod,
						currentInfo);
			}else if(SettlementDictionaryConstants.SOURCE_SYSTEM_ECS.equals(waybill.getSourceSystem())
						&& !FossConstants.YES.equals(waybill.getIsPtp())){
				// 生成代收货款应收单
				billReceivableCod = buildBillReceivableCOD(waybill, now,
						writeBackBillReceivableCod, writeBackBillReceivableDest);
				billReceivableService.addBillReceivable(billReceivableCod,
						currentInfo);
			}
			
			//开单部门是合伙人部门，运输性质是空运
			if (isPartnerDept(waybill.getReceiveOrgCode())
					&& ProductEntityConstants.PRICING_PRODUCT_AIR_FREIGHT
							.equals(waybill.getProductCode())) {
				logger.info("合伙人空运开单部门：" + waybill.getReceiveOrgCode()
						+ "不生成代收货款应付单，通过PTP生成代收货款应付单");
			}else{
				// 生成代收货款应付单
				billPayableCOD = buildBillPayableCOD(waybill, now);
				billPayableService.addBillPayable(billPayableCOD, currentInfo);
				
				// 调用代收货款服务
				this.billPayCODService.addBillCOD(waybill, currentInfo);
			}
			
		}

		// 装卸费金额大于0，生成装卸费应付单
		if (waybill.getServiceFee() != null
				&& waybill.getServiceFee().compareTo(BigDecimal.ZERO) > 0) {
			if (StringUtils.isEmpty(waybill.getDeliveryCustomerContact())) {
				throw new SettlementException("当运单存在装卸费时，客户联系人不能为空！");
			}

			// 发货客户手机和发货客户电话同时为空时，提示不能操作
			if (StringUtils.isEmpty(waybill.getDeliveryCustomerMobilephone())
					&& StringUtils.isEmpty(waybill.getDeliveryCustomerPhone())) {
				throw new SettlementException("当运单存在装卸费时，联系电话不能为空！");
			}
			billPayableSF = buildBillPayableSF(waybill, now);
			billPayableService.addBillPayable(billPayableSF, currentInfo);
		}

		// 生成开单流水 update by foss-231434-bieyexiong 悟空开单，走另一个逻辑
		if(SettlementDictionaryConstants.SOURCE_SYSTEM_ECS.equals(waybill.getSourceSystem())){
			addPODEntityEcs(waybill, currentInfo, now);
		}else{
			addPODEntity(waybill, currentInfo, now);
		}
		
		/**
		 * @author 218392 zhangyongxue
		 * @date 2016-02-23 12:12:12
		 * 裹裹项目：当DOP到FOSS结算的付款信息先到的情况下，补录之后生成的结算单据信息在后的情况下
		 * （1）先到裹裹暂存表中查询：根据运单号查询为未核销的；
		 * （2）如果有说明DOP的付款信息先到了；如果没有说明DOP的付款信息没有到。
		 * （3）然后，再调用裹裹的结算单据处理Service处理
		 */
		List<GreenHandWrapWriteoffEntity> greenHandList = new ArrayList<GreenHandWrapWriteoffEntity>();
		/**
	     * 是否裹裹运单<br/>
	     * 结算根据isWrap判断是否是裹裹运单，如果isWrap字段值是“Y”，则需校验暂存表是否存在支付信息，存在支付信息，就自动核销始发应收单.不存在支付信息，就不做自动核销操作；
	     * 如果isWrap字段值为“N”,则不校验暂存表中的支付信息；
	     * @author 326181
	     * @date 2016-10-03 9:50:45
	     * 
	     */
		if(waybill != null && (FossConstants.YES.equals(waybill.getIsWrap()) || !SettlementDictionaryConstants.SOURCE_SYSTEM_ECS.equals(waybill.getSourceSystem()))){
			String waybillNo = waybill.getWaybillNo();
			//根据单号查询未核销暂存表的信息
			greenHandList = greenHandWrapWriteoffDao.queryGreenHandWrapByWaybillNo(waybillNo);
			//查询结果不为空，并且长度>0,
			RequestGreenHandWrapEntity wrapEntity = new RequestGreenHandWrapEntity();
			wrapEntity.setWaybillNo(waybillNo);
			if(greenHandList != null && greenHandList.size()>0){
				/**
				 * 运单号查询满足本次项目需求条件的应收单
				 * （条件是：始发应收单，未核销金额大于0，有效的，来源单据类型为 W-开单）
				 */
				List<BillReceivableEntity> billReceivableList = greenHandWrapWriteoffService.queryReceivableBill(wrapEntity);
				try{
					if(billReceivableList != null && billReceivableList.size() > 1){
						/**
						 * 单子存在多条始发应收单，则财务单据已经生成,则需要将数据推送到报账平台
						 */
						wrapEntity.setIsPush("true");//是否需要推送
						wrapEntity.setResource("GG");//来源
						wrapEntity.setIsException("Y");//是否异常
						wrapEntity.setCostType("0");//设置费用类型 
						wrapEntity.setWaybillNo(waybillNo);//运单号
						wrapEntity.setDopAmount(greenHandList.get(0).getAmount());//客户还款金额
						wrapEntity.setDoptime(greenHandList.get(0).getDopTime());//客户还款时间
						throw new SettlementException("单号："+ waybillNo + "存在多条始发应收单");
					}else if(billReceivableList != null && billReceivableList.size() == 1){
						/**
						 * 3.如果查询应收单有的话，那么直接核销始发应收单;
						 *   核销完之后,调用财务自助接口,将数据推送到财务自助那边
						 */
						BillReceivableEntity billReceivableEntity = billReceivableList.get(0);
						GreenHandWrapWriteoffEntity writeOffEntity = greenHandList.get(0);//获取暂存表中数据
						RequestGreenHandWrapEntity request = new RequestGreenHandWrapEntity();
						request.setCostType("0");//设置费用类型 
						request.setWaybillNo(waybillNo);//运单号
						request.setDopAmount(writeOffEntity.getAmount());//客户还款金额
						request.setDoptime(writeOffEntity.getDopTime());//客户还款时间
						wrapEntity.setCostType("0");//设置费用类型 
						wrapEntity.setWaybillNo(waybillNo);//运单号
						wrapEntity.setDopAmount(greenHandList.get(0).getAmount());//客户还款金额
						wrapEntity.setDoptime(greenHandList.get(0).getDopTime());//客户还款时间
						try{
							greenHandWrapWriteoffService.writeoffByDoprequest(billReceivableEntity,request);
						}catch(Exception e){
							//核销失败之后,将异常数据推送
							wrapEntity.setIsPush("true");//是否需要推送
							wrapEntity.setResource("GG");//来源
							wrapEntity.setIsException("Y");//是否异常
							throw new SettlementException(waybillNo+"单子核销失败！");
						}
						// 假如系统核销成功,则正常推送到财务自助
						wrapEntity.setIsPush("true");//是否需要推送
						wrapEntity.setResource("GG");//来源
						wrapEntity.setIsException("N");//正常推送
					}
				}catch(SettlementException e){
					logger.info("核销失败："+e.getErrorCode());
				}catch(Exception e1){
					logger.info("核销失败："+e1.getMessage());
				}finally{
					/**
					 * 补录单子的时候，所有的情况都要推送到财务自助,异常推送和正常推送
					 */
					if("true".equals(wrapEntity.getIsPush())){
						//将DOP推送过来的数据，对接到报账平台
						logger.info("是否注入接口"+fossToFinsRemitCommonService);
						//悟空运单捕获异常，其他运单不管
						if (SettlementDictionaryConstants.SOURCE_SYSTEM_ECS.equals(waybill.getSourceSystem())) {
							try {
								fossToFinsRemitCommonService.pushRemittanceMessToFins(wrapEntity);
							} catch(SettlementException e){
								logger.info("推送到财务自助失败："+e.getErrorCode());
								ecsFossErrorLogJobService.addEcsFossErrorLogJob("ESB_FOSS2ESB_INCOME_REPORTED", "推送第三方付款数据到财务自助", wrapEntity, e.getErrorCode());
							} catch (Exception e) {
								logger.info("推送到财务自助失败："+e.toString());
								//悟空运单推送失败时使用job定时推送
								ecsFossErrorLogJobService.addEcsFossErrorLogJob("ESB_FOSS2ESB_INCOME_REPORTED", "推送第三方付款数据到财务自助", wrapEntity, e.toString());
							}
						} else {
							fossToFinsRemitCommonService.pushRemittanceMessToFins(wrapEntity);
						}
					}else{
						throw new SettlementException("该运单来源于裹裹订单,请选择付款方式为网上支付！");
					}
				}
				
			}
		}
		
	}
	
	/**
	 * 处理新增运单
	 * 
	 * @author ibm-zhuwei
	 * @date 2012-11-5 上午11:06:35
	 */
	private void handleAddedWaybill(WaybillPickupInfoDto waybill,WaybillPickupInfoDto oldWaybill,
			CurrentInfo currentInfo, WaybillPickupWriteBackDto dto) {

		// 由于到达应收单和代收货款应收单在空运合票时单据类型和客户信息发生变化
		// 这些蓝单的信息取自红单
		BillReceivableEntity writeBackBillReceivableDest = null; // 到达应收单
		BillReceivableEntity writeBackBillReceivableCod = null; // 代收货款应收单
		if (dto != null && CollectionUtils.isNotEmpty(dto.getWriteBackBillReceivables())) {
			for (BillReceivableEntity entity : dto.getWriteBackBillReceivables()) {
				if (SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__DESTINATION_RECEIVABLE
						.equals(entity.getBillType())
						|| SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__DESTINATION_PARTIAL_LINE
								.equals(entity.getBillType())
						|| SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__AIR_AGENCY
								.equals(entity.getBillType())
						|| SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__DESTINATION_LAND_STOWAGE
								.equals(entity.getBillType())) {
					writeBackBillReceivableDest = entity;
				} else if (SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__COD_RECEIVABLE
						.equals(entity.getBillType())
						|| SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__AIR_AGENCY_COD
								.equals(entity.getBillType())
						|| SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__LAND_STOWAGE_AGENCY_COD
								.equals(entity.getBillType())) {
					writeBackBillReceivableCod = entity;
				}
			}
		}

		// 通过综合接口获取部门、子公司信息
		OrgAdministrativeInfoEntity origOrgEntity = orgAdministrativeInfoService
				.queryOrgAdministrativeInfoByCode(waybill.getReceiveOrgCode()); // 出发部门
		OrgAdministrativeInfoEntity destOrgEntity = orgAdministrativeInfoService
				.queryOrgAdministrativeInfoByCode(waybill.getLastLoadOrgCode()); // 到达部门

		// 当集中接货业务时，缴款部门是车队；非集中接送货为营业部；该部门负责缴款
		//BUG-26676
		String collectionOrgCode = waybill.getModifyOrgCode();
		OrgAdministrativeInfoEntity collectionOrgEntity = orgAdministrativeInfoService
				.queryOrgAdministrativeInfoByCode(collectionOrgCode);
		
		/*
		if (FossConstants.YES.equals(waybill.getPickupCentralized())) {
			
			//判断修改部门是否为空
			if(StringUtils.isEmpty(waybill.getModifyOrgCode())){
				throw new SettlementException("运单的修改部门编码不能为空.");
			}
			
			collectionOrgCode = waybill.getModifyOrgCode();
			collectionEntity = orgAdministrativeInfoService
					.queryOrgAdministrativeInfoByCode(collectionOrgCode);
			
			if (collectionEntity == null)
			{
				throw new SettlementException(String.format(
						"根据修改部门编码查询修改部门为空，修改部门编码：%s", collectionOrgCode));
			}
			
		} else {
			collectionOrgCode = waybill.getReceiveOrgCode();
		}*/

		// 设置始发部门名称、子公司编码、子公司名称
		waybill.setReceiveOrgName(origOrgEntity.getName());
		waybill.setReceiveSubsidiaryCode(origOrgEntity.getSubsidiaryCode());
		waybill.setReceiveSubsidiaryName(origOrgEntity.getSubsidiaryName());
		// 设置到达部门名称、子公司编码、子公司名称
		waybill.setLastLoadOrgName(destOrgEntity.getName());
		waybill.setLastLoadSubsidiaryCode(destOrgEntity.getSubsidiaryCode());
		waybill.setLastLoadSubsidiaryName(destOrgEntity.getSubsidiaryName());
		// 设置收款部门名称、子公司编码、子公司名称
		waybill.setCollectionOrgCode(collectionOrgCode);
		waybill.setCollectionOrgName(collectionOrgEntity.getName());
		waybill.setCollectionCompanyCode(collectionOrgEntity.getSubsidiaryCode());
		waybill.setCollectionCompanyName(collectionOrgEntity.getSubsidiaryName());

		String paymentType = waybill.getPaidMethod(); // 付款方式
		BigDecimal prePayAmount = waybill.getPrePayAmount(); // 预付金额（包括现金和欠款）
		BigDecimal toPayAmount = waybill.getToPayAmount().subtract(
				waybill.getCodAmount()); // 到付金额（去除代收货款）

		BillCashCollectionEntity billCashCollectionEntity = null; // 现金收款单
		BillReceivableEntity billReceivableOrig = null; // 始发应收单
		BillReceivableEntity billReceivableDest = null; // 到付应收单
		BillReceivableEntity billReceivableCod = null; // 代收货款应收单
		BillPayableEntity billPayableSF = null; // 应付装卸费
		BillPayableEntity billPayableCOD = null; // 应付代收货款

		WaybillFeeDto prePayFeeDto = new WaybillFeeDto(); // 预付费用分摊
		WaybillFeeDto toPayFeeDto = new WaybillFeeDto(); // 到付费用分摊

		splitWaybillFee(waybill, prePayFeeDto, toPayFeeDto); // 金额拆分

		// 会计时间为分区键，开单时保证各个单据的时间保持一致
		Date now = new Date();
		//ddw
		String status = querydiscountPayable(waybill.getWaybillNo());
		
		/*
		 * modify by 269044-zhurongrong 2016-11-04
		 * 合伙人空运需求：即使预付金额大于0，也不生成始发的任何单据，始发单据由合伙人调结算接口生成，到达应收单由接送货直接调我们接口生成
		 * 两个限制条件：合伙人部门开单，运输性质是空运
		 */
		// 付款时存在情况有：部分预付，部分到付，此时预付必须都是现金支付；不存在以下情况：部分现付，部分临欠
		if (prePayAmount.compareTo(BigDecimal.ZERO) > 0
				&& toPayAmount.compareTo(BigDecimal.ZERO) == 0
				&& !(isPartnerDept(waybill.getReceiveOrgCode()) 
						&& ProductEntityConstants.PRICING_PRODUCT_AIR_FREIGHT.equals(waybill.getProductCode()))) { // 1)全部预付

			if (SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__CASH
					.equals(paymentType)
					|| SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__CARD
							.equals(paymentType)) { // 使用现金、银行卡付款

				billCashCollectionEntity = this.getBillCashCollectoin(waybill,
						currentInfo, prePayFeeDto, now);
				billCashCollectionService.addBillCashCollection(
						billCashCollectionEntity, currentInfo);

			} else if (SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__CREDIT
					.equals(paymentType)
					|| SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__DEBT
							.equals(paymentType)) { // 月结、临欠
				//判断更改后付款方式
				String oldPaymentType = oldWaybill == null? "":oldWaybill.getPaidMethod();
				//判断是否存在超期临时欠款应收账款
				if(SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__DEBT
						.equals(paymentType)&&!SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__DEBT
						.equals(oldPaymentType)){
					canDebit(waybill.getDeliveryCustomerCode(),waybill.getReceiveOrgCode());
				}

				//发更改时，额度算差额度
				BigDecimal debitAmount = prePayAmount;
				
				// DEFECT-669 添加付款方式判断
				if(oldWaybill != null
						&&oldWaybill.getPaidMethod().equals( waybill.getPaidMethod() )){
					debitAmount = prePayAmount.subtract(oldWaybill.getPrePayAmount());
				}
				
				//modify by 269044-zhurongrong 悟空系统要求：在开单时已经经过灰名单的校验，所以无需再次校验能否开月结
				//运单号不为悟空的单号的时候
				if(!SettlementDictionaryConstants.SOURCE_SYSTEM_ECS.equals(waybill.getSourceSystem())) {
					// 判断能否欠款 ；包括超期欠款和信用额度余额欠款
					DebitDto debitDto = customerBargainService.isBeBebt(
							waybill.getDeliveryCustomerCode(),
							waybill.getReceiveOrgCode(), paymentType, debitAmount);
					
					if (debitDto == null) { // 每个客户和部门都必须有信用额度
						throw new SettlementException("找不到信用额度配置，不能执行此操作");
					} else if (!debitDto.isBeBebt()) { // 客户不能欠款，不能执行操作
						throw new SettlementException(debitDto.getMessage());
					}
				}//end
				// 欠款费用，扣减客户信用额度
				BigDecimal debtFee = waybill.getPrePayAmount();
				customerBargainService.updateUsedAmount(
                        waybill.getDeliveryCustomerCode(),
                        waybill.getReceiveOrgCode(), paymentType, debtFee,
                        currentInfo);

				// 生成应收单信息
				billReceivableOrig = this.buildBillReceivableOrig(waybill,
						prePayFeeDto, now);

				// 2013-06-04：BUG号：BUG-23123
				// 付款方式为：月结、临欠
				// 月结客户，根据客户编码，查询客户信息，查看客户是否异地调货，获取对应的所属部门信息
                //异地调货修改为统一结算规则
//				billReceivableOrig = this.getBillRecivalbeEntity(billReceivableOrig, waybill);
				//判断是否为快递
				if(SettlementUtil.isPackageProductCode(billReceivableOrig.getProductCode())){
					//ddw，如果折扣单不是已确认的新增有效始发应收单
					if(!SettlementDictionaryConstants.DISCOUNT_BILL_STATUS_CONFIRM.equals(status)){
						billReceivableService.addBillReceivable(billReceivableOrig,	currentInfo);
					}
				}else{
					billReceivableService.addBillReceivable(billReceivableOrig,	currentInfo);
				}
				//判断是否为零担，零担和快递可能是同一个客户
				if(!SettlementUtil.isPackageProductCode(billReceivableOrig.getProductCode())){
					//生成折扣应付,ddw
					Map<String,Object> contractMap = new HashMap<String,Object>();
					//客户编码
					contractMap.put("customerCode", billReceivableOrig.getCustomerCode());
					//业务日期
					contractMap.put("businessDate", billReceivableOrig.getBusinessDate());
					//运单号
					contractMap.put("waybillNo", billReceivableOrig.getWaybillNo());
					//查询客户折扣率
					List<Integer> list = freightDiscountService.queryCustomerDiscountRate(contractMap);
					//查询折扣率应付单
					List<BillPayableEntity> payableList = freightDiscountService.queryDiscountPayableBill(contractMap);
					//判断是否存在折扣应付单
					if(CollectionUtils.isNotEmpty(payableList)){
						//应付业务日期
						contractMap.put("payableBusinessDate", payableList.get(0).getBusinessDate());
					} else {
						//应付业务日期
						contractMap.put("payableBusinessDate", new Date());
					}
					//判断是否存在合同
					if(CollectionUtils.isNotEmpty(list) && list.get(0) > 0){
						//生成折扣应付
						freightDiscountService.createFreightDiscountPayableBill(contractMap);
					}
				}
				
			} else if (SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__ONLINE
					.equals(paymentType)) { // 网上支付

				// 网上支付类似于始发应收，但不扣减信用额度
				// 生成应收单信息
				billReceivableOrig = this.buildBillReceivableOrig(waybill, prePayFeeDto, now);
				//判断是否为快递
				if(SettlementUtil.isPackageProductCode(billReceivableOrig.getProductCode())){
					//ddw，如果折扣单不是已确认的新增有效始发应收单
					if(!SettlementDictionaryConstants.DISCOUNT_BILL_STATUS_CONFIRM.equals(status)){
						billReceivableService.addBillReceivable(billReceivableOrig,	currentInfo);
					}
				}else{
					billReceivableService.addBillReceivable(billReceivableOrig,	currentInfo);
				}
			} else {
				throw new SettlementException("付款方式有误，不能执行此操作");
			}

		} else if (prePayAmount.compareTo(BigDecimal.ZERO) == 0
				&& toPayAmount.compareTo(BigDecimal.ZERO) > 0) { // 2)全部到付

			if (SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__FREIGHT_COLLECT
					.equals(paymentType)) {
				//ddw,判断到达部门是否为合伙人，如果是合伙人则在PTP系统生成应收单
				if((!isPartnerDept(waybill.getLastLoadOrgCode()) && !dto.isPartnerDeptBeforeChange()) || isOldWaybill(waybill) 
						|| FossConstants.YES.equals(waybill.getIsWholeVehicle())){
					billReceivableDest = this.buildBillReceivableDest(waybill,
							toPayFeeDto, now, writeBackBillReceivableDest,
							writeBackBillReceivableCod);
					//判断是否为快递
					if(SettlementUtil.isPackageProductCode(billReceivableDest.getProductCode())){
						//ddw，如果折扣单不是已确认的新增有效到达应收单
						if(!SettlementDictionaryConstants.DISCOUNT_BILL_STATUS_CONFIRM.equals(status)){
							billReceivableService.addBillReceivable(billReceivableDest, currentInfo);
						}
					}else{
						billReceivableService.addBillReceivable(billReceivableDest, currentInfo);
					}
				}
			} else {
				throw new SettlementException("付款方式有误，不能执行此操作");
			}

		} else if (prePayAmount.compareTo(BigDecimal.ZERO) > 0
				&& toPayAmount.compareTo(BigDecimal.ZERO) > 0) { // 3)部分预付，部分到付

			/*
			 * modify by 269044-zhurongrong 2016-11-04
			 * 合伙人空运需求：即使预付金额大于0，也不生成始发的任何单据，始发单据由合伙人调结算接口生成，到达应收单由接送货直接调我们接口生成
			 * 两个限制条件：合伙人部门开单，运输性质是空运
			 */
			if(!(isPartnerDept(waybill.getReceiveOrgCode()) 
					&& ProductEntityConstants.PRICING_PRODUCT_AIR_FREIGHT.equals(waybill.getProductCode()))) {
				// 预付处理
				if (SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__CASH
						.equals(paymentType)
						|| SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__CARD
								.equals(paymentType)) { // 使用现金、银行卡付款

					billCashCollectionEntity = this.getBillCashCollectoin(waybill,
							currentInfo, prePayFeeDto, now);
					billCashCollectionService.addBillCashCollection(
							billCashCollectionEntity, currentInfo);

				} else if (SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__FREIGHT_COLLECT
						.equals(paymentType)) { // 到付

					billCashCollectionEntity = this.getBillCashCollectoin(waybill,
							currentInfo, prePayFeeDto, now);
					// 现金收款单中的支付方式只能是现金或者银行卡
					billCashCollectionEntity
							.setPaymentType(SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__CASH);
					billCashCollectionService.addBillCashCollection(
							billCashCollectionEntity, currentInfo);

				} else if (SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__CREDIT
						.equals(paymentType)
						|| SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__DEBT
								.equals(paymentType)) { // 月结、临欠
					
					//判断更改后付款方式
					String oldPaymentType = oldWaybill == null? "":oldWaybill.getPaidMethod();
					//判断是否存在超期临时欠款应收账款
					if(SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__DEBT
							.equals(paymentType)&&!SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__DEBT
							.equals(oldPaymentType)){
						canDebit(waybill.getDeliveryCustomerCode(),waybill.getReceiveOrgCode());
					}

					//发更改时，额度算差额度
					
					// DEFECT-669 添加相同付款方式的判断
					BigDecimal debitAmount = prePayAmount;
					if(oldWaybill != null &&
							oldWaybill.getPaidMethod().equals(waybill.getPaidMethod())){
						debitAmount = prePayAmount.subtract(oldWaybill.getPrePayAmount());
					}
					
					//modify by 269044-zhurongrong 悟空系统要求：在开单时已经经过灰名单的校验，所以无需再次校验能否开月结
					//运单号不为悟空的单号的时候
					if(!SettlementDictionaryConstants.SOURCE_SYSTEM_ECS.equals(waybill.getSourceSystem())) {
						// 判断能否欠款 ；包括超期欠款和信用额度余额欠款
						DebitDto debitDto = customerBargainService.isBeBebt(
								waybill.getDeliveryCustomerCode(),
								waybill.getReceiveOrgCode(), paymentType, debitAmount);
						if (debitDto == null) { // 每个客户和部门都必须有信用额度
							throw new SettlementException("找不到信用额度配置，不能执行此操作");
						} else if (!debitDto.isBeBebt()) { // 客户不能欠款，不能执行操作
							throw new SettlementException(debitDto.getMessage());
						}
					}//end
					
					// 欠款费用，扣减客户信用额度
					BigDecimal debtFee = waybill.getPrePayAmount();
					//DEFECT-669  使用预付金额添加已使用额度
					customerBargainService.updateUsedAmount(
	                        waybill.getDeliveryCustomerCode(),
	                        waybill.getReceiveOrgCode(), paymentType, debtFee,
	                        currentInfo);

					billReceivableOrig = this.buildBillReceivableOrig(waybill,
							prePayFeeDto, now);

					// 2013-06-04：BUG号：BUG-23123
					// 付款方式为：月结、临欠
					// 月结客户，根据客户编码，查询客户信息，查看客户是否异地调货，获取对应的所属部门信息
	                //异地调货修改为统一结算规则
//					billReceivableOrig = this.getBillRecivalbeEntity(billReceivableOrig, waybill);
					//判断是否为快递
					if(SettlementUtil.isPackageProductCode(billReceivableOrig.getProductCode())){
						//ddw，如果折扣单不是已确认的新增有效始发应收单
						if(!SettlementDictionaryConstants.DISCOUNT_BILL_STATUS_CONFIRM.equals(status)){
							billReceivableService.addBillReceivable(billReceivableOrig,	currentInfo);
						}
					}else{
						billReceivableService.addBillReceivable(billReceivableOrig,	currentInfo);
					}
				} else {
					throw new SettlementException("付款方式有误，不能执行此操作");
				}
			}
			//ddw,判断到达部门是否为合伙人，如果是合伙人则在PTP系统生成应收单
			if((!isPartnerDept(waybill.getLastLoadOrgCode()) && !dto.isPartnerDeptBeforeChange()) || isOldWaybill(waybill) 
					|| FossConstants.YES.equals(waybill.getIsWholeVehicle())){
				// 到付处理
				billReceivableDest = this.buildBillReceivableDest(waybill,
						toPayFeeDto, now, writeBackBillReceivableDest,
						writeBackBillReceivableCod);
				//判断是否为快递
				if(SettlementUtil.isPackageProductCode(billReceivableDest.getProductCode())){
					//ddw，如果折扣单不是已确认的新增有效到达应收单
					if(!SettlementDictionaryConstants.DISCOUNT_BILL_STATUS_CONFIRM.equals(status)){
						billReceivableService.addBillReceivable(billReceivableDest,	currentInfo);
					}
				}else{
					billReceivableService.addBillReceivable(billReceivableDest,	currentInfo);
				}
			}
		}

		// 代收货款金额大于0，则生成代收货款
		if (waybill.getCodAmount() != null
				&& waybill.getCodAmount().compareTo(BigDecimal.ZERO) > 0) {

			// 处理开代收款生成应付单前验证
			validateHandleCod(waybill);
			//ddw,判断到达部门是否为合伙人，如果是合伙人则在PTP系统生成应收单
			if((!isPartnerDept(waybill.getLastLoadOrgCode()) && !dto.isPartnerDeptBeforeChange()) || isOldWaybill(waybill) 
					|| FossConstants.YES.equals(waybill.getIsWholeVehicle())){
				// 生成代收货款应收单
				billReceivableCod = buildBillReceivableCOD(waybill, now,
						writeBackBillReceivableCod, writeBackBillReceivableDest);
				billReceivableService.addBillReceivable(billReceivableCod,
						currentInfo);
			}
            //合伙人空运开单,不生成代收货款应付单，通过PTP生成代收货款应付单 by 243921
            if (isPartnerDept(waybill.getReceiveOrgCode())
                 && ProductEntityConstants.PRICING_PRODUCT_AIR_FREIGHT
                 .equals(waybill.getProductCode())) {
                logger.info("合伙人空运开单部门：" + waybill.getReceiveOrgCode()
                  + "不生成代收货款应付单，通过PTP生成代收货款应付单");
            }else {
                // 生成代收货款应付单
                billPayableCOD = buildBillPayableCOD(waybill, now);
                billPayableService.addBillPayable(billPayableCOD, currentInfo);

                // 调用代收货款服务
                this.billPayCODService.addBillCOD(waybill, currentInfo);
            }
		}

		// 装卸费金额大于0，生成装卸费应付单
		if (waybill.getServiceFee() != null
				&& waybill.getServiceFee().compareTo(BigDecimal.ZERO) > 0) {
			if (StringUtils.isEmpty(waybill.getDeliveryCustomerContact())) {
				throw new SettlementException("当运单存在装卸费时，客户联系人不能为空！");
			}

			// 发货客户手机和发货客户电话同时为空时，提示不能操作
			if (StringUtils.isEmpty(waybill.getDeliveryCustomerMobilephone())
					&& StringUtils.isEmpty(waybill.getDeliveryCustomerPhone())) {
				throw new SettlementException("当运单存在装卸费时，联系电话不能为空！");
			}
			billPayableSF = buildBillPayableSF(waybill, now);
			billPayableService.addBillPayable(billPayableSF, currentInfo);
		}

		// 生成开单流水
		addPODEntity(waybill, currentInfo, now);
		
		/**
		 * @author 218392 zhangyongxue
		 * @date 2016-02-23 12:12:12
		 * 裹裹项目：当DOP到FOSS结算的付款信息先到的情况下，补录之后生成的结算单据信息在后的情况下
		 * （1）先到裹裹暂存表中查询：根据运单号查询为未核销的；
		 * （2）如果有说明DOP的付款信息先到了；如果没有说明DOP的付款信息没有到。
		 * （3）然后，再调用裹裹的结算单据处理Service处理
		 */
		List<GreenHandWrapWriteoffEntity> greenHandList = new ArrayList<GreenHandWrapWriteoffEntity>();
		if(waybill != null){
			String waybillNo = waybill.getWaybillNo();
			//根据单号查询未核销暂存表的信息
			greenHandList = greenHandWrapWriteoffDao.queryGreenHandWrapByWaybillNo(waybillNo);
			//查询结果不为空，并且长度>0,
			RequestGreenHandWrapEntity wrapEntity = new RequestGreenHandWrapEntity();
			wrapEntity.setWaybillNo(waybillNo);
			if(greenHandList != null && greenHandList.size()>0){
				/**
				 * 运单号查询满足本次项目需求条件的应收单
				 * （条件是：始发应收单，未核销金额大于0，有效的，来源单据类型为 W-开单）
				 */
				List<BillReceivableEntity> billReceivableList = greenHandWrapWriteoffService.queryReceivableBill(wrapEntity);
				if(billReceivableList != null && billReceivableList.size() == 2){
					throw new SettlementException("单号："+ waybillNo + "存在多条始发应收单");
				}else if(billReceivableList != null && billReceivableList.size() > 0){
					/**
					 * 3.如果查询应收单有的话，那么直接核销始发应收单;
					 *   核销完之后,调用财务自助接口,将数据推送到财务自助那边
					 */
					BillReceivableEntity billReceivableEntity = billReceivableList.get(0);
					GreenHandWrapWriteoffEntity writeOffEntity = greenHandList.get(0);//获取暂存表中数据
					RequestGreenHandWrapEntity request = new RequestGreenHandWrapEntity();
					request.setCostType("0");//设置费用类型 
					request.setWaybillNo(waybillNo);//运单号
					request.setDopAmount(writeOffEntity.getAmount());//客户还款金额
					request.setDoptime(writeOffEntity.getDopTime());//客户还款时间
					greenHandWrapWriteoffService.writeoffByDoprequest(billReceivableEntity,request);
				}
			}
		}
		
	}

	/**
	 * 月结客户，根据客户编码，查询客户信息，查看客户是否异地调货，获取对应的所属部门信息
	 * 
	 * @author 099995-foss-wujiangtao
	 * @date 2013-3-9 上午8:13:54
	 * @param entity
	 * @param waybill
	 * @return
	 */
    @Deprecated
	private BillReceivableEntity getBillRecivalbeEntity(
			BillReceivableEntity entity, WaybillPickupInfoDto waybill) {
		BillReceivableEntity receEntity = entity;

		CustomerDto custDto = customerService.queryCustInfoByCode(waybill
				.getDeliveryCustomerCode());
		
		if (custDto != null)
		{
			//获取合同信息
			List<CusBargainEntity> bargains = custDto.getBargainList();

			if (CollectionUtils.isNotEmpty(bargains) && bargains.get(0) != null)
			{
				//根据综合反映，只取第一个合同
				CusBargainEntity bargainEntity = bargains.get(0);

				//判断为异地调货
				if (FossConstants.YES.equals(bargainEntity
						.getAsyntakegoodsCode()))
				{

					// 获取所属部门、催款部门编码，综合存的是标杆编码，需要再次调用综合接口进行查询
					String unifiedCode = custDto.getUnifiedCode();
					OrgAdministrativeInfoEntity orgEntity = orgAdministrativeInfoService
							.queryOrgAdministrativeInfoByUnifiedCode(unifiedCode);
					OrgAdministrativeInfoEntity asynOrgEntity = orgAdministrativeInfoService
							.queryOrgAdministrativeInfoByUnifiedCode(bargainEntity.getHastenfunddeptCode());

					if (orgEntity != null)
					{

                        // 设置应收部门编码为：客户对应的所属的部门编码
						receEntity.setReceivableOrgCode(orgEntity.getCode());
						receEntity.setReceivableOrgName(orgEntity.getName());
					}
					
					//设置催款部门
					if(asynOrgEntity != null){
						receEntity.setDunningOrgCode(asynOrgEntity.getCode());
						receEntity.setDunningOrgName(asynOrgEntity.getName());
					}

				}
			}
		}

		return receEntity;
	}

	/**
	 * 处理开代收款生成应付单前验证
	 * 
	 * @author guxinhua
	 * @param
	 * @date 2013-1-29 下午8:03:03
	 * @return
	 */
	private void validateHandleCod(WaybillPickupInfoDto waybill) {

		// 对公对私标记，需要根据综合管理里面的属性进行处理--运单开单信息，把综合规定的编码“对公对私标记”转为结算规定的编码
		boolean bl = false;
		if (DictionaryValueConstants.CRM_ACCOUNT_NATURE_PRIVATE_ACCOUNT
				.equals(waybill.getPublicPrivateFlag())) {
			// 对私账户
			waybill.setPublicPrivateFlag(SettlementDictionaryConstants.COD__PUBLIC_PRIVATE_FLAG__RESIDENT);
			bl = true;
		} else if (DictionaryValueConstants.CRM_ACCOUNT_NATURE_PUBLIC_ACCOUNT
				.equals(waybill.getPublicPrivateFlag())) {
			// 对公账户
			waybill.setPublicPrivateFlag(SettlementDictionaryConstants.COD__PUBLIC_PRIVATE_FLAG__COMPANY);
			bl = true;
		}

		// 代收货款类型
		String refundType = waybill.getRefundType();
		if (StringUtils.isBlank(refundType)) {
			throw new SettlementException("代收货款类型为空,不能新增代收货款");
		}

		// 代收货款应付单客户编码不能为空
		if (StringUtils.isEmpty(waybill.getDeliveryCustomerCode())) {
			throw new SettlementException("发货客户编码不能为空");
		}

		// 银行账户
		if (SettlementDictionaryConstants.COD__COD_TYPE__RETURN_1_DAY
				.equals(refundType)
				|| SettlementDictionaryConstants.COD__COD_TYPE__RETURN_3_DAY
						.equals(refundType)) {
			if (!bl) {// 即日退和3日退需要校验账号的对公对私标记是否合法
				throw new SettlementException("客户账号对公对私标记不合法！"
						+ waybill.getPublicPrivateFlag());
			}

			String headMsg = "即日退、三日退类型代收货款";
			if (StringUtils.isBlank(waybill.getAccountName())) {
				throw new SettlementException(headMsg + "收款人不能为空");
			}
			if (StringUtils.isBlank(waybill.getAccountCode())) {
				throw new SettlementException(headMsg + "银行帐号不能为空");
			}
			if (StringUtils.isBlank(waybill.getBankHQCode())) {
				throw new SettlementException(headMsg + "开户行编码不能为空");
			}
			if (StringUtils.isBlank(waybill.getAccountBank())) {
				throw new SettlementException(headMsg + "开户行不能为空");
			}
			if (StringUtils.isBlank(waybill.getProvinceCode())
					|| StringUtils.isBlank(waybill.getProvinceName())) {
				throw new SettlementException(headMsg + "省不能为空");
			}
			if (StringUtils.isBlank(waybill.getCityCode())
					|| StringUtils.isBlank(waybill.getCityName())) {
				throw new SettlementException(headMsg + "市不能为空");
			}
			if (StringUtils.isBlank(waybill.getPublicPrivateFlag())) {
				throw new SettlementException(headMsg + "对公对私标志不能为空");
			}
//			if (StringUtils.isBlank(waybill.getPayeePhone())) {
//				throw new SettlementException(headMsg + "手机号码不能为空");
//			}
			if (StringUtils.isBlank(waybill.getBankBranchCode())
					|| StringUtils.isBlank(waybill.getBankBranchName())) {
				throw new SettlementException(headMsg + "支行编码/名称不能为空");
			}

			// 如果代收货款类型为"即日退"，则代收货款的退款账号类型不能为"对公帐号"
			if (SettlementDictionaryConstants.COD__COD_TYPE__RETURN_1_DAY
					.equals(refundType)
					&& (!StringUtils
							.equals(waybill.getPublicPrivateFlag(),
									SettlementDictionaryConstants.COD__PUBLIC_PRIVATE_FLAG__RESIDENT))) {
				throw new SettlementException(
						"如果代收货款类型为即日退，则代收货款的退款账号类型不能为对公帐号 ");
			}

			// 如果代收货款类型为"即日退"，则其开户银行必须在即日退所属银行范围内（即日退所属银行范围已经提交给综合管理做基础资料了）
			if (SettlementDictionaryConstants.COD__COD_TYPE__RETURN_1_DAY
					.equals(refundType)) {
				BankEntity entity = new BankEntity();
				// 银行编码
				entity.setCode(waybill.getBankHQCode());
				boolean bool = salesPayCODService
						.checkBankIntraDayTypeByBankEntity(entity);
				if (!bool) {
					throw new SettlementException(
							"如果代收货款类型为即日退，则其开户银行必须在即日退所属银行范围内 ");
				}

			}

		}

	}
	/**
	 * 校验临时欠款是否大于30天
	 * @author lianghaisheng
	 * @param waybill 更改后运单
	 * @param oldWaybill 更改前运单
	 */
	public void canDebit(String customerCode,String orgCode){
		//判断如果是新增运单,并且更改后为临时欠款
		if(StringUtils.isEmpty(orgCode)||
				StringUtils.isEmpty(customerCode)){
			throw new SettlementException("客户编码,或者部门编码为空！");
		}
		//设置查询条件
		BillReceivableConditionDto dto = new BillReceivableConditionDto();
		String[] billTypes = new String[]{SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__ORIGIN_RECEIVABLE};
		dto.setBillTypes(billTypes);
		dto.setCustomerCode(customerCode);
		dto.setOrgCode(orgCode);
		dto.setPaymentType(SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__DEBT);
		//返回欠款日期
		Date minDate = billReceivableService.queryMinDebitTime(dto);
		//如果没有对应的开单记录则返回
		if(minDate == null){
			return;
		}
		Date now = new Date();
		DataDictionaryEntity dictEntity = DictUtil.getDataByTermsCode("SETTLEMENT__CUSTOMER_MAX_DEBIT_DAYS_TYPE");
		List<DataDictionaryValueEntity> dataList = dictEntity.getDataDictionaryValueEntityList();
		//如果对接系统数据字典没配置，则抛出异常
		if(CollectionUtils.isEmpty(dataList)){
			throw new SettlementException("客户最大临欠天数数据字典没配置，请去数据字典进行配置！");
		}
		//对接系统必须配置，且必须是1条 Y--财务共享，N--代表费控
		if(dataList.size()!=1){
			throw new SettlementException("客户最大临欠天数数据字典配置有误，必须只有1条。");
		}
		int maxDebitDays =  Integer.parseInt(dataList.get(0).getValueCode());
		minDate = DateUtils.addDays(minDate, maxDebitDays);
		if(now.after(minDate)){
			throw new SettlementException("客户编码："+customerCode+"在本部门存在大于"+maxDebitDays+"的超期临时欠款应收账款！");
		}
		
	}

	/**
	 * 处理取消运单
	 * 
	 * @author ibm-zhuwei
	 * @date 2013-1-15 下午3:38:20
	 * @param waybillNo
	 * @param currentInfo
     * @param receiveOrgCode
     * @param productCode
	 * @return 红冲的原始单据信息
	 */
    private WaybillPickupWriteBackDto handleCanceledWaybill(String waybillNo,String receiveOrgCode,String productCode,
                                                            OrgAdministrativeInfoEntity collectionOrgEntity, CurrentInfo currentInfo) {

        // 坏账校验
		int i = billBadAccountService.queryByWaybillNO(waybillNo);
		if (i > 0) {
			throw new SettlementException("坏账申请审批完成，运单不允许更改");
		}

		//ddw
		String status = querydiscountPayable(waybillNo);
		// 红冲现金收款单
		List<BillCashCollectionEntity> billCashes = billCashCollectionService
				.queryBySourceBillNOs(
						Arrays.asList(waybillNo),
						SettlementDictionaryConstants.BILL_CASH_COLLECTION__SOURCE_BILL_TYPE__WAYBILL,
						FossConstants.ACTIVE);

		// 校验现金收款单
		billCashCollectionService
				.validateWaybillForBillCashCollection(billCashes);

		// 红冲现金收款单
		if (CollectionUtils.isNotEmpty(billCashes)) {
			for (BillCashCollectionEntity entity : billCashes) {
				// 已签收，不能红冲
				if (entity.getConrevenDate() != null) {
					throw new SettlementException("该单已经被签收，不允许进行红冲现金收款单操作");
				}
				
				//当集中接货时，红单的现金收款单的收款部门是发更改的部门
				if(collectionOrgEntity != null){
					entity.setCollectionOrgCode(collectionOrgEntity.getCode());
					entity.setCollectionOrgName(collectionOrgEntity.getName());
				}

				billCashCollectionService.writeBackBillCashCollection(entity,
						currentInfo);
			}
		}

		// 查询应收单（始发应收、到达应收）
		BillReceivableConditionDto billReceivableConditionDto = new BillReceivableConditionDto(waybillNo);
		//ddw,如果折扣单已经确认，不红冲始发应收和到达应收
		if(SettlementDictionaryConstants.DISCOUNT_BILL_STATUS_CONFIRM.equals(status)){
			billReceivableConditionDto.setBillTypes(new String[] {
				SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__DESTINATION_PARTIAL_LINE,
				SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__AIR_AGENCY,
				SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__COD_RECEIVABLE,
				SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__AIR_AGENCY_COD,
				SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__DESTINATION_LAND_STOWAGE,
				SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__LAND_STOWAGE_AGENCY_COD});
		}else{
			billReceivableConditionDto.setBillTypes(new String[] {
				SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__ORIGIN_RECEIVABLE,
				SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__DESTINATION_RECEIVABLE,
				SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__DESTINATION_PARTIAL_LINE,
				SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__AIR_AGENCY,
				SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__COD_RECEIVABLE,
				SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__AIR_AGENCY_COD,
				SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__DESTINATION_LAND_STOWAGE,
				SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__LAND_STOWAGE_AGENCY_COD});
		}
		List<BillReceivableEntity> billReceives = billReceivableService
				.queryBillReceivableByCondition(billReceivableConditionDto);

		// 校验应收单合法性
		billReceivableService.validateWaybillForBillReceivable(billReceives);

		//update by 231434 2016.11.29
		//更改前到达部门是否合伙人
		boolean isPartnerDeptBeforeChange = false;

		// 红冲应收单，包括代收货款
		if (CollectionUtils.isNotEmpty(billReceives)) {
			for (BillReceivableEntity entity : billReceives) {
				// 已签收，不能红冲
				if (entity.getConrevenDate() != null) {
					throw new SettlementException("该单已经被签收，不允许进行红冲应收单操作");
				}
				//ddw,判断到达部门是否为合伙人，如果是合伙人则在PTP系统生成应收单
				WaybillEntity waybillEntity = waybillManagerService.queryWaybillById(entity.getWaybillId());
                //判断新运单的到达部门是否为合伙人 change by-hemingyu 20160513
                //WaybillEntity newWaybillEntity = waybillManagerService.queryPartWaybillByNo(waybillEntity.getWaybillNo());
				if(waybillEntity == null){
					throw new SettlementException("查询运单失败");
				}
				// 是否整车：是-Y 否-N
				String isWholeVehicle = waybillEntity.getIsWholeVehicle();

				//用应收单的到达部门判断是否合伙人
				//判断应收单到达部门是否合伙人部门，是：不红冲到达应收单、代收货款应收单；否：全部红冲
				isPartnerDeptBeforeChange = isPartnerDept(entity.getDestOrgCode());
				
                if(!isPartnerDeptBeforeChange || FossConstants.YES.equals(isWholeVehicle) || isOldWaybill(waybillEntity)){
					billReceivableService.writeBackBillReceivable(entity,currentInfo);
				}else{
					if(!(entity.getBillType().equals(SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__DESTINATION_RECEIVABLE)
							||entity.getBillType().equals(SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__COD_RECEIVABLE)))
					billReceivableService.writeBackBillReceivable(entity,currentInfo);
				}

			}
		}

		// 查询应付单（装卸费应付）
		BillPayableConditionDto billPayableConditionDto = new BillPayableConditionDto(
				waybillNo);
		billPayableConditionDto
				.setBillTypes(new String[] {
						SettlementDictionaryConstants.BILL_PAYABLE__BILL_TYPE__SERVICE_FEE,
						SettlementDictionaryConstants.BILL_PAYABLE__BILL_TYPE__ACCOUNT_PAYABLE_COD,
						SettlementDictionaryConstants.BILL_PAYABLE__BILL_TYPE__FREIGHT_DISCOUNT});//添加零担事后折应付,ddw
		List<BillPayableEntity> billPayables = billPayableService
				.queryBillPayableByCondition(billPayableConditionDto);

		// 校验应付单合法性
		billPayableService.validateWaybillForBillPayable(billPayables);

        //合伙人空运开单，不生成/红冲代收货款应付单，通过PTP生成/红冲代收货款应付单    by 243921
		WaybillEntity waybill = waybillManagerService.queryWaybillBasicByNo(waybillNo);
        if(waybill != null){
            receiveOrgCode = waybill.getReceiveOrgCode();
            productCode = waybill.getProductCode();
        }
		 // 作废代收货款单
        CODEntity codEntity = codCommonService.queryByWaybill(waybillNo); 

        if (isPartnerDept(receiveOrgCode) && ProductEntityConstants.PRICING_PRODUCT_AIR_FREIGHT.equals(productCode)) {
            logger.info("合伙人空运开单部门：" + waybill.getReceiveOrgCode()
              + "不生成/红冲代收货款应付单，通过PTP生成/红冲代收货款应付单");
        }else {
            // 红冲应付单，包括代收货款
            if (CollectionUtils.isNotEmpty(billPayables)) {
               for (BillPayableEntity entity : billPayables) {
                // 已签收，不能红冲
                   if (entity.getSignDate() != null) {
                       throw new SettlementException("该单已经被签收，不允许进行红冲应付单操作");
                   }

                   billPayableService.writeBackBillPayable(entity, currentInfo);
                }
            }

           if (codEntity != null
              && FossConstants.ACTIVE.equals(codEntity.getActive())) {
                this.billPayCODService.cancelBillCOD(codEntity, currentInfo);
           }
        }

		// 红冲的结算单据信息
		WaybillPickupWriteBackDto dto = new WaybillPickupWriteBackDto();

		dto.setWriteBackBillCashCollections(billCashes); // 红冲的现金收款单
		dto.setWriteBackBillReceivables(billReceives); // 红冲的应收单
		dto.setWriteBackBillPayables(billPayables); // 红冲的应付单
		dto.setWriteBackCOD(codEntity); // 红冲的代收货款
		dto.setPartnerDeptBeforeChange(isPartnerDeptBeforeChange);

		return dto;
	}
	
	 /**
     * @Description: 电子运单是否可以新增校验
     * @author lianghaisheng  
     * @date 2014-9-1 下午5:10:05   
     * @throws
     */
	@Override
	public void electriWaybillCanAdd(WaybillPickupInfoDto waybill
			,CurrentInfo currentInfo) {
		//调用其他方法是否可以调用
		this.validAddedWaybillParam(waybill, currentInfo);
		// 通过综合接口获取部门、子公司信息
		String paymentType = waybill.getPaidMethod(); // 付款方式
		BigDecimal prePayAmount = waybill.getPrePayAmount(); // 预付金额（包括现金和欠款）
		BigDecimal toPayAmount = waybill.getToPayAmount().subtract(
				waybill.getCodAmount()); // 到付金额（去除代收货款）

		// 付款时存在情况有：部分预付，部分到付，此时预付必须都是现金支付；不存在以下情况：部分现付，部分临欠
		if (prePayAmount.compareTo(BigDecimal.ZERO) > 0
				&& toPayAmount.compareTo(BigDecimal.ZERO) == 0) { // 1)全部预付			
               if (SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__CREDIT
					.equals(paymentType)
					|| SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__DEBT
							.equals(paymentType)) { // 月结、临欠	
            	   if (isEWaybillCheckSwitch()) {
            		  logger.info("快递电子运单结算校验开始：" + waybill.getWaybillNo());
            		 //发更改时，额度算差额度
	       				BigDecimal debitAmount = prePayAmount;
	       				// 判断能否欠款 ；包括超期欠款和信用额度余额欠款
	       				DebitDto debitDto = customerBargainService.isBeBebt(
	       						waybill.getDeliveryCustomerCode(),
	       						waybill.getReceiveOrgCode(), paymentType, debitAmount);
	       				
	       				if (debitDto == null) { // 每个客户和部门都必须有信用额度
	       					throw new SettlementException("找不到信用额度配置，不能执行此操作");
	       				} else if (!debitDto.isBeBebt()) { // 客户不能欠款，不能执行操作
	       					throw new SettlementException(debitDto.getMessage());
	       				}
	       				//判断临时欠款是否超期
	       				if(SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__DEBT
	       						.equals(paymentType)){
	       					canDebit(waybill.getDeliveryCustomerCode(),waybill.getReceiveOrgCode());
	       				}
	       			logger.info("快递电子运单结算校验结束：" + waybill.getWaybillNo());
            	   } 
			}else if(!SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__ONLINE
					.equals(paymentType)&&
					!SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__CASH
							.equals(paymentType)
							&& !SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__CARD
									.equals(paymentType)) {
				throw new SettlementException("付款方式有误，不能执行此操作");
			}

		} else if (prePayAmount.compareTo(BigDecimal.ZERO) == 0
				&& toPayAmount.compareTo(BigDecimal.ZERO) > 0) { // 2)全部到付

			if (!SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__FREIGHT_COLLECT
					.equals(paymentType)) {
				throw new SettlementException("付款方式有误（只有到付金额付款方式不为到付），不能执行此操作");
			} 
		} else if (prePayAmount.compareTo(BigDecimal.ZERO) > 0
				&& toPayAmount.compareTo(BigDecimal.ZERO) > 0) { // 3)部分预付，部分到付
			
		 if (SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__CREDIT
					.equals(paymentType)
					|| SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__DEBT
							.equals(paymentType)) { // 月结、临欠
			 if (isEWaybillCheckSwitch()) {
				 logger.info("快递电子运单结算校验开始：" + waybill.getWaybillNo());
				 BigDecimal debitAmount = prePayAmount;				
					// 判断能否欠款 ；包括超期欠款和信用额度余额欠款
					DebitDto debitDto = customerBargainService.isBeBebt(
							waybill.getDeliveryCustomerCode(),
							waybill.getReceiveOrgCode(), paymentType, debitAmount);
					if (debitDto == null) { // 每个客户和部门都必须有信用额度
						throw new SettlementException("找不到信用额度配置，不能执行此操作");
					} else if (!debitDto.isBeBebt()) { 
						// 客户不能欠款，不能执行操作
						throw new SettlementException(debitDto.getMessage());
					}
					//判断临时欠款是否超期
					if(SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__DEBT
							.equals(paymentType)){
						canDebit(waybill.getDeliveryCustomerCode(),waybill.getReceiveOrgCode());
					}	
				logger.info("快递电子运单结算校验结束：" + waybill.getWaybillNo());
			 }
			} else if(!SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__CASH
					.equals(paymentType)
					&&!SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__CARD
							.equals(paymentType)
					&&!SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__FREIGHT_COLLECT
					.equals(paymentType)){
				throw new SettlementException("付款方式有误，不能执行此操作");
			}	

		}

		// 代收货款金额大于0，则生成代收货款
		if (waybill.getCodAmount() != null
				&& waybill.getCodAmount().compareTo(BigDecimal.ZERO) > 0) {
			// 处理开代收款生成应付单前验证
			this.validateHandleCod(waybill);			
		}

		// 装卸费金额大于0，生成装卸费应付单
		if (waybill.getServiceFee() != null
				&& waybill.getServiceFee().compareTo(BigDecimal.ZERO) > 0) {
			if (StringUtils.isEmpty(waybill.getDeliveryCustomerContact())) {
				throw new SettlementException("存在装卸费，客户联系人不能为空！");
			}

			// 发货客户手机和发货客户电话同时为空时，提示不能操作
			if (StringUtils.isEmpty(waybill.getDeliveryCustomerMobilephone())
					&& StringUtils.isEmpty(waybill.getDeliveryCustomerPhone())) {
				throw new SettlementException("存在装卸费，联系电话不能为空！");
			}
		
		}
		
	}
	
	/**
	   * 验证电子运单校验开关
	   * @param waybill
	   * @return
	   */
	  public boolean isEWaybillCheckSwitch(){
	    String[] codes = new String[1];
	    codes[0]=ConfigurationParamsConstants.PKP_EWAYBILL_CHECK_SWITCH;//电子运单校验开关
	    List<ConfigurationParamsEntity> configurationParamsEntitys = this.configurationParamsService.queryConfigurationParamsBatchByCode(codes);
	    if(null  !=  configurationParamsEntitys  &&  configurationParamsEntitys.size() > 0){
	      //只有值为“N”，才不需要校验
	      if (FossConstants.NO.equals(configurationParamsEntitys.get(0).getConfValue())) {
	        return false;
	      }
	    }
	      //没有配置默认为需要校验
	      return true;
	  }
	
	/**
	 * 根据传入的一到多个运单单号，获取一到多条应收单信息
     * @author 邓大伟
     * @date 2015-02-03
     * @param wayBillNos  运单单号集合
	 */
	public String querydiscountPayable(String waybillNo){
		//查询折扣单
		String status = billPayableService.queryDiscountPayable(waybillNo);
		//循环处理结果集
		if(StringUtil.isNotBlank(status)){
			//判断折扣单状态是否为已确认
			if(SettlementDictionaryConstants.DISCOUNT_BILL_STATUS_NOT_CONFIRM.equals(status)){
				throw new SettlementException("该单已经做过折扣，并且折扣单是未确认状态，请作废折扣单在更改！");
			}
		}
		return status;
	}
	
	/**
	 * @param settlementCommonService
	 */
	public void setSettlementCommonService(
			ISettlementCommonService settlementCommonService) {
		this.settlementCommonService = settlementCommonService;
	}

	/**
	 * @param billCashCollectionService
	 */
	public void setBillCashCollectionService(
			IBillCashCollectionService billCashCollectionService) {
		this.billCashCollectionService = billCashCollectionService;
	}

	/**
	 * @param billReceivableService
	 */
	public void setBillReceivableService(
			IBillReceivableService billReceivableService) {
		this.billReceivableService = billReceivableService;
	}

	/**
	 * @param billPayableService
	 */
	public void setBillPayableService(IBillPayableService billPayableService) {
		this.billPayableService = billPayableService;
	}

	/**
	 * @param customerBargainService
	 */
	public void setCustomerBargainService(
			ICustomerBargainService customerBargainService) {
		this.customerBargainService = customerBargainService;
	}

	public void setFossToFinsRemitCommonService(
			IFossToFinsRemitCommonService fossToFinsRemitCommonService) {
		this.fossToFinsRemitCommonService = fossToFinsRemitCommonService;
	}

	/**
	 * @param billPayCODService
	 */
	public void setBillPayCODService(IBillPayCODService billPayCODService) {
		this.billPayCODService = billPayCODService;
	}

	/**
	 * @param codCommonService
	 */
	public void setCodCommonService(ICodCommonService codCommonService) {
		this.codCommonService = codCommonService;
	}

	/**
	 * @param statementOfAccountService
	 */
	public void setStatementOfAccountService(
			IStatementOfAccountService statementOfAccountService) {
		this.statementOfAccountService = statementOfAccountService;
	}

	/**
	 * @param orgAdministrativeInfoService
	 */
	public void setOrgAdministrativeInfoService(
			IOrgAdministrativeInfoService orgAdministrativeInfoService) {
		this.orgAdministrativeInfoService = orgAdministrativeInfoService;
	}

	/**
	 * @param configurationParamsService
	 */
	public void setConfigurationParamsService(
			IConfigurationParamsService configurationParamsService) {
		this.configurationParamsService = configurationParamsService;
	}

	/**
	 * @param billBadAccountService
	 */
	public void setBillBadAccountService(
			IBillBadAccountService billBadAccountService) {
		this.billBadAccountService = billBadAccountService;
	}

	/**
	 * @param customerService
	 *            the customerService to set
	 */
	public void setCustomerService(ICustomerService customerService) {
		this.customerService = customerService;
	}

	/**
	 * Sets the sales pay cod service.
	 * 
	 * @param salesPayCODService
	 *            the new sales pay cod service
	 */
	public void setSalesPayCODService(ISalesPayCODService salesPayCODService) {
		this.salesPayCODService = salesPayCODService;
	}

	/**
	 * @param podService
	 *            the podService to set
	 */
	public void setPodService(IPODService podService) {
		this.podService = podService;
	}
     /**
      *@param externalBillService
      * */
	public void setExternalBillService(IExternalBillService externalBillService) {
		this.externalBillService = externalBillService;
	}

	/**
	 * @SET
	 * @param expressPartSalesDeptService
	 */
	public void setExpressPartSalesDeptService(
			IExpressPartSalesDeptService expressPartSalesDeptService) {
		/*
		 *@set
		 *@this.expressPartSalesDeptService = expressPartSalesDeptService
		 */
		this.expressPartSalesDeptService = expressPartSalesDeptService;
	}

	public void setWaybillManagerService(
			IWaybillManagerService waybillManagerService) {
		this.waybillManagerService = waybillManagerService;
	}

	public void setGreenHandWrapWriteoffDao(
			IGreenHandWrapWriteoffDao greenHandWrapWriteoffDao) {
		this.greenHandWrapWriteoffDao = greenHandWrapWriteoffDao;
	}

	/*public void setDiscountManagementService(IDiscountManagementService discountManagementService) {
		this.discountManagementService = discountManagementService;
	}*/
	
	public void setFreightDiscountService(IFreightDiscountService freightDiscountService) {
		this.freightDiscountService = freightDiscountService;
	}

	public void setSaleDepartmentService(
			ISaleDepartmentService saleDepartmentService) {
		this.saleDepartmentService = saleDepartmentService;
	}

	@Override
	public List<BillBadAccountEntity> queryByWaybillNOs(List<String> waybillNos) {
		if(CollectionUtils.isEmpty(waybillNos)){
			throw new SettlementException("根据运单号查询坏账信息参数不能为空");
		}
		return billBadAccountService.queryByWaybillNOs(waybillNos);
	}

	/**
	 * 返货更改应收单接口
	 * WaybillPickupInfoDto(
	 * WaybillNo
	 * 运单号
	 * //receiveCustomerCode,receiveCustomerName receiveOrgCode receiveOrgName duningOrgCode duningOrgName
	 * //客户名称、客户编码、应收部门、应收部门编码、催款部门、催款部门编码
	 * lastLoadOrgCode lastLoadOrgName
	 * 到达编码  到达部门
	 * )
	 * @param waybill
	 * @param currentInfo
	 */
	@Override
	public void returnedGoodsWriteoffReceivable(WaybillPickupInfoDto waybill,
			CurrentInfo currentInfo) {
		logger.info("开始返货更改应收单接口：" + waybill.getWaybillNo());
		
		BillReceivableConditionDto receiConDto = new BillReceivableConditionDto(waybill.getWaybillNo());
		receiConDto.setWaybillNo(waybill.getWaybillNo());
		receiConDto.setBillTypes(new String[] { SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__DESTINATION_RECEIVABLE}); //到付运费应收单
				
		// 根据传入的运单号和单据类型等参数，查询到付运费应收单信息可公用
		List<BillReceivableEntity> receList = this.billReceivableService.queryBillReceivableByCondition(receiConDto);
		
		if (CollectionUtils.isNotEmpty(receList)) {
			Date date = new Date(); 
			
			// 验证是否存在相同类型的多个应收单
			this.billReceivableService.validateWaybillForBillReceivable(receList);
			BillReceivableEntity receEntity = receList.get(0);
			 
			// 当前系统时间，小于应收单的解锁时间时不能被红冲
			if (receEntity.getUnlockDateTime() != null && date.before(receEntity.getUnlockDateTime())) {
				throw new SettlementException(String.format("%s应收单已被锁定",receEntity.getReceivableNo()));
			}
			// 原单如果应收单已核销
			if (receEntity.getUnverifyAmount()!= null && receEntity.getUnverifyAmount().compareTo(BigDecimal.ZERO) == 0) {
				logger.warn("原单如果应收单已核销，则应收单不变更：" + waybill.getWaybillNo());
				return;
			}
			// 应收单部分核销则不能开返单
			if(receEntity.getUnverifyAmount()!= null && receEntity.getUnverifyAmount().compareTo(BigDecimal.ZERO) > 0
					&&receEntity.getVerifyAmount()!= null && receEntity.getVerifyAmount().compareTo(BigDecimal.ZERO) > 0){
				throw new SettlementException(String.format("%s应收单部分核销则不能开返单",receEntity.getReceivableNo()));
			}	
			// 原单已结清则应收单不变,（付款类型 月结，临时欠款）
			if(Arrays.asList(SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__CREDIT,
					SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__DEBT).contains(receEntity.getPaymentType())){
				logger.warn("原单已结清则应收单不变,（付款类型 月结，临时欠款）：" + waybill.getWaybillNo());
				return;
			}
		 
			// 红冲
			this.billReceivableService.writeBackBillReceivable(receEntity,currentInfo);
			
			// 生成返货应收单
			this.createReturnedGoodsBillReceivable(receEntity, waybill, currentInfo);
			logger.info("生成返货更改应收单：" + waybill.getWaybillNo());
		}
		
		logger.info("结束返货更改应收单接口：" + waybill.getWaybillNo());
	}
	
	/**
	 * 快递系统非转寄开单
	 * @author foss-231434-bieuexiong
	 * @date 2016-6-6
	 */
    //待刷卡数据加入事务  309603
    @Transactional
    @Override
    public void ecsAddWaybill(WSCEntity wscEntity,WaybillPickupInfoDto waybill, CurrentInfo currentInfo){
        if (SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__CARD.equals(waybill.getPaidMethod())) {
            wscManageService.payWscEntityForESC(wscEntity);
        }
        this.ecsAddWaybill(waybill, currentInfo);
    }

	@Transactional
	@Override
	public void ecsAddWaybill(WaybillPickupInfoDto waybill, CurrentInfo currentInfo){
		this.addWaybill(waybill, currentInfo);
	}
	
	/**
	 * 快递系统转寄开单
	 * @author foss-231434-bieuexiong
	 * @date 2016-6-6
	 */
    //待刷卡数据加入事务 309603
    @Transactional
    @Override
    public void ecsToChangeTermsPayment(WSCEntity wscEntity, WaybillPickupInfoDto waybill, WaybillPickupInfoDto oldWaybill, CurrentInfo currentInfo, boolean bl) {
        if (SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__CARD.equals(waybill.getPaidMethod())) {
            wscManageService.payWscEntityForESC(wscEntity);
        }
        this.ecsToChangeTermsPayment(waybill, oldWaybill, currentInfo, bl);
    }

	@Transactional
	@Override
	public void ecsToChangeTermsPayment(WaybillPickupInfoDto waybill,WaybillPickupInfoDto oldWaybill,CurrentInfo currentInfo,boolean bl){
		this.toChangeTermsPayment(waybill,oldWaybill, currentInfo, bl);
	}
	
	/**
	 * 转寄退回(签收前)开单
	 * @author foss-yanghang
	 * ECS-327090
	 * @date 2016-4-25 
	 * @param waybill
	 * @param currentInfo
	 * @param bl true代表开单
	 */
	@Override
	public void toChangeTermsPayment(WaybillPickupInfoDto waybill,WaybillPickupInfoDto oldWaybill,CurrentInfo currentInfo,boolean bl){
		// 验证运单输入参数合法性
		this.validAddedWaybillParam(waybill, currentInfo);
		// 校验运转寄退回现金金额, 转寄退回月结金额单个字段的有效性，其中任意一项为空或者小于0
		if (waybill.getPrePayAmountCH() == null
				|| waybill.getPrePayAmountCH().compareTo(BigDecimal.ZERO) < 0
				|| waybill.getPrePayAmountCT() == null
				|| waybill.getPrePayAmountCT().compareTo(BigDecimal.ZERO) < 0) {
			throw new SettlementException("运单部分字段金额不正确，不能继续操作");
		}
		//网上支付金额
		BigDecimal onlinePayment = waybill.getPrePayAmount().subtract(waybill.getPrePayAmountCT().add(waybill.getPrePayAmountCH()));
		// 红冲
		WaybillPickupWriteBackDto dto = this.redDashed(waybill.getWaybillNo(),null, currentInfo,bl,onlinePayment);

		// 通过综合接口获取部门、子公司信息
		// 出发部门
		OrgAdministrativeInfoEntity origOrgEntity = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCode(waybill.getReceiveOrgCode()); 
		// 到达部门
		OrgAdministrativeInfoEntity destOrgEntity = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCode(waybill.getLastLoadOrgCode()); 

		// 当集中接货业务时，缴款部门是车队；非集中接送货为营业部；该部门负责缴款
		//BUG-26676
		//更新组织与提货网点相同则开单组织为收款部门否则更新组织为收款部门
		String collectionOrgCode=null;
		if(oldWaybill == null || (oldWaybill!=null && !waybill.getModifyOrgCode().equals(oldWaybill.getCreateOrgCode()))){
			collectionOrgCode = waybill.getCreateOrgCode();
		} else{
			collectionOrgCode = waybill.getModifyOrgCode();
		}

		OrgAdministrativeInfoEntity collectionOrgEntity = orgAdministrativeInfoService.queryOrgAdministrativeInfoByCode(collectionOrgCode);
		// 设置始发部门名称、子公司编码、子公司名称
		waybill.setReceiveOrgName(origOrgEntity.getName());
		waybill.setReceiveSubsidiaryCode(origOrgEntity.getSubsidiaryCode());
		waybill.setReceiveSubsidiaryName(origOrgEntity.getSubsidiaryName());
		// 设置到达部门名称、子公司编码、子公司名称
		waybill.setLastLoadOrgName(destOrgEntity.getName());
		waybill.setLastLoadSubsidiaryCode(destOrgEntity.getSubsidiaryCode());
		waybill.setLastLoadSubsidiaryName(destOrgEntity.getSubsidiaryName());
		// 设置收款部门名称、子公司编码、子公司名称
		waybill.setCollectionOrgCode(collectionOrgCode);
		waybill.setCollectionOrgName(collectionOrgEntity.getName());
		waybill.setCollectionCompanyCode(collectionOrgEntity.getSubsidiaryCode());
		waybill.setCollectionCompanyName(collectionOrgEntity.getSubsidiaryName());
		// 付款方式
		String paymentType = waybill.getPaidMethod(); 
		// 预付金额（包括现金和欠款）
		//BigDecimal prePayAmount = waybill.getPrePayAmount(); 
		//转寄退回现金金额
		BigDecimal cashAmount = waybill.getPrePayAmountCH();
		//转寄退回月结金额
		BigDecimal monthlyAmount = waybill.getPrePayAmountCT();
		// 转寄退回到付金额（去除代收货款）
		BigDecimal toPayAmount = waybill.getToPayAmount().subtract(waybill.getCodAmount()); 
		
		// 现金收款单
		BillCashCollectionEntity billCashCollectionEntity = null; 
		// 始发应收单
		BillReceivableEntity billReceivableOrig = null; 
		// 到付应收单
		BillReceivableEntity billReceivableDest = null; 
		// 代收货款应收单
		BillReceivableEntity billReceivableCod = null; 
		// 应付装卸费
		BillPayableEntity billPayableSF = null; 
		// 应付代收货款
		BillPayableEntity billPayableCOD = null; 
		// 现金预付费用分摊
		WaybillFeeDto cashprePayFeeDto = new WaybillFeeDto(); 
		// 月结预付费用分摊
		WaybillFeeDto monthlyprePayFeeDto = new WaybillFeeDto(); 
		//网上预付费用分摊
		WaybillFeeDto onlinePaymentFeeDto= new WaybillFeeDto();
		// 到付费用分摊
		WaybillFeeDto toPayFeeDto = new WaybillFeeDto(); 
		
		// 金额拆分
		splitWaybillAmount(waybill, cashprePayFeeDto, monthlyprePayFeeDto, toPayFeeDto, onlinePaymentFeeDto); 
		// 会计时间为分区键，开单时保证各个单据的时间保持一致
		Date now = new Date();
		//ddw
		String status = querydiscountPayable(waybill.getWaybillNo());
				
		// 查询应收单（始发应收、到达应收）
		BillReceivableConditionDto billReceivableConditionDto = new BillReceivableConditionDto(waybill.getWaybillNo());
		BillReceivableConditionDto billReceivableConditionDto1 = new BillReceivableConditionDto(waybill.getWaybillNo());
		//始发月结		
		billReceivableConditionDto.setBillTypes(new String[] {
			SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__ORIGIN_RECEIVABLE
			});
		//始发网上支付
		billReceivableConditionDto1.setBillTypes(new String[] {
				SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__ORIGIN_RECEIVABLE
				});
		//设置付款方式(原单始发网上支付)		
		billReceivableConditionDto1.setPaymentType(SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__ONLINE);
		
		//设置付款方式(原单月结)		
		billReceivableConditionDto.setPaymentType(SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__CREDIT);
		//查询始发月结
		List<BillReceivableEntity> billReceives = billReceivableService.queryBillReceivableMonthlyStatement(billReceivableConditionDto);
		//查询始发网上支付
		List<BillReceivableEntity> billReceives1 = billReceivableService.queryBillReceivableMonthlyStatement(billReceivableConditionDto1);
		// 校验应收单合法性
		billReceivableService.validateWaybillForBillReceivable(billReceives);
		billReceivableService.validateWaybillForBillReceivable(billReceives1);
		// 转寄新单付款时存在情况有：现金/银行卡，月结，到付，现金/银行卡-月结，现金/银行卡-到付，月结-到付,月结-到付-现金
		// 1)现金/银行卡(不存在)
		if (cashAmount.compareTo(BigDecimal.ZERO) == 1 && !bl) { 
			billCashCollectionEntity = this.getBillCashCollectoin(waybill,currentInfo, cashprePayFeeDto, now);
			billCashCollectionService.addBillCashCollection(billCashCollectionEntity, currentInfo);
		}
		//2)网上支付
		if (onlinePayment.compareTo(BigDecimal.ZERO)==1 || !bl) { // 网上支付
			// 红冲网上支付应收单
			if (CollectionUtils.isNotEmpty(billReceives1)) {
				for (BillReceivableEntity entity : billReceives1) {
					// 已签收，不能红冲
					if (entity.getConrevenDate() != null) {
						throw new SettlementException("该单已经被签收，不允许进行红冲应收单操作");
					}
					//354658-判断是否存在折扣单 
 					int count=invoiceRegisterDao.queryDisCountExe(entity.getWaybillNo()); 
 					if(count!=0){ 
 						throw new SettlementException("该单已经被做进折扣单，不允许进行红冲应收单操作"); 
 					} 

					billReceivableService.writeBackBillReceivable(entity,currentInfo);
				}
			}


			// 网上支付类似于始发应收，但不扣减信用额度
			// 生成应收单信息
			waybill.setPaidMethod(SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__ONLINE);
			if(onlinePayment.compareTo(BigDecimal.ZERO)==1){
				billReceivableOrig = this.buildBillReceivableOrig(waybill, onlinePaymentFeeDto, now);				
				//判断是否为快递
				if(SettlementUtil.isPackageProductCode(billReceivableOrig.getProductCode())){
					//ddw，如果折扣单不是已确认的新增有效始发应收单
					if(!SettlementDictionaryConstants.DISCOUNT_BILL_STATUS_CONFIRM.equals(status)){
						billReceivableService.addBillReceivable(billReceivableOrig,	currentInfo);
					}
				}else{
					billReceivableService.addBillReceivable(billReceivableOrig,	currentInfo);
				}
			}
			waybill.setPaidMethod(paymentType);
		}
		// 3)月结
		if (monthlyAmount.compareTo(BigDecimal.ZERO) == 1||!bl) {
			// 红冲应收单
			if (bl && SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__CREDIT.equals(waybill.getRedirectPaidMethod()) && CollectionUtils.isNotEmpty(billReceives) && billReceives.get(0).getVerifyAmount().compareTo(BigDecimal.ZERO) == 1) {
				throw new SettlementException("不允许原单月结，新单月结并且已核销金额大于零");
			}
			//原单始发应收月结，且核销金额大于零并且新开单非月结，那么不红冲原单不生产单据(整体取反意味着其他的情况都要红冲)
			if (!(bl && !SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__CREDIT.equals(waybill.getRedirectPaidMethod()) && (CollectionUtils.isNotEmpty(billReceives) && (billReceives.get(0).getVerifyAmount().compareTo(BigDecimal.ZERO) == 1)))) {
				if (CollectionUtils.isNotEmpty(billReceives)) {
					for (BillReceivableEntity entity : billReceives) {
						// 已签收，不能红冲
						if (entity.getConrevenDate() != null) {
							throw new SettlementException("该单已经被签收，不允许进行红冲应收单操作");
						}
						//354658-判断是否存在折扣单 
	 					int count=invoiceRegisterDao.queryDisCountExe(entity.getWaybillNo()); 
	 					if(count!=0){ 
	 						throw new SettlementException("该单已经被做进折扣单，不允许进行红冲应收单操作"); 
	 					} 
						billReceivableService.writeBackBillReceivable(entity,currentInfo);
					}
				}
				if(monthlyAmount.compareTo(BigDecimal.ZERO) == 1){
	                waybill.setPaidMethod(SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__CREDIT);
					// 生成应收单信息
					billReceivableOrig = this.buildBillReceivableOrig(waybill,monthlyprePayFeeDto, now);					
					// ddw，如果折扣单不是已确认的新增有效始发应收单
					if (!SettlementDictionaryConstants.DISCOUNT_BILL_STATUS_CONFIRM.equals(status)) {
						billReceivableService.addBillReceivable(billReceivableOrig, currentInfo);
					}
					waybill.setPaidMethod(paymentType);
				}
			}
		}
		
		//红冲后开始相应的单据
		// 由于到达应收单和代收货款应收单在空运合票时单据类型和客户信息发生变化
		// 这些蓝单的信息取自红单
		// 到达应收单
		BillReceivableEntity writeBackBillReceivableDest = null; 
		// 代收货款应收单
		BillReceivableEntity writeBackBillReceivableCod = null; 
		if (dto != null && CollectionUtils.isNotEmpty(dto.getWriteBackBillReceivables())) {
			for (BillReceivableEntity entity : dto.getWriteBackBillReceivables()) {
				if (SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__DESTINATION_RECEIVABLE.equals(entity.getBillType())
						|| SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__DESTINATION_PARTIAL_LINE.equals(entity.getBillType())
						|| SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__AIR_AGENCY.equals(entity.getBillType())
						|| SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__DESTINATION_LAND_STOWAGE.equals(entity.getBillType())) {
					writeBackBillReceivableDest = entity;
				} else if (SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__COD_RECEIVABLE.equals(entity.getBillType())
						|| SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__AIR_AGENCY_COD.equals(entity.getBillType())
						|| SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__LAND_STOWAGE_AGENCY_COD.equals(entity.getBillType())) {
					writeBackBillReceivableCod = entity;
				}
			}
		}
		
		// 4)到付
//		if (toPayAmount.compareTo(BigDecimal.ZERO) == 1 && (!isPartnerDept(waybill.getLastLoadOrgCode()) && !dto.isPartnerDeptBeforeChange())) { 
		if (toPayAmount.compareTo(BigDecimal.ZERO) == 1 ) {
			billReceivableDest = this.buildBillReceivableDest(waybill,toPayFeeDto, now, writeBackBillReceivableDest,writeBackBillReceivableCod);
			//判断客户编码为合伙人部门
			if(isPartnerDept(billReceivableDest.getCustomerCode())){
			    billReceivableDest.setCustomerCode(null);
			    billReceivableDest.setCustomerName(null);
			}
			//ddw，如果折扣单不是已确认的新增有效到达应收单
			if(!SettlementDictionaryConstants.DISCOUNT_BILL_STATUS_CONFIRM.equals(status)){
				billReceivableService.addBillReceivable(billReceivableDest, currentInfo);
			}

		}

		// 代收货款金额大于0，则生成代收货款
		if (waybill.getCodAmount() != null && waybill.getCodAmount().compareTo(BigDecimal.ZERO) > 0) {

			// 处理开代收款生成应付单前验证
			validateHandleCod(waybill);
//			if(!isPartnerDept(waybill.getLastLoadOrgCode()) && !dto.isPartnerDeptBeforeChange()){
				// 生成代收货款应收单
				billReceivableCod = buildBillReceivableCOD(waybill, now,writeBackBillReceivableCod, writeBackBillReceivableDest);
				//判断客户编码是否为合伙人部门
	            if(isPartnerDept(billReceivableCod.getCustomerCode())){
	                billReceivableCod.setCustomerCode(null);
	                billReceivableCod.setCustomerName(null);
	            }
				billReceivableService.addBillReceivable(billReceivableCod,currentInfo);
//			}

			// 生成代收货款应付单
			billPayableCOD = buildBillPayableCOD(waybill, now);
			billPayableService.addBillPayable(billPayableCOD, currentInfo);

			// 调用代收货款服务
			this.billPayCODService.addBillCOD(waybill, currentInfo);
		}

		// 装卸费金额大于0，生成装卸费应付单
		if (waybill.getServiceFee() != null
				&& waybill.getServiceFee().compareTo(BigDecimal.ZERO) > 0) {
			if (StringUtils.isEmpty(waybill.getDeliveryCustomerContact())) {
				throw new SettlementException("当运单存在装卸费时，客户联系人不能为空！");
			}

			// 发货客户手机和发货客户电话同时为空时，提示不能操作
			if (StringUtils.isEmpty(waybill.getDeliveryCustomerMobilephone())
					&& StringUtils.isEmpty(waybill.getDeliveryCustomerPhone())) {
				throw new SettlementException("当运单存在装卸费时，联系电话不能为空！");
			}
			billPayableSF = buildBillPayableSF(waybill, now);
			billPayableService.addBillPayable(billPayableSF, currentInfo);
		}
		
	}
	
	
	/**
	 * 金额拆分
	 * 
	 * @author ECS-327090
	 * @date 2016-05-09
	 */
	private void splitWaybillAmount(WaybillPickupInfoDto waybill,
			WaybillFeeDto cashprePayFeeDto, WaybillFeeDto monthlyPrePayFeeDto, WaybillFeeDto toPayFeeDto,WaybillFeeDto onlinePaymentFeeDto) {

		BigDecimal totalFee = waybill.getTotalFee().subtract(
				waybill.getCodAmount()); // 总金额（去除代收货款）
		
		BigDecimal cashAmount = waybill.getPrePayAmountCH();//转寄退回现金金额
		BigDecimal monthlyAmount = waybill.getPrePayAmountCT();//转寄退回月结金额
		
		BigDecimal prePayAmount = waybill.getPrePayAmount(); // 预付金额
		
		BigDecimal onlinePayment=prePayAmount.subtract(monthlyAmount.add(cashAmount));//预付网上支付金额

		BigDecimal toPayAmount = waybill.getToPayAmount().subtract( // 到付
				waybill.getCodAmount()); // 到付金额（去除代收货款）

		// 转寄新单付款时存在情况有：现金/银行卡，月结，到付，现金/银行卡-月结，现金/银行卡-到付，月结-到付
		if (cashAmount.compareTo(BigDecimal.ZERO) == 0 && toPayAmount.compareTo(BigDecimal.ZERO) == 0 && onlinePayment.compareTo(BigDecimal.ZERO) == 0) { //月结
			this.createWaybillFeeDto(waybill, monthlyPrePayFeeDto, monthlyAmount);

		} else if (monthlyAmount.compareTo(BigDecimal.ZERO) == 0 && cashAmount.compareTo(BigDecimal.ZERO) == 0 && onlinePayment.compareTo(BigDecimal.ZERO) == 0) { //到付
			this.createWaybillFeeDto(waybill, toPayFeeDto, toPayAmount);
			
		} else if (cashAmount.compareTo(BigDecimal.ZERO) == 1 && monthlyAmount.compareTo(BigDecimal.ZERO) == 1) {//现金/银行卡-月结
			this.createTwoWaybillFeeDto(waybill, cashprePayFeeDto, totalFee, cashAmount);
			this.createTwoWaybillFeeDto(waybill, monthlyPrePayFeeDto, totalFee,  monthlyAmount);
			if (toPayAmount.compareTo(BigDecimal.ZERO) == 1) {//到付
				this.createTwoWaybillFeeDto(waybill, toPayFeeDto, totalFee,  toPayAmount);
			}
			
		} else if (cashAmount.compareTo(BigDecimal.ZERO) == 1 && toPayAmount.compareTo(BigDecimal.ZERO) == 1) {//现金/银行卡-到付
			this.createTwoWaybillFeeDto(waybill, cashprePayFeeDto, totalFee, cashAmount);
			this.createTwoWaybillFeeDto(waybill, toPayFeeDto, totalFee,  toPayAmount);
			
		} else if (monthlyAmount.compareTo(BigDecimal.ZERO) == 1 && toPayAmount.compareTo(BigDecimal.ZERO) == 1){ //月结-到付
			this.createTwoWaybillFeeDto(waybill, monthlyPrePayFeeDto, totalFee, monthlyAmount);
			this.createTwoWaybillFeeDto(waybill, toPayFeeDto, totalFee,  toPayAmount);
			if (onlinePayment.compareTo(BigDecimal.ZERO) == 1) {//网上支付
				this.createTwoWaybillFeeDto(waybill, onlinePaymentFeeDto, totalFee,  onlinePayment);
			}
		} else if (monthlyAmount.compareTo(BigDecimal.ZERO) == 1 && onlinePayment.compareTo(BigDecimal.ZERO) == 1){ //月结-网上支付
			this.createTwoWaybillFeeDto(waybill, monthlyPrePayFeeDto, totalFee, monthlyAmount);
			this.createTwoWaybillFeeDto(waybill, onlinePaymentFeeDto, totalFee,  onlinePayment);
			
		} else if (toPayAmount.compareTo(BigDecimal.ZERO) == 1 && onlinePayment.compareTo(BigDecimal.ZERO) == 1){ //到付-网上支付
			this.createTwoWaybillFeeDto(waybill, toPayFeeDto, totalFee,  toPayAmount);
			this.createTwoWaybillFeeDto(waybill, onlinePaymentFeeDto, totalFee,  onlinePayment);
			
		} else if (toPayAmount.compareTo(BigDecimal.ZERO) == 0 && onlinePayment.compareTo(BigDecimal.ZERO) == 0 && monthlyAmount.compareTo(BigDecimal.ZERO) == 0 ){ // 现金/银行卡
			logger.info("拆分现金银行卡金额开始");
			this.createWaybillFeeDto(waybill, cashprePayFeeDto, cashAmount);
			logger.info("拆分现金银行卡金额,总金额为："+cashprePayFeeDto.getTotalFee());

		} else if(toPayAmount.compareTo(BigDecimal.ZERO) == 0 && cashAmount.compareTo(BigDecimal.ZERO) == 0 && monthlyAmount.compareTo(BigDecimal.ZERO) == 0){//网上支付
			logger.info("拆分网上支付金额开始");
			this.createWaybillFeeDto(waybill, onlinePaymentFeeDto, onlinePayment);
			logger.info("拆分网上支付金额，总金额为："+onlinePaymentFeeDto.getTotalFee());
		}
		logger.info("金额拆分结束。。。。。");
	}
	
	/**
	 * ECS-327090-2016-05-09
	 * @param waybill
	 * @param payFeeDto
	 * @param totalFee
	 * 
	 */
	private void createWaybillFeeDto (WaybillPickupInfoDto waybill, WaybillFeeDto payFeeDto, BigDecimal totalFee) {
		payFeeDto.setTotalFee(totalFee); // 现金总额
		payFeeDto.setTransportFee(waybill.getTransportFee()); // 公布价运费
		payFeeDto.setPickupFee(waybill.getPickupFee()); // 接货费
		payFeeDto.setDeliveryGoodsFee(waybill.getDeliveryGoodsFee()); // 送货费
		payFeeDto.setPackagingFee(waybill.getPackageFee()); // 包装手续费
		payFeeDto.setCodFee(waybill.getCodFee()); // 代收货款费
		payFeeDto.setInsuranceFee(waybill.getInsuranceFee()); // 保价费
		payFeeDto.setOtherFee(waybill.getOtherFee()); // 其他费用
		payFeeDto.setValueAddFee(waybill.getValueAddFee()); // 增值费用
		payFeeDto.setPromotionsFee(waybill.getPromotionsFee()); // 优惠费用
	}
	
	/**
	 * ECS-327090-2016-05-09
	 * @param waybill
	 * @param payFeeDto
	 * @param totalFee
	 * @param payAmount
	 */
	private void createTwoWaybillFeeDto (WaybillPickupInfoDto waybill, WaybillFeeDto payFeeDto, 
			BigDecimal totalFee, BigDecimal payAmount) {
		payFeeDto.setTotalFee(payAmount);
		//toPayFeeDto.setTotalFee(toPayAmount);

		// 公布价运费：运单公布价运费 × (现付/（总运费））；
		// 接货费：运单接货费 × (现付/（总运费））；
		// 送货费：运单送货费 × (现付/（总运费））；
		// 包装手续费：运单包装手续费 ×(现付/（总运费））；
		// 代收货款手续费：运单代收货款手续费 × (现付/（总运费））；
		// 保价费：运单保价费 × (现付/（总运费））；
		BigDecimal transportFee = waybill.getTransportFee();
		BigDecimal promotionsFee = waybill.getPromotionsFee();
		BigDecimal pickupFee = waybill.getPickupFee();
		BigDecimal deliveryGoodsFee = waybill.getDeliveryGoodsFee();
		BigDecimal packageFee = waybill.getPackageFee();
		BigDecimal codFee = waybill.getCodFee();
		BigDecimal insuranceFee = waybill.getInsuranceFee();

		// 费用精确两位，统一向下取整
		transportFee = transportFee.multiply(payAmount).divide(totalFee,
				DIVDE_NUMBER, BigDecimal.ROUND_FLOOR);
		promotionsFee = promotionsFee.multiply(payAmount).divide(
				totalFee, DIVDE_NUMBER, BigDecimal.ROUND_FLOOR);
		pickupFee = pickupFee.multiply(payAmount).divide(totalFee,
				DIVDE_NUMBER, BigDecimal.ROUND_FLOOR);
		deliveryGoodsFee = deliveryGoodsFee.multiply(payAmount).divide(
				totalFee, DIVDE_NUMBER, BigDecimal.ROUND_FLOOR);
		packageFee = packageFee.multiply(payAmount).divide(totalFee,
				DIVDE_NUMBER, BigDecimal.ROUND_FLOOR);
		codFee = codFee.multiply(payAmount).divide(totalFee,
				DIVDE_NUMBER, BigDecimal.ROUND_FLOOR);
		insuranceFee = insuranceFee.multiply(payAmount).divide(totalFee,
				DIVDE_NUMBER, BigDecimal.ROUND_FLOOR);

		// 除其他费外增值费：接货费+送货费+运单包装手续费+代收货款手续费+保价费
		BigDecimal noOtherValueFee = NumberUtils.sum(pickupFee,
				deliveryGoodsFee, packageFee, codFee, insuranceFee);

		// 其他费用：运单预付运费金额-公布价运费-接货费-送货费-运单包装手续费-代收货款手续费-保价费
		// 公布价费用包含了优惠费用
		BigDecimal otherFee = payAmount.subtract(transportFee).subtract(
				noOtherValueFee);

		// 增值费用：接货费+送货费+运单包装手续费+代收货款手续费+保价费+其他费
		BigDecimal valueAddFee = noOtherValueFee.add(otherFee);

		payFeeDto.setTotalFee(payAmount);
		payFeeDto.setTransportFee(transportFee);
		payFeeDto.setPickupFee(pickupFee);
		payFeeDto.setDeliveryGoodsFee(deliveryGoodsFee);
		payFeeDto.setPackagingFee(packageFee);
		payFeeDto.setCodFee(codFee);
		payFeeDto.setInsuranceFee(insuranceFee);
		payFeeDto.setOtherFee(otherFee);
		payFeeDto.setValueAddFee(valueAddFee);
		payFeeDto.setPromotionsFee(promotionsFee);
	}
	
	
	/**
	 * 
	 * 设置应收单默认初始化属性
	 * @author foss-guxinhua
	 * @date 
	 * @param recEntity
	 */
	private void setReceivableCommonParam(BillReceivableEntity recEntity){
		// 设置对账单号N/A
		recEntity.setStatementBillNo(SettlementConstants.DEFAULT_BILL_NO);
		// 是否有效
		recEntity.setActive(FossConstants.ACTIVE);
		// 是否红单
		recEntity.setIsRedBack(SettlementDictionaryConstants.SETTLEMENT__IS_RED_BACK__NO);
		// 是否初始化
		recEntity.setIsInit(FossConstants.NO);
		// 版本号默认为1
		recEntity.setVersionNo(FossConstants.INIT_VERSION_NO);
		// 生成方式：系统生成
		recEntity.setCreateType(SettlementDictionaryConstants.SETTLEMENT__CREATE_TYPE__AUTO);
	}
 
	/**
	 * 
	 * 生成返货应收单
	 * @param receEntity
	 * @param waybill
	 * @param currentInfo
	 */
	private void createReturnedGoodsBillReceivable(BillReceivableEntity receEntity,WaybillPickupInfoDto waybill,CurrentInfo currentInfo){
		Date date = new Date(); 
		// 生成到付运费应收单
		BillReceivableEntity blueEntity = new BillReceivableEntity();
		BeanUtils.copyProperties(receEntity, blueEntity);
		// 设置Id
		blueEntity.setId(UUIDUtils.getUUID());
		// 设置单号
		blueEntity.setReceivableNo(this.settlementCommonService.getSettlementNoRule(SettlementNoRuleEnum.YS2));
		// 设置通用参数
		this.setReceivableCommonParam(blueEntity);
		// 设置创建时间
		blueEntity.setCreateDate(date);
		// 记账日期
		blueEntity.setAccountDate(date);
		// 客户名称、客户编码、应收部门、应收部门编码、催款部门、催款部门编码
		/*blueEntity.setCustomerCode(waybill.getReceiveCustomerCode());
		blueEntity.setCustomerName(waybill.getReceiveCustomerName());*/
		blueEntity.setReceivableOrgCode(waybill.getLastLoadOrgCode());
		blueEntity.setReceivableOrgName(waybill.getLastLoadOrgName());
		blueEntity.setDunningOrgCode(waybill.getLastLoadOrgCode());
		blueEntity.setDunningOrgName(waybill.getLastLoadOrgName());
		blueEntity.setDestOrgCode(waybill.getLastLoadOrgCode());
		blueEntity.setDestOrgName(waybill.getLastLoadOrgName());
		
		// 调用应收单接口
		this.billReceivableService.addBillReceivable(blueEntity, currentInfo);
	}
	
	/**
	 * 
	 * 判断是否为快递
	 * @param prodectCode
	 * @return
	 */
	private boolean isExpressPackage(String prodectCode){
		if(ProductEntityConstants.PRICING_PRODUCT_EXPRESS_PACKAGE.equals(prodectCode)
			||ProductEntityConstants.PRICING_PRODUCT_ROUND_COUPON_PACKAGE.equals(prodectCode)
			||ProductEntityConstants.ECOMMERCE_PROMOTIONAL_ENJOY_PACKAGE.equals(prodectCode)
			||ProductEntityConstants.PRICING_PRODUCT_EXPRESS_AIR_FREIGHT.equals(prodectCode)
			||SettlementConstants.PRICING_PRODUCT_EXPRESS_INTERNATIONAL_BIAO.equals(prodectCode)
			||SettlementConstants.PRICING_PRODUCT_EXPRESS_INTERNATIONAL_KUAI.equals(prodectCode)
			||SettlementConstants.PRICING_PRODUCT_EXPRESS_CUSTOMS_CLEARANCE_BIAO.equals(prodectCode)
			||SettlementConstants.PRICING_PRODUCT_EXPRESS_CUSTOMS_CLEARANCE_KUAI.equals(prodectCode)){
			return true;
		}else{
			return false;
		}
	}
	/**
	 * 
	 * @param orgCode
	 * @return
	 */
	private boolean isPartnerDept(String orgCode){
		//DDW
		SaleDepartmentEntity entity = saleDepartmentService.querySaleDepartmentInfoByCode(orgCode);
		//判断到达部门是否为合伙人，如果是合伙人则在PTP系统生成应收单
		if(entity != null && FossConstants.YES.equals(entity.getIsLeagueSaleDept())){
			return true;
		}else{
			return false;
		}
	}
	
	/**
	 * @SET
	 * @param grayCustomerService
	 */
	public void setGrayCustomerService(IGrayCustomerService grayCustomerService) {
		this.grayCustomerService = grayCustomerService;
	}
	
	
	private boolean isOldWaybill(WaybillEntity waybillEntity){
		String configString = configurationParamsService.queryConfValueByCode(ConfigurationParamsConstants.PKP_PTP_SIGN_INIT_410);
		long intTime = 0;
		if (StringUtils.isNotBlank(configString)) {
			intTime = com.deppon.foss.util.DateUtils.convert(configString.trim(), com.deppon.foss.util.DateUtils.DATE_TIME_FORMAT).getTime();
		}
        long destTime = waybillEntity.getBillTime().getTime();
        if(destTime < intTime){
        	return true;
        }else{
        	return false;
        }
	}

	public void setCodAuditService(ICodAuditService codAuditService) {
		this.codAuditService = codAuditService;
	}
	
	/**
	 * 处理取消运单
	 * 
	 * 
	 * ECS-327090-2016-05-10
	 * @date 
	 * @param waybillNo
	 * @param currentInfo
	 * @return 红冲的原始单据信息
	 */
	private WaybillPickupWriteBackDto redDashed(String waybillNo,OrgAdministrativeInfoEntity collectionOrgEntity,CurrentInfo currentInfo,boolean bl,BigDecimal onlinePayment) {

		// 坏账校验
		int i = billBadAccountService.queryByWaybillNO(waybillNo);
		if (i > 0) {
			throw new SettlementException("坏账申请审批完成，运单不允许更改");
		}

		//ddw
		String status = querydiscountPayable(waybillNo);
		
		// 红冲的结算单据信息
		WaybillPickupWriteBackDto dto = new WaybillPickupWriteBackDto();
		// 不是新开单则红冲现金收款单
		List<BillCashCollectionEntity> billCashes = billCashCollectionService.queryBySourceBillNOs(Arrays.asList(waybillNo),
				SettlementDictionaryConstants.BILL_CASH_COLLECTION__SOURCE_BILL_TYPE__WAYBILL,FossConstants.ACTIVE);
		if(!bl){				
			// 校验现金收款单
			billCashCollectionService.validateWaybillForBillCashCollection(billCashes);	
			// 红冲现金收款单
			if (CollectionUtils.isNotEmpty(billCashes)) {
				for (BillCashCollectionEntity entity : billCashes) {
					// 已签收，不能红冲
					if (entity.getConrevenDate() != null) {
						throw new SettlementException("该单已经被签收，不允许进行红冲现金收款单操作");
					}
					
					//当集中接货时，红单的现金收款单的收款部门是发更改的部门
					if(collectionOrgEntity != null){
						entity.setCollectionOrgCode(collectionOrgEntity.getCode());
						entity.setCollectionOrgName(collectionOrgEntity.getName());
					}
	
					billCashCollectionService.writeBackBillCashCollection(entity,currentInfo);
				}
			}
			dto.setWriteBackBillCashCollections(billCashes); // 红冲的现金收款单
		}

		// 查询应收单（始发应收、到达应收）
		BillReceivableConditionDto billReceivableConditionDto = new BillReceivableConditionDto(waybillNo);
		//ddw,如果折扣单已经确认，不红冲始发应收和到达应收
		if(SettlementDictionaryConstants.DISCOUNT_BILL_STATUS_CONFIRM.equals(status)){
			billReceivableConditionDto.setBillTypes(new String[] {
				SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__DESTINATION_PARTIAL_LINE,
				SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__AIR_AGENCY,
				SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__COD_RECEIVABLE,
				SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__AIR_AGENCY_COD,
				SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__DESTINATION_LAND_STOWAGE,
				SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__LAND_STOWAGE_AGENCY_COD});
		}else{
			billReceivableConditionDto.setBillTypes(new String[] {
				//SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__ORIGIN_RECEIVABLE,
				SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__DESTINATION_RECEIVABLE,
				SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__DESTINATION_PARTIAL_LINE,
				SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__AIR_AGENCY,
				SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__COD_RECEIVABLE,
				SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__AIR_AGENCY_COD,
				SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__DESTINATION_LAND_STOWAGE,
				SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__LAND_STOWAGE_AGENCY_COD});
		}
		List<BillReceivableEntity> billReceives = billReceivableService.queryBillReceivableByCondition(billReceivableConditionDto);

		// 校验应收单合法性
		billReceivableService.validateWaybillForBillReceivable(billReceives);

		//更改前到达部门是否合伙人
//		boolean isPartnerDeptBeforeChange = false;

		// 红冲应收单，包括代收货款
		if (CollectionUtils.isNotEmpty(billReceives)) {
			for (BillReceivableEntity entity : billReceives) {
				//网上支付金额大于零则红冲
				if((entity.getPaymentType().equals(SettlementDictionaryConstants.SETTLEMENT__PAYMENT_TYPE__ONLINE)&&onlinePayment.compareTo(BigDecimal.ZERO)!=1)){
					continue;
				}
				// 已签收，不能红冲
				if (entity.getConrevenDate() != null) {
					throw new SettlementException("该单已经被签收，不允许进行红冲应收单操作");
				}

				//用应收单的到达部门判断是否合伙人
				//判断应收单到达部门是否合伙人部门，是：不红冲到达应收单、代收货款应收单；否：全部红冲
//				isPartnerDeptBeforeChange = isPartnerDept(entity.getDestOrgCode());
//				if(!isPartnerDeptBeforeChange){
					billReceivableService.writeBackBillReceivable(entity,currentInfo);
//				}else{
//					if(!(entity.getBillType().equals(SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__DESTINATION_RECEIVABLE)
//							||entity.getBillType().equals(SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__COD_RECEIVABLE)))
//					billReceivableService.writeBackBillReceivable(entity,currentInfo);
//				}
				
			}
		}

		// 查询应付单（装卸费应付）
		BillPayableConditionDto billPayableConditionDto = new BillPayableConditionDto(waybillNo);
		billPayableConditionDto.setBillTypes(new String[] {
						SettlementDictionaryConstants.BILL_PAYABLE__BILL_TYPE__SERVICE_FEE,
						SettlementDictionaryConstants.BILL_PAYABLE__BILL_TYPE__ACCOUNT_PAYABLE_COD,
						SettlementDictionaryConstants.BILL_PAYABLE__BILL_TYPE__FREIGHT_DISCOUNT});//添加零担事后折应付,ddw
		List<BillPayableEntity> billPayables = billPayableService.queryBillPayableByCondition(billPayableConditionDto);

		// 校验应付单合法性
		billPayableService.validateWaybillForBillPayable(billPayables);

		// 红冲应付单，包括代收货款
		if (CollectionUtils.isNotEmpty(billPayables)) {
			for (BillPayableEntity entity : billPayables) {
				// 已签收，不能红冲
				if (entity.getSignDate() != null) {
					throw new SettlementException("该单已经被签收，不允许进行红冲应付单操作");
				}

				billPayableService.writeBackBillPayable(entity, currentInfo);
			}
		}

		// 作废代收货款单
		CODEntity codEntity = codCommonService.queryByWaybill(waybillNo);
		if (codEntity != null && FossConstants.ACTIVE.equals(codEntity.getActive())) {
			this.billPayCODService.cancelBillCOD(codEntity, currentInfo);
		}
				
		dto.setWriteBackBillReceivables(billReceives); // 红冲的应收单
		dto.setWriteBackBillPayables(billPayables); // 红冲的应付单
		dto.setWriteBackCOD(codEntity); // 红冲的代收货款
//		dto.setPartnerDeptBeforeChange(isPartnerDeptBeforeChange);//更改前到达部门是否合伙人
		return dto;
	}

	/**
	 * 悟空单据处理取消运单
	 * 
	 * @author foss-231434-bieyexiong
	 * @date 2016-11-02
	 * @param waybillNo
	 * @param currentInfo
	 * @return 红冲的原始单据信息
	 */
	@Override
	public WaybillPickupWriteBackDto handleCanceledWaybill(String waybillNo,CurrentInfo currentInfo) {

		// 坏账校验
		int i = billBadAccountService.queryByWaybillNO(waybillNo);
		if (i > 0) {
			throw new SettlementException("坏账申请审批完成，运单不允许更改");
		}

		//ddw
		String status = querydiscountPayable(waybillNo);
		// 红冲现金收款单
		List<BillCashCollectionEntity> billCashes = billCashCollectionService
				.queryBySourceBillNOs(
						Arrays.asList(waybillNo),
						SettlementDictionaryConstants.BILL_CASH_COLLECTION__SOURCE_BILL_TYPE__WAYBILL,
						FossConstants.ACTIVE);

		// 校验现金收款单
		billCashCollectionService
		.validateWaybillForBillCashCollection(billCashes);

		// 红冲现金收款单
		if (CollectionUtils.isNotEmpty(billCashes)) {
			for (BillCashCollectionEntity entity : billCashes) {
				// 已签收，不能红冲
				if (entity.getConrevenDate() != null) {
					throw new SettlementException("该单已经被签收，不允许进行红冲现金收款单操作");
				}

				billCashCollectionService.writeBackBillCashCollection(entity,
						currentInfo);
			}
		}

		// 查询应收单（始发应收、到达应收）
		BillReceivableConditionDto billReceivableConditionDto = new BillReceivableConditionDto(waybillNo);
		//ddw,如果折扣单已经确认，不红冲始发应收和到达应收
		if(SettlementDictionaryConstants.DISCOUNT_BILL_STATUS_CONFIRM.equals(status)){
			billReceivableConditionDto.setBillTypes(new String[] {
					SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__DESTINATION_PARTIAL_LINE,
					SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__AIR_AGENCY,
					SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__COD_RECEIVABLE,
					SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__AIR_AGENCY_COD,
					SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__DESTINATION_LAND_STOWAGE,
					SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__LAND_STOWAGE_AGENCY_COD});
		}else{
			billReceivableConditionDto.setBillTypes(new String[] {
					SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__ORIGIN_RECEIVABLE,
					SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__DESTINATION_RECEIVABLE,
					SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__DESTINATION_PARTIAL_LINE,
					SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__AIR_AGENCY,
					SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__COD_RECEIVABLE,
					SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__AIR_AGENCY_COD,
					SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__DESTINATION_LAND_STOWAGE,
					SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__LAND_STOWAGE_AGENCY_COD});
		}
		List<BillReceivableEntity> billReceives = billReceivableService
				.queryBillReceivableByCondition(billReceivableConditionDto);

		// 校验应收单合法性
		billReceivableService.validateWaybillForBillReceivable(billReceives);
		
		//更改前到达部门是否合伙人
		boolean isPartnerDeptBeforeChange = false;
		
		// 红冲应收单，包括代收货款
		if (CollectionUtils.isNotEmpty(billReceives)) {
			for (BillReceivableEntity entity : billReceives) {
				// 已签收，不能红冲
				if (entity.getConrevenDate() != null) {
					throw new SettlementException("该单已经被签收，不允许进行红冲应收单操作");
				}
				
				//用应收单的到达部门判断是否合伙人
				//判断应收单到达部门是否合伙人部门，是：不红冲到达应收单、代收货款应收单；否：全部红冲
				isPartnerDeptBeforeChange = isPartnerDept(entity.getDestOrgCode());
				if(!isPartnerDeptBeforeChange){
					billReceivableService.writeBackBillReceivable(entity,currentInfo);
				}else{
					if(!(entity.getBillType().equals(SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__DESTINATION_RECEIVABLE)
							||entity.getBillType().equals(SettlementDictionaryConstants.BILL_RECEIVABLE__BILL_TYPE__COD_RECEIVABLE)))
						billReceivableService.writeBackBillReceivable(entity,currentInfo);
				}
			}
		}

		// 查询应付单（装卸费应付）
		BillPayableConditionDto billPayableConditionDto = new BillPayableConditionDto(
				waybillNo);
		billPayableConditionDto
		.setBillTypes(new String[] {
				SettlementDictionaryConstants.BILL_PAYABLE__BILL_TYPE__SERVICE_FEE,
				SettlementDictionaryConstants.BILL_PAYABLE__BILL_TYPE__ACCOUNT_PAYABLE_COD,
				SettlementDictionaryConstants.BILL_PAYABLE__BILL_TYPE__FREIGHT_DISCOUNT});//添加零担事后折应付,ddw
		List<BillPayableEntity> billPayables = billPayableService
				.queryBillPayableByCondition(billPayableConditionDto);

		// 校验应付单合法性
		billPayableService.validateWaybillForBillPayable(billPayables);

		// 红冲应付单，包括代收货款
		if (CollectionUtils.isNotEmpty(billPayables)) {
			for (BillPayableEntity entity : billPayables) {
				// 已签收，不能红冲
				if (entity.getSignDate() != null) {
					throw new SettlementException("该单已经被签收，不允许进行红冲应付单操作");
				}

				billPayableService.writeBackBillPayable(entity, currentInfo);
			}
		}

		// 作废代收货款单
		CODEntity codEntity = codCommonService.queryByWaybill(waybillNo);
		if (codEntity != null
				&& FossConstants.ACTIVE.equals(codEntity.getActive())) {
			this.billPayCODService.cancelBillCOD(codEntity, currentInfo);
		}

		// 红冲的结算单据信息
		WaybillPickupWriteBackDto dto = new WaybillPickupWriteBackDto();

		dto.setWriteBackBillCashCollections(billCashes); // 红冲的现金收款单
		dto.setWriteBackBillReceivables(billReceives); // 红冲的应收单
		dto.setWriteBackBillPayables(billPayables); // 红冲的应付单
		dto.setWriteBackCOD(codEntity); // 红冲的代收货款
		dto.setPartnerDeptBeforeChange(isPartnerDeptBeforeChange);//更改前到达部门是否合伙人

		return dto;
	}
	
	/*public void setActualFreightDao(IActualFreightDao actualFreightDao) {		this.actualFreightDao = actualFreightDao;
	}*/
	
	public void setEcsFossErrorLogJobService(
			IEcsFossErrorLogJobService ecsFossErrorLogJobService) {
		this.ecsFossErrorLogJobService = ecsFossErrorLogJobService;
	}
 public void setWaybillApplyStatusService(IWaybillApplyStatusService waybillApplyStatusService) {
  this.waybillApplyStatusService = waybillApplyStatusService;
 }

 public void setWaybillDetailService(IWaybillDetailService waybillDetailService) {
  this.waybillDetailService = waybillDetailService;
 }

 public void setMergeWaybillService(IMergeWaybillService mergeWaybillService) {
  this.mergeWaybillService = mergeWaybillService;
 }

 public void setInvoiceRegisterDao(IInvoiceRegisterDao invoiceRegisterDao) {
	this.invoiceRegisterDao = invoiceRegisterDao;
 }
 
}
